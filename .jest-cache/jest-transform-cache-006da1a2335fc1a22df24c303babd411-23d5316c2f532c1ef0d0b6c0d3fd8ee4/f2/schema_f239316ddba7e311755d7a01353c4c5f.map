{"version":3,"sources":["/Users/stefanbekker/projects/fancy-planties/src/lib/db/schema.ts"],"sourcesContent":["import { pgTable, serial, text, timestamp, integer, boolean, jsonb, index, uniqueIndex } from 'drizzle-orm/pg-core';\nimport { relations } from 'drizzle-orm';\n\n// Users table\nexport const users = pgTable('users', {\n  id: serial('id').primaryKey(),\n  email: text('email').notNull().unique(),\n  hashedPassword: text('hashed_password').notNull(),\n  name: text('name').notNull(),\n  isCurator: boolean('is_curator').default(false).notNull(),\n  isEmailVerified: boolean('is_email_verified').default(false).notNull(),\n  createdAt: timestamp('created_at').defaultNow().notNull(),\n  updatedAt: timestamp('updated_at').defaultNow().notNull(),\n}, (table) => ({\n  // Index for email verification status\n  emailVerifiedIdx: index('users_email_verified_idx').on(table.isEmailVerified),\n}));\n\n// Email verification codes table\nexport const emailVerificationCodes = pgTable('email_verification_codes', {\n  id: serial('id').primaryKey(),\n  userId: integer('user_id').notNull().references(() => users.id, { onDelete: 'cascade' }),\n  code: text('code').notNull(),\n  expiresAt: timestamp('expires_at').notNull(),\n  createdAt: timestamp('created_at').defaultNow().notNull(),\n  attemptsUsed: integer('attempts_used').default(0).notNull(),\n}, (table) => ({\n  // Indexes for email verification code queries\n  userIdIdx: index('email_verification_codes_user_id_idx').on(table.userId),\n  expiresAtIdx: index('email_verification_codes_expires_at_idx').on(table.expiresAt),\n  // Unique constraint to ensure one active code per user\n  userActiveCodeUnique: uniqueIndex('email_verification_codes_user_active_unique').on(table.userId, table.expiresAt),\n}));\n\n// Sessions table for Lucia auth\nexport const sessions = pgTable('sessions', {\n  id: text('id').primaryKey(),\n  userId: integer('user_id').notNull().references(() => users.id),\n  expiresAt: timestamp('expires_at', { withTimezone: true, mode: 'date' }).notNull(),\n}, (table) => ({\n  // Indexes for session management\n  userIdIdx: index('sessions_user_id_idx').on(table.userId),\n  expiresAtIdx: index('sessions_expires_at_idx').on(table.expiresAt),\n}));\n\n// Plants table (taxonomy)\nexport const plants = pgTable('plants', {\n  id: serial('id').primaryKey(),\n  family: text('family').notNull(),\n  genus: text('genus').notNull(),\n  species: text('species').notNull(),\n  cultivar: text('cultivar'), // New separate cultivar field\n  commonName: text('common_name').notNull(),\n  careInstructions: text('care_instructions'),\n  defaultImage: text('default_image'),\n  createdBy: integer('created_by').references(() => users.id),\n  isVerified: boolean('is_verified').default(false).notNull(),\n  createdAt: timestamp('created_at').defaultNow().notNull(),\n  updatedAt: timestamp('updated_at').defaultNow().notNull(),\n}, (table) => ({\n  // Indexes for plant taxonomy search\n  familyIdx: index('plants_family_idx').on(table.family),\n  genusIdx: index('plants_genus_idx').on(table.genus),\n  speciesIdx: index('plants_species_idx').on(table.species),\n  cultivarIdx: index('plants_cultivar_idx').on(table.cultivar), // New index for cultivar search\n  commonNameIdx: index('plants_common_name_idx').on(table.commonName),\n  // Unique constraint for taxonomy combination (including cultivar)\n  taxonomyUnique: uniqueIndex('plants_taxonomy_unique').on(table.family, table.genus, table.species, table.cultivar),\n  // Index for verified plants\n  verifiedIdx: index('plants_verified_idx').on(table.isVerified),\n}));\n\n// Plant instances table\nexport const plantInstances = pgTable('plant_instances', {\n  id: serial('id').primaryKey(),\n  userId: integer('user_id').notNull().references(() => users.id),\n  plantId: integer('plant_id').notNull().references(() => plants.id),\n  nickname: text('nickname').notNull(),\n  location: text('location').notNull(),\n  lastFertilized: timestamp('last_fertilized'),\n  fertilizerSchedule: text('fertilizer_schedule').notNull(),\n  fertilizerDue: timestamp('fertilizer_due'),\n  lastRepot: timestamp('last_repot'),\n  notes: text('notes'),\n  images: jsonb('images').$type<string[]>().default([]).notNull(),\n  isActive: boolean('is_active').default(true).notNull(),\n  createdAt: timestamp('created_at').defaultNow().notNull(),\n  updatedAt: timestamp('updated_at').defaultNow().notNull(),\n}, (table) => ({\n  // Indexes for performance optimization\n  userIdIdx: index('plant_instances_user_id_idx').on(table.userId),\n  plantIdIdx: index('plant_instances_plant_id_idx').on(table.plantId),\n  fertilizerDueIdx: index('plant_instances_fertilizer_due_idx').on(table.fertilizerDue),\n  isActiveIdx: index('plant_instances_is_active_idx').on(table.isActive),\n  userActiveIdx: index('plant_instances_user_active_idx').on(table.userId, table.isActive),\n  locationIdx: index('plant_instances_location_idx').on(table.location),\n}));\n\n// Propagations table\nexport const propagations = pgTable('propagations', {\n  id: serial('id').primaryKey(),\n  userId: integer('user_id').notNull().references(() => users.id),\n  plantId: integer('plant_id').notNull().references(() => plants.id),\n  parentInstanceId: integer('parent_instance_id').references(() => plantInstances.id), // Now nullable for external sources\n  nickname: text('nickname').notNull(),\n  location: text('location').notNull(),\n  dateStarted: timestamp('date_started').defaultNow().notNull(),\n  status: text('status', { enum: ['started', 'rooting', 'planted', 'established'] }).default('started').notNull(),\n  sourceType: text('source_type', { enum: ['internal', 'external'] }).default('internal').notNull(), // New field\n  externalSource: text('external_source', { enum: ['gift', 'trade', 'purchase', 'other'] }), // New field, nullable\n  externalSourceDetails: text('external_source_details'), // New field for additional details\n  notes: text('notes'),\n  images: jsonb('images').$type<string[]>().default([]).notNull(),\n  createdAt: timestamp('created_at').defaultNow().notNull(),\n  updatedAt: timestamp('updated_at').defaultNow().notNull(),\n}, (table) => ({\n  // Indexes for propagation queries\n  userIdIdx: index('propagations_user_id_idx').on(table.userId),\n  plantIdIdx: index('propagations_plant_id_idx').on(table.plantId),\n  parentInstanceIdIdx: index('propagations_parent_instance_id_idx').on(table.parentInstanceId),\n  statusIdx: index('propagations_status_idx').on(table.status),\n  sourceTypeIdx: index('propagations_source_type_idx').on(table.sourceType), // New index\n  externalSourceIdx: index('propagations_external_source_idx').on(table.externalSource), // New index\n  dateStartedIdx: index('propagations_date_started_idx').on(table.dateStarted),\n  userStatusIdx: index('propagations_user_status_idx').on(table.userId, table.status),\n  userSourceTypeIdx: index('propagations_user_source_type_idx').on(table.userId, table.sourceType), // New index\n}));\n\n// Care history table for tracking all care activities\nexport const careHistory = pgTable('care_history', {\n  id: serial('id').primaryKey(),\n  userId: integer('user_id').notNull().references(() => users.id),\n  plantInstanceId: integer('plant_instance_id').notNull().references(() => plantInstances.id),\n  careType: text('care_type', { \n    enum: ['fertilizer', 'water', 'repot', 'prune', 'inspect', 'other'] \n  }).notNull(),\n  careDate: timestamp('care_date').notNull(),\n  notes: text('notes'),\n  fertilizerType: text('fertilizer_type'), // For fertilizer care type\n  potSize: text('pot_size'), // For repot care type\n  soilType: text('soil_type'), // For repot care type\n  images: jsonb('images').$type<string[]>().default([]).notNull(),\n  createdAt: timestamp('created_at').defaultNow().notNull(),\n  updatedAt: timestamp('updated_at').defaultNow().notNull(),\n}, (table) => ({\n  // Indexes for care history queries\n  userIdIdx: index('care_history_user_id_idx').on(table.userId),\n  plantInstanceIdIdx: index('care_history_plant_instance_id_idx').on(table.plantInstanceId),\n  careTypeIdx: index('care_history_care_type_idx').on(table.careType),\n  careDateIdx: index('care_history_care_date_idx').on(table.careDate),\n  userPlantIdx: index('care_history_user_plant_idx').on(table.userId, table.plantInstanceId),\n  userCareTypeIdx: index('care_history_user_care_type_idx').on(table.userId, table.careType),\n  plantCareDateIdx: index('care_history_plant_care_date_idx').on(table.plantInstanceId, table.careDate),\n}));\n\n// Care guides table for plant care instructions\nexport const careGuides = pgTable('care_guides', {\n  id: serial('id').primaryKey(),\n  userId: integer('user_id').notNull().references(() => users.id),\n  \n  // Taxonomy level - determines which level this guide applies to\n  taxonomyLevel: text('taxonomy_level', { \n    enum: ['family', 'genus', 'species', 'cultivar'] \n  }).notNull(),\n  \n  // Taxonomy identifiers\n  family: text('family'),\n  genus: text('genus'),\n  species: text('species'),\n  cultivar: text('cultivar'),\n  commonName: text('common_name'),\n  \n  // Care guide content\n  title: text('title').notNull(),\n  description: text('description'),\n  \n  // Care categories\n  watering: jsonb('watering').$type<{\n    frequency?: string;\n    method?: string;\n    tips?: string;\n  }>(),\n  \n  fertilizing: jsonb('fertilizing').$type<{\n    frequency?: string;\n    type?: string;\n    schedule?: string;\n    tips?: string;\n  }>(),\n  \n  lighting: jsonb('lighting').$type<{\n    requirements?: string;\n    intensity?: string;\n    duration?: string;\n    tips?: string;\n  }>(),\n  \n  humidity: jsonb('humidity').$type<{\n    requirements?: string;\n    range?: string;\n    tips?: string;\n  }>(),\n  \n  temperature: jsonb('temperature').$type<{\n    range?: string;\n    seasonal?: string;\n    tips?: string;\n  }>(),\n  \n  soil: jsonb('soil').$type<{\n    type?: string;\n    recipe?: string;\n    drainage?: string;\n    ph?: string;\n    tips?: string;\n  }>(),\n  \n  repotting: jsonb('repotting').$type<{\n    frequency?: string;\n    season?: string;\n    potSize?: string;\n    tips?: string;\n  }>(),\n  \n  pruning: jsonb('pruning').$type<{\n    frequency?: string;\n    method?: string;\n    season?: string;\n    tips?: string;\n  }>(),\n  \n  propagation: jsonb('propagation').$type<{\n    methods?: string;\n    season?: string;\n    difficulty?: string;\n    tips?: string;\n  }>(),\n  \n  commonIssues: jsonb('common_issues').$type<{\n    pests?: string[];\n    diseases?: string[];\n    problems?: string[];\n    solutions?: Record<string, string>;\n  }>(),\n  \n  generalTips: text('general_tips'),\n  additionalNotes: text('additional_notes'),\n  tags: jsonb('tags').$type<string[]>().default([]).notNull(),\n  images: jsonb('images').$type<string[]>().default([]).notNull(),\n  \n  // Metadata\n  isPublic: boolean('is_public').default(false).notNull(),\n  isVerified: boolean('is_verified').default(false).notNull(),\n  createdAt: timestamp('created_at').defaultNow().notNull(),\n  updatedAt: timestamp('updated_at').defaultNow().notNull(),\n}, (table) => ({\n  // Indexes for care guide queries\n  userIdIdx: index('care_guides_user_id_idx').on(table.userId),\n  taxonomyLevelIdx: index('care_guides_taxonomy_level_idx').on(table.taxonomyLevel),\n  familyIdx: index('care_guides_family_idx').on(table.family),\n  genusIdx: index('care_guides_genus_idx').on(table.genus),\n  speciesIdx: index('care_guides_species_idx').on(table.species),\n  cultivarIdx: index('care_guides_cultivar_idx').on(table.cultivar),\n  commonNameIdx: index('care_guides_common_name_idx').on(table.commonName),\n  isPublicIdx: index('care_guides_is_public_idx').on(table.isPublic),\n  isVerifiedIdx: index('care_guides_is_verified_idx').on(table.isVerified),\n  // Composite indexes for taxonomy matching\n  familyGenusIdx: index('care_guides_family_genus_idx').on(table.family, table.genus),\n  genusSpeciesIdx: index('care_guides_genus_species_idx').on(table.genus, table.species),\n  speciesCultivarIdx: index('care_guides_species_cultivar_idx').on(table.species, table.cultivar),\n  // Unique constraint for user + taxonomy combination\n  userTaxonomyUnique: uniqueIndex('care_guides_user_taxonomy_unique').on(\n    table.userId, table.taxonomyLevel, table.family, table.genus, table.species, table.cultivar\n  ),\n}));\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  plantInstances: many(plantInstances),\n  propagations: many(propagations),\n  sessions: many(sessions),\n  createdPlants: many(plants),\n  careHistory: many(careHistory),\n  careGuides: many(careGuides),\n  emailVerificationCodes: many(emailVerificationCodes),\n}));\n\nexport const plantsRelations = relations(plants, ({ many, one }) => ({\n  instances: many(plantInstances),\n  propagations: many(propagations),\n  createdBy: one(users, {\n    fields: [plants.createdBy],\n    references: [users.id],\n  }),\n}));\n\nexport const plantInstancesRelations = relations(plantInstances, ({ one, many }) => ({\n  user: one(users, {\n    fields: [plantInstances.userId],\n    references: [users.id],\n  }),\n  plant: one(plants, {\n    fields: [plantInstances.plantId],\n    references: [plants.id],\n  }),\n  propagations: many(propagations),\n  careHistory: many(careHistory),\n}));\n\nexport const propagationsRelations = relations(propagations, ({ one }) => ({\n  user: one(users, {\n    fields: [propagations.userId],\n    references: [users.id],\n  }),\n  plant: one(plants, {\n    fields: [propagations.plantId],\n    references: [plants.id],\n  }),\n  parentInstance: one(plantInstances, {\n    fields: [propagations.parentInstanceId],\n    references: [plantInstances.id],\n  }),\n}));\n\nexport const careHistoryRelations = relations(careHistory, ({ one }) => ({\n  user: one(users, {\n    fields: [careHistory.userId],\n    references: [users.id],\n  }),\n  plantInstance: one(plantInstances, {\n    fields: [careHistory.plantInstanceId],\n    references: [plantInstances.id],\n  }),\n}));\n\nexport const sessionsRelations = relations(sessions, ({ one }) => ({\n  user: one(users, {\n    fields: [sessions.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const emailVerificationCodesRelations = relations(emailVerificationCodes, ({ one }) => ({\n  user: one(users, {\n    fields: [emailVerificationCodes.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const careGuidesRelations = relations(careGuides, ({ one }) => ({\n  user: one(users, {\n    fields: [careGuides.userId],\n    references: [users.id],\n  }),\n}));\n\n// Export types\nexport type User = typeof users.$inferSelect;\nexport type NewUser = typeof users.$inferInsert;\nexport type Session = typeof sessions.$inferSelect;\nexport type NewSession = typeof sessions.$inferInsert;\nexport type EmailVerificationCode = typeof emailVerificationCodes.$inferSelect;\nexport type NewEmailVerificationCode = typeof emailVerificationCodes.$inferInsert;\nexport type Plant = typeof plants.$inferSelect;\nexport type NewPlant = typeof plants.$inferInsert;\nexport type PlantInstance = typeof plantInstances.$inferSelect;\nexport type NewPlantInstance = typeof plantInstances.$inferInsert;\nexport type Propagation = typeof propagations.$inferSelect;\nexport type NewPropagation = typeof propagations.$inferInsert;\nexport type CareHistory = typeof careHistory.$inferSelect;\nexport type NewCareHistory = typeof careHistory.$inferInsert;\nexport type CareGuide = typeof careGuides.$inferSelect;\nexport type NewCareGuide = typeof careGuides.$inferInsert;"],"names":["careGuides","careGuidesRelations","careHistory","careHistoryRelations","emailVerificationCodes","emailVerificationCodesRelations","plantInstances","plantInstancesRelations","plants","plantsRelations","propagations","propagationsRelations","sessions","sessionsRelations","users","usersRelations","pgTable","id","serial","primaryKey","email","text","notNull","unique","hashedPassword","name","isCurator","boolean","default","isEmailVerified","createdAt","timestamp","defaultNow","updatedAt","table","emailVerifiedIdx","index","on","userId","integer","references","onDelete","code","expiresAt","attemptsUsed","userIdIdx","expiresAtIdx","userActiveCodeUnique","uniqueIndex","withTimezone","mode","family","genus","species","cultivar","commonName","careInstructions","defaultImage","createdBy","isVerified","familyIdx","genusIdx","speciesIdx","cultivarIdx","commonNameIdx","taxonomyUnique","verifiedIdx","plantId","nickname","location","lastFertilized","fertilizerSchedule","fertilizerDue","lastRepot","notes","images","jsonb","$type","isActive","plantIdIdx","fertilizerDueIdx","isActiveIdx","userActiveIdx","locationIdx","parentInstanceId","dateStarted","status","enum","sourceType","externalSource","externalSourceDetails","parentInstanceIdIdx","statusIdx","sourceTypeIdx","externalSourceIdx","dateStartedIdx","userStatusIdx","userSourceTypeIdx","plantInstanceId","careType","careDate","fertilizerType","potSize","soilType","plantInstanceIdIdx","careTypeIdx","careDateIdx","userPlantIdx","userCareTypeIdx","plantCareDateIdx","taxonomyLevel","title","description","watering","fertilizing","lighting","humidity","temperature","soil","repotting","pruning","propagation","commonIssues","generalTips","additionalNotes","tags","isPublic","taxonomyLevelIdx","isPublicIdx","isVerifiedIdx","familyGenusIdx","genusSpeciesIdx","speciesCultivarIdx","userTaxonomyUnique","relations","many","createdPlants","one","instances","fields","user","plant","parentInstance","plantInstance"],"mappings":"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"}