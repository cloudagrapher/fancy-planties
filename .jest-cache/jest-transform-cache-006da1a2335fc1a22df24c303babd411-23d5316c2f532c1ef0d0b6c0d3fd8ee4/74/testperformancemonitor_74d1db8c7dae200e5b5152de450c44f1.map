{"version":3,"sources":["/Users/stefanbekker/projects/fancy-planties/src/test-utils/performance/test-performance-monitor.ts"],"sourcesContent":["/**\n * Test Performance Monitor\n * \n * Provides utilities for monitoring and optimizing test execution performance.\n */\n\ninterface TestPerformanceMetrics {\n  testName: string;\n  duration: number;\n  memoryUsage: NodeJS.MemoryUsage;\n  timestamp: Date;\n  status: 'passed' | 'failed' | 'skipped';\n}\n\ninterface TestSuiteMetrics {\n  suiteName: string;\n  totalTests: number;\n  totalDuration: number;\n  averageDuration: number;\n  slowestTest: TestPerformanceMetrics | null;\n  fastestTest: TestPerformanceMetrics | null;\n  memoryPeak: number;\n}\n\nclass TestPerformanceMonitor {\n  private metrics: TestPerformanceMetrics[] = [];\n  private suiteStartTime: number = 0;\n  private testStartTime: number = 0;\n  private currentTestName: string = '';\n\n  /**\n   * Start monitoring a test suite\n   */\n  startSuite(suiteName: string): void {\n    this.suiteStartTime = performance.now();\n    console.log(`üìä Starting performance monitoring for suite: ${suiteName}`);\n  }\n\n  /**\n   * Start monitoring an individual test\n   */\n  startTest(testName: string): void {\n    this.currentTestName = testName;\n    this.testStartTime = performance.now();\n  }\n\n  /**\n   * End monitoring an individual test\n   */\n  endTest(status: 'passed' | 'failed' | 'skipped' = 'passed'): void {\n    const duration = performance.now() - this.testStartTime;\n    const memoryUsage = process.memoryUsage();\n\n    const metric: TestPerformanceMetrics = {\n      testName: this.currentTestName,\n      duration,\n      memoryUsage,\n      timestamp: new Date(),\n      status,\n    };\n\n    this.metrics.push(metric);\n\n    // Log slow tests (> 1 second)\n    if (duration > 1000) {\n      console.warn(`‚ö†Ô∏è  Slow test detected: ${this.currentTestName} (${duration.toFixed(2)}ms)`);\n    }\n  }\n\n  /**\n   * End monitoring a test suite and generate report\n   */\n  endSuite(suiteName: string): TestSuiteMetrics {\n    const totalDuration = performance.now() - this.suiteStartTime;\n    const suiteMetrics = this.generateSuiteMetrics(suiteName, totalDuration);\n    \n    this.logSuiteReport(suiteMetrics);\n    this.reset();\n    \n    return suiteMetrics;\n  }\n\n  /**\n   * Generate performance metrics for a test suite\n   */\n  private generateSuiteMetrics(suiteName: string, totalDuration: number): TestSuiteMetrics {\n    const testMetrics = this.metrics.filter(m => m.status !== 'skipped');\n    \n    const slowestTest = testMetrics.reduce((slowest, current) => \n      !slowest || current.duration > slowest.duration ? current : slowest, \n      null as TestPerformanceMetrics | null\n    );\n\n    const fastestTest = testMetrics.reduce((fastest, current) => \n      !fastest || current.duration < fastest.duration ? current : fastest, \n      null as TestPerformanceMetrics | null\n    );\n\n    const memoryPeak = Math.max(...this.metrics.map(m => m.memoryUsage.heapUsed));\n    const averageDuration = testMetrics.length > 0 \n      ? testMetrics.reduce((sum, m) => sum + m.duration, 0) / testMetrics.length \n      : 0;\n\n    return {\n      suiteName,\n      totalTests: this.metrics.length,\n      totalDuration,\n      averageDuration,\n      slowestTest,\n      fastestTest,\n      memoryPeak,\n    };\n  }\n\n  /**\n   * Log performance report for a test suite\n   */\n  private logSuiteReport(metrics: TestSuiteMetrics): void {\n    console.log('\\nüìà Test Performance Report');\n    console.log('‚ïê'.repeat(50));\n    console.log(`Suite: ${metrics.suiteName}`);\n    console.log(`Total Tests: ${metrics.totalTests}`);\n    console.log(`Total Duration: ${metrics.totalDuration.toFixed(2)}ms`);\n    console.log(`Average Test Duration: ${metrics.averageDuration.toFixed(2)}ms`);\n    \n    if (metrics.slowestTest) {\n      console.log(`Slowest Test: ${metrics.slowestTest.testName} (${metrics.slowestTest.duration.toFixed(2)}ms)`);\n    }\n    \n    if (metrics.fastestTest) {\n      console.log(`Fastest Test: ${metrics.fastestTest.testName} (${metrics.fastestTest.duration.toFixed(2)}ms)`);\n    }\n    \n    console.log(`Peak Memory Usage: ${(metrics.memoryPeak / 1024 / 1024).toFixed(2)}MB`);\n    console.log('‚ïê'.repeat(50));\n  }\n\n  /**\n   * Reset metrics for next suite\n   */\n  private reset(): void {\n    this.metrics = [];\n    this.suiteStartTime = 0;\n    this.testStartTime = 0;\n    this.currentTestName = '';\n  }\n\n  /**\n   * Get current metrics\n   */\n  getMetrics(): TestPerformanceMetrics[] {\n    return [...this.metrics];\n  }\n}\n\n// Global instance for easy access\nexport const testPerformanceMonitor = new TestPerformanceMonitor();\n\n/**\n * Jest helper to automatically monitor test performance\n */\nexport function withPerformanceMonitoring(suiteName: string) {\n  beforeAll(() => {\n    testPerformanceMonitor.startSuite(suiteName);\n  });\n\n  beforeEach(() => {\n    const testName = expect.getState().currentTestName || 'unknown';\n    testPerformanceMonitor.startTest(testName);\n  });\n\n  afterEach(() => {\n    const testState = expect.getState();\n    const status = testState.assertionCalls > 0 ? 'passed' : 'skipped';\n    testPerformanceMonitor.endTest(status);\n  });\n\n  afterAll(() => {\n    testPerformanceMonitor.endSuite(suiteName);\n  });\n}\n\n/**\n * Utility to measure async operation performance\n */\nexport async function measureAsyncOperation<T>(\n  operation: () => Promise<T>,\n  operationName: string\n): Promise<{ result: T; duration: number; memoryDelta: number }> {\n  const startMemory = process.memoryUsage().heapUsed;\n  const startTime = performance.now();\n  \n  const result = await operation();\n  \n  const endTime = performance.now();\n  const endMemory = process.memoryUsage().heapUsed;\n  \n  const duration = endTime - startTime;\n  const memoryDelta = endMemory - startMemory;\n  \n  console.log(`‚è±Ô∏è  ${operationName}: ${duration.toFixed(2)}ms, Memory: ${(memoryDelta / 1024).toFixed(2)}KB`);\n  \n  return { result, duration, memoryDelta };\n}\n\n/**\n * Performance thresholds for different types of tests\n */\nexport const PERFORMANCE_THRESHOLDS = {\n  UNIT_TEST_MAX_DURATION: 100, // 100ms\n  INTEGRATION_TEST_MAX_DURATION: 1000, // 1 second\n  API_TEST_MAX_DURATION: 2000, // 2 seconds\n  DATABASE_TEST_MAX_DURATION: 3000, // 3 seconds\n  MAX_MEMORY_USAGE_MB: 100, // 100MB per test\n} as const;\n\n/**\n * Assert that a test meets performance requirements\n */\nexport function assertPerformance(\n  duration: number,\n  memoryUsage: number,\n  testType: keyof typeof PERFORMANCE_THRESHOLDS\n): void {\n  const maxDuration = PERFORMANCE_THRESHOLDS[testType] || PERFORMANCE_THRESHOLDS.UNIT_TEST_MAX_DURATION;\n  const maxMemoryMB = PERFORMANCE_THRESHOLDS.MAX_MEMORY_USAGE_MB;\n  \n  if (duration > maxDuration) {\n    console.warn(`‚ö†Ô∏è  Performance warning: Test exceeded ${maxDuration}ms threshold (${duration.toFixed(2)}ms)`);\n  }\n  \n  const memoryMB = memoryUsage / 1024 / 1024;\n  if (memoryMB > maxMemoryMB) {\n    console.warn(`‚ö†Ô∏è  Memory warning: Test exceeded ${maxMemoryMB}MB threshold (${memoryMB.toFixed(2)}MB)`);\n  }\n}"],"names":["PERFORMANCE_THRESHOLDS","assertPerformance","measureAsyncOperation","testPerformanceMonitor","withPerformanceMonitoring","TestPerformanceMonitor","startSuite","suiteName","suiteStartTime","performance","now","console","log","startTest","testName","currentTestName","testStartTime","endTest","status","duration","memoryUsage","process","metric","timestamp","Date","metrics","push","warn","toFixed","endSuite","totalDuration","suiteMetrics","generateSuiteMetrics","logSuiteReport","reset","testMetrics","filter","m","slowestTest","reduce","slowest","current","fastestTest","fastest","memoryPeak","Math","max","map","heapUsed","averageDuration","length","sum","totalTests","repeat","getMetrics","beforeAll","beforeEach","expect","getState","afterEach","testState","assertionCalls","afterAll","operation","operationName","startMemory","startTime","result","endTime","endMemory","memoryDelta","UNIT_TEST_MAX_DURATION","INTEGRATION_TEST_MAX_DURATION","API_TEST_MAX_DURATION","DATABASE_TEST_MAX_DURATION","MAX_MEMORY_USAGE_MB","testType","maxDuration","maxMemoryMB","memoryMB"],"mappings":"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"}