968f450c4af805a461c8813e5bb503cc
"use strict";

/* istanbul ignore next */
function cov_1zujcacp07() {
  var path = "/Users/stefanbekker/projects/fancy-planties/src/app/api/care/log/route.ts";
  var hash = "bcb49d4458f4735b32a8ac5a70fc41f0a22d4cf1";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/stefanbekker/projects/fancy-planties/src/app/api/care/log/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 20
        }
      },
      "3": {
        start: {
          line: 11,
          column: 16
        },
        end: {
          line: 11,
          column: 38
        }
      },
      "4": {
        start: {
          line: 12,
          column: 17
        },
        end: {
          line: 12,
          column: 55
        }
      },
      "5": {
        start: {
          line: 13,
          column: 21
        },
        end: {
          line: 13,
          column: 69
        }
      },
      "6": {
        start: {
          line: 14,
          column: 21
        },
        end: {
          line: 14,
          column: 71
        }
      },
      "7": {
        start: {
          line: 16,
          column: 4
        },
        end: {
          line: 47,
          column: 5
        }
      },
      "8": {
        start: {
          line: 17,
          column: 25
        },
        end: {
          line: 17,
          column: 65
        }
      },
      "9": {
        start: {
          line: 18,
          column: 21
        },
        end: {
          line: 18,
          column: 41
        }
      },
      "10": {
        start: {
          line: 20,
          column: 27
        },
        end: {
          line: 23,
          column: 10
        }
      },
      "11": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 30,
          column: 9
        }
      },
      "12": {
        start: {
          line: 25,
          column: 12
        },
        end: {
          line: 29,
          column: 15
        }
      },
      "13": {
        start: {
          line: 31,
          column: 23
        },
        end: {
          line: 31,
          column: 92
        }
      },
      "14": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 38,
          column: 9
        }
      },
      "15": {
        start: {
          line: 33,
          column: 12
        },
        end: {
          line: 37,
          column: 15
        }
      },
      "16": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 39,
          column: 61
        }
      },
      "17": {
        start: {
          line: 41,
          column: 8
        },
        end: {
          line: 41,
          column: 52
        }
      },
      "18": {
        start: {
          line: 42,
          column: 8
        },
        end: {
          line: 46,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "POST",
        decl: {
          start: {
            line: 15,
            column: 15
          },
          end: {
            line: 15,
            column: 19
          }
        },
        loc: {
          start: {
            line: 15,
            column: 29
          },
          end: {
            line: 48,
            column: 1
          }
        },
        line: 15
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 24,
            column: 8
          },
          end: {
            line: 30,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 24,
            column: 8
          },
          end: {
            line: 30,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 24
      },
      "1": {
        loc: {
          start: {
            line: 26,
            column: 23
          },
          end: {
            line: 26,
            column: 81
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 26,
            column: 23
          },
          end: {
            line: 26,
            column: 58
          }
        }, {
          start: {
            line: 26,
            column: 62
          },
          end: {
            line: 26,
            column: 81
          }
        }],
        line: 26
      },
      "2": {
        loc: {
          start: {
            line: 32,
            column: 8
          },
          end: {
            line: 38,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 32,
            column: 8
          },
          end: {
            line: 38,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 32
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0
    },
    f: {
      "0": 0,
      "1": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/stefanbekker/projects/fancy-planties/src/app/api/care/log/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport { requireAuthSession } from '@/lib/auth/server';\nimport { CareService } from '@/lib/services/care-service';\nimport { careValidation } from '@/lib/validation/care-schemas';\n\nexport async function POST(request: NextRequest) {\n  try {\n    const { user } = await requireAuthSession();\n    const body = await request.json();\n    \n    // Validate the care form data\n    const validation = careValidation.validateCareForm({\n      ...body,\n      careDate: new Date(body.careDate),\n    });\n    \n    if (!validation.success) {\n      return NextResponse.json(\n        { error: validation.error.issues[0]?.message || 'Invalid care data' },\n        { status: 400 }\n      );\n    }\n    \n    const result = await CareService.logCareEvent(user.id, validation.data);\n    \n    if (!result.success) {\n      return NextResponse.json(\n        { error: result.error },\n        { status: 400 }\n      );\n    }\n    \n    return NextResponse.json(result.careHistory);\n  } catch (error) {\n    console.error('Error logging care:', error);\n    return NextResponse.json(\n      { error: 'Failed to log care event' },\n      { status: 500 }\n    );\n  }\n}"],
      names: ["POST", "request", "user", "requireAuthSession", "body", "json", "validation", "careValidation", "validateCareForm", "careDate", "Date", "success", "NextResponse", "error", "issues", "message", "status", "result", "CareService", "logCareEvent", "id", "data", "careHistory", "console"],
      mappings: ";;;;+BAKsBA;;;eAAAA;;;wBALoB;yBACP;6BACP;6BACG;AAExB,eAAeA,KAAKC,OAAoB;IAC7C,IAAI;QACF,MAAM,EAAEC,IAAI,EAAE,GAAG,MAAMC,IAAAA,2BAAkB;QACzC,MAAMC,OAAO,MAAMH,QAAQI,IAAI;QAE/B,8BAA8B;QAC9B,MAAMC,aAAaC,2BAAc,CAACC,gBAAgB,CAAC;YACjD,GAAGJ,IAAI;YACPK,UAAU,IAAIC,KAAKN,KAAKK,QAAQ;QAClC;QAEA,IAAI,CAACH,WAAWK,OAAO,EAAE;YACvB,OAAOC,oBAAY,CAACP,IAAI,CACtB;gBAAEQ,OAAOP,WAAWO,KAAK,CAACC,MAAM,CAAC,EAAE,EAAEC,WAAW;YAAoB,GACpE;gBAAEC,QAAQ;YAAI;QAElB;QAEA,MAAMC,SAAS,MAAMC,wBAAW,CAACC,YAAY,CAACjB,KAAKkB,EAAE,EAAEd,WAAWe,IAAI;QAEtE,IAAI,CAACJ,OAAON,OAAO,EAAE;YACnB,OAAOC,oBAAY,CAACP,IAAI,CACtB;gBAAEQ,OAAOI,OAAOJ,KAAK;YAAC,GACtB;gBAAEG,QAAQ;YAAI;QAElB;QAEA,OAAOJ,oBAAY,CAACP,IAAI,CAACY,OAAOK,WAAW;IAC7C,EAAE,OAAOT,OAAO;QACdU,QAAQV,KAAK,CAAC,uBAAuBA;QACrC,OAAOD,oBAAY,CAACP,IAAI,CACtB;YAAEQ,OAAO;QAA2B,GACpC;YAAEG,QAAQ;QAAI;IAElB;AACF"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "bcb49d4458f4735b32a8ac5a70fc41f0a22d4cf1"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1zujcacp07 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1zujcacp07();
cov_1zujcacp07().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1zujcacp07().s[1]++;
Object.defineProperty(exports, "POST", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_1zujcacp07().f[0]++;
    cov_1zujcacp07().s[2]++;
    return POST;
  }
});
const _server =
/* istanbul ignore next */
(cov_1zujcacp07().s[3]++, require("next/server"));
const _server1 =
/* istanbul ignore next */
(cov_1zujcacp07().s[4]++, require("../../../../lib/auth/server"));
const _careservice =
/* istanbul ignore next */
(cov_1zujcacp07().s[5]++, require("../../../../lib/services/care-service"));
const _careschemas =
/* istanbul ignore next */
(cov_1zujcacp07().s[6]++, require("../../../../lib/validation/care-schemas"));
async function POST(request) {
  /* istanbul ignore next */
  cov_1zujcacp07().f[1]++;
  cov_1zujcacp07().s[7]++;
  try {
    const {
      user
    } =
    /* istanbul ignore next */
    (cov_1zujcacp07().s[8]++, await (0, _server1.requireAuthSession)());
    const body =
    /* istanbul ignore next */
    (cov_1zujcacp07().s[9]++, await request.json());
    // Validate the care form data
    const validation =
    /* istanbul ignore next */
    (cov_1zujcacp07().s[10]++, _careschemas.careValidation.validateCareForm({
      ...body,
      careDate: new Date(body.careDate)
    }));
    /* istanbul ignore next */
    cov_1zujcacp07().s[11]++;
    if (!validation.success) {
      /* istanbul ignore next */
      cov_1zujcacp07().b[0][0]++;
      cov_1zujcacp07().s[12]++;
      return _server.NextResponse.json({
        error:
        /* istanbul ignore next */
        (cov_1zujcacp07().b[1][0]++, validation.error.issues[0]?.message) ||
        /* istanbul ignore next */
        (cov_1zujcacp07().b[1][1]++, 'Invalid care data')
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1zujcacp07().b[0][1]++;
    }
    const result =
    /* istanbul ignore next */
    (cov_1zujcacp07().s[13]++, await _careservice.CareService.logCareEvent(user.id, validation.data));
    /* istanbul ignore next */
    cov_1zujcacp07().s[14]++;
    if (!result.success) {
      /* istanbul ignore next */
      cov_1zujcacp07().b[2][0]++;
      cov_1zujcacp07().s[15]++;
      return _server.NextResponse.json({
        error: result.error
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1zujcacp07().b[2][1]++;
    }
    cov_1zujcacp07().s[16]++;
    return _server.NextResponse.json(result.careHistory);
  } catch (error) {
    /* istanbul ignore next */
    cov_1zujcacp07().s[17]++;
    console.error('Error logging care:', error);
    /* istanbul ignore next */
    cov_1zujcacp07().s[18]++;
    return _server.NextResponse.json({
      error: 'Failed to log care event'
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMXp1amNhY3AwNyIsImFjdHVhbENvdmVyYWdlIiwicyIsIlBPU1QiLCJyZXF1ZXN0IiwiZiIsInVzZXIiLCJfc2VydmVyMSIsInJlcXVpcmVBdXRoU2Vzc2lvbiIsImJvZHkiLCJqc29uIiwidmFsaWRhdGlvbiIsIl9jYXJlc2NoZW1hcyIsImNhcmVWYWxpZGF0aW9uIiwidmFsaWRhdGVDYXJlRm9ybSIsImNhcmVEYXRlIiwiRGF0ZSIsInN1Y2Nlc3MiLCJiIiwiX3NlcnZlciIsIk5leHRSZXNwb25zZSIsImVycm9yIiwiaXNzdWVzIiwibWVzc2FnZSIsInN0YXR1cyIsInJlc3VsdCIsIl9jYXJlc2VydmljZSIsIkNhcmVTZXJ2aWNlIiwibG9nQ2FyZUV2ZW50IiwiaWQiLCJkYXRhIiwiY2FyZUhpc3RvcnkiLCJjb25zb2xlIl0sInNvdXJjZXMiOlsiL1VzZXJzL3N0ZWZhbmJla2tlci9wcm9qZWN0cy9mYW5jeS1wbGFudGllcy9zcmMvYXBwL2FwaS9jYXJlL2xvZy9yb3V0ZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZXh0UmVxdWVzdCwgTmV4dFJlc3BvbnNlIH0gZnJvbSAnbmV4dC9zZXJ2ZXInO1xuaW1wb3J0IHsgcmVxdWlyZUF1dGhTZXNzaW9uIH0gZnJvbSAnQC9saWIvYXV0aC9zZXJ2ZXInO1xuaW1wb3J0IHsgQ2FyZVNlcnZpY2UgfSBmcm9tICdAL2xpYi9zZXJ2aWNlcy9jYXJlLXNlcnZpY2UnO1xuaW1wb3J0IHsgY2FyZVZhbGlkYXRpb24gfSBmcm9tICdAL2xpYi92YWxpZGF0aW9uL2NhcmUtc2NoZW1hcyc7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBQT1NUKHJlcXVlc3Q6IE5leHRSZXF1ZXN0KSB7XG4gIHRyeSB7XG4gICAgY29uc3QgeyB1c2VyIH0gPSBhd2FpdCByZXF1aXJlQXV0aFNlc3Npb24oKTtcbiAgICBjb25zdCBib2R5ID0gYXdhaXQgcmVxdWVzdC5qc29uKCk7XG4gICAgXG4gICAgLy8gVmFsaWRhdGUgdGhlIGNhcmUgZm9ybSBkYXRhXG4gICAgY29uc3QgdmFsaWRhdGlvbiA9IGNhcmVWYWxpZGF0aW9uLnZhbGlkYXRlQ2FyZUZvcm0oe1xuICAgICAgLi4uYm9keSxcbiAgICAgIGNhcmVEYXRlOiBuZXcgRGF0ZShib2R5LmNhcmVEYXRlKSxcbiAgICB9KTtcbiAgICBcbiAgICBpZiAoIXZhbGlkYXRpb24uc3VjY2Vzcykge1xuICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxuICAgICAgICB7IGVycm9yOiB2YWxpZGF0aW9uLmVycm9yLmlzc3Vlc1swXT8ubWVzc2FnZSB8fCAnSW52YWxpZCBjYXJlIGRhdGEnIH0sXG4gICAgICAgIHsgc3RhdHVzOiA0MDAgfVxuICAgICAgKTtcbiAgICB9XG4gICAgXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgQ2FyZVNlcnZpY2UubG9nQ2FyZUV2ZW50KHVzZXIuaWQsIHZhbGlkYXRpb24uZGF0YSk7XG4gICAgXG4gICAgaWYgKCFyZXN1bHQuc3VjY2Vzcykge1xuICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxuICAgICAgICB7IGVycm9yOiByZXN1bHQuZXJyb3IgfSxcbiAgICAgICAgeyBzdGF0dXM6IDQwMCB9XG4gICAgICApO1xuICAgIH1cbiAgICBcbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24ocmVzdWx0LmNhcmVIaXN0b3J5KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBsb2dnaW5nIGNhcmU6JywgZXJyb3IpO1xuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcbiAgICAgIHsgZXJyb3I6ICdGYWlsZWQgdG8gbG9nIGNhcmUgZXZlbnQnIH0sXG4gICAgICB7IHN0YXR1czogNTAwIH1cbiAgICApO1xuICB9XG59Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7SUFNTTtJQUFBQSxjQUFBLFlBQUFBLENBQUE7TUFBQSxPQUFBQyxjQUFBO0lBQUE7RUFBQTtFQUFBLE9BQUFBLGNBQUE7QUFBQTtBQUFBRCxjQUFBO0FBQUFBLGNBQUEsR0FBQUUsQ0FBQTs7Ozs7OytCQURnQjs7Ozs7O1dBQUFDLElBQUE7Ozs7O2tDQUxvQjs7O2tDQUNQOzs7a0NBQ1A7OztrQ0FDRztBQUV4QixlQUFlQSxLQUFLQyxPQUFvQjtFQUFBO0VBQUFKLGNBQUEsR0FBQUssQ0FBQTtFQUFBTCxjQUFBLEdBQUFFLENBQUE7RUFDN0MsSUFBSTtJQUNGLE1BQU07TUFBRUk7SUFBSSxDQUFFO0lBQUE7SUFBQSxDQUFBTixjQUFBLEdBQUFFLENBQUEsT0FBRyxNQUFNLElBQUFLLFFBQUEsQ0FBQUMsa0JBQWtCO0lBQ3pDLE1BQU1DLElBQUE7SUFBQTtJQUFBLENBQUFULGNBQUEsR0FBQUUsQ0FBQSxPQUFPLE1BQU1FLE9BQUEsQ0FBUU0sSUFBSTtJQUUvQjtJQUNBLE1BQU1DLFVBQUE7SUFBQTtJQUFBLENBQUFYLGNBQUEsR0FBQUUsQ0FBQSxRQUFhVSxZQUFBLENBQUFDLGNBQWMsQ0FBQ0MsZ0JBQWdCLENBQUM7TUFDakQsR0FBR0wsSUFBSTtNQUNQTSxRQUFBLEVBQVUsSUFBSUMsSUFBQSxDQUFLUCxJQUFBLENBQUtNLFFBQVE7SUFDbEM7SUFBQTtJQUFBZixjQUFBLEdBQUFFLENBQUE7SUFFQSxJQUFJLENBQUNTLFVBQUEsQ0FBV00sT0FBTyxFQUFFO01BQUE7TUFBQWpCLGNBQUEsR0FBQWtCLENBQUE7TUFBQWxCLGNBQUEsR0FBQUUsQ0FBQTtNQUN2QixPQUFPaUIsT0FBQSxDQUFBQyxZQUFZLENBQUNWLElBQUksQ0FDdEI7UUFBRVcsS0FBQTtRQUFPO1FBQUEsQ0FBQXJCLGNBQUEsR0FBQWtCLENBQUEsVUFBQVAsVUFBQSxDQUFXVSxLQUFLLENBQUNDLE1BQU0sQ0FBQyxFQUFFLEVBQUVDLE9BQUE7UUFBQTtRQUFBLENBQUF2QixjQUFBLEdBQUFrQixDQUFBLFVBQVc7TUFBb0IsR0FDcEU7UUFBRU0sTUFBQSxFQUFRO01BQUk7SUFFbEI7SUFBQTtJQUFBO01BQUF4QixjQUFBLEdBQUFrQixDQUFBO0lBQUE7SUFFQSxNQUFNTyxNQUFBO0lBQUE7SUFBQSxDQUFBekIsY0FBQSxHQUFBRSxDQUFBLFFBQVMsTUFBTXdCLFlBQUEsQ0FBQUMsV0FBVyxDQUFDQyxZQUFZLENBQUN0QixJQUFBLENBQUt1QixFQUFFLEVBQUVsQixVQUFBLENBQVdtQixJQUFJO0lBQUE7SUFBQTlCLGNBQUEsR0FBQUUsQ0FBQTtJQUV0RSxJQUFJLENBQUN1QixNQUFBLENBQU9SLE9BQU8sRUFBRTtNQUFBO01BQUFqQixjQUFBLEdBQUFrQixDQUFBO01BQUFsQixjQUFBLEdBQUFFLENBQUE7TUFDbkIsT0FBT2lCLE9BQUEsQ0FBQUMsWUFBWSxDQUFDVixJQUFJLENBQ3RCO1FBQUVXLEtBQUEsRUFBT0ksTUFBQSxDQUFPSjtNQUFNLEdBQ3RCO1FBQUVHLE1BQUEsRUFBUTtNQUFJO0lBRWxCO0lBQUE7SUFBQTtNQUFBeEIsY0FBQSxHQUFBa0IsQ0FBQTtJQUFBO0lBQUFsQixjQUFBLEdBQUFFLENBQUE7SUFFQSxPQUFPaUIsT0FBQSxDQUFBQyxZQUFZLENBQUNWLElBQUksQ0FBQ2UsTUFBQSxDQUFPTSxXQUFXO0VBQzdDLEVBQUUsT0FBT1YsS0FBQSxFQUFPO0lBQUE7SUFBQXJCLGNBQUEsR0FBQUUsQ0FBQTtJQUNkOEIsT0FBQSxDQUFRWCxLQUFLLENBQUMsdUJBQXVCQSxLQUFBO0lBQUE7SUFBQXJCLGNBQUEsR0FBQUUsQ0FBQTtJQUNyQyxPQUFPaUIsT0FBQSxDQUFBQyxZQUFZLENBQUNWLElBQUksQ0FDdEI7TUFBRVcsS0FBQSxFQUFPO0lBQTJCLEdBQ3BDO01BQUVHLE1BQUEsRUFBUTtJQUFJO0VBRWxCO0FBQ0YiLCJpZ25vcmVMaXN0IjpbXX0=