{"version":3,"sources":["/Users/stefanbekker/projects/fancy-planties/src/__tests__/integration/email-service-integration.test.ts"],"sourcesContent":["/**\n * Integration test for email service\n * Tests that the email service can be properly instantiated and configured\n */\n\nimport { createEmailService, EmailServiceError } from '@/lib/services/email';\nimport { getEmailErrorMessage } from '@/lib/utils/email-errors';\n\n// Mock environment variables for testing\nconst originalEnv = process.env;\n\nbeforeEach(() => {\n  jest.resetModules();\n  process.env = {\n    ...originalEnv,\n    RESEND_API_KEY: 'test-api-key',\n    FROM_EMAIL: 'test@example.com',\n    FROM_NAME: 'Test App',\n    VERIFICATION_CODE_EXPIRY_MINUTES: '10',\n    MAX_VERIFICATION_ATTEMPTS: '5',\n    RESEND_COOLDOWN_SECONDS: '60',\n    MAX_RESEND_PER_HOUR: '5',\n    NODE_ENV: 'test',\n  };\n});\n\nafterEach(() => {\n  process.env = originalEnv;\n});\n\ndescribe('Email Service Integration', () => {\n  it('should create email service with environment configuration', () => {\n    expect(() => createEmailService()).not.toThrow();\n  });\n\n  it('should throw error when RESEND_API_KEY is missing', () => {\n    delete process.env.RESEND_API_KEY;\n    \n    expect(() => createEmailService()).toThrow('RESEND_API_KEY environment variable is required');\n  });\n\n  it('should use default values when optional env vars are missing', () => {\n    delete process.env.FROM_EMAIL;\n    delete process.env.FROM_NAME;\n    \n    expect(() => createEmailService()).not.toThrow();\n  });\n\n  it('should handle email service errors gracefully', () => {\n    const quotaError = new EmailServiceError('Quota exceeded', 'QUOTA_EXCEEDED');\n    const message = getEmailErrorMessage(quotaError);\n    \n    expect(message).toContain('temporarily unavailable');\n  });\n\n  it('should provide user-friendly error messages', () => {\n    const networkError = new EmailServiceError('Network timeout', 'NETWORK_ERROR');\n    const message = getEmailErrorMessage(networkError);\n    \n    expect(message).toContain('Network error occurred');\n    expect(message).not.toContain('timeout'); // Should not expose technical details\n  });\n});"],"names":["originalEnv","process","env","beforeEach","jest","resetModules","RESEND_API_KEY","FROM_EMAIL","FROM_NAME","VERIFICATION_CODE_EXPIRY_MINUTES","MAX_VERIFICATION_ATTEMPTS","RESEND_COOLDOWN_SECONDS","MAX_RESEND_PER_HOUR","NODE_ENV","afterEach","describe","it","expect","createEmailService","not","toThrow","quotaError","EmailServiceError","message","getEmailErrorMessage","toContain","networkError"],"mappings":"AAAA;;;CAGC;;;;uBAEqD;6BACjB;AAErC,yCAAyC;AACzC,MAAMA,cAAcC,QAAQC,GAAG;AAE/BC,WAAW;IACTC,KAAKC,YAAY;IACjBJ,QAAQC,GAAG,GAAG;QACZ,GAAGF,WAAW;QACdM,gBAAgB;QAChBC,YAAY;QACZC,WAAW;QACXC,kCAAkC;QAClCC,2BAA2B;QAC3BC,yBAAyB;QACzBC,qBAAqB;QACrBC,UAAU;IACZ;AACF;AAEAC,UAAU;IACRb,QAAQC,GAAG,GAAGF;AAChB;AAEAe,SAAS,6BAA6B;IACpCC,GAAG,8DAA8D;QAC/DC,OAAO,IAAMC,IAAAA,yBAAkB,KAAIC,GAAG,CAACC,OAAO;IAChD;IAEAJ,GAAG,qDAAqD;QACtD,OAAOf,QAAQC,GAAG,CAACI,cAAc;QAEjCW,OAAO,IAAMC,IAAAA,yBAAkB,KAAIE,OAAO,CAAC;IAC7C;IAEAJ,GAAG,gEAAgE;QACjE,OAAOf,QAAQC,GAAG,CAACK,UAAU;QAC7B,OAAON,QAAQC,GAAG,CAACM,SAAS;QAE5BS,OAAO,IAAMC,IAAAA,yBAAkB,KAAIC,GAAG,CAACC,OAAO;IAChD;IAEAJ,GAAG,iDAAiD;QAClD,MAAMK,aAAa,IAAIC,wBAAiB,CAAC,kBAAkB;QAC3D,MAAMC,UAAUC,IAAAA,iCAAoB,EAACH;QAErCJ,OAAOM,SAASE,SAAS,CAAC;IAC5B;IAEAT,GAAG,+CAA+C;QAChD,MAAMU,eAAe,IAAIJ,wBAAiB,CAAC,mBAAmB;QAC9D,MAAMC,UAAUC,IAAAA,iCAAoB,EAACE;QAErCT,OAAOM,SAASE,SAAS,CAAC;QAC1BR,OAAOM,SAASJ,GAAG,CAACM,SAAS,CAAC,YAAY,sCAAsC;IAClF;AACF"}