{"version":3,"names":["GET","cov_fugt83zak","f","s","POST","csvImportService","_csvimportservice","CSVImportService","request","user","_server1","validateRequest","b","_server","NextResponse","json","error","status","body","requestSchema","_zod","z","object","file","_csvschemas","csvFileSchema","importType","enum","config","csvImportConfigSchema","partial","optional","parse","result","startImport","userId","id","console","ZodError","details","issues","imports","getUserImports"],"sources":["/Users/stefanbekker/projects/fancy-planties/src/app/api/import/csv/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { validateRequest } from '@/lib/auth/server';\nimport { CSVImportService, type ImportType } from '@/lib/services/csv-import-service';\nimport { csvFileSchema, csvImportConfigSchema } from '@/lib/validation/csv-schemas';\nimport { z } from 'zod';\n\nconst csvImportService = new CSVImportService();\n\n// POST /api/import/csv - Start CSV import\nexport async function POST(request: NextRequest) {\n  try {\n    const { user } = await validateRequest();\n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const body = await request.json();\n    \n    // Validate request body\n    const requestSchema = z.object({\n      file: csvFileSchema,\n      importType: z.enum(['plant_taxonomy', 'plant_instances', 'propagations']),\n      config: csvImportConfigSchema.partial().optional(),\n    });\n\n    const { file, importType, config = {} } = requestSchema.parse(body);\n\n    // Start import\n    const result = await csvImportService.startImport(\n      file,\n      importType as ImportType,\n      { ...config, userId: user.id }\n    );\n\n    return NextResponse.json(result);\n\n  } catch (error) {\n    console.error('CSV import error:', error);\n    \n    if (error instanceof z.ZodError) {\n      return NextResponse.json(\n        { error: 'Validation error', details: error.issues },\n        { status: 400 }\n      );\n    }\n\n    return NextResponse.json(\n      { error: 'Failed to start import' },\n      { status: 500 }\n    );\n  }\n}\n\n// GET /api/import/csv - Get user's imports\nexport async function GET(request: NextRequest) {\n  try {\n    const { user } = await validateRequest();\n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const imports = csvImportService.getUserImports(user.id);\n    return NextResponse.json({ imports });\n\n  } catch (error) {\n    console.error('Get imports error:', error);\n    return NextResponse.json(\n      { error: 'Failed to get imports' },\n      { status: 500 }\n    );\n  }\n}"],"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","ignoreList":[]}