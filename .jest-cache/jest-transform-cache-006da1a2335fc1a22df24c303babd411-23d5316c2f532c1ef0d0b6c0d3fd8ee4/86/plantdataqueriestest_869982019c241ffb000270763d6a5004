ba7fcb632194b6d83756f5df1807bc52
/**
 * Plant Data Database Query Tests
 * Tests plant and plant instance CRUD operations, search, filtering, and relationships
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _plants = require("../../lib/db/queries/plants");
const _plantinstances = require("../../lib/db/queries/plant-instances");
const _planttaxonomy = require("../../lib/db/queries/plant-taxonomy");
const _databasetestmanager = require("../../test-utils/setup/database-test-manager.js");
const _plantfactory = require("../../test-utils/factories/plant-factory.js");
const _userfactory = require("../../test-utils/factories/user-factory.js");
describe('Plant Data Database Queries', ()=>{
    let dbManager;
    beforeEach(()=>{
        dbManager = (0, _databasetestmanager.createDatabaseTestManager)();
        (0, _plantfactory.resetPlantCounters)();
    });
    afterEach(async ()=>{
        await dbManager.cleanup();
    });
    describe('Plant Taxonomy CRUD Operations', ()=>{
        test('should create a new plant taxonomy entry', async ()=>{
            const testUser = (0, _userfactory.createTestUser)();
            const createdUser = await dbManager.createTestUser(testUser);
            const plantData = {
                family: 'Araceae',
                genus: 'Monstera',
                species: 'deliciosa',
                cultivar: null,
                commonName: 'Monstera Deliciosa',
                careInstructions: 'Bright indirect light, water when soil is dry',
                createdBy: createdUser.id,
                isVerified: false
            };
            const plant = await _plants.PlantQueries.create(plantData);
            expect(plant).toBeDefined();
            expect(plant.id).toBeDefined();
            expect(plant.family).toBe('Araceae');
            expect(plant.genus).toBe('Monstera');
            expect(plant.species).toBe('deliciosa');
            expect(plant.commonName).toBe('Monstera Deliciosa');
            expect(plant.createdBy).toBe(createdUser.id);
            expect(plant.isVerified).toBe(false);
            expect(plant.createdAt).toBeInstanceOf(Date);
            expect(plant.updatedAt).toBeInstanceOf(Date);
        });
        test('should retrieve plant by ID', async ()=>{
            const testUser = (0, _userfactory.createTestUser)();
            const createdUser = await dbManager.createTestUser(testUser);
            const plantData = (0, _plantfactory.createTestPlant)({
                createdBy: createdUser.id
            });
            const createdPlant = await _plants.PlantQueries.create(plantData);
            const foundPlant = await _plants.PlantQueries.getById(createdPlant.id);
            expect(foundPlant).toBeDefined();
            expect(foundPlant.id).toBe(createdPlant.id);
            expect(foundPlant.family).toBe(createdPlant.family);
            expect(foundPlant.genus).toBe(createdPlant.genus);
            expect(foundPlant.species).toBe(createdPlant.species);
            expect(foundPlant.commonName).toBe(createdPlant.commonName);
        });
        test('should return null for non-existent plant ID', async ()=>{
            const plant = await _plants.PlantQueries.getById(99999);
            expect(plant).toBeNull();
        });
        test('should update plant taxonomy entry', async ()=>{
            const testUser = (0, _userfactory.createTestUser)();
            const createdUser = await dbManager.createTestUser(testUser);
            const plantData = (0, _plantfactory.createTestPlant)({
                createdBy: createdUser.id
            });
            const createdPlant = await _plants.PlantQueries.create(plantData);
            const updates = {
                commonName: 'Updated Common Name',
                careInstructions: 'Updated care instructions',
                isVerified: true
            };
            const updatedPlant = await _plants.PlantQueries.update(createdPlant.id, updates);
            expect(updatedPlant.commonName).toBe('Updated Common Name');
            expect(updatedPlant.careInstructions).toBe('Updated care instructions');
            expect(updatedPlant.isVerified).toBe(true);
            expect(updatedPlant.updatedAt.getTime()).toBeGreaterThan(createdPlant.updatedAt.getTime());
        });
        test('should check if plant taxonomy already exists', async ()=>{
            const testUser = (0, _userfactory.createTestUser)();
            const createdUser = await dbManager.createTestUser(testUser);
            const plantData = (0, _plantfactory.createTestPlantWithTaxonomy)({
                family: 'Araceae',
                genus: 'Monstera',
                species: 'deliciosa',
                cultivar: null
            }, {
                createdBy: createdUser.id
            });
            await _plants.PlantQueries.create(plantData);
            // Check for existing taxonomy
            const existingPlant = await _plants.PlantQueries.taxonomyExists('Araceae', 'Monstera', 'deliciosa');
            expect(existingPlant).toBeDefined();
            expect(existingPlant.family).toBe('Araceae');
            // Check for non-existing taxonomy
            const nonExistingPlant = await _plants.PlantQueries.taxonomyExists('Araceae', 'Monstera', 'adansonii');
            expect(nonExistingPlant).toBeNull();
        });
        test('should handle cultivar variations in taxonomy existence check', async ()=>{
            const testUser = (0, _userfactory.createTestUser)();
            const createdUser = await dbManager.createTestUser(testUser);
            // Create plant with cultivar
            const plantWithCultivar = (0, _plantfactory.createTestPlantWithTaxonomy)({
                family: 'Araceae',
                genus: 'Monstera',
                species: 'deliciosa',
                cultivar: 'Variegata'
            }, {
                createdBy: createdUser.id
            });
            await _plants.PlantQueries.create(plantWithCultivar);
            // Check for exact match with cultivar
            const exactMatch = await _plants.PlantQueries.taxonomyExists('Araceae', 'Monstera', 'deliciosa', 'Variegata');
            expect(exactMatch).toBeDefined();
            // Check for same species without cultivar
            const withoutCultivar = await _plants.PlantQueries.taxonomyExists('Araceae', 'Monstera', 'deliciosa');
            expect(withoutCultivar).toBeNull(); // Should not match because one has cultivar, one doesn't
        });
    });
    describe('Plant Search and Filtering', ()=>{
        test('should search plants by common name', async ()=>{
            const testUser = (0, _userfactory.createTestUser)();
            const createdUser = await dbManager.createTestUser(testUser);
            // Create test plants
            const monstera = (0, _plantfactory.createTestPlantWithTaxonomy)({
                family: 'Araceae',
                genus: 'Monstera',
                species: 'deliciosa',
                commonName: 'Monstera Deliciosa'
            }, {
                createdBy: createdUser.id
            });
            const pothos = (0, _plantfactory.createTestPlantWithTaxonomy)({
                family: 'Araceae',
                genus: 'Epipremnum',
                species: 'aureum',
                commonName: 'Golden Pothos'
            }, {
                createdBy: createdUser.id
            });
            await _plants.PlantQueries.create(monstera);
            await _plants.PlantQueries.create(pothos);
            // Search by common name
            const monsteraResults = await _plants.PlantQueries.search('Monstera');
            expect(monsteraResults.length).toBeGreaterThan(0);
            expect(monsteraResults.some((p)=>p.commonName.includes('Monstera'))).toBe(true);
            const pothosResults = await _plants.PlantQueries.search('Pothos');
            expect(pothosResults.length).toBeGreaterThan(0);
            expect(pothosResults.some((p)=>p.commonName.includes('Pothos'))).toBe(true);
        });
        test('should search plants by genus and species', async ()=>{
            const testUser = (0, _userfactory.createTestUser)();
            const createdUser = await dbManager.createTestUser(testUser);
            const plant = (0, _plantfactory.createTestPlantWithTaxonomy)({
                family: 'Araceae',
                genus: 'Monstera',
                species: 'deliciosa',
                commonName: 'Monstera Deliciosa'
            }, {
                createdBy: createdUser.id
            });
            await _plants.PlantQueries.create(plant);
            // Search by genus
            const genusResults = await _plants.PlantQueries.search('Monstera');
            expect(genusResults.length).toBeGreaterThan(0);
            expect(genusResults.some((p)=>p.genus === 'Monstera')).toBe(true);
            // Search by species
            const speciesResults = await _plants.PlantQueries.search('deliciosa');
            expect(speciesResults.length).toBeGreaterThan(0);
            expect(speciesResults.some((p)=>p.species === 'deliciosa')).toBe(true);
        });
        test('should get plants by family', async ()=>{
            const testUser = (0, _userfactory.createTestUser)();
            const createdUser = await dbManager.createTestUser(testUser);
            // Create plants in same family
            const monstera = (0, _plantfactory.createTestPlantWithTaxonomy)({
                family: 'Araceae',
                genus: 'Monstera',
                species: 'deliciosa'
            }, {
                createdBy: createdUser.id
            });
            const pothos = (0, _plantfactory.createTestPlantWithTaxonomy)({
                family: 'Araceae',
                genus: 'Epipremnum',
                species: 'aureum'
            }, {
                createdBy: createdUser.id
            });
            await _plants.PlantQueries.create(monstera);
            await _plants.PlantQueries.create(pothos);
            const araceaeResults = await _plants.PlantQueries.getByFamily('Araceae');
            expect(araceaeResults.length).toBe(2);
            expect(araceaeResults.every((p)=>p.family === 'Araceae')).toBe(true);
        });
        test('should perform full-text search', async ()=>{
            const testUser = (0, _userfactory.createTestUser)();
            const createdUser = await dbManager.createTestUser(testUser);
            const plant = (0, _plantfactory.createTestPlantWithTaxonomy)({
                family: 'Araceae',
                genus: 'Monstera',
                species: 'deliciosa',
                commonName: 'Swiss Cheese Plant'
            }, {
                createdBy: createdUser.id
            });
            await _plants.PlantQueries.create(plant);
            // Test full-text search (should fallback to regular search if PostgreSQL full-text fails)
            const results = await _plants.PlantQueries.fullTextSearch('Swiss Cheese');
            expect(results.length).toBeGreaterThan(0);
        });
        test('should get all plants with pagination', async ()=>{
            const testUser = (0, _userfactory.createTestUser)();
            const createdUser = await dbManager.createTestUser(testUser);
            // Create multiple plants
            const plants = [
                (0, _plantfactory.createTestPlantWithTaxonomy)({
                    commonName: 'Plant 1'
                }, {
                    createdBy: createdUser.id
                }),
                (0, _plantfactory.createTestPlantWithTaxonomy)({
                    commonName: 'Plant 2'
                }, {
                    createdBy: createdUser.id
                }),
                (0, _plantfactory.createTestPlantWithTaxonomy)({
                    commonName: 'Plant 3'
                }, {
                    createdBy: createdUser.id
                })
            ];
            for (const plant of plants){
                await _plants.PlantQueries.create(plant);
            }
            // Test pagination
            const firstPage = await _plants.PlantQueries.getAll(0, 2);
            expect(firstPage.length).toBe(2);
            const secondPage = await _plants.PlantQueries.getAll(2, 2);
            expect(secondPage.length).toBeGreaterThanOrEqual(1);
        });
    });
    describe('Plant Instance CRUD Operations', ()=>{
        test('should create a new plant instance', async ()=>{
            const testUser = (0, _userfactory.createTestUser)();
            const createdUser = await dbManager.createTestUser(testUser);
            const plant = (0, _plantfactory.createTestPlant)({
                createdBy: createdUser.id
            });
            const createdPlant = await _plants.PlantQueries.create(plant);
            const instanceData = {
                userId: createdUser.id,
                plantId: createdPlant.id,
                nickname: 'My Monstera',
                location: 'Living Room',
                fertilizerSchedule: 'every_4_weeks',
                notes: 'Beautiful plant with fenestrations',
                images: [],
                isActive: true
            };
            const instance = await _plantinstances.PlantInstanceQueries.create(instanceData);
            expect(instance).toBeDefined();
            expect(instance.id).toBeDefined();
            expect(instance.userId).toBe(createdUser.id);
            expect(instance.plantId).toBe(createdPlant.id);
            expect(instance.nickname).toBe('My Monstera');
            expect(instance.location).toBe('Living Room');
            expect(instance.fertilizerSchedule).toBe('every_4_weeks');
            expect(instance.isActive).toBe(true);
            expect(instance.createdAt).toBeInstanceOf(Date);
        });
        test('should retrieve plant instance by ID with plant data', async ()=>{
            const testUser = (0, _userfactory.createTestUser)();
            const createdUser = await dbManager.createTestUser(testUser);
            const plant = (0, _plantfactory.createTestPlant)({
                createdBy: createdUser.id
            });
            const createdPlant = await _plants.PlantQueries.create(plant);
            const instanceData = (0, _plantfactory.createTestPlantInstance)({
                userId: createdUser.id,
                plantId: createdPlant.id
            });
            const createdInstance = await _plantinstances.PlantInstanceQueries.create(instanceData);
            const foundInstance = await _plantinstances.PlantInstanceQueries.getById(createdInstance.id);
            expect(foundInstance).toBeDefined();
            expect(foundInstance.id).toBe(createdInstance.id);
            expect(foundInstance.plant).toBeDefined();
            expect(foundInstance.plant.id).toBe(createdPlant.id);
            expect(foundInstance.plant.commonName).toBe(createdPlant.commonName);
        });
        test('should get all plant instances for a user', async ()=>{
            const testUser = (0, _userfactory.createTestUser)();
            const createdUser = await dbManager.createTestUser(testUser);
            const plant = (0, _plantfactory.createTestPlant)({
                createdBy: createdUser.id
            });
            const createdPlant = await _plants.PlantQueries.create(plant);
            // Create multiple instances for the user
            const instance1 = (0, _plantfactory.createTestPlantInstance)({
                userId: createdUser.id,
                plantId: createdPlant.id,
                nickname: 'Plant 1'
            });
            const instance2 = (0, _plantfactory.createTestPlantInstance)({
                userId: createdUser.id,
                plantId: createdPlant.id,
                nickname: 'Plant 2'
            });
            await _plantinstances.PlantInstanceQueries.create(instance1);
            await _plantinstances.PlantInstanceQueries.create(instance2);
            const userInstances = await _plantinstances.PlantInstanceQueries.getByUserId(createdUser.id);
            expect(userInstances.length).toBe(2);
            expect(userInstances.every((i)=>i.userId === createdUser.id)).toBe(true);
            expect(userInstances.every((i)=>i.plant)).toBe(true);
        });
        test('should update plant instance', async ()=>{
            const testUser = (0, _userfactory.createTestUser)();
            const createdUser = await dbManager.createTestUser(testUser);
            const plant = (0, _plantfactory.createTestPlant)({
                createdBy: createdUser.id
            });
            const createdPlant = await _plants.PlantQueries.create(plant);
            const instanceData = (0, _plantfactory.createTestPlantInstance)({
                userId: createdUser.id,
                plantId: createdPlant.id
            });
            const createdInstance = await _plantinstances.PlantInstanceQueries.create(instanceData);
            const updates = {
                nickname: 'Updated Nickname',
                location: 'New Location',
                notes: 'Updated notes'
            };
            const updatedInstance = await _plantinstances.PlantInstanceQueries.update(createdInstance.id, updates);
            expect(updatedInstance.nickname).toBe('Updated Nickname');
            expect(updatedInstance.location).toBe('New Location');
            expect(updatedInstance.notes).toBe('Updated notes');
            expect(updatedInstance.updatedAt.getTime()).toBeGreaterThan(createdInstance.updatedAt.getTime());
        });
        test('should deactivate and reactivate plant instance', async ()=>{
            const testUser = (0, _userfactory.createTestUser)();
            const createdUser = await dbManager.createTestUser(testUser);
            const plant = (0, _plantfactory.createTestPlant)({
                createdBy: createdUser.id
            });
            const createdPlant = await _plants.PlantQueries.create(plant);
            const instanceData = (0, _plantfactory.createTestPlantInstance)({
                userId: createdUser.id,
                plantId: createdPlant.id,
                isActive: true
            });
            const createdInstance = await _plantinstances.PlantInstanceQueries.create(instanceData);
            // Deactivate
            const deactivatedInstance = await _plantinstances.PlantInstanceQueries.deactivate(createdInstance.id);
            expect(deactivatedInstance.isActive).toBe(false);
            // Reactivate
            const reactivatedInstance = await _plantinstances.PlantInstanceQueries.reactivate(createdInstance.id);
            expect(reactivatedInstance.isActive).toBe(true);
        });
    });
    describe('Plant Instance Care Management', ()=>{
        test('should log fertilizer application and calculate next due date', async ()=>{
            const testUser = (0, _userfactory.createTestUser)();
            const createdUser = await dbManager.createTestUser(testUser);
            const plant = (0, _plantfactory.createTestPlant)({
                createdBy: createdUser.id
            });
            const createdPlant = await _plants.PlantQueries.create(plant);
            const instanceData = (0, _plantfactory.createTestPlantInstance)({
                userId: createdUser.id,
                plantId: createdPlant.id,
                fertilizerSchedule: '4 weeks',
                lastFertilized: null
            });
            const createdInstance = await _plantinstances.PlantInstanceQueries.create(instanceData);
            const fertilizerDate = new Date();
            const updatedInstance = await _plantinstances.PlantInstanceQueries.logFertilizer(createdInstance.id, fertilizerDate);
            expect(updatedInstance.lastFertilized).toEqual(fertilizerDate);
            expect(updatedInstance.fertilizerDue).toBeDefined();
            // Should be approximately 4 weeks from fertilizer date
            const expectedDue = new Date(fertilizerDate);
            expectedDue.setDate(expectedDue.getDate() + 28);
            const timeDiff = Math.abs(updatedInstance.fertilizerDue.getTime() - expectedDue.getTime());
            expect(timeDiff).toBeLessThan(24 * 60 * 60 * 1000); // Within 24 hours
        });
        test('should log repotting with notes', async ()=>{
            const testUser = (0, _userfactory.createTestUser)();
            const createdUser = await dbManager.createTestUser(testUser);
            const plant = (0, _plantfactory.createTestPlant)({
                createdBy: createdUser.id
            });
            const createdPlant = await _plants.PlantQueries.create(plant);
            const instanceData = (0, _plantfactory.createTestPlantInstance)({
                userId: createdUser.id,
                plantId: createdPlant.id,
                lastRepot: null,
                notes: 'Original notes'
            });
            const createdInstance = await _plantinstances.PlantInstanceQueries.create(instanceData);
            const repotDate = new Date();
            const repotNotes = 'Moved to larger pot with fresh soil';
            const updatedInstance = await _plantinstances.PlantInstanceQueries.logRepot(createdInstance.id, repotDate, repotNotes);
            expect(updatedInstance.lastRepot).toEqual(repotDate);
            expect(updatedInstance.notes).toContain('Original notes');
            expect(updatedInstance.notes).toContain(repotNotes);
            expect(updatedInstance.notes).toContain(repotDate.toDateString());
        });
        test('should get plant instances with overdue fertilizer', async ()=>{
            const testUser = (0, _userfactory.createTestUser)();
            const createdUser = await dbManager.createTestUser(testUser);
            const plant = (0, _plantfactory.createTestPlant)({
                createdBy: createdUser.id
            });
            const createdPlant = await _plants.PlantQueries.create(plant);
            // Create instance with overdue fertilizer
            const overdueDate = new Date();
            overdueDate.setDate(overdueDate.getDate() - 1); // 1 day overdue
            const instanceData = (0, _plantfactory.createTestPlantInstance)({
                userId: createdUser.id,
                plantId: createdPlant.id,
                fertilizerDue: overdueDate,
                isActive: true
            });
            await _plantinstances.PlantInstanceQueries.create(instanceData);
            const overdueInstances = await _plantinstances.PlantInstanceQueries.getOverdueFertilizer(createdUser.id);
            expect(overdueInstances.length).toBe(1);
            expect(overdueInstances[0].fertilizerDue.getTime()).toBeLessThanOrEqual(Date.now());
        });
        test('should get plant instances with fertilizer due soon', async ()=>{
            const testUser = (0, _userfactory.createTestUser)();
            const createdUser = await dbManager.createTestUser(testUser);
            const plant = (0, _plantfactory.createTestPlant)({
                createdBy: createdUser.id
            });
            const createdPlant = await _plants.PlantQueries.create(plant);
            // Create instance with fertilizer due in 3 days
            const dueSoonDate = new Date();
            dueSoonDate.setDate(dueSoonDate.getDate() + 3);
            const instanceData = (0, _plantfactory.createTestPlantInstance)({
                userId: createdUser.id,
                plantId: createdPlant.id,
                fertilizerDue: dueSoonDate,
                isActive: true
            });
            await _plantinstances.PlantInstanceQueries.create(instanceData);
            const dueSoonInstances = await _plantinstances.PlantInstanceQueries.getFertilizerDueSoon(createdUser.id, 7);
            expect(dueSoonInstances.length).toBe(1);
            expect(dueSoonInstances[0].fertilizerDue.getTime()).toBeGreaterThan(Date.now());
        });
    });
    describe('Plant Instance Search and Filtering', ()=>{
        test('should search plant instances by nickname and location', async ()=>{
            const testUser = (0, _userfactory.createTestUser)();
            const createdUser = await dbManager.createTestUser(testUser);
            const plant = (0, _plantfactory.createTestPlant)({
                createdBy: createdUser.id
            });
            const createdPlant = await _plants.PlantQueries.create(plant);
            const instance1 = (0, _plantfactory.createTestPlantInstance)({
                userId: createdUser.id,
                plantId: createdPlant.id,
                nickname: 'Living Room Monstera',
                location: 'Living Room'
            });
            const instance2 = (0, _plantfactory.createTestPlantInstance)({
                userId: createdUser.id,
                plantId: createdPlant.id,
                nickname: 'Bedroom Pothos',
                location: 'Bedroom'
            });
            await _plantinstances.PlantInstanceQueries.create(instance1);
            await _plantinstances.PlantInstanceQueries.create(instance2);
            // Search by nickname
            const monsteraResults = await _plantinstances.PlantInstanceQueries.search(createdUser.id, 'Monstera');
            expect(monsteraResults.length).toBe(1);
            expect(monsteraResults[0].nickname).toContain('Monstera');
            // Search by location
            const bedroomResults = await _plantinstances.PlantInstanceQueries.search(createdUser.id, 'Bedroom');
            expect(bedroomResults.length).toBe(1);
            expect(bedroomResults[0].location).toBe('Bedroom');
        });
        test('should get care statistics for user', async ()=>{
            const testUser = (0, _userfactory.createTestUser)();
            const createdUser = await dbManager.createTestUser(testUser);
            const plant = (0, _plantfactory.createTestPlant)({
                createdBy: createdUser.id
            });
            const createdPlant = await _plants.PlantQueries.create(plant);
            // Create active instance
            const activeInstance = (0, _plantfactory.createTestPlantInstance)({
                userId: createdUser.id,
                plantId: createdPlant.id,
                isActive: true
            });
            // Create inactive instance
            const inactiveInstance = (0, _plantfactory.createTestPlantInstance)({
                userId: createdUser.id,
                plantId: createdPlant.id,
                isActive: false
            });
            await _plantinstances.PlantInstanceQueries.create(activeInstance);
            await _plantinstances.PlantInstanceQueries.create(inactiveInstance);
            const stats = await _plantinstances.PlantInstanceQueries.getCareStats(createdUser.id);
            expect(stats.totalPlants).toBe(2);
            expect(stats.activePlants).toBe(1);
            expect(stats.overdueFertilizer).toBeGreaterThanOrEqual(0);
            expect(stats.dueSoon).toBeGreaterThanOrEqual(0);
        });
        test('should get unique locations for user', async ()=>{
            const testUser = (0, _userfactory.createTestUser)();
            const createdUser = await dbManager.createTestUser(testUser);
            const plant = (0, _plantfactory.createTestPlant)({
                createdBy: createdUser.id
            });
            const createdPlant = await _plants.PlantQueries.create(plant);
            const locations = [
                'Living Room',
                'Bedroom',
                'Kitchen',
                'Living Room'
            ]; // Duplicate
            for (const location of locations){
                const instance = (0, _plantfactory.createTestPlantInstance)({
                    userId: createdUser.id,
                    plantId: createdPlant.id,
                    location
                });
                await _plantinstances.PlantInstanceQueries.create(instance);
            }
            const userLocations = await _plantinstances.PlantInstanceQueries.getUserLocations(createdUser.id);
            expect(userLocations.length).toBe(3); // Should be unique
            expect(userLocations).toContain('Living Room');
            expect(userLocations).toContain('Bedroom');
            expect(userLocations).toContain('Kitchen');
        });
    });
    describe('Plant Taxonomy Validation', ()=>{
        test('should validate plant taxonomy for duplicates', async ()=>{
            const testUser = (0, _userfactory.createTestUser)();
            const createdUser = await dbManager.createTestUser(testUser);
            // Create existing plant
            const existingPlant = (0, _plantfactory.createTestPlantWithTaxonomy)({
                family: 'Araceae',
                genus: 'Monstera',
                species: 'deliciosa',
                commonName: 'Monstera Deliciosa'
            }, {
                createdBy: createdUser.id
            });
            await _plants.PlantQueries.create(existingPlant);
            // Validate same taxonomy
            const validation = await (0, _planttaxonomy.validatePlantTaxonomy)({
                family: 'Araceae',
                genus: 'Monstera',
                species: 'deliciosa',
                commonName: 'Swiss Cheese Plant'
            });
            expect(validation.isValid).toBe(false);
            expect(validation.errors).toContain('A plant with this exact taxonomy already exists');
            expect(validation.duplicates.length).toBe(1);
        });
        test('should provide suggestions for similar taxonomy', async ()=>{
            const testUser = (0, _userfactory.createTestUser)();
            const createdUser = await dbManager.createTestUser(testUser);
            // Create plants with similar names
            const araceaePlant = (0, _plantfactory.createTestPlantWithTaxonomy)({
                family: 'Araceae',
                genus: 'Monstera',
                species: 'deliciosa'
            }, {
                createdBy: createdUser.id
            });
            await _plants.PlantQueries.create(araceaePlant);
            // Validate similar taxonomy
            const validation = await (0, _planttaxonomy.validatePlantTaxonomy)({
                family: 'Ara',
                genus: 'Mon',
                species: 'adansonii',
                commonName: 'Monstera Adansonii'
            });
            expect(validation.suggestions.family.length).toBeGreaterThan(0);
            expect(validation.suggestions.genus.length).toBeGreaterThan(0);
        });
    });
    describe('Error Handling and Edge Cases', ()=>{
        test('should handle non-existent plant instance operations gracefully', async ()=>{
            await expect(_plantinstances.PlantInstanceQueries.update(99999, {
                nickname: 'Test'
            })).rejects.toThrow('Plant instance not found');
            await expect(_plantinstances.PlantInstanceQueries.logFertilizer(99999)).rejects.toThrow('Plant instance not found');
            await expect(_plantinstances.PlantInstanceQueries.deactivate(99999)).rejects.toThrow('Plant instance not found');
        });
        test('should handle non-existent plant operations gracefully', async ()=>{
            await expect(_plants.PlantQueries.update(99999, {
                commonName: 'Test'
            })).rejects.toThrow('Plant not found');
            const nonExistentPlant = await _plants.PlantQueries.getById(99999);
            expect(nonExistentPlant).toBeNull();
        });
        test('should handle empty search queries', async ()=>{
            const results = await _plants.PlantQueries.search('');
            expect(Array.isArray(results)).toBe(true);
        });
        test('should handle invalid fertilizer schedule formats', async ()=>{
            const testUser = (0, _userfactory.createTestUser)();
            const createdUser = await dbManager.createTestUser(testUser);
            const plant = (0, _plantfactory.createTestPlant)({
                createdBy: createdUser.id
            });
            const createdPlant = await _plants.PlantQueries.create(plant);
            const instanceData = (0, _plantfactory.createTestPlantInstance)({
                userId: createdUser.id,
                plantId: createdPlant.id,
                fertilizerSchedule: 'invalid schedule format'
            });
            const createdInstance = await _plantinstances.PlantInstanceQueries.create(instanceData);
            // Should not crash, but may not calculate next due date
            const updatedInstance = await _plantinstances.PlantInstanceQueries.logFertilizer(createdInstance.id);
            expect(updatedInstance.lastFertilized).toBeDefined();
        // fertilizerDue may be null due to invalid schedule format
        });
    });
    describe('Database Connection and Performance', ()=>{
        test('should verify database connection is working', async ()=>{
            const isConnected = await dbManager.isConnected();
            expect(isConnected).toBe(true);
        });
        test('should handle concurrent plant creation', async ()=>{
            const testUser = (0, _userfactory.createTestUser)();
            const createdUser = await dbManager.createTestUser(testUser);
            const plantPromises = Array.from({
                length: 5
            }, (_, index)=>{
                const plantData = (0, _plantfactory.createTestPlant)({
                    commonName: `Concurrent Plant ${index}`,
                    createdBy: createdUser.id
                });
                return _plants.PlantQueries.create(plantData);
            });
            const plants = await Promise.all(plantPromises);
            expect(plants.length).toBe(5);
            expect(plants.every((p)=>p.id)).toBe(true);
        });
        test('should handle large search result sets efficiently', async ()=>{
            const testUser = (0, _userfactory.createTestUser)();
            const createdUser = await dbManager.createTestUser(testUser);
            // Create many plants with similar names
            const plantPromises = Array.from({
                length: 20
            }, (_, index)=>{
                const plantData = (0, _plantfactory.createTestPlant)({
                    commonName: `Search Test Plant ${index}`,
                    createdBy: createdUser.id
                });
                return _plants.PlantQueries.create(plantData);
            });
            await Promise.all(plantPromises);
            const startTime = Date.now();
            const results = await _plants.PlantQueries.search('Search Test');
            const searchTime = Date.now() - startTime;
            expect(results.length).toBeGreaterThan(0);
            expect(searchTime).toBeLessThan(1000); // Should complete within 1 second
        });
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9zdGVmYW5iZWtrZXIvcHJvamVjdHMvZmFuY3ktcGxhbnRpZXMvc3JjL19fdGVzdHNfXy9kYXRhYmFzZS9wbGFudC1kYXRhLXF1ZXJpZXMudGVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFBsYW50IERhdGEgRGF0YWJhc2UgUXVlcnkgVGVzdHNcbiAqIFRlc3RzIHBsYW50IGFuZCBwbGFudCBpbnN0YW5jZSBDUlVEIG9wZXJhdGlvbnMsIHNlYXJjaCwgZmlsdGVyaW5nLCBhbmQgcmVsYXRpb25zaGlwc1xuICovXG5cbmltcG9ydCB7IFBsYW50UXVlcmllcyB9IGZyb20gJy4uLy4uL2xpYi9kYi9xdWVyaWVzL3BsYW50cyc7XG5pbXBvcnQgeyBQbGFudEluc3RhbmNlUXVlcmllcyB9IGZyb20gJy4uLy4uL2xpYi9kYi9xdWVyaWVzL3BsYW50LWluc3RhbmNlcyc7XG5pbXBvcnQgeyBjcmVhdGVQbGFudCwgc2VhcmNoUGxhbnRzLCBnZXRQbGFudEJ5SWQsIHZhbGlkYXRlUGxhbnRUYXhvbm9teSB9IGZyb20gJy4uLy4uL2xpYi9kYi9xdWVyaWVzL3BsYW50LXRheG9ub215JztcbmltcG9ydCB7IGNyZWF0ZURhdGFiYXNlVGVzdE1hbmFnZXIgfSBmcm9tICcuLi8uLi90ZXN0LXV0aWxzL3NldHVwL2RhdGFiYXNlLXRlc3QtbWFuYWdlcic7XG5pbXBvcnQgeyBcbiAgY3JlYXRlVGVzdFBsYW50LCBcbiAgY3JlYXRlVGVzdFBsYW50SW5zdGFuY2UsIFxuICBjcmVhdGVUZXN0UGxhbnRXaXRoVGF4b25vbXksXG4gIGNyZWF0ZVRlc3RQbGFudEluc3RhbmNlRm9yVXNlcixcbiAgY3JlYXRlVGVzdFBsYW50SW5zdGFuY2VOZWVkaW5nQ2FyZSxcbiAgY3JlYXRlUmVhbGlzdGljUGxhbnRzLFxuICByZXNldFBsYW50Q291bnRlcnNcbn0gZnJvbSAnLi4vLi4vdGVzdC11dGlscy9mYWN0b3JpZXMvcGxhbnQtZmFjdG9yeSc7XG5pbXBvcnQgeyBjcmVhdGVUZXN0VXNlciB9IGZyb20gJy4uLy4uL3Rlc3QtdXRpbHMvZmFjdG9yaWVzL3VzZXItZmFjdG9yeSc7XG5cbmRlc2NyaWJlKCdQbGFudCBEYXRhIERhdGFiYXNlIFF1ZXJpZXMnLCAoKSA9PiB7XG4gIGxldCBkYk1hbmFnZXI7XG5cbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgZGJNYW5hZ2VyID0gY3JlYXRlRGF0YWJhc2VUZXN0TWFuYWdlcigpO1xuICAgIHJlc2V0UGxhbnRDb3VudGVycygpO1xuICB9KTtcblxuICBhZnRlckVhY2goYXN5bmMgKCkgPT4ge1xuICAgIGF3YWl0IGRiTWFuYWdlci5jbGVhbnVwKCk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdQbGFudCBUYXhvbm9teSBDUlVEIE9wZXJhdGlvbnMnLCAoKSA9PiB7XG4gICAgdGVzdCgnc2hvdWxkIGNyZWF0ZSBhIG5ldyBwbGFudCB0YXhvbm9teSBlbnRyeScsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHRlc3RVc2VyID0gY3JlYXRlVGVzdFVzZXIoKTtcbiAgICAgIGNvbnN0IGNyZWF0ZWRVc2VyID0gYXdhaXQgZGJNYW5hZ2VyLmNyZWF0ZVRlc3RVc2VyKHRlc3RVc2VyKTtcblxuICAgICAgY29uc3QgcGxhbnREYXRhID0ge1xuICAgICAgICBmYW1pbHk6ICdBcmFjZWFlJyxcbiAgICAgICAgZ2VudXM6ICdNb25zdGVyYScsXG4gICAgICAgIHNwZWNpZXM6ICdkZWxpY2lvc2EnLFxuICAgICAgICBjdWx0aXZhcjogbnVsbCxcbiAgICAgICAgY29tbW9uTmFtZTogJ01vbnN0ZXJhIERlbGljaW9zYScsXG4gICAgICAgIGNhcmVJbnN0cnVjdGlvbnM6ICdCcmlnaHQgaW5kaXJlY3QgbGlnaHQsIHdhdGVyIHdoZW4gc29pbCBpcyBkcnknLFxuICAgICAgICBjcmVhdGVkQnk6IGNyZWF0ZWRVc2VyLmlkLFxuICAgICAgICBpc1ZlcmlmaWVkOiBmYWxzZSxcbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IHBsYW50ID0gYXdhaXQgUGxhbnRRdWVyaWVzLmNyZWF0ZShwbGFudERhdGEpO1xuXG4gICAgICBleHBlY3QocGxhbnQpLnRvQmVEZWZpbmVkKCk7XG4gICAgICBleHBlY3QocGxhbnQuaWQpLnRvQmVEZWZpbmVkKCk7XG4gICAgICBleHBlY3QocGxhbnQuZmFtaWx5KS50b0JlKCdBcmFjZWFlJyk7XG4gICAgICBleHBlY3QocGxhbnQuZ2VudXMpLnRvQmUoJ01vbnN0ZXJhJyk7XG4gICAgICBleHBlY3QocGxhbnQuc3BlY2llcykudG9CZSgnZGVsaWNpb3NhJyk7XG4gICAgICBleHBlY3QocGxhbnQuY29tbW9uTmFtZSkudG9CZSgnTW9uc3RlcmEgRGVsaWNpb3NhJyk7XG4gICAgICBleHBlY3QocGxhbnQuY3JlYXRlZEJ5KS50b0JlKGNyZWF0ZWRVc2VyLmlkKTtcbiAgICAgIGV4cGVjdChwbGFudC5pc1ZlcmlmaWVkKS50b0JlKGZhbHNlKTtcbiAgICAgIGV4cGVjdChwbGFudC5jcmVhdGVkQXQpLnRvQmVJbnN0YW5jZU9mKERhdGUpO1xuICAgICAgZXhwZWN0KHBsYW50LnVwZGF0ZWRBdCkudG9CZUluc3RhbmNlT2YoRGF0ZSk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgcmV0cmlldmUgcGxhbnQgYnkgSUQnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCB0ZXN0VXNlciA9IGNyZWF0ZVRlc3RVc2VyKCk7XG4gICAgICBjb25zdCBjcmVhdGVkVXNlciA9IGF3YWl0IGRiTWFuYWdlci5jcmVhdGVUZXN0VXNlcih0ZXN0VXNlcik7XG5cbiAgICAgIGNvbnN0IHBsYW50RGF0YSA9IGNyZWF0ZVRlc3RQbGFudCh7IGNyZWF0ZWRCeTogY3JlYXRlZFVzZXIuaWQgfSk7XG4gICAgICBjb25zdCBjcmVhdGVkUGxhbnQgPSBhd2FpdCBQbGFudFF1ZXJpZXMuY3JlYXRlKHBsYW50RGF0YSk7XG5cbiAgICAgIGNvbnN0IGZvdW5kUGxhbnQgPSBhd2FpdCBQbGFudFF1ZXJpZXMuZ2V0QnlJZChjcmVhdGVkUGxhbnQuaWQpO1xuXG4gICAgICBleHBlY3QoZm91bmRQbGFudCkudG9CZURlZmluZWQoKTtcbiAgICAgIGV4cGVjdChmb3VuZFBsYW50LmlkKS50b0JlKGNyZWF0ZWRQbGFudC5pZCk7XG4gICAgICBleHBlY3QoZm91bmRQbGFudC5mYW1pbHkpLnRvQmUoY3JlYXRlZFBsYW50LmZhbWlseSk7XG4gICAgICBleHBlY3QoZm91bmRQbGFudC5nZW51cykudG9CZShjcmVhdGVkUGxhbnQuZ2VudXMpO1xuICAgICAgZXhwZWN0KGZvdW5kUGxhbnQuc3BlY2llcykudG9CZShjcmVhdGVkUGxhbnQuc3BlY2llcyk7XG4gICAgICBleHBlY3QoZm91bmRQbGFudC5jb21tb25OYW1lKS50b0JlKGNyZWF0ZWRQbGFudC5jb21tb25OYW1lKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCByZXR1cm4gbnVsbCBmb3Igbm9uLWV4aXN0ZW50IHBsYW50IElEJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgcGxhbnQgPSBhd2FpdCBQbGFudFF1ZXJpZXMuZ2V0QnlJZCg5OTk5OSk7XG4gICAgICBleHBlY3QocGxhbnQpLnRvQmVOdWxsKCk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgdXBkYXRlIHBsYW50IHRheG9ub215IGVudHJ5JywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgdGVzdFVzZXIgPSBjcmVhdGVUZXN0VXNlcigpO1xuICAgICAgY29uc3QgY3JlYXRlZFVzZXIgPSBhd2FpdCBkYk1hbmFnZXIuY3JlYXRlVGVzdFVzZXIodGVzdFVzZXIpO1xuXG4gICAgICBjb25zdCBwbGFudERhdGEgPSBjcmVhdGVUZXN0UGxhbnQoeyBjcmVhdGVkQnk6IGNyZWF0ZWRVc2VyLmlkIH0pO1xuICAgICAgY29uc3QgY3JlYXRlZFBsYW50ID0gYXdhaXQgUGxhbnRRdWVyaWVzLmNyZWF0ZShwbGFudERhdGEpO1xuXG4gICAgICBjb25zdCB1cGRhdGVzID0ge1xuICAgICAgICBjb21tb25OYW1lOiAnVXBkYXRlZCBDb21tb24gTmFtZScsXG4gICAgICAgIGNhcmVJbnN0cnVjdGlvbnM6ICdVcGRhdGVkIGNhcmUgaW5zdHJ1Y3Rpb25zJyxcbiAgICAgICAgaXNWZXJpZmllZDogdHJ1ZSxcbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IHVwZGF0ZWRQbGFudCA9IGF3YWl0IFBsYW50UXVlcmllcy51cGRhdGUoY3JlYXRlZFBsYW50LmlkLCB1cGRhdGVzKTtcblxuICAgICAgZXhwZWN0KHVwZGF0ZWRQbGFudC5jb21tb25OYW1lKS50b0JlKCdVcGRhdGVkIENvbW1vbiBOYW1lJyk7XG4gICAgICBleHBlY3QodXBkYXRlZFBsYW50LmNhcmVJbnN0cnVjdGlvbnMpLnRvQmUoJ1VwZGF0ZWQgY2FyZSBpbnN0cnVjdGlvbnMnKTtcbiAgICAgIGV4cGVjdCh1cGRhdGVkUGxhbnQuaXNWZXJpZmllZCkudG9CZSh0cnVlKTtcbiAgICAgIGV4cGVjdCh1cGRhdGVkUGxhbnQudXBkYXRlZEF0LmdldFRpbWUoKSkudG9CZUdyZWF0ZXJUaGFuKGNyZWF0ZWRQbGFudC51cGRhdGVkQXQuZ2V0VGltZSgpKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCBjaGVjayBpZiBwbGFudCB0YXhvbm9teSBhbHJlYWR5IGV4aXN0cycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHRlc3RVc2VyID0gY3JlYXRlVGVzdFVzZXIoKTtcbiAgICAgIGNvbnN0IGNyZWF0ZWRVc2VyID0gYXdhaXQgZGJNYW5hZ2VyLmNyZWF0ZVRlc3RVc2VyKHRlc3RVc2VyKTtcblxuICAgICAgY29uc3QgcGxhbnREYXRhID0gY3JlYXRlVGVzdFBsYW50V2l0aFRheG9ub215KHtcbiAgICAgICAgZmFtaWx5OiAnQXJhY2VhZScsXG4gICAgICAgIGdlbnVzOiAnTW9uc3RlcmEnLFxuICAgICAgICBzcGVjaWVzOiAnZGVsaWNpb3NhJyxcbiAgICAgICAgY3VsdGl2YXI6IG51bGwsXG4gICAgICB9LCB7IGNyZWF0ZWRCeTogY3JlYXRlZFVzZXIuaWQgfSk7XG5cbiAgICAgIGF3YWl0IFBsYW50UXVlcmllcy5jcmVhdGUocGxhbnREYXRhKTtcblxuICAgICAgLy8gQ2hlY2sgZm9yIGV4aXN0aW5nIHRheG9ub215XG4gICAgICBjb25zdCBleGlzdGluZ1BsYW50ID0gYXdhaXQgUGxhbnRRdWVyaWVzLnRheG9ub215RXhpc3RzKCdBcmFjZWFlJywgJ01vbnN0ZXJhJywgJ2RlbGljaW9zYScpO1xuICAgICAgZXhwZWN0KGV4aXN0aW5nUGxhbnQpLnRvQmVEZWZpbmVkKCk7XG4gICAgICBleHBlY3QoZXhpc3RpbmdQbGFudC5mYW1pbHkpLnRvQmUoJ0FyYWNlYWUnKTtcblxuICAgICAgLy8gQ2hlY2sgZm9yIG5vbi1leGlzdGluZyB0YXhvbm9teVxuICAgICAgY29uc3Qgbm9uRXhpc3RpbmdQbGFudCA9IGF3YWl0IFBsYW50UXVlcmllcy50YXhvbm9teUV4aXN0cygnQXJhY2VhZScsICdNb25zdGVyYScsICdhZGFuc29uaWknKTtcbiAgICAgIGV4cGVjdChub25FeGlzdGluZ1BsYW50KS50b0JlTnVsbCgpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIGhhbmRsZSBjdWx0aXZhciB2YXJpYXRpb25zIGluIHRheG9ub215IGV4aXN0ZW5jZSBjaGVjaycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHRlc3RVc2VyID0gY3JlYXRlVGVzdFVzZXIoKTtcbiAgICAgIGNvbnN0IGNyZWF0ZWRVc2VyID0gYXdhaXQgZGJNYW5hZ2VyLmNyZWF0ZVRlc3RVc2VyKHRlc3RVc2VyKTtcblxuICAgICAgLy8gQ3JlYXRlIHBsYW50IHdpdGggY3VsdGl2YXJcbiAgICAgIGNvbnN0IHBsYW50V2l0aEN1bHRpdmFyID0gY3JlYXRlVGVzdFBsYW50V2l0aFRheG9ub215KHtcbiAgICAgICAgZmFtaWx5OiAnQXJhY2VhZScsXG4gICAgICAgIGdlbnVzOiAnTW9uc3RlcmEnLFxuICAgICAgICBzcGVjaWVzOiAnZGVsaWNpb3NhJyxcbiAgICAgICAgY3VsdGl2YXI6ICdWYXJpZWdhdGEnLFxuICAgICAgfSwgeyBjcmVhdGVkQnk6IGNyZWF0ZWRVc2VyLmlkIH0pO1xuXG4gICAgICBhd2FpdCBQbGFudFF1ZXJpZXMuY3JlYXRlKHBsYW50V2l0aEN1bHRpdmFyKTtcblxuICAgICAgLy8gQ2hlY2sgZm9yIGV4YWN0IG1hdGNoIHdpdGggY3VsdGl2YXJcbiAgICAgIGNvbnN0IGV4YWN0TWF0Y2ggPSBhd2FpdCBQbGFudFF1ZXJpZXMudGF4b25vbXlFeGlzdHMoJ0FyYWNlYWUnLCAnTW9uc3RlcmEnLCAnZGVsaWNpb3NhJywgJ1ZhcmllZ2F0YScpO1xuICAgICAgZXhwZWN0KGV4YWN0TWF0Y2gpLnRvQmVEZWZpbmVkKCk7XG5cbiAgICAgIC8vIENoZWNrIGZvciBzYW1lIHNwZWNpZXMgd2l0aG91dCBjdWx0aXZhclxuICAgICAgY29uc3Qgd2l0aG91dEN1bHRpdmFyID0gYXdhaXQgUGxhbnRRdWVyaWVzLnRheG9ub215RXhpc3RzKCdBcmFjZWFlJywgJ01vbnN0ZXJhJywgJ2RlbGljaW9zYScpO1xuICAgICAgZXhwZWN0KHdpdGhvdXRDdWx0aXZhcikudG9CZU51bGwoKTsgLy8gU2hvdWxkIG5vdCBtYXRjaCBiZWNhdXNlIG9uZSBoYXMgY3VsdGl2YXIsIG9uZSBkb2Vzbid0XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdQbGFudCBTZWFyY2ggYW5kIEZpbHRlcmluZycsICgpID0+IHtcbiAgICB0ZXN0KCdzaG91bGQgc2VhcmNoIHBsYW50cyBieSBjb21tb24gbmFtZScsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHRlc3RVc2VyID0gY3JlYXRlVGVzdFVzZXIoKTtcbiAgICAgIGNvbnN0IGNyZWF0ZWRVc2VyID0gYXdhaXQgZGJNYW5hZ2VyLmNyZWF0ZVRlc3RVc2VyKHRlc3RVc2VyKTtcblxuICAgICAgLy8gQ3JlYXRlIHRlc3QgcGxhbnRzXG4gICAgICBjb25zdCBtb25zdGVyYSA9IGNyZWF0ZVRlc3RQbGFudFdpdGhUYXhvbm9teSh7XG4gICAgICAgIGZhbWlseTogJ0FyYWNlYWUnLFxuICAgICAgICBnZW51czogJ01vbnN0ZXJhJyxcbiAgICAgICAgc3BlY2llczogJ2RlbGljaW9zYScsXG4gICAgICAgIGNvbW1vbk5hbWU6ICdNb25zdGVyYSBEZWxpY2lvc2EnLFxuICAgICAgfSwgeyBjcmVhdGVkQnk6IGNyZWF0ZWRVc2VyLmlkIH0pO1xuXG4gICAgICBjb25zdCBwb3Rob3MgPSBjcmVhdGVUZXN0UGxhbnRXaXRoVGF4b25vbXkoe1xuICAgICAgICBmYW1pbHk6ICdBcmFjZWFlJyxcbiAgICAgICAgZ2VudXM6ICdFcGlwcmVtbnVtJyxcbiAgICAgICAgc3BlY2llczogJ2F1cmV1bScsXG4gICAgICAgIGNvbW1vbk5hbWU6ICdHb2xkZW4gUG90aG9zJyxcbiAgICAgIH0sIHsgY3JlYXRlZEJ5OiBjcmVhdGVkVXNlci5pZCB9KTtcblxuICAgICAgYXdhaXQgUGxhbnRRdWVyaWVzLmNyZWF0ZShtb25zdGVyYSk7XG4gICAgICBhd2FpdCBQbGFudFF1ZXJpZXMuY3JlYXRlKHBvdGhvcyk7XG5cbiAgICAgIC8vIFNlYXJjaCBieSBjb21tb24gbmFtZVxuICAgICAgY29uc3QgbW9uc3RlcmFSZXN1bHRzID0gYXdhaXQgUGxhbnRRdWVyaWVzLnNlYXJjaCgnTW9uc3RlcmEnKTtcbiAgICAgIGV4cGVjdChtb25zdGVyYVJlc3VsdHMubGVuZ3RoKS50b0JlR3JlYXRlclRoYW4oMCk7XG4gICAgICBleHBlY3QobW9uc3RlcmFSZXN1bHRzLnNvbWUocCA9PiBwLmNvbW1vbk5hbWUuaW5jbHVkZXMoJ01vbnN0ZXJhJykpKS50b0JlKHRydWUpO1xuXG4gICAgICBjb25zdCBwb3Rob3NSZXN1bHRzID0gYXdhaXQgUGxhbnRRdWVyaWVzLnNlYXJjaCgnUG90aG9zJyk7XG4gICAgICBleHBlY3QocG90aG9zUmVzdWx0cy5sZW5ndGgpLnRvQmVHcmVhdGVyVGhhbigwKTtcbiAgICAgIGV4cGVjdChwb3Rob3NSZXN1bHRzLnNvbWUocCA9PiBwLmNvbW1vbk5hbWUuaW5jbHVkZXMoJ1BvdGhvcycpKSkudG9CZSh0cnVlKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCBzZWFyY2ggcGxhbnRzIGJ5IGdlbnVzIGFuZCBzcGVjaWVzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgdGVzdFVzZXIgPSBjcmVhdGVUZXN0VXNlcigpO1xuICAgICAgY29uc3QgY3JlYXRlZFVzZXIgPSBhd2FpdCBkYk1hbmFnZXIuY3JlYXRlVGVzdFVzZXIodGVzdFVzZXIpO1xuXG4gICAgICBjb25zdCBwbGFudCA9IGNyZWF0ZVRlc3RQbGFudFdpdGhUYXhvbm9teSh7XG4gICAgICAgIGZhbWlseTogJ0FyYWNlYWUnLFxuICAgICAgICBnZW51czogJ01vbnN0ZXJhJyxcbiAgICAgICAgc3BlY2llczogJ2RlbGljaW9zYScsXG4gICAgICAgIGNvbW1vbk5hbWU6ICdNb25zdGVyYSBEZWxpY2lvc2EnLFxuICAgICAgfSwgeyBjcmVhdGVkQnk6IGNyZWF0ZWRVc2VyLmlkIH0pO1xuXG4gICAgICBhd2FpdCBQbGFudFF1ZXJpZXMuY3JlYXRlKHBsYW50KTtcblxuICAgICAgLy8gU2VhcmNoIGJ5IGdlbnVzXG4gICAgICBjb25zdCBnZW51c1Jlc3VsdHMgPSBhd2FpdCBQbGFudFF1ZXJpZXMuc2VhcmNoKCdNb25zdGVyYScpO1xuICAgICAgZXhwZWN0KGdlbnVzUmVzdWx0cy5sZW5ndGgpLnRvQmVHcmVhdGVyVGhhbigwKTtcbiAgICAgIGV4cGVjdChnZW51c1Jlc3VsdHMuc29tZShwID0+IHAuZ2VudXMgPT09ICdNb25zdGVyYScpKS50b0JlKHRydWUpO1xuXG4gICAgICAvLyBTZWFyY2ggYnkgc3BlY2llc1xuICAgICAgY29uc3Qgc3BlY2llc1Jlc3VsdHMgPSBhd2FpdCBQbGFudFF1ZXJpZXMuc2VhcmNoKCdkZWxpY2lvc2EnKTtcbiAgICAgIGV4cGVjdChzcGVjaWVzUmVzdWx0cy5sZW5ndGgpLnRvQmVHcmVhdGVyVGhhbigwKTtcbiAgICAgIGV4cGVjdChzcGVjaWVzUmVzdWx0cy5zb21lKHAgPT4gcC5zcGVjaWVzID09PSAnZGVsaWNpb3NhJykpLnRvQmUodHJ1ZSk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgZ2V0IHBsYW50cyBieSBmYW1pbHknLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCB0ZXN0VXNlciA9IGNyZWF0ZVRlc3RVc2VyKCk7XG4gICAgICBjb25zdCBjcmVhdGVkVXNlciA9IGF3YWl0IGRiTWFuYWdlci5jcmVhdGVUZXN0VXNlcih0ZXN0VXNlcik7XG5cbiAgICAgIC8vIENyZWF0ZSBwbGFudHMgaW4gc2FtZSBmYW1pbHlcbiAgICAgIGNvbnN0IG1vbnN0ZXJhID0gY3JlYXRlVGVzdFBsYW50V2l0aFRheG9ub215KHtcbiAgICAgICAgZmFtaWx5OiAnQXJhY2VhZScsXG4gICAgICAgIGdlbnVzOiAnTW9uc3RlcmEnLFxuICAgICAgICBzcGVjaWVzOiAnZGVsaWNpb3NhJyxcbiAgICAgIH0sIHsgY3JlYXRlZEJ5OiBjcmVhdGVkVXNlci5pZCB9KTtcblxuICAgICAgY29uc3QgcG90aG9zID0gY3JlYXRlVGVzdFBsYW50V2l0aFRheG9ub215KHtcbiAgICAgICAgZmFtaWx5OiAnQXJhY2VhZScsXG4gICAgICAgIGdlbnVzOiAnRXBpcHJlbW51bScsXG4gICAgICAgIHNwZWNpZXM6ICdhdXJldW0nLFxuICAgICAgfSwgeyBjcmVhdGVkQnk6IGNyZWF0ZWRVc2VyLmlkIH0pO1xuXG4gICAgICBhd2FpdCBQbGFudFF1ZXJpZXMuY3JlYXRlKG1vbnN0ZXJhKTtcbiAgICAgIGF3YWl0IFBsYW50UXVlcmllcy5jcmVhdGUocG90aG9zKTtcblxuICAgICAgY29uc3QgYXJhY2VhZVJlc3VsdHMgPSBhd2FpdCBQbGFudFF1ZXJpZXMuZ2V0QnlGYW1pbHkoJ0FyYWNlYWUnKTtcbiAgICAgIGV4cGVjdChhcmFjZWFlUmVzdWx0cy5sZW5ndGgpLnRvQmUoMik7XG4gICAgICBleHBlY3QoYXJhY2VhZVJlc3VsdHMuZXZlcnkocCA9PiBwLmZhbWlseSA9PT0gJ0FyYWNlYWUnKSkudG9CZSh0cnVlKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCBwZXJmb3JtIGZ1bGwtdGV4dCBzZWFyY2gnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCB0ZXN0VXNlciA9IGNyZWF0ZVRlc3RVc2VyKCk7XG4gICAgICBjb25zdCBjcmVhdGVkVXNlciA9IGF3YWl0IGRiTWFuYWdlci5jcmVhdGVUZXN0VXNlcih0ZXN0VXNlcik7XG5cbiAgICAgIGNvbnN0IHBsYW50ID0gY3JlYXRlVGVzdFBsYW50V2l0aFRheG9ub215KHtcbiAgICAgICAgZmFtaWx5OiAnQXJhY2VhZScsXG4gICAgICAgIGdlbnVzOiAnTW9uc3RlcmEnLFxuICAgICAgICBzcGVjaWVzOiAnZGVsaWNpb3NhJyxcbiAgICAgICAgY29tbW9uTmFtZTogJ1N3aXNzIENoZWVzZSBQbGFudCcsXG4gICAgICB9LCB7IGNyZWF0ZWRCeTogY3JlYXRlZFVzZXIuaWQgfSk7XG5cbiAgICAgIGF3YWl0IFBsYW50UXVlcmllcy5jcmVhdGUocGxhbnQpO1xuXG4gICAgICAvLyBUZXN0IGZ1bGwtdGV4dCBzZWFyY2ggKHNob3VsZCBmYWxsYmFjayB0byByZWd1bGFyIHNlYXJjaCBpZiBQb3N0Z3JlU1FMIGZ1bGwtdGV4dCBmYWlscylcbiAgICAgIGNvbnN0IHJlc3VsdHMgPSBhd2FpdCBQbGFudFF1ZXJpZXMuZnVsbFRleHRTZWFyY2goJ1N3aXNzIENoZWVzZScpO1xuICAgICAgZXhwZWN0KHJlc3VsdHMubGVuZ3RoKS50b0JlR3JlYXRlclRoYW4oMCk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgZ2V0IGFsbCBwbGFudHMgd2l0aCBwYWdpbmF0aW9uJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgdGVzdFVzZXIgPSBjcmVhdGVUZXN0VXNlcigpO1xuICAgICAgY29uc3QgY3JlYXRlZFVzZXIgPSBhd2FpdCBkYk1hbmFnZXIuY3JlYXRlVGVzdFVzZXIodGVzdFVzZXIpO1xuXG4gICAgICAvLyBDcmVhdGUgbXVsdGlwbGUgcGxhbnRzXG4gICAgICBjb25zdCBwbGFudHMgPSBbXG4gICAgICAgIGNyZWF0ZVRlc3RQbGFudFdpdGhUYXhvbm9teSh7IGNvbW1vbk5hbWU6ICdQbGFudCAxJyB9LCB7IGNyZWF0ZWRCeTogY3JlYXRlZFVzZXIuaWQgfSksXG4gICAgICAgIGNyZWF0ZVRlc3RQbGFudFdpdGhUYXhvbm9teSh7IGNvbW1vbk5hbWU6ICdQbGFudCAyJyB9LCB7IGNyZWF0ZWRCeTogY3JlYXRlZFVzZXIuaWQgfSksXG4gICAgICAgIGNyZWF0ZVRlc3RQbGFudFdpdGhUYXhvbm9teSh7IGNvbW1vbk5hbWU6ICdQbGFudCAzJyB9LCB7IGNyZWF0ZWRCeTogY3JlYXRlZFVzZXIuaWQgfSksXG4gICAgICBdO1xuXG4gICAgICBmb3IgKGNvbnN0IHBsYW50IG9mIHBsYW50cykge1xuICAgICAgICBhd2FpdCBQbGFudFF1ZXJpZXMuY3JlYXRlKHBsYW50KTtcbiAgICAgIH1cblxuICAgICAgLy8gVGVzdCBwYWdpbmF0aW9uXG4gICAgICBjb25zdCBmaXJzdFBhZ2UgPSBhd2FpdCBQbGFudFF1ZXJpZXMuZ2V0QWxsKDAsIDIpO1xuICAgICAgZXhwZWN0KGZpcnN0UGFnZS5sZW5ndGgpLnRvQmUoMik7XG5cbiAgICAgIGNvbnN0IHNlY29uZFBhZ2UgPSBhd2FpdCBQbGFudFF1ZXJpZXMuZ2V0QWxsKDIsIDIpO1xuICAgICAgZXhwZWN0KHNlY29uZFBhZ2UubGVuZ3RoKS50b0JlR3JlYXRlclRoYW5PckVxdWFsKDEpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnUGxhbnQgSW5zdGFuY2UgQ1JVRCBPcGVyYXRpb25zJywgKCkgPT4ge1xuICAgIHRlc3QoJ3Nob3VsZCBjcmVhdGUgYSBuZXcgcGxhbnQgaW5zdGFuY2UnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCB0ZXN0VXNlciA9IGNyZWF0ZVRlc3RVc2VyKCk7XG4gICAgICBjb25zdCBjcmVhdGVkVXNlciA9IGF3YWl0IGRiTWFuYWdlci5jcmVhdGVUZXN0VXNlcih0ZXN0VXNlcik7XG5cbiAgICAgIGNvbnN0IHBsYW50ID0gY3JlYXRlVGVzdFBsYW50KHsgY3JlYXRlZEJ5OiBjcmVhdGVkVXNlci5pZCB9KTtcbiAgICAgIGNvbnN0IGNyZWF0ZWRQbGFudCA9IGF3YWl0IFBsYW50UXVlcmllcy5jcmVhdGUocGxhbnQpO1xuXG4gICAgICBjb25zdCBpbnN0YW5jZURhdGEgPSB7XG4gICAgICAgIHVzZXJJZDogY3JlYXRlZFVzZXIuaWQsXG4gICAgICAgIHBsYW50SWQ6IGNyZWF0ZWRQbGFudC5pZCxcbiAgICAgICAgbmlja25hbWU6ICdNeSBNb25zdGVyYScsXG4gICAgICAgIGxvY2F0aW9uOiAnTGl2aW5nIFJvb20nLFxuICAgICAgICBmZXJ0aWxpemVyU2NoZWR1bGU6ICdldmVyeV80X3dlZWtzJyxcbiAgICAgICAgbm90ZXM6ICdCZWF1dGlmdWwgcGxhbnQgd2l0aCBmZW5lc3RyYXRpb25zJyxcbiAgICAgICAgaW1hZ2VzOiBbXSxcbiAgICAgICAgaXNBY3RpdmU6IHRydWUsXG4gICAgICB9O1xuXG4gICAgICBjb25zdCBpbnN0YW5jZSA9IGF3YWl0IFBsYW50SW5zdGFuY2VRdWVyaWVzLmNyZWF0ZShpbnN0YW5jZURhdGEpO1xuXG4gICAgICBleHBlY3QoaW5zdGFuY2UpLnRvQmVEZWZpbmVkKCk7XG4gICAgICBleHBlY3QoaW5zdGFuY2UuaWQpLnRvQmVEZWZpbmVkKCk7XG4gICAgICBleHBlY3QoaW5zdGFuY2UudXNlcklkKS50b0JlKGNyZWF0ZWRVc2VyLmlkKTtcbiAgICAgIGV4cGVjdChpbnN0YW5jZS5wbGFudElkKS50b0JlKGNyZWF0ZWRQbGFudC5pZCk7XG4gICAgICBleHBlY3QoaW5zdGFuY2Uubmlja25hbWUpLnRvQmUoJ015IE1vbnN0ZXJhJyk7XG4gICAgICBleHBlY3QoaW5zdGFuY2UubG9jYXRpb24pLnRvQmUoJ0xpdmluZyBSb29tJyk7XG4gICAgICBleHBlY3QoaW5zdGFuY2UuZmVydGlsaXplclNjaGVkdWxlKS50b0JlKCdldmVyeV80X3dlZWtzJyk7XG4gICAgICBleHBlY3QoaW5zdGFuY2UuaXNBY3RpdmUpLnRvQmUodHJ1ZSk7XG4gICAgICBleHBlY3QoaW5zdGFuY2UuY3JlYXRlZEF0KS50b0JlSW5zdGFuY2VPZihEYXRlKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCByZXRyaWV2ZSBwbGFudCBpbnN0YW5jZSBieSBJRCB3aXRoIHBsYW50IGRhdGEnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCB0ZXN0VXNlciA9IGNyZWF0ZVRlc3RVc2VyKCk7XG4gICAgICBjb25zdCBjcmVhdGVkVXNlciA9IGF3YWl0IGRiTWFuYWdlci5jcmVhdGVUZXN0VXNlcih0ZXN0VXNlcik7XG5cbiAgICAgIGNvbnN0IHBsYW50ID0gY3JlYXRlVGVzdFBsYW50KHsgY3JlYXRlZEJ5OiBjcmVhdGVkVXNlci5pZCB9KTtcbiAgICAgIGNvbnN0IGNyZWF0ZWRQbGFudCA9IGF3YWl0IFBsYW50UXVlcmllcy5jcmVhdGUocGxhbnQpO1xuXG4gICAgICBjb25zdCBpbnN0YW5jZURhdGEgPSBjcmVhdGVUZXN0UGxhbnRJbnN0YW5jZSh7XG4gICAgICAgIHVzZXJJZDogY3JlYXRlZFVzZXIuaWQsXG4gICAgICAgIHBsYW50SWQ6IGNyZWF0ZWRQbGFudC5pZCxcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCBjcmVhdGVkSW5zdGFuY2UgPSBhd2FpdCBQbGFudEluc3RhbmNlUXVlcmllcy5jcmVhdGUoaW5zdGFuY2VEYXRhKTtcblxuICAgICAgY29uc3QgZm91bmRJbnN0YW5jZSA9IGF3YWl0IFBsYW50SW5zdGFuY2VRdWVyaWVzLmdldEJ5SWQoY3JlYXRlZEluc3RhbmNlLmlkKTtcblxuICAgICAgZXhwZWN0KGZvdW5kSW5zdGFuY2UpLnRvQmVEZWZpbmVkKCk7XG4gICAgICBleHBlY3QoZm91bmRJbnN0YW5jZS5pZCkudG9CZShjcmVhdGVkSW5zdGFuY2UuaWQpO1xuICAgICAgZXhwZWN0KGZvdW5kSW5zdGFuY2UucGxhbnQpLnRvQmVEZWZpbmVkKCk7XG4gICAgICBleHBlY3QoZm91bmRJbnN0YW5jZS5wbGFudC5pZCkudG9CZShjcmVhdGVkUGxhbnQuaWQpO1xuICAgICAgZXhwZWN0KGZvdW5kSW5zdGFuY2UucGxhbnQuY29tbW9uTmFtZSkudG9CZShjcmVhdGVkUGxhbnQuY29tbW9uTmFtZSk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgZ2V0IGFsbCBwbGFudCBpbnN0YW5jZXMgZm9yIGEgdXNlcicsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHRlc3RVc2VyID0gY3JlYXRlVGVzdFVzZXIoKTtcbiAgICAgIGNvbnN0IGNyZWF0ZWRVc2VyID0gYXdhaXQgZGJNYW5hZ2VyLmNyZWF0ZVRlc3RVc2VyKHRlc3RVc2VyKTtcblxuICAgICAgY29uc3QgcGxhbnQgPSBjcmVhdGVUZXN0UGxhbnQoeyBjcmVhdGVkQnk6IGNyZWF0ZWRVc2VyLmlkIH0pO1xuICAgICAgY29uc3QgY3JlYXRlZFBsYW50ID0gYXdhaXQgUGxhbnRRdWVyaWVzLmNyZWF0ZShwbGFudCk7XG5cbiAgICAgIC8vIENyZWF0ZSBtdWx0aXBsZSBpbnN0YW5jZXMgZm9yIHRoZSB1c2VyXG4gICAgICBjb25zdCBpbnN0YW5jZTEgPSBjcmVhdGVUZXN0UGxhbnRJbnN0YW5jZSh7XG4gICAgICAgIHVzZXJJZDogY3JlYXRlZFVzZXIuaWQsXG4gICAgICAgIHBsYW50SWQ6IGNyZWF0ZWRQbGFudC5pZCxcbiAgICAgICAgbmlja25hbWU6ICdQbGFudCAxJyxcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCBpbnN0YW5jZTIgPSBjcmVhdGVUZXN0UGxhbnRJbnN0YW5jZSh7XG4gICAgICAgIHVzZXJJZDogY3JlYXRlZFVzZXIuaWQsXG4gICAgICAgIHBsYW50SWQ6IGNyZWF0ZWRQbGFudC5pZCxcbiAgICAgICAgbmlja25hbWU6ICdQbGFudCAyJyxcbiAgICAgIH0pO1xuXG4gICAgICBhd2FpdCBQbGFudEluc3RhbmNlUXVlcmllcy5jcmVhdGUoaW5zdGFuY2UxKTtcbiAgICAgIGF3YWl0IFBsYW50SW5zdGFuY2VRdWVyaWVzLmNyZWF0ZShpbnN0YW5jZTIpO1xuXG4gICAgICBjb25zdCB1c2VySW5zdGFuY2VzID0gYXdhaXQgUGxhbnRJbnN0YW5jZVF1ZXJpZXMuZ2V0QnlVc2VySWQoY3JlYXRlZFVzZXIuaWQpO1xuXG4gICAgICBleHBlY3QodXNlckluc3RhbmNlcy5sZW5ndGgpLnRvQmUoMik7XG4gICAgICBleHBlY3QodXNlckluc3RhbmNlcy5ldmVyeShpID0+IGkudXNlcklkID09PSBjcmVhdGVkVXNlci5pZCkpLnRvQmUodHJ1ZSk7XG4gICAgICBleHBlY3QodXNlckluc3RhbmNlcy5ldmVyeShpID0+IGkucGxhbnQpKS50b0JlKHRydWUpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIHVwZGF0ZSBwbGFudCBpbnN0YW5jZScsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHRlc3RVc2VyID0gY3JlYXRlVGVzdFVzZXIoKTtcbiAgICAgIGNvbnN0IGNyZWF0ZWRVc2VyID0gYXdhaXQgZGJNYW5hZ2VyLmNyZWF0ZVRlc3RVc2VyKHRlc3RVc2VyKTtcblxuICAgICAgY29uc3QgcGxhbnQgPSBjcmVhdGVUZXN0UGxhbnQoeyBjcmVhdGVkQnk6IGNyZWF0ZWRVc2VyLmlkIH0pO1xuICAgICAgY29uc3QgY3JlYXRlZFBsYW50ID0gYXdhaXQgUGxhbnRRdWVyaWVzLmNyZWF0ZShwbGFudCk7XG5cbiAgICAgIGNvbnN0IGluc3RhbmNlRGF0YSA9IGNyZWF0ZVRlc3RQbGFudEluc3RhbmNlKHtcbiAgICAgICAgdXNlcklkOiBjcmVhdGVkVXNlci5pZCxcbiAgICAgICAgcGxhbnRJZDogY3JlYXRlZFBsYW50LmlkLFxuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IGNyZWF0ZWRJbnN0YW5jZSA9IGF3YWl0IFBsYW50SW5zdGFuY2VRdWVyaWVzLmNyZWF0ZShpbnN0YW5jZURhdGEpO1xuXG4gICAgICBjb25zdCB1cGRhdGVzID0ge1xuICAgICAgICBuaWNrbmFtZTogJ1VwZGF0ZWQgTmlja25hbWUnLFxuICAgICAgICBsb2NhdGlvbjogJ05ldyBMb2NhdGlvbicsXG4gICAgICAgIG5vdGVzOiAnVXBkYXRlZCBub3RlcycsXG4gICAgICB9O1xuXG4gICAgICBjb25zdCB1cGRhdGVkSW5zdGFuY2UgPSBhd2FpdCBQbGFudEluc3RhbmNlUXVlcmllcy51cGRhdGUoY3JlYXRlZEluc3RhbmNlLmlkLCB1cGRhdGVzKTtcblxuICAgICAgZXhwZWN0KHVwZGF0ZWRJbnN0YW5jZS5uaWNrbmFtZSkudG9CZSgnVXBkYXRlZCBOaWNrbmFtZScpO1xuICAgICAgZXhwZWN0KHVwZGF0ZWRJbnN0YW5jZS5sb2NhdGlvbikudG9CZSgnTmV3IExvY2F0aW9uJyk7XG4gICAgICBleHBlY3QodXBkYXRlZEluc3RhbmNlLm5vdGVzKS50b0JlKCdVcGRhdGVkIG5vdGVzJyk7XG4gICAgICBleHBlY3QodXBkYXRlZEluc3RhbmNlLnVwZGF0ZWRBdC5nZXRUaW1lKCkpLnRvQmVHcmVhdGVyVGhhbihjcmVhdGVkSW5zdGFuY2UudXBkYXRlZEF0LmdldFRpbWUoKSk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgZGVhY3RpdmF0ZSBhbmQgcmVhY3RpdmF0ZSBwbGFudCBpbnN0YW5jZScsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHRlc3RVc2VyID0gY3JlYXRlVGVzdFVzZXIoKTtcbiAgICAgIGNvbnN0IGNyZWF0ZWRVc2VyID0gYXdhaXQgZGJNYW5hZ2VyLmNyZWF0ZVRlc3RVc2VyKHRlc3RVc2VyKTtcblxuICAgICAgY29uc3QgcGxhbnQgPSBjcmVhdGVUZXN0UGxhbnQoeyBjcmVhdGVkQnk6IGNyZWF0ZWRVc2VyLmlkIH0pO1xuICAgICAgY29uc3QgY3JlYXRlZFBsYW50ID0gYXdhaXQgUGxhbnRRdWVyaWVzLmNyZWF0ZShwbGFudCk7XG5cbiAgICAgIGNvbnN0IGluc3RhbmNlRGF0YSA9IGNyZWF0ZVRlc3RQbGFudEluc3RhbmNlKHtcbiAgICAgICAgdXNlcklkOiBjcmVhdGVkVXNlci5pZCxcbiAgICAgICAgcGxhbnRJZDogY3JlYXRlZFBsYW50LmlkLFxuICAgICAgICBpc0FjdGl2ZTogdHJ1ZSxcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCBjcmVhdGVkSW5zdGFuY2UgPSBhd2FpdCBQbGFudEluc3RhbmNlUXVlcmllcy5jcmVhdGUoaW5zdGFuY2VEYXRhKTtcblxuICAgICAgLy8gRGVhY3RpdmF0ZVxuICAgICAgY29uc3QgZGVhY3RpdmF0ZWRJbnN0YW5jZSA9IGF3YWl0IFBsYW50SW5zdGFuY2VRdWVyaWVzLmRlYWN0aXZhdGUoY3JlYXRlZEluc3RhbmNlLmlkKTtcbiAgICAgIGV4cGVjdChkZWFjdGl2YXRlZEluc3RhbmNlLmlzQWN0aXZlKS50b0JlKGZhbHNlKTtcblxuICAgICAgLy8gUmVhY3RpdmF0ZVxuICAgICAgY29uc3QgcmVhY3RpdmF0ZWRJbnN0YW5jZSA9IGF3YWl0IFBsYW50SW5zdGFuY2VRdWVyaWVzLnJlYWN0aXZhdGUoY3JlYXRlZEluc3RhbmNlLmlkKTtcbiAgICAgIGV4cGVjdChyZWFjdGl2YXRlZEluc3RhbmNlLmlzQWN0aXZlKS50b0JlKHRydWUpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnUGxhbnQgSW5zdGFuY2UgQ2FyZSBNYW5hZ2VtZW50JywgKCkgPT4ge1xuICAgIHRlc3QoJ3Nob3VsZCBsb2cgZmVydGlsaXplciBhcHBsaWNhdGlvbiBhbmQgY2FsY3VsYXRlIG5leHQgZHVlIGRhdGUnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCB0ZXN0VXNlciA9IGNyZWF0ZVRlc3RVc2VyKCk7XG4gICAgICBjb25zdCBjcmVhdGVkVXNlciA9IGF3YWl0IGRiTWFuYWdlci5jcmVhdGVUZXN0VXNlcih0ZXN0VXNlcik7XG5cbiAgICAgIGNvbnN0IHBsYW50ID0gY3JlYXRlVGVzdFBsYW50KHsgY3JlYXRlZEJ5OiBjcmVhdGVkVXNlci5pZCB9KTtcbiAgICAgIGNvbnN0IGNyZWF0ZWRQbGFudCA9IGF3YWl0IFBsYW50UXVlcmllcy5jcmVhdGUocGxhbnQpO1xuXG4gICAgICBjb25zdCBpbnN0YW5jZURhdGEgPSBjcmVhdGVUZXN0UGxhbnRJbnN0YW5jZSh7XG4gICAgICAgIHVzZXJJZDogY3JlYXRlZFVzZXIuaWQsXG4gICAgICAgIHBsYW50SWQ6IGNyZWF0ZWRQbGFudC5pZCxcbiAgICAgICAgZmVydGlsaXplclNjaGVkdWxlOiAnNCB3ZWVrcycsXG4gICAgICAgIGxhc3RGZXJ0aWxpemVkOiBudWxsLFxuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IGNyZWF0ZWRJbnN0YW5jZSA9IGF3YWl0IFBsYW50SW5zdGFuY2VRdWVyaWVzLmNyZWF0ZShpbnN0YW5jZURhdGEpO1xuXG4gICAgICBjb25zdCBmZXJ0aWxpemVyRGF0ZSA9IG5ldyBEYXRlKCk7XG4gICAgICBjb25zdCB1cGRhdGVkSW5zdGFuY2UgPSBhd2FpdCBQbGFudEluc3RhbmNlUXVlcmllcy5sb2dGZXJ0aWxpemVyKGNyZWF0ZWRJbnN0YW5jZS5pZCwgZmVydGlsaXplckRhdGUpO1xuXG4gICAgICBleHBlY3QodXBkYXRlZEluc3RhbmNlLmxhc3RGZXJ0aWxpemVkKS50b0VxdWFsKGZlcnRpbGl6ZXJEYXRlKTtcbiAgICAgIGV4cGVjdCh1cGRhdGVkSW5zdGFuY2UuZmVydGlsaXplckR1ZSkudG9CZURlZmluZWQoKTtcbiAgICAgIFxuICAgICAgLy8gU2hvdWxkIGJlIGFwcHJveGltYXRlbHkgNCB3ZWVrcyBmcm9tIGZlcnRpbGl6ZXIgZGF0ZVxuICAgICAgY29uc3QgZXhwZWN0ZWREdWUgPSBuZXcgRGF0ZShmZXJ0aWxpemVyRGF0ZSk7XG4gICAgICBleHBlY3RlZER1ZS5zZXREYXRlKGV4cGVjdGVkRHVlLmdldERhdGUoKSArIDI4KTtcbiAgICAgIGNvbnN0IHRpbWVEaWZmID0gTWF0aC5hYnModXBkYXRlZEluc3RhbmNlLmZlcnRpbGl6ZXJEdWUuZ2V0VGltZSgpIC0gZXhwZWN0ZWREdWUuZ2V0VGltZSgpKTtcbiAgICAgIGV4cGVjdCh0aW1lRGlmZikudG9CZUxlc3NUaGFuKDI0ICogNjAgKiA2MCAqIDEwMDApOyAvLyBXaXRoaW4gMjQgaG91cnNcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCBsb2cgcmVwb3R0aW5nIHdpdGggbm90ZXMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCB0ZXN0VXNlciA9IGNyZWF0ZVRlc3RVc2VyKCk7XG4gICAgICBjb25zdCBjcmVhdGVkVXNlciA9IGF3YWl0IGRiTWFuYWdlci5jcmVhdGVUZXN0VXNlcih0ZXN0VXNlcik7XG5cbiAgICAgIGNvbnN0IHBsYW50ID0gY3JlYXRlVGVzdFBsYW50KHsgY3JlYXRlZEJ5OiBjcmVhdGVkVXNlci5pZCB9KTtcbiAgICAgIGNvbnN0IGNyZWF0ZWRQbGFudCA9IGF3YWl0IFBsYW50UXVlcmllcy5jcmVhdGUocGxhbnQpO1xuXG4gICAgICBjb25zdCBpbnN0YW5jZURhdGEgPSBjcmVhdGVUZXN0UGxhbnRJbnN0YW5jZSh7XG4gICAgICAgIHVzZXJJZDogY3JlYXRlZFVzZXIuaWQsXG4gICAgICAgIHBsYW50SWQ6IGNyZWF0ZWRQbGFudC5pZCxcbiAgICAgICAgbGFzdFJlcG90OiBudWxsLFxuICAgICAgICBub3RlczogJ09yaWdpbmFsIG5vdGVzJyxcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCBjcmVhdGVkSW5zdGFuY2UgPSBhd2FpdCBQbGFudEluc3RhbmNlUXVlcmllcy5jcmVhdGUoaW5zdGFuY2VEYXRhKTtcblxuICAgICAgY29uc3QgcmVwb3REYXRlID0gbmV3IERhdGUoKTtcbiAgICAgIGNvbnN0IHJlcG90Tm90ZXMgPSAnTW92ZWQgdG8gbGFyZ2VyIHBvdCB3aXRoIGZyZXNoIHNvaWwnO1xuICAgICAgY29uc3QgdXBkYXRlZEluc3RhbmNlID0gYXdhaXQgUGxhbnRJbnN0YW5jZVF1ZXJpZXMubG9nUmVwb3QoY3JlYXRlZEluc3RhbmNlLmlkLCByZXBvdERhdGUsIHJlcG90Tm90ZXMpO1xuXG4gICAgICBleHBlY3QodXBkYXRlZEluc3RhbmNlLmxhc3RSZXBvdCkudG9FcXVhbChyZXBvdERhdGUpO1xuICAgICAgZXhwZWN0KHVwZGF0ZWRJbnN0YW5jZS5ub3RlcykudG9Db250YWluKCdPcmlnaW5hbCBub3RlcycpO1xuICAgICAgZXhwZWN0KHVwZGF0ZWRJbnN0YW5jZS5ub3RlcykudG9Db250YWluKHJlcG90Tm90ZXMpO1xuICAgICAgZXhwZWN0KHVwZGF0ZWRJbnN0YW5jZS5ub3RlcykudG9Db250YWluKHJlcG90RGF0ZS50b0RhdGVTdHJpbmcoKSk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgZ2V0IHBsYW50IGluc3RhbmNlcyB3aXRoIG92ZXJkdWUgZmVydGlsaXplcicsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHRlc3RVc2VyID0gY3JlYXRlVGVzdFVzZXIoKTtcbiAgICAgIGNvbnN0IGNyZWF0ZWRVc2VyID0gYXdhaXQgZGJNYW5hZ2VyLmNyZWF0ZVRlc3RVc2VyKHRlc3RVc2VyKTtcblxuICAgICAgY29uc3QgcGxhbnQgPSBjcmVhdGVUZXN0UGxhbnQoeyBjcmVhdGVkQnk6IGNyZWF0ZWRVc2VyLmlkIH0pO1xuICAgICAgY29uc3QgY3JlYXRlZFBsYW50ID0gYXdhaXQgUGxhbnRRdWVyaWVzLmNyZWF0ZShwbGFudCk7XG5cbiAgICAgIC8vIENyZWF0ZSBpbnN0YW5jZSB3aXRoIG92ZXJkdWUgZmVydGlsaXplclxuICAgICAgY29uc3Qgb3ZlcmR1ZURhdGUgPSBuZXcgRGF0ZSgpO1xuICAgICAgb3ZlcmR1ZURhdGUuc2V0RGF0ZShvdmVyZHVlRGF0ZS5nZXREYXRlKCkgLSAxKTsgLy8gMSBkYXkgb3ZlcmR1ZVxuXG4gICAgICBjb25zdCBpbnN0YW5jZURhdGEgPSBjcmVhdGVUZXN0UGxhbnRJbnN0YW5jZSh7XG4gICAgICAgIHVzZXJJZDogY3JlYXRlZFVzZXIuaWQsXG4gICAgICAgIHBsYW50SWQ6IGNyZWF0ZWRQbGFudC5pZCxcbiAgICAgICAgZmVydGlsaXplckR1ZTogb3ZlcmR1ZURhdGUsXG4gICAgICAgIGlzQWN0aXZlOiB0cnVlLFxuICAgICAgfSk7XG5cbiAgICAgIGF3YWl0IFBsYW50SW5zdGFuY2VRdWVyaWVzLmNyZWF0ZShpbnN0YW5jZURhdGEpO1xuXG4gICAgICBjb25zdCBvdmVyZHVlSW5zdGFuY2VzID0gYXdhaXQgUGxhbnRJbnN0YW5jZVF1ZXJpZXMuZ2V0T3ZlcmR1ZUZlcnRpbGl6ZXIoY3JlYXRlZFVzZXIuaWQpO1xuXG4gICAgICBleHBlY3Qob3ZlcmR1ZUluc3RhbmNlcy5sZW5ndGgpLnRvQmUoMSk7XG4gICAgICBleHBlY3Qob3ZlcmR1ZUluc3RhbmNlc1swXS5mZXJ0aWxpemVyRHVlLmdldFRpbWUoKSkudG9CZUxlc3NUaGFuT3JFcXVhbChEYXRlLm5vdygpKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCBnZXQgcGxhbnQgaW5zdGFuY2VzIHdpdGggZmVydGlsaXplciBkdWUgc29vbicsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHRlc3RVc2VyID0gY3JlYXRlVGVzdFVzZXIoKTtcbiAgICAgIGNvbnN0IGNyZWF0ZWRVc2VyID0gYXdhaXQgZGJNYW5hZ2VyLmNyZWF0ZVRlc3RVc2VyKHRlc3RVc2VyKTtcblxuICAgICAgY29uc3QgcGxhbnQgPSBjcmVhdGVUZXN0UGxhbnQoeyBjcmVhdGVkQnk6IGNyZWF0ZWRVc2VyLmlkIH0pO1xuICAgICAgY29uc3QgY3JlYXRlZFBsYW50ID0gYXdhaXQgUGxhbnRRdWVyaWVzLmNyZWF0ZShwbGFudCk7XG5cbiAgICAgIC8vIENyZWF0ZSBpbnN0YW5jZSB3aXRoIGZlcnRpbGl6ZXIgZHVlIGluIDMgZGF5c1xuICAgICAgY29uc3QgZHVlU29vbkRhdGUgPSBuZXcgRGF0ZSgpO1xuICAgICAgZHVlU29vbkRhdGUuc2V0RGF0ZShkdWVTb29uRGF0ZS5nZXREYXRlKCkgKyAzKTtcblxuICAgICAgY29uc3QgaW5zdGFuY2VEYXRhID0gY3JlYXRlVGVzdFBsYW50SW5zdGFuY2Uoe1xuICAgICAgICB1c2VySWQ6IGNyZWF0ZWRVc2VyLmlkLFxuICAgICAgICBwbGFudElkOiBjcmVhdGVkUGxhbnQuaWQsXG4gICAgICAgIGZlcnRpbGl6ZXJEdWU6IGR1ZVNvb25EYXRlLFxuICAgICAgICBpc0FjdGl2ZTogdHJ1ZSxcbiAgICAgIH0pO1xuXG4gICAgICBhd2FpdCBQbGFudEluc3RhbmNlUXVlcmllcy5jcmVhdGUoaW5zdGFuY2VEYXRhKTtcblxuICAgICAgY29uc3QgZHVlU29vbkluc3RhbmNlcyA9IGF3YWl0IFBsYW50SW5zdGFuY2VRdWVyaWVzLmdldEZlcnRpbGl6ZXJEdWVTb29uKGNyZWF0ZWRVc2VyLmlkLCA3KTtcblxuICAgICAgZXhwZWN0KGR1ZVNvb25JbnN0YW5jZXMubGVuZ3RoKS50b0JlKDEpO1xuICAgICAgZXhwZWN0KGR1ZVNvb25JbnN0YW5jZXNbMF0uZmVydGlsaXplckR1ZS5nZXRUaW1lKCkpLnRvQmVHcmVhdGVyVGhhbihEYXRlLm5vdygpKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ1BsYW50IEluc3RhbmNlIFNlYXJjaCBhbmQgRmlsdGVyaW5nJywgKCkgPT4ge1xuICAgIHRlc3QoJ3Nob3VsZCBzZWFyY2ggcGxhbnQgaW5zdGFuY2VzIGJ5IG5pY2tuYW1lIGFuZCBsb2NhdGlvbicsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHRlc3RVc2VyID0gY3JlYXRlVGVzdFVzZXIoKTtcbiAgICAgIGNvbnN0IGNyZWF0ZWRVc2VyID0gYXdhaXQgZGJNYW5hZ2VyLmNyZWF0ZVRlc3RVc2VyKHRlc3RVc2VyKTtcblxuICAgICAgY29uc3QgcGxhbnQgPSBjcmVhdGVUZXN0UGxhbnQoeyBjcmVhdGVkQnk6IGNyZWF0ZWRVc2VyLmlkIH0pO1xuICAgICAgY29uc3QgY3JlYXRlZFBsYW50ID0gYXdhaXQgUGxhbnRRdWVyaWVzLmNyZWF0ZShwbGFudCk7XG5cbiAgICAgIGNvbnN0IGluc3RhbmNlMSA9IGNyZWF0ZVRlc3RQbGFudEluc3RhbmNlKHtcbiAgICAgICAgdXNlcklkOiBjcmVhdGVkVXNlci5pZCxcbiAgICAgICAgcGxhbnRJZDogY3JlYXRlZFBsYW50LmlkLFxuICAgICAgICBuaWNrbmFtZTogJ0xpdmluZyBSb29tIE1vbnN0ZXJhJyxcbiAgICAgICAgbG9jYXRpb246ICdMaXZpbmcgUm9vbScsXG4gICAgICB9KTtcblxuICAgICAgY29uc3QgaW5zdGFuY2UyID0gY3JlYXRlVGVzdFBsYW50SW5zdGFuY2Uoe1xuICAgICAgICB1c2VySWQ6IGNyZWF0ZWRVc2VyLmlkLFxuICAgICAgICBwbGFudElkOiBjcmVhdGVkUGxhbnQuaWQsXG4gICAgICAgIG5pY2tuYW1lOiAnQmVkcm9vbSBQb3Rob3MnLFxuICAgICAgICBsb2NhdGlvbjogJ0JlZHJvb20nLFxuICAgICAgfSk7XG5cbiAgICAgIGF3YWl0IFBsYW50SW5zdGFuY2VRdWVyaWVzLmNyZWF0ZShpbnN0YW5jZTEpO1xuICAgICAgYXdhaXQgUGxhbnRJbnN0YW5jZVF1ZXJpZXMuY3JlYXRlKGluc3RhbmNlMik7XG5cbiAgICAgIC8vIFNlYXJjaCBieSBuaWNrbmFtZVxuICAgICAgY29uc3QgbW9uc3RlcmFSZXN1bHRzID0gYXdhaXQgUGxhbnRJbnN0YW5jZVF1ZXJpZXMuc2VhcmNoKGNyZWF0ZWRVc2VyLmlkLCAnTW9uc3RlcmEnKTtcbiAgICAgIGV4cGVjdChtb25zdGVyYVJlc3VsdHMubGVuZ3RoKS50b0JlKDEpO1xuICAgICAgZXhwZWN0KG1vbnN0ZXJhUmVzdWx0c1swXS5uaWNrbmFtZSkudG9Db250YWluKCdNb25zdGVyYScpO1xuXG4gICAgICAvLyBTZWFyY2ggYnkgbG9jYXRpb25cbiAgICAgIGNvbnN0IGJlZHJvb21SZXN1bHRzID0gYXdhaXQgUGxhbnRJbnN0YW5jZVF1ZXJpZXMuc2VhcmNoKGNyZWF0ZWRVc2VyLmlkLCAnQmVkcm9vbScpO1xuICAgICAgZXhwZWN0KGJlZHJvb21SZXN1bHRzLmxlbmd0aCkudG9CZSgxKTtcbiAgICAgIGV4cGVjdChiZWRyb29tUmVzdWx0c1swXS5sb2NhdGlvbikudG9CZSgnQmVkcm9vbScpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIGdldCBjYXJlIHN0YXRpc3RpY3MgZm9yIHVzZXInLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCB0ZXN0VXNlciA9IGNyZWF0ZVRlc3RVc2VyKCk7XG4gICAgICBjb25zdCBjcmVhdGVkVXNlciA9IGF3YWl0IGRiTWFuYWdlci5jcmVhdGVUZXN0VXNlcih0ZXN0VXNlcik7XG5cbiAgICAgIGNvbnN0IHBsYW50ID0gY3JlYXRlVGVzdFBsYW50KHsgY3JlYXRlZEJ5OiBjcmVhdGVkVXNlci5pZCB9KTtcbiAgICAgIGNvbnN0IGNyZWF0ZWRQbGFudCA9IGF3YWl0IFBsYW50UXVlcmllcy5jcmVhdGUocGxhbnQpO1xuXG4gICAgICAvLyBDcmVhdGUgYWN0aXZlIGluc3RhbmNlXG4gICAgICBjb25zdCBhY3RpdmVJbnN0YW5jZSA9IGNyZWF0ZVRlc3RQbGFudEluc3RhbmNlKHtcbiAgICAgICAgdXNlcklkOiBjcmVhdGVkVXNlci5pZCxcbiAgICAgICAgcGxhbnRJZDogY3JlYXRlZFBsYW50LmlkLFxuICAgICAgICBpc0FjdGl2ZTogdHJ1ZSxcbiAgICAgIH0pO1xuXG4gICAgICAvLyBDcmVhdGUgaW5hY3RpdmUgaW5zdGFuY2VcbiAgICAgIGNvbnN0IGluYWN0aXZlSW5zdGFuY2UgPSBjcmVhdGVUZXN0UGxhbnRJbnN0YW5jZSh7XG4gICAgICAgIHVzZXJJZDogY3JlYXRlZFVzZXIuaWQsXG4gICAgICAgIHBsYW50SWQ6IGNyZWF0ZWRQbGFudC5pZCxcbiAgICAgICAgaXNBY3RpdmU6IGZhbHNlLFxuICAgICAgfSk7XG5cbiAgICAgIGF3YWl0IFBsYW50SW5zdGFuY2VRdWVyaWVzLmNyZWF0ZShhY3RpdmVJbnN0YW5jZSk7XG4gICAgICBhd2FpdCBQbGFudEluc3RhbmNlUXVlcmllcy5jcmVhdGUoaW5hY3RpdmVJbnN0YW5jZSk7XG5cbiAgICAgIGNvbnN0IHN0YXRzID0gYXdhaXQgUGxhbnRJbnN0YW5jZVF1ZXJpZXMuZ2V0Q2FyZVN0YXRzKGNyZWF0ZWRVc2VyLmlkKTtcblxuICAgICAgZXhwZWN0KHN0YXRzLnRvdGFsUGxhbnRzKS50b0JlKDIpO1xuICAgICAgZXhwZWN0KHN0YXRzLmFjdGl2ZVBsYW50cykudG9CZSgxKTtcbiAgICAgIGV4cGVjdChzdGF0cy5vdmVyZHVlRmVydGlsaXplcikudG9CZUdyZWF0ZXJUaGFuT3JFcXVhbCgwKTtcbiAgICAgIGV4cGVjdChzdGF0cy5kdWVTb29uKS50b0JlR3JlYXRlclRoYW5PckVxdWFsKDApO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIGdldCB1bmlxdWUgbG9jYXRpb25zIGZvciB1c2VyJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgdGVzdFVzZXIgPSBjcmVhdGVUZXN0VXNlcigpO1xuICAgICAgY29uc3QgY3JlYXRlZFVzZXIgPSBhd2FpdCBkYk1hbmFnZXIuY3JlYXRlVGVzdFVzZXIodGVzdFVzZXIpO1xuXG4gICAgICBjb25zdCBwbGFudCA9IGNyZWF0ZVRlc3RQbGFudCh7IGNyZWF0ZWRCeTogY3JlYXRlZFVzZXIuaWQgfSk7XG4gICAgICBjb25zdCBjcmVhdGVkUGxhbnQgPSBhd2FpdCBQbGFudFF1ZXJpZXMuY3JlYXRlKHBsYW50KTtcblxuICAgICAgY29uc3QgbG9jYXRpb25zID0gWydMaXZpbmcgUm9vbScsICdCZWRyb29tJywgJ0tpdGNoZW4nLCAnTGl2aW5nIFJvb20nXTsgLy8gRHVwbGljYXRlXG5cbiAgICAgIGZvciAoY29uc3QgbG9jYXRpb24gb2YgbG9jYXRpb25zKSB7XG4gICAgICAgIGNvbnN0IGluc3RhbmNlID0gY3JlYXRlVGVzdFBsYW50SW5zdGFuY2Uoe1xuICAgICAgICAgIHVzZXJJZDogY3JlYXRlZFVzZXIuaWQsXG4gICAgICAgICAgcGxhbnRJZDogY3JlYXRlZFBsYW50LmlkLFxuICAgICAgICAgIGxvY2F0aW9uLFxuICAgICAgICB9KTtcbiAgICAgICAgYXdhaXQgUGxhbnRJbnN0YW5jZVF1ZXJpZXMuY3JlYXRlKGluc3RhbmNlKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgdXNlckxvY2F0aW9ucyA9IGF3YWl0IFBsYW50SW5zdGFuY2VRdWVyaWVzLmdldFVzZXJMb2NhdGlvbnMoY3JlYXRlZFVzZXIuaWQpO1xuXG4gICAgICBleHBlY3QodXNlckxvY2F0aW9ucy5sZW5ndGgpLnRvQmUoMyk7IC8vIFNob3VsZCBiZSB1bmlxdWVcbiAgICAgIGV4cGVjdCh1c2VyTG9jYXRpb25zKS50b0NvbnRhaW4oJ0xpdmluZyBSb29tJyk7XG4gICAgICBleHBlY3QodXNlckxvY2F0aW9ucykudG9Db250YWluKCdCZWRyb29tJyk7XG4gICAgICBleHBlY3QodXNlckxvY2F0aW9ucykudG9Db250YWluKCdLaXRjaGVuJyk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdQbGFudCBUYXhvbm9teSBWYWxpZGF0aW9uJywgKCkgPT4ge1xuICAgIHRlc3QoJ3Nob3VsZCB2YWxpZGF0ZSBwbGFudCB0YXhvbm9teSBmb3IgZHVwbGljYXRlcycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHRlc3RVc2VyID0gY3JlYXRlVGVzdFVzZXIoKTtcbiAgICAgIGNvbnN0IGNyZWF0ZWRVc2VyID0gYXdhaXQgZGJNYW5hZ2VyLmNyZWF0ZVRlc3RVc2VyKHRlc3RVc2VyKTtcblxuICAgICAgLy8gQ3JlYXRlIGV4aXN0aW5nIHBsYW50XG4gICAgICBjb25zdCBleGlzdGluZ1BsYW50ID0gY3JlYXRlVGVzdFBsYW50V2l0aFRheG9ub215KHtcbiAgICAgICAgZmFtaWx5OiAnQXJhY2VhZScsXG4gICAgICAgIGdlbnVzOiAnTW9uc3RlcmEnLFxuICAgICAgICBzcGVjaWVzOiAnZGVsaWNpb3NhJyxcbiAgICAgICAgY29tbW9uTmFtZTogJ01vbnN0ZXJhIERlbGljaW9zYScsXG4gICAgICB9LCB7IGNyZWF0ZWRCeTogY3JlYXRlZFVzZXIuaWQgfSk7XG5cbiAgICAgIGF3YWl0IFBsYW50UXVlcmllcy5jcmVhdGUoZXhpc3RpbmdQbGFudCk7XG5cbiAgICAgIC8vIFZhbGlkYXRlIHNhbWUgdGF4b25vbXlcbiAgICAgIGNvbnN0IHZhbGlkYXRpb24gPSBhd2FpdCB2YWxpZGF0ZVBsYW50VGF4b25vbXkoe1xuICAgICAgICBmYW1pbHk6ICdBcmFjZWFlJyxcbiAgICAgICAgZ2VudXM6ICdNb25zdGVyYScsXG4gICAgICAgIHNwZWNpZXM6ICdkZWxpY2lvc2EnLFxuICAgICAgICBjb21tb25OYW1lOiAnU3dpc3MgQ2hlZXNlIFBsYW50JywgLy8gRGlmZmVyZW50IGNvbW1vbiBuYW1lXG4gICAgICB9KTtcblxuICAgICAgZXhwZWN0KHZhbGlkYXRpb24uaXNWYWxpZCkudG9CZShmYWxzZSk7XG4gICAgICBleHBlY3QodmFsaWRhdGlvbi5lcnJvcnMpLnRvQ29udGFpbignQSBwbGFudCB3aXRoIHRoaXMgZXhhY3QgdGF4b25vbXkgYWxyZWFkeSBleGlzdHMnKTtcbiAgICAgIGV4cGVjdCh2YWxpZGF0aW9uLmR1cGxpY2F0ZXMubGVuZ3RoKS50b0JlKDEpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIHByb3ZpZGUgc3VnZ2VzdGlvbnMgZm9yIHNpbWlsYXIgdGF4b25vbXknLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCB0ZXN0VXNlciA9IGNyZWF0ZVRlc3RVc2VyKCk7XG4gICAgICBjb25zdCBjcmVhdGVkVXNlciA9IGF3YWl0IGRiTWFuYWdlci5jcmVhdGVUZXN0VXNlcih0ZXN0VXNlcik7XG5cbiAgICAgIC8vIENyZWF0ZSBwbGFudHMgd2l0aCBzaW1pbGFyIG5hbWVzXG4gICAgICBjb25zdCBhcmFjZWFlUGxhbnQgPSBjcmVhdGVUZXN0UGxhbnRXaXRoVGF4b25vbXkoe1xuICAgICAgICBmYW1pbHk6ICdBcmFjZWFlJyxcbiAgICAgICAgZ2VudXM6ICdNb25zdGVyYScsXG4gICAgICAgIHNwZWNpZXM6ICdkZWxpY2lvc2EnLFxuICAgICAgfSwgeyBjcmVhdGVkQnk6IGNyZWF0ZWRVc2VyLmlkIH0pO1xuXG4gICAgICBhd2FpdCBQbGFudFF1ZXJpZXMuY3JlYXRlKGFyYWNlYWVQbGFudCk7XG5cbiAgICAgIC8vIFZhbGlkYXRlIHNpbWlsYXIgdGF4b25vbXlcbiAgICAgIGNvbnN0IHZhbGlkYXRpb24gPSBhd2FpdCB2YWxpZGF0ZVBsYW50VGF4b25vbXkoe1xuICAgICAgICBmYW1pbHk6ICdBcmEnLCAvLyBQYXJ0aWFsIG1hdGNoXG4gICAgICAgIGdlbnVzOiAnTW9uJywgLy8gUGFydGlhbCBtYXRjaFxuICAgICAgICBzcGVjaWVzOiAnYWRhbnNvbmlpJyxcbiAgICAgICAgY29tbW9uTmFtZTogJ01vbnN0ZXJhIEFkYW5zb25paScsXG4gICAgICB9KTtcblxuICAgICAgZXhwZWN0KHZhbGlkYXRpb24uc3VnZ2VzdGlvbnMuZmFtaWx5Lmxlbmd0aCkudG9CZUdyZWF0ZXJUaGFuKDApO1xuICAgICAgZXhwZWN0KHZhbGlkYXRpb24uc3VnZ2VzdGlvbnMuZ2VudXMubGVuZ3RoKS50b0JlR3JlYXRlclRoYW4oMCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdFcnJvciBIYW5kbGluZyBhbmQgRWRnZSBDYXNlcycsICgpID0+IHtcbiAgICB0ZXN0KCdzaG91bGQgaGFuZGxlIG5vbi1leGlzdGVudCBwbGFudCBpbnN0YW5jZSBvcGVyYXRpb25zIGdyYWNlZnVsbHknLCBhc3luYyAoKSA9PiB7XG4gICAgICBhd2FpdCBleHBlY3QoUGxhbnRJbnN0YW5jZVF1ZXJpZXMudXBkYXRlKDk5OTk5LCB7IG5pY2tuYW1lOiAnVGVzdCcgfSkpXG4gICAgICAgIC5yZWplY3RzLnRvVGhyb3coJ1BsYW50IGluc3RhbmNlIG5vdCBmb3VuZCcpO1xuXG4gICAgICBhd2FpdCBleHBlY3QoUGxhbnRJbnN0YW5jZVF1ZXJpZXMubG9nRmVydGlsaXplcig5OTk5OSkpXG4gICAgICAgIC5yZWplY3RzLnRvVGhyb3coJ1BsYW50IGluc3RhbmNlIG5vdCBmb3VuZCcpO1xuXG4gICAgICBhd2FpdCBleHBlY3QoUGxhbnRJbnN0YW5jZVF1ZXJpZXMuZGVhY3RpdmF0ZSg5OTk5OSkpXG4gICAgICAgIC5yZWplY3RzLnRvVGhyb3coJ1BsYW50IGluc3RhbmNlIG5vdCBmb3VuZCcpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIGhhbmRsZSBub24tZXhpc3RlbnQgcGxhbnQgb3BlcmF0aW9ucyBncmFjZWZ1bGx5JywgYXN5bmMgKCkgPT4ge1xuICAgICAgYXdhaXQgZXhwZWN0KFBsYW50UXVlcmllcy51cGRhdGUoOTk5OTksIHsgY29tbW9uTmFtZTogJ1Rlc3QnIH0pKVxuICAgICAgICAucmVqZWN0cy50b1Rocm93KCdQbGFudCBub3QgZm91bmQnKTtcblxuICAgICAgY29uc3Qgbm9uRXhpc3RlbnRQbGFudCA9IGF3YWl0IFBsYW50UXVlcmllcy5nZXRCeUlkKDk5OTk5KTtcbiAgICAgIGV4cGVjdChub25FeGlzdGVudFBsYW50KS50b0JlTnVsbCgpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIGhhbmRsZSBlbXB0eSBzZWFyY2ggcXVlcmllcycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHJlc3VsdHMgPSBhd2FpdCBQbGFudFF1ZXJpZXMuc2VhcmNoKCcnKTtcbiAgICAgIGV4cGVjdChBcnJheS5pc0FycmF5KHJlc3VsdHMpKS50b0JlKHRydWUpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIGhhbmRsZSBpbnZhbGlkIGZlcnRpbGl6ZXIgc2NoZWR1bGUgZm9ybWF0cycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHRlc3RVc2VyID0gY3JlYXRlVGVzdFVzZXIoKTtcbiAgICAgIGNvbnN0IGNyZWF0ZWRVc2VyID0gYXdhaXQgZGJNYW5hZ2VyLmNyZWF0ZVRlc3RVc2VyKHRlc3RVc2VyKTtcblxuICAgICAgY29uc3QgcGxhbnQgPSBjcmVhdGVUZXN0UGxhbnQoeyBjcmVhdGVkQnk6IGNyZWF0ZWRVc2VyLmlkIH0pO1xuICAgICAgY29uc3QgY3JlYXRlZFBsYW50ID0gYXdhaXQgUGxhbnRRdWVyaWVzLmNyZWF0ZShwbGFudCk7XG5cbiAgICAgIGNvbnN0IGluc3RhbmNlRGF0YSA9IGNyZWF0ZVRlc3RQbGFudEluc3RhbmNlKHtcbiAgICAgICAgdXNlcklkOiBjcmVhdGVkVXNlci5pZCxcbiAgICAgICAgcGxhbnRJZDogY3JlYXRlZFBsYW50LmlkLFxuICAgICAgICBmZXJ0aWxpemVyU2NoZWR1bGU6ICdpbnZhbGlkIHNjaGVkdWxlIGZvcm1hdCcsXG4gICAgICB9KTtcblxuICAgICAgY29uc3QgY3JlYXRlZEluc3RhbmNlID0gYXdhaXQgUGxhbnRJbnN0YW5jZVF1ZXJpZXMuY3JlYXRlKGluc3RhbmNlRGF0YSk7XG5cbiAgICAgIC8vIFNob3VsZCBub3QgY3Jhc2gsIGJ1dCBtYXkgbm90IGNhbGN1bGF0ZSBuZXh0IGR1ZSBkYXRlXG4gICAgICBjb25zdCB1cGRhdGVkSW5zdGFuY2UgPSBhd2FpdCBQbGFudEluc3RhbmNlUXVlcmllcy5sb2dGZXJ0aWxpemVyKGNyZWF0ZWRJbnN0YW5jZS5pZCk7XG4gICAgICBleHBlY3QodXBkYXRlZEluc3RhbmNlLmxhc3RGZXJ0aWxpemVkKS50b0JlRGVmaW5lZCgpO1xuICAgICAgLy8gZmVydGlsaXplckR1ZSBtYXkgYmUgbnVsbCBkdWUgdG8gaW52YWxpZCBzY2hlZHVsZSBmb3JtYXRcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ0RhdGFiYXNlIENvbm5lY3Rpb24gYW5kIFBlcmZvcm1hbmNlJywgKCkgPT4ge1xuICAgIHRlc3QoJ3Nob3VsZCB2ZXJpZnkgZGF0YWJhc2UgY29ubmVjdGlvbiBpcyB3b3JraW5nJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgaXNDb25uZWN0ZWQgPSBhd2FpdCBkYk1hbmFnZXIuaXNDb25uZWN0ZWQoKTtcbiAgICAgIGV4cGVjdChpc0Nvbm5lY3RlZCkudG9CZSh0cnVlKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCBoYW5kbGUgY29uY3VycmVudCBwbGFudCBjcmVhdGlvbicsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHRlc3RVc2VyID0gY3JlYXRlVGVzdFVzZXIoKTtcbiAgICAgIGNvbnN0IGNyZWF0ZWRVc2VyID0gYXdhaXQgZGJNYW5hZ2VyLmNyZWF0ZVRlc3RVc2VyKHRlc3RVc2VyKTtcblxuICAgICAgY29uc3QgcGxhbnRQcm9taXNlcyA9IEFycmF5LmZyb20oeyBsZW5ndGg6IDUgfSwgKF8sIGluZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0IHBsYW50RGF0YSA9IGNyZWF0ZVRlc3RQbGFudCh7XG4gICAgICAgICAgY29tbW9uTmFtZTogYENvbmN1cnJlbnQgUGxhbnQgJHtpbmRleH1gLFxuICAgICAgICAgIGNyZWF0ZWRCeTogY3JlYXRlZFVzZXIuaWQsXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gUGxhbnRRdWVyaWVzLmNyZWF0ZShwbGFudERhdGEpO1xuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IHBsYW50cyA9IGF3YWl0IFByb21pc2UuYWxsKHBsYW50UHJvbWlzZXMpO1xuICAgICAgZXhwZWN0KHBsYW50cy5sZW5ndGgpLnRvQmUoNSk7XG4gICAgICBleHBlY3QocGxhbnRzLmV2ZXJ5KHAgPT4gcC5pZCkpLnRvQmUodHJ1ZSk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgaGFuZGxlIGxhcmdlIHNlYXJjaCByZXN1bHQgc2V0cyBlZmZpY2llbnRseScsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHRlc3RVc2VyID0gY3JlYXRlVGVzdFVzZXIoKTtcbiAgICAgIGNvbnN0IGNyZWF0ZWRVc2VyID0gYXdhaXQgZGJNYW5hZ2VyLmNyZWF0ZVRlc3RVc2VyKHRlc3RVc2VyKTtcblxuICAgICAgLy8gQ3JlYXRlIG1hbnkgcGxhbnRzIHdpdGggc2ltaWxhciBuYW1lc1xuICAgICAgY29uc3QgcGxhbnRQcm9taXNlcyA9IEFycmF5LmZyb20oeyBsZW5ndGg6IDIwIH0sIChfLCBpbmRleCkgPT4ge1xuICAgICAgICBjb25zdCBwbGFudERhdGEgPSBjcmVhdGVUZXN0UGxhbnQoe1xuICAgICAgICAgIGNvbW1vbk5hbWU6IGBTZWFyY2ggVGVzdCBQbGFudCAke2luZGV4fWAsXG4gICAgICAgICAgY3JlYXRlZEJ5OiBjcmVhdGVkVXNlci5pZCxcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBQbGFudFF1ZXJpZXMuY3JlYXRlKHBsYW50RGF0YSk7XG4gICAgICB9KTtcblxuICAgICAgYXdhaXQgUHJvbWlzZS5hbGwocGxhbnRQcm9taXNlcyk7XG5cbiAgICAgIGNvbnN0IHN0YXJ0VGltZSA9IERhdGUubm93KCk7XG4gICAgICBjb25zdCByZXN1bHRzID0gYXdhaXQgUGxhbnRRdWVyaWVzLnNlYXJjaCgnU2VhcmNoIFRlc3QnKTtcbiAgICAgIGNvbnN0IHNlYXJjaFRpbWUgPSBEYXRlLm5vdygpIC0gc3RhcnRUaW1lO1xuXG4gICAgICBleHBlY3QocmVzdWx0cy5sZW5ndGgpLnRvQmVHcmVhdGVyVGhhbigwKTtcbiAgICAgIGV4cGVjdChzZWFyY2hUaW1lKS50b0JlTGVzc1RoYW4oMTAwMCk7IC8vIFNob3VsZCBjb21wbGV0ZSB3aXRoaW4gMSBzZWNvbmRcbiAgICB9KTtcbiAgfSk7XG59KTsiXSwibmFtZXMiOlsiZGVzY3JpYmUiLCJkYk1hbmFnZXIiLCJiZWZvcmVFYWNoIiwiY3JlYXRlRGF0YWJhc2VUZXN0TWFuYWdlciIsInJlc2V0UGxhbnRDb3VudGVycyIsImFmdGVyRWFjaCIsImNsZWFudXAiLCJ0ZXN0IiwidGVzdFVzZXIiLCJjcmVhdGVUZXN0VXNlciIsImNyZWF0ZWRVc2VyIiwicGxhbnREYXRhIiwiZmFtaWx5IiwiZ2VudXMiLCJzcGVjaWVzIiwiY3VsdGl2YXIiLCJjb21tb25OYW1lIiwiY2FyZUluc3RydWN0aW9ucyIsImNyZWF0ZWRCeSIsImlkIiwiaXNWZXJpZmllZCIsInBsYW50IiwiUGxhbnRRdWVyaWVzIiwiY3JlYXRlIiwiZXhwZWN0IiwidG9CZURlZmluZWQiLCJ0b0JlIiwiY3JlYXRlZEF0IiwidG9CZUluc3RhbmNlT2YiLCJEYXRlIiwidXBkYXRlZEF0IiwiY3JlYXRlVGVzdFBsYW50IiwiY3JlYXRlZFBsYW50IiwiZm91bmRQbGFudCIsImdldEJ5SWQiLCJ0b0JlTnVsbCIsInVwZGF0ZXMiLCJ1cGRhdGVkUGxhbnQiLCJ1cGRhdGUiLCJnZXRUaW1lIiwidG9CZUdyZWF0ZXJUaGFuIiwiY3JlYXRlVGVzdFBsYW50V2l0aFRheG9ub215IiwiZXhpc3RpbmdQbGFudCIsInRheG9ub215RXhpc3RzIiwibm9uRXhpc3RpbmdQbGFudCIsInBsYW50V2l0aEN1bHRpdmFyIiwiZXhhY3RNYXRjaCIsIndpdGhvdXRDdWx0aXZhciIsIm1vbnN0ZXJhIiwicG90aG9zIiwibW9uc3RlcmFSZXN1bHRzIiwic2VhcmNoIiwibGVuZ3RoIiwic29tZSIsInAiLCJpbmNsdWRlcyIsInBvdGhvc1Jlc3VsdHMiLCJnZW51c1Jlc3VsdHMiLCJzcGVjaWVzUmVzdWx0cyIsImFyYWNlYWVSZXN1bHRzIiwiZ2V0QnlGYW1pbHkiLCJldmVyeSIsInJlc3VsdHMiLCJmdWxsVGV4dFNlYXJjaCIsInBsYW50cyIsImZpcnN0UGFnZSIsImdldEFsbCIsInNlY29uZFBhZ2UiLCJ0b0JlR3JlYXRlclRoYW5PckVxdWFsIiwiaW5zdGFuY2VEYXRhIiwidXNlcklkIiwicGxhbnRJZCIsIm5pY2tuYW1lIiwibG9jYXRpb24iLCJmZXJ0aWxpemVyU2NoZWR1bGUiLCJub3RlcyIsImltYWdlcyIsImlzQWN0aXZlIiwiaW5zdGFuY2UiLCJQbGFudEluc3RhbmNlUXVlcmllcyIsImNyZWF0ZVRlc3RQbGFudEluc3RhbmNlIiwiY3JlYXRlZEluc3RhbmNlIiwiZm91bmRJbnN0YW5jZSIsImluc3RhbmNlMSIsImluc3RhbmNlMiIsInVzZXJJbnN0YW5jZXMiLCJnZXRCeVVzZXJJZCIsImkiLCJ1cGRhdGVkSW5zdGFuY2UiLCJkZWFjdGl2YXRlZEluc3RhbmNlIiwiZGVhY3RpdmF0ZSIsInJlYWN0aXZhdGVkSW5zdGFuY2UiLCJyZWFjdGl2YXRlIiwibGFzdEZlcnRpbGl6ZWQiLCJmZXJ0aWxpemVyRGF0ZSIsImxvZ0ZlcnRpbGl6ZXIiLCJ0b0VxdWFsIiwiZmVydGlsaXplckR1ZSIsImV4cGVjdGVkRHVlIiwic2V0RGF0ZSIsImdldERhdGUiLCJ0aW1lRGlmZiIsIk1hdGgiLCJhYnMiLCJ0b0JlTGVzc1RoYW4iLCJsYXN0UmVwb3QiLCJyZXBvdERhdGUiLCJyZXBvdE5vdGVzIiwibG9nUmVwb3QiLCJ0b0NvbnRhaW4iLCJ0b0RhdGVTdHJpbmciLCJvdmVyZHVlRGF0ZSIsIm92ZXJkdWVJbnN0YW5jZXMiLCJnZXRPdmVyZHVlRmVydGlsaXplciIsInRvQmVMZXNzVGhhbk9yRXF1YWwiLCJub3ciLCJkdWVTb29uRGF0ZSIsImR1ZVNvb25JbnN0YW5jZXMiLCJnZXRGZXJ0aWxpemVyRHVlU29vbiIsImJlZHJvb21SZXN1bHRzIiwiYWN0aXZlSW5zdGFuY2UiLCJpbmFjdGl2ZUluc3RhbmNlIiwic3RhdHMiLCJnZXRDYXJlU3RhdHMiLCJ0b3RhbFBsYW50cyIsImFjdGl2ZVBsYW50cyIsIm92ZXJkdWVGZXJ0aWxpemVyIiwiZHVlU29vbiIsImxvY2F0aW9ucyIsInVzZXJMb2NhdGlvbnMiLCJnZXRVc2VyTG9jYXRpb25zIiwidmFsaWRhdGlvbiIsInZhbGlkYXRlUGxhbnRUYXhvbm9teSIsImlzVmFsaWQiLCJlcnJvcnMiLCJkdXBsaWNhdGVzIiwiYXJhY2VhZVBsYW50Iiwic3VnZ2VzdGlvbnMiLCJyZWplY3RzIiwidG9UaHJvdyIsIm5vbkV4aXN0ZW50UGxhbnQiLCJBcnJheSIsImlzQXJyYXkiLCJpc0Nvbm5lY3RlZCIsInBsYW50UHJvbWlzZXMiLCJmcm9tIiwiXyIsImluZGV4IiwiUHJvbWlzZSIsImFsbCIsInN0YXJ0VGltZSIsInNlYXJjaFRpbWUiXSwibWFwcGluZ3MiOiJBQUFBOzs7Q0FHQzs7Ozt3QkFFNEI7Z0NBQ1E7K0JBQzBDO3FDQUNyQzs4QkFTbkM7NkJBQ3dCO0FBRS9CQSxTQUFTLCtCQUErQjtJQUN0QyxJQUFJQztJQUVKQyxXQUFXO1FBQ1RELFlBQVlFLElBQUFBLDhDQUF5QjtRQUNyQ0MsSUFBQUEsZ0NBQWtCO0lBQ3BCO0lBRUFDLFVBQVU7UUFDUixNQUFNSixVQUFVSyxPQUFPO0lBQ3pCO0lBRUFOLFNBQVMsa0NBQWtDO1FBQ3pDTyxLQUFLLDRDQUE0QztZQUMvQyxNQUFNQyxXQUFXQyxJQUFBQSwyQkFBYztZQUMvQixNQUFNQyxjQUFjLE1BQU1ULFVBQVVRLGNBQWMsQ0FBQ0Q7WUFFbkQsTUFBTUcsWUFBWTtnQkFDaEJDLFFBQVE7Z0JBQ1JDLE9BQU87Z0JBQ1BDLFNBQVM7Z0JBQ1RDLFVBQVU7Z0JBQ1ZDLFlBQVk7Z0JBQ1pDLGtCQUFrQjtnQkFDbEJDLFdBQVdSLFlBQVlTLEVBQUU7Z0JBQ3pCQyxZQUFZO1lBQ2Q7WUFFQSxNQUFNQyxRQUFRLE1BQU1DLG9CQUFZLENBQUNDLE1BQU0sQ0FBQ1o7WUFFeENhLE9BQU9ILE9BQU9JLFdBQVc7WUFDekJELE9BQU9ILE1BQU1GLEVBQUUsRUFBRU0sV0FBVztZQUM1QkQsT0FBT0gsTUFBTVQsTUFBTSxFQUFFYyxJQUFJLENBQUM7WUFDMUJGLE9BQU9ILE1BQU1SLEtBQUssRUFBRWEsSUFBSSxDQUFDO1lBQ3pCRixPQUFPSCxNQUFNUCxPQUFPLEVBQUVZLElBQUksQ0FBQztZQUMzQkYsT0FBT0gsTUFBTUwsVUFBVSxFQUFFVSxJQUFJLENBQUM7WUFDOUJGLE9BQU9ILE1BQU1ILFNBQVMsRUFBRVEsSUFBSSxDQUFDaEIsWUFBWVMsRUFBRTtZQUMzQ0ssT0FBT0gsTUFBTUQsVUFBVSxFQUFFTSxJQUFJLENBQUM7WUFDOUJGLE9BQU9ILE1BQU1NLFNBQVMsRUFBRUMsY0FBYyxDQUFDQztZQUN2Q0wsT0FBT0gsTUFBTVMsU0FBUyxFQUFFRixjQUFjLENBQUNDO1FBQ3pDO1FBRUF0QixLQUFLLCtCQUErQjtZQUNsQyxNQUFNQyxXQUFXQyxJQUFBQSwyQkFBYztZQUMvQixNQUFNQyxjQUFjLE1BQU1ULFVBQVVRLGNBQWMsQ0FBQ0Q7WUFFbkQsTUFBTUcsWUFBWW9CLElBQUFBLDZCQUFlLEVBQUM7Z0JBQUViLFdBQVdSLFlBQVlTLEVBQUU7WUFBQztZQUM5RCxNQUFNYSxlQUFlLE1BQU1WLG9CQUFZLENBQUNDLE1BQU0sQ0FBQ1o7WUFFL0MsTUFBTXNCLGFBQWEsTUFBTVgsb0JBQVksQ0FBQ1ksT0FBTyxDQUFDRixhQUFhYixFQUFFO1lBRTdESyxPQUFPUyxZQUFZUixXQUFXO1lBQzlCRCxPQUFPUyxXQUFXZCxFQUFFLEVBQUVPLElBQUksQ0FBQ00sYUFBYWIsRUFBRTtZQUMxQ0ssT0FBT1MsV0FBV3JCLE1BQU0sRUFBRWMsSUFBSSxDQUFDTSxhQUFhcEIsTUFBTTtZQUNsRFksT0FBT1MsV0FBV3BCLEtBQUssRUFBRWEsSUFBSSxDQUFDTSxhQUFhbkIsS0FBSztZQUNoRFcsT0FBT1MsV0FBV25CLE9BQU8sRUFBRVksSUFBSSxDQUFDTSxhQUFhbEIsT0FBTztZQUNwRFUsT0FBT1MsV0FBV2pCLFVBQVUsRUFBRVUsSUFBSSxDQUFDTSxhQUFhaEIsVUFBVTtRQUM1RDtRQUVBVCxLQUFLLGdEQUFnRDtZQUNuRCxNQUFNYyxRQUFRLE1BQU1DLG9CQUFZLENBQUNZLE9BQU8sQ0FBQztZQUN6Q1YsT0FBT0gsT0FBT2MsUUFBUTtRQUN4QjtRQUVBNUIsS0FBSyxzQ0FBc0M7WUFDekMsTUFBTUMsV0FBV0MsSUFBQUEsMkJBQWM7WUFDL0IsTUFBTUMsY0FBYyxNQUFNVCxVQUFVUSxjQUFjLENBQUNEO1lBRW5ELE1BQU1HLFlBQVlvQixJQUFBQSw2QkFBZSxFQUFDO2dCQUFFYixXQUFXUixZQUFZUyxFQUFFO1lBQUM7WUFDOUQsTUFBTWEsZUFBZSxNQUFNVixvQkFBWSxDQUFDQyxNQUFNLENBQUNaO1lBRS9DLE1BQU15QixVQUFVO2dCQUNkcEIsWUFBWTtnQkFDWkMsa0JBQWtCO2dCQUNsQkcsWUFBWTtZQUNkO1lBRUEsTUFBTWlCLGVBQWUsTUFBTWYsb0JBQVksQ0FBQ2dCLE1BQU0sQ0FBQ04sYUFBYWIsRUFBRSxFQUFFaUI7WUFFaEVaLE9BQU9hLGFBQWFyQixVQUFVLEVBQUVVLElBQUksQ0FBQztZQUNyQ0YsT0FBT2EsYUFBYXBCLGdCQUFnQixFQUFFUyxJQUFJLENBQUM7WUFDM0NGLE9BQU9hLGFBQWFqQixVQUFVLEVBQUVNLElBQUksQ0FBQztZQUNyQ0YsT0FBT2EsYUFBYVAsU0FBUyxDQUFDUyxPQUFPLElBQUlDLGVBQWUsQ0FBQ1IsYUFBYUYsU0FBUyxDQUFDUyxPQUFPO1FBQ3pGO1FBRUFoQyxLQUFLLGlEQUFpRDtZQUNwRCxNQUFNQyxXQUFXQyxJQUFBQSwyQkFBYztZQUMvQixNQUFNQyxjQUFjLE1BQU1ULFVBQVVRLGNBQWMsQ0FBQ0Q7WUFFbkQsTUFBTUcsWUFBWThCLElBQUFBLHlDQUEyQixFQUFDO2dCQUM1QzdCLFFBQVE7Z0JBQ1JDLE9BQU87Z0JBQ1BDLFNBQVM7Z0JBQ1RDLFVBQVU7WUFDWixHQUFHO2dCQUFFRyxXQUFXUixZQUFZUyxFQUFFO1lBQUM7WUFFL0IsTUFBTUcsb0JBQVksQ0FBQ0MsTUFBTSxDQUFDWjtZQUUxQiw4QkFBOEI7WUFDOUIsTUFBTStCLGdCQUFnQixNQUFNcEIsb0JBQVksQ0FBQ3FCLGNBQWMsQ0FBQyxXQUFXLFlBQVk7WUFDL0VuQixPQUFPa0IsZUFBZWpCLFdBQVc7WUFDakNELE9BQU9rQixjQUFjOUIsTUFBTSxFQUFFYyxJQUFJLENBQUM7WUFFbEMsa0NBQWtDO1lBQ2xDLE1BQU1rQixtQkFBbUIsTUFBTXRCLG9CQUFZLENBQUNxQixjQUFjLENBQUMsV0FBVyxZQUFZO1lBQ2xGbkIsT0FBT29CLGtCQUFrQlQsUUFBUTtRQUNuQztRQUVBNUIsS0FBSyxpRUFBaUU7WUFDcEUsTUFBTUMsV0FBV0MsSUFBQUEsMkJBQWM7WUFDL0IsTUFBTUMsY0FBYyxNQUFNVCxVQUFVUSxjQUFjLENBQUNEO1lBRW5ELDZCQUE2QjtZQUM3QixNQUFNcUMsb0JBQW9CSixJQUFBQSx5Q0FBMkIsRUFBQztnQkFDcEQ3QixRQUFRO2dCQUNSQyxPQUFPO2dCQUNQQyxTQUFTO2dCQUNUQyxVQUFVO1lBQ1osR0FBRztnQkFBRUcsV0FBV1IsWUFBWVMsRUFBRTtZQUFDO1lBRS9CLE1BQU1HLG9CQUFZLENBQUNDLE1BQU0sQ0FBQ3NCO1lBRTFCLHNDQUFzQztZQUN0QyxNQUFNQyxhQUFhLE1BQU14QixvQkFBWSxDQUFDcUIsY0FBYyxDQUFDLFdBQVcsWUFBWSxhQUFhO1lBQ3pGbkIsT0FBT3NCLFlBQVlyQixXQUFXO1lBRTlCLDBDQUEwQztZQUMxQyxNQUFNc0Isa0JBQWtCLE1BQU16QixvQkFBWSxDQUFDcUIsY0FBYyxDQUFDLFdBQVcsWUFBWTtZQUNqRm5CLE9BQU91QixpQkFBaUJaLFFBQVEsSUFBSSx5REFBeUQ7UUFDL0Y7SUFDRjtJQUVBbkMsU0FBUyw4QkFBOEI7UUFDckNPLEtBQUssdUNBQXVDO1lBQzFDLE1BQU1DLFdBQVdDLElBQUFBLDJCQUFjO1lBQy9CLE1BQU1DLGNBQWMsTUFBTVQsVUFBVVEsY0FBYyxDQUFDRDtZQUVuRCxxQkFBcUI7WUFDckIsTUFBTXdDLFdBQVdQLElBQUFBLHlDQUEyQixFQUFDO2dCQUMzQzdCLFFBQVE7Z0JBQ1JDLE9BQU87Z0JBQ1BDLFNBQVM7Z0JBQ1RFLFlBQVk7WUFDZCxHQUFHO2dCQUFFRSxXQUFXUixZQUFZUyxFQUFFO1lBQUM7WUFFL0IsTUFBTThCLFNBQVNSLElBQUFBLHlDQUEyQixFQUFDO2dCQUN6QzdCLFFBQVE7Z0JBQ1JDLE9BQU87Z0JBQ1BDLFNBQVM7Z0JBQ1RFLFlBQVk7WUFDZCxHQUFHO2dCQUFFRSxXQUFXUixZQUFZUyxFQUFFO1lBQUM7WUFFL0IsTUFBTUcsb0JBQVksQ0FBQ0MsTUFBTSxDQUFDeUI7WUFDMUIsTUFBTTFCLG9CQUFZLENBQUNDLE1BQU0sQ0FBQzBCO1lBRTFCLHdCQUF3QjtZQUN4QixNQUFNQyxrQkFBa0IsTUFBTTVCLG9CQUFZLENBQUM2QixNQUFNLENBQUM7WUFDbEQzQixPQUFPMEIsZ0JBQWdCRSxNQUFNLEVBQUVaLGVBQWUsQ0FBQztZQUMvQ2hCLE9BQU8wQixnQkFBZ0JHLElBQUksQ0FBQ0MsQ0FBQUEsSUFBS0EsRUFBRXRDLFVBQVUsQ0FBQ3VDLFFBQVEsQ0FBQyxjQUFjN0IsSUFBSSxDQUFDO1lBRTFFLE1BQU04QixnQkFBZ0IsTUFBTWxDLG9CQUFZLENBQUM2QixNQUFNLENBQUM7WUFDaEQzQixPQUFPZ0MsY0FBY0osTUFBTSxFQUFFWixlQUFlLENBQUM7WUFDN0NoQixPQUFPZ0MsY0FBY0gsSUFBSSxDQUFDQyxDQUFBQSxJQUFLQSxFQUFFdEMsVUFBVSxDQUFDdUMsUUFBUSxDQUFDLFlBQVk3QixJQUFJLENBQUM7UUFDeEU7UUFFQW5CLEtBQUssNkNBQTZDO1lBQ2hELE1BQU1DLFdBQVdDLElBQUFBLDJCQUFjO1lBQy9CLE1BQU1DLGNBQWMsTUFBTVQsVUFBVVEsY0FBYyxDQUFDRDtZQUVuRCxNQUFNYSxRQUFRb0IsSUFBQUEseUNBQTJCLEVBQUM7Z0JBQ3hDN0IsUUFBUTtnQkFDUkMsT0FBTztnQkFDUEMsU0FBUztnQkFDVEUsWUFBWTtZQUNkLEdBQUc7Z0JBQUVFLFdBQVdSLFlBQVlTLEVBQUU7WUFBQztZQUUvQixNQUFNRyxvQkFBWSxDQUFDQyxNQUFNLENBQUNGO1lBRTFCLGtCQUFrQjtZQUNsQixNQUFNb0MsZUFBZSxNQUFNbkMsb0JBQVksQ0FBQzZCLE1BQU0sQ0FBQztZQUMvQzNCLE9BQU9pQyxhQUFhTCxNQUFNLEVBQUVaLGVBQWUsQ0FBQztZQUM1Q2hCLE9BQU9pQyxhQUFhSixJQUFJLENBQUNDLENBQUFBLElBQUtBLEVBQUV6QyxLQUFLLEtBQUssYUFBYWEsSUFBSSxDQUFDO1lBRTVELG9CQUFvQjtZQUNwQixNQUFNZ0MsaUJBQWlCLE1BQU1wQyxvQkFBWSxDQUFDNkIsTUFBTSxDQUFDO1lBQ2pEM0IsT0FBT2tDLGVBQWVOLE1BQU0sRUFBRVosZUFBZSxDQUFDO1lBQzlDaEIsT0FBT2tDLGVBQWVMLElBQUksQ0FBQ0MsQ0FBQUEsSUFBS0EsRUFBRXhDLE9BQU8sS0FBSyxjQUFjWSxJQUFJLENBQUM7UUFDbkU7UUFFQW5CLEtBQUssK0JBQStCO1lBQ2xDLE1BQU1DLFdBQVdDLElBQUFBLDJCQUFjO1lBQy9CLE1BQU1DLGNBQWMsTUFBTVQsVUFBVVEsY0FBYyxDQUFDRDtZQUVuRCwrQkFBK0I7WUFDL0IsTUFBTXdDLFdBQVdQLElBQUFBLHlDQUEyQixFQUFDO2dCQUMzQzdCLFFBQVE7Z0JBQ1JDLE9BQU87Z0JBQ1BDLFNBQVM7WUFDWCxHQUFHO2dCQUFFSSxXQUFXUixZQUFZUyxFQUFFO1lBQUM7WUFFL0IsTUFBTThCLFNBQVNSLElBQUFBLHlDQUEyQixFQUFDO2dCQUN6QzdCLFFBQVE7Z0JBQ1JDLE9BQU87Z0JBQ1BDLFNBQVM7WUFDWCxHQUFHO2dCQUFFSSxXQUFXUixZQUFZUyxFQUFFO1lBQUM7WUFFL0IsTUFBTUcsb0JBQVksQ0FBQ0MsTUFBTSxDQUFDeUI7WUFDMUIsTUFBTTFCLG9CQUFZLENBQUNDLE1BQU0sQ0FBQzBCO1lBRTFCLE1BQU1VLGlCQUFpQixNQUFNckMsb0JBQVksQ0FBQ3NDLFdBQVcsQ0FBQztZQUN0RHBDLE9BQU9tQyxlQUFlUCxNQUFNLEVBQUUxQixJQUFJLENBQUM7WUFDbkNGLE9BQU9tQyxlQUFlRSxLQUFLLENBQUNQLENBQUFBLElBQUtBLEVBQUUxQyxNQUFNLEtBQUssWUFBWWMsSUFBSSxDQUFDO1FBQ2pFO1FBRUFuQixLQUFLLG1DQUFtQztZQUN0QyxNQUFNQyxXQUFXQyxJQUFBQSwyQkFBYztZQUMvQixNQUFNQyxjQUFjLE1BQU1ULFVBQVVRLGNBQWMsQ0FBQ0Q7WUFFbkQsTUFBTWEsUUFBUW9CLElBQUFBLHlDQUEyQixFQUFDO2dCQUN4QzdCLFFBQVE7Z0JBQ1JDLE9BQU87Z0JBQ1BDLFNBQVM7Z0JBQ1RFLFlBQVk7WUFDZCxHQUFHO2dCQUFFRSxXQUFXUixZQUFZUyxFQUFFO1lBQUM7WUFFL0IsTUFBTUcsb0JBQVksQ0FBQ0MsTUFBTSxDQUFDRjtZQUUxQiwwRkFBMEY7WUFDMUYsTUFBTXlDLFVBQVUsTUFBTXhDLG9CQUFZLENBQUN5QyxjQUFjLENBQUM7WUFDbER2QyxPQUFPc0MsUUFBUVYsTUFBTSxFQUFFWixlQUFlLENBQUM7UUFDekM7UUFFQWpDLEtBQUsseUNBQXlDO1lBQzVDLE1BQU1DLFdBQVdDLElBQUFBLDJCQUFjO1lBQy9CLE1BQU1DLGNBQWMsTUFBTVQsVUFBVVEsY0FBYyxDQUFDRDtZQUVuRCx5QkFBeUI7WUFDekIsTUFBTXdELFNBQVM7Z0JBQ2J2QixJQUFBQSx5Q0FBMkIsRUFBQztvQkFBRXpCLFlBQVk7Z0JBQVUsR0FBRztvQkFBRUUsV0FBV1IsWUFBWVMsRUFBRTtnQkFBQztnQkFDbkZzQixJQUFBQSx5Q0FBMkIsRUFBQztvQkFBRXpCLFlBQVk7Z0JBQVUsR0FBRztvQkFBRUUsV0FBV1IsWUFBWVMsRUFBRTtnQkFBQztnQkFDbkZzQixJQUFBQSx5Q0FBMkIsRUFBQztvQkFBRXpCLFlBQVk7Z0JBQVUsR0FBRztvQkFBRUUsV0FBV1IsWUFBWVMsRUFBRTtnQkFBQzthQUNwRjtZQUVELEtBQUssTUFBTUUsU0FBUzJDLE9BQVE7Z0JBQzFCLE1BQU0xQyxvQkFBWSxDQUFDQyxNQUFNLENBQUNGO1lBQzVCO1lBRUEsa0JBQWtCO1lBQ2xCLE1BQU00QyxZQUFZLE1BQU0zQyxvQkFBWSxDQUFDNEMsTUFBTSxDQUFDLEdBQUc7WUFDL0MxQyxPQUFPeUMsVUFBVWIsTUFBTSxFQUFFMUIsSUFBSSxDQUFDO1lBRTlCLE1BQU15QyxhQUFhLE1BQU03QyxvQkFBWSxDQUFDNEMsTUFBTSxDQUFDLEdBQUc7WUFDaEQxQyxPQUFPMkMsV0FBV2YsTUFBTSxFQUFFZ0Isc0JBQXNCLENBQUM7UUFDbkQ7SUFDRjtJQUVBcEUsU0FBUyxrQ0FBa0M7UUFDekNPLEtBQUssc0NBQXNDO1lBQ3pDLE1BQU1DLFdBQVdDLElBQUFBLDJCQUFjO1lBQy9CLE1BQU1DLGNBQWMsTUFBTVQsVUFBVVEsY0FBYyxDQUFDRDtZQUVuRCxNQUFNYSxRQUFRVSxJQUFBQSw2QkFBZSxFQUFDO2dCQUFFYixXQUFXUixZQUFZUyxFQUFFO1lBQUM7WUFDMUQsTUFBTWEsZUFBZSxNQUFNVixvQkFBWSxDQUFDQyxNQUFNLENBQUNGO1lBRS9DLE1BQU1nRCxlQUFlO2dCQUNuQkMsUUFBUTVELFlBQVlTLEVBQUU7Z0JBQ3RCb0QsU0FBU3ZDLGFBQWFiLEVBQUU7Z0JBQ3hCcUQsVUFBVTtnQkFDVkMsVUFBVTtnQkFDVkMsb0JBQW9CO2dCQUNwQkMsT0FBTztnQkFDUEMsUUFBUSxFQUFFO2dCQUNWQyxVQUFVO1lBQ1o7WUFFQSxNQUFNQyxXQUFXLE1BQU1DLG9DQUFvQixDQUFDeEQsTUFBTSxDQUFDOEM7WUFFbkQ3QyxPQUFPc0QsVUFBVXJELFdBQVc7WUFDNUJELE9BQU9zRCxTQUFTM0QsRUFBRSxFQUFFTSxXQUFXO1lBQy9CRCxPQUFPc0QsU0FBU1IsTUFBTSxFQUFFNUMsSUFBSSxDQUFDaEIsWUFBWVMsRUFBRTtZQUMzQ0ssT0FBT3NELFNBQVNQLE9BQU8sRUFBRTdDLElBQUksQ0FBQ00sYUFBYWIsRUFBRTtZQUM3Q0ssT0FBT3NELFNBQVNOLFFBQVEsRUFBRTlDLElBQUksQ0FBQztZQUMvQkYsT0FBT3NELFNBQVNMLFFBQVEsRUFBRS9DLElBQUksQ0FBQztZQUMvQkYsT0FBT3NELFNBQVNKLGtCQUFrQixFQUFFaEQsSUFBSSxDQUFDO1lBQ3pDRixPQUFPc0QsU0FBU0QsUUFBUSxFQUFFbkQsSUFBSSxDQUFDO1lBQy9CRixPQUFPc0QsU0FBU25ELFNBQVMsRUFBRUMsY0FBYyxDQUFDQztRQUM1QztRQUVBdEIsS0FBSyx3REFBd0Q7WUFDM0QsTUFBTUMsV0FBV0MsSUFBQUEsMkJBQWM7WUFDL0IsTUFBTUMsY0FBYyxNQUFNVCxVQUFVUSxjQUFjLENBQUNEO1lBRW5ELE1BQU1hLFFBQVFVLElBQUFBLDZCQUFlLEVBQUM7Z0JBQUViLFdBQVdSLFlBQVlTLEVBQUU7WUFBQztZQUMxRCxNQUFNYSxlQUFlLE1BQU1WLG9CQUFZLENBQUNDLE1BQU0sQ0FBQ0Y7WUFFL0MsTUFBTWdELGVBQWVXLElBQUFBLHFDQUF1QixFQUFDO2dCQUMzQ1YsUUFBUTVELFlBQVlTLEVBQUU7Z0JBQ3RCb0QsU0FBU3ZDLGFBQWFiLEVBQUU7WUFDMUI7WUFFQSxNQUFNOEQsa0JBQWtCLE1BQU1GLG9DQUFvQixDQUFDeEQsTUFBTSxDQUFDOEM7WUFFMUQsTUFBTWEsZ0JBQWdCLE1BQU1ILG9DQUFvQixDQUFDN0MsT0FBTyxDQUFDK0MsZ0JBQWdCOUQsRUFBRTtZQUUzRUssT0FBTzBELGVBQWV6RCxXQUFXO1lBQ2pDRCxPQUFPMEQsY0FBYy9ELEVBQUUsRUFBRU8sSUFBSSxDQUFDdUQsZ0JBQWdCOUQsRUFBRTtZQUNoREssT0FBTzBELGNBQWM3RCxLQUFLLEVBQUVJLFdBQVc7WUFDdkNELE9BQU8wRCxjQUFjN0QsS0FBSyxDQUFDRixFQUFFLEVBQUVPLElBQUksQ0FBQ00sYUFBYWIsRUFBRTtZQUNuREssT0FBTzBELGNBQWM3RCxLQUFLLENBQUNMLFVBQVUsRUFBRVUsSUFBSSxDQUFDTSxhQUFhaEIsVUFBVTtRQUNyRTtRQUVBVCxLQUFLLDZDQUE2QztZQUNoRCxNQUFNQyxXQUFXQyxJQUFBQSwyQkFBYztZQUMvQixNQUFNQyxjQUFjLE1BQU1ULFVBQVVRLGNBQWMsQ0FBQ0Q7WUFFbkQsTUFBTWEsUUFBUVUsSUFBQUEsNkJBQWUsRUFBQztnQkFBRWIsV0FBV1IsWUFBWVMsRUFBRTtZQUFDO1lBQzFELE1BQU1hLGVBQWUsTUFBTVYsb0JBQVksQ0FBQ0MsTUFBTSxDQUFDRjtZQUUvQyx5Q0FBeUM7WUFDekMsTUFBTThELFlBQVlILElBQUFBLHFDQUF1QixFQUFDO2dCQUN4Q1YsUUFBUTVELFlBQVlTLEVBQUU7Z0JBQ3RCb0QsU0FBU3ZDLGFBQWFiLEVBQUU7Z0JBQ3hCcUQsVUFBVTtZQUNaO1lBRUEsTUFBTVksWUFBWUosSUFBQUEscUNBQXVCLEVBQUM7Z0JBQ3hDVixRQUFRNUQsWUFBWVMsRUFBRTtnQkFDdEJvRCxTQUFTdkMsYUFBYWIsRUFBRTtnQkFDeEJxRCxVQUFVO1lBQ1o7WUFFQSxNQUFNTyxvQ0FBb0IsQ0FBQ3hELE1BQU0sQ0FBQzREO1lBQ2xDLE1BQU1KLG9DQUFvQixDQUFDeEQsTUFBTSxDQUFDNkQ7WUFFbEMsTUFBTUMsZ0JBQWdCLE1BQU1OLG9DQUFvQixDQUFDTyxXQUFXLENBQUM1RSxZQUFZUyxFQUFFO1lBRTNFSyxPQUFPNkQsY0FBY2pDLE1BQU0sRUFBRTFCLElBQUksQ0FBQztZQUNsQ0YsT0FBTzZELGNBQWN4QixLQUFLLENBQUMwQixDQUFBQSxJQUFLQSxFQUFFakIsTUFBTSxLQUFLNUQsWUFBWVMsRUFBRSxHQUFHTyxJQUFJLENBQUM7WUFDbkVGLE9BQU82RCxjQUFjeEIsS0FBSyxDQUFDMEIsQ0FBQUEsSUFBS0EsRUFBRWxFLEtBQUssR0FBR0ssSUFBSSxDQUFDO1FBQ2pEO1FBRUFuQixLQUFLLGdDQUFnQztZQUNuQyxNQUFNQyxXQUFXQyxJQUFBQSwyQkFBYztZQUMvQixNQUFNQyxjQUFjLE1BQU1ULFVBQVVRLGNBQWMsQ0FBQ0Q7WUFFbkQsTUFBTWEsUUFBUVUsSUFBQUEsNkJBQWUsRUFBQztnQkFBRWIsV0FBV1IsWUFBWVMsRUFBRTtZQUFDO1lBQzFELE1BQU1hLGVBQWUsTUFBTVYsb0JBQVksQ0FBQ0MsTUFBTSxDQUFDRjtZQUUvQyxNQUFNZ0QsZUFBZVcsSUFBQUEscUNBQXVCLEVBQUM7Z0JBQzNDVixRQUFRNUQsWUFBWVMsRUFBRTtnQkFDdEJvRCxTQUFTdkMsYUFBYWIsRUFBRTtZQUMxQjtZQUVBLE1BQU04RCxrQkFBa0IsTUFBTUYsb0NBQW9CLENBQUN4RCxNQUFNLENBQUM4QztZQUUxRCxNQUFNakMsVUFBVTtnQkFDZG9DLFVBQVU7Z0JBQ1ZDLFVBQVU7Z0JBQ1ZFLE9BQU87WUFDVDtZQUVBLE1BQU1hLGtCQUFrQixNQUFNVCxvQ0FBb0IsQ0FBQ3pDLE1BQU0sQ0FBQzJDLGdCQUFnQjlELEVBQUUsRUFBRWlCO1lBRTlFWixPQUFPZ0UsZ0JBQWdCaEIsUUFBUSxFQUFFOUMsSUFBSSxDQUFDO1lBQ3RDRixPQUFPZ0UsZ0JBQWdCZixRQUFRLEVBQUUvQyxJQUFJLENBQUM7WUFDdENGLE9BQU9nRSxnQkFBZ0JiLEtBQUssRUFBRWpELElBQUksQ0FBQztZQUNuQ0YsT0FBT2dFLGdCQUFnQjFELFNBQVMsQ0FBQ1MsT0FBTyxJQUFJQyxlQUFlLENBQUN5QyxnQkFBZ0JuRCxTQUFTLENBQUNTLE9BQU87UUFDL0Y7UUFFQWhDLEtBQUssbURBQW1EO1lBQ3RELE1BQU1DLFdBQVdDLElBQUFBLDJCQUFjO1lBQy9CLE1BQU1DLGNBQWMsTUFBTVQsVUFBVVEsY0FBYyxDQUFDRDtZQUVuRCxNQUFNYSxRQUFRVSxJQUFBQSw2QkFBZSxFQUFDO2dCQUFFYixXQUFXUixZQUFZUyxFQUFFO1lBQUM7WUFDMUQsTUFBTWEsZUFBZSxNQUFNVixvQkFBWSxDQUFDQyxNQUFNLENBQUNGO1lBRS9DLE1BQU1nRCxlQUFlVyxJQUFBQSxxQ0FBdUIsRUFBQztnQkFDM0NWLFFBQVE1RCxZQUFZUyxFQUFFO2dCQUN0Qm9ELFNBQVN2QyxhQUFhYixFQUFFO2dCQUN4QjBELFVBQVU7WUFDWjtZQUVBLE1BQU1JLGtCQUFrQixNQUFNRixvQ0FBb0IsQ0FBQ3hELE1BQU0sQ0FBQzhDO1lBRTFELGFBQWE7WUFDYixNQUFNb0Isc0JBQXNCLE1BQU1WLG9DQUFvQixDQUFDVyxVQUFVLENBQUNULGdCQUFnQjlELEVBQUU7WUFDcEZLLE9BQU9pRSxvQkFBb0JaLFFBQVEsRUFBRW5ELElBQUksQ0FBQztZQUUxQyxhQUFhO1lBQ2IsTUFBTWlFLHNCQUFzQixNQUFNWixvQ0FBb0IsQ0FBQ2EsVUFBVSxDQUFDWCxnQkFBZ0I5RCxFQUFFO1lBQ3BGSyxPQUFPbUUsb0JBQW9CZCxRQUFRLEVBQUVuRCxJQUFJLENBQUM7UUFDNUM7SUFDRjtJQUVBMUIsU0FBUyxrQ0FBa0M7UUFDekNPLEtBQUssaUVBQWlFO1lBQ3BFLE1BQU1DLFdBQVdDLElBQUFBLDJCQUFjO1lBQy9CLE1BQU1DLGNBQWMsTUFBTVQsVUFBVVEsY0FBYyxDQUFDRDtZQUVuRCxNQUFNYSxRQUFRVSxJQUFBQSw2QkFBZSxFQUFDO2dCQUFFYixXQUFXUixZQUFZUyxFQUFFO1lBQUM7WUFDMUQsTUFBTWEsZUFBZSxNQUFNVixvQkFBWSxDQUFDQyxNQUFNLENBQUNGO1lBRS9DLE1BQU1nRCxlQUFlVyxJQUFBQSxxQ0FBdUIsRUFBQztnQkFDM0NWLFFBQVE1RCxZQUFZUyxFQUFFO2dCQUN0Qm9ELFNBQVN2QyxhQUFhYixFQUFFO2dCQUN4QnVELG9CQUFvQjtnQkFDcEJtQixnQkFBZ0I7WUFDbEI7WUFFQSxNQUFNWixrQkFBa0IsTUFBTUYsb0NBQW9CLENBQUN4RCxNQUFNLENBQUM4QztZQUUxRCxNQUFNeUIsaUJBQWlCLElBQUlqRTtZQUMzQixNQUFNMkQsa0JBQWtCLE1BQU1ULG9DQUFvQixDQUFDZ0IsYUFBYSxDQUFDZCxnQkFBZ0I5RCxFQUFFLEVBQUUyRTtZQUVyRnRFLE9BQU9nRSxnQkFBZ0JLLGNBQWMsRUFBRUcsT0FBTyxDQUFDRjtZQUMvQ3RFLE9BQU9nRSxnQkFBZ0JTLGFBQWEsRUFBRXhFLFdBQVc7WUFFakQsdURBQXVEO1lBQ3ZELE1BQU15RSxjQUFjLElBQUlyRSxLQUFLaUU7WUFDN0JJLFlBQVlDLE9BQU8sQ0FBQ0QsWUFBWUUsT0FBTyxLQUFLO1lBQzVDLE1BQU1DLFdBQVdDLEtBQUtDLEdBQUcsQ0FBQ2YsZ0JBQWdCUyxhQUFhLENBQUMxRCxPQUFPLEtBQUsyRCxZQUFZM0QsT0FBTztZQUN2RmYsT0FBTzZFLFVBQVVHLFlBQVksQ0FBQyxLQUFLLEtBQUssS0FBSyxPQUFPLGtCQUFrQjtRQUN4RTtRQUVBakcsS0FBSyxtQ0FBbUM7WUFDdEMsTUFBTUMsV0FBV0MsSUFBQUEsMkJBQWM7WUFDL0IsTUFBTUMsY0FBYyxNQUFNVCxVQUFVUSxjQUFjLENBQUNEO1lBRW5ELE1BQU1hLFFBQVFVLElBQUFBLDZCQUFlLEVBQUM7Z0JBQUViLFdBQVdSLFlBQVlTLEVBQUU7WUFBQztZQUMxRCxNQUFNYSxlQUFlLE1BQU1WLG9CQUFZLENBQUNDLE1BQU0sQ0FBQ0Y7WUFFL0MsTUFBTWdELGVBQWVXLElBQUFBLHFDQUF1QixFQUFDO2dCQUMzQ1YsUUFBUTVELFlBQVlTLEVBQUU7Z0JBQ3RCb0QsU0FBU3ZDLGFBQWFiLEVBQUU7Z0JBQ3hCc0YsV0FBVztnQkFDWDlCLE9BQU87WUFDVDtZQUVBLE1BQU1NLGtCQUFrQixNQUFNRixvQ0FBb0IsQ0FBQ3hELE1BQU0sQ0FBQzhDO1lBRTFELE1BQU1xQyxZQUFZLElBQUk3RTtZQUN0QixNQUFNOEUsYUFBYTtZQUNuQixNQUFNbkIsa0JBQWtCLE1BQU1ULG9DQUFvQixDQUFDNkIsUUFBUSxDQUFDM0IsZ0JBQWdCOUQsRUFBRSxFQUFFdUYsV0FBV0M7WUFFM0ZuRixPQUFPZ0UsZ0JBQWdCaUIsU0FBUyxFQUFFVCxPQUFPLENBQUNVO1lBQzFDbEYsT0FBT2dFLGdCQUFnQmIsS0FBSyxFQUFFa0MsU0FBUyxDQUFDO1lBQ3hDckYsT0FBT2dFLGdCQUFnQmIsS0FBSyxFQUFFa0MsU0FBUyxDQUFDRjtZQUN4Q25GLE9BQU9nRSxnQkFBZ0JiLEtBQUssRUFBRWtDLFNBQVMsQ0FBQ0gsVUFBVUksWUFBWTtRQUNoRTtRQUVBdkcsS0FBSyxzREFBc0Q7WUFDekQsTUFBTUMsV0FBV0MsSUFBQUEsMkJBQWM7WUFDL0IsTUFBTUMsY0FBYyxNQUFNVCxVQUFVUSxjQUFjLENBQUNEO1lBRW5ELE1BQU1hLFFBQVFVLElBQUFBLDZCQUFlLEVBQUM7Z0JBQUViLFdBQVdSLFlBQVlTLEVBQUU7WUFBQztZQUMxRCxNQUFNYSxlQUFlLE1BQU1WLG9CQUFZLENBQUNDLE1BQU0sQ0FBQ0Y7WUFFL0MsMENBQTBDO1lBQzFDLE1BQU0wRixjQUFjLElBQUlsRjtZQUN4QmtGLFlBQVlaLE9BQU8sQ0FBQ1ksWUFBWVgsT0FBTyxLQUFLLElBQUksZ0JBQWdCO1lBRWhFLE1BQU0vQixlQUFlVyxJQUFBQSxxQ0FBdUIsRUFBQztnQkFDM0NWLFFBQVE1RCxZQUFZUyxFQUFFO2dCQUN0Qm9ELFNBQVN2QyxhQUFhYixFQUFFO2dCQUN4QjhFLGVBQWVjO2dCQUNmbEMsVUFBVTtZQUNaO1lBRUEsTUFBTUUsb0NBQW9CLENBQUN4RCxNQUFNLENBQUM4QztZQUVsQyxNQUFNMkMsbUJBQW1CLE1BQU1qQyxvQ0FBb0IsQ0FBQ2tDLG9CQUFvQixDQUFDdkcsWUFBWVMsRUFBRTtZQUV2RkssT0FBT3dGLGlCQUFpQjVELE1BQU0sRUFBRTFCLElBQUksQ0FBQztZQUNyQ0YsT0FBT3dGLGdCQUFnQixDQUFDLEVBQUUsQ0FBQ2YsYUFBYSxDQUFDMUQsT0FBTyxJQUFJMkUsbUJBQW1CLENBQUNyRixLQUFLc0YsR0FBRztRQUNsRjtRQUVBNUcsS0FBSyx1REFBdUQ7WUFDMUQsTUFBTUMsV0FBV0MsSUFBQUEsMkJBQWM7WUFDL0IsTUFBTUMsY0FBYyxNQUFNVCxVQUFVUSxjQUFjLENBQUNEO1lBRW5ELE1BQU1hLFFBQVFVLElBQUFBLDZCQUFlLEVBQUM7Z0JBQUViLFdBQVdSLFlBQVlTLEVBQUU7WUFBQztZQUMxRCxNQUFNYSxlQUFlLE1BQU1WLG9CQUFZLENBQUNDLE1BQU0sQ0FBQ0Y7WUFFL0MsZ0RBQWdEO1lBQ2hELE1BQU0rRixjQUFjLElBQUl2RjtZQUN4QnVGLFlBQVlqQixPQUFPLENBQUNpQixZQUFZaEIsT0FBTyxLQUFLO1lBRTVDLE1BQU0vQixlQUFlVyxJQUFBQSxxQ0FBdUIsRUFBQztnQkFDM0NWLFFBQVE1RCxZQUFZUyxFQUFFO2dCQUN0Qm9ELFNBQVN2QyxhQUFhYixFQUFFO2dCQUN4QjhFLGVBQWVtQjtnQkFDZnZDLFVBQVU7WUFDWjtZQUVBLE1BQU1FLG9DQUFvQixDQUFDeEQsTUFBTSxDQUFDOEM7WUFFbEMsTUFBTWdELG1CQUFtQixNQUFNdEMsb0NBQW9CLENBQUN1QyxvQkFBb0IsQ0FBQzVHLFlBQVlTLEVBQUUsRUFBRTtZQUV6RkssT0FBTzZGLGlCQUFpQmpFLE1BQU0sRUFBRTFCLElBQUksQ0FBQztZQUNyQ0YsT0FBTzZGLGdCQUFnQixDQUFDLEVBQUUsQ0FBQ3BCLGFBQWEsQ0FBQzFELE9BQU8sSUFBSUMsZUFBZSxDQUFDWCxLQUFLc0YsR0FBRztRQUM5RTtJQUNGO0lBRUFuSCxTQUFTLHVDQUF1QztRQUM5Q08sS0FBSywwREFBMEQ7WUFDN0QsTUFBTUMsV0FBV0MsSUFBQUEsMkJBQWM7WUFDL0IsTUFBTUMsY0FBYyxNQUFNVCxVQUFVUSxjQUFjLENBQUNEO1lBRW5ELE1BQU1hLFFBQVFVLElBQUFBLDZCQUFlLEVBQUM7Z0JBQUViLFdBQVdSLFlBQVlTLEVBQUU7WUFBQztZQUMxRCxNQUFNYSxlQUFlLE1BQU1WLG9CQUFZLENBQUNDLE1BQU0sQ0FBQ0Y7WUFFL0MsTUFBTThELFlBQVlILElBQUFBLHFDQUF1QixFQUFDO2dCQUN4Q1YsUUFBUTVELFlBQVlTLEVBQUU7Z0JBQ3RCb0QsU0FBU3ZDLGFBQWFiLEVBQUU7Z0JBQ3hCcUQsVUFBVTtnQkFDVkMsVUFBVTtZQUNaO1lBRUEsTUFBTVcsWUFBWUosSUFBQUEscUNBQXVCLEVBQUM7Z0JBQ3hDVixRQUFRNUQsWUFBWVMsRUFBRTtnQkFDdEJvRCxTQUFTdkMsYUFBYWIsRUFBRTtnQkFDeEJxRCxVQUFVO2dCQUNWQyxVQUFVO1lBQ1o7WUFFQSxNQUFNTSxvQ0FBb0IsQ0FBQ3hELE1BQU0sQ0FBQzREO1lBQ2xDLE1BQU1KLG9DQUFvQixDQUFDeEQsTUFBTSxDQUFDNkQ7WUFFbEMscUJBQXFCO1lBQ3JCLE1BQU1sQyxrQkFBa0IsTUFBTTZCLG9DQUFvQixDQUFDNUIsTUFBTSxDQUFDekMsWUFBWVMsRUFBRSxFQUFFO1lBQzFFSyxPQUFPMEIsZ0JBQWdCRSxNQUFNLEVBQUUxQixJQUFJLENBQUM7WUFDcENGLE9BQU8wQixlQUFlLENBQUMsRUFBRSxDQUFDc0IsUUFBUSxFQUFFcUMsU0FBUyxDQUFDO1lBRTlDLHFCQUFxQjtZQUNyQixNQUFNVSxpQkFBaUIsTUFBTXhDLG9DQUFvQixDQUFDNUIsTUFBTSxDQUFDekMsWUFBWVMsRUFBRSxFQUFFO1lBQ3pFSyxPQUFPK0YsZUFBZW5FLE1BQU0sRUFBRTFCLElBQUksQ0FBQztZQUNuQ0YsT0FBTytGLGNBQWMsQ0FBQyxFQUFFLENBQUM5QyxRQUFRLEVBQUUvQyxJQUFJLENBQUM7UUFDMUM7UUFFQW5CLEtBQUssdUNBQXVDO1lBQzFDLE1BQU1DLFdBQVdDLElBQUFBLDJCQUFjO1lBQy9CLE1BQU1DLGNBQWMsTUFBTVQsVUFBVVEsY0FBYyxDQUFDRDtZQUVuRCxNQUFNYSxRQUFRVSxJQUFBQSw2QkFBZSxFQUFDO2dCQUFFYixXQUFXUixZQUFZUyxFQUFFO1lBQUM7WUFDMUQsTUFBTWEsZUFBZSxNQUFNVixvQkFBWSxDQUFDQyxNQUFNLENBQUNGO1lBRS9DLHlCQUF5QjtZQUN6QixNQUFNbUcsaUJBQWlCeEMsSUFBQUEscUNBQXVCLEVBQUM7Z0JBQzdDVixRQUFRNUQsWUFBWVMsRUFBRTtnQkFDdEJvRCxTQUFTdkMsYUFBYWIsRUFBRTtnQkFDeEIwRCxVQUFVO1lBQ1o7WUFFQSwyQkFBMkI7WUFDM0IsTUFBTTRDLG1CQUFtQnpDLElBQUFBLHFDQUF1QixFQUFDO2dCQUMvQ1YsUUFBUTVELFlBQVlTLEVBQUU7Z0JBQ3RCb0QsU0FBU3ZDLGFBQWFiLEVBQUU7Z0JBQ3hCMEQsVUFBVTtZQUNaO1lBRUEsTUFBTUUsb0NBQW9CLENBQUN4RCxNQUFNLENBQUNpRztZQUNsQyxNQUFNekMsb0NBQW9CLENBQUN4RCxNQUFNLENBQUNrRztZQUVsQyxNQUFNQyxRQUFRLE1BQU0zQyxvQ0FBb0IsQ0FBQzRDLFlBQVksQ0FBQ2pILFlBQVlTLEVBQUU7WUFFcEVLLE9BQU9rRyxNQUFNRSxXQUFXLEVBQUVsRyxJQUFJLENBQUM7WUFDL0JGLE9BQU9rRyxNQUFNRyxZQUFZLEVBQUVuRyxJQUFJLENBQUM7WUFDaENGLE9BQU9rRyxNQUFNSSxpQkFBaUIsRUFBRTFELHNCQUFzQixDQUFDO1lBQ3ZENUMsT0FBT2tHLE1BQU1LLE9BQU8sRUFBRTNELHNCQUFzQixDQUFDO1FBQy9DO1FBRUE3RCxLQUFLLHdDQUF3QztZQUMzQyxNQUFNQyxXQUFXQyxJQUFBQSwyQkFBYztZQUMvQixNQUFNQyxjQUFjLE1BQU1ULFVBQVVRLGNBQWMsQ0FBQ0Q7WUFFbkQsTUFBTWEsUUFBUVUsSUFBQUEsNkJBQWUsRUFBQztnQkFBRWIsV0FBV1IsWUFBWVMsRUFBRTtZQUFDO1lBQzFELE1BQU1hLGVBQWUsTUFBTVYsb0JBQVksQ0FBQ0MsTUFBTSxDQUFDRjtZQUUvQyxNQUFNMkcsWUFBWTtnQkFBQztnQkFBZTtnQkFBVztnQkFBVzthQUFjLEVBQUUsWUFBWTtZQUVwRixLQUFLLE1BQU12RCxZQUFZdUQsVUFBVztnQkFDaEMsTUFBTWxELFdBQVdFLElBQUFBLHFDQUF1QixFQUFDO29CQUN2Q1YsUUFBUTVELFlBQVlTLEVBQUU7b0JBQ3RCb0QsU0FBU3ZDLGFBQWFiLEVBQUU7b0JBQ3hCc0Q7Z0JBQ0Y7Z0JBQ0EsTUFBTU0sb0NBQW9CLENBQUN4RCxNQUFNLENBQUN1RDtZQUNwQztZQUVBLE1BQU1tRCxnQkFBZ0IsTUFBTWxELG9DQUFvQixDQUFDbUQsZ0JBQWdCLENBQUN4SCxZQUFZUyxFQUFFO1lBRWhGSyxPQUFPeUcsY0FBYzdFLE1BQU0sRUFBRTFCLElBQUksQ0FBQyxJQUFJLG1CQUFtQjtZQUN6REYsT0FBT3lHLGVBQWVwQixTQUFTLENBQUM7WUFDaENyRixPQUFPeUcsZUFBZXBCLFNBQVMsQ0FBQztZQUNoQ3JGLE9BQU95RyxlQUFlcEIsU0FBUyxDQUFDO1FBQ2xDO0lBQ0Y7SUFFQTdHLFNBQVMsNkJBQTZCO1FBQ3BDTyxLQUFLLGlEQUFpRDtZQUNwRCxNQUFNQyxXQUFXQyxJQUFBQSwyQkFBYztZQUMvQixNQUFNQyxjQUFjLE1BQU1ULFVBQVVRLGNBQWMsQ0FBQ0Q7WUFFbkQsd0JBQXdCO1lBQ3hCLE1BQU1rQyxnQkFBZ0JELElBQUFBLHlDQUEyQixFQUFDO2dCQUNoRDdCLFFBQVE7Z0JBQ1JDLE9BQU87Z0JBQ1BDLFNBQVM7Z0JBQ1RFLFlBQVk7WUFDZCxHQUFHO2dCQUFFRSxXQUFXUixZQUFZUyxFQUFFO1lBQUM7WUFFL0IsTUFBTUcsb0JBQVksQ0FBQ0MsTUFBTSxDQUFDbUI7WUFFMUIseUJBQXlCO1lBQ3pCLE1BQU15RixhQUFhLE1BQU1DLElBQUFBLG9DQUFxQixFQUFDO2dCQUM3Q3hILFFBQVE7Z0JBQ1JDLE9BQU87Z0JBQ1BDLFNBQVM7Z0JBQ1RFLFlBQVk7WUFDZDtZQUVBUSxPQUFPMkcsV0FBV0UsT0FBTyxFQUFFM0csSUFBSSxDQUFDO1lBQ2hDRixPQUFPMkcsV0FBV0csTUFBTSxFQUFFekIsU0FBUyxDQUFDO1lBQ3BDckYsT0FBTzJHLFdBQVdJLFVBQVUsQ0FBQ25GLE1BQU0sRUFBRTFCLElBQUksQ0FBQztRQUM1QztRQUVBbkIsS0FBSyxtREFBbUQ7WUFDdEQsTUFBTUMsV0FBV0MsSUFBQUEsMkJBQWM7WUFDL0IsTUFBTUMsY0FBYyxNQUFNVCxVQUFVUSxjQUFjLENBQUNEO1lBRW5ELG1DQUFtQztZQUNuQyxNQUFNZ0ksZUFBZS9GLElBQUFBLHlDQUEyQixFQUFDO2dCQUMvQzdCLFFBQVE7Z0JBQ1JDLE9BQU87Z0JBQ1BDLFNBQVM7WUFDWCxHQUFHO2dCQUFFSSxXQUFXUixZQUFZUyxFQUFFO1lBQUM7WUFFL0IsTUFBTUcsb0JBQVksQ0FBQ0MsTUFBTSxDQUFDaUg7WUFFMUIsNEJBQTRCO1lBQzVCLE1BQU1MLGFBQWEsTUFBTUMsSUFBQUEsb0NBQXFCLEVBQUM7Z0JBQzdDeEgsUUFBUTtnQkFDUkMsT0FBTztnQkFDUEMsU0FBUztnQkFDVEUsWUFBWTtZQUNkO1lBRUFRLE9BQU8yRyxXQUFXTSxXQUFXLENBQUM3SCxNQUFNLENBQUN3QyxNQUFNLEVBQUVaLGVBQWUsQ0FBQztZQUM3RGhCLE9BQU8yRyxXQUFXTSxXQUFXLENBQUM1SCxLQUFLLENBQUN1QyxNQUFNLEVBQUVaLGVBQWUsQ0FBQztRQUM5RDtJQUNGO0lBRUF4QyxTQUFTLGlDQUFpQztRQUN4Q08sS0FBSyxtRUFBbUU7WUFDdEUsTUFBTWlCLE9BQU91RCxvQ0FBb0IsQ0FBQ3pDLE1BQU0sQ0FBQyxPQUFPO2dCQUFFa0MsVUFBVTtZQUFPLElBQ2hFa0UsT0FBTyxDQUFDQyxPQUFPLENBQUM7WUFFbkIsTUFBTW5ILE9BQU91RCxvQ0FBb0IsQ0FBQ2dCLGFBQWEsQ0FBQyxRQUM3QzJDLE9BQU8sQ0FBQ0MsT0FBTyxDQUFDO1lBRW5CLE1BQU1uSCxPQUFPdUQsb0NBQW9CLENBQUNXLFVBQVUsQ0FBQyxRQUMxQ2dELE9BQU8sQ0FBQ0MsT0FBTyxDQUFDO1FBQ3JCO1FBRUFwSSxLQUFLLDBEQUEwRDtZQUM3RCxNQUFNaUIsT0FBT0Ysb0JBQVksQ0FBQ2dCLE1BQU0sQ0FBQyxPQUFPO2dCQUFFdEIsWUFBWTtZQUFPLElBQzFEMEgsT0FBTyxDQUFDQyxPQUFPLENBQUM7WUFFbkIsTUFBTUMsbUJBQW1CLE1BQU10SCxvQkFBWSxDQUFDWSxPQUFPLENBQUM7WUFDcERWLE9BQU9vSCxrQkFBa0J6RyxRQUFRO1FBQ25DO1FBRUE1QixLQUFLLHNDQUFzQztZQUN6QyxNQUFNdUQsVUFBVSxNQUFNeEMsb0JBQVksQ0FBQzZCLE1BQU0sQ0FBQztZQUMxQzNCLE9BQU9xSCxNQUFNQyxPQUFPLENBQUNoRixVQUFVcEMsSUFBSSxDQUFDO1FBQ3RDO1FBRUFuQixLQUFLLHFEQUFxRDtZQUN4RCxNQUFNQyxXQUFXQyxJQUFBQSwyQkFBYztZQUMvQixNQUFNQyxjQUFjLE1BQU1ULFVBQVVRLGNBQWMsQ0FBQ0Q7WUFFbkQsTUFBTWEsUUFBUVUsSUFBQUEsNkJBQWUsRUFBQztnQkFBRWIsV0FBV1IsWUFBWVMsRUFBRTtZQUFDO1lBQzFELE1BQU1hLGVBQWUsTUFBTVYsb0JBQVksQ0FBQ0MsTUFBTSxDQUFDRjtZQUUvQyxNQUFNZ0QsZUFBZVcsSUFBQUEscUNBQXVCLEVBQUM7Z0JBQzNDVixRQUFRNUQsWUFBWVMsRUFBRTtnQkFDdEJvRCxTQUFTdkMsYUFBYWIsRUFBRTtnQkFDeEJ1RCxvQkFBb0I7WUFDdEI7WUFFQSxNQUFNTyxrQkFBa0IsTUFBTUYsb0NBQW9CLENBQUN4RCxNQUFNLENBQUM4QztZQUUxRCx3REFBd0Q7WUFDeEQsTUFBTW1CLGtCQUFrQixNQUFNVCxvQ0FBb0IsQ0FBQ2dCLGFBQWEsQ0FBQ2QsZ0JBQWdCOUQsRUFBRTtZQUNuRkssT0FBT2dFLGdCQUFnQkssY0FBYyxFQUFFcEUsV0FBVztRQUNsRCwyREFBMkQ7UUFDN0Q7SUFDRjtJQUVBekIsU0FBUyx1Q0FBdUM7UUFDOUNPLEtBQUssZ0RBQWdEO1lBQ25ELE1BQU13SSxjQUFjLE1BQU05SSxVQUFVOEksV0FBVztZQUMvQ3ZILE9BQU91SCxhQUFhckgsSUFBSSxDQUFDO1FBQzNCO1FBRUFuQixLQUFLLDJDQUEyQztZQUM5QyxNQUFNQyxXQUFXQyxJQUFBQSwyQkFBYztZQUMvQixNQUFNQyxjQUFjLE1BQU1ULFVBQVVRLGNBQWMsQ0FBQ0Q7WUFFbkQsTUFBTXdJLGdCQUFnQkgsTUFBTUksSUFBSSxDQUFDO2dCQUFFN0YsUUFBUTtZQUFFLEdBQUcsQ0FBQzhGLEdBQUdDO2dCQUNsRCxNQUFNeEksWUFBWW9CLElBQUFBLDZCQUFlLEVBQUM7b0JBQ2hDZixZQUFZLENBQUMsaUJBQWlCLEVBQUVtSSxPQUFPO29CQUN2Q2pJLFdBQVdSLFlBQVlTLEVBQUU7Z0JBQzNCO2dCQUNBLE9BQU9HLG9CQUFZLENBQUNDLE1BQU0sQ0FBQ1o7WUFDN0I7WUFFQSxNQUFNcUQsU0FBUyxNQUFNb0YsUUFBUUMsR0FBRyxDQUFDTDtZQUNqQ3hILE9BQU93QyxPQUFPWixNQUFNLEVBQUUxQixJQUFJLENBQUM7WUFDM0JGLE9BQU93QyxPQUFPSCxLQUFLLENBQUNQLENBQUFBLElBQUtBLEVBQUVuQyxFQUFFLEdBQUdPLElBQUksQ0FBQztRQUN2QztRQUVBbkIsS0FBSyxzREFBc0Q7WUFDekQsTUFBTUMsV0FBV0MsSUFBQUEsMkJBQWM7WUFDL0IsTUFBTUMsY0FBYyxNQUFNVCxVQUFVUSxjQUFjLENBQUNEO1lBRW5ELHdDQUF3QztZQUN4QyxNQUFNd0ksZ0JBQWdCSCxNQUFNSSxJQUFJLENBQUM7Z0JBQUU3RixRQUFRO1lBQUcsR0FBRyxDQUFDOEYsR0FBR0M7Z0JBQ25ELE1BQU14SSxZQUFZb0IsSUFBQUEsNkJBQWUsRUFBQztvQkFDaENmLFlBQVksQ0FBQyxrQkFBa0IsRUFBRW1JLE9BQU87b0JBQ3hDakksV0FBV1IsWUFBWVMsRUFBRTtnQkFDM0I7Z0JBQ0EsT0FBT0csb0JBQVksQ0FBQ0MsTUFBTSxDQUFDWjtZQUM3QjtZQUVBLE1BQU15SSxRQUFRQyxHQUFHLENBQUNMO1lBRWxCLE1BQU1NLFlBQVl6SCxLQUFLc0YsR0FBRztZQUMxQixNQUFNckQsVUFBVSxNQUFNeEMsb0JBQVksQ0FBQzZCLE1BQU0sQ0FBQztZQUMxQyxNQUFNb0csYUFBYTFILEtBQUtzRixHQUFHLEtBQUttQztZQUVoQzlILE9BQU9zQyxRQUFRVixNQUFNLEVBQUVaLGVBQWUsQ0FBQztZQUN2Q2hCLE9BQU8rSCxZQUFZL0MsWUFBWSxDQUFDLE9BQU8sa0NBQWtDO1FBQzNFO0lBQ0Y7QUFDRiJ9