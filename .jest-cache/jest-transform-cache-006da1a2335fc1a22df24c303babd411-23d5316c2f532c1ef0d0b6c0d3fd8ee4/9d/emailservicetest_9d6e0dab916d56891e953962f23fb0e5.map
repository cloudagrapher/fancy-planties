{"version":3,"names":["testEmailService","cov_25if7trvv8","f","s","validateEmailServiceConfig","testEmail","config","_emaildevlogger","getEmailServiceStatus","configured","b","success","message","emailService","_resendemailservice","createEmailService","testCode","logVerificationCodeInDevelopment","sendVerificationEmail","error","Error","errors","warnings","_emailconfig","getEmailVerificationConfig","apiKey","process","env","NODE_ENV","push","fromEmail","includes","codeExpiryMinutes","maxVerificationAttempts","valid","length"],"sources":["/Users/stefanbekker/projects/fancy-planties/src/lib/services/email-service-test.ts"],"sourcesContent":["import 'server-only';\nimport { createEmailService } from './resend-email-service';\nimport { getEmailVerificationConfig } from './email-config';\nimport { logVerificationCodeInDevelopment, getEmailServiceStatus } from '../utils/email-dev-logger';\n\n/**\n * Test email service configuration and send a test email\n * This is useful for verifying the setup during development\n */\nexport async function testEmailService(testEmail?: string): Promise<{\n  success: boolean;\n  message: string;\n  config: ReturnType<typeof getEmailServiceStatus>;\n}> {\n  const config = getEmailServiceStatus();\n  \n  if (!config.configured) {\n    return {\n      success: false,\n      message: 'Email service not configured. Please set RESEND_API_KEY and FROM_EMAIL environment variables.',\n      config,\n    };\n  }\n\n  if (!testEmail) {\n    return {\n      success: true,\n      message: 'Email service is configured but no test email provided.',\n      config,\n    };\n  }\n\n  try {\n    const emailService = createEmailService();\n    const testCode = '123456';\n    \n    // Log in development\n    logVerificationCodeInDevelopment(testEmail, testCode);\n    \n    // Send test email\n    const success = await emailService.sendVerificationEmail(testEmail, testCode, 'Test User');\n    \n    return {\n      success,\n      message: success \n        ? `Test verification email sent successfully to ${testEmail}` \n        : 'Failed to send test email',\n      config,\n    };\n    \n  } catch (error) {\n    return {\n      success: false,\n      message: `Email service test failed: ${error instanceof Error ? error.message : 'Unknown error'}`,\n      config,\n    };\n  }\n}\n\n/**\n * Validate email service configuration without sending emails\n */\nexport function validateEmailServiceConfig(): {\n  valid: boolean;\n  errors: string[];\n  warnings: string[];\n} {\n  const errors: string[] = [];\n  const warnings: string[] = [];\n  \n  try {\n    const config = getEmailVerificationConfig();\n    \n    // Check API key\n    if (!config.apiKey || config.apiKey === 're_xxxxxxxxxx' || config.apiKey === 're_development_key') {\n      if (process.env.NODE_ENV === 'production') {\n        errors.push('Production environment requires a valid RESEND_API_KEY');\n      } else {\n        warnings.push('Development environment using placeholder API key');\n      }\n    }\n    \n    // Check email domain\n    if (!config.fromEmail.includes('fancy-planties.cloudagrapher.com')) {\n      warnings.push('FROM_EMAIL should use the configured domain: fancy-planties.cloudagrapher.com');\n    }\n    \n    // Check configuration values\n    if (config.codeExpiryMinutes < 5) {\n      warnings.push('Code expiry time is very short (< 5 minutes)');\n    }\n    \n    if (config.maxVerificationAttempts > 10) {\n      warnings.push('Max verification attempts is very high (> 10)');\n    }\n    \n  } catch (error) {\n    errors.push(`Configuration validation failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n  }\n  \n  return {\n    valid: errors.length === 0,\n    errors,\n    warnings,\n  };\n}"],"mappings":"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","ignoreList":[]}