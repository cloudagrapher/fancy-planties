89a253431e3c618d8d69f62f0d05497a
"use strict";

/* istanbul ignore next */
function cov_1sjejux5xd() {
  var path = "/Users/stefanbekker/projects/fancy-planties/src/app/api/propagations/[id]/route.ts";
  var hash = "c49cb31a3578c0223328e56652beeacd4989acd9";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/stefanbekker/projects/fancy-planties/src/app/api/propagations/[id]/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 21,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 22
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 19
        }
      },
      "6": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 19
        }
      },
      "7": {
        start: {
          line: 22,
          column: 0
        },
        end: {
          line: 22,
          column: 23
        }
      },
      "8": {
        start: {
          line: 23,
          column: 16
        },
        end: {
          line: 23,
          column: 38
        }
      },
      "9": {
        start: {
          line: 24,
          column: 17
        },
        end: {
          line: 24,
          column: 55
        }
      },
      "10": {
        start: {
          line: 25,
          column: 22
        },
        end: {
          line: 25,
          column: 72
        }
      },
      "11": {
        start: {
          line: 26,
          column: 13
        },
        end: {
          line: 26,
          column: 27
        }
      },
      "12": {
        start: {
          line: 28,
          column: 32
        },
        end: {
          line: 42,
          column: 2
        }
      },
      "13": {
        start: {
          line: 33,
          column: 61
        },
        end: {
          line: 33,
          column: 74
        }
      },
      "14": {
        start: {
          line: 44,
          column: 4
        },
        end: {
          line: 86,
          column: 5
        }
      },
      "15": {
        start: {
          line: 45,
          column: 25
        },
        end: {
          line: 45,
          column: 62
        }
      },
      "16": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 52,
          column: 9
        }
      },
      "17": {
        start: {
          line: 47,
          column: 12
        },
        end: {
          line: 51,
          column: 15
        }
      },
      "18": {
        start: {
          line: 53,
          column: 23
        },
        end: {
          line: 53,
          column: 35
        }
      },
      "19": {
        start: {
          line: 54,
          column: 30
        },
        end: {
          line: 54,
          column: 46
        }
      },
      "20": {
        start: {
          line: 55,
          column: 8
        },
        end: {
          line: 61,
          column: 9
        }
      },
      "21": {
        start: {
          line: 56,
          column: 12
        },
        end: {
          line: 60,
          column: 15
        }
      },
      "22": {
        start: {
          line: 62,
          column: 28
        },
        end: {
          line: 62,
          column: 89
        }
      },
      "23": {
        start: {
          line: 63,
          column: 8
        },
        end: {
          line: 69,
          column: 9
        }
      },
      "24": {
        start: {
          line: 64,
          column: 12
        },
        end: {
          line: 68,
          column: 15
        }
      },
      "25": {
        start: {
          line: 71,
          column: 8
        },
        end: {
          line: 77,
          column: 9
        }
      },
      "26": {
        start: {
          line: 72,
          column: 12
        },
        end: {
          line: 76,
          column: 15
        }
      },
      "27": {
        start: {
          line: 78,
          column: 8
        },
        end: {
          line: 78,
          column: 54
        }
      },
      "28": {
        start: {
          line: 80,
          column: 8
        },
        end: {
          line: 80,
          column: 60
        }
      },
      "29": {
        start: {
          line: 81,
          column: 8
        },
        end: {
          line: 85,
          column: 11
        }
      },
      "30": {
        start: {
          line: 89,
          column: 4
        },
        end: {
          line: 142,
          column: 5
        }
      },
      "31": {
        start: {
          line: 90,
          column: 25
        },
        end: {
          line: 90,
          column: 62
        }
      },
      "32": {
        start: {
          line: 91,
          column: 8
        },
        end: {
          line: 97,
          column: 9
        }
      },
      "33": {
        start: {
          line: 92,
          column: 12
        },
        end: {
          line: 96,
          column: 15
        }
      },
      "34": {
        start: {
          line: 98,
          column: 23
        },
        end: {
          line: 98,
          column: 35
        }
      },
      "35": {
        start: {
          line: 99,
          column: 30
        },
        end: {
          line: 99,
          column: 46
        }
      },
      "36": {
        start: {
          line: 100,
          column: 8
        },
        end: {
          line: 106,
          column: 9
        }
      },
      "37": {
        start: {
          line: 101,
          column: 12
        },
        end: {
          line: 105,
          column: 15
        }
      },
      "38": {
        start: {
          line: 108,
          column: 36
        },
        end: {
          line: 108,
          column: 97
        }
      },
      "39": {
        start: {
          line: 109,
          column: 8
        },
        end: {
          line: 115,
          column: 9
        }
      },
      "40": {
        start: {
          line: 110,
          column: 12
        },
        end: {
          line: 114,
          column: 15
        }
      },
      "41": {
        start: {
          line: 116,
          column: 8
        },
        end: {
          line: 122,
          column: 9
        }
      },
      "42": {
        start: {
          line: 117,
          column: 12
        },
        end: {
          line: 121,
          column: 15
        }
      },
      "43": {
        start: {
          line: 123,
          column: 21
        },
        end: {
          line: 123,
          column: 41
        }
      },
      "44": {
        start: {
          line: 124,
          column: 30
        },
        end: {
          line: 124,
          column: 65
        }
      },
      "45": {
        start: {
          line: 125,
          column: 35
        },
        end: {
          line: 125,
          column: 110
        }
      },
      "46": {
        start: {
          line: 126,
          column: 8
        },
        end: {
          line: 126,
          column: 61
        }
      },
      "47": {
        start: {
          line: 128,
          column: 8
        },
        end: {
          line: 128,
          column: 60
        }
      },
      "48": {
        start: {
          line: 129,
          column: 8
        },
        end: {
          line: 136,
          column: 9
        }
      },
      "49": {
        start: {
          line: 130,
          column: 12
        },
        end: {
          line: 135,
          column: 15
        }
      },
      "50": {
        start: {
          line: 137,
          column: 8
        },
        end: {
          line: 141,
          column: 11
        }
      },
      "51": {
        start: {
          line: 145,
          column: 4
        },
        end: {
          line: 197,
          column: 5
        }
      },
      "52": {
        start: {
          line: 146,
          column: 25
        },
        end: {
          line: 146,
          column: 62
        }
      },
      "53": {
        start: {
          line: 147,
          column: 8
        },
        end: {
          line: 153,
          column: 9
        }
      },
      "54": {
        start: {
          line: 148,
          column: 12
        },
        end: {
          line: 152,
          column: 15
        }
      },
      "55": {
        start: {
          line: 154,
          column: 23
        },
        end: {
          line: 154,
          column: 35
        }
      },
      "56": {
        start: {
          line: 155,
          column: 30
        },
        end: {
          line: 155,
          column: 46
        }
      },
      "57": {
        start: {
          line: 156,
          column: 8
        },
        end: {
          line: 162,
          column: 9
        }
      },
      "58": {
        start: {
          line: 157,
          column: 12
        },
        end: {
          line: 161,
          column: 15
        }
      },
      "59": {
        start: {
          line: 164,
          column: 36
        },
        end: {
          line: 164,
          column: 97
        }
      },
      "60": {
        start: {
          line: 165,
          column: 8
        },
        end: {
          line: 171,
          column: 9
        }
      },
      "61": {
        start: {
          line: 166,
          column: 12
        },
        end: {
          line: 170,
          column: 15
        }
      },
      "62": {
        start: {
          line: 172,
          column: 8
        },
        end: {
          line: 178,
          column: 9
        }
      },
      "63": {
        start: {
          line: 173,
          column: 12
        },
        end: {
          line: 177,
          column: 15
        }
      },
      "64": {
        start: {
          line: 179,
          column: 24
        },
        end: {
          line: 179,
          column: 84
        }
      },
      "65": {
        start: {
          line: 180,
          column: 8
        },
        end: {
          line: 186,
          column: 9
        }
      },
      "66": {
        start: {
          line: 181,
          column: 12
        },
        end: {
          line: 185,
          column: 15
        }
      },
      "67": {
        start: {
          line: 187,
          column: 8
        },
        end: {
          line: 189,
          column: 11
        }
      },
      "68": {
        start: {
          line: 191,
          column: 8
        },
        end: {
          line: 191,
          column: 60
        }
      },
      "69": {
        start: {
          line: 192,
          column: 8
        },
        end: {
          line: 196,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        },
        loc: {
          start: {
            line: 12,
            column: 18
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 15
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 18,
            column: 4
          },
          end: {
            line: 18,
            column: 5
          }
        },
        loc: {
          start: {
            line: 18,
            column: 15
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 18
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 33,
            column: 54
          },
          end: {
            line: 33,
            column: 55
          }
        },
        loc: {
          start: {
            line: 33,
            column: 61
          },
          end: {
            line: 33,
            column: 74
          }
        },
        line: 33
      },
      "5": {
        name: "GET",
        decl: {
          start: {
            line: 43,
            column: 15
          },
          end: {
            line: 43,
            column: 18
          }
        },
        loc: {
          start: {
            line: 43,
            column: 40
          },
          end: {
            line: 87,
            column: 1
          }
        },
        line: 43
      },
      "6": {
        name: "PUT",
        decl: {
          start: {
            line: 88,
            column: 15
          },
          end: {
            line: 88,
            column: 18
          }
        },
        loc: {
          start: {
            line: 88,
            column: 40
          },
          end: {
            line: 143,
            column: 1
          }
        },
        line: 88
      },
      "7": {
        name: "DELETE",
        decl: {
          start: {
            line: 144,
            column: 15
          },
          end: {
            line: 144,
            column: 21
          }
        },
        loc: {
          start: {
            line: 144,
            column: 43
          },
          end: {
            line: 198,
            column: 1
          }
        },
        line: 144
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 46,
            column: 8
          },
          end: {
            line: 52,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 46,
            column: 8
          },
          end: {
            line: 52,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 46
      },
      "1": {
        loc: {
          start: {
            line: 55,
            column: 8
          },
          end: {
            line: 61,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 55,
            column: 8
          },
          end: {
            line: 61,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 55
      },
      "2": {
        loc: {
          start: {
            line: 63,
            column: 8
          },
          end: {
            line: 69,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 63,
            column: 8
          },
          end: {
            line: 69,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 63
      },
      "3": {
        loc: {
          start: {
            line: 71,
            column: 8
          },
          end: {
            line: 77,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 71,
            column: 8
          },
          end: {
            line: 77,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 71
      },
      "4": {
        loc: {
          start: {
            line: 91,
            column: 8
          },
          end: {
            line: 97,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 91,
            column: 8
          },
          end: {
            line: 97,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 91
      },
      "5": {
        loc: {
          start: {
            line: 100,
            column: 8
          },
          end: {
            line: 106,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 100,
            column: 8
          },
          end: {
            line: 106,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 100
      },
      "6": {
        loc: {
          start: {
            line: 109,
            column: 8
          },
          end: {
            line: 115,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 109,
            column: 8
          },
          end: {
            line: 115,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 109
      },
      "7": {
        loc: {
          start: {
            line: 116,
            column: 8
          },
          end: {
            line: 122,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 116,
            column: 8
          },
          end: {
            line: 122,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 116
      },
      "8": {
        loc: {
          start: {
            line: 129,
            column: 8
          },
          end: {
            line: 136,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 129,
            column: 8
          },
          end: {
            line: 136,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 129
      },
      "9": {
        loc: {
          start: {
            line: 147,
            column: 8
          },
          end: {
            line: 153,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 147,
            column: 8
          },
          end: {
            line: 153,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 147
      },
      "10": {
        loc: {
          start: {
            line: 156,
            column: 8
          },
          end: {
            line: 162,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 156,
            column: 8
          },
          end: {
            line: 162,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 156
      },
      "11": {
        loc: {
          start: {
            line: 165,
            column: 8
          },
          end: {
            line: 171,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 165,
            column: 8
          },
          end: {
            line: 171,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 165
      },
      "12": {
        loc: {
          start: {
            line: 172,
            column: 8
          },
          end: {
            line: 178,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 172,
            column: 8
          },
          end: {
            line: 178,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 172
      },
      "13": {
        loc: {
          start: {
            line: 180,
            column: 8
          },
          end: {
            line: 186,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 180,
            column: 8
          },
          end: {
            line: 186,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 180
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/stefanbekker/projects/fancy-planties/src/app/api/propagations/[id]/route.ts"],
      sourcesContent: ["import 'server-only';\n\nimport { NextRequest, NextResponse } from 'next/server';\nimport { validateRequest } from '@/lib/auth/server';\nimport { PropagationQueries } from '@/lib/db/queries/propagations';\nimport { z } from 'zod';\n\n// Validation schema for updating propagations\nconst updatePropagationSchema = z.object({\n  plantId: z.number().int().positive().optional(),\n  parentInstanceId: z.number().int().positive().optional().nullable(),\n  nickname: z.string().min(1).max(100).optional(),\n  location: z.string().min(1).max(100).optional(),\n  dateStarted: z.string().datetime().transform(str => new Date(str)).optional(),\n  status: z.enum(['started', 'rooting', 'planted', 'established']).optional(),\n  notes: z.string().max(2000).optional().nullable(),\n  images: z.array(z.string()).max(10).optional(),\n});\n\n// GET /api/propagations/[id] - Get a specific propagation\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { user } = await validateRequest();\n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const { id } = await params;\n    const propagationId = parseInt(id, 10);\n    if (isNaN(propagationId)) {\n      return NextResponse.json({ error: 'Invalid propagation ID' }, { status: 400 });\n    }\n\n    const propagation = await PropagationQueries.getById(propagationId);\n    \n    if (!propagation) {\n      return NextResponse.json({ error: 'Propagation not found' }, { status: 404 });\n    }\n\n    // Check if the propagation belongs to the authenticated user\n    if (propagation.userId !== user.id) {\n      return NextResponse.json({ error: 'Forbidden' }, { status: 403 });\n    }\n\n    return NextResponse.json(propagation);\n  } catch (error) {\n    console.error('Error fetching propagation:', error);\n    return NextResponse.json(\n      { error: 'Failed to fetch propagation' },\n      { status: 500 }\n    );\n  }\n}\n\n// PUT /api/propagations/[id] - Update a propagation\nexport async function PUT(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { user } = await validateRequest();\n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const { id } = await params;\n    const propagationId = parseInt(id, 10);\n    if (isNaN(propagationId)) {\n      return NextResponse.json({ error: 'Invalid propagation ID' }, { status: 400 });\n    }\n\n    // Check if propagation exists and belongs to user\n    const existingPropagation = await PropagationQueries.getById(propagationId);\n    if (!existingPropagation) {\n      return NextResponse.json({ error: 'Propagation not found' }, { status: 404 });\n    }\n\n    if (existingPropagation.userId !== user.id) {\n      return NextResponse.json({ error: 'Forbidden' }, { status: 403 });\n    }\n\n    const body = await request.json();\n    const validatedData = updatePropagationSchema.parse(body);\n\n    const updatedPropagation = await PropagationQueries.update(propagationId, validatedData);\n\n    return NextResponse.json(updatedPropagation);\n  } catch (error) {\n    console.error('Error updating propagation:', error);\n    \n    if (error instanceof z.ZodError) {\n      return NextResponse.json(\n        { error: 'Invalid data', details: error.issues },\n        { status: 400 }\n      );\n    }\n\n    return NextResponse.json(\n      { error: 'Failed to update propagation' },\n      { status: 500 }\n    );\n  }\n}\n\n// DELETE /api/propagations/[id] - Delete a propagation\nexport async function DELETE(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { user } = await validateRequest();\n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const { id } = await params;\n    const propagationId = parseInt(id, 10);\n    if (isNaN(propagationId)) {\n      return NextResponse.json({ error: 'Invalid propagation ID' }, { status: 400 });\n    }\n\n    // Check if propagation exists and belongs to user\n    const existingPropagation = await PropagationQueries.getById(propagationId);\n    if (!existingPropagation) {\n      return NextResponse.json({ error: 'Propagation not found' }, { status: 404 });\n    }\n\n    if (existingPropagation.userId !== user.id) {\n      return NextResponse.json({ error: 'Forbidden' }, { status: 403 });\n    }\n\n    const success = await PropagationQueries.delete(propagationId);\n    \n    if (!success) {\n      return NextResponse.json({ error: 'Failed to delete propagation' }, { status: 500 });\n    }\n\n    return NextResponse.json({ success: true });\n  } catch (error) {\n    console.error('Error deleting propagation:', error);\n    return NextResponse.json(\n      { error: 'Failed to delete propagation' },\n      { status: 500 }\n    );\n  }\n}"],
      names: ["DELETE", "GET", "PUT", "updatePropagationSchema", "z", "object", "plantId", "number", "int", "positive", "optional", "parentInstanceId", "nullable", "nickname", "string", "min", "max", "location", "dateStarted", "datetime", "transform", "str", "Date", "status", "enum", "notes", "images", "array", "request", "params", "user", "validateRequest", "NextResponse", "json", "error", "id", "propagationId", "parseInt", "isNaN", "propagation", "PropagationQueries", "getById", "userId", "console", "existingPropagation", "body", "validatedData", "parse", "updatedPropagation", "update", "ZodError", "details", "issues", "success", "delete"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "c49cb31a3578c0223328e56652beeacd4989acd9"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1sjejux5xd = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1sjejux5xd();
cov_1sjejux5xd().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_1sjejux5xd().f[0]++;
  cov_1sjejux5xd().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_1sjejux5xd().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_1sjejux5xd().s[3]++;
_export(exports, {
  get DELETE() {
    /* istanbul ignore next */
    cov_1sjejux5xd().f[1]++;
    cov_1sjejux5xd().s[4]++;
    return DELETE;
  },
  get GET() {
    /* istanbul ignore next */
    cov_1sjejux5xd().f[2]++;
    cov_1sjejux5xd().s[5]++;
    return GET;
  },
  get PUT() {
    /* istanbul ignore next */
    cov_1sjejux5xd().f[3]++;
    cov_1sjejux5xd().s[6]++;
    return PUT;
  }
});
/* istanbul ignore next */
cov_1sjejux5xd().s[7]++;
require("server-only");
const _server =
/* istanbul ignore next */
(cov_1sjejux5xd().s[8]++, require("next/server"));
const _server1 =
/* istanbul ignore next */
(cov_1sjejux5xd().s[9]++, require("../../../../lib/auth/server"));
const _propagations =
/* istanbul ignore next */
(cov_1sjejux5xd().s[10]++, require("../../../../lib/db/queries/propagations"));
const _zod =
/* istanbul ignore next */
(cov_1sjejux5xd().s[11]++, require("zod"));
// Validation schema for updating propagations
const updatePropagationSchema =
/* istanbul ignore next */
(cov_1sjejux5xd().s[12]++, _zod.z.object({
  plantId: _zod.z.number().int().positive().optional(),
  parentInstanceId: _zod.z.number().int().positive().optional().nullable(),
  nickname: _zod.z.string().min(1).max(100).optional(),
  location: _zod.z.string().min(1).max(100).optional(),
  dateStarted: _zod.z.string().datetime().transform(str => {
    /* istanbul ignore next */
    cov_1sjejux5xd().f[4]++;
    cov_1sjejux5xd().s[13]++;
    return new Date(str);
  }).optional(),
  status: _zod.z.enum(['started', 'rooting', 'planted', 'established']).optional(),
  notes: _zod.z.string().max(2000).optional().nullable(),
  images: _zod.z.array(_zod.z.string()).max(10).optional()
}));
async function GET(request, {
  params
}) {
  /* istanbul ignore next */
  cov_1sjejux5xd().f[5]++;
  cov_1sjejux5xd().s[14]++;
  try {
    const {
      user
    } =
    /* istanbul ignore next */
    (cov_1sjejux5xd().s[15]++, await (0, _server1.validateRequest)());
    /* istanbul ignore next */
    cov_1sjejux5xd().s[16]++;
    if (!user) {
      /* istanbul ignore next */
      cov_1sjejux5xd().b[0][0]++;
      cov_1sjejux5xd().s[17]++;
      return _server.NextResponse.json({
        error: 'Unauthorized'
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_1sjejux5xd().b[0][1]++;
    }
    const {
      id
    } =
    /* istanbul ignore next */
    (cov_1sjejux5xd().s[18]++, await params);
    const propagationId =
    /* istanbul ignore next */
    (cov_1sjejux5xd().s[19]++, parseInt(id, 10));
    /* istanbul ignore next */
    cov_1sjejux5xd().s[20]++;
    if (isNaN(propagationId)) {
      /* istanbul ignore next */
      cov_1sjejux5xd().b[1][0]++;
      cov_1sjejux5xd().s[21]++;
      return _server.NextResponse.json({
        error: 'Invalid propagation ID'
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1sjejux5xd().b[1][1]++;
    }
    const propagation =
    /* istanbul ignore next */
    (cov_1sjejux5xd().s[22]++, await _propagations.PropagationQueries.getById(propagationId));
    /* istanbul ignore next */
    cov_1sjejux5xd().s[23]++;
    if (!propagation) {
      /* istanbul ignore next */
      cov_1sjejux5xd().b[2][0]++;
      cov_1sjejux5xd().s[24]++;
      return _server.NextResponse.json({
        error: 'Propagation not found'
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_1sjejux5xd().b[2][1]++;
    }
    // Check if the propagation belongs to the authenticated user
    cov_1sjejux5xd().s[25]++;
    if (propagation.userId !== user.id) {
      /* istanbul ignore next */
      cov_1sjejux5xd().b[3][0]++;
      cov_1sjejux5xd().s[26]++;
      return _server.NextResponse.json({
        error: 'Forbidden'
      }, {
        status: 403
      });
    } else
    /* istanbul ignore next */
    {
      cov_1sjejux5xd().b[3][1]++;
    }
    cov_1sjejux5xd().s[27]++;
    return _server.NextResponse.json(propagation);
  } catch (error) {
    /* istanbul ignore next */
    cov_1sjejux5xd().s[28]++;
    console.error('Error fetching propagation:', error);
    /* istanbul ignore next */
    cov_1sjejux5xd().s[29]++;
    return _server.NextResponse.json({
      error: 'Failed to fetch propagation'
    }, {
      status: 500
    });
  }
}
async function PUT(request, {
  params
}) {
  /* istanbul ignore next */
  cov_1sjejux5xd().f[6]++;
  cov_1sjejux5xd().s[30]++;
  try {
    const {
      user
    } =
    /* istanbul ignore next */
    (cov_1sjejux5xd().s[31]++, await (0, _server1.validateRequest)());
    /* istanbul ignore next */
    cov_1sjejux5xd().s[32]++;
    if (!user) {
      /* istanbul ignore next */
      cov_1sjejux5xd().b[4][0]++;
      cov_1sjejux5xd().s[33]++;
      return _server.NextResponse.json({
        error: 'Unauthorized'
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_1sjejux5xd().b[4][1]++;
    }
    const {
      id
    } =
    /* istanbul ignore next */
    (cov_1sjejux5xd().s[34]++, await params);
    const propagationId =
    /* istanbul ignore next */
    (cov_1sjejux5xd().s[35]++, parseInt(id, 10));
    /* istanbul ignore next */
    cov_1sjejux5xd().s[36]++;
    if (isNaN(propagationId)) {
      /* istanbul ignore next */
      cov_1sjejux5xd().b[5][0]++;
      cov_1sjejux5xd().s[37]++;
      return _server.NextResponse.json({
        error: 'Invalid propagation ID'
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1sjejux5xd().b[5][1]++;
    }
    // Check if propagation exists and belongs to user
    const existingPropagation =
    /* istanbul ignore next */
    (cov_1sjejux5xd().s[38]++, await _propagations.PropagationQueries.getById(propagationId));
    /* istanbul ignore next */
    cov_1sjejux5xd().s[39]++;
    if (!existingPropagation) {
      /* istanbul ignore next */
      cov_1sjejux5xd().b[6][0]++;
      cov_1sjejux5xd().s[40]++;
      return _server.NextResponse.json({
        error: 'Propagation not found'
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_1sjejux5xd().b[6][1]++;
    }
    cov_1sjejux5xd().s[41]++;
    if (existingPropagation.userId !== user.id) {
      /* istanbul ignore next */
      cov_1sjejux5xd().b[7][0]++;
      cov_1sjejux5xd().s[42]++;
      return _server.NextResponse.json({
        error: 'Forbidden'
      }, {
        status: 403
      });
    } else
    /* istanbul ignore next */
    {
      cov_1sjejux5xd().b[7][1]++;
    }
    const body =
    /* istanbul ignore next */
    (cov_1sjejux5xd().s[43]++, await request.json());
    const validatedData =
    /* istanbul ignore next */
    (cov_1sjejux5xd().s[44]++, updatePropagationSchema.parse(body));
    const updatedPropagation =
    /* istanbul ignore next */
    (cov_1sjejux5xd().s[45]++, await _propagations.PropagationQueries.update(propagationId, validatedData));
    /* istanbul ignore next */
    cov_1sjejux5xd().s[46]++;
    return _server.NextResponse.json(updatedPropagation);
  } catch (error) {
    /* istanbul ignore next */
    cov_1sjejux5xd().s[47]++;
    console.error('Error updating propagation:', error);
    /* istanbul ignore next */
    cov_1sjejux5xd().s[48]++;
    if (error instanceof _zod.z.ZodError) {
      /* istanbul ignore next */
      cov_1sjejux5xd().b[8][0]++;
      cov_1sjejux5xd().s[49]++;
      return _server.NextResponse.json({
        error: 'Invalid data',
        details: error.issues
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1sjejux5xd().b[8][1]++;
    }
    cov_1sjejux5xd().s[50]++;
    return _server.NextResponse.json({
      error: 'Failed to update propagation'
    }, {
      status: 500
    });
  }
}
async function DELETE(request, {
  params
}) {
  /* istanbul ignore next */
  cov_1sjejux5xd().f[7]++;
  cov_1sjejux5xd().s[51]++;
  try {
    const {
      user
    } =
    /* istanbul ignore next */
    (cov_1sjejux5xd().s[52]++, await (0, _server1.validateRequest)());
    /* istanbul ignore next */
    cov_1sjejux5xd().s[53]++;
    if (!user) {
      /* istanbul ignore next */
      cov_1sjejux5xd().b[9][0]++;
      cov_1sjejux5xd().s[54]++;
      return _server.NextResponse.json({
        error: 'Unauthorized'
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_1sjejux5xd().b[9][1]++;
    }
    const {
      id
    } =
    /* istanbul ignore next */
    (cov_1sjejux5xd().s[55]++, await params);
    const propagationId =
    /* istanbul ignore next */
    (cov_1sjejux5xd().s[56]++, parseInt(id, 10));
    /* istanbul ignore next */
    cov_1sjejux5xd().s[57]++;
    if (isNaN(propagationId)) {
      /* istanbul ignore next */
      cov_1sjejux5xd().b[10][0]++;
      cov_1sjejux5xd().s[58]++;
      return _server.NextResponse.json({
        error: 'Invalid propagation ID'
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1sjejux5xd().b[10][1]++;
    }
    // Check if propagation exists and belongs to user
    const existingPropagation =
    /* istanbul ignore next */
    (cov_1sjejux5xd().s[59]++, await _propagations.PropagationQueries.getById(propagationId));
    /* istanbul ignore next */
    cov_1sjejux5xd().s[60]++;
    if (!existingPropagation) {
      /* istanbul ignore next */
      cov_1sjejux5xd().b[11][0]++;
      cov_1sjejux5xd().s[61]++;
      return _server.NextResponse.json({
        error: 'Propagation not found'
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_1sjejux5xd().b[11][1]++;
    }
    cov_1sjejux5xd().s[62]++;
    if (existingPropagation.userId !== user.id) {
      /* istanbul ignore next */
      cov_1sjejux5xd().b[12][0]++;
      cov_1sjejux5xd().s[63]++;
      return _server.NextResponse.json({
        error: 'Forbidden'
      }, {
        status: 403
      });
    } else
    /* istanbul ignore next */
    {
      cov_1sjejux5xd().b[12][1]++;
    }
    const success =
    /* istanbul ignore next */
    (cov_1sjejux5xd().s[64]++, await _propagations.PropagationQueries.delete(propagationId));
    /* istanbul ignore next */
    cov_1sjejux5xd().s[65]++;
    if (!success) {
      /* istanbul ignore next */
      cov_1sjejux5xd().b[13][0]++;
      cov_1sjejux5xd().s[66]++;
      return _server.NextResponse.json({
        error: 'Failed to delete propagation'
      }, {
        status: 500
      });
    } else
    /* istanbul ignore next */
    {
      cov_1sjejux5xd().b[13][1]++;
    }
    cov_1sjejux5xd().s[67]++;
    return _server.NextResponse.json({
      success: true
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1sjejux5xd().s[68]++;
    console.error('Error deleting propagation:', error);
    /* istanbul ignore next */
    cov_1sjejux5xd().s[69]++;
    return _server.NextResponse.json({
      error: 'Failed to delete propagation'
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,