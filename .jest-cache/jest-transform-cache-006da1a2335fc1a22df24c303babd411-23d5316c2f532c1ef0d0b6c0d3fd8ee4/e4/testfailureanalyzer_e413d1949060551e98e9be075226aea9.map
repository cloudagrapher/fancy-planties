{"version":3,"sources":["/Users/stefanbekker/projects/fancy-planties/src/test-utils/debugging/test-failure-analyzer.ts"],"sourcesContent":["/**\n * Test Failure Analyzer\n * \n * Analyzes test failures to identify patterns and suggest fixes.\n */\n\ninterface FailurePattern {\n  pattern: RegExp;\n  category: string;\n  description: string;\n  suggestedFix: string;\n  commonCauses: string[];\n}\n\ninterface FailureAnalysis {\n  category: string;\n  confidence: number;\n  description: string;\n  suggestedFix: string;\n  commonCauses: string[];\n  relatedPatterns: string[];\n}\n\ninterface TestFailureStats {\n  totalFailures: number;\n  categorizedFailures: Record<string, number>;\n  mostCommonFailures: Array<{ pattern: string; count: number }>;\n  flakyTests: string[];\n  slowTests: string[];\n}\n\n/**\n * Analyzes test failures and provides actionable insights\n */\nclass TestFailureAnalyzer {\n  private failurePatterns: FailurePattern[] = [\n    {\n      pattern: /Cannot read propert(y|ies) of undefined/i,\n      category: 'Null/Undefined Access',\n      description: 'Attempting to access properties on undefined or null values',\n      suggestedFix: 'Add null checks or use optional chaining (?.)',\n      commonCauses: [\n        'Component props not properly mocked',\n        'Async data not loaded before test assertion',\n        'Missing default values in component state',\n      ],\n    },\n    {\n      pattern: /act\\(\\) warning|not wrapped in act/i,\n      category: 'React Testing',\n      description: 'React state updates not wrapped in act()',\n      suggestedFix: 'Wrap state updates in act() or use waitFor()',\n      commonCauses: [\n        'Async state updates in useEffect',\n        'Timer-based state changes',\n        'Promise-based state updates',\n      ],\n    },\n    {\n      pattern: /timeout|exceeded.*timeout/i,\n      category: 'Timeout',\n      description: 'Test exceeded maximum execution time',\n      suggestedFix: 'Increase timeout or optimize async operations',\n      commonCauses: [\n        'Slow API calls or database queries',\n        'Infinite loops or recursive calls',\n        'Waiting for elements that never appear',\n      ],\n    },\n    {\n      pattern: /network error|fetch.*failed|ECONNREFUSED/i,\n      category: 'Network',\n      description: 'Network-related test failures',\n      suggestedFix: 'Mock network calls or check test environment setup',\n      commonCauses: [\n        'Unmocked API calls in tests',\n        'Test environment network restrictions',\n        'External service dependencies',\n      ],\n    },\n    {\n      pattern: /element not found|unable to find.*element/i,\n      category: 'DOM/Element',\n      description: 'Expected DOM elements not found',\n      suggestedFix: 'Check element selectors and rendering conditions',\n      commonCauses: [\n        'Incorrect test selectors',\n        'Conditional rendering not met',\n        'Async rendering not awaited',\n      ],\n    },\n    {\n      pattern: /memory.*leak|heap.*out.*memory/i,\n      category: 'Memory',\n      description: 'Memory-related issues in tests',\n      suggestedFix: 'Check for memory leaks and improve cleanup',\n      commonCauses: [\n        'Event listeners not cleaned up',\n        'Timers not cleared',\n        'Large test data sets',\n      ],\n    },\n    {\n      pattern: /database.*error|connection.*failed/i,\n      category: 'Database',\n      description: 'Database connection or query failures',\n      suggestedFix: 'Check database setup and connection configuration',\n      commonCauses: [\n        'Test database not properly initialized',\n        'Connection pool exhaustion',\n        'Transaction isolation issues',\n      ],\n    },\n    {\n      pattern: /authentication.*failed|unauthorized|403|401/i,\n      category: 'Authentication',\n      description: 'Authentication-related test failures',\n      suggestedFix: 'Verify test user setup and authentication mocks',\n      commonCauses: [\n        'Test user not properly authenticated',\n        'Session mocks not configured',\n        'Permission checks failing',\n      ],\n    },\n  ];\n\n  private failureHistory: Array<{\n    testName: string;\n    error: string;\n    timestamp: Date;\n    category: string;\n  }> = [];\n\n  /**\n   * Analyze a test failure and provide insights\n   */\n  analyzeFailure(error: Error, testName: string): FailureAnalysis {\n    const errorMessage = error.message + (error.stack || '');\n    \n    // Find matching patterns\n    const matches = this.failurePatterns\n      .map(pattern => ({\n        pattern,\n        match: pattern.pattern.test(errorMessage),\n        confidence: this.calculateConfidence(pattern.pattern, errorMessage),\n      }))\n      .filter(match => match.match)\n      .sort((a, b) => b.confidence - a.confidence);\n\n    const bestMatch = matches[0];\n    \n    if (bestMatch) {\n      // Record failure for statistics\n      this.recordFailure(testName, errorMessage, bestMatch.pattern.category);\n      \n      return {\n        category: bestMatch.pattern.category,\n        confidence: bestMatch.confidence,\n        description: bestMatch.pattern.description,\n        suggestedFix: bestMatch.pattern.suggestedFix,\n        commonCauses: bestMatch.pattern.commonCauses,\n        relatedPatterns: matches.slice(1, 3).map(m => m.pattern.category),\n      };\n    }\n\n    // Unknown failure pattern\n    this.recordFailure(testName, errorMessage, 'Unknown');\n    \n    return {\n      category: 'Unknown',\n      confidence: 0,\n      description: 'Unrecognized failure pattern',\n      suggestedFix: 'Review error message and stack trace for specific issues',\n      commonCauses: ['Unique test scenario', 'New type of error'],\n      relatedPatterns: [],\n    };\n  }\n\n  /**\n   * Generate failure statistics and insights\n   */\n  generateFailureStats(): TestFailureStats {\n    const categorizedFailures: Record<string, number> = {};\n    const testFailureCounts: Record<string, number> = {};\n    \n    // Count failures by category and test\n    this.failureHistory.forEach(failure => {\n      categorizedFailures[failure.category] = (categorizedFailures[failure.category] || 0) + 1;\n      testFailureCounts[failure.testName] = (testFailureCounts[failure.testName] || 0) + 1;\n    });\n\n    // Find most common failure patterns\n    const mostCommonFailures = Object.entries(categorizedFailures)\n      .map(([pattern, count]) => ({ pattern, count }))\n      .sort((a, b) => b.count - a.count)\n      .slice(0, 5);\n\n    // Identify flaky tests (multiple failures)\n    const flakyTests = Object.entries(testFailureCounts)\n      .filter(([, count]) => count > 1)\n      .map(([testName]) => testName);\n\n    return {\n      totalFailures: this.failureHistory.length,\n      categorizedFailures,\n      mostCommonFailures,\n      flakyTests,\n      slowTests: [], // Would be populated from performance monitoring\n    };\n  }\n\n  /**\n   * Generate actionable failure report\n   */\n  generateFailureReport(): string {\n    const stats = this.generateFailureStats();\n    \n    const report = [\n      '📊 TEST FAILURE ANALYSIS REPORT',\n      '═'.repeat(60),\n      `Total Failures Analyzed: ${stats.totalFailures}`,\n      '',\n      '🔥 Most Common Failure Categories:',\n      '─'.repeat(40),\n    ];\n\n    stats.mostCommonFailures.forEach((failure, index) => {\n      report.push(`${index + 1}. ${failure.pattern}: ${failure.count} failures`);\n    });\n\n    if (stats.flakyTests.length > 0) {\n      report.push(\n        '',\n        '🎲 Flaky Tests (Multiple Failures):',\n        '─'.repeat(40),\n        ...stats.flakyTests.map(test => `• ${test}`)\n      );\n    }\n\n    report.push(\n      '',\n      '💡 Recommendations:',\n      '─'.repeat(40),\n    );\n\n    // Generate recommendations based on most common failures\n    stats.mostCommonFailures.forEach(failure => {\n      const pattern = this.failurePatterns.find(p => p.category === failure.pattern);\n      if (pattern) {\n        report.push(`• ${pattern.category}: ${pattern.suggestedFix}`);\n      }\n    });\n\n    report.push('═'.repeat(60));\n    return report.join('\\n');\n  }\n\n  /**\n   * Get suggestions for a specific test\n   */\n  getTestSuggestions(testName: string): string[] {\n    const testFailures = this.failureHistory.filter(f => f.testName === testName);\n    const suggestions: string[] = [];\n\n    if (testFailures.length > 1) {\n      suggestions.push('This test appears to be flaky - consider adding retry logic or improving test stability');\n    }\n\n    const categories = [...new Set(testFailures.map(f => f.category))];\n    categories.forEach(category => {\n      const pattern = this.failurePatterns.find(p => p.category === category);\n      if (pattern) {\n        suggestions.push(`${category}: ${pattern.suggestedFix}`);\n      }\n    });\n\n    return suggestions;\n  }\n\n  /**\n   * Record a failure for analysis\n   */\n  private recordFailure(testName: string, error: string, category: string): void {\n    this.failureHistory.push({\n      testName,\n      error,\n      timestamp: new Date(),\n      category,\n    });\n\n    // Keep only recent failures (last 1000)\n    if (this.failureHistory.length > 1000) {\n      this.failureHistory = this.failureHistory.slice(-1000);\n    }\n  }\n\n  /**\n   * Calculate confidence score for pattern match\n   */\n  private calculateConfidence(pattern: RegExp, errorMessage: string): number {\n    const matches = errorMessage.match(pattern);\n    if (!matches) return 0;\n\n    // Base confidence on match length and position\n    const matchLength = matches[0].length;\n    const messageLength = errorMessage.length;\n    const position = errorMessage.indexOf(matches[0]);\n    \n    // Higher confidence for longer matches and matches near the beginning\n    const lengthScore = Math.min(matchLength / 50, 1); // Max 1.0\n    const positionScore = Math.max(1 - (position / messageLength), 0.1); // Min 0.1\n    \n    return (lengthScore + positionScore) / 2;\n  }\n\n  /**\n   * Clear failure history\n   */\n  reset(): void {\n    this.failureHistory = [];\n  }\n\n  /**\n   * Export failure data for external analysis\n   */\n  exportFailureData(): any {\n    return {\n      patterns: this.failurePatterns,\n      history: this.failureHistory,\n      stats: this.generateFailureStats(),\n    };\n  }\n}\n\n// Global instance\nexport const testFailureAnalyzer = new TestFailureAnalyzer();\n\n/**\n * Jest setup helper for automatic failure analysis\n */\nexport function setupFailureAnalysis() {\n  // Hook into Jest's error handling\n  const originalIt = global.it;\n  \n  global.it = (name: string, fn?: jest.ProvidesCallback, timeout?: number) => {\n    return originalIt(name, async () => {\n      try {\n        if (fn) {\n          await fn();\n        }\n      } catch (error) {\n        const analysis = testFailureAnalyzer.analyzeFailure(error as Error, name);\n        \n        console.log('\\n🔍 FAILURE ANALYSIS');\n        console.log('─'.repeat(40));\n        console.log(`Category: ${analysis.category} (${(analysis.confidence * 100).toFixed(1)}% confidence)`);\n        console.log(`Description: ${analysis.description}`);\n        console.log(`Suggested Fix: ${analysis.suggestedFix}`);\n        \n        if (analysis.commonCauses.length > 0) {\n          console.log('Common Causes:');\n          analysis.commonCauses.forEach(cause => console.log(`  • ${cause}`));\n        }\n        \n        throw error; // Re-throw to maintain test failure\n      }\n    }, timeout);\n  };\n}\n\n/**\n * Manual failure analysis helper\n */\nexport function analyzeTestFailure(error: Error, testName: string): void {\n  const analysis = testFailureAnalyzer.analyzeFailure(error, testName);\n  console.log('🔍 Test Failure Analysis:', analysis);\n}"],"names":["analyzeTestFailure","setupFailureAnalysis","testFailureAnalyzer","TestFailureAnalyzer","analyzeFailure","error","testName","errorMessage","message","stack","matches","failurePatterns","map","pattern","match","test","confidence","calculateConfidence","filter","sort","a","b","bestMatch","recordFailure","category","description","suggestedFix","commonCauses","relatedPatterns","slice","m","generateFailureStats","categorizedFailures","testFailureCounts","failureHistory","forEach","failure","mostCommonFailures","Object","entries","count","flakyTests","totalFailures","length","slowTests","generateFailureReport","stats","report","repeat","index","push","find","p","join","getTestSuggestions","testFailures","f","suggestions","categories","Set","timestamp","Date","matchLength","messageLength","position","indexOf","lengthScore","Math","min","positionScore","max","reset","exportFailureData","patterns","history","originalIt","global","it","name","fn","timeout","analysis","console","log","toFixed","cause"],"mappings":"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"}