{"version":3,"names":["cov_1fa02au14e","actualCoverage","s","PlantQueries","create","plantData","f","plant","_index","db","insert","_schema","plants","values","returning","error","console","Error","getById","id","select","from","where","_drizzleorm","eq","b","search","query","limit","searchTerm","toLowerCase","or","ilike","family","genus","species","cultivar","commonName","orderBy","desc","isVerified","getAll","offset","getByFamily","taxonomyExists","conditions","push","sql","and","update","set","updatedAt","Date","delete","result","length","getPopular","careInstructions","defaultImage","createdBy","createdAt","fullTextSearch"],"sources":["/Users/stefanbekker/projects/fancy-planties/src/lib/db/queries/plants.ts"],"sourcesContent":["import { eq, ilike, or, and, desc, sql } from 'drizzle-orm';\nimport { db } from '../index';\nimport { plants, type Plant, type NewPlant } from '../schema';\n\n// Plant taxonomy CRUD operations\nexport class PlantQueries {\n  // Create a new plant taxonomy entry\n  static async create(plantData: NewPlant): Promise<Plant> {\n    try {\n      const [plant] = await db.insert(plants).values(plantData).returning();\n      return plant;\n    } catch (error) {\n      console.error('Failed to create plant:', error);\n      throw new Error('Failed to create plant');\n    }\n  }\n\n  // Get plant by ID\n  static async getById(id: number): Promise<Plant | null> {\n    try {\n      const [plant] = await db.select().from(plants).where(eq(plants.id, id));\n      return plant || null;\n    } catch (error) {\n      console.error('Failed to get plant by ID:', error);\n      throw new Error('Failed to get plant');\n    }\n  }\n\n  // Search plants by taxonomy or common name (fuzzy search)\n  static async search(query: string, limit: number = 20): Promise<Plant[]> {\n    try {\n      const searchTerm = `%${query.toLowerCase()}%`;\n      \n      return await db\n        .select()\n        .from(plants)\n        .where(\n          or(\n            ilike(plants.family, searchTerm),\n            ilike(plants.genus, searchTerm),\n            ilike(plants.species, searchTerm),\n            ilike(plants.cultivar, searchTerm),\n            ilike(plants.commonName, searchTerm)\n          )\n        )\n        .orderBy(desc(plants.isVerified), plants.commonName)\n        .limit(limit);\n    } catch (error) {\n      console.error('Failed to search plants:', error);\n      throw new Error('Failed to search plants');\n    }\n  }\n\n  // Get all plants with pagination\n  static async getAll(offset: number = 0, limit: number = 50): Promise<Plant[]> {\n    try {\n      return await db\n        .select()\n        .from(plants)\n        .orderBy(desc(plants.isVerified), plants.commonName)\n        .offset(offset)\n        .limit(limit);\n    } catch (error) {\n      console.error('Failed to get plants:', error);\n      throw new Error('Failed to get plants');\n    }\n  }\n\n  // Get plants by family\n  static async getByFamily(family: string): Promise<Plant[]> {\n    try {\n      return await db\n        .select()\n        .from(plants)\n        .where(eq(plants.family, family))\n        .orderBy(plants.genus, plants.species);\n    } catch (error) {\n      console.error('Failed to get plants by family:', error);\n      throw new Error('Failed to get plants by family');\n    }\n  }\n\n  // Check if plant taxonomy already exists (including cultivar)\n  static async taxonomyExists(family: string, genus: string, species: string, cultivar?: string): Promise<Plant | null> {\n    try {\n      const conditions = [\n        eq(plants.family, family),\n        eq(plants.genus, genus),\n        eq(plants.species, species)\n      ];\n      \n      // Add cultivar condition - both null or both matching\n      if (cultivar) {\n        conditions.push(eq(plants.cultivar, cultivar));\n      } else {\n        conditions.push(sql`${plants.cultivar} IS NULL`);\n      }\n      \n      const [plant] = await db\n        .select()\n        .from(plants)\n        .where(and(...conditions));\n      return plant || null;\n    } catch (error) {\n      console.error('Failed to check taxonomy existence:', error);\n      throw new Error('Failed to check taxonomy');\n    }\n  }\n\n  // Update plant\n  static async update(id: number, plantData: Partial<NewPlant>): Promise<Plant> {\n    try {\n      const [plant] = await db\n        .update(plants)\n        .set({ ...plantData, updatedAt: new Date() })\n        .where(eq(plants.id, id))\n        .returning();\n      \n      if (!plant) {\n        throw new Error('Plant not found');\n      }\n      \n      return plant;\n    } catch (error) {\n      console.error('Failed to update plant:', error);\n      throw new Error('Failed to update plant');\n    }\n  }\n\n  // Delete plant (only if no instances exist)\n  static async delete(id: number): Promise<boolean> {\n    try {\n      const result = await db.delete(plants).where(eq(plants.id, id));\n      return result.length > 0;\n    } catch (error) {\n      console.error('Failed to delete plant:', error);\n      throw new Error('Failed to delete plant');\n    }\n  }\n\n  // Get popular plants (most used in instances)\n  static async getPopular(limit: number = 10): Promise<Plant[]> {\n    try {\n      return await db\n        .select({\n          id: plants.id,\n          family: plants.family,\n          genus: plants.genus,\n          species: plants.species,\n          cultivar: plants.cultivar,\n          commonName: plants.commonName,\n          careInstructions: plants.careInstructions,\n          defaultImage: plants.defaultImage,\n          createdBy: plants.createdBy,\n          isVerified: plants.isVerified,\n          createdAt: plants.createdAt,\n          updatedAt: plants.updatedAt,\n        })\n        .from(plants)\n        .orderBy(desc(plants.isVerified), plants.commonName)\n        .limit(limit);\n    } catch (error) {\n      console.error('Failed to get popular plants:', error);\n      throw new Error('Failed to get popular plants');\n    }\n  }\n\n  // Full-text search using PostgreSQL's built-in search\n  static async fullTextSearch(query: string, limit: number = 20): Promise<Plant[]> {\n    try {\n      return await db\n        .select()\n        .from(plants)\n        .where(\n          sql`to_tsvector('english', ${plants.family} || ' ' || ${plants.genus} || ' ' || ${plants.species} || ' ' || COALESCE(${plants.cultivar}, '') || ' ' || ${plants.commonName}) @@ plainto_tsquery('english', ${query})`\n        )\n        .orderBy(desc(plants.isVerified), plants.commonName)\n        .limit(limit);\n    } catch (error) {\n      console.error('Failed to perform full-text search:', error);\n      // Fallback to regular search\n      return this.search(query, limit);\n    }\n  }\n}"],"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","ignoreList":[]}