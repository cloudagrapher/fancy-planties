{"version":3,"sources":["/Users/stefanbekker/projects/fancy-planties/src/test-utils/setup/database-test-manager.js"],"sourcesContent":["import 'server-only';\n\nimport { db } from '../../lib/db';\nimport { users, sessions, emailVerificationCodes } from '../../lib/db/schema';\nimport { eq } from 'drizzle-orm';\n\n/**\n * Database Test Manager\n * Provides isolated database operations for testing with proper cleanup\n */\nclass DatabaseTestManager {\n  constructor() {\n    this.createdUsers = [];\n    this.createdSessions = [];\n    this.createdEmailCodes = [];\n  }\n\n  /**\n   * Create a test user in the database\n   * @param {Object} userData - User data to insert\n   * @returns {Promise<Object>} Created user\n   */\n  async createTestUser(userData) {\n    const [user] = await db.insert(users).values(userData).returning();\n    this.createdUsers.push(user.id);\n    return user;\n  }\n\n  /**\n   * Create a test session in the database\n   * @param {Object} sessionData - Session data to insert\n   * @returns {Promise<Object>} Created session\n   */\n  async createTestSession(sessionData) {\n    const [session] = await db.insert(sessions).values(sessionData).returning();\n    this.createdSessions.push(session.id);\n    return session;\n  }\n\n  /**\n   * Create a test email verification code in the database\n   * @param {Object} codeData - Email verification code data to insert\n   * @returns {Promise<Object>} Created email verification code\n   */\n  async createTestEmailCode(codeData) {\n    const [code] = await db.insert(emailVerificationCodes).values(codeData).returning();\n    this.createdEmailCodes.push(code.id);\n    return code;\n  }\n\n  /**\n   * Get a user by ID from the database\n   * @param {number} userId - User ID to retrieve\n   * @returns {Promise<Object|null>} User or null if not found\n   */\n  async getUserById(userId) {\n    const [user] = await db.select().from(users).where(eq(users.id, userId));\n    return user || null;\n  }\n\n  /**\n   * Get a user by email from the database\n   * @param {string} email - Email to search for\n   * @returns {Promise<Object|null>} User or null if not found\n   */\n  async getUserByEmail(email) {\n    const [user] = await db.select().from(users).where(eq(users.email, email.toLowerCase()));\n    return user || null;\n  }\n\n  /**\n   * Get a session by ID from the database\n   * @param {string} sessionId - Session ID to retrieve\n   * @returns {Promise<Object|null>} Session or null if not found\n   */\n  async getSessionById(sessionId) {\n    const [session] = await db.select().from(sessions).where(eq(sessions.id, sessionId));\n    return session || null;\n  }\n\n  /**\n   * Get sessions for a user from the database\n   * @param {number} userId - User ID to get sessions for\n   * @returns {Promise<Array>} Array of sessions\n   */\n  async getSessionsByUserId(userId) {\n    return await db.select().from(sessions).where(eq(sessions.userId, userId));\n  }\n\n  /**\n   * Get email verification codes for a user\n   * @param {number} userId - User ID to get codes for\n   * @returns {Promise<Array>} Array of email verification codes\n   */\n  async getEmailCodesByUserId(userId) {\n    return await db.select().from(emailVerificationCodes).where(eq(emailVerificationCodes.userId, userId));\n  }\n\n  /**\n   * Update a user in the database\n   * @param {number} userId - User ID to update\n   * @param {Object} updates - Updates to apply\n   * @returns {Promise<Object>} Updated user\n   */\n  async updateUser(userId, updates) {\n    const [user] = await db.update(users)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(users.id, userId))\n      .returning();\n    return user;\n  }\n\n  /**\n   * Delete a user from the database\n   * @param {number} userId - User ID to delete\n   * @returns {Promise<void>}\n   */\n  async deleteUser(userId) {\n    await db.delete(users).where(eq(users.id, userId));\n    // Remove from tracking\n    this.createdUsers = this.createdUsers.filter(id => id !== userId);\n  }\n\n  /**\n   * Delete a session from the database\n   * @param {string} sessionId - Session ID to delete\n   * @returns {Promise<void>}\n   */\n  async deleteSession(sessionId) {\n    await db.delete(sessions).where(eq(sessions.id, sessionId));\n    // Remove from tracking\n    this.createdSessions = this.createdSessions.filter(id => id !== sessionId);\n  }\n\n  /**\n   * Delete an email verification code from the database\n   * @param {number} codeId - Code ID to delete\n   * @returns {Promise<void>}\n   */\n  async deleteEmailCode(codeId) {\n    await db.delete(emailVerificationCodes).where(eq(emailVerificationCodes.id, codeId));\n    // Remove from tracking\n    this.createdEmailCodes = this.createdEmailCodes.filter(id => id !== codeId);\n  }\n\n  /**\n   * Clean up all test data created by this manager\n   * @returns {Promise<void>}\n   */\n  async cleanup() {\n    try {\n      // Clean up email verification codes first (foreign key constraints)\n      for (const codeId of this.createdEmailCodes) {\n        await db.delete(emailVerificationCodes).where(eq(emailVerificationCodes.id, codeId));\n      }\n\n      // Clean up sessions\n      for (const sessionId of this.createdSessions) {\n        await db.delete(sessions).where(eq(sessions.id, sessionId));\n      }\n\n      // Clean up users last\n      for (const userId of this.createdUsers) {\n        await db.delete(users).where(eq(users.id, userId));\n      }\n\n      // Reset tracking arrays\n      this.createdUsers = [];\n      this.createdSessions = [];\n      this.createdEmailCodes = [];\n    } catch (error) {\n      console.error('Database cleanup error:', error);\n      // Reset tracking arrays even if cleanup fails\n      this.createdUsers = [];\n      this.createdSessions = [];\n      this.createdEmailCodes = [];\n    }\n  }\n\n  /**\n   * Check if the database connection is working\n   * @returns {Promise<boolean>} True if connection is working\n   */\n  async isConnected() {\n    try {\n      // Simple query to test connection\n      await db.select().from(users).limit(1);\n      return true;\n    } catch (error) {\n      console.error('Database connection test failed:', error);\n      return false;\n    }\n  }\n}\n\n/**\n * Create a new database test manager instance\n * @returns {DatabaseTestManager} New database test manager\n */\nexport const createDatabaseTestManager = () => {\n  return new DatabaseTestManager();\n};\n\n/**\n * Global database test manager for shared use\n */\nexport const globalDatabaseTestManager = new DatabaseTestManager();\n\nexport default DatabaseTestManager;"],"names":["createDatabaseTestManager","globalDatabaseTestManager","DatabaseTestManager","createdUsers","createdSessions","createdEmailCodes","createTestUser","userData","user","db","insert","users","values","returning","push","id","createTestSession","sessionData","session","sessions","createTestEmailCode","codeData","code","emailVerificationCodes","getUserById","userId","select","from","where","eq","getUserByEmail","email","toLowerCase","getSessionById","sessionId","getSessionsByUserId","getEmailCodesByUserId","updateUser","updates","update","set","updatedAt","Date","deleteUser","delete","filter","deleteSession","deleteEmailCode","codeId","cleanup","error","console","isConnected","limit"],"mappings":"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"}