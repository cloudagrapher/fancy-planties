61796b18467fa043cab8fd0f08976200
"use strict";

/* istanbul ignore next */
function cov_1vpd2m93cs() {
  var path = "/Users/stefanbekker/projects/fancy-planties/src/lib/validation/care-schemas.ts";
  var hash = "b9019223b48a70fccf086ab020dcde1da983850c";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/stefanbekker/projects/fancy-planties/src/lib/validation/care-schemas.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 51,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 30
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 40
        }
      },
      "6": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 32
        }
      },
      "7": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 30
        }
      },
      "8": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 33
        }
      },
      "9": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 34
        }
      },
      "10": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 31,
          column: 39
        }
      },
      "11": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 34,
          column: 36
        }
      },
      "12": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 37,
          column: 30
        }
      },
      "13": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 40,
          column: 30
        }
      },
      "14": {
        start: {
          line: 43,
          column: 8
        },
        end: {
          line: 43,
          column: 40
        }
      },
      "15": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 46,
          column: 45
        }
      },
      "16": {
        start: {
          line: 49,
          column: 8
        },
        end: {
          line: 49,
          column: 34
        }
      },
      "17": {
        start: {
          line: 52,
          column: 13
        },
        end: {
          line: 52,
          column: 27
        }
      },
      "18": {
        start: {
          line: 53,
          column: 23
        },
        end: {
          line: 60,
          column: 2
        }
      },
      "19": {
        start: {
          line: 61,
          column: 33
        },
        end: {
          line: 68,
          column: 81
        }
      },
      "20": {
        start: {
          line: 69,
          column: 26
        },
        end: {
          line: 82,
          column: 2
        }
      },
      "21": {
        start: {
          line: 83,
          column: 23
        },
        end: {
          line: 109,
          column: 2
        }
      },
      "22": {
        start: {
          line: 86,
          column: 43
        },
        end: {
          line: 86,
          column: 61
        }
      },
      "23": {
        start: {
          line: 87,
          column: 27
        },
        end: {
          line: 87,
          column: 37
        }
      },
      "24": {
        start: {
          line: 88,
          column: 8
        },
        end: {
          line: 88,
          column: 61
        }
      },
      "25": {
        start: {
          line: 89,
          column: 8
        },
        end: {
          line: 89,
          column: 34
        }
      },
      "26": {
        start: {
          line: 99,
          column: 4
        },
        end: {
          line: 101,
          column: 5
        }
      },
      "27": {
        start: {
          line: 100,
          column: 8
        },
        end: {
          line: 100,
          column: 20
        }
      },
      "28": {
        start: {
          line: 102,
          column: 4
        },
        end: {
          line: 102,
          column: 16
        }
      },
      "29": {
        start: {
          line: 105,
          column: 4
        },
        end: {
          line: 107,
          column: 5
        }
      },
      "30": {
        start: {
          line: 106,
          column: 8
        },
        end: {
          line: 106,
          column: 20
        }
      },
      "31": {
        start: {
          line: 108,
          column: 4
        },
        end: {
          line: 108,
          column: 16
        }
      },
      "32": {
        start: {
          line: 110,
          column: 27
        },
        end: {
          line: 115,
          column: 2
        }
      },
      "33": {
        start: {
          line: 113,
          column: 40
        },
        end: {
          line: 113,
          column: 50
        }
      },
      "34": {
        start: {
          line: 116,
          column: 23
        },
        end: {
          line: 122,
          column: 2
        }
      },
      "35": {
        start: {
          line: 119,
          column: 40
        },
        end: {
          line: 119,
          column: 50
        }
      },
      "36": {
        start: {
          line: 123,
          column: 25
        },
        end: {
          line: 139,
          column: 2
        }
      },
      "37": {
        start: {
          line: 140,
          column: 29
        },
        end: {
          line: 145,
          column: 2
        }
      },
      "38": {
        start: {
          line: 146,
          column: 27
        },
        end: {
          line: 154,
          column: 2
        }
      },
      "39": {
        start: {
          line: 155,
          column: 38
        },
        end: {
          line: 160,
          column: 2
        }
      },
      "40": {
        start: {
          line: 161,
          column: 33
        },
        end: {
          line: 165,
          column: 2
        }
      },
      "41": {
        start: {
          line: 166,
          column: 32
        },
        end: {
          line: 170,
          column: 2
        }
      },
      "42": {
        start: {
          line: 169,
          column: 43
        },
        end: {
          line: 169,
          column: 53
        }
      },
      "43": {
        start: {
          line: 171,
          column: 23
        },
        end: {
          line: 237,
          column: 1
        }
      },
      "44": {
        start: {
          line: 174,
          column: 8
        },
        end: {
          line: 174,
          column: 46
        }
      },
      "45": {
        start: {
          line: 178,
          column: 8
        },
        end: {
          line: 178,
          column: 50
        }
      },
      "46": {
        start: {
          line: 182,
          column: 8
        },
        end: {
          line: 182,
          column: 46
        }
      },
      "47": {
        start: {
          line: 186,
          column: 8
        },
        end: {
          line: 186,
          column: 48
        }
      },
      "48": {
        start: {
          line: 190,
          column: 8
        },
        end: {
          line: 190,
          column: 50
        }
      },
      "49": {
        start: {
          line: 194,
          column: 8
        },
        end: {
          line: 194,
          column: 68
        }
      },
      "50": {
        start: {
          line: 198,
          column: 28
        },
        end: {
          line: 204,
          column: 9
        }
      },
      "51": {
        start: {
          line: 206,
          column: 8
        },
        end: {
          line: 208,
          column: 9
        }
      },
      "52": {
        start: {
          line: 207,
          column: 12
        },
        end: {
          line: 207,
          column: 41
        }
      },
      "53": {
        start: {
          line: 210,
          column: 27
        },
        end: {
          line: 210,
          column: 49
        }
      },
      "54": {
        start: {
          line: 211,
          column: 8
        },
        end: {
          line: 213,
          column: 9
        }
      },
      "55": {
        start: {
          line: 212,
          column: 12
        },
        end: {
          line: 212,
          column: 30
        }
      },
      "56": {
        start: {
          line: 215,
          column: 8
        },
        end: {
          line: 215,
          column: 18
        }
      },
      "57": {
        start: {
          line: 219,
          column: 8
        },
        end: {
          line: 219,
          column: 48
        }
      },
      "58": {
        start: {
          line: 219,
          column: 36
        },
        end: {
          line: 219,
          column: 48
        }
      },
      "59": {
        start: {
          line: 220,
          column: 8
        },
        end: {
          line: 220,
          column: 36
        }
      },
      "60": {
        start: {
          line: 224,
          column: 27
        },
        end: {
          line: 231,
          column: 9
        }
      },
      "61": {
        start: {
          line: 232,
          column: 8
        },
        end: {
          line: 234,
          column: 9
        }
      },
      "62": {
        start: {
          line: 233,
          column: 12
        },
        end: {
          line: 233,
          column: 72
        }
      },
      "63": {
        start: {
          line: 235,
          column: 8
        },
        end: {
          line: 235,
          column: 20
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        },
        loc: {
          start: {
            line: 12,
            column: 26
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 36
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 18,
            column: 4
          },
          end: {
            line: 18,
            column: 5
          }
        },
        loc: {
          start: {
            line: 18,
            column: 28
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 18
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 21,
            column: 4
          },
          end: {
            line: 21,
            column: 5
          }
        },
        loc: {
          start: {
            line: 21,
            column: 26
          },
          end: {
            line: 23,
            column: 5
          }
        },
        line: 21
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 24,
            column: 4
          },
          end: {
            line: 24,
            column: 5
          }
        },
        loc: {
          start: {
            line: 24,
            column: 29
          },
          end: {
            line: 26,
            column: 5
          }
        },
        line: 24
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 27,
            column: 4
          },
          end: {
            line: 27,
            column: 5
          }
        },
        loc: {
          start: {
            line: 27,
            column: 30
          },
          end: {
            line: 29,
            column: 5
          }
        },
        line: 27
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 30,
            column: 4
          },
          end: {
            line: 30,
            column: 5
          }
        },
        loc: {
          start: {
            line: 30,
            column: 35
          },
          end: {
            line: 32,
            column: 5
          }
        },
        line: 30
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 33,
            column: 4
          },
          end: {
            line: 33,
            column: 5
          }
        },
        loc: {
          start: {
            line: 33,
            column: 32
          },
          end: {
            line: 35,
            column: 5
          }
        },
        line: 33
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 36,
            column: 4
          },
          end: {
            line: 36,
            column: 5
          }
        },
        loc: {
          start: {
            line: 36,
            column: 26
          },
          end: {
            line: 38,
            column: 5
          }
        },
        line: 36
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 39,
            column: 4
          },
          end: {
            line: 39,
            column: 5
          }
        },
        loc: {
          start: {
            line: 39,
            column: 26
          },
          end: {
            line: 41,
            column: 5
          }
        },
        line: 39
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 42,
            column: 4
          },
          end: {
            line: 42,
            column: 5
          }
        },
        loc: {
          start: {
            line: 42,
            column: 36
          },
          end: {
            line: 44,
            column: 5
          }
        },
        line: 42
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 45,
            column: 4
          },
          end: {
            line: 45,
            column: 5
          }
        },
        loc: {
          start: {
            line: 45,
            column: 41
          },
          end: {
            line: 47,
            column: 5
          }
        },
        line: 45
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 48,
            column: 4
          },
          end: {
            line: 48,
            column: 5
          }
        },
        loc: {
          start: {
            line: 48,
            column: 30
          },
          end: {
            line: 50,
            column: 5
          }
        },
        line: 48
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 86,
            column: 35
          },
          end: {
            line: 86,
            column: 36
          }
        },
        loc: {
          start: {
            line: 86,
            column: 43
          },
          end: {
            line: 86,
            column: 61
          }
        },
        line: 86
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 86,
            column: 107
          },
          end: {
            line: 86,
            column: 108
          }
        },
        loc: {
          start: {
            line: 86,
            column: 115
          },
          end: {
            line: 90,
            column: 5
          }
        },
        line: 86
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 97,
            column: 10
          },
          end: {
            line: 97,
            column: 11
          }
        },
        loc: {
          start: {
            line: 97,
            column: 18
          },
          end: {
            line: 103,
            column: 1
          }
        },
        line: 97
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 103,
            column: 10
          },
          end: {
            line: 103,
            column: 11
          }
        },
        loc: {
          start: {
            line: 103,
            column: 18
          },
          end: {
            line: 109,
            column: 1
          }
        },
        line: 103
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 113,
            column: 36
          },
          end: {
            line: 113,
            column: 37
          }
        },
        loc: {
          start: {
            line: 113,
            column: 40
          },
          end: {
            line: 113,
            column: 50
          }
        },
        line: 113
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 119,
            column: 36
          },
          end: {
            line: 119,
            column: 37
          }
        },
        loc: {
          start: {
            line: 119,
            column: 40
          },
          end: {
            line: 119,
            column: 50
          }
        },
        line: 119
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 169,
            column: 39
          },
          end: {
            line: 169,
            column: 40
          }
        },
        loc: {
          start: {
            line: 169,
            column: 43
          },
          end: {
            line: 169,
            column: 53
          }
        },
        line: 169
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 173,
            column: 22
          },
          end: {
            line: 173,
            column: 23
          }
        },
        loc: {
          start: {
            line: 173,
            column: 30
          },
          end: {
            line: 175,
            column: 5
          }
        },
        line: 173
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 177,
            column: 26
          },
          end: {
            line: 177,
            column: 27
          }
        },
        loc: {
          start: {
            line: 177,
            column: 34
          },
          end: {
            line: 179,
            column: 5
          }
        },
        line: 177
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 181,
            column: 22
          },
          end: {
            line: 181,
            column: 23
          }
        },
        loc: {
          start: {
            line: 181,
            column: 30
          },
          end: {
            line: 183,
            column: 5
          }
        },
        line: 181
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 185,
            column: 24
          },
          end: {
            line: 185,
            column: 25
          }
        },
        loc: {
          start: {
            line: 185,
            column: 32
          },
          end: {
            line: 187,
            column: 5
          }
        },
        line: 185
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 189,
            column: 26
          },
          end: {
            line: 189,
            column: 27
          }
        },
        loc: {
          start: {
            line: 189,
            column: 34
          },
          end: {
            line: 191,
            column: 5
          }
        },
        line: 189
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 193,
            column: 32
          },
          end: {
            line: 193,
            column: 33
          }
        },
        loc: {
          start: {
            line: 193,
            column: 44
          },
          end: {
            line: 195,
            column: 5
          }
        },
        line: 193
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 197,
            column: 35
          },
          end: {
            line: 197,
            column: 36
          }
        },
        loc: {
          start: {
            line: 197,
            column: 47
          },
          end: {
            line: 216,
            column: 5
          }
        },
        line: 197
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 218,
            column: 23
          },
          end: {
            line: 218,
            column: 24
          }
        },
        loc: {
          start: {
            line: 218,
            column: 45
          },
          end: {
            line: 221,
            column: 5
          }
        },
        line: 218
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 223,
            column: 29
          },
          end: {
            line: 223,
            column: 30
          }
        },
        loc: {
          start: {
            line: 223,
            column: 41
          },
          end: {
            line: 236,
            column: 5
          }
        },
        line: 223
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 99,
            column: 4
          },
          end: {
            line: 101,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 99,
            column: 4
          },
          end: {
            line: 101,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 99
      },
      "1": {
        loc: {
          start: {
            line: 99,
            column: 8
          },
          end: {
            line: 99,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 99,
            column: 8
          },
          end: {
            line: 99,
            column: 38
          }
        }, {
          start: {
            line: 99,
            column: 42
          },
          end: {
            line: 99,
            column: 62
          }
        }],
        line: 99
      },
      "2": {
        loc: {
          start: {
            line: 105,
            column: 4
          },
          end: {
            line: 107,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 105,
            column: 4
          },
          end: {
            line: 107,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 105
      },
      "3": {
        loc: {
          start: {
            line: 105,
            column: 8
          },
          end: {
            line: 105,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 105,
            column: 8
          },
          end: {
            line: 105,
            column: 33
          }
        }, {
          start: {
            line: 105,
            column: 38
          },
          end: {
            line: 105,
            column: 51
          }
        }, {
          start: {
            line: 105,
            column: 55
          },
          end: {
            line: 105,
            column: 69
          }
        }],
        line: 105
      },
      "4": {
        loc: {
          start: {
            line: 206,
            column: 8
          },
          end: {
            line: 208,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 206,
            column: 8
          },
          end: {
            line: 208,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 206
      },
      "5": {
        loc: {
          start: {
            line: 211,
            column: 8
          },
          end: {
            line: 213,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 211,
            column: 8
          },
          end: {
            line: 213,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 211
      },
      "6": {
        loc: {
          start: {
            line: 211,
            column: 12
          },
          end: {
            line: 211,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 211,
            column: 12
          },
          end: {
            line: 211,
            column: 30
          }
        }, {
          start: {
            line: 211,
            column: 34
          },
          end: {
            line: 211,
            column: 48
          }
        }],
        line: 211
      },
      "7": {
        loc: {
          start: {
            line: 219,
            column: 8
          },
          end: {
            line: 219,
            column: 48
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 219,
            column: 8
          },
          end: {
            line: 219,
            column: 48
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 219
      },
      "8": {
        loc: {
          start: {
            line: 219,
            column: 12
          },
          end: {
            line: 219,
            column: 34
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 219,
            column: 12
          },
          end: {
            line: 219,
            column: 22
          }
        }, {
          start: {
            line: 219,
            column: 26
          },
          end: {
            line: 219,
            column: 34
          }
        }],
        line: 219
      },
      "9": {
        loc: {
          start: {
            line: 232,
            column: 8
          },
          end: {
            line: 234,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 232,
            column: 8
          },
          end: {
            line: 234,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 232
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/stefanbekker/projects/fancy-planties/src/lib/validation/care-schemas.ts"],
      sourcesContent: ["import { z } from 'zod';\n\n// Care type schema\nexport const careTypeSchema = z.enum([\n  'fertilizer',\n  'water',\n  'repot',\n  'prune',\n  'inspect',\n  'other'\n]);\n\n// Fertilizer schedule schema\nexport const fertilizerScheduleSchema = z.enum([\n  'weekly',\n  'biweekly', \n  'monthly',\n  'bimonthly',\n  'quarterly',\n  'custom'\n]).or(z.string().regex(/^\\d+$/, 'Custom schedule must be a number of days'));\n\n// Care history entry schema\nexport const careHistorySchema = z.object({\n  id: z.number().optional(),\n  userId: z.number(),\n  plantInstanceId: z.number(),\n  careType: careTypeSchema,\n  careDate: z.date(),\n  notes: z.string().max(1000, 'Notes must be less than 1000 characters').optional(),\n  fertilizerType: z.string().max(100, 'Fertilizer type must be less than 100 characters').optional(),\n  potSize: z.string().max(50, 'Pot size must be less than 50 characters').optional(),\n  soilType: z.string().max(100, 'Soil type must be less than 100 characters').optional(),\n  images: z.array(z.string()).default([]),\n  createdAt: z.date().optional(),\n  updatedAt: z.date().optional(),\n});\n\n// Care form data schema for creating new care entries\nexport const careFormSchema = z.object({\n  plantInstanceId: z.number().min(1, 'Plant instance ID is required'),\n  careType: careTypeSchema,\n  careDate: z.date().refine(\n    (date) => date <= new Date(),\n    'Care date cannot be in the future'\n  ).refine(\n    (date) => {\n      const oneYearAgo = new Date();\n      oneYearAgo.setFullYear(oneYearAgo.getFullYear() - 1);\n      return date >= oneYearAgo;\n    },\n    'Care date cannot be more than one year ago'\n  ),\n  notes: z.string().max(1000, 'Notes must be less than 1000 characters').optional(),\n  fertilizerType: z.string().max(100, 'Fertilizer type must be less than 100 characters').optional(),\n  potSize: z.string().max(50, 'Pot size must be less than 50 characters').optional(),\n  soilType: z.string().max(100, 'Soil type must be less than 100 characters').optional(),\n  images: z.array(z.string()).default([]),\n  updateSchedule: z.boolean().default(true),\n}).refine(\n  (data) => {\n    // If care type is fertilizer, fertilizer type is recommended\n    if (data.careType === 'fertilizer' && !data.fertilizerType) {\n      return true; // Allow but will show warning\n    }\n    return true;\n  }\n).refine(\n  (data) => {\n    // If care type is repot, pot size and soil type are recommended\n    if (data.careType === 'repot' && (!data.potSize || !data.soilType)) {\n      return true; // Allow but will show warning\n    }\n    return true;\n  }\n);\n\n// Quick care log schema for simple care logging\nexport const quickCareLogSchema = z.object({\n  plantInstanceId: z.number().min(1, 'Plant instance ID is required'),\n  careType: careTypeSchema,\n  careDate: z.date().default(() => new Date()),\n  notes: z.string().max(500, 'Notes must be less than 500 characters').optional(),\n});\n\n// Bulk care operation schema\nexport const bulkCareSchema = z.object({\n  plantInstanceIds: z.array(z.number()).min(1, 'At least one plant must be selected'),\n  careType: careTypeSchema,\n  careDate: z.date().default(() => new Date()),\n  notes: z.string().max(500, 'Notes must be less than 500 characters').optional(),\n  fertilizerType: z.string().max(100, 'Fertilizer type must be less than 100 characters').optional(),\n});\n\n// Care filter schema for querying care history\nexport const careFilterSchema = z.object({\n  plantInstanceId: z.number().optional(),\n  careType: careTypeSchema.optional(),\n  startDate: z.date().optional(),\n  endDate: z.date().optional(),\n  limit: z.number().min(1).max(100).default(50),\n  offset: z.number().min(0).default(0),\n  sortBy: z.enum(['care_date', 'care_type', 'created_at']).default('care_date'),\n  sortOrder: z.enum(['asc', 'desc']).default('desc'),\n});\n\n// Care statistics query schema\nexport const careStatsQuerySchema = z.object({\n  plantInstanceId: z.number().optional(),\n  startDate: z.date().optional(),\n  endDate: z.date().optional(),\n  careTypes: z.array(careTypeSchema).optional(),\n});\n\n// Care reminder schema\nexport const careReminderSchema = z.object({\n  id: z.string().optional(),\n  plantInstanceId: z.number(),\n  careType: careTypeSchema,\n  reminderDate: z.date(),\n  isActive: z.boolean().default(true),\n  notificationSent: z.boolean().default(false),\n  createdAt: z.date().optional(),\n});\n\n// Plant instance care update schema\nexport const plantInstanceCareUpdateSchema = z.object({\n  lastFertilized: z.date().optional(),\n  fertilizerSchedule: fertilizerScheduleSchema.optional(),\n  fertilizerDue: z.date().optional(),\n  lastRepot: z.date().optional(),\n});\n\n// Care dashboard query schema\nexport const careDashboardQuerySchema = z.object({\n  userId: z.number(),\n  includeInactive: z.boolean().default(false),\n  daysAhead: z.number().min(1).max(30).default(7), // How many days ahead to look for \"due soon\"\n});\n\n// Care schedule calculation input schema\nexport const careScheduleInputSchema = z.object({\n  lastFertilized: z.date().nullable(),\n  fertilizerSchedule: fertilizerScheduleSchema,\n  currentDate: z.date().default(() => new Date()),\n});\n\n// Export type definitions\nexport type CareTypeInput = z.infer<typeof careTypeSchema>;\nexport type FertilizerScheduleInput = z.infer<typeof fertilizerScheduleSchema>;\nexport type CareHistoryInput = z.infer<typeof careHistorySchema>;\nexport type CareFormInput = z.infer<typeof careFormSchema>;\nexport type QuickCareLogInput = z.infer<typeof quickCareLogSchema>;\nexport type BulkCareInput = z.infer<typeof bulkCareSchema>;\nexport type CareFilterInput = z.infer<typeof careFilterSchema>;\nexport type CareStatsQueryInput = z.infer<typeof careStatsQuerySchema>;\nexport type CareReminderInput = z.infer<typeof careReminderSchema>;\nexport type PlantInstanceCareUpdateInput = z.infer<typeof plantInstanceCareUpdateSchema>;\nexport type CareDashboardQueryInput = z.infer<typeof careDashboardQuerySchema>;\nexport type CareScheduleInput = z.infer<typeof careScheduleInputSchema>;\n\n// Validation helper functions\nexport const careValidation = {\n  // Validate care form data\n  validateCareForm: (data: unknown) => {\n    return careFormSchema.safeParse(data);\n  },\n\n  // Validate quick care log\n  validateQuickCareLog: (data: unknown) => {\n    return quickCareLogSchema.safeParse(data);\n  },\n\n  // Validate bulk care operation\n  validateBulkCare: (data: unknown) => {\n    return bulkCareSchema.safeParse(data);\n  },\n\n  // Validate care filter\n  validateCareFilter: (data: unknown) => {\n    return careFilterSchema.safeParse(data);\n  },\n\n  // Validate care reminder\n  validateCareReminder: (data: unknown) => {\n    return careReminderSchema.safeParse(data);\n  },\n\n  // Validate fertilizer schedule\n  validateFertilizerSchedule: (schedule: string): boolean => {\n    return fertilizerScheduleSchema.safeParse(schedule).success;\n  },\n\n  // Parse fertilizer schedule to days\n  parseFertilizerScheduleToDays: (schedule: string): number => {\n    const scheduleMap: Record<string, number> = {\n      'weekly': 7,\n      'biweekly': 14,\n      'monthly': 30,\n      'bimonthly': 60,\n      'quarterly': 90\n    };\n\n    // Check if it's a predefined schedule\n    if (scheduleMap[schedule]) {\n      return scheduleMap[schedule];\n    }\n\n    // Try to parse as custom number of days\n    const customDays = parseInt(schedule, 10);\n    if (!isNaN(customDays) && customDays > 0) {\n      return customDays;\n    }\n\n    // Default to monthly if unable to parse\n    return 30;\n  },\n\n  // Validate care date range\n  validateDateRange: (startDate?: Date, endDate?: Date): boolean => {\n    if (!startDate || !endDate) return true;\n    return startDate <= endDate;\n  },\n\n  // Get care type validation error messages\n  getCareTypeErrorMessage: (careType: string): string | null => {\n    const validTypes = ['fertilizer', 'water', 'repot', 'prune', 'inspect', 'other'];\n    if (!validTypes.includes(careType)) {\n      return `Care type must be one of: ${validTypes.join(', ')}`;\n    }\n    return null;\n  }\n};"],
      names: ["bulkCareSchema", "careDashboardQuerySchema", "careFilterSchema", "careFormSchema", "careHistorySchema", "careReminderSchema", "careScheduleInputSchema", "careStatsQuerySchema", "careTypeSchema", "careValidation", "fertilizerScheduleSchema", "plantInstanceCareUpdateSchema", "quickCareLogSchema", "z", "enum", "or", "string", "regex", "object", "id", "number", "optional", "userId", "plantInstanceId", "careType", "careDate", "date", "notes", "max", "fertilizerType", "potSize", "soilType", "images", "array", "default", "createdAt", "updatedAt", "min", "refine", "Date", "oneYearAgo", "setFullYear", "getFullYear", "updateSchedule", "boolean", "data", "plantInstanceIds", "startDate", "endDate", "limit", "offset", "sortBy", "sortOrder", "careTypes", "reminderDate", "isActive", "notificationSent", "lastFertilized", "fertilizerSchedule", "fertilizerDue", "lastRepot", "includeInactive", "daysAhead", "nullable", "currentDate", "validateCareForm", "safeParse", "validateQuickCareLog", "validateBulkCare", "validateCareFilter", "validateCareReminder", "validateFertilizerSchedule", "schedule", "success", "parseFertilizerScheduleToDays", "scheduleMap", "customDays", "parseInt", "isNaN", "validateDateRange", "getCareTypeErrorMessage", "validTypes", "includes", "join"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "b9019223b48a70fccf086ab020dcde1da983850c"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1vpd2m93cs = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1vpd2m93cs();
cov_1vpd2m93cs().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_1vpd2m93cs().f[0]++;
  cov_1vpd2m93cs().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_1vpd2m93cs().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_1vpd2m93cs().s[3]++;
_export(exports, {
  get bulkCareSchema() {
    /* istanbul ignore next */
    cov_1vpd2m93cs().f[1]++;
    cov_1vpd2m93cs().s[4]++;
    return bulkCareSchema;
  },
  get careDashboardQuerySchema() {
    /* istanbul ignore next */
    cov_1vpd2m93cs().f[2]++;
    cov_1vpd2m93cs().s[5]++;
    return careDashboardQuerySchema;
  },
  get careFilterSchema() {
    /* istanbul ignore next */
    cov_1vpd2m93cs().f[3]++;
    cov_1vpd2m93cs().s[6]++;
    return careFilterSchema;
  },
  get careFormSchema() {
    /* istanbul ignore next */
    cov_1vpd2m93cs().f[4]++;
    cov_1vpd2m93cs().s[7]++;
    return careFormSchema;
  },
  get careHistorySchema() {
    /* istanbul ignore next */
    cov_1vpd2m93cs().f[5]++;
    cov_1vpd2m93cs().s[8]++;
    return careHistorySchema;
  },
  get careReminderSchema() {
    /* istanbul ignore next */
    cov_1vpd2m93cs().f[6]++;
    cov_1vpd2m93cs().s[9]++;
    return careReminderSchema;
  },
  get careScheduleInputSchema() {
    /* istanbul ignore next */
    cov_1vpd2m93cs().f[7]++;
    cov_1vpd2m93cs().s[10]++;
    return careScheduleInputSchema;
  },
  get careStatsQuerySchema() {
    /* istanbul ignore next */
    cov_1vpd2m93cs().f[8]++;
    cov_1vpd2m93cs().s[11]++;
    return careStatsQuerySchema;
  },
  get careTypeSchema() {
    /* istanbul ignore next */
    cov_1vpd2m93cs().f[9]++;
    cov_1vpd2m93cs().s[12]++;
    return careTypeSchema;
  },
  get careValidation() {
    /* istanbul ignore next */
    cov_1vpd2m93cs().f[10]++;
    cov_1vpd2m93cs().s[13]++;
    return careValidation;
  },
  get fertilizerScheduleSchema() {
    /* istanbul ignore next */
    cov_1vpd2m93cs().f[11]++;
    cov_1vpd2m93cs().s[14]++;
    return fertilizerScheduleSchema;
  },
  get plantInstanceCareUpdateSchema() {
    /* istanbul ignore next */
    cov_1vpd2m93cs().f[12]++;
    cov_1vpd2m93cs().s[15]++;
    return plantInstanceCareUpdateSchema;
  },
  get quickCareLogSchema() {
    /* istanbul ignore next */
    cov_1vpd2m93cs().f[13]++;
    cov_1vpd2m93cs().s[16]++;
    return quickCareLogSchema;
  }
});
const _zod =
/* istanbul ignore next */
(cov_1vpd2m93cs().s[17]++, require("zod"));
const careTypeSchema =
/* istanbul ignore next */
(cov_1vpd2m93cs().s[18]++, _zod.z.enum(['fertilizer', 'water', 'repot', 'prune', 'inspect', 'other']));
const fertilizerScheduleSchema =
/* istanbul ignore next */
(cov_1vpd2m93cs().s[19]++, _zod.z.enum(['weekly', 'biweekly', 'monthly', 'bimonthly', 'quarterly', 'custom']).or(_zod.z.string().regex(/^\d+$/, 'Custom schedule must be a number of days')));
const careHistorySchema =
/* istanbul ignore next */
(cov_1vpd2m93cs().s[20]++, _zod.z.object({
  id: _zod.z.number().optional(),
  userId: _zod.z.number(),
  plantInstanceId: _zod.z.number(),
  careType: careTypeSchema,
  careDate: _zod.z.date(),
  notes: _zod.z.string().max(1000, 'Notes must be less than 1000 characters').optional(),
  fertilizerType: _zod.z.string().max(100, 'Fertilizer type must be less than 100 characters').optional(),
  potSize: _zod.z.string().max(50, 'Pot size must be less than 50 characters').optional(),
  soilType: _zod.z.string().max(100, 'Soil type must be less than 100 characters').optional(),
  images: _zod.z.array(_zod.z.string()).default([]),
  createdAt: _zod.z.date().optional(),
  updatedAt: _zod.z.date().optional()
}));
const careFormSchema =
/* istanbul ignore next */
(cov_1vpd2m93cs().s[21]++, _zod.z.object({
  plantInstanceId: _zod.z.number().min(1, 'Plant instance ID is required'),
  careType: careTypeSchema,
  careDate: _zod.z.date().refine(date => {
    /* istanbul ignore next */
    cov_1vpd2m93cs().f[14]++;
    cov_1vpd2m93cs().s[22]++;
    return date <= new Date();
  }, 'Care date cannot be in the future').refine(date => {
    /* istanbul ignore next */
    cov_1vpd2m93cs().f[15]++;
    const oneYearAgo =
    /* istanbul ignore next */
    (cov_1vpd2m93cs().s[23]++, new Date());
    /* istanbul ignore next */
    cov_1vpd2m93cs().s[24]++;
    oneYearAgo.setFullYear(oneYearAgo.getFullYear() - 1);
    /* istanbul ignore next */
    cov_1vpd2m93cs().s[25]++;
    return date >= oneYearAgo;
  }, 'Care date cannot be more than one year ago'),
  notes: _zod.z.string().max(1000, 'Notes must be less than 1000 characters').optional(),
  fertilizerType: _zod.z.string().max(100, 'Fertilizer type must be less than 100 characters').optional(),
  potSize: _zod.z.string().max(50, 'Pot size must be less than 50 characters').optional(),
  soilType: _zod.z.string().max(100, 'Soil type must be less than 100 characters').optional(),
  images: _zod.z.array(_zod.z.string()).default([]),
  updateSchedule: _zod.z.boolean().default(true)
}).refine(data => {
  /* istanbul ignore next */
  cov_1vpd2m93cs().f[16]++;
  cov_1vpd2m93cs().s[26]++;
  // If care type is fertilizer, fertilizer type is recommended
  if (
  /* istanbul ignore next */
  (cov_1vpd2m93cs().b[1][0]++, data.careType === 'fertilizer') &&
  /* istanbul ignore next */
  (cov_1vpd2m93cs().b[1][1]++, !data.fertilizerType)) {
    /* istanbul ignore next */
    cov_1vpd2m93cs().b[0][0]++;
    cov_1vpd2m93cs().s[27]++;
    return true; // Allow but will show warning
  } else
  /* istanbul ignore next */
  {
    cov_1vpd2m93cs().b[0][1]++;
  }
  cov_1vpd2m93cs().s[28]++;
  return true;
}).refine(data => {
  /* istanbul ignore next */
  cov_1vpd2m93cs().f[17]++;
  cov_1vpd2m93cs().s[29]++;
  // If care type is repot, pot size and soil type are recommended
  if (
  /* istanbul ignore next */
  (cov_1vpd2m93cs().b[3][0]++, data.careType === 'repot') && (
  /* istanbul ignore next */
  (cov_1vpd2m93cs().b[3][1]++, !data.potSize) ||
  /* istanbul ignore next */
  (cov_1vpd2m93cs().b[3][2]++, !data.soilType))) {
    /* istanbul ignore next */
    cov_1vpd2m93cs().b[2][0]++;
    cov_1vpd2m93cs().s[30]++;
    return true; // Allow but will show warning
  } else
  /* istanbul ignore next */
  {
    cov_1vpd2m93cs().b[2][1]++;
  }
  cov_1vpd2m93cs().s[31]++;
  return true;
}));
const quickCareLogSchema =
/* istanbul ignore next */
(cov_1vpd2m93cs().s[32]++, _zod.z.object({
  plantInstanceId: _zod.z.number().min(1, 'Plant instance ID is required'),
  careType: careTypeSchema,
  careDate: _zod.z.date().default(() => {
    /* istanbul ignore next */
    cov_1vpd2m93cs().f[18]++;
    cov_1vpd2m93cs().s[33]++;
    return new Date();
  }),
  notes: _zod.z.string().max(500, 'Notes must be less than 500 characters').optional()
}));
const bulkCareSchema =
/* istanbul ignore next */
(cov_1vpd2m93cs().s[34]++, _zod.z.object({
  plantInstanceIds: _zod.z.array(_zod.z.number()).min(1, 'At least one plant must be selected'),
  careType: careTypeSchema,
  careDate: _zod.z.date().default(() => {
    /* istanbul ignore next */
    cov_1vpd2m93cs().f[19]++;
    cov_1vpd2m93cs().s[35]++;
    return new Date();
  }),
  notes: _zod.z.string().max(500, 'Notes must be less than 500 characters').optional(),
  fertilizerType: _zod.z.string().max(100, 'Fertilizer type must be less than 100 characters').optional()
}));
const careFilterSchema =
/* istanbul ignore next */
(cov_1vpd2m93cs().s[36]++, _zod.z.object({
  plantInstanceId: _zod.z.number().optional(),
  careType: careTypeSchema.optional(),
  startDate: _zod.z.date().optional(),
  endDate: _zod.z.date().optional(),
  limit: _zod.z.number().min(1).max(100).default(50),
  offset: _zod.z.number().min(0).default(0),
  sortBy: _zod.z.enum(['care_date', 'care_type', 'created_at']).default('care_date'),
  sortOrder: _zod.z.enum(['asc', 'desc']).default('desc')
}));
const careStatsQuerySchema =
/* istanbul ignore next */
(cov_1vpd2m93cs().s[37]++, _zod.z.object({
  plantInstanceId: _zod.z.number().optional(),
  startDate: _zod.z.date().optional(),
  endDate: _zod.z.date().optional(),
  careTypes: _zod.z.array(careTypeSchema).optional()
}));
const careReminderSchema =
/* istanbul ignore next */
(cov_1vpd2m93cs().s[38]++, _zod.z.object({
  id: _zod.z.string().optional(),
  plantInstanceId: _zod.z.number(),
  careType: careTypeSchema,
  reminderDate: _zod.z.date(),
  isActive: _zod.z.boolean().default(true),
  notificationSent: _zod.z.boolean().default(false),
  createdAt: _zod.z.date().optional()
}));
const plantInstanceCareUpdateSchema =
/* istanbul ignore next */
(cov_1vpd2m93cs().s[39]++, _zod.z.object({
  lastFertilized: _zod.z.date().optional(),
  fertilizerSchedule: fertilizerScheduleSchema.optional(),
  fertilizerDue: _zod.z.date().optional(),
  lastRepot: _zod.z.date().optional()
}));
const careDashboardQuerySchema =
/* istanbul ignore next */
(cov_1vpd2m93cs().s[40]++, _zod.z.object({
  userId: _zod.z.number(),
  includeInactive: _zod.z.boolean().default(false),
  daysAhead: _zod.z.number().min(1).max(30).default(7)
}));
const careScheduleInputSchema =
/* istanbul ignore next */
(cov_1vpd2m93cs().s[41]++, _zod.z.object({
  lastFertilized: _zod.z.date().nullable(),
  fertilizerSchedule: fertilizerScheduleSchema,
  currentDate: _zod.z.date().default(() => {
    /* istanbul ignore next */
    cov_1vpd2m93cs().f[20]++;
    cov_1vpd2m93cs().s[42]++;
    return new Date();
  })
}));
const careValidation =
/* istanbul ignore next */
(cov_1vpd2m93cs().s[43]++, {
  // Validate care form data
  validateCareForm: data => {
    /* istanbul ignore next */
    cov_1vpd2m93cs().f[21]++;
    cov_1vpd2m93cs().s[44]++;
    return careFormSchema.safeParse(data);
  },
  // Validate quick care log
  validateQuickCareLog: data => {
    /* istanbul ignore next */
    cov_1vpd2m93cs().f[22]++;
    cov_1vpd2m93cs().s[45]++;
    return quickCareLogSchema.safeParse(data);
  },
  // Validate bulk care operation
  validateBulkCare: data => {
    /* istanbul ignore next */
    cov_1vpd2m93cs().f[23]++;
    cov_1vpd2m93cs().s[46]++;
    return bulkCareSchema.safeParse(data);
  },
  // Validate care filter
  validateCareFilter: data => {
    /* istanbul ignore next */
    cov_1vpd2m93cs().f[24]++;
    cov_1vpd2m93cs().s[47]++;
    return careFilterSchema.safeParse(data);
  },
  // Validate care reminder
  validateCareReminder: data => {
    /* istanbul ignore next */
    cov_1vpd2m93cs().f[25]++;
    cov_1vpd2m93cs().s[48]++;
    return careReminderSchema.safeParse(data);
  },
  // Validate fertilizer schedule
  validateFertilizerSchedule: schedule => {
    /* istanbul ignore next */
    cov_1vpd2m93cs().f[26]++;
    cov_1vpd2m93cs().s[49]++;
    return fertilizerScheduleSchema.safeParse(schedule).success;
  },
  // Parse fertilizer schedule to days
  parseFertilizerScheduleToDays: schedule => {
    /* istanbul ignore next */
    cov_1vpd2m93cs().f[27]++;
    const scheduleMap =
    /* istanbul ignore next */
    (cov_1vpd2m93cs().s[50]++, {
      'weekly': 7,
      'biweekly': 14,
      'monthly': 30,
      'bimonthly': 60,
      'quarterly': 90
    });
    // Check if it's a predefined schedule
    /* istanbul ignore next */
    cov_1vpd2m93cs().s[51]++;
    if (scheduleMap[schedule]) {
      /* istanbul ignore next */
      cov_1vpd2m93cs().b[4][0]++;
      cov_1vpd2m93cs().s[52]++;
      return scheduleMap[schedule];
    } else
    /* istanbul ignore next */
    {
      cov_1vpd2m93cs().b[4][1]++;
    }
    // Try to parse as custom number of days
    const customDays =
    /* istanbul ignore next */
    (cov_1vpd2m93cs().s[53]++, parseInt(schedule, 10));
    /* istanbul ignore next */
    cov_1vpd2m93cs().s[54]++;
    if (
    /* istanbul ignore next */
    (cov_1vpd2m93cs().b[6][0]++, !isNaN(customDays)) &&
    /* istanbul ignore next */
    (cov_1vpd2m93cs().b[6][1]++, customDays > 0)) {
      /* istanbul ignore next */
      cov_1vpd2m93cs().b[5][0]++;
      cov_1vpd2m93cs().s[55]++;
      return customDays;
    } else
    /* istanbul ignore next */
    {
      cov_1vpd2m93cs().b[5][1]++;
    }
    // Default to monthly if unable to parse
    cov_1vpd2m93cs().s[56]++;
    return 30;
  },
  // Validate care date range
  validateDateRange: (startDate, endDate) => {
    /* istanbul ignore next */
    cov_1vpd2m93cs().f[28]++;
    cov_1vpd2m93cs().s[57]++;
    if (
    /* istanbul ignore next */
    (cov_1vpd2m93cs().b[8][0]++, !startDate) ||
    /* istanbul ignore next */
    (cov_1vpd2m93cs().b[8][1]++, !endDate)) {
      /* istanbul ignore next */
      cov_1vpd2m93cs().b[7][0]++;
      cov_1vpd2m93cs().s[58]++;
      return true;
    } else
    /* istanbul ignore next */
    {
      cov_1vpd2m93cs().b[7][1]++;
    }
    cov_1vpd2m93cs().s[59]++;
    return startDate <= endDate;
  },
  // Get care type validation error messages
  getCareTypeErrorMessage: careType => {
    /* istanbul ignore next */
    cov_1vpd2m93cs().f[29]++;
    const validTypes =
    /* istanbul ignore next */
    (cov_1vpd2m93cs().s[60]++, ['fertilizer', 'water', 'repot', 'prune', 'inspect', 'other']);
    /* istanbul ignore next */
    cov_1vpd2m93cs().s[61]++;
    if (!validTypes.includes(careType)) {
      /* istanbul ignore next */
      cov_1vpd2m93cs().b[9][0]++;
      cov_1vpd2m93cs().s[62]++;
      return `Care type must be one of: ${validTypes.join(', ')}`;
    } else
    /* istanbul ignore next */
    {
      cov_1vpd2m93cs().b[9][1]++;
    }
    cov_1vpd2m93cs().s[63]++;
    return null;
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,