{"version":3,"sources":["/Users/stefanbekker/projects/fancy-planties/src/test-utils/debugging/test-error-reporter.ts"],"sourcesContent":["/**\n * Test Error Reporter\n * \n * Provides detailed error context collection and reporting for test failures.\n */\n\ninterface TestErrorContext {\n  testName: string;\n  testFile: string;\n  errorMessage: string;\n  errorStack?: string;\n  timestamp: Date;\n  environment: {\n    nodeVersion: string;\n    platform: string;\n    memoryUsage: NodeJS.MemoryUsage;\n  };\n  testState: {\n    assertions: number;\n    duration: number;\n    retryCount: number;\n  };\n  componentState?: any;\n  apiCalls?: ApiCallLog[];\n  domSnapshot?: string;\n}\n\ninterface ApiCallLog {\n  url: string;\n  method: string;\n  status?: number;\n  requestBody?: any;\n  responseBody?: any;\n  timestamp: Date;\n  duration: number;\n}\n\ninterface RetryConfig {\n  maxRetries: number;\n  retryDelay: number;\n  retryableErrors: string[];\n}\n\n/**\n * Enhanced error reporter with detailed context collection\n */\nclass TestErrorReporter {\n  private errorContexts: TestErrorContext[] = [];\n  private apiCallLogs: ApiCallLog[] = [];\n  private componentStates = new Map<string, any>();\n  private retryConfigs = new Map<string, RetryConfig>();\n\n  /**\n   * Collect detailed error context when a test fails\n   */\n  collectErrorContext(error: Error, testName: string, testFile: string): TestErrorContext {\n    const context: TestErrorContext = {\n      testName,\n      testFile,\n      errorMessage: error.message,\n      errorStack: error.stack,\n      timestamp: new Date(),\n      environment: {\n        nodeVersion: process.version,\n        platform: process.platform,\n        memoryUsage: process.memoryUsage(),\n      },\n      testState: {\n        assertions: this.getAssertionCount(),\n        duration: this.getTestDuration(),\n        retryCount: this.getRetryCount(testName),\n      },\n      componentState: this.componentStates.get(testName),\n      apiCalls: this.getRecentApiCalls(),\n      domSnapshot: this.captureDomSnapshot(),\n    };\n\n    this.errorContexts.push(context);\n    return context;\n  }\n\n  /**\n   * Log API calls for debugging\n   */\n  logApiCall(call: Omit<ApiCallLog, 'timestamp'>): void {\n    this.apiCallLogs.push({\n      ...call,\n      timestamp: new Date(),\n    });\n\n    // Keep only recent calls (last 50)\n    if (this.apiCallLogs.length > 50) {\n      this.apiCallLogs = this.apiCallLogs.slice(-50);\n    }\n  }\n\n  /**\n   * Store component state for debugging\n   */\n  storeComponentState(testName: string, state: any): void {\n    this.componentStates.set(testName, JSON.parse(JSON.stringify(state)));\n  }\n\n  /**\n   * Configure retry behavior for specific error patterns\n   */\n  configureRetry(testPattern: string, config: RetryConfig): void {\n    this.retryConfigs.set(testPattern, config);\n  }\n\n  /**\n   * Generate detailed error report\n   */\n  generateErrorReport(context: TestErrorContext): string {\n    const report = [\n      'üö® TEST FAILURE REPORT',\n      '‚ïê'.repeat(80),\n      `Test: ${context.testName}`,\n      `File: ${context.testFile}`,\n      `Time: ${context.timestamp.toISOString()}`,\n      `Duration: ${context.testState.duration}ms`,\n      `Retry Count: ${context.testState.retryCount}`,\n      '',\n      'üìã ERROR DETAILS',\n      '‚îÄ'.repeat(40),\n      `Message: ${context.errorMessage}`,\n      '',\n      'üîç STACK TRACE',\n      '‚îÄ'.repeat(40),\n      context.errorStack || 'No stack trace available',\n      '',\n      'üíª ENVIRONMENT',\n      '‚îÄ'.repeat(40),\n      `Node Version: ${context.environment.nodeVersion}`,\n      `Platform: ${context.environment.platform}`,\n      `Memory Usage: ${(context.environment.memoryUsage.heapUsed / 1024 / 1024).toFixed(2)}MB`,\n      '',\n      'üß™ TEST STATE',\n      '‚îÄ'.repeat(40),\n      `Assertions Made: ${context.testState.assertions}`,\n      `Test Duration: ${context.testState.duration}ms`,\n      '',\n    ];\n\n    // Add component state if available\n    if (context.componentState) {\n      report.push(\n        'üéØ COMPONENT STATE',\n        '‚îÄ'.repeat(40),\n        JSON.stringify(context.componentState, null, 2),\n        ''\n      );\n    }\n\n    // Add API calls if available\n    if (context.apiCalls && context.apiCalls.length > 0) {\n      report.push(\n        'üåê RECENT API CALLS',\n        '‚îÄ'.repeat(40)\n      );\n      \n      context.apiCalls.forEach((call, index) => {\n        report.push(\n          `${index + 1}. ${call.method} ${call.url}`,\n          `   Status: ${call.status || 'N/A'}`,\n          `   Duration: ${call.duration}ms`,\n          `   Time: ${call.timestamp.toISOString()}`,\n          ''\n        );\n      });\n    }\n\n    // Add DOM snapshot if available\n    if (context.domSnapshot) {\n      report.push(\n        'üñºÔ∏è  DOM SNAPSHOT',\n        '‚îÄ'.repeat(40),\n        context.domSnapshot,\n        ''\n      );\n    }\n\n    report.push('‚ïê'.repeat(80));\n    return report.join('\\n');\n  }\n\n  /**\n   * Save error report to file\n   */\n  async saveErrorReport(context: TestErrorContext): Promise<string> {\n    const report = this.generateErrorReport(context);\n    const filename = `test-error-${context.testName.replace(/[^a-zA-Z0-9]/g, '-')}-${Date.now()}.log`;\n    const filepath = `coverage/error-reports/${filename}`;\n\n    try {\n      // In a real implementation, would write to file system\n      console.log(`üíæ Error report saved to: ${filepath}`);\n      console.log(report);\n      return filepath;\n    } catch (error) {\n      console.error('Failed to save error report:', error);\n      return '';\n    }\n  }\n\n  /**\n   * Get recent API calls for context\n   */\n  private getRecentApiCalls(): ApiCallLog[] {\n    const fiveMinutesAgo = new Date(Date.now() - 5 * 60 * 1000);\n    return this.apiCallLogs.filter(call => call.timestamp > fiveMinutesAgo);\n  }\n\n  /**\n   * Capture DOM snapshot for debugging\n   */\n  private captureDomSnapshot(): string {\n    try {\n      // In browser environment, would capture actual DOM\n      if (typeof document !== 'undefined') {\n        return document.body.innerHTML;\n      }\n      return 'DOM not available (Node.js environment)';\n    } catch (error) {\n      return `Failed to capture DOM: ${error}`;\n    }\n  }\n\n  /**\n   * Get current assertion count\n   */\n  private getAssertionCount(): number {\n    try {\n      return expect.getState().assertionCalls || 0;\n    } catch {\n      return 0;\n    }\n  }\n\n  /**\n   * Get test duration (mock implementation)\n   */\n  private getTestDuration(): number {\n    // In real implementation, would track test start time\n    return 0;\n  }\n\n  /**\n   * Get retry count for a test\n   */\n  private getRetryCount(testName: string): number {\n    // In real implementation, would track retry attempts\n    return 0;\n  }\n\n  /**\n   * Clear all collected data\n   */\n  reset(): void {\n    this.errorContexts = [];\n    this.apiCallLogs = [];\n    this.componentStates.clear();\n  }\n\n  /**\n   * Get all error contexts\n   */\n  getErrorContexts(): TestErrorContext[] {\n    return [...this.errorContexts];\n  }\n}\n\n// Global instance\nexport const testErrorReporter = new TestErrorReporter();\n\n/**\n * Enhanced test wrapper with automatic error reporting\n */\nexport function withErrorReporting(testName: string, testFn: () => Promise<void> | void) {\n  return async () => {\n    try {\n      await testFn();\n    } catch (error) {\n      const context = testErrorReporter.collectErrorContext(\n        error as Error,\n        testName,\n        expect.getState().testPath || 'unknown'\n      );\n      \n      await testErrorReporter.saveErrorReport(context);\n      throw error; // Re-throw to maintain test failure\n    }\n  };\n}\n\n/**\n * Retry wrapper for flaky tests\n */\nexport function withRetry<T>(\n  operation: () => Promise<T>,\n  config: RetryConfig = {\n    maxRetries: 3,\n    retryDelay: 1000,\n    retryableErrors: ['timeout', 'network', 'ECONNRESET'],\n  }\n): Promise<T> {\n  return new Promise(async (resolve, reject) => {\n    let lastError: Error;\n    \n    for (let attempt = 0; attempt <= config.maxRetries; attempt++) {\n      try {\n        const result = await operation();\n        resolve(result);\n        return;\n      } catch (error) {\n        lastError = error as Error;\n        \n        // Check if error is retryable\n        const isRetryable = config.retryableErrors.some(pattern =>\n          lastError.message.toLowerCase().includes(pattern.toLowerCase())\n        );\n        \n        if (!isRetryable || attempt === config.maxRetries) {\n          break;\n        }\n        \n        console.log(`‚ö†Ô∏è  Retry attempt ${attempt + 1}/${config.maxRetries} for: ${lastError.message}`);\n        await new Promise(resolve => setTimeout(resolve, config.retryDelay));\n      }\n    }\n    \n    reject(lastError);\n  });\n}\n\n/**\n * Debug helper to log test state\n */\nexport function debugTestState(label: string, state: any): void {\n  console.log(`üêõ DEBUG [${label}]:`, JSON.stringify(state, null, 2));\n}\n\n/**\n * Performance-aware assertion wrapper\n */\nexport function performanceAssert<T>(\n  assertion: () => T,\n  maxDuration: number = 100,\n  label: string = 'assertion'\n): T {\n  const startTime = performance.now();\n  const result = assertion();\n  const duration = performance.now() - startTime;\n  \n  if (duration > maxDuration) {\n    console.warn(`‚ö†Ô∏è  Slow assertion detected: ${label} took ${duration.toFixed(2)}ms`);\n  }\n  \n  return result;\n}\n\n/**\n * Setup error reporting for a test suite\n */\nexport function setupErrorReporting() {\n  beforeEach(() => {\n    const testName = expect.getState().currentTestName || 'unknown';\n    console.log(`üß™ Starting test: ${testName}`);\n  });\n\n  afterEach(() => {\n    // Log any uncaught errors or warnings\n    const testName = expect.getState().currentTestName || 'unknown';\n    console.log(`‚úÖ Completed test: ${testName}`);\n  });\n\n  afterAll(() => {\n    testErrorReporter.reset();\n  });\n}"],"names":["debugTestState","performanceAssert","setupErrorReporting","testErrorReporter","withErrorReporting","withRetry","TestErrorReporter","collectErrorContext","error","testName","testFile","context","errorMessage","message","errorStack","stack","timestamp","Date","environment","nodeVersion","process","version","platform","memoryUsage","testState","assertions","getAssertionCount","duration","getTestDuration","retryCount","getRetryCount","componentState","componentStates","get","apiCalls","getRecentApiCalls","domSnapshot","captureDomSnapshot","errorContexts","push","logApiCall","call","apiCallLogs","length","slice","storeComponentState","state","set","JSON","parse","stringify","configureRetry","testPattern","config","retryConfigs","generateErrorReport","report","repeat","toISOString","heapUsed","toFixed","forEach","index","method","url","status","join","saveErrorReport","filename","replace","now","filepath","console","log","fiveMinutesAgo","filter","document","body","innerHTML","expect","getState","assertionCalls","reset","clear","getErrorContexts","Map","testFn","testPath","operation","maxRetries","retryDelay","retryableErrors","Promise","resolve","reject","lastError","attempt","result","isRetryable","some","pattern","toLowerCase","includes","setTimeout","label","assertion","maxDuration","startTime","performance","warn","beforeEach","currentTestName","afterEach","afterAll"],"mappings":"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"}