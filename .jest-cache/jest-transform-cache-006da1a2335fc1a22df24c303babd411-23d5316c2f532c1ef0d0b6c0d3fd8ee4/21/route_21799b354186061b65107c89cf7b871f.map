{"version":3,"names":["GET","cov_1npquit3yj","f","s","POST","csvImportService","_csvimportservice","CSVImportService","request","params","user","_server1","validateRequest","b","_server","NextResponse","json","error","status","resolvedParams","progress","getImportProgress","importId","userId","id","suggestions","getSuggestedResolutions","conflicts","console","body","requestSchema","_zod","z","object","resolutions","array","conflictId","string","action","enum","data","any","optional","parse","summary","resolveConflicts","ZodError","details","issues"],"sources":["/Users/stefanbekker/projects/fancy-planties/src/app/api/import/csv/[importId]/conflicts/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { validateRequest } from '@/lib/auth/server';\nimport { CSVImportService } from '@/lib/services/csv-import-service';\nimport { z } from 'zod';\n\nconst csvImportService = new CSVImportService();\n\n// GET /api/import/csv/[importId]/conflicts - Get suggested conflict resolutions\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: Promise<{ importId: string }> }\n) {\n  try {\n    const { user } = await validateRequest();\n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const resolvedParams = await params;\n    const progress = csvImportService.getImportProgress(resolvedParams.importId);\n    \n    if (!progress) {\n      return NextResponse.json({ error: 'Import not found' }, { status: 404 });\n    }\n\n    if (progress.userId !== user.id) {\n      return NextResponse.json({ error: 'Forbidden' }, { status: 403 });\n    }\n\n    const suggestions = csvImportService.getSuggestedResolutions(resolvedParams.importId);\n    \n    return NextResponse.json({ \n      conflicts: progress.conflicts,\n      suggestions \n    });\n\n  } catch (error) {\n    console.error('Get conflicts error:', error);\n    return NextResponse.json(\n      { error: 'Failed to get conflicts' },\n      { status: 500 }\n    );\n  }\n}\n\n// POST /api/import/csv/[importId]/conflicts - Resolve conflicts\nexport async function POST(\n  request: NextRequest,\n  { params }: { params: Promise<{ importId: string }> }\n) {\n  try {\n    const { user } = await validateRequest();\n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const resolvedParams = await params;\n    const progress = csvImportService.getImportProgress(resolvedParams.importId);\n    \n    if (!progress) {\n      return NextResponse.json({ error: 'Import not found' }, { status: 404 });\n    }\n\n    if (progress.userId !== user.id) {\n      return NextResponse.json({ error: 'Forbidden' }, { status: 403 });\n    }\n\n    const body = await request.json();\n    \n    // Validate request body\n    const requestSchema = z.object({\n      resolutions: z.array(z.object({\n        conflictId: z.string(),\n        action: z.enum(['skip', 'merge', 'create_new', 'manual_review']),\n        data: z.any().optional(),\n      })),\n    });\n\n    const { resolutions } = requestSchema.parse(body);\n\n    // Resolve conflicts\n    const summary = await csvImportService.resolveConflicts(resolvedParams.importId, resolutions);\n    \n    return NextResponse.json({ summary });\n\n  } catch (error) {\n    console.error('Resolve conflicts error:', error);\n    \n    if (error instanceof z.ZodError) {\n      return NextResponse.json(\n        { error: 'Validation error', details: error.issues },\n        { status: 400 }\n      );\n    }\n\n    return NextResponse.json(\n      { error: 'Failed to resolve conflicts' },\n      { status: 500 }\n    );\n  }\n}"],"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","ignoreList":[]}