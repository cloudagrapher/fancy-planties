a9f20e03d46c11f47fd998eda5a6a6be
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get GET () {
        return GET;
    },
    get POST () {
        return POST;
    }
});
const _server = require("next/server");
const _zod = require("zod");
const _plantinstances = require("../../../lib/db/queries/plant-instances");
const _plantschemas = require("../../../lib/validation/plant-schemas");
const _server1 = require("../../../lib/auth/server");
async function GET(request) {
    try {
        const { user } = await (0, _server1.validateRequest)();
        if (!user) {
            return _server.NextResponse.json({
                success: false,
                error: 'Unauthorized'
            }, {
                status: 401
            });
        }
        const { searchParams } = new URL(request.url);
        // Parse filter parameters
        const filterParams = {
            userId: user.id,
            location: searchParams.get('location') || undefined,
            plantId: searchParams.get('plantId') ? parseInt(searchParams.get('plantId'), 10) : undefined,
            isActive: searchParams.get('isActive') ? searchParams.get('isActive') === 'true' : undefined,
            overdueOnly: searchParams.get('overdueOnly') === 'true',
            dueSoonDays: searchParams.get('dueSoonDays') ? parseInt(searchParams.get('dueSoonDays'), 10) : undefined,
            createdAfter: searchParams.get('createdAfter') ? new Date(searchParams.get('createdAfter')) : undefined,
            createdBefore: searchParams.get('createdBefore') ? new Date(searchParams.get('createdBefore')) : undefined,
            lastFertilizedAfter: searchParams.get('lastFertilizedAfter') ? new Date(searchParams.get('lastFertilizedAfter')) : undefined,
            lastFertilizedBefore: searchParams.get('lastFertilizedBefore') ? new Date(searchParams.get('lastFertilizedBefore')) : undefined,
            limit: searchParams.get('limit') ? parseInt(searchParams.get('limit'), 10) : 20,
            offset: searchParams.get('offset') ? parseInt(searchParams.get('offset'), 10) : 0
        };
        // Validate filter parameters
        const validatedFilters = _plantschemas.plantInstanceFilterSchema.parse(filterParams);
        // Get plant instances with filters
        const result = await _plantinstances.PlantInstanceQueries.getWithFilters(validatedFilters);
        return _server.NextResponse.json(result);
    } catch (error) {
        console.error('Failed to get plant instances:', error);
        return _server.NextResponse.json({
            success: false,
            error: 'Internal server error'
        }, {
            status: 500
        });
    }
}
async function POST(request) {
    try {
        const { user } = await (0, _server1.validateRequest)();
        if (!user) {
            return _server.NextResponse.json({
                success: false,
                error: 'Unauthorized'
            }, {
                status: 401
            });
        }
        // Check if request is FormData or JSON
        const contentType = request.headers.get('content-type');
        let body;
        if (contentType?.includes('multipart/form-data')) {
            // Handle FormData (for file uploads)
            const formData = await request.formData();
            body = {};
            // Helper function to convert file to base64
            const fileToBase64 = async (file)=>{
                const bytes = await file.arrayBuffer();
                const buffer = Buffer.from(bytes);
                const base64 = buffer.toString('base64');
                return `data:${file.type};base64,${base64}`;
            };
            const imageFiles = [];
            const existingImages = [];
            // Extract form fields
            for (const [key, value] of formData.entries()){
                if (key.startsWith('imageFiles[')) {
                    // Handle new image files
                    if (value instanceof File) {
                        imageFiles.push(value);
                    }
                } else if (key.startsWith('existingImages[')) {
                    // Handle existing images
                    existingImages.push(value);
                } else {
                    // Convert form values to appropriate types
                    if (key === 'plantId') {
                        body[key] = parseInt(value, 10);
                    } else if (key === 'isActive') {
                        body[key] = value === 'true';
                    } else {
                        body[key] = value;
                    }
                }
            }
            // Convert new image files to base64
            const newImageBase64s = await Promise.all(imageFiles.map((file)=>fileToBase64(file)));
            // Combine existing images with new images
            body.images = [
                ...existingImages,
                ...newImageBase64s
            ];
        } else {
            // Handle JSON
            try {
                body = await request.json();
                if (!body || Object.keys(body).length === 0) {
                    return _server.NextResponse.json({
                        success: false,
                        error: 'Request body is required'
                    }, {
                        status: 400
                    });
                }
            } catch (jsonError) {
                return _server.NextResponse.json({
                    success: false,
                    error: 'Invalid JSON in request body'
                }, {
                    status: 400
                });
            }
        }
        // Add user ID to the request body and convert date strings to Date objects
        const instanceData = {
            ...body,
            userId: user.id,
            // Convert date strings to Date objects if they exist and are not empty
            lastFertilized: body.lastFertilized && body.lastFertilized !== '' ? new Date(body.lastFertilized) : null,
            lastRepot: body.lastRepot && body.lastRepot !== '' ? new Date(body.lastRepot) : null
        };
        // Validate the plant instance data
        let validatedData;
        try {
            validatedData = _plantschemas.createPlantInstanceSchema.parse(instanceData);
        } catch (validationError) {
            if (validationError instanceof _zod.z.ZodError) {
                return _server.NextResponse.json({
                    success: false,
                    error: 'Validation failed',
                    details: validationError.issues
                }, {
                    status: 400
                });
            }
            return _server.NextResponse.json({
                success: false,
                error: 'Validation failed',
                details: validationError instanceof Error ? validationError.message : 'Invalid data'
            }, {
                status: 400
            });
        }
        // Calculate initial fertilizer due date if schedule is provided
        if (validatedData.fertilizerSchedule && !validatedData.fertilizerDue) {
            const now = new Date();
            const scheduleMatch = validatedData.fertilizerSchedule.match(/(\d+)\s*(day|week|month)s?/i);
            if (scheduleMatch) {
                const [, amount, unit] = scheduleMatch;
                const dueDate = new Date(now);
                switch(unit.toLowerCase()){
                    case 'day':
                        dueDate.setDate(dueDate.getDate() + parseInt(amount, 10));
                        break;
                    case 'week':
                        dueDate.setDate(dueDate.getDate() + parseInt(amount, 10) * 7);
                        break;
                    case 'month':
                        dueDate.setMonth(dueDate.getMonth() + parseInt(amount, 10));
                        break;
                }
                validatedData.fertilizerDue = dueDate;
            }
        }
        // Create the plant instance
        const plantInstance = await _plantinstances.PlantInstanceQueries.create(validatedData);
        // Get the enhanced plant instance with plant data
        const enhancedInstance = await _plantinstances.PlantInstanceQueries.getEnhancedById(plantInstance.id);
        return _server.NextResponse.json({
            success: true,
            data: enhancedInstance
        }, {
            status: 201
        });
    } catch (error) {
        console.error('Failed to create plant instance:', error);
        if (error instanceof Error && error.message.includes('validation')) {
            return _server.NextResponse.json({
                success: false,
                error: 'Invalid plant instance data',
                details: error.message
            }, {
                status: 400
            });
        }
        return _server.NextResponse.json({
            success: false,
            error: 'Failed to create plant instance'
        }, {
            status: 500
        });
    }
}

//# sourceMappingURL=data:application/json;base64,