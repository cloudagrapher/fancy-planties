614f478ad542f60202c8735824ec061c
// Test utilities - main entry point for all test helpers
// Re-export all test utilities for easy importing
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get TEST_CONSTANTS () {
        return TEST_CONSTANTS;
    },
    get cleanupTest () {
        return cleanupTest;
    },
    get isCI () {
        return isCI;
    },
    get isTestEnvironment () {
        return isTestEnvironment;
    },
    get quickSetup () {
        return quickSetup;
    },
    get setupTest () {
        return setupTest;
    }
});
_export_star(require("./setup"), exports);
_export_star(require("./factories"), exports);
_export_star(require("./helpers"), exports);
_export_star(require("./mocks"), exports);
_export_star(require("./performance"), exports);
_export_star(require("./debugging"), exports);
function _export_star(from, to) {
    Object.keys(from).forEach(function(k) {
        if (k !== "default" && !Object.prototype.hasOwnProperty.call(to, k)) {
            Object.defineProperty(to, k, {
                enumerable: true,
                get: function() {
                    return from[k];
                }
            });
        }
    });
    return from;
}
const TEST_CONSTANTS = {
    DEFAULT_TIMEOUT: 15000,
    ANIMATION_TIMEOUT: 300,
    API_TIMEOUT: 5000,
    MOCK_USER_ID: 1,
    MOCK_SESSION_ID: 'test-session-123'
};
const isTestEnvironment = ()=>process.env.NODE_ENV === 'test';
const isCI = ()=>Boolean(process.env.CI);
const setupTest = ()=>{
    // Clear all mocks
    jest.clearAllMocks();
    // Reset DOM
    if (typeof document !== 'undefined') {
        document.body.innerHTML = '';
    }
    // Reset timers
    jest.clearAllTimers();
    // Reset factory counters
    const { resetAllFactoryCounters } = require('./factories');
    resetAllFactoryCounters();
    // Reset component mocks
    const { resetComponentMocks } = require('./mocks/component-mocks');
    resetComponentMocks();
    // Reset API mocks
    const { resetApiMocks } = require('./helpers/api-helpers');
    resetApiMocks();
};
const cleanupTest = ()=>{
    // Clear timers
    jest.clearAllTimers();
    // Restore all mocks
    jest.restoreAllMocks();
    // Reset service mocks
    const { resetServiceMocks } = require('./mocks/service-mocks');
    resetServiceMocks();
    // Reset test state
    const { resetTestState } = require('./helpers/render-helpers');
    resetTestState();
};
const quickSetup = {
    /**
   * Setup for component testing with authenticated user
   */ authenticatedComponent: ()=>{
        setupTest();
        const { createAuthenticatedTestUser } = require('./factories/user-factory');
        const { applyCommonMocks } = require('./mocks/component-mocks');
        applyCommonMocks();
        return createAuthenticatedTestUser();
    },
    /**
   * Setup for API testing with mocked responses
   */ apiTesting: ()=>{
        setupTest();
        const { applyAllAPIMocks } = require('./mocks/api-mocks');
        const { mockBrowserAPIs } = require('./mocks/service-mocks');
        mockBrowserAPIs();
        return applyAllAPIMocks();
    },
    /**
   * Setup for integration testing with full mocks
   */ integrationTesting: ()=>{
        setupTest();
        const { createAuthenticatedTestUser } = require('./factories/user-factory');
        const { applyCommonMocks } = require('./mocks/component-mocks');
        const { applyAllAPIMocks } = require('./mocks/api-mocks');
        const { applyAllServiceMocks } = require('./mocks/service-mocks');
        applyCommonMocks();
        applyAllServiceMocks();
        const apiMocks = applyAllAPIMocks();
        const { user, session } = createAuthenticatedTestUser();
        return {
            user,
            session,
            apiMocks
        };
    }
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9zdGVmYW5iZWtrZXIvcHJvamVjdHMvZmFuY3ktcGxhbnRpZXMvc3JjL3Rlc3QtdXRpbHMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gVGVzdCB1dGlsaXRpZXMgLSBtYWluIGVudHJ5IHBvaW50IGZvciBhbGwgdGVzdCBoZWxwZXJzXG5cbi8vIFJlLWV4cG9ydCBhbGwgdGVzdCB1dGlsaXRpZXMgZm9yIGVhc3kgaW1wb3J0aW5nXG5leHBvcnQgKiBmcm9tICcuL3NldHVwJztcbmV4cG9ydCAqIGZyb20gJy4vZmFjdG9yaWVzJztcbmV4cG9ydCAqIGZyb20gJy4vaGVscGVycyc7XG5leHBvcnQgKiBmcm9tICcuL21vY2tzJztcbmV4cG9ydCAqIGZyb20gJy4vcGVyZm9ybWFuY2UnO1xuZXhwb3J0ICogZnJvbSAnLi9kZWJ1Z2dpbmcnO1xuXG4vLyBDb21tb24gdGVzdCBwYXR0ZXJucyBhbmQgdXRpbGl0aWVzXG5leHBvcnQgY29uc3QgVEVTVF9DT05TVEFOVFMgPSB7XG4gIERFRkFVTFRfVElNRU9VVDogMTUwMDAsXG4gIEFOSU1BVElPTl9USU1FT1VUOiAzMDAsXG4gIEFQSV9USU1FT1VUOiA1MDAwLFxuICBNT0NLX1VTRVJfSUQ6IDEsXG4gIE1PQ0tfU0VTU0lPTl9JRDogJ3Rlc3Qtc2Vzc2lvbi0xMjMnLFxufTtcblxuLy8gVGVzdCBlbnZpcm9ubWVudCBoZWxwZXJzXG5leHBvcnQgY29uc3QgaXNUZXN0RW52aXJvbm1lbnQgPSAoKSA9PiBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Rlc3QnO1xuZXhwb3J0IGNvbnN0IGlzQ0kgPSAoKSA9PiBCb29sZWFuKHByb2Nlc3MuZW52LkNJKTtcblxuLy8gQ29tcHJlaGVuc2l2ZSB0ZXN0IHNldHVwIGZ1bmN0aW9uXG5leHBvcnQgY29uc3Qgc2V0dXBUZXN0ID0gKCkgPT4ge1xuICAvLyBDbGVhciBhbGwgbW9ja3NcbiAgamVzdC5jbGVhckFsbE1vY2tzKCk7XG4gIFxuICAvLyBSZXNldCBET01cbiAgaWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBkb2N1bWVudC5ib2R5LmlubmVySFRNTCA9ICcnO1xuICB9XG4gIFxuICAvLyBSZXNldCB0aW1lcnNcbiAgamVzdC5jbGVhckFsbFRpbWVycygpO1xuICBcbiAgLy8gUmVzZXQgZmFjdG9yeSBjb3VudGVyc1xuICBjb25zdCB7IHJlc2V0QWxsRmFjdG9yeUNvdW50ZXJzIH0gPSByZXF1aXJlKCcuL2ZhY3RvcmllcycpO1xuICByZXNldEFsbEZhY3RvcnlDb3VudGVycygpO1xuICBcbiAgLy8gUmVzZXQgY29tcG9uZW50IG1vY2tzXG4gIGNvbnN0IHsgcmVzZXRDb21wb25lbnRNb2NrcyB9ID0gcmVxdWlyZSgnLi9tb2Nrcy9jb21wb25lbnQtbW9ja3MnKTtcbiAgcmVzZXRDb21wb25lbnRNb2NrcygpO1xuICBcbiAgLy8gUmVzZXQgQVBJIG1vY2tzXG4gIGNvbnN0IHsgcmVzZXRBcGlNb2NrcyB9ID0gcmVxdWlyZSgnLi9oZWxwZXJzL2FwaS1oZWxwZXJzJyk7XG4gIHJlc2V0QXBpTW9ja3MoKTtcbn07XG5cbi8vIENvbXByZWhlbnNpdmUgdGVzdCBjbGVhbnVwIGZ1bmN0aW9uXG5leHBvcnQgY29uc3QgY2xlYW51cFRlc3QgPSAoKSA9PiB7XG4gIC8vIENsZWFyIHRpbWVyc1xuICBqZXN0LmNsZWFyQWxsVGltZXJzKCk7XG4gIFxuICAvLyBSZXN0b3JlIGFsbCBtb2Nrc1xuICBqZXN0LnJlc3RvcmVBbGxNb2NrcygpO1xuICBcbiAgLy8gUmVzZXQgc2VydmljZSBtb2Nrc1xuICBjb25zdCB7IHJlc2V0U2VydmljZU1vY2tzIH0gPSByZXF1aXJlKCcuL21vY2tzL3NlcnZpY2UtbW9ja3MnKTtcbiAgcmVzZXRTZXJ2aWNlTW9ja3MoKTtcbiAgXG4gIC8vIFJlc2V0IHRlc3Qgc3RhdGVcbiAgY29uc3QgeyByZXNldFRlc3RTdGF0ZSB9ID0gcmVxdWlyZSgnLi9oZWxwZXJzL3JlbmRlci1oZWxwZXJzJyk7XG4gIHJlc2V0VGVzdFN0YXRlKCk7XG59O1xuXG4vLyBRdWljayBzZXR1cCBmb3IgY29tbW9uIHRlc3Qgc2NlbmFyaW9zXG5leHBvcnQgY29uc3QgcXVpY2tTZXR1cCA9IHtcbiAgLyoqXG4gICAqIFNldHVwIGZvciBjb21wb25lbnQgdGVzdGluZyB3aXRoIGF1dGhlbnRpY2F0ZWQgdXNlclxuICAgKi9cbiAgYXV0aGVudGljYXRlZENvbXBvbmVudDogKCkgPT4ge1xuICAgIHNldHVwVGVzdCgpO1xuICAgIGNvbnN0IHsgY3JlYXRlQXV0aGVudGljYXRlZFRlc3RVc2VyIH0gPSByZXF1aXJlKCcuL2ZhY3Rvcmllcy91c2VyLWZhY3RvcnknKTtcbiAgICBjb25zdCB7IGFwcGx5Q29tbW9uTW9ja3MgfSA9IHJlcXVpcmUoJy4vbW9ja3MvY29tcG9uZW50LW1vY2tzJyk7XG4gICAgXG4gICAgYXBwbHlDb21tb25Nb2NrcygpO1xuICAgIHJldHVybiBjcmVhdGVBdXRoZW50aWNhdGVkVGVzdFVzZXIoKTtcbiAgfSxcblxuICAvKipcbiAgICogU2V0dXAgZm9yIEFQSSB0ZXN0aW5nIHdpdGggbW9ja2VkIHJlc3BvbnNlc1xuICAgKi9cbiAgYXBpVGVzdGluZzogKCkgPT4ge1xuICAgIHNldHVwVGVzdCgpO1xuICAgIGNvbnN0IHsgYXBwbHlBbGxBUElNb2NrcyB9ID0gcmVxdWlyZSgnLi9tb2Nrcy9hcGktbW9ja3MnKTtcbiAgICBjb25zdCB7IG1vY2tCcm93c2VyQVBJcyB9ID0gcmVxdWlyZSgnLi9tb2Nrcy9zZXJ2aWNlLW1vY2tzJyk7XG4gICAgXG4gICAgbW9ja0Jyb3dzZXJBUElzKCk7XG4gICAgcmV0dXJuIGFwcGx5QWxsQVBJTW9ja3MoKTtcbiAgfSxcblxuICAvKipcbiAgICogU2V0dXAgZm9yIGludGVncmF0aW9uIHRlc3Rpbmcgd2l0aCBmdWxsIG1vY2tzXG4gICAqL1xuICBpbnRlZ3JhdGlvblRlc3Rpbmc6ICgpID0+IHtcbiAgICBzZXR1cFRlc3QoKTtcbiAgICBjb25zdCB7IGNyZWF0ZUF1dGhlbnRpY2F0ZWRUZXN0VXNlciB9ID0gcmVxdWlyZSgnLi9mYWN0b3JpZXMvdXNlci1mYWN0b3J5Jyk7XG4gICAgY29uc3QgeyBhcHBseUNvbW1vbk1vY2tzIH0gPSByZXF1aXJlKCcuL21vY2tzL2NvbXBvbmVudC1tb2NrcycpO1xuICAgIGNvbnN0IHsgYXBwbHlBbGxBUElNb2NrcyB9ID0gcmVxdWlyZSgnLi9tb2Nrcy9hcGktbW9ja3MnKTtcbiAgICBjb25zdCB7IGFwcGx5QWxsU2VydmljZU1vY2tzIH0gPSByZXF1aXJlKCcuL21vY2tzL3NlcnZpY2UtbW9ja3MnKTtcbiAgICBcbiAgICBhcHBseUNvbW1vbk1vY2tzKCk7XG4gICAgYXBwbHlBbGxTZXJ2aWNlTW9ja3MoKTtcbiAgICBjb25zdCBhcGlNb2NrcyA9IGFwcGx5QWxsQVBJTW9ja3MoKTtcbiAgICBjb25zdCB7IHVzZXIsIHNlc3Npb24gfSA9IGNyZWF0ZUF1dGhlbnRpY2F0ZWRUZXN0VXNlcigpO1xuICAgIFxuICAgIHJldHVybiB7IHVzZXIsIHNlc3Npb24sIGFwaU1vY2tzIH07XG4gIH0sXG59OyJdLCJuYW1lcyI6WyJURVNUX0NPTlNUQU5UUyIsImNsZWFudXBUZXN0IiwiaXNDSSIsImlzVGVzdEVudmlyb25tZW50IiwicXVpY2tTZXR1cCIsInNldHVwVGVzdCIsIkRFRkFVTFRfVElNRU9VVCIsIkFOSU1BVElPTl9USU1FT1VUIiwiQVBJX1RJTUVPVVQiLCJNT0NLX1VTRVJfSUQiLCJNT0NLX1NFU1NJT05fSUQiLCJwcm9jZXNzIiwiZW52IiwiTk9ERV9FTlYiLCJCb29sZWFuIiwiQ0kiLCJqZXN0IiwiY2xlYXJBbGxNb2NrcyIsImRvY3VtZW50IiwiYm9keSIsImlubmVySFRNTCIsImNsZWFyQWxsVGltZXJzIiwicmVzZXRBbGxGYWN0b3J5Q291bnRlcnMiLCJyZXF1aXJlIiwicmVzZXRDb21wb25lbnRNb2NrcyIsInJlc2V0QXBpTW9ja3MiLCJyZXN0b3JlQWxsTW9ja3MiLCJyZXNldFNlcnZpY2VNb2NrcyIsInJlc2V0VGVzdFN0YXRlIiwiYXV0aGVudGljYXRlZENvbXBvbmVudCIsImNyZWF0ZUF1dGhlbnRpY2F0ZWRUZXN0VXNlciIsImFwcGx5Q29tbW9uTW9ja3MiLCJhcGlUZXN0aW5nIiwiYXBwbHlBbGxBUElNb2NrcyIsIm1vY2tCcm93c2VyQVBJcyIsImludGVncmF0aW9uVGVzdGluZyIsImFwcGx5QWxsU2VydmljZU1vY2tzIiwiYXBpTW9ja3MiLCJ1c2VyIiwic2Vzc2lvbiJdLCJtYXBwaW5ncyI6IkFBQUEseURBQXlEO0FBRXpELGtEQUFrRDs7Ozs7Ozs7Ozs7O1FBU3JDQTtlQUFBQTs7UUF1Q0FDO2VBQUFBOztRQTdCQUM7ZUFBQUE7O1FBREFDO2VBQUFBOztRQStDQUM7ZUFBQUE7O1FBM0NBQztlQUFBQTs7O3FCQXJCQztxQkFDQTtxQkFDQTtxQkFDQTtxQkFDQTtxQkFDQTs7Ozs7Ozs7Ozs7Ozs7QUFHUCxNQUFNTCxpQkFBaUI7SUFDNUJNLGlCQUFpQjtJQUNqQkMsbUJBQW1CO0lBQ25CQyxhQUFhO0lBQ2JDLGNBQWM7SUFDZEMsaUJBQWlCO0FBQ25CO0FBR08sTUFBTVAsb0JBQW9CLElBQU1RLFFBQVFDLEdBQUcsQ0FBQ0MsUUFBUSxLQUFLO0FBQ3pELE1BQU1YLE9BQU8sSUFBTVksUUFBUUgsUUFBUUMsR0FBRyxDQUFDRyxFQUFFO0FBR3pDLE1BQU1WLFlBQVk7SUFDdkIsa0JBQWtCO0lBQ2xCVyxLQUFLQyxhQUFhO0lBRWxCLFlBQVk7SUFDWixJQUFJLE9BQU9DLGFBQWEsYUFBYTtRQUNuQ0EsU0FBU0MsSUFBSSxDQUFDQyxTQUFTLEdBQUc7SUFDNUI7SUFFQSxlQUFlO0lBQ2ZKLEtBQUtLLGNBQWM7SUFFbkIseUJBQXlCO0lBQ3pCLE1BQU0sRUFBRUMsdUJBQXVCLEVBQUUsR0FBR0MsUUFBUTtJQUM1Q0Q7SUFFQSx3QkFBd0I7SUFDeEIsTUFBTSxFQUFFRSxtQkFBbUIsRUFBRSxHQUFHRCxRQUFRO0lBQ3hDQztJQUVBLGtCQUFrQjtJQUNsQixNQUFNLEVBQUVDLGFBQWEsRUFBRSxHQUFHRixRQUFRO0lBQ2xDRTtBQUNGO0FBR08sTUFBTXhCLGNBQWM7SUFDekIsZUFBZTtJQUNmZSxLQUFLSyxjQUFjO0lBRW5CLG9CQUFvQjtJQUNwQkwsS0FBS1UsZUFBZTtJQUVwQixzQkFBc0I7SUFDdEIsTUFBTSxFQUFFQyxpQkFBaUIsRUFBRSxHQUFHSixRQUFRO0lBQ3RDSTtJQUVBLG1CQUFtQjtJQUNuQixNQUFNLEVBQUVDLGNBQWMsRUFBRSxHQUFHTCxRQUFRO0lBQ25DSztBQUNGO0FBR08sTUFBTXhCLGFBQWE7SUFDeEI7O0dBRUMsR0FDRHlCLHdCQUF3QjtRQUN0QnhCO1FBQ0EsTUFBTSxFQUFFeUIsMkJBQTJCLEVBQUUsR0FBR1AsUUFBUTtRQUNoRCxNQUFNLEVBQUVRLGdCQUFnQixFQUFFLEdBQUdSLFFBQVE7UUFFckNRO1FBQ0EsT0FBT0Q7SUFDVDtJQUVBOztHQUVDLEdBQ0RFLFlBQVk7UUFDVjNCO1FBQ0EsTUFBTSxFQUFFNEIsZ0JBQWdCLEVBQUUsR0FBR1YsUUFBUTtRQUNyQyxNQUFNLEVBQUVXLGVBQWUsRUFBRSxHQUFHWCxRQUFRO1FBRXBDVztRQUNBLE9BQU9EO0lBQ1Q7SUFFQTs7R0FFQyxHQUNERSxvQkFBb0I7UUFDbEI5QjtRQUNBLE1BQU0sRUFBRXlCLDJCQUEyQixFQUFFLEdBQUdQLFFBQVE7UUFDaEQsTUFBTSxFQUFFUSxnQkFBZ0IsRUFBRSxHQUFHUixRQUFRO1FBQ3JDLE1BQU0sRUFBRVUsZ0JBQWdCLEVBQUUsR0FBR1YsUUFBUTtRQUNyQyxNQUFNLEVBQUVhLG9CQUFvQixFQUFFLEdBQUdiLFFBQVE7UUFFekNRO1FBQ0FLO1FBQ0EsTUFBTUMsV0FBV0o7UUFDakIsTUFBTSxFQUFFSyxJQUFJLEVBQUVDLE9BQU8sRUFBRSxHQUFHVDtRQUUxQixPQUFPO1lBQUVRO1lBQU1DO1lBQVNGO1FBQVM7SUFDbkM7QUFDRiJ9