f5787b498688a3dfb2b5af374bfb3e37
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get DEFAULT_EMAIL_VERIFICATION_RATE_LIMIT_CONFIG () {
        return DEFAULT_EMAIL_VERIFICATION_RATE_LIMIT_CONFIG;
    },
    get EmailVerificationRateLimiter () {
        return EmailVerificationRateLimiter;
    },
    get emailVerificationRateLimiter () {
        return emailVerificationRateLimiter;
    },
    get logSecurityEvent () {
        return logSecurityEvent;
    }
});
require("server-only");
const DEFAULT_EMAIL_VERIFICATION_RATE_LIMIT_CONFIG = {
    // Max 5 verification attempts per code (handled by service)
    maxVerificationAttempts: 10,
    verificationWindowMs: 60 * 60 * 1000,
    // Max 5 resend requests per hour per email
    maxResendRequests: 5,
    resendWindowMs: 60 * 60 * 1000,
    resendCooldownMs: 60 * 1000,
    // Overall email verification activity per IP
    maxEmailVerificationRequests: 20,
    emailVerificationWindowMs: 60 * 60 * 1000
};
// In-memory stores (in production, use Redis)
const verificationAttemptStore = new Map();
const resendRequestStore = new Map();
const emailVerificationStore = new Map();
const resendCooldownStore = new Map(); // email -> last resend timestamp
const securityEvents = [];
function logSecurityEvent(event) {
    securityEvents.push(event);
    // Log to console (in production, send to monitoring service)
    console.warn(`[SECURITY] ${event.type}:`, {
        identifier: event.identifier,
        email: event.email,
        timestamp: new Date(event.timestamp).toISOString(),
        details: event.details
    });
    // Keep only last 1000 events in memory
    if (securityEvents.length > 1000) {
        securityEvents.splice(0, securityEvents.length - 1000);
    }
}
// Generic rate limiting function
function checkRateLimit(store, identifier, maxRequests, windowMs) {
    const now = Date.now();
    // Clean up expired entries
    for (const [key, entry] of store.entries()){
        if (entry.resetTime < now) {
            store.delete(key);
        }
    }
    const entry = store.get(identifier);
    if (!entry || entry.resetTime < now) {
        // New window or expired window
        const resetTime = now + windowMs;
        store.set(identifier, {
            count: 1,
            resetTime,
            firstAttempt: now
        });
        return {
            allowed: true,
            remaining: maxRequests - 1,
            resetTime
        };
    }
    if (entry.count >= maxRequests) {
        // Rate limit exceeded
        const retryAfter = Math.ceil((entry.resetTime - now) / 1000);
        return {
            allowed: false,
            remaining: 0,
            resetTime: entry.resetTime,
            retryAfter
        };
    }
    // Increment count
    entry.count++;
    store.set(identifier, entry);
    return {
        allowed: true,
        remaining: maxRequests - entry.count,
        resetTime: entry.resetTime
    };
}
class EmailVerificationRateLimiter {
    constructor(config = DEFAULT_EMAIL_VERIFICATION_RATE_LIMIT_CONFIG){
        this.config = config;
    }
    /**
   * Check rate limit for verification attempts
   */ checkVerificationAttempts(identifier, email) {
        const result = checkRateLimit(verificationAttemptStore, identifier, this.config.maxVerificationAttempts, this.config.verificationWindowMs);
        if (!result.allowed) {
            logSecurityEvent({
                type: 'RATE_LIMIT_EXCEEDED',
                identifier,
                email,
                timestamp: Date.now(),
                details: {
                    limitType: 'verification_attempts',
                    maxRequests: this.config.maxVerificationAttempts,
                    windowMs: this.config.verificationWindowMs
                }
            });
        }
        return result;
    }
    /**
   * Check rate limit for resend requests
   */ checkResendRequests(email, identifier) {
        const normalizedEmail = email.toLowerCase();
        // Check cooldown first
        const lastResendTime = resendCooldownStore.get(normalizedEmail);
        const now = Date.now();
        if (lastResendTime && now - lastResendTime < this.config.resendCooldownMs) {
            const cooldownRemaining = Math.ceil((this.config.resendCooldownMs - (now - lastResendTime)) / 1000);
            logSecurityEvent({
                type: 'RATE_LIMIT_EXCEEDED',
                identifier,
                email: normalizedEmail,
                timestamp: now,
                details: {
                    limitType: 'resend_cooldown',
                    cooldownMs: this.config.resendCooldownMs,
                    cooldownRemaining
                }
            });
            return {
                allowed: false,
                remaining: 0,
                resetTime: lastResendTime + this.config.resendCooldownMs,
                cooldownRemaining
            };
        }
        // Check hourly rate limit
        const result = checkRateLimit(resendRequestStore, normalizedEmail, this.config.maxResendRequests, this.config.resendWindowMs);
        if (!result.allowed) {
            logSecurityEvent({
                type: 'RATE_LIMIT_EXCEEDED',
                identifier,
                email: normalizedEmail,
                timestamp: now,
                details: {
                    limitType: 'resend_requests',
                    maxRequests: this.config.maxResendRequests,
                    windowMs: this.config.resendWindowMs
                }
            });
        }
        return result;
    }
    /**
   * Record successful resend to update cooldown
   */ recordResendSuccess(email) {
        const normalizedEmail = email.toLowerCase();
        resendCooldownStore.set(normalizedEmail, Date.now());
    }
    /**
   * Check overall email verification activity rate limit
   */ checkEmailVerificationActivity(identifier, email) {
        const result = checkRateLimit(emailVerificationStore, identifier, this.config.maxEmailVerificationRequests, this.config.emailVerificationWindowMs);
        if (!result.allowed) {
            logSecurityEvent({
                type: 'RATE_LIMIT_EXCEEDED',
                identifier,
                email,
                timestamp: Date.now(),
                details: {
                    limitType: 'email_verification_activity',
                    maxRequests: this.config.maxEmailVerificationRequests,
                    windowMs: this.config.emailVerificationWindowMs
                }
            });
        }
        return result;
    }
    /**
   * Detect suspicious activity patterns
   */ detectSuspiciousActivity(identifier, email) {
        const now = Date.now();
        const oneHour = 60 * 60 * 1000;
        // Check for rapid-fire attempts from same IP
        const verificationEntry = verificationAttemptStore.get(identifier);
        if (verificationEntry && verificationEntry.count >= 8) {
            const timeSpan = now - verificationEntry.firstAttempt;
            if (timeSpan < 10 * 60 * 1000) {
                logSecurityEvent({
                    type: 'SUSPICIOUS_ACTIVITY',
                    identifier,
                    email,
                    timestamp: now,
                    details: {
                        pattern: 'rapid_verification_attempts',
                        attempts: verificationEntry.count,
                        timeSpanMs: timeSpan
                    }
                });
                return true;
            }
        }
        // Check for multiple email addresses from same IP
        const recentEvents = securityEvents.filter((event)=>event.identifier === identifier && event.timestamp > now - oneHour && event.email);
        const uniqueEmails = new Set(recentEvents.map((event)=>event.email));
        if (uniqueEmails.size >= 5) {
            logSecurityEvent({
                type: 'SUSPICIOUS_ACTIVITY',
                identifier,
                email,
                timestamp: now,
                details: {
                    pattern: 'multiple_email_addresses',
                    uniqueEmails: uniqueEmails.size,
                    timeSpanMs: oneHour
                }
            });
            return true;
        }
        return false;
    }
    /**
   * Get security events for monitoring
   */ getSecurityEvents(since) {
        const cutoff = since || Date.now() - 24 * 60 * 60 * 1000; // Last 24 hours
        return securityEvents.filter((event)=>event.timestamp >= cutoff);
    }
    /**
   * Clean up expired data
   */ cleanup() {
        const now = Date.now();
        const oneDayAgo = now - 24 * 60 * 60 * 1000;
        // Clean up rate limit stores
        for (const store of [
            verificationAttemptStore,
            resendRequestStore,
            emailVerificationStore
        ]){
            for (const [key, entry] of store.entries()){
                if (entry.resetTime < now) {
                    store.delete(key);
                }
            }
        }
        // Clean up cooldown store
        for (const [email, timestamp] of resendCooldownStore.entries()){
            if (timestamp < oneDayAgo) {
                resendCooldownStore.delete(email);
            }
        }
        // Clean up old security events
        const cutoffIndex = securityEvents.findIndex((event)=>event.timestamp >= oneDayAgo);
        if (cutoffIndex > 0) {
            securityEvents.splice(0, cutoffIndex);
        }
    }
    /**
   * Get rate limit statistics
   */ getStats() {
        return {
            verificationAttempts: verificationAttemptStore.size,
            resendRequests: resendRequestStore.size,
            emailVerificationActivity: emailVerificationStore.size,
            resendCooldowns: resendCooldownStore.size,
            securityEvents: securityEvents.length
        };
    }
}
const emailVerificationRateLimiter = new EmailVerificationRateLimiter();
// Cleanup job - run every hour (but not during tests)
if (process.env.NODE_ENV !== 'test') {
    setInterval(()=>{
        emailVerificationRateLimiter.cleanup();
    }, 60 * 60 * 1000);
}

//# sourceMappingURL=data:application/json;base64,