{"version":3,"sources":["/Users/stefanbekker/projects/fancy-planties/src/lib/db/queries/plants.ts"],"sourcesContent":["import { eq, ilike, or, and, desc, sql } from 'drizzle-orm';\nimport { db } from '../index';\nimport { plants, type Plant, type NewPlant } from '../schema';\n\n// Plant taxonomy CRUD operations\nexport class PlantQueries {\n  // Create a new plant taxonomy entry\n  static async create(plantData: NewPlant): Promise<Plant> {\n    try {\n      const [plant] = await db.insert(plants).values(plantData).returning();\n      return plant;\n    } catch (error) {\n      console.error('Failed to create plant:', error);\n      throw new Error('Failed to create plant');\n    }\n  }\n\n  // Get plant by ID\n  static async getById(id: number): Promise<Plant | null> {\n    try {\n      const [plant] = await db.select().from(plants).where(eq(plants.id, id));\n      return plant || null;\n    } catch (error) {\n      console.error('Failed to get plant by ID:', error);\n      throw new Error('Failed to get plant');\n    }\n  }\n\n  // Search plants by taxonomy or common name (fuzzy search)\n  static async search(query: string, limit: number = 20): Promise<Plant[]> {\n    try {\n      const searchTerm = `%${query.toLowerCase()}%`;\n      \n      return await db\n        .select()\n        .from(plants)\n        .where(\n          or(\n            ilike(plants.family, searchTerm),\n            ilike(plants.genus, searchTerm),\n            ilike(plants.species, searchTerm),\n            ilike(plants.cultivar, searchTerm),\n            ilike(plants.commonName, searchTerm)\n          )\n        )\n        .orderBy(desc(plants.isVerified), plants.commonName)\n        .limit(limit);\n    } catch (error) {\n      console.error('Failed to search plants:', error);\n      throw new Error('Failed to search plants');\n    }\n  }\n\n  // Get all plants with pagination\n  static async getAll(offset: number = 0, limit: number = 50): Promise<Plant[]> {\n    try {\n      return await db\n        .select()\n        .from(plants)\n        .orderBy(desc(plants.isVerified), plants.commonName)\n        .offset(offset)\n        .limit(limit);\n    } catch (error) {\n      console.error('Failed to get plants:', error);\n      throw new Error('Failed to get plants');\n    }\n  }\n\n  // Get plants by family\n  static async getByFamily(family: string): Promise<Plant[]> {\n    try {\n      return await db\n        .select()\n        .from(plants)\n        .where(eq(plants.family, family))\n        .orderBy(plants.genus, plants.species);\n    } catch (error) {\n      console.error('Failed to get plants by family:', error);\n      throw new Error('Failed to get plants by family');\n    }\n  }\n\n  // Check if plant taxonomy already exists (including cultivar)\n  static async taxonomyExists(family: string, genus: string, species: string, cultivar?: string): Promise<Plant | null> {\n    try {\n      const conditions = [\n        eq(plants.family, family),\n        eq(plants.genus, genus),\n        eq(plants.species, species)\n      ];\n      \n      // Add cultivar condition - both null or both matching\n      if (cultivar) {\n        conditions.push(eq(plants.cultivar, cultivar));\n      } else {\n        conditions.push(sql`${plants.cultivar} IS NULL`);\n      }\n      \n      const [plant] = await db\n        .select()\n        .from(plants)\n        .where(and(...conditions));\n      return plant || null;\n    } catch (error) {\n      console.error('Failed to check taxonomy existence:', error);\n      throw new Error('Failed to check taxonomy');\n    }\n  }\n\n  // Update plant\n  static async update(id: number, plantData: Partial<NewPlant>): Promise<Plant> {\n    try {\n      const [plant] = await db\n        .update(plants)\n        .set({ ...plantData, updatedAt: new Date() })\n        .where(eq(plants.id, id))\n        .returning();\n      \n      if (!plant) {\n        throw new Error('Plant not found');\n      }\n      \n      return plant;\n    } catch (error) {\n      console.error('Failed to update plant:', error);\n      throw new Error('Failed to update plant');\n    }\n  }\n\n  // Delete plant (only if no instances exist)\n  static async delete(id: number): Promise<boolean> {\n    try {\n      const result = await db.delete(plants).where(eq(plants.id, id));\n      return result.length > 0;\n    } catch (error) {\n      console.error('Failed to delete plant:', error);\n      throw new Error('Failed to delete plant');\n    }\n  }\n\n  // Get popular plants (most used in instances)\n  static async getPopular(limit: number = 10): Promise<Plant[]> {\n    try {\n      return await db\n        .select({\n          id: plants.id,\n          family: plants.family,\n          genus: plants.genus,\n          species: plants.species,\n          cultivar: plants.cultivar,\n          commonName: plants.commonName,\n          careInstructions: plants.careInstructions,\n          defaultImage: plants.defaultImage,\n          createdBy: plants.createdBy,\n          isVerified: plants.isVerified,\n          createdAt: plants.createdAt,\n          updatedAt: plants.updatedAt,\n        })\n        .from(plants)\n        .orderBy(desc(plants.isVerified), plants.commonName)\n        .limit(limit);\n    } catch (error) {\n      console.error('Failed to get popular plants:', error);\n      throw new Error('Failed to get popular plants');\n    }\n  }\n\n  // Full-text search using PostgreSQL's built-in search\n  static async fullTextSearch(query: string, limit: number = 20): Promise<Plant[]> {\n    try {\n      return await db\n        .select()\n        .from(plants)\n        .where(\n          sql`to_tsvector('english', ${plants.family} || ' ' || ${plants.genus} || ' ' || ${plants.species} || ' ' || COALESCE(${plants.cultivar}, '') || ' ' || ${plants.commonName}) @@ plainto_tsquery('english', ${query})`\n        )\n        .orderBy(desc(plants.isVerified), plants.commonName)\n        .limit(limit);\n    } catch (error) {\n      console.error('Failed to perform full-text search:', error);\n      // Fallback to regular search\n      return this.search(query, limit);\n    }\n  }\n}"],"names":["PlantQueries","create","plantData","plant","db","insert","plants","values","returning","error","console","Error","getById","id","select","from","where","eq","search","query","limit","searchTerm","toLowerCase","or","ilike","family","genus","species","cultivar","commonName","orderBy","desc","isVerified","getAll","offset","getByFamily","taxonomyExists","conditions","push","sql","and","update","set","updatedAt","Date","delete","result","length","getPopular","careInstructions","defaultImage","createdBy","createdAt","fullTextSearch"],"mappings":"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"}