ce8a3b8779d1a3d6de326892bdc9ff29
// Care Tracking API Endpoint Tests
// Tests POST /api/care, GET /api/care/history, GET /api/dashboard endpoints
"use strict";
// Mock the auth functions
jest.mock('@/lib/auth/server', ()=>({
        requireAuthSession: jest.fn(),
        validateRequest: jest.fn()
    }));
// Mock the care service
jest.mock('@/lib/services/care-service', ()=>({
        CareService: {
            logCareEvent: jest.fn(),
            quickCareLog: jest.fn(),
            getCareDashboard: jest.fn()
        }
    }));
// Mock care history queries
jest.mock('@/lib/db/queries/care-history', ()=>({
        CareHistoryQueries: {
            getCareHistoryForPlant: jest.fn()
        }
    }));
// Mock database and schema
jest.mock('@/lib/db', ()=>({
        db: {
            select: jest.fn().mockReturnThis(),
            from: jest.fn().mockReturnThis(),
            where: jest.fn().mockReturnThis()
        }
    }));
jest.mock('@/lib/db/schema', ()=>({
        plantInstances: {
            id: 'id',
            userId: 'userId',
            isActive: 'isActive',
            fertilizerDue: 'fertilizerDue',
            nickname: 'nickname'
        },
        propagations: {
            userId: 'userId',
            status: 'status'
        }
    }));
// Mock care validation
jest.mock('@/lib/validation/care-schemas', ()=>({
        careValidation: {
            validateCareForm: jest.fn(),
            validateQuickCareLog: jest.fn()
        }
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _server = require("next/server");
const _route = require("../../app/api/care/log/route");
const _route1 = require("../../app/api/care/quick-log/route");
const _route2 = require("../../app/api/care/history/[plantInstanceId]/route");
const _route3 = require("../../app/api/care/dashboard/route");
const _route4 = require("../../app/api/dashboard/route");
const _userfactory = require("../../test-utils/factories/user-factory.js");
const _plantfactory = require("../../test-utils/factories/plant-factory.js");
const _apihelpers = require("../../test-utils/helpers/api-helpers.js");
const _server1 = require("../../lib/auth/server");
const _careservice = require("../../lib/services/care-service");
const _carehistory = require("../../lib/db/queries/care-history");
const _careschemas = require("../../lib/validation/care-schemas");
const _db = require("../../lib/db");
describe('Care Tracking API Endpoints', ()=>{
    let testUser;
    let testSession;
    beforeEach(()=>{
        jest.clearAllMocks();
        (0, _apihelpers.resetApiMocks)();
        testUser = (0, _userfactory.createTestUser)();
        testSession = (0, _userfactory.createTestSession)(testUser);
        // Default auth mocks
        _server1.requireAuthSession.mockResolvedValue({
            user: testUser,
            session: testSession
        });
        _server1.validateRequest.mockResolvedValue({
            user: testUser,
            session: testSession
        });
    });
    afterEach(()=>{
        jest.restoreAllMocks();
    });
    describe('POST /api/care/log - Care record creation', ()=>{
        it('should create care record with valid data', async ()=>{
            // Arrange
            const testPlantInstance = (0, _plantfactory.createTestPlantInstance)({
                userId: testUser.id
            });
            const requestBody = {
                plantInstanceId: testPlantInstance.id,
                careType: 'watering',
                careDate: '2024-01-15T10:00:00.000Z',
                notes: 'Regular watering'
            };
            const validatedData = {
                ...requestBody,
                careDate: new Date(requestBody.careDate)
            };
            const createdCareRecord = (0, _plantfactory.createTestCareRecord)({
                ...validatedData,
                id: 1,
                userId: testUser.id
            });
            _careschemas.careValidation.validateCareForm.mockReturnValue({
                success: true,
                data: validatedData
            });
            _careservice.CareService.logCareEvent.mockResolvedValue({
                success: true,
                careHistory: createdCareRecord
            });
            const request = new _server.NextRequest('http://localhost:3000/api/care/log', {
                method: 'POST',
                body: JSON.stringify(requestBody),
                headers: {
                    'Content-Type': 'application/json'
                }
            });
            // Act
            const response = await (0, _route.POST)(request);
            const responseData = await response.json();
            // Assert
            expect(response.status).toBe(200);
            expect(responseData).toEqual(createdCareRecord);
            expect(_server1.requireAuthSession).toHaveBeenCalled();
            expect(_careschemas.careValidation.validateCareForm).toHaveBeenCalledWith(validatedData);
            expect(_careservice.CareService.logCareEvent).toHaveBeenCalledWith(testUser.id, validatedData);
        });
        it('should return validation error for invalid care data', async ()=>{
            // Arrange
            const requestBody = {
                plantInstanceId: 'invalid',
                careType: 'invalid_type',
                careDate: 'invalid_date'
            };
            _careschemas.careValidation.validateCareForm.mockReturnValue({
                success: false,
                error: {
                    issues: [
                        {
                            message: 'Plant instance ID must be a number'
                        },
                        {
                            message: 'Invalid care type'
                        },
                        {
                            message: 'Invalid date format'
                        }
                    ]
                }
            });
            const request = new _server.NextRequest('http://localhost:3000/api/care/log', {
                method: 'POST',
                body: JSON.stringify(requestBody),
                headers: {
                    'Content-Type': 'application/json'
                }
            });
            // Act
            const response = await (0, _route.POST)(request);
            const responseData = await response.json();
            // Assert
            expect(response.status).toBe(400);
            expect(responseData).toEqual({
                error: 'Plant instance ID must be a number'
            });
            expect(_careservice.CareService.logCareEvent).not.toHaveBeenCalled();
        });
        it('should return error when care service fails', async ()=>{
            // Arrange
            const requestBody = {
                plantInstanceId: 1,
                careType: 'watering',
                careDate: '2024-01-15T10:00:00.000Z'
            };
            _careschemas.careValidation.validateCareForm.mockReturnValue({
                success: true,
                data: {
                    ...requestBody,
                    careDate: new Date(requestBody.careDate)
                }
            });
            _careservice.CareService.logCareEvent.mockResolvedValue({
                success: false,
                error: 'Plant instance not found'
            });
            const request = new _server.NextRequest('http://localhost:3000/api/care/log', {
                method: 'POST',
                body: JSON.stringify(requestBody),
                headers: {
                    'Content-Type': 'application/json'
                }
            });
            // Act
            const response = await (0, _route.POST)(request);
            const responseData = await response.json();
            // Assert
            expect(response.status).toBe(400);
            expect(responseData).toEqual({
                error: 'Plant instance not found'
            });
        });
        it('should return unauthorized error when user not authenticated', async ()=>{
            // Arrange
            _server1.requireAuthSession.mockRejectedValue(new Error('Unauthorized'));
            const request = new _server.NextRequest('http://localhost:3000/api/care/log', {
                method: 'POST',
                body: JSON.stringify({}),
                headers: {
                    'Content-Type': 'application/json'
                }
            });
            // Act
            const response = await (0, _route.POST)(request);
            const responseData = await response.json();
            // Assert
            expect(response.status).toBe(500);
            expect(responseData).toEqual({
                error: 'Failed to log care event'
            });
            expect(_careservice.CareService.logCareEvent).not.toHaveBeenCalled();
        });
        it('should handle malformed JSON request', async ()=>{
            // Arrange
            const request = new _server.NextRequest('http://localhost:3000/api/care/log', {
                method: 'POST',
                body: 'invalid json',
                headers: {
                    'Content-Type': 'application/json'
                }
            });
            // Act
            const response = await (0, _route.POST)(request);
            const responseData = await response.json();
            // Assert
            expect(response.status).toBe(500);
            expect(responseData).toEqual({
                error: 'Failed to log care event'
            });
            expect(_careservice.CareService.logCareEvent).not.toHaveBeenCalled();
        });
    });
    describe('POST /api/care/quick-log - Quick care logging', ()=>{
        it('should create quick care log with valid data', async ()=>{
            // Arrange
            const requestBody = {
                plantInstanceIds: [
                    1,
                    2,
                    3
                ],
                careType: 'watering',
                notes: 'Quick watering session'
            };
            const validatedData = {
                ...requestBody,
                careDate: expect.any(Date)
            };
            const careRecords = [
                (0, _plantfactory.createTestCareRecord)({
                    id: 1,
                    plantInstanceId: 1
                }),
                (0, _plantfactory.createTestCareRecord)({
                    id: 2,
                    plantInstanceId: 2
                }),
                (0, _plantfactory.createTestCareRecord)({
                    id: 3,
                    plantInstanceId: 3
                })
            ];
            _careschemas.careValidation.validateQuickCareLog.mockReturnValue({
                success: true,
                data: validatedData
            });
            _careservice.CareService.quickCareLog.mockResolvedValue({
                success: true,
                careHistory: careRecords
            });
            const request = new _server.NextRequest('http://localhost:3000/api/care/quick-log', {
                method: 'POST',
                body: JSON.stringify(requestBody),
                headers: {
                    'Content-Type': 'application/json'
                }
            });
            // Act
            const response = await (0, _route1.POST)(request);
            const responseData = await response.json();
            // Assert
            expect(response.status).toBe(200);
            expect(responseData).toEqual(careRecords);
            expect(_server1.requireAuthSession).toHaveBeenCalled();
            expect(_careschemas.careValidation.validateQuickCareLog).toHaveBeenCalledWith(validatedData);
            expect(_careservice.CareService.quickCareLog).toHaveBeenCalledWith(testUser.id, validatedData);
        });
        it('should return validation error with detailed issues', async ()=>{
            // Arrange
            const requestBody = {
                plantInstanceIds: [],
                careType: 'invalid'
            };
            _careschemas.careValidation.validateQuickCareLog.mockReturnValue({
                success: false,
                error: {
                    issues: [
                        {
                            message: 'At least one plant instance is required'
                        },
                        {
                            message: 'Invalid care type'
                        }
                    ]
                }
            });
            const request = new _server.NextRequest('http://localhost:3000/api/care/quick-log', {
                method: 'POST',
                body: JSON.stringify(requestBody),
                headers: {
                    'Content-Type': 'application/json'
                }
            });
            // Act
            const response = await (0, _route1.POST)(request);
            const responseData = await response.json();
            // Assert
            expect(response.status).toBe(400);
            expect(responseData).toEqual({
                error: 'At least one plant instance is required',
                details: [
                    {
                        message: 'At least one plant instance is required'
                    },
                    {
                        message: 'Invalid care type'
                    }
                ]
            });
            expect(_careservice.CareService.quickCareLog).not.toHaveBeenCalled();
        });
        it('should handle quick care service errors', async ()=>{
            // Arrange
            const requestBody = {
                plantInstanceIds: [
                    999
                ],
                careType: 'watering'
            };
            _careschemas.careValidation.validateQuickCareLog.mockReturnValue({
                success: true,
                data: {
                    ...requestBody,
                    careDate: new Date()
                }
            });
            _careservice.CareService.quickCareLog.mockResolvedValue({
                success: false,
                error: 'Some plant instances not found'
            });
            const request = new _server.NextRequest('http://localhost:3000/api/care/quick-log', {
                method: 'POST',
                body: JSON.stringify(requestBody),
                headers: {
                    'Content-Type': 'application/json'
                }
            });
            // Act
            const response = await (0, _route1.POST)(request);
            const responseData = await response.json();
            // Assert
            expect(response.status).toBe(400);
            expect(responseData).toEqual({
                error: 'Some plant instances not found'
            });
        });
    });
    describe('GET /api/care/history/[plantInstanceId] - Care history retrieval and filtering', ()=>{
        it('should return care history with default filters', async ()=>{
            // Arrange
            const plantInstanceId = 1;
            const careHistory = [
                (0, _plantfactory.createTestCareRecord)({
                    id: 1,
                    plantInstanceId,
                    careType: 'watering'
                }),
                (0, _plantfactory.createTestCareRecord)({
                    id: 2,
                    plantInstanceId,
                    careType: 'fertilizing'
                })
            ];
            _carehistory.CareHistoryQueries.getCareHistoryForPlant.mockResolvedValue(careHistory);
            const request = new _server.NextRequest(`http://localhost:3000/api/care/history/${plantInstanceId}`);
            const params = Promise.resolve({
                plantInstanceId: plantInstanceId.toString()
            });
            // Act
            const response = await (0, _route2.GET)(request, {
                params
            });
            const responseData = await response.json();
            // Assert
            expect(response.status).toBe(200);
            expect(responseData).toEqual(careHistory);
            expect(_server1.validateRequest).toHaveBeenCalled();
            expect(_carehistory.CareHistoryQueries.getCareHistoryForPlant).toHaveBeenCalledWith(plantInstanceId, testUser.id, {
                careType: undefined,
                startDate: undefined,
                endDate: undefined,
                limit: 50,
                offset: 0,
                sortBy: 'care_date',
                sortOrder: 'desc'
            });
        });
        it('should return care history with custom filters', async ()=>{
            // Arrange
            const plantInstanceId = 1;
            const careHistory = [
                (0, _plantfactory.createTestCareRecord)({
                    id: 1,
                    plantInstanceId,
                    careType: 'watering'
                })
            ];
            _carehistory.CareHistoryQueries.getCareHistoryForPlant.mockResolvedValue(careHistory);
            const queryParams = new URLSearchParams({
                careType: 'watering',
                startDate: '2024-01-01',
                endDate: '2024-01-31',
                limit: '10',
                offset: '5',
                sortBy: 'care_type',
                sortOrder: 'asc'
            });
            const request = new _server.NextRequest(`http://localhost:3000/api/care/history/${plantInstanceId}?${queryParams}`);
            const params = Promise.resolve({
                plantInstanceId: plantInstanceId.toString()
            });
            // Act
            const response = await (0, _route2.GET)(request, {
                params
            });
            const responseData = await response.json();
            // Assert
            expect(response.status).toBe(200);
            expect(responseData).toEqual(careHistory);
            expect(_carehistory.CareHistoryQueries.getCareHistoryForPlant).toHaveBeenCalledWith(plantInstanceId, testUser.id, {
                careType: 'watering',
                startDate: new Date('2024-01-01'),
                endDate: new Date('2024-01-31'),
                limit: 10,
                offset: 5,
                sortBy: 'care_type',
                sortOrder: 'asc'
            });
        });
        it('should return bad request error for invalid plant instance ID', async ()=>{
            // Arrange
            const request = new _server.NextRequest('http://localhost:3000/api/care/history/invalid');
            const params = Promise.resolve({
                plantInstanceId: 'invalid'
            });
            // Act
            const response = await (0, _route2.GET)(request, {
                params
            });
            const responseData = await response.json();
            // Assert
            expect(response.status).toBe(400);
            expect(responseData).toEqual({
                error: 'Invalid plant instance ID'
            });
            expect(_carehistory.CareHistoryQueries.getCareHistoryForPlant).not.toHaveBeenCalled();
        });
        it('should return unauthorized error when user not authenticated', async ()=>{
            // Arrange
            _server1.validateRequest.mockResolvedValue({
                user: null,
                session: null
            });
            const request = new _server.NextRequest('http://localhost:3000/api/care/history/1');
            const params = Promise.resolve({
                plantInstanceId: '1'
            });
            // Act
            const response = await (0, _route2.GET)(request, {
                params
            });
            const responseData = await response.json();
            // Assert
            expect(response.status).toBe(401);
            expect(responseData).toEqual({
                error: 'Unauthorized'
            });
            expect(_carehistory.CareHistoryQueries.getCareHistoryForPlant).not.toHaveBeenCalled();
        });
        it('should handle database errors gracefully', async ()=>{
            // Arrange
            _carehistory.CareHistoryQueries.getCareHistoryForPlant.mockRejectedValue(new Error('Database connection failed'));
            const request = new _server.NextRequest('http://localhost:3000/api/care/history/1');
            const params = Promise.resolve({
                plantInstanceId: '1'
            });
            // Act
            const response = await (0, _route2.GET)(request, {
                params
            });
            const responseData = await response.json();
            // Assert
            expect(response.status).toBe(500);
            expect(responseData).toEqual({
                error: 'Failed to get care history'
            });
        });
    });
    describe('GET /api/dashboard - Dashboard statistics calculation', ()=>{
        it('should return dashboard statistics with plant and propagation data', async ()=>{
            // Arrange
            const mockStats = {
                totalPlants: 15,
                activePlants: 12,
                careDueToday: 3,
                totalPropagations: 8,
                activePropagations: 5,
                successfulPropagations: 6,
                propagationSuccessRate: 75,
                fertilizerEvents: [
                    {
                        id: 'fertilizer-1',
                        plantName: 'Monstera Deliciosa',
                        plantId: '1',
                        date: '2024-01-15',
                        type: 'fertilize'
                    },
                    {
                        id: 'fertilizer-2',
                        plantName: 'Fiddle Leaf Fig',
                        plantId: '2',
                        date: '2024-01-16',
                        type: 'fertilize'
                    }
                ]
            };
            // Mock database queries
            _db.db.select.mockReturnValue({
                from: jest.fn().mockReturnValue({
                    where: jest.fn().mockResolvedValue([
                        {
                            totalPlants: 15,
                            activePlants: 12,
                            careDueToday: 3
                        }
                    ])
                })
            });
            // Mock propagation stats query
            _db.db.select.mockReturnValueOnce({
                from: jest.fn().mockReturnValue({
                    where: jest.fn().mockResolvedValue([
                        {
                            totalPlants: 15,
                            activePlants: 12,
                            careDueToday: 3
                        }
                    ])
                })
            }).mockReturnValueOnce({
                from: jest.fn().mockReturnValue({
                    where: jest.fn().mockResolvedValue([
                        {
                            totalPropagations: 8,
                            activePropagations: 5,
                            successfulPropagations: 6
                        }
                    ])
                })
            }).mockReturnValueOnce({
                from: jest.fn().mockReturnValue({
                    where: jest.fn().mockResolvedValue([
                        {
                            count: 8
                        }
                    ])
                })
            }).mockReturnValueOnce({
                from: jest.fn().mockReturnValue({
                    where: jest.fn().mockResolvedValue([
                        {
                            id: 1,
                            nickname: 'Monstera Deliciosa',
                            fertilizerDue: new Date('2024-01-15')
                        },
                        {
                            id: 2,
                            nickname: 'Fiddle Leaf Fig',
                            fertilizerDue: new Date('2024-01-16')
                        }
                    ])
                })
            });
            const request = new _server.NextRequest('http://localhost:3000/api/dashboard');
            // Act
            const response = await (0, _route4.GET)(request);
            const responseData = await response.json();
            // Assert
            expect(response.status).toBe(200);
            expect(responseData).toMatchObject({
                totalPlants: expect.any(Number),
                activePlants: expect.any(Number),
                careDueToday: expect.any(Number),
                totalPropagations: expect.any(Number),
                activePropagations: expect.any(Number),
                successfulPropagations: expect.any(Number),
                propagationSuccessRate: expect.any(Number),
                fertilizerEvents: expect.any(Array)
            });
            expect(_server1.validateRequest).toHaveBeenCalled();
        });
        it('should return unauthorized error when user not authenticated', async ()=>{
            // Arrange
            _server1.validateRequest.mockResolvedValue({
                user: null,
                session: null
            });
            const request = new _server.NextRequest('http://localhost:3000/api/dashboard');
            // Act
            const response = await (0, _route4.GET)(request);
            const responseData = await response.json();
            // Assert
            expect(response.status).toBe(401);
            expect(responseData).toEqual({
                error: 'Unauthorized'
            });
        });
        it('should handle database errors gracefully', async ()=>{
            // Arrange
            _db.db.select.mockImplementation(()=>{
                throw new Error('Database connection failed');
            });
            const request = new _server.NextRequest('http://localhost:3000/api/dashboard');
            // Act
            const response = await (0, _route4.GET)(request);
            const responseData = await response.json();
            // Assert
            expect(response.status).toBe(500);
            expect(responseData).toEqual({
                error: 'Failed to get dashboard stats'
            });
        });
    });
    describe('GET /api/care/dashboard - Care-specific dashboard', ()=>{
        it('should return care dashboard data', async ()=>{
            // Arrange
            const mockCareDashboard = {
                upcomingCare: [
                    {
                        plantInstanceId: 1,
                        plantName: 'Monstera',
                        careType: 'watering',
                        dueDate: '2024-01-15',
                        overdue: false
                    }
                ],
                recentCare: [
                    {
                        id: 1,
                        plantInstanceId: 1,
                        careType: 'watering',
                        careDate: '2024-01-10',
                        notes: 'Regular watering'
                    }
                ],
                careStats: {
                    totalCareEvents: 25,
                    thisWeekCare: 5,
                    overdueCare: 2
                }
            };
            _careservice.CareService.getCareDashboard.mockResolvedValue(mockCareDashboard);
            const request = new _server.NextRequest('http://localhost:3000/api/care/dashboard');
            // Act
            const response = await (0, _route3.GET)(request);
            const responseData = await response.json();
            // Assert
            expect(response.status).toBe(200);
            expect(responseData).toEqual(mockCareDashboard);
            expect(_server1.requireAuthSession).toHaveBeenCalled();
            expect(_careservice.CareService.getCareDashboard).toHaveBeenCalledWith(testUser.id);
        });
        it('should return unauthorized error when user not authenticated', async ()=>{
            // Arrange
            _server1.requireAuthSession.mockRejectedValue(new Error('Unauthorized'));
            const request = new _server.NextRequest('http://localhost:3000/api/care/dashboard');
            // Act
            const response = await (0, _route3.GET)(request);
            const responseData = await response.json();
            // Assert
            expect(response.status).toBe(500);
            expect(responseData).toEqual({
                error: 'Failed to fetch care dashboard'
            });
            expect(_careservice.CareService.getCareDashboard).not.toHaveBeenCalled();
        });
        it('should handle care service errors', async ()=>{
            // Arrange
            _careservice.CareService.getCareDashboard.mockRejectedValue(new Error('Care service failed'));
            const request = new _server.NextRequest('http://localhost:3000/api/care/dashboard');
            // Act
            const response = await (0, _route3.GET)(request);
            const responseData = await response.json();
            // Assert
            expect(response.status).toBe(500);
            expect(responseData).toEqual({
                error: 'Failed to fetch care dashboard'
            });
        });
    });
    describe('Care Tracking Integration Tests', ()=>{
        it('should handle complete care workflow: log -> history -> dashboard', async ()=>{
            const plantInstanceId = 1;
            // Step 1: Log care event
            const careData = {
                plantInstanceId,
                careType: 'watering',
                careDate: '2024-01-15T10:00:00.000Z',
                notes: 'Regular watering'
            };
            const careRecord = (0, _plantfactory.createTestCareRecord)({
                id: 1,
                ...careData,
                careDate: new Date(careData.careDate),
                userId: testUser.id
            });
            _careschemas.careValidation.validateCareForm.mockReturnValue({
                success: true,
                data: {
                    ...careData,
                    careDate: new Date(careData.careDate)
                }
            });
            _careservice.CareService.logCareEvent.mockResolvedValue({
                success: true,
                careHistory: careRecord
            });
            const logRequest = new _server.NextRequest('http://localhost:3000/api/care/log', {
                method: 'POST',
                body: JSON.stringify(careData),
                headers: {
                    'Content-Type': 'application/json'
                }
            });
            const logResponse = await (0, _route.POST)(logRequest);
            const logResponseData = await logResponse.json();
            expect(logResponse.status).toBe(200);
            expect(logResponseData).toEqual(careRecord);
            // Step 2: Get care history
            const careHistory = [
                careRecord
            ];
            _carehistory.CareHistoryQueries.getCareHistoryForPlant.mockResolvedValue(careHistory);
            const historyRequest = new _server.NextRequest(`http://localhost:3000/api/care/history/${plantInstanceId}`);
            const historyParams = Promise.resolve({
                plantInstanceId: plantInstanceId.toString()
            });
            const historyResponse = await (0, _route2.GET)(historyRequest, {
                params: historyParams
            });
            const historyResponseData = await historyResponse.json();
            expect(historyResponse.status).toBe(200);
            expect(historyResponseData).toEqual(careHistory);
            // Step 3: Get care dashboard
            const careDashboard = {
                upcomingCare: [],
                recentCare: [
                    careRecord
                ],
                careStats: {
                    totalCareEvents: 1,
                    thisWeekCare: 1,
                    overdueCare: 0
                }
            };
            _careservice.CareService.getCareDashboard.mockResolvedValue(careDashboard);
            const dashboardRequest = new _server.NextRequest('http://localhost:3000/api/care/dashboard');
            const dashboardResponse = await (0, _route3.GET)(dashboardRequest);
            const dashboardResponseData = await dashboardResponse.json();
            expect(dashboardResponse.status).toBe(200);
            expect(dashboardResponseData).toEqual(careDashboard);
            // Verify all services were called correctly
            expect(_careservice.CareService.logCareEvent).toHaveBeenCalledWith(testUser.id, expect.any(Object));
            expect(_carehistory.CareHistoryQueries.getCareHistoryForPlant).toHaveBeenCalledWith(plantInstanceId, testUser.id, expect.any(Object));
            expect(_careservice.CareService.getCareDashboard).toHaveBeenCalledWith(testUser.id);
        });
        it('should handle authorization across all care endpoints', async ()=>{
            // Test unauthorized access to all care endpoints
            _server1.requireAuthSession.mockRejectedValue(new Error('Unauthorized'));
            _server1.validateRequest.mockResolvedValue({
                user: null,
                session: null
            });
            // POST /api/care/log
            const logRequest = new _server.NextRequest('http://localhost:3000/api/care/log', {
                method: 'POST',
                body: JSON.stringify({}),
                headers: {
                    'Content-Type': 'application/json'
                }
            });
            const logResponse = await (0, _route.POST)(logRequest);
            expect(logResponse.status).toBe(500); // Service error due to auth failure
            // POST /api/care/quick-log
            const quickLogRequest = new _server.NextRequest('http://localhost:3000/api/care/quick-log', {
                method: 'POST',
                body: JSON.stringify({}),
                headers: {
                    'Content-Type': 'application/json'
                }
            });
            const quickLogResponse = await (0, _route1.POST)(quickLogRequest);
            expect(quickLogResponse.status).toBe(500); // Service error due to auth failure
            // GET /api/care/history/1
            const historyRequest = new _server.NextRequest('http://localhost:3000/api/care/history/1');
            const historyParams = Promise.resolve({
                plantInstanceId: '1'
            });
            const historyResponse = await (0, _route2.GET)(historyRequest, {
                params: historyParams
            });
            expect(historyResponse.status).toBe(401);
            // GET /api/care/dashboard
            const careDashboardRequest = new _server.NextRequest('http://localhost:3000/api/care/dashboard');
            const careDashboardResponse = await (0, _route3.GET)(careDashboardRequest);
            expect(careDashboardResponse.status).toBe(500); // Service error due to auth failure
            // GET /api/dashboard
            const dashboardRequest = new _server.NextRequest('http://localhost:3000/api/dashboard');
            const dashboardResponse = await (0, _route4.GET)(dashboardRequest);
            expect(dashboardResponse.status).toBe(401);
        });
    });
});

//# sourceMappingURL=data:application/json;base64,