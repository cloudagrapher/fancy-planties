6530973c18464fcc84e64195a0cac94a
"use strict";

/* istanbul ignore next */
function cov_1s09av2jvm() {
  var path = "/Users/stefanbekker/projects/fancy-planties/src/lib/db/queries/plant-taxonomy.ts";
  var hash = "80cd067007dfbf44fe5cb89618a57f67e2eacb81";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/stefanbekker/projects/fancy-planties/src/lib/db/queries/plant-taxonomy.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 39,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 27
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 27
        }
      },
      "6": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 28
        }
      },
      "7": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 34
        }
      },
      "8": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 36
        }
      },
      "9": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 36
        }
      },
      "10": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 31,
          column: 28
        }
      },
      "11": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 34,
          column: 27
        }
      },
      "12": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 37,
          column: 37
        }
      },
      "13": {
        start: {
          line: 40,
          column: 12
        },
        end: {
          line: 40,
          column: 25
        }
      },
      "14": {
        start: {
          line: 41,
          column: 16
        },
        end: {
          line: 41,
          column: 36
        }
      },
      "15": {
        start: {
          line: 42,
          column: 20
        },
        end: {
          line: 42,
          column: 42
        }
      },
      "16": {
        start: {
          line: 43,
          column: 20
        },
        end: {
          line: 43,
          column: 54
        }
      },
      "17": {
        start: {
          line: 46,
          column: 4
        },
        end: {
          line: 49,
          column: 5
        }
      },
      "18": {
        start: {
          line: 48,
          column: 8
        },
        end: {
          line: 48,
          column: 68
        }
      },
      "19": {
        start: {
          line: 54,
          column: 4
        },
        end: {
          line: 59,
          column: 8
        }
      },
      "20": {
        start: {
          line: 62,
          column: 22
        },
        end: {
          line: 65,
          column: 5
        }
      },
      "21": {
        start: {
          line: 66,
          column: 23
        },
        end: {
          line: 66,
          column: 88
        }
      },
      "22": {
        start: {
          line: 67,
          column: 4
        },
        end: {
          line: 67,
          column: 59
        }
      },
      "23": {
        start: {
          line: 70,
          column: 34
        },
        end: {
          line: 70,
          column: 38
        }
      },
      "24": {
        start: {
          line: 71,
          column: 27
        },
        end: {
          line: 74,
          column: 68
        }
      },
      "25": {
        start: {
          line: 75,
          column: 4
        },
        end: {
          line: 75,
          column: 85
        }
      },
      "26": {
        start: {
          line: 78,
          column: 18
        },
        end: {
          line: 88,
          column: 6
        }
      },
      "27": {
        start: {
          line: 89,
          column: 4
        },
        end: {
          line: 89,
          column: 71
        }
      },
      "28": {
        start: {
          line: 95,
          column: 23
        },
        end: {
          line: 95,
          column: 25
        }
      },
      "29": {
        start: {
          line: 97,
          column: 4
        },
        end: {
          line: 97,
          column: 56
        }
      },
      "30": {
        start: {
          line: 98,
          column: 4
        },
        end: {
          line: 100,
          column: 5
        }
      },
      "31": {
        start: {
          line: 99,
          column: 8
        },
        end: {
          line: 99,
          column: 93
        }
      },
      "32": {
        start: {
          line: 101,
          column: 4
        },
        end: {
          line: 103,
          column: 5
        }
      },
      "33": {
        start: {
          line: 102,
          column: 8
        },
        end: {
          line: 102,
          column: 91
        }
      },
      "34": {
        start: {
          line: 104,
          column: 4
        },
        end: {
          line: 106,
          column: 5
        }
      },
      "35": {
        start: {
          line: 105,
          column: 8
        },
        end: {
          line: 105,
          column: 91
        }
      },
      "36": {
        start: {
          line: 107,
          column: 4
        },
        end: {
          line: 109,
          column: 5
        }
      },
      "37": {
        start: {
          line: 108,
          column: 8
        },
        end: {
          line: 108,
          column: 89
        }
      },
      "38": {
        start: {
          line: 110,
          column: 24
        },
        end: {
          line: 110,
          column: 59
        }
      },
      "39": {
        start: {
          line: 112,
          column: 28
        },
        end: {
          line: 144,
          column: 156
        }
      },
      "40": {
        start: {
          line: 145,
          column: 4
        },
        end: {
          line: 151,
          column: 12
        }
      },
      "41": {
        start: {
          line: 145,
          column: 41
        },
        end: {
          line: 151,
          column: 9
        }
      },
      "42": {
        start: {
          line: 154,
          column: 22
        },
        end: {
          line: 154,
          column: 32
        }
      },
      "43": {
        start: {
          line: 155,
          column: 72
        },
        end: {
          line: 155,
          column: 84
        }
      },
      "44": {
        start: {
          line: 157,
          column: 29
        },
        end: {
          line: 157,
          column: 31
        }
      },
      "45": {
        start: {
          line: 158,
          column: 23
        },
        end: {
          line: 158,
          column: 49
        }
      },
      "46": {
        start: {
          line: 160,
          column: 4
        },
        end: {
          line: 160,
          column: 83
        }
      },
      "47": {
        start: {
          line: 161,
          column: 4
        },
        end: {
          line: 163,
          column: 149
        }
      },
      "48": {
        start: {
          line: 164,
          column: 4
        },
        end: {
          line: 166,
          column: 5
        }
      },
      "49": {
        start: {
          line: 165,
          column: 8
        },
        end: {
          line: 165,
          column: 84
        }
      },
      "50": {
        start: {
          line: 167,
          column: 4
        },
        end: {
          line: 169,
          column: 5
        }
      },
      "51": {
        start: {
          line: 168,
          column: 8
        },
        end: {
          line: 168,
          column: 108
        }
      },
      "52": {
        start: {
          line: 170,
          column: 4
        },
        end: {
          line: 172,
          column: 5
        }
      },
      "53": {
        start: {
          line: 171,
          column: 8
        },
        end: {
          line: 171,
          column: 106
        }
      },
      "54": {
        start: {
          line: 173,
          column: 4
        },
        end: {
          line: 175,
          column: 5
        }
      },
      "55": {
        start: {
          line: 174,
          column: 8
        },
        end: {
          line: 174,
          column: 106
        }
      },
      "56": {
        start: {
          line: 176,
          column: 24
        },
        end: {
          line: 176,
          column: 65
        }
      },
      "57": {
        start: {
          line: 178,
          column: 29
        },
        end: {
          line: 180,
          column: 46
        }
      },
      "58": {
        start: {
          line: 182,
          column: 20
        },
        end: {
          line: 221,
          column: 136
        }
      },
      "59": {
        start: {
          line: 222,
          column: 23
        },
        end: {
          line: 222,
          column: 45
        }
      },
      "60": {
        start: {
          line: 223,
          column: 4
        },
        end: {
          line: 231,
          column: 6
        }
      },
      "61": {
        start: {
          line: 224,
          column: 39
        },
        end: {
          line: 227,
          column: 13
        }
      },
      "62": {
        start: {
          line: 235,
          column: 24
        },
        end: {
          line: 252,
          column: 114
        }
      },
      "63": {
        start: {
          line: 254,
          column: 25
        },
        end: {
          line: 262,
          column: 245
        }
      },
      "64": {
        start: {
          line: 264,
          column: 26
        },
        end: {
          line: 271,
          column: 154
        }
      },
      "65": {
        start: {
          line: 272,
          column: 40
        },
        end: {
          line: 276,
          column: 6
        }
      },
      "66": {
        start: {
          line: 277,
          column: 4
        },
        end: {
          line: 281,
          column: 6
        }
      },
      "67": {
        start: {
          line: 279,
          column: 76
        },
        end: {
          line: 279,
          column: 81
        }
      },
      "68": {
        start: {
          line: 284,
          column: 19
        },
        end: {
          line: 284,
          column: 21
        }
      },
      "69": {
        start: {
          line: 285,
          column: 21
        },
        end: {
          line: 285,
          column: 23
        }
      },
      "70": {
        start: {
          line: 286,
          column: 24
        },
        end: {
          line: 291,
          column: 5
        }
      },
      "71": {
        start: {
          line: 293,
          column: 28
        },
        end: {
          line: 293,
          column: 419
        }
      },
      "72": {
        start: {
          line: 295,
          column: 32
        },
        end: {
          line: 295,
          column: 195
        }
      },
      "73": {
        start: {
          line: 297,
          column: 28
        },
        end: {
          line: 299,
          column: 160
        }
      },
      "74": {
        start: {
          line: 301,
          column: 26
        },
        end: {
          line: 303,
          column: 157
        }
      },
      "75": {
        start: {
          line: 304,
          column: 4
        },
        end: {
          line: 306,
          column: 5
        }
      },
      "76": {
        start: {
          line: 305,
          column: 8
        },
        end: {
          line: 305,
          column: 71
        }
      },
      "77": {
        start: {
          line: 307,
          column: 4
        },
        end: {
          line: 309,
          column: 5
        }
      },
      "78": {
        start: {
          line: 307,
          column: 71
        },
        end: {
          line: 307,
          column: 137
        }
      },
      "79": {
        start: {
          line: 308,
          column: 8
        },
        end: {
          line: 308,
          column: 69
        }
      },
      "80": {
        start: {
          line: 310,
          column: 4
        },
        end: {
          line: 310,
          column: 60
        }
      },
      "81": {
        start: {
          line: 310,
          column: 50
        },
        end: {
          line: 310,
          column: 58
        }
      },
      "82": {
        start: {
          line: 311,
          column: 4
        },
        end: {
          line: 311,
          column: 56
        }
      },
      "83": {
        start: {
          line: 311,
          column: 47
        },
        end: {
          line: 311,
          column: 54
        }
      },
      "84": {
        start: {
          line: 312,
          column: 4
        },
        end: {
          line: 325,
          column: 6
        }
      },
      "85": {
        start: {
          line: 317,
          column: 50
        },
        end: {
          line: 324,
          column: 13
        }
      },
      "86": {
        start: {
          line: 328,
          column: 22
        },
        end: {
          line: 333,
          column: 247
        }
      },
      "87": {
        start: {
          line: 335,
          column: 22
        },
        end: {
          line: 335,
          column: 31
        }
      },
      "88": {
        start: {
          line: 336,
          column: 4
        },
        end: {
          line: 360,
          column: 7
        }
      },
      "89": {
        start: {
          line: 337,
          column: 8
        },
        end: {
          line: 343,
          column: 9
        }
      },
      "90": {
        start: {
          line: 338,
          column: 12
        },
        end: {
          line: 342,
          column: 15
        }
      },
      "91": {
        start: {
          line: 344,
          column: 23
        },
        end: {
          line: 344,
          column: 49
        }
      },
      "92": {
        start: {
          line: 345,
          column: 8
        },
        end: {
          line: 345,
          column: 40
        }
      },
      "93": {
        start: {
          line: 346,
          column: 8
        },
        end: {
          line: 352,
          column: 9
        }
      },
      "94": {
        start: {
          line: 347,
          column: 12
        },
        end: {
          line: 351,
          column: 15
        }
      },
      "95": {
        start: {
          line: 353,
          column: 22
        },
        end: {
          line: 353,
          column: 51
        }
      },
      "96": {
        start: {
          line: 354,
          column: 8
        },
        end: {
          line: 354,
          column: 39
        }
      },
      "97": {
        start: {
          line: 355,
          column: 8
        },
        end: {
          line: 359,
          column: 11
        }
      },
      "98": {
        start: {
          line: 361,
          column: 4
        },
        end: {
          line: 366,
          column: 6
        }
      },
      "99": {
        start: {
          line: 362,
          column: 64
        },
        end: {
          line: 365,
          column: 13
        }
      },
      "100": {
        start: {
          line: 370,
          column: 28
        },
        end: {
          line: 372,
          column: 96
        }
      },
      "101": {
        start: {
          line: 373,
          column: 4
        },
        end: {
          line: 375,
          column: 5
        }
      },
      "102": {
        start: {
          line: 374,
          column: 8
        },
        end: {
          line: 374,
          column: 71
        }
      },
      "103": {
        start: {
          line: 377,
          column: 31
        },
        end: {
          line: 379,
          column: 93
        }
      },
      "104": {
        start: {
          line: 380,
          column: 4
        },
        end: {
          line: 382,
          column: 5
        }
      },
      "105": {
        start: {
          line: 381,
          column: 8
        },
        end: {
          line: 381,
          column: 74
        }
      },
      "106": {
        start: {
          line: 384,
          column: 28
        },
        end: {
          line: 386,
          column: 5
        }
      },
      "107": {
        start: {
          line: 387,
          column: 4
        },
        end: {
          line: 389,
          column: 5
        }
      },
      "108": {
        start: {
          line: 388,
          column: 8
        },
        end: {
          line: 388,
          column: 84
        }
      },
      "109": {
        start: {
          line: 390,
          column: 19
        },
        end: {
          line: 392,
          column: 6
        }
      },
      "110": {
        start: {
          line: 393,
          column: 4
        },
        end: {
          line: 393,
          column: 29
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        },
        loc: {
          start: {
            line: 12,
            column: 23
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 23
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 18,
            column: 4
          },
          end: {
            line: 18,
            column: 5
          }
        },
        loc: {
          start: {
            line: 18,
            column: 24
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 18
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 21,
            column: 4
          },
          end: {
            line: 21,
            column: 5
          }
        },
        loc: {
          start: {
            line: 21,
            column: 30
          },
          end: {
            line: 23,
            column: 5
          }
        },
        line: 21
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 24,
            column: 4
          },
          end: {
            line: 24,
            column: 5
          }
        },
        loc: {
          start: {
            line: 24,
            column: 32
          },
          end: {
            line: 26,
            column: 5
          }
        },
        line: 24
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 27,
            column: 4
          },
          end: {
            line: 27,
            column: 5
          }
        },
        loc: {
          start: {
            line: 27,
            column: 32
          },
          end: {
            line: 29,
            column: 5
          }
        },
        line: 27
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 30,
            column: 4
          },
          end: {
            line: 30,
            column: 5
          }
        },
        loc: {
          start: {
            line: 30,
            column: 24
          },
          end: {
            line: 32,
            column: 5
          }
        },
        line: 30
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 33,
            column: 4
          },
          end: {
            line: 33,
            column: 5
          }
        },
        loc: {
          start: {
            line: 33,
            column: 23
          },
          end: {
            line: 35,
            column: 5
          }
        },
        line: 33
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 36,
            column: 4
          },
          end: {
            line: 36,
            column: 5
          }
        },
        loc: {
          start: {
            line: 36,
            column: 33
          },
          end: {
            line: 38,
            column: 5
          }
        },
        line: 36
      },
      "10": {
        name: "buildPlantVisibilityFilter",
        decl: {
          start: {
            line: 45,
            column: 9
          },
          end: {
            line: 45,
            column: 35
          }
        },
        loc: {
          start: {
            line: 45,
            column: 51
          },
          end: {
            line: 60,
            column: 1
          }
        },
        line: 45
      },
      "11": {
        name: "createPlant",
        decl: {
          start: {
            line: 61,
            column: 15
          },
          end: {
            line: 61,
            column: 26
          }
        },
        loc: {
          start: {
            line: 61,
            column: 41
          },
          end: {
            line: 68,
            column: 1
          }
        },
        line: 61
      },
      "12": {
        name: "updatePlant",
        decl: {
          start: {
            line: 69,
            column: 15
          },
          end: {
            line: 69,
            column: 26
          }
        },
        loc: {
          start: {
            line: 69,
            column: 33
          },
          end: {
            line: 76,
            column: 1
          }
        },
        line: 69
      },
      "13": {
        name: "getPlantById",
        decl: {
          start: {
            line: 77,
            column: 15
          },
          end: {
            line: 77,
            column: 27
          }
        },
        loc: {
          start: {
            line: 77,
            column: 32
          },
          end: {
            line: 90,
            column: 1
          }
        },
        line: 77
      },
      "14": {
        name: "getPlantsWithStats",
        decl: {
          start: {
            line: 91,
            column: 15
          },
          end: {
            line: 91,
            column: 33
          }
        },
        loc: {
          start: {
            line: 94,
            column: 11
          },
          end: {
            line: 152,
            column: 1
          }
        },
        line: 94
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 145,
            column: 31
          },
          end: {
            line: 145,
            column: 32
          }
        },
        loc: {
          start: {
            line: 145,
            column: 41
          },
          end: {
            line: 151,
            column: 9
          }
        },
        line: 145
      },
      "16": {
        name: "searchPlants",
        decl: {
          start: {
            line: 153,
            column: 15
          },
          end: {
            line: 153,
            column: 27
          }
        },
        loc: {
          start: {
            line: 153,
            column: 56
          },
          end: {
            line: 232,
            column: 1
          }
        },
        line: 153
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 224,
            column: 28
          },
          end: {
            line: 224,
            column: 29
          }
        },
        loc: {
          start: {
            line: 224,
            column: 39
          },
          end: {
            line: 227,
            column: 13
          }
        },
        line: 224
      },
      "18": {
        name: "getQuickSelectPlants",
        decl: {
          start: {
            line: 233,
            column: 15
          },
          end: {
            line: 233,
            column: 35
          }
        },
        loc: {
          start: {
            line: 233,
            column: 44
          },
          end: {
            line: 282,
            column: 1
          }
        },
        line: 233
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 279,
            column: 29
          },
          end: {
            line: 279,
            column: 30
          }
        },
        loc: {
          start: {
            line: 279,
            column: 76
          },
          end: {
            line: 279,
            column: 81
          }
        },
        line: 279
      },
      "20": {
        name: "validatePlantTaxonomy",
        decl: {
          start: {
            line: 283,
            column: 15
          },
          end: {
            line: 283,
            column: 36
          }
        },
        loc: {
          start: {
            line: 283,
            column: 47
          },
          end: {
            line: 326,
            column: 1
          }
        },
        line: 283
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 307,
            column: 64
          },
          end: {
            line: 307,
            column: 65
          }
        },
        loc: {
          start: {
            line: 307,
            column: 71
          },
          end: {
            line: 307,
            column: 137
          }
        },
        line: 307
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 310,
            column: 45
          },
          end: {
            line: 310,
            column: 46
          }
        },
        loc: {
          start: {
            line: 310,
            column: 50
          },
          end: {
            line: 310,
            column: 58
          }
        },
        line: 310
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 311,
            column: 42
          },
          end: {
            line: 311,
            column: 43
          }
        },
        loc: {
          start: {
            line: 311,
            column: 47
          },
          end: {
            line: 311,
            column: 54
          }
        },
        line: 311
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 317,
            column: 40
          },
          end: {
            line: 317,
            column: 41
          }
        },
        loc: {
          start: {
            line: 317,
            column: 50
          },
          end: {
            line: 324,
            column: 13
          }
        },
        line: 317
      },
      "25": {
        name: "getTaxonomyHierarchy",
        decl: {
          start: {
            line: 327,
            column: 15
          },
          end: {
            line: 327,
            column: 35
          }
        },
        loc: {
          start: {
            line: 327,
            column: 38
          },
          end: {
            line: 367,
            column: 1
          }
        },
        line: 327
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 336,
            column: 22
          },
          end: {
            line: 336,
            column: 23
          }
        },
        loc: {
          start: {
            line: 336,
            column: 30
          },
          end: {
            line: 360,
            column: 5
          }
        },
        line: 336
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 362,
            column: 53
          },
          end: {
            line: 362,
            column: 54
          }
        },
        loc: {
          start: {
            line: 362,
            column: 64
          },
          end: {
            line: 365,
            column: 13
          }
        },
        line: 362
      },
      "28": {
        name: "deletePlant",
        decl: {
          start: {
            line: 368,
            column: 15
          },
          end: {
            line: 368,
            column: 26
          }
        },
        loc: {
          start: {
            line: 368,
            column: 39
          },
          end: {
            line: 394,
            column: 1
          }
        },
        line: 368
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 46,
            column: 4
          },
          end: {
            line: 49,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 46,
            column: 4
          },
          end: {
            line: 49,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 46
      },
      "1": {
        loc: {
          start: {
            line: 64,
            column: 19
          },
          end: {
            line: 64,
            column: 43
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 64,
            column: 19
          },
          end: {
            line: 64,
            column: 25
          }
        }, {
          start: {
            line: 64,
            column: 29
          },
          end: {
            line: 64,
            column: 43
          }
        }],
        line: 64
      },
      "2": {
        loc: {
          start: {
            line: 75,
            column: 11
          },
          end: {
            line: 75,
            column: 84
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 75,
            column: 26
          },
          end: {
            line: 75,
            column: 77
          }
        }, {
          start: {
            line: 75,
            column: 80
          },
          end: {
            line: 75,
            column: 84
          }
        }],
        line: 75
      },
      "3": {
        loc: {
          start: {
            line: 89,
            column: 11
          },
          end: {
            line: 89,
            column: 70
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 89,
            column: 19
          },
          end: {
            line: 89,
            column: 63
          }
        }, {
          start: {
            line: 89,
            column: 66
          },
          end: {
            line: 89,
            column: 70
          }
        }],
        line: 89
      },
      "4": {
        loc: {
          start: {
            line: 91,
            column: 34
          },
          end: {
            line: 94,
            column: 1
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 91,
            column: 43
          },
          end: {
            line: 94,
            column: 1
          }
        }],
        line: 91
      },
      "5": {
        loc: {
          start: {
            line: 98,
            column: 4
          },
          end: {
            line: 100,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 98,
            column: 4
          },
          end: {
            line: 100,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 98
      },
      "6": {
        loc: {
          start: {
            line: 101,
            column: 4
          },
          end: {
            line: 103,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 101,
            column: 4
          },
          end: {
            line: 103,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 101
      },
      "7": {
        loc: {
          start: {
            line: 104,
            column: 4
          },
          end: {
            line: 106,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 104,
            column: 4
          },
          end: {
            line: 106,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 104
      },
      "8": {
        loc: {
          start: {
            line: 107,
            column: 4
          },
          end: {
            line: 109,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 107,
            column: 4
          },
          end: {
            line: 109,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 107
      },
      "9": {
        loc: {
          start: {
            line: 128,
            column: 10
          },
          end: {
            line: 128,
            column: 89
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 128,
            column: 19
          },
          end: {
            line: 128,
            column: 64
          }
        }, {
          start: {
            line: 128,
            column: 67
          },
          end: {
            line: 128,
            column: 89
          }
        }],
        line: 128
      },
      "10": {
        loc: {
          start: {
            line: 133,
            column: 10
          },
          end: {
            line: 133,
            column: 89
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 133,
            column: 19
          },
          end: {
            line: 133,
            column: 64
          }
        }, {
          start: {
            line: 133,
            column: 67
          },
          end: {
            line: 133,
            column: 89
          }
        }],
        line: 133
      },
      "11": {
        loc: {
          start: {
            line: 138,
            column: 12
          },
          end: {
            line: 138,
            column: 91
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 138,
            column: 21
          },
          end: {
            line: 138,
            column: 66
          }
        }, {
          start: {
            line: 138,
            column: 69
          },
          end: {
            line: 138,
            column: 91
          }
        }],
        line: 138
      },
      "12": {
        loc: {
          start: {
            line: 141,
            column: 12
          },
          end: {
            line: 141,
            column: 91
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 141,
            column: 21
          },
          end: {
            line: 141,
            column: 66
          }
        }, {
          start: {
            line: 141,
            column: 69
          },
          end: {
            line: 141,
            column: 91
          }
        }],
        line: 141
      },
      "13": {
        loc: {
          start: {
            line: 144,
            column: 110
          },
          end: {
            line: 144,
            column: 128
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 144,
            column: 110
          },
          end: {
            line: 144,
            column: 122
          }
        }, {
          start: {
            line: 144,
            column: 126
          },
          end: {
            line: 144,
            column: 128
          }
        }],
        line: 144
      },
      "14": {
        loc: {
          start: {
            line: 144,
            column: 137
          },
          end: {
            line: 144,
            column: 155
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 144,
            column: 137
          },
          end: {
            line: 144,
            column: 150
          }
        }, {
          start: {
            line: 144,
            column: 154
          },
          end: {
            line: 144,
            column: 155
          }
        }],
        line: 144
      },
      "15": {
        loc: {
          start: {
            line: 150,
            column: 22
          },
          end: {
            line: 150,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 150,
            column: 22
          },
          end: {
            line: 150,
            column: 36
          }
        }, {
          start: {
            line: 150,
            column: 40
          },
          end: {
            line: 150,
            column: 49
          }
        }],
        line: 150
      },
      "16": {
        loc: {
          start: {
            line: 153,
            column: 42
          },
          end: {
            line: 153,
            column: 54
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 153,
            column: 52
          },
          end: {
            line: 153,
            column: 54
          }
        }],
        line: 153
      },
      "17": {
        loc: {
          start: {
            line: 155,
            column: 19
          },
          end: {
            line: 155,
            column: 29
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 155,
            column: 27
          },
          end: {
            line: 155,
            column: 29
          }
        }],
        line: 155
      },
      "18": {
        loc: {
          start: {
            line: 155,
            column: 31
          },
          end: {
            line: 155,
            column: 41
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 155,
            column: 40
          },
          end: {
            line: 155,
            column: 41
          }
        }],
        line: 155
      },
      "19": {
        loc: {
          start: {
            line: 155,
            column: 43
          },
          end: {
            line: 155,
            column: 67
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 155,
            column: 63
          },
          end: {
            line: 155,
            column: 67
          }
        }],
        line: 155
      },
      "20": {
        loc: {
          start: {
            line: 164,
            column: 4
          },
          end: {
            line: 166,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 164,
            column: 4
          },
          end: {
            line: 166,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 164
      },
      "21": {
        loc: {
          start: {
            line: 167,
            column: 4
          },
          end: {
            line: 169,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 167,
            column: 4
          },
          end: {
            line: 169,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 167
      },
      "22": {
        loc: {
          start: {
            line: 170,
            column: 4
          },
          end: {
            line: 172,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 170,
            column: 4
          },
          end: {
            line: 172,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 170
      },
      "23": {
        loc: {
          start: {
            line: 173,
            column: 4
          },
          end: {
            line: 175,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 173,
            column: 4
          },
          end: {
            line: 175,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 173
      },
      "24": {
        loc: {
          start: {
            line: 235,
            column: 24
          },
          end: {
            line: 252,
            column: 114
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 235,
            column: 33
          },
          end: {
            line: 252,
            column: 92
          }
        }, {
          start: {
            line: 252,
            column: 95
          },
          end: {
            line: 252,
            column: 114
          }
        }],
        line: 235
      },
      "25": {
        loc: {
          start: {
            line: 278,
            column: 16
          },
          end: {
            line: 278,
            column: 51
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 278,
            column: 40
          },
          end: {
            line: 278,
            column: 46
          }
        }, {
          start: {
            line: 278,
            column: 49
          },
          end: {
            line: 278,
            column: 51
          }
        }],
        line: 278
      },
      "26": {
        loc: {
          start: {
            line: 304,
            column: 4
          },
          end: {
            line: 306,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 304,
            column: 4
          },
          end: {
            line: 306,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 304
      },
      "27": {
        loc: {
          start: {
            line: 307,
            column: 4
          },
          end: {
            line: 309,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 307,
            column: 4
          },
          end: {
            line: 309,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 307
      },
      "28": {
        loc: {
          start: {
            line: 307,
            column: 8
          },
          end: {
            line: 307,
            column: 138
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 307,
            column: 8
          },
          end: {
            line: 307,
            column: 38
          }
        }, {
          start: {
            line: 307,
            column: 42
          },
          end: {
            line: 307,
            column: 138
          }
        }],
        line: 307
      },
      "29": {
        loc: {
          start: {
            line: 337,
            column: 8
          },
          end: {
            line: 343,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 337,
            column: 8
          },
          end: {
            line: 343,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 337
      },
      "30": {
        loc: {
          start: {
            line: 346,
            column: 8
          },
          end: {
            line: 352,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 346,
            column: 8
          },
          end: {
            line: 352,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 346
      },
      "31": {
        loc: {
          start: {
            line: 373,
            column: 4
          },
          end: {
            line: 375,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 373,
            column: 4
          },
          end: {
            line: 375,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 373
      },
      "32": {
        loc: {
          start: {
            line: 380,
            column: 4
          },
          end: {
            line: 382,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 380,
            column: 4
          },
          end: {
            line: 382,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 380
      },
      "33": {
        loc: {
          start: {
            line: 387,
            column: 4
          },
          end: {
            line: 389,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 387,
            column: 4
          },
          end: {
            line: 389,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 387
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0],
      "17": [0],
      "18": [0],
      "19": [0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/stefanbekker/projects/fancy-planties/src/lib/db/queries/plant-taxonomy.ts"],
      sourcesContent: ["import { db } from '@/lib/db';\nimport { plants, users } from '@/lib/db/schema';\nimport { eq, and, or, ilike, desc, asc, sql, count } from 'drizzle-orm';\nimport type { \n  PlantSearch, \n  PlantFilter, \n  CreatePlant,\n  UpdatePlant\n} from '@/lib/validation/plant-schemas';\nimport type { \n  PlantSearchResult, \n  EnhancedPlant, \n  PlantWithStats,\n  TaxonomyValidationResult,\n  PlantLookupOptions,\n  QuickSelectPlants\n} from '@/lib/types/plant-types';\nimport { plantHelpers } from '@/lib/types/plant-types';\n\n// Helper function to build plant visibility conditions\nfunction buildPlantVisibilityFilter(currentUserId?: number) {\n  if (!currentUserId) {\n    // If no user context, only show verified plants\n    return eq(plants.isVerified, true);\n  }\n\n  // Plants are visible if:\n  // 1. They are verified (public)\n  // 2. They were created by a curator (public)\n  // 3. They were created by the current user (private)\n  return or(\n    eq(plants.isVerified, true),\n    and(\n      eq(plants.createdBy, currentUserId)\n    ),\n    // Plants created by curators are visible to all\n    sql`EXISTS (\n      SELECT 1 FROM ${users} \n      WHERE ${users.id} = ${plants.createdBy} \n      AND ${users.isCurator} = true\n    )`\n  );\n}\n\n// Create a new plant taxonomy entry\nexport async function createPlant(data: CreatePlant, userId?: number): Promise<EnhancedPlant> {\n  const plantData = {\n    ...data,\n    createdBy: userId || data.createdBy,\n  };\n\n  const [newPlant] = await db.insert(plants).values(plantData).returning();\n  return plantHelpers.enhancePlant(newPlant);\n}\n\n// Update an existing plant taxonomy entry\nexport async function updatePlant(data: UpdatePlant): Promise<EnhancedPlant | null> {\n  const { id, ...updateData } = data;\n  \n  const [updatedPlant] = await db\n    .update(plants)\n    .set({\n      ...updateData,\n      updatedAt: new Date(),\n    })\n    .where(eq(plants.id, id))\n    .returning();\n\n  return updatedPlant ? plantHelpers.enhancePlant(updatedPlant) : null;\n}\n\n// Get plant by ID\nexport async function getPlantById(id: number): Promise<EnhancedPlant | null> {\n  const plant = await db.query.plants.findFirst({\n    where: eq(plants.id, id),\n    with: {\n      createdBy: {\n        columns: {\n          id: true,\n          name: true,\n        },\n      },\n    },\n  });\n\n  return plant ? plantHelpers.enhancePlant(plant) : null;\n}\n\n// Get plants with usage statistics\nexport async function getPlantsWithStats(\n  filter: PlantFilter = { limit: 20, offset: 0 },\n  userId?: number\n): Promise<PlantWithStats[]> {\n  const conditions = [];\n  \n  // Add visibility filter based on curator/user logic\n  conditions.push(buildPlantVisibilityFilter(userId));\n  \n  if (filter.family) {\n    conditions.push(ilike(plants.family, `%${filter.family}%`));\n  }\n  if (filter.genus) {\n    conditions.push(ilike(plants.genus, `%${filter.genus}%`));\n  }\n  if (filter.isVerified !== undefined) {\n    conditions.push(eq(plants.isVerified, filter.isVerified));\n  }\n  if (filter.createdBy) {\n    conditions.push(eq(plants.createdBy, filter.createdBy));\n  }\n\n  const whereClause = and(...conditions);\n\n  // Query with subqueries for statistics\n  const plantsWithStats = await db\n    .select({\n      id: plants.id,\n      family: plants.family,\n      genus: plants.genus,\n      species: plants.species,\n      cultivar: plants.cultivar,\n      commonName: plants.commonName,\n      careInstructions: plants.careInstructions,\n      defaultImage: plants.defaultImage,\n      createdBy: plants.createdBy,\n      isVerified: plants.isVerified,\n      createdAt: plants.createdAt,\n      updatedAt: plants.updatedAt,\n      instanceCount: sql<number>`(\n        SELECT COUNT(*) FROM plant_instances \n        WHERE plant_id = ${plants.id}\n        ${userId ? sql`AND user_id = ${userId}` : sql``}\n      )`,\n      propagationCount: sql<number>`(\n        SELECT COUNT(*) FROM propagations \n        WHERE plant_id = ${plants.id}\n        ${userId ? sql`AND user_id = ${userId}` : sql``}\n      )`,\n      lastUsed: sql<Date | null>`(\n        SELECT MAX(created_at) FROM (\n          SELECT created_at FROM plant_instances WHERE plant_id = ${plants.id}\n          ${userId ? sql`AND user_id = ${userId}` : sql``}\n          UNION ALL\n          SELECT created_at FROM propagations WHERE plant_id = ${plants.id}\n          ${userId ? sql`AND user_id = ${userId}` : sql``}\n        ) AS usage_dates\n      )`,\n    })\n    .from(plants)\n    .where(whereClause)\n    .orderBy(desc(plants.updatedAt))\n    .limit(filter.limit || 20)\n    .offset(filter.offset || 0);\n\n  return plantsWithStats.map(plant => ({\n    ...plantHelpers.enhancePlant(plant),\n    instanceCount: plant.instanceCount,\n    propagationCount: plant.propagationCount,\n    popularityScore: plant.instanceCount + plant.propagationCount * 0.5,\n    lastUsed: plant.lastUsed || undefined,\n  }));\n}\n\n// Fuzzy search for plants\nexport async function searchPlants(\n  searchParams: PlantSearch,\n  options: PlantLookupOptions = {}\n): Promise<PlantSearchResult> {\n  const startTime = Date.now();\n  const { query, limit = 20, offset = 0, includeUnverified = true } = searchParams;\n  \n  // Build search conditions\n  const searchConditions = [];\n  const searchTerm = `%${query.toLowerCase()}%`;\n  \n  // Add visibility filter based on curator/user logic\n  searchConditions.push(buildPlantVisibilityFilter(options.userContext?.userId));\n  \n  searchConditions.push(\n    or(\n      ilike(plants.family, searchTerm),\n      ilike(plants.genus, searchTerm),\n      ilike(plants.species, searchTerm),\n      ilike(plants.commonName, searchTerm),\n      // Search in scientific name combination\n      sql`LOWER(CONCAT(${plants.genus}, ' ', ${plants.species})) LIKE ${searchTerm}`,\n      // Search in full taxonomy\n      sql`LOWER(CONCAT(${plants.family}, ' ', ${plants.genus}, ' ', ${plants.species})) LIKE ${searchTerm}`\n    )\n  );\n\n  if (!includeUnverified) {\n    searchConditions.push(eq(plants.isVerified, true));\n  }\n\n  if (options.filters?.family) {\n    searchConditions.push(ilike(plants.family, `%${options.filters.family}%`));\n  }\n\n  if (options.filters?.genus) {\n    searchConditions.push(ilike(plants.genus, `%${options.filters.genus}%`));\n  }\n\n  if (options.filters?.isVerified !== undefined) {\n    searchConditions.push(eq(plants.isVerified, options.filters.isVerified));\n  }\n\n  const whereClause = and(...searchConditions);\n\n  // Get total count\n  const [{ totalCount }] = await db\n    .select({ totalCount: count() })\n    .from(plants)\n    .where(whereClause);\n\n  // Get search results with relevance scoring\n  const results = await db\n    .select({\n      id: plants.id,\n      family: plants.family,\n      genus: plants.genus,\n      species: plants.species,\n      commonName: plants.commonName,\n      isVerified: plants.isVerified,\n      // Simple relevance scoring based on match position and field priority\n      score: sql<number>`\n        CASE \n          WHEN LOWER(${plants.commonName}) = LOWER(${query}) THEN 100\n          WHEN LOWER(${plants.commonName}) LIKE ${`${query.toLowerCase()}%`} THEN 90\n          WHEN LOWER(CONCAT(${plants.genus}, ' ', ${plants.species})) = LOWER(${query}) THEN 85\n          WHEN LOWER(CONCAT(${plants.genus}, ' ', ${plants.species})) LIKE ${`${query.toLowerCase()}%`} THEN 80\n          WHEN LOWER(${plants.genus}) = LOWER(${query}) THEN 75\n          WHEN LOWER(${plants.species}) = LOWER(${query}) THEN 70\n          WHEN LOWER(${plants.family}) = LOWER(${query}) THEN 65\n          WHEN LOWER(${plants.commonName}) LIKE ${searchTerm} THEN 60\n          WHEN LOWER(${plants.genus}) LIKE ${searchTerm} THEN 50\n          WHEN LOWER(${plants.species}) LIKE ${searchTerm} THEN 45\n          WHEN LOWER(${plants.family}) LIKE ${searchTerm} THEN 40\n          ELSE 30\n        END\n      `,\n    })\n    .from(plants)\n    .where(whereClause)\n    .orderBy(desc(sql<number>`\n        CASE \n          WHEN LOWER(${plants.commonName}) = LOWER(${query}) THEN 100\n          WHEN LOWER(${plants.commonName}) LIKE ${`${query.toLowerCase()}%`} THEN 90\n          WHEN LOWER(CONCAT(${plants.genus}, ' ', ${plants.species})) = LOWER(${query}) THEN 85\n          WHEN LOWER(CONCAT(${plants.genus}, ' ', ${plants.species})) LIKE ${`${query.toLowerCase()}%`} THEN 80\n          WHEN LOWER(${plants.genus}) = LOWER(${query}) THEN 75\n          WHEN LOWER(${plants.species}) = LOWER(${query}) THEN 70\n          WHEN LOWER(${plants.family}) = LOWER(${query}) THEN 65\n          WHEN LOWER(${plants.commonName}) LIKE ${searchTerm} THEN 60\n          WHEN LOWER(${plants.genus}) LIKE ${searchTerm} THEN 50\n          WHEN LOWER(${plants.species}) LIKE ${searchTerm} THEN 45\n          WHEN LOWER(${plants.family}) LIKE ${searchTerm} THEN 40\n          ELSE 30\n        END\n      `), desc(plants.isVerified), asc(plants.commonName))\n    .limit(limit)\n    .offset(offset);\n\n  const searchTime = Date.now() - startTime;\n\n  return {\n    plants: results.map(result => ({\n      ...result,\n      score: result.score,\n    })),\n    totalCount,\n    hasMore: offset + limit < totalCount,\n    searchTime,\n  };\n}\n\n// Get quick select plants (recent, popular, verified)\nexport async function getQuickSelectPlants(userId?: number): Promise<QuickSelectPlants> {\n  // Get recent plants (based on user's recent plant instances/propagations)\n  const recentQuery = userId ? db\n    .select({\n      id: plants.id,\n      family: plants.family,\n      genus: plants.genus,\n      species: plants.species,\n      commonName: plants.commonName,\n      isVerified: plants.isVerified,\n    })\n    .from(plants)\n    .innerJoin(\n      sql`(\n        SELECT plant_id, MAX(created_at) as last_used\n        FROM (\n          SELECT plant_id, created_at FROM plant_instances WHERE user_id = ${userId}\n          UNION ALL\n          SELECT plant_id, created_at FROM propagations WHERE user_id = ${userId}\n        ) recent_usage\n        GROUP BY plant_id\n        ORDER BY last_used DESC\n        LIMIT 10\n      ) recent_plants`,\n      sql`recent_plants.plant_id = ${plants.id}`\n    ) : Promise.resolve([]);\n\n  // Get popular plants (most instances across all users)\n  const popularQuery = db\n    .select({\n      id: plants.id,\n      family: plants.family,\n      genus: plants.genus,\n      species: plants.species,\n      commonName: plants.commonName,\n      isVerified: plants.isVerified,\n      instanceCount: sql<number>`COUNT(plant_instances.id)`,\n    })\n    .from(plants)\n    .leftJoin(sql`plant_instances`, sql`plant_instances.plant_id = ${plants.id}`)\n    .groupBy(plants.id)\n    .orderBy(sql`COUNT(plant_instances.id) DESC`)\n    .limit(10);\n\n  // Get verified plants (admin-verified taxonomy)\n  const verifiedQuery = db\n    .select({\n      id: plants.id,\n      family: plants.family,\n      genus: plants.genus,\n      species: plants.species,\n      commonName: plants.commonName,\n      isVerified: plants.isVerified,\n    })\n    .from(plants)\n    .where(eq(plants.isVerified, true))\n    .orderBy(asc(plants.commonName))\n    .limit(10);\n\n  const [recent, popular, verified] = await Promise.all([\n    recentQuery,\n    popularQuery,\n    verifiedQuery,\n  ]);\n\n  return {\n    recent: Array.isArray(recent) ? recent : [],\n    popular: popular.map(({ instanceCount: _instanceCount, ...plant }) => plant),\n    verified,\n  };\n}\n\n// Validate plant taxonomy for duplicates and conflicts\nexport async function validatePlantTaxonomy(\n  taxonomy: Pick<CreatePlant, 'family' | 'genus' | 'species' | 'commonName'>\n): Promise<TaxonomyValidationResult> {\n  const errors: string[] = [];\n  const warnings: string[] = [];\n  const suggestions = {\n    family: [] as string[],\n    genus: [] as string[],\n    species: [] as string[],\n    commonName: [] as string[],\n  };\n\n  // Check for exact taxonomic duplicates\n  const exactDuplicates = await db\n    .select()\n    .from(plants)\n    .where(\n      and(\n        eq(sql`LOWER(${plants.family})`, taxonomy.family.toLowerCase()),\n        eq(sql`LOWER(${plants.genus})`, taxonomy.genus.toLowerCase()),\n        eq(sql`LOWER(${plants.species})`, taxonomy.species.toLowerCase())\n      )\n    );\n\n  // Check for common name conflicts\n  const commonNameConflicts = await db\n    .select()\n    .from(plants)\n    .where(eq(sql`LOWER(${plants.commonName})`, taxonomy.commonName.toLowerCase()));\n\n  // Get similar families for suggestions\n  const similarFamilies = await db\n    .select({ family: plants.family })\n    .from(plants)\n    .where(ilike(plants.family, `%${taxonomy.family.substring(0, 3)}%`))\n    .groupBy(plants.family)\n    .limit(5);\n\n  // Get similar genera for suggestions\n  const similarGenera = await db\n    .select({ genus: plants.genus })\n    .from(plants)\n    .where(ilike(plants.genus, `%${taxonomy.genus.substring(0, 3)}%`))\n    .groupBy(plants.genus)\n    .limit(5);\n\n  if (exactDuplicates.length > 0) {\n    errors.push('A plant with this exact taxonomy already exists');\n  }\n\n  if (commonNameConflicts.length > 0 && \n      !exactDuplicates.some(dup => dup.commonName.toLowerCase() === taxonomy.commonName.toLowerCase())) {\n    warnings.push('Another plant already uses this common name');\n  }\n\n  suggestions.family = similarFamilies.map(f => f.family);\n  suggestions.genus = similarGenera.map(g => g.genus);\n\n  return {\n    isValid: errors.length === 0,\n    errors,\n    warnings,\n    suggestions,\n    duplicates: exactDuplicates.map(plant => ({\n      id: plant.id,\n      family: plant.family,\n      genus: plant.genus,\n      species: plant.species,\n      commonName: plant.commonName,\n      isVerified: plant.isVerified,\n    })),\n  };\n}\n\n// Get taxonomy hierarchy for browsing\nexport async function getTaxonomyHierarchy() {\n  const hierarchy = await db\n    .select({\n      family: plants.family,\n      genus: plants.genus,\n      species: plants.species,\n      plantCount: count(),\n    })\n    .from(plants)\n    .groupBy(plants.family, plants.genus, plants.species)\n    .orderBy(asc(plants.family), asc(plants.genus), asc(plants.species));\n\n  // Group by family and genus\n  const familyMap = new Map();\n  \n  hierarchy.forEach(item => {\n    if (!familyMap.has(item.family)) {\n      familyMap.set(item.family, {\n        name: item.family,\n        count: 0,\n        genera: new Map(),\n      });\n    }\n    \n    const family = familyMap.get(item.family);\n    family.count += item.plantCount;\n    \n    if (!family.genera.has(item.genus)) {\n      family.genera.set(item.genus, {\n        name: item.genus,\n        count: 0,\n        species: [],\n      });\n    }\n    \n    const genus = family.genera.get(item.genus);\n    genus.count += item.plantCount;\n    genus.species.push({\n      name: item.species,\n      count: item.plantCount,\n      plants: [], // Would need additional query to populate\n    });\n  });\n\n  return {\n    families: Array.from(familyMap.values()).map(family => ({\n      ...family,\n      genera: Array.from(family.genera.values()),\n    })),\n  };\n}\n\n// Delete a plant (only if no instances exist)\nexport async function deletePlant(id: number, userId?: number): Promise<boolean> {\n  // Check if plant has any instances\n  const [instanceCount] = await db\n    .select({ count: count() })\n    .from(sql`plant_instances`)\n    .where(sql`plant_id = ${id}`);\n\n  if (instanceCount.count > 0) {\n    throw new Error('Cannot delete plant with existing instances');\n  }\n\n  // Check if plant has any propagations\n  const [propagationCount] = await db\n    .select({ count: count() })\n    .from(sql`propagations`)\n    .where(sql`plant_id = ${id}`);\n\n  if (propagationCount.count > 0) {\n    throw new Error('Cannot delete plant with existing propagations');\n  }\n\n  // If userId provided, only allow deletion of plants created by that user (unless admin)\n  const whereConditions = [eq(plants.id, id)];\n  if (userId) {\n    whereConditions.push(eq(plants.createdBy, userId));\n  }\n\n  const result = await db\n    .delete(plants)\n    .where(and(...whereConditions))\n    .returning({ id: plants.id });\n\n  return result.length > 0;\n}"],
      names: ["createPlant", "deletePlant", "getPlantById", "getPlantsWithStats", "getQuickSelectPlants", "getTaxonomyHierarchy", "searchPlants", "updatePlant", "validatePlantTaxonomy", "buildPlantVisibilityFilter", "currentUserId", "eq", "plants", "isVerified", "or", "and", "createdBy", "sql", "users", "id", "isCurator", "data", "userId", "plantData", "newPlant", "db", "insert", "values", "returning", "plantHelpers", "enhancePlant", "updateData", "updatedPlant", "update", "set", "updatedAt", "Date", "where", "plant", "query", "findFirst", "with", "columns", "name", "filter", "limit", "offset", "conditions", "push", "family", "ilike", "genus", "undefined", "whereClause", "plantsWithStats", "select", "species", "cultivar", "commonName", "careInstructions", "defaultImage", "createdAt", "instanceCount", "propagationCount", "lastUsed", "from", "orderBy", "desc", "map", "popularityScore", "searchParams", "options", "startTime", "now", "includeUnverified", "searchConditions", "searchTerm", "toLowerCase", "userContext", "filters", "totalCount", "count", "results", "score", "asc", "searchTime", "result", "hasMore", "recentQuery", "innerJoin", "Promise", "resolve", "popularQuery", "leftJoin", "groupBy", "verifiedQuery", "recent", "popular", "verified", "all", "Array", "isArray", "_instanceCount", "taxonomy", "errors", "warnings", "suggestions", "exactDuplicates", "commonNameConflicts", "similarFamilies", "substring", "similarGenera", "length", "some", "dup", "f", "g", "isValid", "duplicates", "hierarchy", "plantCount", "familyMap", "Map", "forEach", "item", "has", "genera", "get", "families", "Error", "whereConditions", "delete"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "80cd067007dfbf44fe5cb89618a57f67e2eacb81"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1s09av2jvm = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1s09av2jvm();
cov_1s09av2jvm().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_1s09av2jvm().f[0]++;
  cov_1s09av2jvm().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_1s09av2jvm().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_1s09av2jvm().s[3]++;
_export(exports, {
  get createPlant() {
    /* istanbul ignore next */
    cov_1s09av2jvm().f[1]++;
    cov_1s09av2jvm().s[4]++;
    return createPlant;
  },
  get deletePlant() {
    /* istanbul ignore next */
    cov_1s09av2jvm().f[2]++;
    cov_1s09av2jvm().s[5]++;
    return deletePlant;
  },
  get getPlantById() {
    /* istanbul ignore next */
    cov_1s09av2jvm().f[3]++;
    cov_1s09av2jvm().s[6]++;
    return getPlantById;
  },
  get getPlantsWithStats() {
    /* istanbul ignore next */
    cov_1s09av2jvm().f[4]++;
    cov_1s09av2jvm().s[7]++;
    return getPlantsWithStats;
  },
  get getQuickSelectPlants() {
    /* istanbul ignore next */
    cov_1s09av2jvm().f[5]++;
    cov_1s09av2jvm().s[8]++;
    return getQuickSelectPlants;
  },
  get getTaxonomyHierarchy() {
    /* istanbul ignore next */
    cov_1s09av2jvm().f[6]++;
    cov_1s09av2jvm().s[9]++;
    return getTaxonomyHierarchy;
  },
  get searchPlants() {
    /* istanbul ignore next */
    cov_1s09av2jvm().f[7]++;
    cov_1s09av2jvm().s[10]++;
    return searchPlants;
  },
  get updatePlant() {
    /* istanbul ignore next */
    cov_1s09av2jvm().f[8]++;
    cov_1s09av2jvm().s[11]++;
    return updatePlant;
  },
  get validatePlantTaxonomy() {
    /* istanbul ignore next */
    cov_1s09av2jvm().f[9]++;
    cov_1s09av2jvm().s[12]++;
    return validatePlantTaxonomy;
  }
});
const _db =
/* istanbul ignore next */
(cov_1s09av2jvm().s[13]++, require(".."));
const _schema =
/* istanbul ignore next */
(cov_1s09av2jvm().s[14]++, require("../schema"));
const _drizzleorm =
/* istanbul ignore next */
(cov_1s09av2jvm().s[15]++, require("drizzle-orm"));
const _planttypes =
/* istanbul ignore next */
(cov_1s09av2jvm().s[16]++, require("../../types/plant-types"));
// Helper function to build plant visibility conditions
function buildPlantVisibilityFilter(currentUserId) {
  /* istanbul ignore next */
  cov_1s09av2jvm().f[10]++;
  cov_1s09av2jvm().s[17]++;
  if (!currentUserId) {
    /* istanbul ignore next */
    cov_1s09av2jvm().b[0][0]++;
    cov_1s09av2jvm().s[18]++;
    // If no user context, only show verified plants
    return (0, _drizzleorm.eq)(_schema.plants.isVerified, true);
  } else
  /* istanbul ignore next */
  {
    cov_1s09av2jvm().b[0][1]++;
  }
  // Plants are visible if:
  // 1. They are verified (public)
  // 2. They were created by a curator (public)
  // 3. They were created by the current user (private)
  cov_1s09av2jvm().s[19]++;
  return (0, _drizzleorm.or)((0, _drizzleorm.eq)(_schema.plants.isVerified, true), (0, _drizzleorm.and)((0, _drizzleorm.eq)(_schema.plants.createdBy, currentUserId)),
  // Plants created by curators are visible to all
  (0, _drizzleorm.sql)`EXISTS (
      SELECT 1 FROM ${_schema.users} 
      WHERE ${_schema.users.id} = ${_schema.plants.createdBy} 
      AND ${_schema.users.isCurator} = true
    )`);
}
async function createPlant(data, userId) {
  /* istanbul ignore next */
  cov_1s09av2jvm().f[11]++;
  const plantData =
  /* istanbul ignore next */
  (cov_1s09av2jvm().s[20]++, {
    ...data,
    createdBy:
    /* istanbul ignore next */
    (cov_1s09av2jvm().b[1][0]++, userId) ||
    /* istanbul ignore next */
    (cov_1s09av2jvm().b[1][1]++, data.createdBy)
  });
  const [newPlant] =
  /* istanbul ignore next */
  (cov_1s09av2jvm().s[21]++, await _db.db.insert(_schema.plants).values(plantData).returning());
  /* istanbul ignore next */
  cov_1s09av2jvm().s[22]++;
  return _planttypes.plantHelpers.enhancePlant(newPlant);
}
async function updatePlant(data) {
  /* istanbul ignore next */
  cov_1s09av2jvm().f[12]++;
  const {
    id,
    ...updateData
  } =
  /* istanbul ignore next */
  (cov_1s09av2jvm().s[23]++, data);
  const [updatedPlant] =
  /* istanbul ignore next */
  (cov_1s09av2jvm().s[24]++, await _db.db.update(_schema.plants).set({
    ...updateData,
    updatedAt: new Date()
  }).where((0, _drizzleorm.eq)(_schema.plants.id, id)).returning());
  /* istanbul ignore next */
  cov_1s09av2jvm().s[25]++;
  return updatedPlant ?
  /* istanbul ignore next */
  (cov_1s09av2jvm().b[2][0]++, _planttypes.plantHelpers.enhancePlant(updatedPlant)) :
  /* istanbul ignore next */
  (cov_1s09av2jvm().b[2][1]++, null);
}
async function getPlantById(id) {
  /* istanbul ignore next */
  cov_1s09av2jvm().f[13]++;
  const plant =
  /* istanbul ignore next */
  (cov_1s09av2jvm().s[26]++, await _db.db.query.plants.findFirst({
    where: (0, _drizzleorm.eq)(_schema.plants.id, id),
    with: {
      createdBy: {
        columns: {
          id: true,
          name: true
        }
      }
    }
  }));
  /* istanbul ignore next */
  cov_1s09av2jvm().s[27]++;
  return plant ?
  /* istanbul ignore next */
  (cov_1s09av2jvm().b[3][0]++, _planttypes.plantHelpers.enhancePlant(plant)) :
  /* istanbul ignore next */
  (cov_1s09av2jvm().b[3][1]++, null);
}
async function getPlantsWithStats(filter =
/* istanbul ignore next */
(cov_1s09av2jvm().b[4][0]++, {
  limit: 20,
  offset: 0
}), userId) {
  /* istanbul ignore next */
  cov_1s09av2jvm().f[14]++;
  const conditions =
  /* istanbul ignore next */
  (cov_1s09av2jvm().s[28]++, []);
  // Add visibility filter based on curator/user logic
  /* istanbul ignore next */
  cov_1s09av2jvm().s[29]++;
  conditions.push(buildPlantVisibilityFilter(userId));
  /* istanbul ignore next */
  cov_1s09av2jvm().s[30]++;
  if (filter.family) {
    /* istanbul ignore next */
    cov_1s09av2jvm().b[5][0]++;
    cov_1s09av2jvm().s[31]++;
    conditions.push((0, _drizzleorm.ilike)(_schema.plants.family, `%${filter.family}%`));
  } else
  /* istanbul ignore next */
  {
    cov_1s09av2jvm().b[5][1]++;
  }
  cov_1s09av2jvm().s[32]++;
  if (filter.genus) {
    /* istanbul ignore next */
    cov_1s09av2jvm().b[6][0]++;
    cov_1s09av2jvm().s[33]++;
    conditions.push((0, _drizzleorm.ilike)(_schema.plants.genus, `%${filter.genus}%`));
  } else
  /* istanbul ignore next */
  {
    cov_1s09av2jvm().b[6][1]++;
  }
  cov_1s09av2jvm().s[34]++;
  if (filter.isVerified !== undefined) {
    /* istanbul ignore next */
    cov_1s09av2jvm().b[7][0]++;
    cov_1s09av2jvm().s[35]++;
    conditions.push((0, _drizzleorm.eq)(_schema.plants.isVerified, filter.isVerified));
  } else
  /* istanbul ignore next */
  {
    cov_1s09av2jvm().b[7][1]++;
  }
  cov_1s09av2jvm().s[36]++;
  if (filter.createdBy) {
    /* istanbul ignore next */
    cov_1s09av2jvm().b[8][0]++;
    cov_1s09av2jvm().s[37]++;
    conditions.push((0, _drizzleorm.eq)(_schema.plants.createdBy, filter.createdBy));
  } else
  /* istanbul ignore next */
  {
    cov_1s09av2jvm().b[8][1]++;
  }
  const whereClause =
  /* istanbul ignore next */
  (cov_1s09av2jvm().s[38]++, (0, _drizzleorm.and)(...conditions));
  // Query with subqueries for statistics
  const plantsWithStats =
  /* istanbul ignore next */
  (cov_1s09av2jvm().s[39]++, await _db.db.select({
    id: _schema.plants.id,
    family: _schema.plants.family,
    genus: _schema.plants.genus,
    species: _schema.plants.species,
    cultivar: _schema.plants.cultivar,
    commonName: _schema.plants.commonName,
    careInstructions: _schema.plants.careInstructions,
    defaultImage: _schema.plants.defaultImage,
    createdBy: _schema.plants.createdBy,
    isVerified: _schema.plants.isVerified,
    createdAt: _schema.plants.createdAt,
    updatedAt: _schema.plants.updatedAt,
    instanceCount: (0, _drizzleorm.sql)`(
        SELECT COUNT(*) FROM plant_instances 
        WHERE plant_id = ${_schema.plants.id}
        ${userId ?
    /* istanbul ignore next */
    (cov_1s09av2jvm().b[9][0]++, (0, _drizzleorm.sql)`AND user_id = ${userId}`) :
    /* istanbul ignore next */
    (cov_1s09av2jvm().b[9][1]++, (0, _drizzleorm.sql)``)}
      )`,
    propagationCount: (0, _drizzleorm.sql)`(
        SELECT COUNT(*) FROM propagations 
        WHERE plant_id = ${_schema.plants.id}
        ${userId ?
    /* istanbul ignore next */
    (cov_1s09av2jvm().b[10][0]++, (0, _drizzleorm.sql)`AND user_id = ${userId}`) :
    /* istanbul ignore next */
    (cov_1s09av2jvm().b[10][1]++, (0, _drizzleorm.sql)``)}
      )`,
    lastUsed: (0, _drizzleorm.sql)`(
        SELECT MAX(created_at) FROM (
          SELECT created_at FROM plant_instances WHERE plant_id = ${_schema.plants.id}
          ${userId ?
    /* istanbul ignore next */
    (cov_1s09av2jvm().b[11][0]++, (0, _drizzleorm.sql)`AND user_id = ${userId}`) :
    /* istanbul ignore next */
    (cov_1s09av2jvm().b[11][1]++, (0, _drizzleorm.sql)``)}
          UNION ALL
          SELECT created_at FROM propagations WHERE plant_id = ${_schema.plants.id}
          ${userId ?
    /* istanbul ignore next */
    (cov_1s09av2jvm().b[12][0]++, (0, _drizzleorm.sql)`AND user_id = ${userId}`) :
    /* istanbul ignore next */
    (cov_1s09av2jvm().b[12][1]++, (0, _drizzleorm.sql)``)}
        ) AS usage_dates
      )`
  }).from(_schema.plants).where(whereClause).orderBy((0, _drizzleorm.desc)(_schema.plants.updatedAt)).limit(
  /* istanbul ignore next */
  (cov_1s09av2jvm().b[13][0]++, filter.limit) ||
  /* istanbul ignore next */
  (cov_1s09av2jvm().b[13][1]++, 20)).offset(
  /* istanbul ignore next */
  (cov_1s09av2jvm().b[14][0]++, filter.offset) ||
  /* istanbul ignore next */
  (cov_1s09av2jvm().b[14][1]++, 0)));
  /* istanbul ignore next */
  cov_1s09av2jvm().s[40]++;
  return plantsWithStats.map(plant => {
    /* istanbul ignore next */
    cov_1s09av2jvm().f[15]++;
    cov_1s09av2jvm().s[41]++;
    return {
      ..._planttypes.plantHelpers.enhancePlant(plant),
      instanceCount: plant.instanceCount,
      propagationCount: plant.propagationCount,
      popularityScore: plant.instanceCount + plant.propagationCount * 0.5,
      lastUsed:
      /* istanbul ignore next */
      (cov_1s09av2jvm().b[15][0]++, plant.lastUsed) ||
      /* istanbul ignore next */
      (cov_1s09av2jvm().b[15][1]++, undefined)
    };
  });
}
async function searchPlants(searchParams, options =
/* istanbul ignore next */
(cov_1s09av2jvm().b[16][0]++, {})) {
  /* istanbul ignore next */
  cov_1s09av2jvm().f[16]++;
  const startTime =
  /* istanbul ignore next */
  (cov_1s09av2jvm().s[42]++, Date.now());
  const {
    query,
    limit =
    /* istanbul ignore next */
    (cov_1s09av2jvm().b[17][0]++, 20),
    offset =
    /* istanbul ignore next */
    (cov_1s09av2jvm().b[18][0]++, 0),
    includeUnverified =
    /* istanbul ignore next */
    (cov_1s09av2jvm().b[19][0]++, true)
  } =
  /* istanbul ignore next */
  (cov_1s09av2jvm().s[43]++, searchParams);
  // Build search conditions
  const searchConditions =
  /* istanbul ignore next */
  (cov_1s09av2jvm().s[44]++, []);
  const searchTerm =
  /* istanbul ignore next */
  (cov_1s09av2jvm().s[45]++, `%${query.toLowerCase()}%`);
  // Add visibility filter based on curator/user logic
  /* istanbul ignore next */
  cov_1s09av2jvm().s[46]++;
  searchConditions.push(buildPlantVisibilityFilter(options.userContext?.userId));
  /* istanbul ignore next */
  cov_1s09av2jvm().s[47]++;
  searchConditions.push((0, _drizzleorm.or)((0, _drizzleorm.ilike)(_schema.plants.family, searchTerm), (0, _drizzleorm.ilike)(_schema.plants.genus, searchTerm), (0, _drizzleorm.ilike)(_schema.plants.species, searchTerm), (0, _drizzleorm.ilike)(_schema.plants.commonName, searchTerm),
  // Search in scientific name combination
  (0, _drizzleorm.sql)`LOWER(CONCAT(${_schema.plants.genus}, ' ', ${_schema.plants.species})) LIKE ${searchTerm}`,
  // Search in full taxonomy
  (0, _drizzleorm.sql)`LOWER(CONCAT(${_schema.plants.family}, ' ', ${_schema.plants.genus}, ' ', ${_schema.plants.species})) LIKE ${searchTerm}`));
  /* istanbul ignore next */
  cov_1s09av2jvm().s[48]++;
  if (!includeUnverified) {
    /* istanbul ignore next */
    cov_1s09av2jvm().b[20][0]++;
    cov_1s09av2jvm().s[49]++;
    searchConditions.push((0, _drizzleorm.eq)(_schema.plants.isVerified, true));
  } else
  /* istanbul ignore next */
  {
    cov_1s09av2jvm().b[20][1]++;
  }
  cov_1s09av2jvm().s[50]++;
  if (options.filters?.family) {
    /* istanbul ignore next */
    cov_1s09av2jvm().b[21][0]++;
    cov_1s09av2jvm().s[51]++;
    searchConditions.push((0, _drizzleorm.ilike)(_schema.plants.family, `%${options.filters.family}%`));
  } else
  /* istanbul ignore next */
  {
    cov_1s09av2jvm().b[21][1]++;
  }
  cov_1s09av2jvm().s[52]++;
  if (options.filters?.genus) {
    /* istanbul ignore next */
    cov_1s09av2jvm().b[22][0]++;
    cov_1s09av2jvm().s[53]++;
    searchConditions.push((0, _drizzleorm.ilike)(_schema.plants.genus, `%${options.filters.genus}%`));
  } else
  /* istanbul ignore next */
  {
    cov_1s09av2jvm().b[22][1]++;
  }
  cov_1s09av2jvm().s[54]++;
  if (options.filters?.isVerified !== undefined) {
    /* istanbul ignore next */
    cov_1s09av2jvm().b[23][0]++;
    cov_1s09av2jvm().s[55]++;
    searchConditions.push((0, _drizzleorm.eq)(_schema.plants.isVerified, options.filters.isVerified));
  } else
  /* istanbul ignore next */
  {
    cov_1s09av2jvm().b[23][1]++;
  }
  const whereClause =
  /* istanbul ignore next */
  (cov_1s09av2jvm().s[56]++, (0, _drizzleorm.and)(...searchConditions));
  // Get total count
  const [{
    totalCount
  }] =
  /* istanbul ignore next */
  (cov_1s09av2jvm().s[57]++, await _db.db.select({
    totalCount: (0, _drizzleorm.count)()
  }).from(_schema.plants).where(whereClause));
  // Get search results with relevance scoring
  const results =
  /* istanbul ignore next */
  (cov_1s09av2jvm().s[58]++, await _db.db.select({
    id: _schema.plants.id,
    family: _schema.plants.family,
    genus: _schema.plants.genus,
    species: _schema.plants.species,
    commonName: _schema.plants.commonName,
    isVerified: _schema.plants.isVerified,
    // Simple relevance scoring based on match position and field priority
    score: (0, _drizzleorm.sql)`
        CASE 
          WHEN LOWER(${_schema.plants.commonName}) = LOWER(${query}) THEN 100
          WHEN LOWER(${_schema.plants.commonName}) LIKE ${`${query.toLowerCase()}%`} THEN 90
          WHEN LOWER(CONCAT(${_schema.plants.genus}, ' ', ${_schema.plants.species})) = LOWER(${query}) THEN 85
          WHEN LOWER(CONCAT(${_schema.plants.genus}, ' ', ${_schema.plants.species})) LIKE ${`${query.toLowerCase()}%`} THEN 80
          WHEN LOWER(${_schema.plants.genus}) = LOWER(${query}) THEN 75
          WHEN LOWER(${_schema.plants.species}) = LOWER(${query}) THEN 70
          WHEN LOWER(${_schema.plants.family}) = LOWER(${query}) THEN 65
          WHEN LOWER(${_schema.plants.commonName}) LIKE ${searchTerm} THEN 60
          WHEN LOWER(${_schema.plants.genus}) LIKE ${searchTerm} THEN 50
          WHEN LOWER(${_schema.plants.species}) LIKE ${searchTerm} THEN 45
          WHEN LOWER(${_schema.plants.family}) LIKE ${searchTerm} THEN 40
          ELSE 30
        END
      `
  }).from(_schema.plants).where(whereClause).orderBy((0, _drizzleorm.desc)((0, _drizzleorm.sql)`
        CASE 
          WHEN LOWER(${_schema.plants.commonName}) = LOWER(${query}) THEN 100
          WHEN LOWER(${_schema.plants.commonName}) LIKE ${`${query.toLowerCase()}%`} THEN 90
          WHEN LOWER(CONCAT(${_schema.plants.genus}, ' ', ${_schema.plants.species})) = LOWER(${query}) THEN 85
          WHEN LOWER(CONCAT(${_schema.plants.genus}, ' ', ${_schema.plants.species})) LIKE ${`${query.toLowerCase()}%`} THEN 80
          WHEN LOWER(${_schema.plants.genus}) = LOWER(${query}) THEN 75
          WHEN LOWER(${_schema.plants.species}) = LOWER(${query}) THEN 70
          WHEN LOWER(${_schema.plants.family}) = LOWER(${query}) THEN 65
          WHEN LOWER(${_schema.plants.commonName}) LIKE ${searchTerm} THEN 60
          WHEN LOWER(${_schema.plants.genus}) LIKE ${searchTerm} THEN 50
          WHEN LOWER(${_schema.plants.species}) LIKE ${searchTerm} THEN 45
          WHEN LOWER(${_schema.plants.family}) LIKE ${searchTerm} THEN 40
          ELSE 30
        END
      `), (0, _drizzleorm.desc)(_schema.plants.isVerified), (0, _drizzleorm.asc)(_schema.plants.commonName)).limit(limit).offset(offset));
  const searchTime =
  /* istanbul ignore next */
  (cov_1s09av2jvm().s[59]++, Date.now() - startTime);
  /* istanbul ignore next */
  cov_1s09av2jvm().s[60]++;
  return {
    plants: results.map(result => {
      /* istanbul ignore next */
      cov_1s09av2jvm().f[17]++;
      cov_1s09av2jvm().s[61]++;
      return {
        ...result,
        score: result.score
      };
    }),
    totalCount,
    hasMore: offset + limit < totalCount,
    searchTime
  };
}
async function getQuickSelectPlants(userId) {
  /* istanbul ignore next */
  cov_1s09av2jvm().f[18]++;
  // Get recent plants (based on user's recent plant instances/propagations)
  const recentQuery =
  /* istanbul ignore next */
  (cov_1s09av2jvm().s[62]++, userId ?
  /* istanbul ignore next */
  (cov_1s09av2jvm().b[24][0]++, _db.db.select({
    id: _schema.plants.id,
    family: _schema.plants.family,
    genus: _schema.plants.genus,
    species: _schema.plants.species,
    commonName: _schema.plants.commonName,
    isVerified: _schema.plants.isVerified
  }).from(_schema.plants).innerJoin((0, _drizzleorm.sql)`(
        SELECT plant_id, MAX(created_at) as last_used
        FROM (
          SELECT plant_id, created_at FROM plant_instances WHERE user_id = ${userId}
          UNION ALL
          SELECT plant_id, created_at FROM propagations WHERE user_id = ${userId}
        ) recent_usage
        GROUP BY plant_id
        ORDER BY last_used DESC
        LIMIT 10
      ) recent_plants`, (0, _drizzleorm.sql)`recent_plants.plant_id = ${_schema.plants.id}`)) :
  /* istanbul ignore next */
  (cov_1s09av2jvm().b[24][1]++, Promise.resolve([])));
  // Get popular plants (most instances across all users)
  const popularQuery =
  /* istanbul ignore next */
  (cov_1s09av2jvm().s[63]++, _db.db.select({
    id: _schema.plants.id,
    family: _schema.plants.family,
    genus: _schema.plants.genus,
    species: _schema.plants.species,
    commonName: _schema.plants.commonName,
    isVerified: _schema.plants.isVerified,
    instanceCount: (0, _drizzleorm.sql)`COUNT(plant_instances.id)`
  }).from(_schema.plants).leftJoin((0, _drizzleorm.sql)`plant_instances`, (0, _drizzleorm.sql)`plant_instances.plant_id = ${_schema.plants.id}`).groupBy(_schema.plants.id).orderBy((0, _drizzleorm.sql)`COUNT(plant_instances.id) DESC`).limit(10));
  // Get verified plants (admin-verified taxonomy)
  const verifiedQuery =
  /* istanbul ignore next */
  (cov_1s09av2jvm().s[64]++, _db.db.select({
    id: _schema.plants.id,
    family: _schema.plants.family,
    genus: _schema.plants.genus,
    species: _schema.plants.species,
    commonName: _schema.plants.commonName,
    isVerified: _schema.plants.isVerified
  }).from(_schema.plants).where((0, _drizzleorm.eq)(_schema.plants.isVerified, true)).orderBy((0, _drizzleorm.asc)(_schema.plants.commonName)).limit(10));
  const [recent, popular, verified] =
  /* istanbul ignore next */
  (cov_1s09av2jvm().s[65]++, await Promise.all([recentQuery, popularQuery, verifiedQuery]));
  /* istanbul ignore next */
  cov_1s09av2jvm().s[66]++;
  return {
    recent: Array.isArray(recent) ?
    /* istanbul ignore next */
    (cov_1s09av2jvm().b[25][0]++, recent) :
    /* istanbul ignore next */
    (cov_1s09av2jvm().b[25][1]++, []),
    popular: popular.map(({
      instanceCount: _instanceCount,
      ...plant
    }) => {
      /* istanbul ignore next */
      cov_1s09av2jvm().f[19]++;
      cov_1s09av2jvm().s[67]++;
      return plant;
    }),
    verified
  };
}
async function validatePlantTaxonomy(taxonomy) {
  /* istanbul ignore next */
  cov_1s09av2jvm().f[20]++;
  const errors =
  /* istanbul ignore next */
  (cov_1s09av2jvm().s[68]++, []);
  const warnings =
  /* istanbul ignore next */
  (cov_1s09av2jvm().s[69]++, []);
  const suggestions =
  /* istanbul ignore next */
  (cov_1s09av2jvm().s[70]++, {
    family: [],
    genus: [],
    species: [],
    commonName: []
  });
  // Check for exact taxonomic duplicates
  const exactDuplicates =
  /* istanbul ignore next */
  (cov_1s09av2jvm().s[71]++, await _db.db.select().from(_schema.plants).where((0, _drizzleorm.and)((0, _drizzleorm.eq)((0, _drizzleorm.sql)`LOWER(${_schema.plants.family})`, taxonomy.family.toLowerCase()), (0, _drizzleorm.eq)((0, _drizzleorm.sql)`LOWER(${_schema.plants.genus})`, taxonomy.genus.toLowerCase()), (0, _drizzleorm.eq)((0, _drizzleorm.sql)`LOWER(${_schema.plants.species})`, taxonomy.species.toLowerCase()))));
  // Check for common name conflicts
  const commonNameConflicts =
  /* istanbul ignore next */
  (cov_1s09av2jvm().s[72]++, await _db.db.select().from(_schema.plants).where((0, _drizzleorm.eq)((0, _drizzleorm.sql)`LOWER(${_schema.plants.commonName})`, taxonomy.commonName.toLowerCase())));
  // Get similar families for suggestions
  const similarFamilies =
  /* istanbul ignore next */
  (cov_1s09av2jvm().s[73]++, await _db.db.select({
    family: _schema.plants.family
  }).from(_schema.plants).where((0, _drizzleorm.ilike)(_schema.plants.family, `%${taxonomy.family.substring(0, 3)}%`)).groupBy(_schema.plants.family).limit(5));
  // Get similar genera for suggestions
  const similarGenera =
  /* istanbul ignore next */
  (cov_1s09av2jvm().s[74]++, await _db.db.select({
    genus: _schema.plants.genus
  }).from(_schema.plants).where((0, _drizzleorm.ilike)(_schema.plants.genus, `%${taxonomy.genus.substring(0, 3)}%`)).groupBy(_schema.plants.genus).limit(5));
  /* istanbul ignore next */
  cov_1s09av2jvm().s[75]++;
  if (exactDuplicates.length > 0) {
    /* istanbul ignore next */
    cov_1s09av2jvm().b[26][0]++;
    cov_1s09av2jvm().s[76]++;
    errors.push('A plant with this exact taxonomy already exists');
  } else
  /* istanbul ignore next */
  {
    cov_1s09av2jvm().b[26][1]++;
  }
  cov_1s09av2jvm().s[77]++;
  if (
  /* istanbul ignore next */
  (cov_1s09av2jvm().b[28][0]++, commonNameConflicts.length > 0) &&
  /* istanbul ignore next */
  (cov_1s09av2jvm().b[28][1]++, !exactDuplicates.some(dup => {
    /* istanbul ignore next */
    cov_1s09av2jvm().f[21]++;
    cov_1s09av2jvm().s[78]++;
    return dup.commonName.toLowerCase() === taxonomy.commonName.toLowerCase();
  }))) {
    /* istanbul ignore next */
    cov_1s09av2jvm().b[27][0]++;
    cov_1s09av2jvm().s[79]++;
    warnings.push('Another plant already uses this common name');
  } else
  /* istanbul ignore next */
  {
    cov_1s09av2jvm().b[27][1]++;
  }
  cov_1s09av2jvm().s[80]++;
  suggestions.family = similarFamilies.map(f => {
    /* istanbul ignore next */
    cov_1s09av2jvm().f[22]++;
    cov_1s09av2jvm().s[81]++;
    return f.family;
  });
  /* istanbul ignore next */
  cov_1s09av2jvm().s[82]++;
  suggestions.genus = similarGenera.map(g => {
    /* istanbul ignore next */
    cov_1s09av2jvm().f[23]++;
    cov_1s09av2jvm().s[83]++;
    return g.genus;
  });
  /* istanbul ignore next */
  cov_1s09av2jvm().s[84]++;
  return {
    isValid: errors.length === 0,
    errors,
    warnings,
    suggestions,
    duplicates: exactDuplicates.map(plant => {
      /* istanbul ignore next */
      cov_1s09av2jvm().f[24]++;
      cov_1s09av2jvm().s[85]++;
      return {
        id: plant.id,
        family: plant.family,
        genus: plant.genus,
        species: plant.species,
        commonName: plant.commonName,
        isVerified: plant.isVerified
      };
    })
  };
}
async function getTaxonomyHierarchy() {
  /* istanbul ignore next */
  cov_1s09av2jvm().f[25]++;
  const hierarchy =
  /* istanbul ignore next */
  (cov_1s09av2jvm().s[86]++, await _db.db.select({
    family: _schema.plants.family,
    genus: _schema.plants.genus,
    species: _schema.plants.species,
    plantCount: (0, _drizzleorm.count)()
  }).from(_schema.plants).groupBy(_schema.plants.family, _schema.plants.genus, _schema.plants.species).orderBy((0, _drizzleorm.asc)(_schema.plants.family), (0, _drizzleorm.asc)(_schema.plants.genus), (0, _drizzleorm.asc)(_schema.plants.species)));
  // Group by family and genus
  const familyMap =
  /* istanbul ignore next */
  (cov_1s09av2jvm().s[87]++, new Map());
  /* istanbul ignore next */
  cov_1s09av2jvm().s[88]++;
  hierarchy.forEach(item => {
    /* istanbul ignore next */
    cov_1s09av2jvm().f[26]++;
    cov_1s09av2jvm().s[89]++;
    if (!familyMap.has(item.family)) {
      /* istanbul ignore next */
      cov_1s09av2jvm().b[29][0]++;
      cov_1s09av2jvm().s[90]++;
      familyMap.set(item.family, {
        name: item.family,
        count: 0,
        genera: new Map()
      });
    } else
    /* istanbul ignore next */
    {
      cov_1s09av2jvm().b[29][1]++;
    }
    const family =
    /* istanbul ignore next */
    (cov_1s09av2jvm().s[91]++, familyMap.get(item.family));
    /* istanbul ignore next */
    cov_1s09av2jvm().s[92]++;
    family.count += item.plantCount;
    /* istanbul ignore next */
    cov_1s09av2jvm().s[93]++;
    if (!family.genera.has(item.genus)) {
      /* istanbul ignore next */
      cov_1s09av2jvm().b[30][0]++;
      cov_1s09av2jvm().s[94]++;
      family.genera.set(item.genus, {
        name: item.genus,
        count: 0,
        species: []
      });
    } else
    /* istanbul ignore next */
    {
      cov_1s09av2jvm().b[30][1]++;
    }
    const genus =
    /* istanbul ignore next */
    (cov_1s09av2jvm().s[95]++, family.genera.get(item.genus));
    /* istanbul ignore next */
    cov_1s09av2jvm().s[96]++;
    genus.count += item.plantCount;
    /* istanbul ignore next */
    cov_1s09av2jvm().s[97]++;
    genus.species.push({
      name: item.species,
      count: item.plantCount,
      plants: []
    });
  });
  /* istanbul ignore next */
  cov_1s09av2jvm().s[98]++;
  return {
    families: Array.from(familyMap.values()).map(family => {
      /* istanbul ignore next */
      cov_1s09av2jvm().f[27]++;
      cov_1s09av2jvm().s[99]++;
      return {
        ...family,
        genera: Array.from(family.genera.values())
      };
    })
  };
}
async function deletePlant(id, userId) {
  /* istanbul ignore next */
  cov_1s09av2jvm().f[28]++;
  // Check if plant has any instances
  const [instanceCount] =
  /* istanbul ignore next */
  (cov_1s09av2jvm().s[100]++, await _db.db.select({
    count: (0, _drizzleorm.count)()
  }).from((0, _drizzleorm.sql)`plant_instances`).where((0, _drizzleorm.sql)`plant_id = ${id}`));
  /* istanbul ignore next */
  cov_1s09av2jvm().s[101]++;
  if (instanceCount.count > 0) {
    /* istanbul ignore next */
    cov_1s09av2jvm().b[31][0]++;
    cov_1s09av2jvm().s[102]++;
    throw new Error('Cannot delete plant with existing instances');
  } else
  /* istanbul ignore next */
  {
    cov_1s09av2jvm().b[31][1]++;
  }
  // Check if plant has any propagations
  const [propagationCount] =
  /* istanbul ignore next */
  (cov_1s09av2jvm().s[103]++, await _db.db.select({
    count: (0, _drizzleorm.count)()
  }).from((0, _drizzleorm.sql)`propagations`).where((0, _drizzleorm.sql)`plant_id = ${id}`));
  /* istanbul ignore next */
  cov_1s09av2jvm().s[104]++;
  if (propagationCount.count > 0) {
    /* istanbul ignore next */
    cov_1s09av2jvm().b[32][0]++;
    cov_1s09av2jvm().s[105]++;
    throw new Error('Cannot delete plant with existing propagations');
  } else
  /* istanbul ignore next */
  {
    cov_1s09av2jvm().b[32][1]++;
  }
  // If userId provided, only allow deletion of plants created by that user (unless admin)
  const whereConditions =
  /* istanbul ignore next */
  (cov_1s09av2jvm().s[106]++, [(0, _drizzleorm.eq)(_schema.plants.id, id)]);
  /* istanbul ignore next */
  cov_1s09av2jvm().s[107]++;
  if (userId) {
    /* istanbul ignore next */
    cov_1s09av2jvm().b[33][0]++;
    cov_1s09av2jvm().s[108]++;
    whereConditions.push((0, _drizzleorm.eq)(_schema.plants.createdBy, userId));
  } else
  /* istanbul ignore next */
  {
    cov_1s09av2jvm().b[33][1]++;
  }
  const result =
  /* istanbul ignore next */
  (cov_1s09av2jvm().s[109]++, await _db.db.delete(_schema.plants).where((0, _drizzleorm.and)(...whereConditions)).returning({
    id: _schema.plants.id
  }));
  /* istanbul ignore next */
  cov_1s09av2jvm().s[110]++;
  return result.length > 0;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjcmVhdGVQbGFudCIsImNvdl8xczA5YXYyanZtIiwiZiIsInMiLCJkZWxldGVQbGFudCIsImdldFBsYW50QnlJZCIsImdldFBsYW50c1dpdGhTdGF0cyIsImdldFF1aWNrU2VsZWN0UGxhbnRzIiwiZ2V0VGF4b25vbXlIaWVyYXJjaHkiLCJzZWFyY2hQbGFudHMiLCJ1cGRhdGVQbGFudCIsInZhbGlkYXRlUGxhbnRUYXhvbm9teSIsImJ1aWxkUGxhbnRWaXNpYmlsaXR5RmlsdGVyIiwiY3VycmVudFVzZXJJZCIsImIiLCJfZHJpenpsZW9ybSIsImVxIiwiX3NjaGVtYSIsInBsYW50cyIsImlzVmVyaWZpZWQiLCJvciIsImFuZCIsImNyZWF0ZWRCeSIsInNxbCIsInVzZXJzIiwiaWQiLCJpc0N1cmF0b3IiLCJkYXRhIiwidXNlcklkIiwicGxhbnREYXRhIiwibmV3UGxhbnQiLCJfZGIiLCJkYiIsImluc2VydCIsInZhbHVlcyIsInJldHVybmluZyIsIl9wbGFudHR5cGVzIiwicGxhbnRIZWxwZXJzIiwiZW5oYW5jZVBsYW50IiwidXBkYXRlRGF0YSIsInVwZGF0ZWRQbGFudCIsInVwZGF0ZSIsInNldCIsInVwZGF0ZWRBdCIsIkRhdGUiLCJ3aGVyZSIsInBsYW50IiwicXVlcnkiLCJmaW5kRmlyc3QiLCJ3aXRoIiwiY29sdW1ucyIsIm5hbWUiLCJmaWx0ZXIiLCJsaW1pdCIsIm9mZnNldCIsImNvbmRpdGlvbnMiLCJwdXNoIiwiZmFtaWx5IiwiaWxpa2UiLCJnZW51cyIsInVuZGVmaW5lZCIsIndoZXJlQ2xhdXNlIiwicGxhbnRzV2l0aFN0YXRzIiwic2VsZWN0Iiwic3BlY2llcyIsImN1bHRpdmFyIiwiY29tbW9uTmFtZSIsImNhcmVJbnN0cnVjdGlvbnMiLCJkZWZhdWx0SW1hZ2UiLCJjcmVhdGVkQXQiLCJpbnN0YW5jZUNvdW50IiwicHJvcGFnYXRpb25Db3VudCIsImxhc3RVc2VkIiwiZnJvbSIsIm9yZGVyQnkiLCJkZXNjIiwibWFwIiwicG9wdWxhcml0eVNjb3JlIiwic2VhcmNoUGFyYW1zIiwib3B0aW9ucyIsInN0YXJ0VGltZSIsIm5vdyIsImluY2x1ZGVVbnZlcmlmaWVkIiwic2VhcmNoQ29uZGl0aW9ucyIsInNlYXJjaFRlcm0iLCJ0b0xvd2VyQ2FzZSIsInVzZXJDb250ZXh0IiwiZmlsdGVycyIsInRvdGFsQ291bnQiLCJjb3VudCIsInJlc3VsdHMiLCJzY29yZSIsImFzYyIsInNlYXJjaFRpbWUiLCJyZXN1bHQiLCJoYXNNb3JlIiwicmVjZW50UXVlcnkiLCJpbm5lckpvaW4iLCJQcm9taXNlIiwicmVzb2x2ZSIsInBvcHVsYXJRdWVyeSIsImxlZnRKb2luIiwiZ3JvdXBCeSIsInZlcmlmaWVkUXVlcnkiLCJyZWNlbnQiLCJwb3B1bGFyIiwidmVyaWZpZWQiLCJhbGwiLCJBcnJheSIsImlzQXJyYXkiLCJfaW5zdGFuY2VDb3VudCIsInRheG9ub215IiwiZXJyb3JzIiwid2FybmluZ3MiLCJzdWdnZXN0aW9ucyIsImV4YWN0RHVwbGljYXRlcyIsImNvbW1vbk5hbWVDb25mbGljdHMiLCJzaW1pbGFyRmFtaWxpZXMiLCJzdWJzdHJpbmciLCJzaW1pbGFyR2VuZXJhIiwibGVuZ3RoIiwic29tZSIsImR1cCIsImciLCJpc1ZhbGlkIiwiZHVwbGljYXRlcyIsImhpZXJhcmNoeSIsInBsYW50Q291bnQiLCJmYW1pbHlNYXAiLCJNYXAiLCJmb3JFYWNoIiwiaXRlbSIsImhhcyIsImdlbmVyYSIsImdldCIsImZhbWlsaWVzIiwiRXJyb3IiLCJ3aGVyZUNvbmRpdGlvbnMiLCJkZWxldGUiXSwic291cmNlcyI6WyIvVXNlcnMvc3RlZmFuYmVra2VyL3Byb2plY3RzL2ZhbmN5LXBsYW50aWVzL3NyYy9saWIvZGIvcXVlcmllcy9wbGFudC10YXhvbm9teS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBkYiB9IGZyb20gJ0AvbGliL2RiJztcbmltcG9ydCB7IHBsYW50cywgdXNlcnMgfSBmcm9tICdAL2xpYi9kYi9zY2hlbWEnO1xuaW1wb3J0IHsgZXEsIGFuZCwgb3IsIGlsaWtlLCBkZXNjLCBhc2MsIHNxbCwgY291bnQgfSBmcm9tICdkcml6emxlLW9ybSc7XG5pbXBvcnQgdHlwZSB7IFxuICBQbGFudFNlYXJjaCwgXG4gIFBsYW50RmlsdGVyLCBcbiAgQ3JlYXRlUGxhbnQsXG4gIFVwZGF0ZVBsYW50XG59IGZyb20gJ0AvbGliL3ZhbGlkYXRpb24vcGxhbnQtc2NoZW1hcyc7XG5pbXBvcnQgdHlwZSB7IFxuICBQbGFudFNlYXJjaFJlc3VsdCwgXG4gIEVuaGFuY2VkUGxhbnQsIFxuICBQbGFudFdpdGhTdGF0cyxcbiAgVGF4b25vbXlWYWxpZGF0aW9uUmVzdWx0LFxuICBQbGFudExvb2t1cE9wdGlvbnMsXG4gIFF1aWNrU2VsZWN0UGxhbnRzXG59IGZyb20gJ0AvbGliL3R5cGVzL3BsYW50LXR5cGVzJztcbmltcG9ydCB7IHBsYW50SGVscGVycyB9IGZyb20gJ0AvbGliL3R5cGVzL3BsYW50LXR5cGVzJztcblxuLy8gSGVscGVyIGZ1bmN0aW9uIHRvIGJ1aWxkIHBsYW50IHZpc2liaWxpdHkgY29uZGl0aW9uc1xuZnVuY3Rpb24gYnVpbGRQbGFudFZpc2liaWxpdHlGaWx0ZXIoY3VycmVudFVzZXJJZD86IG51bWJlcikge1xuICBpZiAoIWN1cnJlbnRVc2VySWQpIHtcbiAgICAvLyBJZiBubyB1c2VyIGNvbnRleHQsIG9ubHkgc2hvdyB2ZXJpZmllZCBwbGFudHNcbiAgICByZXR1cm4gZXEocGxhbnRzLmlzVmVyaWZpZWQsIHRydWUpO1xuICB9XG5cbiAgLy8gUGxhbnRzIGFyZSB2aXNpYmxlIGlmOlxuICAvLyAxLiBUaGV5IGFyZSB2ZXJpZmllZCAocHVibGljKVxuICAvLyAyLiBUaGV5IHdlcmUgY3JlYXRlZCBieSBhIGN1cmF0b3IgKHB1YmxpYylcbiAgLy8gMy4gVGhleSB3ZXJlIGNyZWF0ZWQgYnkgdGhlIGN1cnJlbnQgdXNlciAocHJpdmF0ZSlcbiAgcmV0dXJuIG9yKFxuICAgIGVxKHBsYW50cy5pc1ZlcmlmaWVkLCB0cnVlKSxcbiAgICBhbmQoXG4gICAgICBlcShwbGFudHMuY3JlYXRlZEJ5LCBjdXJyZW50VXNlcklkKVxuICAgICksXG4gICAgLy8gUGxhbnRzIGNyZWF0ZWQgYnkgY3VyYXRvcnMgYXJlIHZpc2libGUgdG8gYWxsXG4gICAgc3FsYEVYSVNUUyAoXG4gICAgICBTRUxFQ1QgMSBGUk9NICR7dXNlcnN9IFxuICAgICAgV0hFUkUgJHt1c2Vycy5pZH0gPSAke3BsYW50cy5jcmVhdGVkQnl9IFxuICAgICAgQU5EICR7dXNlcnMuaXNDdXJhdG9yfSA9IHRydWVcbiAgICApYFxuICApO1xufVxuXG4vLyBDcmVhdGUgYSBuZXcgcGxhbnQgdGF4b25vbXkgZW50cnlcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjcmVhdGVQbGFudChkYXRhOiBDcmVhdGVQbGFudCwgdXNlcklkPzogbnVtYmVyKTogUHJvbWlzZTxFbmhhbmNlZFBsYW50PiB7XG4gIGNvbnN0IHBsYW50RGF0YSA9IHtcbiAgICAuLi5kYXRhLFxuICAgIGNyZWF0ZWRCeTogdXNlcklkIHx8IGRhdGEuY3JlYXRlZEJ5LFxuICB9O1xuXG4gIGNvbnN0IFtuZXdQbGFudF0gPSBhd2FpdCBkYi5pbnNlcnQocGxhbnRzKS52YWx1ZXMocGxhbnREYXRhKS5yZXR1cm5pbmcoKTtcbiAgcmV0dXJuIHBsYW50SGVscGVycy5lbmhhbmNlUGxhbnQobmV3UGxhbnQpO1xufVxuXG4vLyBVcGRhdGUgYW4gZXhpc3RpbmcgcGxhbnQgdGF4b25vbXkgZW50cnlcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB1cGRhdGVQbGFudChkYXRhOiBVcGRhdGVQbGFudCk6IFByb21pc2U8RW5oYW5jZWRQbGFudCB8IG51bGw+IHtcbiAgY29uc3QgeyBpZCwgLi4udXBkYXRlRGF0YSB9ID0gZGF0YTtcbiAgXG4gIGNvbnN0IFt1cGRhdGVkUGxhbnRdID0gYXdhaXQgZGJcbiAgICAudXBkYXRlKHBsYW50cylcbiAgICAuc2V0KHtcbiAgICAgIC4uLnVwZGF0ZURhdGEsXG4gICAgICB1cGRhdGVkQXQ6IG5ldyBEYXRlKCksXG4gICAgfSlcbiAgICAud2hlcmUoZXEocGxhbnRzLmlkLCBpZCkpXG4gICAgLnJldHVybmluZygpO1xuXG4gIHJldHVybiB1cGRhdGVkUGxhbnQgPyBwbGFudEhlbHBlcnMuZW5oYW5jZVBsYW50KHVwZGF0ZWRQbGFudCkgOiBudWxsO1xufVxuXG4vLyBHZXQgcGxhbnQgYnkgSURcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRQbGFudEJ5SWQoaWQ6IG51bWJlcik6IFByb21pc2U8RW5oYW5jZWRQbGFudCB8IG51bGw+IHtcbiAgY29uc3QgcGxhbnQgPSBhd2FpdCBkYi5xdWVyeS5wbGFudHMuZmluZEZpcnN0KHtcbiAgICB3aGVyZTogZXEocGxhbnRzLmlkLCBpZCksXG4gICAgd2l0aDoge1xuICAgICAgY3JlYXRlZEJ5OiB7XG4gICAgICAgIGNvbHVtbnM6IHtcbiAgICAgICAgICBpZDogdHJ1ZSxcbiAgICAgICAgICBuYW1lOiB0cnVlLFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICB9LFxuICB9KTtcblxuICByZXR1cm4gcGxhbnQgPyBwbGFudEhlbHBlcnMuZW5oYW5jZVBsYW50KHBsYW50KSA6IG51bGw7XG59XG5cbi8vIEdldCBwbGFudHMgd2l0aCB1c2FnZSBzdGF0aXN0aWNzXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0UGxhbnRzV2l0aFN0YXRzKFxuICBmaWx0ZXI6IFBsYW50RmlsdGVyID0geyBsaW1pdDogMjAsIG9mZnNldDogMCB9LFxuICB1c2VySWQ/OiBudW1iZXJcbik6IFByb21pc2U8UGxhbnRXaXRoU3RhdHNbXT4ge1xuICBjb25zdCBjb25kaXRpb25zID0gW107XG4gIFxuICAvLyBBZGQgdmlzaWJpbGl0eSBmaWx0ZXIgYmFzZWQgb24gY3VyYXRvci91c2VyIGxvZ2ljXG4gIGNvbmRpdGlvbnMucHVzaChidWlsZFBsYW50VmlzaWJpbGl0eUZpbHRlcih1c2VySWQpKTtcbiAgXG4gIGlmIChmaWx0ZXIuZmFtaWx5KSB7XG4gICAgY29uZGl0aW9ucy5wdXNoKGlsaWtlKHBsYW50cy5mYW1pbHksIGAlJHtmaWx0ZXIuZmFtaWx5fSVgKSk7XG4gIH1cbiAgaWYgKGZpbHRlci5nZW51cykge1xuICAgIGNvbmRpdGlvbnMucHVzaChpbGlrZShwbGFudHMuZ2VudXMsIGAlJHtmaWx0ZXIuZ2VudXN9JWApKTtcbiAgfVxuICBpZiAoZmlsdGVyLmlzVmVyaWZpZWQgIT09IHVuZGVmaW5lZCkge1xuICAgIGNvbmRpdGlvbnMucHVzaChlcShwbGFudHMuaXNWZXJpZmllZCwgZmlsdGVyLmlzVmVyaWZpZWQpKTtcbiAgfVxuICBpZiAoZmlsdGVyLmNyZWF0ZWRCeSkge1xuICAgIGNvbmRpdGlvbnMucHVzaChlcShwbGFudHMuY3JlYXRlZEJ5LCBmaWx0ZXIuY3JlYXRlZEJ5KSk7XG4gIH1cblxuICBjb25zdCB3aGVyZUNsYXVzZSA9IGFuZCguLi5jb25kaXRpb25zKTtcblxuICAvLyBRdWVyeSB3aXRoIHN1YnF1ZXJpZXMgZm9yIHN0YXRpc3RpY3NcbiAgY29uc3QgcGxhbnRzV2l0aFN0YXRzID0gYXdhaXQgZGJcbiAgICAuc2VsZWN0KHtcbiAgICAgIGlkOiBwbGFudHMuaWQsXG4gICAgICBmYW1pbHk6IHBsYW50cy5mYW1pbHksXG4gICAgICBnZW51czogcGxhbnRzLmdlbnVzLFxuICAgICAgc3BlY2llczogcGxhbnRzLnNwZWNpZXMsXG4gICAgICBjdWx0aXZhcjogcGxhbnRzLmN1bHRpdmFyLFxuICAgICAgY29tbW9uTmFtZTogcGxhbnRzLmNvbW1vbk5hbWUsXG4gICAgICBjYXJlSW5zdHJ1Y3Rpb25zOiBwbGFudHMuY2FyZUluc3RydWN0aW9ucyxcbiAgICAgIGRlZmF1bHRJbWFnZTogcGxhbnRzLmRlZmF1bHRJbWFnZSxcbiAgICAgIGNyZWF0ZWRCeTogcGxhbnRzLmNyZWF0ZWRCeSxcbiAgICAgIGlzVmVyaWZpZWQ6IHBsYW50cy5pc1ZlcmlmaWVkLFxuICAgICAgY3JlYXRlZEF0OiBwbGFudHMuY3JlYXRlZEF0LFxuICAgICAgdXBkYXRlZEF0OiBwbGFudHMudXBkYXRlZEF0LFxuICAgICAgaW5zdGFuY2VDb3VudDogc3FsPG51bWJlcj5gKFxuICAgICAgICBTRUxFQ1QgQ09VTlQoKikgRlJPTSBwbGFudF9pbnN0YW5jZXMgXG4gICAgICAgIFdIRVJFIHBsYW50X2lkID0gJHtwbGFudHMuaWR9XG4gICAgICAgICR7dXNlcklkID8gc3FsYEFORCB1c2VyX2lkID0gJHt1c2VySWR9YCA6IHNxbGBgfVxuICAgICAgKWAsXG4gICAgICBwcm9wYWdhdGlvbkNvdW50OiBzcWw8bnVtYmVyPmAoXG4gICAgICAgIFNFTEVDVCBDT1VOVCgqKSBGUk9NIHByb3BhZ2F0aW9ucyBcbiAgICAgICAgV0hFUkUgcGxhbnRfaWQgPSAke3BsYW50cy5pZH1cbiAgICAgICAgJHt1c2VySWQgPyBzcWxgQU5EIHVzZXJfaWQgPSAke3VzZXJJZH1gIDogc3FsYGB9XG4gICAgICApYCxcbiAgICAgIGxhc3RVc2VkOiBzcWw8RGF0ZSB8IG51bGw+YChcbiAgICAgICAgU0VMRUNUIE1BWChjcmVhdGVkX2F0KSBGUk9NIChcbiAgICAgICAgICBTRUxFQ1QgY3JlYXRlZF9hdCBGUk9NIHBsYW50X2luc3RhbmNlcyBXSEVSRSBwbGFudF9pZCA9ICR7cGxhbnRzLmlkfVxuICAgICAgICAgICR7dXNlcklkID8gc3FsYEFORCB1c2VyX2lkID0gJHt1c2VySWR9YCA6IHNxbGBgfVxuICAgICAgICAgIFVOSU9OIEFMTFxuICAgICAgICAgIFNFTEVDVCBjcmVhdGVkX2F0IEZST00gcHJvcGFnYXRpb25zIFdIRVJFIHBsYW50X2lkID0gJHtwbGFudHMuaWR9XG4gICAgICAgICAgJHt1c2VySWQgPyBzcWxgQU5EIHVzZXJfaWQgPSAke3VzZXJJZH1gIDogc3FsYGB9XG4gICAgICAgICkgQVMgdXNhZ2VfZGF0ZXNcbiAgICAgIClgLFxuICAgIH0pXG4gICAgLmZyb20ocGxhbnRzKVxuICAgIC53aGVyZSh3aGVyZUNsYXVzZSlcbiAgICAub3JkZXJCeShkZXNjKHBsYW50cy51cGRhdGVkQXQpKVxuICAgIC5saW1pdChmaWx0ZXIubGltaXQgfHwgMjApXG4gICAgLm9mZnNldChmaWx0ZXIub2Zmc2V0IHx8IDApO1xuXG4gIHJldHVybiBwbGFudHNXaXRoU3RhdHMubWFwKHBsYW50ID0+ICh7XG4gICAgLi4ucGxhbnRIZWxwZXJzLmVuaGFuY2VQbGFudChwbGFudCksXG4gICAgaW5zdGFuY2VDb3VudDogcGxhbnQuaW5zdGFuY2VDb3VudCxcbiAgICBwcm9wYWdhdGlvbkNvdW50OiBwbGFudC5wcm9wYWdhdGlvbkNvdW50LFxuICAgIHBvcHVsYXJpdHlTY29yZTogcGxhbnQuaW5zdGFuY2VDb3VudCArIHBsYW50LnByb3BhZ2F0aW9uQ291bnQgKiAwLjUsXG4gICAgbGFzdFVzZWQ6IHBsYW50Lmxhc3RVc2VkIHx8IHVuZGVmaW5lZCxcbiAgfSkpO1xufVxuXG4vLyBGdXp6eSBzZWFyY2ggZm9yIHBsYW50c1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNlYXJjaFBsYW50cyhcbiAgc2VhcmNoUGFyYW1zOiBQbGFudFNlYXJjaCxcbiAgb3B0aW9uczogUGxhbnRMb29rdXBPcHRpb25zID0ge31cbik6IFByb21pc2U8UGxhbnRTZWFyY2hSZXN1bHQ+IHtcbiAgY29uc3Qgc3RhcnRUaW1lID0gRGF0ZS5ub3coKTtcbiAgY29uc3QgeyBxdWVyeSwgbGltaXQgPSAyMCwgb2Zmc2V0ID0gMCwgaW5jbHVkZVVudmVyaWZpZWQgPSB0cnVlIH0gPSBzZWFyY2hQYXJhbXM7XG4gIFxuICAvLyBCdWlsZCBzZWFyY2ggY29uZGl0aW9uc1xuICBjb25zdCBzZWFyY2hDb25kaXRpb25zID0gW107XG4gIGNvbnN0IHNlYXJjaFRlcm0gPSBgJSR7cXVlcnkudG9Mb3dlckNhc2UoKX0lYDtcbiAgXG4gIC8vIEFkZCB2aXNpYmlsaXR5IGZpbHRlciBiYXNlZCBvbiBjdXJhdG9yL3VzZXIgbG9naWNcbiAgc2VhcmNoQ29uZGl0aW9ucy5wdXNoKGJ1aWxkUGxhbnRWaXNpYmlsaXR5RmlsdGVyKG9wdGlvbnMudXNlckNvbnRleHQ/LnVzZXJJZCkpO1xuICBcbiAgc2VhcmNoQ29uZGl0aW9ucy5wdXNoKFxuICAgIG9yKFxuICAgICAgaWxpa2UocGxhbnRzLmZhbWlseSwgc2VhcmNoVGVybSksXG4gICAgICBpbGlrZShwbGFudHMuZ2VudXMsIHNlYXJjaFRlcm0pLFxuICAgICAgaWxpa2UocGxhbnRzLnNwZWNpZXMsIHNlYXJjaFRlcm0pLFxuICAgICAgaWxpa2UocGxhbnRzLmNvbW1vbk5hbWUsIHNlYXJjaFRlcm0pLFxuICAgICAgLy8gU2VhcmNoIGluIHNjaWVudGlmaWMgbmFtZSBjb21iaW5hdGlvblxuICAgICAgc3FsYExPV0VSKENPTkNBVCgke3BsYW50cy5nZW51c30sICcgJywgJHtwbGFudHMuc3BlY2llc30pKSBMSUtFICR7c2VhcmNoVGVybX1gLFxuICAgICAgLy8gU2VhcmNoIGluIGZ1bGwgdGF4b25vbXlcbiAgICAgIHNxbGBMT1dFUihDT05DQVQoJHtwbGFudHMuZmFtaWx5fSwgJyAnLCAke3BsYW50cy5nZW51c30sICcgJywgJHtwbGFudHMuc3BlY2llc30pKSBMSUtFICR7c2VhcmNoVGVybX1gXG4gICAgKVxuICApO1xuXG4gIGlmICghaW5jbHVkZVVudmVyaWZpZWQpIHtcbiAgICBzZWFyY2hDb25kaXRpb25zLnB1c2goZXEocGxhbnRzLmlzVmVyaWZpZWQsIHRydWUpKTtcbiAgfVxuXG4gIGlmIChvcHRpb25zLmZpbHRlcnM/LmZhbWlseSkge1xuICAgIHNlYXJjaENvbmRpdGlvbnMucHVzaChpbGlrZShwbGFudHMuZmFtaWx5LCBgJSR7b3B0aW9ucy5maWx0ZXJzLmZhbWlseX0lYCkpO1xuICB9XG5cbiAgaWYgKG9wdGlvbnMuZmlsdGVycz8uZ2VudXMpIHtcbiAgICBzZWFyY2hDb25kaXRpb25zLnB1c2goaWxpa2UocGxhbnRzLmdlbnVzLCBgJSR7b3B0aW9ucy5maWx0ZXJzLmdlbnVzfSVgKSk7XG4gIH1cblxuICBpZiAob3B0aW9ucy5maWx0ZXJzPy5pc1ZlcmlmaWVkICE9PSB1bmRlZmluZWQpIHtcbiAgICBzZWFyY2hDb25kaXRpb25zLnB1c2goZXEocGxhbnRzLmlzVmVyaWZpZWQsIG9wdGlvbnMuZmlsdGVycy5pc1ZlcmlmaWVkKSk7XG4gIH1cblxuICBjb25zdCB3aGVyZUNsYXVzZSA9IGFuZCguLi5zZWFyY2hDb25kaXRpb25zKTtcblxuICAvLyBHZXQgdG90YWwgY291bnRcbiAgY29uc3QgW3sgdG90YWxDb3VudCB9XSA9IGF3YWl0IGRiXG4gICAgLnNlbGVjdCh7IHRvdGFsQ291bnQ6IGNvdW50KCkgfSlcbiAgICAuZnJvbShwbGFudHMpXG4gICAgLndoZXJlKHdoZXJlQ2xhdXNlKTtcblxuICAvLyBHZXQgc2VhcmNoIHJlc3VsdHMgd2l0aCByZWxldmFuY2Ugc2NvcmluZ1xuICBjb25zdCByZXN1bHRzID0gYXdhaXQgZGJcbiAgICAuc2VsZWN0KHtcbiAgICAgIGlkOiBwbGFudHMuaWQsXG4gICAgICBmYW1pbHk6IHBsYW50cy5mYW1pbHksXG4gICAgICBnZW51czogcGxhbnRzLmdlbnVzLFxuICAgICAgc3BlY2llczogcGxhbnRzLnNwZWNpZXMsXG4gICAgICBjb21tb25OYW1lOiBwbGFudHMuY29tbW9uTmFtZSxcbiAgICAgIGlzVmVyaWZpZWQ6IHBsYW50cy5pc1ZlcmlmaWVkLFxuICAgICAgLy8gU2ltcGxlIHJlbGV2YW5jZSBzY29yaW5nIGJhc2VkIG9uIG1hdGNoIHBvc2l0aW9uIGFuZCBmaWVsZCBwcmlvcml0eVxuICAgICAgc2NvcmU6IHNxbDxudW1iZXI+YFxuICAgICAgICBDQVNFIFxuICAgICAgICAgIFdIRU4gTE9XRVIoJHtwbGFudHMuY29tbW9uTmFtZX0pID0gTE9XRVIoJHtxdWVyeX0pIFRIRU4gMTAwXG4gICAgICAgICAgV0hFTiBMT1dFUigke3BsYW50cy5jb21tb25OYW1lfSkgTElLRSAke2Ake3F1ZXJ5LnRvTG93ZXJDYXNlKCl9JWB9IFRIRU4gOTBcbiAgICAgICAgICBXSEVOIExPV0VSKENPTkNBVCgke3BsYW50cy5nZW51c30sICcgJywgJHtwbGFudHMuc3BlY2llc30pKSA9IExPV0VSKCR7cXVlcnl9KSBUSEVOIDg1XG4gICAgICAgICAgV0hFTiBMT1dFUihDT05DQVQoJHtwbGFudHMuZ2VudXN9LCAnICcsICR7cGxhbnRzLnNwZWNpZXN9KSkgTElLRSAke2Ake3F1ZXJ5LnRvTG93ZXJDYXNlKCl9JWB9IFRIRU4gODBcbiAgICAgICAgICBXSEVOIExPV0VSKCR7cGxhbnRzLmdlbnVzfSkgPSBMT1dFUigke3F1ZXJ5fSkgVEhFTiA3NVxuICAgICAgICAgIFdIRU4gTE9XRVIoJHtwbGFudHMuc3BlY2llc30pID0gTE9XRVIoJHtxdWVyeX0pIFRIRU4gNzBcbiAgICAgICAgICBXSEVOIExPV0VSKCR7cGxhbnRzLmZhbWlseX0pID0gTE9XRVIoJHtxdWVyeX0pIFRIRU4gNjVcbiAgICAgICAgICBXSEVOIExPV0VSKCR7cGxhbnRzLmNvbW1vbk5hbWV9KSBMSUtFICR7c2VhcmNoVGVybX0gVEhFTiA2MFxuICAgICAgICAgIFdIRU4gTE9XRVIoJHtwbGFudHMuZ2VudXN9KSBMSUtFICR7c2VhcmNoVGVybX0gVEhFTiA1MFxuICAgICAgICAgIFdIRU4gTE9XRVIoJHtwbGFudHMuc3BlY2llc30pIExJS0UgJHtzZWFyY2hUZXJtfSBUSEVOIDQ1XG4gICAgICAgICAgV0hFTiBMT1dFUigke3BsYW50cy5mYW1pbHl9KSBMSUtFICR7c2VhcmNoVGVybX0gVEhFTiA0MFxuICAgICAgICAgIEVMU0UgMzBcbiAgICAgICAgRU5EXG4gICAgICBgLFxuICAgIH0pXG4gICAgLmZyb20ocGxhbnRzKVxuICAgIC53aGVyZSh3aGVyZUNsYXVzZSlcbiAgICAub3JkZXJCeShkZXNjKHNxbDxudW1iZXI+YFxuICAgICAgICBDQVNFIFxuICAgICAgICAgIFdIRU4gTE9XRVIoJHtwbGFudHMuY29tbW9uTmFtZX0pID0gTE9XRVIoJHtxdWVyeX0pIFRIRU4gMTAwXG4gICAgICAgICAgV0hFTiBMT1dFUigke3BsYW50cy5jb21tb25OYW1lfSkgTElLRSAke2Ake3F1ZXJ5LnRvTG93ZXJDYXNlKCl9JWB9IFRIRU4gOTBcbiAgICAgICAgICBXSEVOIExPV0VSKENPTkNBVCgke3BsYW50cy5nZW51c30sICcgJywgJHtwbGFudHMuc3BlY2llc30pKSA9IExPV0VSKCR7cXVlcnl9KSBUSEVOIDg1XG4gICAgICAgICAgV0hFTiBMT1dFUihDT05DQVQoJHtwbGFudHMuZ2VudXN9LCAnICcsICR7cGxhbnRzLnNwZWNpZXN9KSkgTElLRSAke2Ake3F1ZXJ5LnRvTG93ZXJDYXNlKCl9JWB9IFRIRU4gODBcbiAgICAgICAgICBXSEVOIExPV0VSKCR7cGxhbnRzLmdlbnVzfSkgPSBMT1dFUigke3F1ZXJ5fSkgVEhFTiA3NVxuICAgICAgICAgIFdIRU4gTE9XRVIoJHtwbGFudHMuc3BlY2llc30pID0gTE9XRVIoJHtxdWVyeX0pIFRIRU4gNzBcbiAgICAgICAgICBXSEVOIExPV0VSKCR7cGxhbnRzLmZhbWlseX0pID0gTE9XRVIoJHtxdWVyeX0pIFRIRU4gNjVcbiAgICAgICAgICBXSEVOIExPV0VSKCR7cGxhbnRzLmNvbW1vbk5hbWV9KSBMSUtFICR7c2VhcmNoVGVybX0gVEhFTiA2MFxuICAgICAgICAgIFdIRU4gTE9XRVIoJHtwbGFudHMuZ2VudXN9KSBMSUtFICR7c2VhcmNoVGVybX0gVEhFTiA1MFxuICAgICAgICAgIFdIRU4gTE9XRVIoJHtwbGFudHMuc3BlY2llc30pIExJS0UgJHtzZWFyY2hUZXJtfSBUSEVOIDQ1XG4gICAgICAgICAgV0hFTiBMT1dFUigke3BsYW50cy5mYW1pbHl9KSBMSUtFICR7c2VhcmNoVGVybX0gVEhFTiA0MFxuICAgICAgICAgIEVMU0UgMzBcbiAgICAgICAgRU5EXG4gICAgICBgKSwgZGVzYyhwbGFudHMuaXNWZXJpZmllZCksIGFzYyhwbGFudHMuY29tbW9uTmFtZSkpXG4gICAgLmxpbWl0KGxpbWl0KVxuICAgIC5vZmZzZXQob2Zmc2V0KTtcblxuICBjb25zdCBzZWFyY2hUaW1lID0gRGF0ZS5ub3coKSAtIHN0YXJ0VGltZTtcblxuICByZXR1cm4ge1xuICAgIHBsYW50czogcmVzdWx0cy5tYXAocmVzdWx0ID0+ICh7XG4gICAgICAuLi5yZXN1bHQsXG4gICAgICBzY29yZTogcmVzdWx0LnNjb3JlLFxuICAgIH0pKSxcbiAgICB0b3RhbENvdW50LFxuICAgIGhhc01vcmU6IG9mZnNldCArIGxpbWl0IDwgdG90YWxDb3VudCxcbiAgICBzZWFyY2hUaW1lLFxuICB9O1xufVxuXG4vLyBHZXQgcXVpY2sgc2VsZWN0IHBsYW50cyAocmVjZW50LCBwb3B1bGFyLCB2ZXJpZmllZClcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRRdWlja1NlbGVjdFBsYW50cyh1c2VySWQ/OiBudW1iZXIpOiBQcm9taXNlPFF1aWNrU2VsZWN0UGxhbnRzPiB7XG4gIC8vIEdldCByZWNlbnQgcGxhbnRzIChiYXNlZCBvbiB1c2VyJ3MgcmVjZW50IHBsYW50IGluc3RhbmNlcy9wcm9wYWdhdGlvbnMpXG4gIGNvbnN0IHJlY2VudFF1ZXJ5ID0gdXNlcklkID8gZGJcbiAgICAuc2VsZWN0KHtcbiAgICAgIGlkOiBwbGFudHMuaWQsXG4gICAgICBmYW1pbHk6IHBsYW50cy5mYW1pbHksXG4gICAgICBnZW51czogcGxhbnRzLmdlbnVzLFxuICAgICAgc3BlY2llczogcGxhbnRzLnNwZWNpZXMsXG4gICAgICBjb21tb25OYW1lOiBwbGFudHMuY29tbW9uTmFtZSxcbiAgICAgIGlzVmVyaWZpZWQ6IHBsYW50cy5pc1ZlcmlmaWVkLFxuICAgIH0pXG4gICAgLmZyb20ocGxhbnRzKVxuICAgIC5pbm5lckpvaW4oXG4gICAgICBzcWxgKFxuICAgICAgICBTRUxFQ1QgcGxhbnRfaWQsIE1BWChjcmVhdGVkX2F0KSBhcyBsYXN0X3VzZWRcbiAgICAgICAgRlJPTSAoXG4gICAgICAgICAgU0VMRUNUIHBsYW50X2lkLCBjcmVhdGVkX2F0IEZST00gcGxhbnRfaW5zdGFuY2VzIFdIRVJFIHVzZXJfaWQgPSAke3VzZXJJZH1cbiAgICAgICAgICBVTklPTiBBTExcbiAgICAgICAgICBTRUxFQ1QgcGxhbnRfaWQsIGNyZWF0ZWRfYXQgRlJPTSBwcm9wYWdhdGlvbnMgV0hFUkUgdXNlcl9pZCA9ICR7dXNlcklkfVxuICAgICAgICApIHJlY2VudF91c2FnZVxuICAgICAgICBHUk9VUCBCWSBwbGFudF9pZFxuICAgICAgICBPUkRFUiBCWSBsYXN0X3VzZWQgREVTQ1xuICAgICAgICBMSU1JVCAxMFxuICAgICAgKSByZWNlbnRfcGxhbnRzYCxcbiAgICAgIHNxbGByZWNlbnRfcGxhbnRzLnBsYW50X2lkID0gJHtwbGFudHMuaWR9YFxuICAgICkgOiBQcm9taXNlLnJlc29sdmUoW10pO1xuXG4gIC8vIEdldCBwb3B1bGFyIHBsYW50cyAobW9zdCBpbnN0YW5jZXMgYWNyb3NzIGFsbCB1c2VycylcbiAgY29uc3QgcG9wdWxhclF1ZXJ5ID0gZGJcbiAgICAuc2VsZWN0KHtcbiAgICAgIGlkOiBwbGFudHMuaWQsXG4gICAgICBmYW1pbHk6IHBsYW50cy5mYW1pbHksXG4gICAgICBnZW51czogcGxhbnRzLmdlbnVzLFxuICAgICAgc3BlY2llczogcGxhbnRzLnNwZWNpZXMsXG4gICAgICBjb21tb25OYW1lOiBwbGFudHMuY29tbW9uTmFtZSxcbiAgICAgIGlzVmVyaWZpZWQ6IHBsYW50cy5pc1ZlcmlmaWVkLFxuICAgICAgaW5zdGFuY2VDb3VudDogc3FsPG51bWJlcj5gQ09VTlQocGxhbnRfaW5zdGFuY2VzLmlkKWAsXG4gICAgfSlcbiAgICAuZnJvbShwbGFudHMpXG4gICAgLmxlZnRKb2luKHNxbGBwbGFudF9pbnN0YW5jZXNgLCBzcWxgcGxhbnRfaW5zdGFuY2VzLnBsYW50X2lkID0gJHtwbGFudHMuaWR9YClcbiAgICAuZ3JvdXBCeShwbGFudHMuaWQpXG4gICAgLm9yZGVyQnkoc3FsYENPVU5UKHBsYW50X2luc3RhbmNlcy5pZCkgREVTQ2ApXG4gICAgLmxpbWl0KDEwKTtcblxuICAvLyBHZXQgdmVyaWZpZWQgcGxhbnRzIChhZG1pbi12ZXJpZmllZCB0YXhvbm9teSlcbiAgY29uc3QgdmVyaWZpZWRRdWVyeSA9IGRiXG4gICAgLnNlbGVjdCh7XG4gICAgICBpZDogcGxhbnRzLmlkLFxuICAgICAgZmFtaWx5OiBwbGFudHMuZmFtaWx5LFxuICAgICAgZ2VudXM6IHBsYW50cy5nZW51cyxcbiAgICAgIHNwZWNpZXM6IHBsYW50cy5zcGVjaWVzLFxuICAgICAgY29tbW9uTmFtZTogcGxhbnRzLmNvbW1vbk5hbWUsXG4gICAgICBpc1ZlcmlmaWVkOiBwbGFudHMuaXNWZXJpZmllZCxcbiAgICB9KVxuICAgIC5mcm9tKHBsYW50cylcbiAgICAud2hlcmUoZXEocGxhbnRzLmlzVmVyaWZpZWQsIHRydWUpKVxuICAgIC5vcmRlckJ5KGFzYyhwbGFudHMuY29tbW9uTmFtZSkpXG4gICAgLmxpbWl0KDEwKTtcblxuICBjb25zdCBbcmVjZW50LCBwb3B1bGFyLCB2ZXJpZmllZF0gPSBhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgcmVjZW50UXVlcnksXG4gICAgcG9wdWxhclF1ZXJ5LFxuICAgIHZlcmlmaWVkUXVlcnksXG4gIF0pO1xuXG4gIHJldHVybiB7XG4gICAgcmVjZW50OiBBcnJheS5pc0FycmF5KHJlY2VudCkgPyByZWNlbnQgOiBbXSxcbiAgICBwb3B1bGFyOiBwb3B1bGFyLm1hcCgoeyBpbnN0YW5jZUNvdW50OiBfaW5zdGFuY2VDb3VudCwgLi4ucGxhbnQgfSkgPT4gcGxhbnQpLFxuICAgIHZlcmlmaWVkLFxuICB9O1xufVxuXG4vLyBWYWxpZGF0ZSBwbGFudCB0YXhvbm9teSBmb3IgZHVwbGljYXRlcyBhbmQgY29uZmxpY3RzXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gdmFsaWRhdGVQbGFudFRheG9ub215KFxuICB0YXhvbm9teTogUGljazxDcmVhdGVQbGFudCwgJ2ZhbWlseScgfCAnZ2VudXMnIHwgJ3NwZWNpZXMnIHwgJ2NvbW1vbk5hbWUnPlxuKTogUHJvbWlzZTxUYXhvbm9teVZhbGlkYXRpb25SZXN1bHQ+IHtcbiAgY29uc3QgZXJyb3JzOiBzdHJpbmdbXSA9IFtdO1xuICBjb25zdCB3YXJuaW5nczogc3RyaW5nW10gPSBbXTtcbiAgY29uc3Qgc3VnZ2VzdGlvbnMgPSB7XG4gICAgZmFtaWx5OiBbXSBhcyBzdHJpbmdbXSxcbiAgICBnZW51czogW10gYXMgc3RyaW5nW10sXG4gICAgc3BlY2llczogW10gYXMgc3RyaW5nW10sXG4gICAgY29tbW9uTmFtZTogW10gYXMgc3RyaW5nW10sXG4gIH07XG5cbiAgLy8gQ2hlY2sgZm9yIGV4YWN0IHRheG9ub21pYyBkdXBsaWNhdGVzXG4gIGNvbnN0IGV4YWN0RHVwbGljYXRlcyA9IGF3YWl0IGRiXG4gICAgLnNlbGVjdCgpXG4gICAgLmZyb20ocGxhbnRzKVxuICAgIC53aGVyZShcbiAgICAgIGFuZChcbiAgICAgICAgZXEoc3FsYExPV0VSKCR7cGxhbnRzLmZhbWlseX0pYCwgdGF4b25vbXkuZmFtaWx5LnRvTG93ZXJDYXNlKCkpLFxuICAgICAgICBlcShzcWxgTE9XRVIoJHtwbGFudHMuZ2VudXN9KWAsIHRheG9ub215LmdlbnVzLnRvTG93ZXJDYXNlKCkpLFxuICAgICAgICBlcShzcWxgTE9XRVIoJHtwbGFudHMuc3BlY2llc30pYCwgdGF4b25vbXkuc3BlY2llcy50b0xvd2VyQ2FzZSgpKVxuICAgICAgKVxuICAgICk7XG5cbiAgLy8gQ2hlY2sgZm9yIGNvbW1vbiBuYW1lIGNvbmZsaWN0c1xuICBjb25zdCBjb21tb25OYW1lQ29uZmxpY3RzID0gYXdhaXQgZGJcbiAgICAuc2VsZWN0KClcbiAgICAuZnJvbShwbGFudHMpXG4gICAgLndoZXJlKGVxKHNxbGBMT1dFUigke3BsYW50cy5jb21tb25OYW1lfSlgLCB0YXhvbm9teS5jb21tb25OYW1lLnRvTG93ZXJDYXNlKCkpKTtcblxuICAvLyBHZXQgc2ltaWxhciBmYW1pbGllcyBmb3Igc3VnZ2VzdGlvbnNcbiAgY29uc3Qgc2ltaWxhckZhbWlsaWVzID0gYXdhaXQgZGJcbiAgICAuc2VsZWN0KHsgZmFtaWx5OiBwbGFudHMuZmFtaWx5IH0pXG4gICAgLmZyb20ocGxhbnRzKVxuICAgIC53aGVyZShpbGlrZShwbGFudHMuZmFtaWx5LCBgJSR7dGF4b25vbXkuZmFtaWx5LnN1YnN0cmluZygwLCAzKX0lYCkpXG4gICAgLmdyb3VwQnkocGxhbnRzLmZhbWlseSlcbiAgICAubGltaXQoNSk7XG5cbiAgLy8gR2V0IHNpbWlsYXIgZ2VuZXJhIGZvciBzdWdnZXN0aW9uc1xuICBjb25zdCBzaW1pbGFyR2VuZXJhID0gYXdhaXQgZGJcbiAgICAuc2VsZWN0KHsgZ2VudXM6IHBsYW50cy5nZW51cyB9KVxuICAgIC5mcm9tKHBsYW50cylcbiAgICAud2hlcmUoaWxpa2UocGxhbnRzLmdlbnVzLCBgJSR7dGF4b25vbXkuZ2VudXMuc3Vic3RyaW5nKDAsIDMpfSVgKSlcbiAgICAuZ3JvdXBCeShwbGFudHMuZ2VudXMpXG4gICAgLmxpbWl0KDUpO1xuXG4gIGlmIChleGFjdER1cGxpY2F0ZXMubGVuZ3RoID4gMCkge1xuICAgIGVycm9ycy5wdXNoKCdBIHBsYW50IHdpdGggdGhpcyBleGFjdCB0YXhvbm9teSBhbHJlYWR5IGV4aXN0cycpO1xuICB9XG5cbiAgaWYgKGNvbW1vbk5hbWVDb25mbGljdHMubGVuZ3RoID4gMCAmJiBcbiAgICAgICFleGFjdER1cGxpY2F0ZXMuc29tZShkdXAgPT4gZHVwLmNvbW1vbk5hbWUudG9Mb3dlckNhc2UoKSA9PT0gdGF4b25vbXkuY29tbW9uTmFtZS50b0xvd2VyQ2FzZSgpKSkge1xuICAgIHdhcm5pbmdzLnB1c2goJ0Fub3RoZXIgcGxhbnQgYWxyZWFkeSB1c2VzIHRoaXMgY29tbW9uIG5hbWUnKTtcbiAgfVxuXG4gIHN1Z2dlc3Rpb25zLmZhbWlseSA9IHNpbWlsYXJGYW1pbGllcy5tYXAoZiA9PiBmLmZhbWlseSk7XG4gIHN1Z2dlc3Rpb25zLmdlbnVzID0gc2ltaWxhckdlbmVyYS5tYXAoZyA9PiBnLmdlbnVzKTtcblxuICByZXR1cm4ge1xuICAgIGlzVmFsaWQ6IGVycm9ycy5sZW5ndGggPT09IDAsXG4gICAgZXJyb3JzLFxuICAgIHdhcm5pbmdzLFxuICAgIHN1Z2dlc3Rpb25zLFxuICAgIGR1cGxpY2F0ZXM6IGV4YWN0RHVwbGljYXRlcy5tYXAocGxhbnQgPT4gKHtcbiAgICAgIGlkOiBwbGFudC5pZCxcbiAgICAgIGZhbWlseTogcGxhbnQuZmFtaWx5LFxuICAgICAgZ2VudXM6IHBsYW50LmdlbnVzLFxuICAgICAgc3BlY2llczogcGxhbnQuc3BlY2llcyxcbiAgICAgIGNvbW1vbk5hbWU6IHBsYW50LmNvbW1vbk5hbWUsXG4gICAgICBpc1ZlcmlmaWVkOiBwbGFudC5pc1ZlcmlmaWVkLFxuICAgIH0pKSxcbiAgfTtcbn1cblxuLy8gR2V0IHRheG9ub215IGhpZXJhcmNoeSBmb3IgYnJvd3NpbmdcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRUYXhvbm9teUhpZXJhcmNoeSgpIHtcbiAgY29uc3QgaGllcmFyY2h5ID0gYXdhaXQgZGJcbiAgICAuc2VsZWN0KHtcbiAgICAgIGZhbWlseTogcGxhbnRzLmZhbWlseSxcbiAgICAgIGdlbnVzOiBwbGFudHMuZ2VudXMsXG4gICAgICBzcGVjaWVzOiBwbGFudHMuc3BlY2llcyxcbiAgICAgIHBsYW50Q291bnQ6IGNvdW50KCksXG4gICAgfSlcbiAgICAuZnJvbShwbGFudHMpXG4gICAgLmdyb3VwQnkocGxhbnRzLmZhbWlseSwgcGxhbnRzLmdlbnVzLCBwbGFudHMuc3BlY2llcylcbiAgICAub3JkZXJCeShhc2MocGxhbnRzLmZhbWlseSksIGFzYyhwbGFudHMuZ2VudXMpLCBhc2MocGxhbnRzLnNwZWNpZXMpKTtcblxuICAvLyBHcm91cCBieSBmYW1pbHkgYW5kIGdlbnVzXG4gIGNvbnN0IGZhbWlseU1hcCA9IG5ldyBNYXAoKTtcbiAgXG4gIGhpZXJhcmNoeS5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgIGlmICghZmFtaWx5TWFwLmhhcyhpdGVtLmZhbWlseSkpIHtcbiAgICAgIGZhbWlseU1hcC5zZXQoaXRlbS5mYW1pbHksIHtcbiAgICAgICAgbmFtZTogaXRlbS5mYW1pbHksXG4gICAgICAgIGNvdW50OiAwLFxuICAgICAgICBnZW5lcmE6IG5ldyBNYXAoKSxcbiAgICAgIH0pO1xuICAgIH1cbiAgICBcbiAgICBjb25zdCBmYW1pbHkgPSBmYW1pbHlNYXAuZ2V0KGl0ZW0uZmFtaWx5KTtcbiAgICBmYW1pbHkuY291bnQgKz0gaXRlbS5wbGFudENvdW50O1xuICAgIFxuICAgIGlmICghZmFtaWx5LmdlbmVyYS5oYXMoaXRlbS5nZW51cykpIHtcbiAgICAgIGZhbWlseS5nZW5lcmEuc2V0KGl0ZW0uZ2VudXMsIHtcbiAgICAgICAgbmFtZTogaXRlbS5nZW51cyxcbiAgICAgICAgY291bnQ6IDAsXG4gICAgICAgIHNwZWNpZXM6IFtdLFxuICAgICAgfSk7XG4gICAgfVxuICAgIFxuICAgIGNvbnN0IGdlbnVzID0gZmFtaWx5LmdlbmVyYS5nZXQoaXRlbS5nZW51cyk7XG4gICAgZ2VudXMuY291bnQgKz0gaXRlbS5wbGFudENvdW50O1xuICAgIGdlbnVzLnNwZWNpZXMucHVzaCh7XG4gICAgICBuYW1lOiBpdGVtLnNwZWNpZXMsXG4gICAgICBjb3VudDogaXRlbS5wbGFudENvdW50LFxuICAgICAgcGxhbnRzOiBbXSwgLy8gV291bGQgbmVlZCBhZGRpdGlvbmFsIHF1ZXJ5IHRvIHBvcHVsYXRlXG4gICAgfSk7XG4gIH0pO1xuXG4gIHJldHVybiB7XG4gICAgZmFtaWxpZXM6IEFycmF5LmZyb20oZmFtaWx5TWFwLnZhbHVlcygpKS5tYXAoZmFtaWx5ID0+ICh7XG4gICAgICAuLi5mYW1pbHksXG4gICAgICBnZW5lcmE6IEFycmF5LmZyb20oZmFtaWx5LmdlbmVyYS52YWx1ZXMoKSksXG4gICAgfSkpLFxuICB9O1xufVxuXG4vLyBEZWxldGUgYSBwbGFudCAob25seSBpZiBubyBpbnN0YW5jZXMgZXhpc3QpXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZGVsZXRlUGxhbnQoaWQ6IG51bWJlciwgdXNlcklkPzogbnVtYmVyKTogUHJvbWlzZTxib29sZWFuPiB7XG4gIC8vIENoZWNrIGlmIHBsYW50IGhhcyBhbnkgaW5zdGFuY2VzXG4gIGNvbnN0IFtpbnN0YW5jZUNvdW50XSA9IGF3YWl0IGRiXG4gICAgLnNlbGVjdCh7IGNvdW50OiBjb3VudCgpIH0pXG4gICAgLmZyb20oc3FsYHBsYW50X2luc3RhbmNlc2ApXG4gICAgLndoZXJlKHNxbGBwbGFudF9pZCA9ICR7aWR9YCk7XG5cbiAgaWYgKGluc3RhbmNlQ291bnQuY291bnQgPiAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgZGVsZXRlIHBsYW50IHdpdGggZXhpc3RpbmcgaW5zdGFuY2VzJyk7XG4gIH1cblxuICAvLyBDaGVjayBpZiBwbGFudCBoYXMgYW55IHByb3BhZ2F0aW9uc1xuICBjb25zdCBbcHJvcGFnYXRpb25Db3VudF0gPSBhd2FpdCBkYlxuICAgIC5zZWxlY3QoeyBjb3VudDogY291bnQoKSB9KVxuICAgIC5mcm9tKHNxbGBwcm9wYWdhdGlvbnNgKVxuICAgIC53aGVyZShzcWxgcGxhbnRfaWQgPSAke2lkfWApO1xuXG4gIGlmIChwcm9wYWdhdGlvbkNvdW50LmNvdW50ID4gMCkge1xuICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGRlbGV0ZSBwbGFudCB3aXRoIGV4aXN0aW5nIHByb3BhZ2F0aW9ucycpO1xuICB9XG5cbiAgLy8gSWYgdXNlcklkIHByb3ZpZGVkLCBvbmx5IGFsbG93IGRlbGV0aW9uIG9mIHBsYW50cyBjcmVhdGVkIGJ5IHRoYXQgdXNlciAodW5sZXNzIGFkbWluKVxuICBjb25zdCB3aGVyZUNvbmRpdGlvbnMgPSBbZXEocGxhbnRzLmlkLCBpZCldO1xuICBpZiAodXNlcklkKSB7XG4gICAgd2hlcmVDb25kaXRpb25zLnB1c2goZXEocGxhbnRzLmNyZWF0ZWRCeSwgdXNlcklkKSk7XG4gIH1cblxuICBjb25zdCByZXN1bHQgPSBhd2FpdCBkYlxuICAgIC5kZWxldGUocGxhbnRzKVxuICAgIC53aGVyZShhbmQoLi4ud2hlcmVDb25kaXRpb25zKSlcbiAgICAucmV0dXJuaW5nKHsgaWQ6IHBsYW50cy5pZCB9KTtcblxuICByZXR1cm4gcmVzdWx0Lmxlbmd0aCA+IDA7XG59Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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