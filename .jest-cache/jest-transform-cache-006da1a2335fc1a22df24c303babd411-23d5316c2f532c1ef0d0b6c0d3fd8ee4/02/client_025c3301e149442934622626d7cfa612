b32ef8511ba2fbbe1fec093a0c31d159
// Client-safe auth utilities
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get getCurrentUser () {
        return getCurrentUser;
    },
    get getSessionSecurityInfo () {
        return getSessionSecurityInfo;
    },
    get signInClient () {
        return signInClient;
    },
    get signOutClient () {
        return signOutClient;
    },
    get signUpClient () {
        return signUpClient;
    }
});
function getSessionSecurityInfo(request) {
    const userAgent = request.headers.get('user-agent') || 'Unknown';
    const ip = request.headers.get('x-forwarded-for') || request.headers.get('x-real-ip') || 'Unknown';
    return {
        userAgent,
        ip,
        timestamp: new Date().toISOString()
    };
}
async function signInClient(email, password) {
    const response = await fetch('/api/auth/signin', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            email,
            password
        })
    });
    if (!response.ok) {
        const error = await response.text();
        throw new Error(error || 'Sign in failed');
    }
    return response.json();
}
async function signUpClient(email, password, name) {
    const response = await fetch('/api/auth/signup', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            email,
            password,
            name
        })
    });
    if (!response.ok) {
        const error = await response.text();
        throw new Error(error || 'Sign up failed');
    }
    return response.json();
}
async function signOutClient() {
    const response = await fetch('/api/auth/signout', {
        method: 'POST'
    });
    if (!response.ok) {
        throw new Error('Sign out failed');
    }
}
async function getCurrentUser() {
    try {
        const response = await fetch('/api/user/me');
        if (!response.ok) {
            return null;
        }
        return response.json();
    } catch (error) {
        console.error('Failed to get current user:', error);
        return null;
    }
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9zdGVmYW5iZWtrZXIvcHJvamVjdHMvZmFuY3ktcGxhbnRpZXMvc3JjL2xpYi9hdXRoL2NsaWVudC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDbGllbnQtc2FmZSBhdXRoIHV0aWxpdGllc1xuZXhwb3J0IGludGVyZmFjZSBVc2VyIHtcbiAgaWQ6IG51bWJlcjtcbiAgZW1haWw6IHN0cmluZztcbiAgbmFtZTogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFNlc3Npb24ge1xuICBpZDogc3RyaW5nO1xuICB1c2VySWQ6IG51bWJlcjtcbiAgZXhwaXJlc0F0OiBEYXRlO1xufVxuXG4vLyBTZXNzaW9uIHNlY3VyaXR5IGhlbHBlcnMgKGNsaWVudC1zYWZlKVxuZXhwb3J0IGZ1bmN0aW9uIGdldFNlc3Npb25TZWN1cml0eUluZm8ocmVxdWVzdDogUmVxdWVzdCkge1xuICBjb25zdCB1c2VyQWdlbnQgPSByZXF1ZXN0LmhlYWRlcnMuZ2V0KCd1c2VyLWFnZW50JykgfHwgJ1Vua25vd24nO1xuICBjb25zdCBpcCA9IHJlcXVlc3QuaGVhZGVycy5nZXQoJ3gtZm9yd2FyZGVkLWZvcicpIHx8IFxuICAgICAgICAgICAgcmVxdWVzdC5oZWFkZXJzLmdldCgneC1yZWFsLWlwJykgfHwgXG4gICAgICAgICAgICAnVW5rbm93bic7XG4gIFxuICByZXR1cm4ge1xuICAgIHVzZXJBZ2VudCxcbiAgICBpcCxcbiAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgfTtcbn1cblxuLy8gU2Vzc2lvbiBhY3Rpdml0eSB0cmFja2luZyAoZm9yIGZ1dHVyZSBzZWN1cml0eSBmZWF0dXJlcylcbmV4cG9ydCBpbnRlcmZhY2UgU2Vzc2lvbkFjdGl2aXR5IHtcbiAgc2Vzc2lvbklkOiBzdHJpbmc7XG4gIHVzZXJJZDogbnVtYmVyO1xuICBhY3Rpb246IHN0cmluZztcbiAgaXA6IHN0cmluZztcbiAgdXNlckFnZW50OiBzdHJpbmc7XG4gIHRpbWVzdGFtcDogRGF0ZTtcbn1cblxuLy8gQXV0aCBzdGF0ZSB0eXBlcyBmb3IgY2xpZW50IGNvbXBvbmVudHNcbmV4cG9ydCBpbnRlcmZhY2UgQXV0aFN0YXRlIHtcbiAgdXNlcjogVXNlciB8IG51bGw7XG4gIHNlc3Npb246IFNlc3Npb24gfCBudWxsO1xuICBsb2FkaW5nOiBib29sZWFuO1xufVxuXG4vLyBDbGllbnQtc2lkZSBhdXRoIEFQSSBjYWxsc1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNpZ25JbkNsaWVudChlbWFpbDogc3RyaW5nLCBwYXNzd29yZDogc3RyaW5nKTogUHJvbWlzZTx7IHVzZXI6IFVzZXI7IHNlc3Npb246IFNlc3Npb24gfT4ge1xuICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKCcvYXBpL2F1dGgvc2lnbmluJywge1xuICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgIGhlYWRlcnM6IHtcbiAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgfSxcbiAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7IGVtYWlsLCBwYXNzd29yZCB9KSxcbiAgfSk7XG5cbiAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgIGNvbnN0IGVycm9yID0gYXdhaXQgcmVzcG9uc2UudGV4dCgpO1xuICAgIHRocm93IG5ldyBFcnJvcihlcnJvciB8fCAnU2lnbiBpbiBmYWlsZWQnKTtcbiAgfVxuXG4gIHJldHVybiByZXNwb25zZS5qc29uKCk7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzaWduVXBDbGllbnQoZW1haWw6IHN0cmluZywgcGFzc3dvcmQ6IHN0cmluZywgbmFtZTogc3RyaW5nKTogUHJvbWlzZTx7IHVzZXI6IFVzZXI7IHNlc3Npb246IFNlc3Npb24gfT4ge1xuICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKCcvYXBpL2F1dGgvc2lnbnVwJywge1xuICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgIGhlYWRlcnM6IHtcbiAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgfSxcbiAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7IGVtYWlsLCBwYXNzd29yZCwgbmFtZSB9KSxcbiAgfSk7XG5cbiAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgIGNvbnN0IGVycm9yID0gYXdhaXQgcmVzcG9uc2UudGV4dCgpO1xuICAgIHRocm93IG5ldyBFcnJvcihlcnJvciB8fCAnU2lnbiB1cCBmYWlsZWQnKTtcbiAgfVxuXG4gIHJldHVybiByZXNwb25zZS5qc29uKCk7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzaWduT3V0Q2xpZW50KCk6IFByb21pc2U8dm9pZD4ge1xuICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKCcvYXBpL2F1dGgvc2lnbm91dCcsIHtcbiAgICBtZXRob2Q6ICdQT1NUJyxcbiAgfSk7XG5cbiAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgIHRocm93IG5ldyBFcnJvcignU2lnbiBvdXQgZmFpbGVkJyk7XG4gIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldEN1cnJlbnRVc2VyKCk6IFByb21pc2U8eyB1c2VyOiBVc2VyOyBzZXNzaW9uOiBTZXNzaW9uIH0gfCBudWxsPiB7XG4gIHRyeSB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCgnL2FwaS91c2VyL21lJyk7XG4gICAgXG4gICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gZ2V0IGN1cnJlbnQgdXNlcjonLCBlcnJvcik7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn0iXSwibmFtZXMiOlsiZ2V0Q3VycmVudFVzZXIiLCJnZXRTZXNzaW9uU2VjdXJpdHlJbmZvIiwic2lnbkluQ2xpZW50Iiwic2lnbk91dENsaWVudCIsInNpZ25VcENsaWVudCIsInJlcXVlc3QiLCJ1c2VyQWdlbnQiLCJoZWFkZXJzIiwiZ2V0IiwiaXAiLCJ0aW1lc3RhbXAiLCJEYXRlIiwidG9JU09TdHJpbmciLCJlbWFpbCIsInBhc3N3b3JkIiwicmVzcG9uc2UiLCJmZXRjaCIsIm1ldGhvZCIsImJvZHkiLCJKU09OIiwic3RyaW5naWZ5Iiwib2siLCJlcnJvciIsInRleHQiLCJFcnJvciIsImpzb24iLCJuYW1lIiwiY29uc29sZSJdLCJtYXBwaW5ncyI6IkFBQUEsNkJBQTZCOzs7Ozs7Ozs7Ozs7UUF5RlBBO2VBQUFBOztRQTNFTkM7ZUFBQUE7O1FBK0JNQztlQUFBQTs7UUFrQ0FDO2VBQUFBOztRQWpCQUM7ZUFBQUE7OztBQWhEZixTQUFTSCx1QkFBdUJJLE9BQWdCO0lBQ3JELE1BQU1DLFlBQVlELFFBQVFFLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLGlCQUFpQjtJQUN2RCxNQUFNQyxLQUFLSixRQUFRRSxPQUFPLENBQUNDLEdBQUcsQ0FBQyxzQkFDckJILFFBQVFFLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLGdCQUNwQjtJQUVWLE9BQU87UUFDTEY7UUFDQUc7UUFDQUMsV0FBVyxJQUFJQyxPQUFPQyxXQUFXO0lBQ25DO0FBQ0Y7QUFvQk8sZUFBZVYsYUFBYVcsS0FBYSxFQUFFQyxRQUFnQjtJQUNoRSxNQUFNQyxXQUFXLE1BQU1DLE1BQU0sb0JBQW9CO1FBQy9DQyxRQUFRO1FBQ1JWLFNBQVM7WUFDUCxnQkFBZ0I7UUFDbEI7UUFDQVcsTUFBTUMsS0FBS0MsU0FBUyxDQUFDO1lBQUVQO1lBQU9DO1FBQVM7SUFDekM7SUFFQSxJQUFJLENBQUNDLFNBQVNNLEVBQUUsRUFBRTtRQUNoQixNQUFNQyxRQUFRLE1BQU1QLFNBQVNRLElBQUk7UUFDakMsTUFBTSxJQUFJQyxNQUFNRixTQUFTO0lBQzNCO0lBRUEsT0FBT1AsU0FBU1UsSUFBSTtBQUN0QjtBQUVPLGVBQWVyQixhQUFhUyxLQUFhLEVBQUVDLFFBQWdCLEVBQUVZLElBQVk7SUFDOUUsTUFBTVgsV0FBVyxNQUFNQyxNQUFNLG9CQUFvQjtRQUMvQ0MsUUFBUTtRQUNSVixTQUFTO1lBQ1AsZ0JBQWdCO1FBQ2xCO1FBQ0FXLE1BQU1DLEtBQUtDLFNBQVMsQ0FBQztZQUFFUDtZQUFPQztZQUFVWTtRQUFLO0lBQy9DO0lBRUEsSUFBSSxDQUFDWCxTQUFTTSxFQUFFLEVBQUU7UUFDaEIsTUFBTUMsUUFBUSxNQUFNUCxTQUFTUSxJQUFJO1FBQ2pDLE1BQU0sSUFBSUMsTUFBTUYsU0FBUztJQUMzQjtJQUVBLE9BQU9QLFNBQVNVLElBQUk7QUFDdEI7QUFFTyxlQUFldEI7SUFDcEIsTUFBTVksV0FBVyxNQUFNQyxNQUFNLHFCQUFxQjtRQUNoREMsUUFBUTtJQUNWO0lBRUEsSUFBSSxDQUFDRixTQUFTTSxFQUFFLEVBQUU7UUFDaEIsTUFBTSxJQUFJRyxNQUFNO0lBQ2xCO0FBQ0Y7QUFFTyxlQUFleEI7SUFDcEIsSUFBSTtRQUNGLE1BQU1lLFdBQVcsTUFBTUMsTUFBTTtRQUU3QixJQUFJLENBQUNELFNBQVNNLEVBQUUsRUFBRTtZQUNoQixPQUFPO1FBQ1Q7UUFFQSxPQUFPTixTQUFTVSxJQUFJO0lBQ3RCLEVBQUUsT0FBT0gsT0FBTztRQUNkSyxRQUFRTCxLQUFLLENBQUMsK0JBQStCQTtRQUM3QyxPQUFPO0lBQ1Q7QUFDRiJ9