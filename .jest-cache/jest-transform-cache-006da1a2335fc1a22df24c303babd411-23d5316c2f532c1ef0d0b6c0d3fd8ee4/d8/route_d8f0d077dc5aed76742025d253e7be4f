d301516c96b92a1824e33b74f57e78e7
"use strict";

/* istanbul ignore next */
function cov_1mdqq2a1gx() {
  var path = "/Users/stefanbekker/projects/fancy-planties/src/app/api/plant-instances/[id]/route.ts";
  var hash = "037cc0dee404549e68146c6c168172c05b0fe09c";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/stefanbekker/projects/fancy-planties/src/app/api/plant-instances/[id]/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 21,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 22
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 19
        }
      },
      "6": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 19
        }
      },
      "7": {
        start: {
          line: 22,
          column: 16
        },
        end: {
          line: 22,
          column: 38
        }
      },
      "8": {
        start: {
          line: 23,
          column: 24
        },
        end: {
          line: 23,
          column: 77
        }
      },
      "9": {
        start: {
          line: 24,
          column: 22
        },
        end: {
          line: 24,
          column: 73
        }
      },
      "10": {
        start: {
          line: 25,
          column: 17
        },
        end: {
          line: 25,
          column: 55
        }
      },
      "11": {
        start: {
          line: 27,
          column: 4
        },
        end: {
          line: 69,
          column: 5
        }
      },
      "12": {
        start: {
          line: 28,
          column: 25
        },
        end: {
          line: 28,
          column: 62
        }
      },
      "13": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 35,
          column: 9
        }
      },
      "14": {
        start: {
          line: 30,
          column: 12
        },
        end: {
          line: 34,
          column: 15
        }
      },
      "15": {
        start: {
          line: 36,
          column: 31
        },
        end: {
          line: 36,
          column: 43
        }
      },
      "16": {
        start: {
          line: 37,
          column: 19
        },
        end: {
          line: 37,
          column: 50
        }
      },
      "17": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 44,
          column: 9
        }
      },
      "18": {
        start: {
          line: 39,
          column: 12
        },
        end: {
          line: 43,
          column: 15
        }
      },
      "19": {
        start: {
          line: 45,
          column: 30
        },
        end: {
          line: 45,
          column: 92
        }
      },
      "20": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 52,
          column: 9
        }
      },
      "21": {
        start: {
          line: 47,
          column: 12
        },
        end: {
          line: 51,
          column: 15
        }
      },
      "22": {
        start: {
          line: 54,
          column: 8
        },
        end: {
          line: 60,
          column: 9
        }
      },
      "23": {
        start: {
          line: 55,
          column: 12
        },
        end: {
          line: 59,
          column: 15
        }
      },
      "24": {
        start: {
          line: 61,
          column: 8
        },
        end: {
          line: 61,
          column: 56
        }
      },
      "25": {
        start: {
          line: 63,
          column: 8
        },
        end: {
          line: 63,
          column: 62
        }
      },
      "26": {
        start: {
          line: 64,
          column: 8
        },
        end: {
          line: 68,
          column: 11
        }
      },
      "27": {
        start: {
          line: 72,
          column: 4
        },
        end: {
          line: 196,
          column: 5
        }
      },
      "28": {
        start: {
          line: 73,
          column: 25
        },
        end: {
          line: 73,
          column: 62
        }
      },
      "29": {
        start: {
          line: 74,
          column: 8
        },
        end: {
          line: 80,
          column: 9
        }
      },
      "30": {
        start: {
          line: 75,
          column: 12
        },
        end: {
          line: 79,
          column: 15
        }
      },
      "31": {
        start: {
          line: 81,
          column: 31
        },
        end: {
          line: 81,
          column: 43
        }
      },
      "32": {
        start: {
          line: 82,
          column: 19
        },
        end: {
          line: 82,
          column: 50
        }
      },
      "33": {
        start: {
          line: 83,
          column: 8
        },
        end: {
          line: 89,
          column: 9
        }
      },
      "34": {
        start: {
          line: 84,
          column: 12
        },
        end: {
          line: 88,
          column: 15
        }
      },
      "35": {
        start: {
          line: 91,
          column: 33
        },
        end: {
          line: 91,
          column: 95
        }
      },
      "36": {
        start: {
          line: 92,
          column: 8
        },
        end: {
          line: 98,
          column: 9
        }
      },
      "37": {
        start: {
          line: 93,
          column: 12
        },
        end: {
          line: 97,
          column: 15
        }
      },
      "38": {
        start: {
          line: 99,
          column: 8
        },
        end: {
          line: 105,
          column: 9
        }
      },
      "39": {
        start: {
          line: 100,
          column: 12
        },
        end: {
          line: 104,
          column: 15
        }
      },
      "40": {
        start: {
          line: 107,
          column: 28
        },
        end: {
          line: 107,
          column: 63
        }
      },
      "41": {
        start: {
          line: 109,
          column: 8
        },
        end: {
          line: 161,
          column: 9
        }
      },
      "42": {
        start: {
          line: 111,
          column: 29
        },
        end: {
          line: 111,
          column: 53
        }
      },
      "43": {
        start: {
          line: 113,
          column: 33
        },
        end: {
          line: 118,
          column: 13
        }
      },
      "44": {
        start: {
          line: 114,
          column: 30
        },
        end: {
          line: 114,
          column: 54
        }
      },
      "45": {
        start: {
          line: 115,
          column: 31
        },
        end: {
          line: 115,
          column: 49
        }
      },
      "46": {
        start: {
          line: 116,
          column: 31
        },
        end: {
          line: 116,
          column: 56
        }
      },
      "47": {
        start: {
          line: 117,
          column: 16
        },
        end: {
          line: 117,
          column: 60
        }
      },
      "48": {
        start: {
          line: 120,
          column: 12
        },
        end: {
          line: 120,
          column: 22
        }
      },
      "49": {
        start: {
          line: 121,
          column: 31
        },
        end: {
          line: 121,
          column: 33
        }
      },
      "50": {
        start: {
          line: 122,
          column: 35
        },
        end: {
          line: 122,
          column: 37
        }
      },
      "51": {
        start: {
          line: 123,
          column: 12
        },
        end: {
          line: 142,
          column: 13
        }
      },
      "52": {
        start: {
          line: 124,
          column: 16
        },
        end: {
          line: 141,
          column: 17
        }
      },
      "53": {
        start: {
          line: 126,
          column: 20
        },
        end: {
          line: 126,
          column: 47
        }
      },
      "54": {
        start: {
          line: 127,
          column: 23
        },
        end: {
          line: 141,
          column: 17
        }
      },
      "55": {
        start: {
          line: 129,
          column: 20
        },
        end: {
          line: 131,
          column: 21
        }
      },
      "56": {
        start: {
          line: 130,
          column: 24
        },
        end: {
          line: 130,
          column: 47
        }
      },
      "57": {
        start: {
          line: 134,
          column: 20
        },
        end: {
          line: 140,
          column: 21
        }
      },
      "58": {
        start: {
          line: 135,
          column: 24
        },
        end: {
          line: 135,
          column: 56
        }
      },
      "59": {
        start: {
          line: 136,
          column: 27
        },
        end: {
          line: 140,
          column: 21
        }
      },
      "60": {
        start: {
          line: 137,
          column: 24
        },
        end: {
          line: 137,
          column: 53
        }
      },
      "61": {
        start: {
          line: 139,
          column: 24
        },
        end: {
          line: 139,
          column: 42
        }
      },
      "62": {
        start: {
          line: 144,
          column: 36
        },
        end: {
          line: 144,
          column: 97
        }
      },
      "63": {
        start: {
          line: 144,
          column: 77
        },
        end: {
          line: 144,
          column: 95
        }
      },
      "64": {
        start: {
          line: 146,
          column: 12
        },
        end: {
          line: 149,
          column: 14
        }
      },
      "65": {
        start: {
          line: 152,
          column: 12
        },
        end: {
          line: 160,
          column: 13
        }
      },
      "66": {
        start: {
          line: 153,
          column: 16
        },
        end: {
          line: 153,
          column: 44
        }
      },
      "67": {
        start: {
          line: 155,
          column: 16
        },
        end: {
          line: 159,
          column: 19
        }
      },
      "68": {
        start: {
          line: 163,
          column: 30
        },
        end: {
          line: 167,
          column: 9
        }
      },
      "69": {
        start: {
          line: 169,
          column: 27
        },
        end: {
          line: 173,
          column: 10
        }
      },
      "70": {
        start: {
          line: 175,
          column: 55
        },
        end: {
          line: 175,
          column: 65
        }
      },
      "71": {
        start: {
          line: 177,
          column: 32
        },
        end: {
          line: 177,
          column: 99
        }
      },
      "72": {
        start: {
          line: 179,
          column: 33
        },
        end: {
          line: 179,
          column: 111
        }
      },
      "73": {
        start: {
          line: 180,
          column: 8
        },
        end: {
          line: 180,
          column: 59
        }
      },
      "74": {
        start: {
          line: 182,
          column: 8
        },
        end: {
          line: 182,
          column: 65
        }
      },
      "75": {
        start: {
          line: 183,
          column: 8
        },
        end: {
          line: 190,
          column: 9
        }
      },
      "76": {
        start: {
          line: 184,
          column: 12
        },
        end: {
          line: 189,
          column: 15
        }
      },
      "77": {
        start: {
          line: 191,
          column: 8
        },
        end: {
          line: 195,
          column: 11
        }
      },
      "78": {
        start: {
          line: 199,
          column: 4
        },
        end: {
          line: 253,
          column: 5
        }
      },
      "79": {
        start: {
          line: 200,
          column: 25
        },
        end: {
          line: 200,
          column: 62
        }
      },
      "80": {
        start: {
          line: 201,
          column: 8
        },
        end: {
          line: 207,
          column: 9
        }
      },
      "81": {
        start: {
          line: 202,
          column: 12
        },
        end: {
          line: 206,
          column: 15
        }
      },
      "82": {
        start: {
          line: 208,
          column: 31
        },
        end: {
          line: 208,
          column: 43
        }
      },
      "83": {
        start: {
          line: 209,
          column: 19
        },
        end: {
          line: 209,
          column: 50
        }
      },
      "84": {
        start: {
          line: 210,
          column: 8
        },
        end: {
          line: 216,
          column: 9
        }
      },
      "85": {
        start: {
          line: 211,
          column: 12
        },
        end: {
          line: 215,
          column: 15
        }
      },
      "86": {
        start: {
          line: 218,
          column: 33
        },
        end: {
          line: 218,
          column: 95
        }
      },
      "87": {
        start: {
          line: 219,
          column: 8
        },
        end: {
          line: 225,
          column: 9
        }
      },
      "88": {
        start: {
          line: 220,
          column: 12
        },
        end: {
          line: 224,
          column: 15
        }
      },
      "89": {
        start: {
          line: 226,
          column: 8
        },
        end: {
          line: 232,
          column: 9
        }
      },
      "90": {
        start: {
          line: 227,
          column: 12
        },
        end: {
          line: 231,
          column: 15
        }
      },
      "91": {
        start: {
          line: 234,
          column: 24
        },
        end: {
          line: 234,
          column: 77
        }
      },
      "92": {
        start: {
          line: 235,
          column: 8
        },
        end: {
          line: 241,
          column: 9
        }
      },
      "93": {
        start: {
          line: 236,
          column: 12
        },
        end: {
          line: 240,
          column: 15
        }
      },
      "94": {
        start: {
          line: 242,
          column: 8
        },
        end: {
          line: 245,
          column: 11
        }
      },
      "95": {
        start: {
          line: 247,
          column: 8
        },
        end: {
          line: 247,
          column: 65
        }
      },
      "96": {
        start: {
          line: 248,
          column: 8
        },
        end: {
          line: 252,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        },
        loc: {
          start: {
            line: 12,
            column: 18
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 15
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 18,
            column: 4
          },
          end: {
            line: 18,
            column: 5
          }
        },
        loc: {
          start: {
            line: 18,
            column: 15
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 18
      },
      "4": {
        name: "GET",
        decl: {
          start: {
            line: 26,
            column: 15
          },
          end: {
            line: 26,
            column: 18
          }
        },
        loc: {
          start: {
            line: 26,
            column: 40
          },
          end: {
            line: 70,
            column: 1
          }
        },
        line: 26
      },
      "5": {
        name: "PUT",
        decl: {
          start: {
            line: 71,
            column: 15
          },
          end: {
            line: 71,
            column: 18
          }
        },
        loc: {
          start: {
            line: 71,
            column: 40
          },
          end: {
            line: 197,
            column: 1
          }
        },
        line: 71
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 113,
            column: 33
          },
          end: {
            line: 113,
            column: 34
          }
        },
        loc: {
          start: {
            line: 113,
            column: 47
          },
          end: {
            line: 118,
            column: 13
          }
        },
        line: 113
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 144,
            column: 69
          },
          end: {
            line: 144,
            column: 70
          }
        },
        loc: {
          start: {
            line: 144,
            column: 77
          },
          end: {
            line: 144,
            column: 95
          }
        },
        line: 144
      },
      "8": {
        name: "DELETE",
        decl: {
          start: {
            line: 198,
            column: 15
          },
          end: {
            line: 198,
            column: 21
          }
        },
        loc: {
          start: {
            line: 198,
            column: 43
          },
          end: {
            line: 254,
            column: 1
          }
        },
        line: 198
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 29,
            column: 8
          },
          end: {
            line: 35,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 29,
            column: 8
          },
          end: {
            line: 35,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 29
      },
      "1": {
        loc: {
          start: {
            line: 38,
            column: 8
          },
          end: {
            line: 44,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 38,
            column: 8
          },
          end: {
            line: 44,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 38
      },
      "2": {
        loc: {
          start: {
            line: 46,
            column: 8
          },
          end: {
            line: 52,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 46,
            column: 8
          },
          end: {
            line: 52,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 46
      },
      "3": {
        loc: {
          start: {
            line: 54,
            column: 8
          },
          end: {
            line: 60,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 54,
            column: 8
          },
          end: {
            line: 60,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 54
      },
      "4": {
        loc: {
          start: {
            line: 74,
            column: 8
          },
          end: {
            line: 80,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 74,
            column: 8
          },
          end: {
            line: 80,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 74
      },
      "5": {
        loc: {
          start: {
            line: 83,
            column: 8
          },
          end: {
            line: 89,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 83,
            column: 8
          },
          end: {
            line: 89,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 83
      },
      "6": {
        loc: {
          start: {
            line: 92,
            column: 8
          },
          end: {
            line: 98,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 92,
            column: 8
          },
          end: {
            line: 98,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 92
      },
      "7": {
        loc: {
          start: {
            line: 99,
            column: 8
          },
          end: {
            line: 105,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 99,
            column: 8
          },
          end: {
            line: 105,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 99
      },
      "8": {
        loc: {
          start: {
            line: 109,
            column: 8
          },
          end: {
            line: 161,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 109,
            column: 8
          },
          end: {
            line: 161,
            column: 9
          }
        }, {
          start: {
            line: 150,
            column: 15
          },
          end: {
            line: 161,
            column: 9
          }
        }],
        line: 109
      },
      "9": {
        loc: {
          start: {
            line: 124,
            column: 16
          },
          end: {
            line: 141,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 124,
            column: 16
          },
          end: {
            line: 141,
            column: 17
          }
        }, {
          start: {
            line: 127,
            column: 23
          },
          end: {
            line: 141,
            column: 17
          }
        }],
        line: 124
      },
      "10": {
        loc: {
          start: {
            line: 127,
            column: 23
          },
          end: {
            line: 141,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 127,
            column: 23
          },
          end: {
            line: 141,
            column: 17
          }
        }, {
          start: {
            line: 132,
            column: 23
          },
          end: {
            line: 141,
            column: 17
          }
        }],
        line: 127
      },
      "11": {
        loc: {
          start: {
            line: 129,
            column: 20
          },
          end: {
            line: 131,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 129,
            column: 20
          },
          end: {
            line: 131,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 129
      },
      "12": {
        loc: {
          start: {
            line: 134,
            column: 20
          },
          end: {
            line: 140,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 134,
            column: 20
          },
          end: {
            line: 140,
            column: 21
          }
        }, {
          start: {
            line: 136,
            column: 27
          },
          end: {
            line: 140,
            column: 21
          }
        }],
        line: 134
      },
      "13": {
        loc: {
          start: {
            line: 136,
            column: 27
          },
          end: {
            line: 140,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 136,
            column: 27
          },
          end: {
            line: 140,
            column: 21
          }
        }, {
          start: {
            line: 138,
            column: 27
          },
          end: {
            line: 140,
            column: 21
          }
        }],
        line: 136
      },
      "14": {
        loc: {
          start: {
            line: 165,
            column: 28
          },
          end: {
            line: 165,
            column: 116
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 165,
            column: 80
          },
          end: {
            line: 165,
            column: 109
          }
        }, {
          start: {
            line: 165,
            column: 112
          },
          end: {
            line: 165,
            column: 116
          }
        }],
        line: 165
      },
      "15": {
        loc: {
          start: {
            line: 165,
            column: 28
          },
          end: {
            line: 165,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 165,
            column: 28
          },
          end: {
            line: 165,
            column: 47
          }
        }, {
          start: {
            line: 165,
            column: 51
          },
          end: {
            line: 165,
            column: 77
          }
        }],
        line: 165
      },
      "16": {
        loc: {
          start: {
            line: 166,
            column: 23
          },
          end: {
            line: 166,
            column: 96
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 166,
            column: 65
          },
          end: {
            line: 166,
            column: 89
          }
        }, {
          start: {
            line: 166,
            column: 92
          },
          end: {
            line: 166,
            column: 96
          }
        }],
        line: 166
      },
      "17": {
        loc: {
          start: {
            line: 166,
            column: 23
          },
          end: {
            line: 166,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 166,
            column: 23
          },
          end: {
            line: 166,
            column: 37
          }
        }, {
          start: {
            line: 166,
            column: 41
          },
          end: {
            line: 166,
            column: 62
          }
        }],
        line: 166
      },
      "18": {
        loc: {
          start: {
            line: 183,
            column: 8
          },
          end: {
            line: 190,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 183,
            column: 8
          },
          end: {
            line: 190,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 183
      },
      "19": {
        loc: {
          start: {
            line: 183,
            column: 12
          },
          end: {
            line: 183,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 183,
            column: 12
          },
          end: {
            line: 183,
            column: 34
          }
        }, {
          start: {
            line: 183,
            column: 38
          },
          end: {
            line: 183,
            column: 74
          }
        }],
        line: 183
      },
      "20": {
        loc: {
          start: {
            line: 201,
            column: 8
          },
          end: {
            line: 207,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 201,
            column: 8
          },
          end: {
            line: 207,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 201
      },
      "21": {
        loc: {
          start: {
            line: 210,
            column: 8
          },
          end: {
            line: 216,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 210,
            column: 8
          },
          end: {
            line: 216,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 210
      },
      "22": {
        loc: {
          start: {
            line: 219,
            column: 8
          },
          end: {
            line: 225,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 219,
            column: 8
          },
          end: {
            line: 225,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 219
      },
      "23": {
        loc: {
          start: {
            line: 226,
            column: 8
          },
          end: {
            line: 232,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 226,
            column: 8
          },
          end: {
            line: 232,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 226
      },
      "24": {
        loc: {
          start: {
            line: 235,
            column: 8
          },
          end: {
            line: 241,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 235,
            column: 8
          },
          end: {
            line: 241,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 235
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/stefanbekker/projects/fancy-planties/src/app/api/plant-instances/[id]/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport { PlantInstanceQueries } from '@/lib/db/queries/plant-instances';\nimport { updatePlantInstanceSchema } from '@/lib/validation/plant-schemas';\nimport { validateRequest } from '@/lib/auth/server';\n\n// GET /api/plant-instances/[id] - Get a specific plant instance\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { user } = await validateRequest();\n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const resolvedParams = await params;\n    const id = parseInt(resolvedParams.id, 10);\n    if (isNaN(id)) {\n      return NextResponse.json({ error: 'Invalid plant instance ID' }, { status: 400 });\n    }\n\n    const plantInstance = await PlantInstanceQueries.getEnhancedById(id);\n\n    if (!plantInstance) {\n      return NextResponse.json({ error: 'Plant instance not found' }, { status: 404 });\n    }\n\n    // Check if the plant instance belongs to the current user\n    if (plantInstance.userId !== user.id) {\n      return NextResponse.json({ error: 'Forbidden' }, { status: 403 });\n    }\n\n    return NextResponse.json(plantInstance);\n  } catch (error) {\n    console.error('Failed to get plant instance:', error);\n    return NextResponse.json(\n      { error: 'Failed to get plant instance' },\n      { status: 500 }\n    );\n  }\n}\n\n// PUT /api/plant-instances/[id] - Update a plant instance\nexport async function PUT(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { user } = await validateRequest();\n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const resolvedParams = await params;\n    const id = parseInt(resolvedParams.id, 10);\n    if (isNaN(id)) {\n      return NextResponse.json({ error: 'Invalid plant instance ID' }, { status: 400 });\n    }\n\n    // Check if the plant instance exists and belongs to the user\n    const existingInstance = await PlantInstanceQueries.getEnhancedById(id);\n    if (!existingInstance) {\n      return NextResponse.json({ error: 'Plant instance not found' }, { status: 404 });\n    }\n\n    if (existingInstance.userId !== user.id) {\n      return NextResponse.json({ error: 'Forbidden' }, { status: 403 });\n    }\n\n    // Check if request is FormData or JSON\n    const contentType = request.headers.get('content-type');\n    let body: any;\n\n    if (contentType?.includes('multipart/form-data')) {\n      // Handle FormData for file uploads\n      const formData = await request.formData();\n\n      // Helper function to convert file to base64\n      const fileToBase64 = async (file: File): Promise<string> => {\n        const bytes = await file.arrayBuffer();\n        const buffer = Buffer.from(bytes);\n        const base64 = buffer.toString('base64');\n        return `data:${file.type};base64,${base64}`;\n      };\n\n      // Extract form fields\n      body = {};\n      const imageFiles: File[] = [];\n      const existingImages: (string | FormDataEntryValue)[] = [];\n\n      for (const [key, value] of formData.entries()) {\n        if (key.startsWith('existingImages[')) {\n          // Handle existing images array\n          existingImages.push(value);\n        } else if (key.startsWith('imageFiles[')) {\n          // Handle new image files\n          if (value instanceof File) {\n            imageFiles.push(value);\n          }\n        } else {\n          // Handle regular form fields\n          if (key === 'plantId') {\n            body[key] = parseInt(value as string, 10);\n          } else if (key === 'isActive') {\n            body[key] = value === 'true';\n          } else {\n            body[key] = value;\n          }\n        }\n      }\n\n      // Convert new image files to base64\n      const newImageBase64s = await Promise.all(\n        imageFiles.map(file => fileToBase64(file))\n      );\n\n      // Combine existing images with new images\n      body.images = [...existingImages, ...newImageBase64s];\n    } else {\n      // Handle JSON\n      try {\n        body = await request.json();\n      } catch (jsonError) {\n        return NextResponse.json(\n          { error: 'Invalid request format' },\n          { status: 400 }\n        );\n      }\n    }\n\n    // Convert date strings to Date objects if they exist and are not empty\n    const processedBody = {\n      ...body,\n      lastFertilized: body.lastFertilized && body.lastFertilized !== '' ? new Date(body.lastFertilized) : null,\n      lastRepot: body.lastRepot && body.lastRepot !== '' ? new Date(body.lastRepot) : null,\n    };\n\n    // Validate the update data\n    const updateData = updatePlantInstanceSchema.parse({\n      ...processedBody,\n      id,\n      userId: user.id,\n    });\n\n    // Remove id and userId from update data as they shouldn't be updated\n    const { id: _, userId: __, ...dataToUpdate } = updateData;\n\n    // Update the plant instance\n    const updatedInstance = await PlantInstanceQueries.update(id, dataToUpdate);\n\n    // Get the enhanced plant instance with plant data\n    const enhancedInstance = await PlantInstanceQueries.getEnhancedById(updatedInstance.id);\n\n    return NextResponse.json(enhancedInstance);\n  } catch (error) {\n    console.error('Failed to update plant instance:', error);\n\n    if (error instanceof Error && error.message.includes('validation')) {\n      return NextResponse.json(\n        { error: 'Invalid plant instance data', details: error.message },\n        { status: 400 }\n      );\n    }\n\n    return NextResponse.json(\n      { error: 'Failed to update plant instance' },\n      { status: 500 }\n    );\n  }\n}\n\n// DELETE /api/plant-instances/[id] - Delete a plant instance\nexport async function DELETE(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { user } = await validateRequest();\n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const resolvedParams = await params;\n    const id = parseInt(resolvedParams.id, 10);\n    if (isNaN(id)) {\n      return NextResponse.json({ error: 'Invalid plant instance ID' }, { status: 400 });\n    }\n\n    // Check if the plant instance exists and belongs to the user\n    const existingInstance = await PlantInstanceQueries.getEnhancedById(id);\n    if (!existingInstance) {\n      return NextResponse.json({ error: 'Plant instance not found' }, { status: 404 });\n    }\n\n    if (existingInstance.userId !== user.id) {\n      return NextResponse.json({ error: 'Forbidden' }, { status: 403 });\n    }\n\n    // Delete the plant instance\n    const deleted = await PlantInstanceQueries.delete(id);\n\n    if (!deleted) {\n      return NextResponse.json({ error: 'Failed to delete plant instance' }, { status: 500 });\n    }\n\n    return NextResponse.json({ success: true, message: 'Plant instance deleted successfully' });\n  } catch (error) {\n    console.error('Failed to delete plant instance:', error);\n    return NextResponse.json(\n      { error: 'Failed to delete plant instance' },\n      { status: 500 }\n    );\n  }\n}"],
      names: ["DELETE", "GET", "PUT", "request", "params", "user", "validateRequest", "NextResponse", "json", "error", "status", "resolvedParams", "id", "parseInt", "isNaN", "plantInstance", "PlantInstanceQueries", "getEnhancedById", "userId", "console", "existingInstance", "contentType", "headers", "get", "body", "includes", "formData", "fileToBase64", "file", "bytes", "arrayBuffer", "buffer", "Buffer", "from", "base64", "toString", "type", "imageFiles", "existingImages", "key", "value", "entries", "startsWith", "push", "File", "newImageBase64s", "Promise", "all", "map", "images", "jsonError", "processedBody", "lastFertilized", "Date", "lastRepot", "updateData", "updatePlantInstanceSchema", "parse", "_", "__", "dataToUpdate", "updatedInstance", "update", "enhancedInstance", "Error", "message", "details", "deleted", "delete", "success"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "037cc0dee404549e68146c6c168172c05b0fe09c"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1mdqq2a1gx = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1mdqq2a1gx();
cov_1mdqq2a1gx().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_1mdqq2a1gx().f[0]++;
  cov_1mdqq2a1gx().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_1mdqq2a1gx().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_1mdqq2a1gx().s[3]++;
_export(exports, {
  get DELETE() {
    /* istanbul ignore next */
    cov_1mdqq2a1gx().f[1]++;
    cov_1mdqq2a1gx().s[4]++;
    return DELETE;
  },
  get GET() {
    /* istanbul ignore next */
    cov_1mdqq2a1gx().f[2]++;
    cov_1mdqq2a1gx().s[5]++;
    return GET;
  },
  get PUT() {
    /* istanbul ignore next */
    cov_1mdqq2a1gx().f[3]++;
    cov_1mdqq2a1gx().s[6]++;
    return PUT;
  }
});
const _server =
/* istanbul ignore next */
(cov_1mdqq2a1gx().s[7]++, require("next/server"));
const _plantinstances =
/* istanbul ignore next */
(cov_1mdqq2a1gx().s[8]++, require("../../../../lib/db/queries/plant-instances"));
const _plantschemas =
/* istanbul ignore next */
(cov_1mdqq2a1gx().s[9]++, require("../../../../lib/validation/plant-schemas"));
const _server1 =
/* istanbul ignore next */
(cov_1mdqq2a1gx().s[10]++, require("../../../../lib/auth/server"));
async function GET(request, {
  params
}) {
  /* istanbul ignore next */
  cov_1mdqq2a1gx().f[4]++;
  cov_1mdqq2a1gx().s[11]++;
  try {
    const {
      user
    } =
    /* istanbul ignore next */
    (cov_1mdqq2a1gx().s[12]++, await (0, _server1.validateRequest)());
    /* istanbul ignore next */
    cov_1mdqq2a1gx().s[13]++;
    if (!user) {
      /* istanbul ignore next */
      cov_1mdqq2a1gx().b[0][0]++;
      cov_1mdqq2a1gx().s[14]++;
      return _server.NextResponse.json({
        error: 'Unauthorized'
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_1mdqq2a1gx().b[0][1]++;
    }
    const resolvedParams =
    /* istanbul ignore next */
    (cov_1mdqq2a1gx().s[15]++, await params);
    const id =
    /* istanbul ignore next */
    (cov_1mdqq2a1gx().s[16]++, parseInt(resolvedParams.id, 10));
    /* istanbul ignore next */
    cov_1mdqq2a1gx().s[17]++;
    if (isNaN(id)) {
      /* istanbul ignore next */
      cov_1mdqq2a1gx().b[1][0]++;
      cov_1mdqq2a1gx().s[18]++;
      return _server.NextResponse.json({
        error: 'Invalid plant instance ID'
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1mdqq2a1gx().b[1][1]++;
    }
    const plantInstance =
    /* istanbul ignore next */
    (cov_1mdqq2a1gx().s[19]++, await _plantinstances.PlantInstanceQueries.getEnhancedById(id));
    /* istanbul ignore next */
    cov_1mdqq2a1gx().s[20]++;
    if (!plantInstance) {
      /* istanbul ignore next */
      cov_1mdqq2a1gx().b[2][0]++;
      cov_1mdqq2a1gx().s[21]++;
      return _server.NextResponse.json({
        error: 'Plant instance not found'
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_1mdqq2a1gx().b[2][1]++;
    }
    // Check if the plant instance belongs to the current user
    cov_1mdqq2a1gx().s[22]++;
    if (plantInstance.userId !== user.id) {
      /* istanbul ignore next */
      cov_1mdqq2a1gx().b[3][0]++;
      cov_1mdqq2a1gx().s[23]++;
      return _server.NextResponse.json({
        error: 'Forbidden'
      }, {
        status: 403
      });
    } else
    /* istanbul ignore next */
    {
      cov_1mdqq2a1gx().b[3][1]++;
    }
    cov_1mdqq2a1gx().s[24]++;
    return _server.NextResponse.json(plantInstance);
  } catch (error) {
    /* istanbul ignore next */
    cov_1mdqq2a1gx().s[25]++;
    console.error('Failed to get plant instance:', error);
    /* istanbul ignore next */
    cov_1mdqq2a1gx().s[26]++;
    return _server.NextResponse.json({
      error: 'Failed to get plant instance'
    }, {
      status: 500
    });
  }
}
async function PUT(request, {
  params
}) {
  /* istanbul ignore next */
  cov_1mdqq2a1gx().f[5]++;
  cov_1mdqq2a1gx().s[27]++;
  try {
    const {
      user
    } =
    /* istanbul ignore next */
    (cov_1mdqq2a1gx().s[28]++, await (0, _server1.validateRequest)());
    /* istanbul ignore next */
    cov_1mdqq2a1gx().s[29]++;
    if (!user) {
      /* istanbul ignore next */
      cov_1mdqq2a1gx().b[4][0]++;
      cov_1mdqq2a1gx().s[30]++;
      return _server.NextResponse.json({
        error: 'Unauthorized'
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_1mdqq2a1gx().b[4][1]++;
    }
    const resolvedParams =
    /* istanbul ignore next */
    (cov_1mdqq2a1gx().s[31]++, await params);
    const id =
    /* istanbul ignore next */
    (cov_1mdqq2a1gx().s[32]++, parseInt(resolvedParams.id, 10));
    /* istanbul ignore next */
    cov_1mdqq2a1gx().s[33]++;
    if (isNaN(id)) {
      /* istanbul ignore next */
      cov_1mdqq2a1gx().b[5][0]++;
      cov_1mdqq2a1gx().s[34]++;
      return _server.NextResponse.json({
        error: 'Invalid plant instance ID'
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1mdqq2a1gx().b[5][1]++;
    }
    // Check if the plant instance exists and belongs to the user
    const existingInstance =
    /* istanbul ignore next */
    (cov_1mdqq2a1gx().s[35]++, await _plantinstances.PlantInstanceQueries.getEnhancedById(id));
    /* istanbul ignore next */
    cov_1mdqq2a1gx().s[36]++;
    if (!existingInstance) {
      /* istanbul ignore next */
      cov_1mdqq2a1gx().b[6][0]++;
      cov_1mdqq2a1gx().s[37]++;
      return _server.NextResponse.json({
        error: 'Plant instance not found'
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_1mdqq2a1gx().b[6][1]++;
    }
    cov_1mdqq2a1gx().s[38]++;
    if (existingInstance.userId !== user.id) {
      /* istanbul ignore next */
      cov_1mdqq2a1gx().b[7][0]++;
      cov_1mdqq2a1gx().s[39]++;
      return _server.NextResponse.json({
        error: 'Forbidden'
      }, {
        status: 403
      });
    } else
    /* istanbul ignore next */
    {
      cov_1mdqq2a1gx().b[7][1]++;
    }
    // Check if request is FormData or JSON
    const contentType =
    /* istanbul ignore next */
    (cov_1mdqq2a1gx().s[40]++, request.headers.get('content-type'));
    let body;
    /* istanbul ignore next */
    cov_1mdqq2a1gx().s[41]++;
    if (contentType?.includes('multipart/form-data')) {
      /* istanbul ignore next */
      cov_1mdqq2a1gx().b[8][0]++;
      // Handle FormData for file uploads
      const formData =
      /* istanbul ignore next */
      (cov_1mdqq2a1gx().s[42]++, await request.formData());
      // Helper function to convert file to base64
      /* istanbul ignore next */
      cov_1mdqq2a1gx().s[43]++;
      const fileToBase64 = async file => {
        /* istanbul ignore next */
        cov_1mdqq2a1gx().f[6]++;
        const bytes =
        /* istanbul ignore next */
        (cov_1mdqq2a1gx().s[44]++, await file.arrayBuffer());
        const buffer =
        /* istanbul ignore next */
        (cov_1mdqq2a1gx().s[45]++, Buffer.from(bytes));
        const base64 =
        /* istanbul ignore next */
        (cov_1mdqq2a1gx().s[46]++, buffer.toString('base64'));
        /* istanbul ignore next */
        cov_1mdqq2a1gx().s[47]++;
        return `data:${file.type};base64,${base64}`;
      };
      // Extract form fields
      /* istanbul ignore next */
      cov_1mdqq2a1gx().s[48]++;
      body = {};
      const imageFiles =
      /* istanbul ignore next */
      (cov_1mdqq2a1gx().s[49]++, []);
      const existingImages =
      /* istanbul ignore next */
      (cov_1mdqq2a1gx().s[50]++, []);
      /* istanbul ignore next */
      cov_1mdqq2a1gx().s[51]++;
      for (const [key, value] of formData.entries()) {
        /* istanbul ignore next */
        cov_1mdqq2a1gx().s[52]++;
        if (key.startsWith('existingImages[')) {
          /* istanbul ignore next */
          cov_1mdqq2a1gx().b[9][0]++;
          cov_1mdqq2a1gx().s[53]++;
          // Handle existing images array
          existingImages.push(value);
        } else {
          /* istanbul ignore next */
          cov_1mdqq2a1gx().b[9][1]++;
          cov_1mdqq2a1gx().s[54]++;
          if (key.startsWith('imageFiles[')) {
            /* istanbul ignore next */
            cov_1mdqq2a1gx().b[10][0]++;
            cov_1mdqq2a1gx().s[55]++;
            // Handle new image files
            if (value instanceof File) {
              /* istanbul ignore next */
              cov_1mdqq2a1gx().b[11][0]++;
              cov_1mdqq2a1gx().s[56]++;
              imageFiles.push(value);
            } else
            /* istanbul ignore next */
            {
              cov_1mdqq2a1gx().b[11][1]++;
            }
          } else {
            /* istanbul ignore next */
            cov_1mdqq2a1gx().b[10][1]++;
            cov_1mdqq2a1gx().s[57]++;
            // Handle regular form fields
            if (key === 'plantId') {
              /* istanbul ignore next */
              cov_1mdqq2a1gx().b[12][0]++;
              cov_1mdqq2a1gx().s[58]++;
              body[key] = parseInt(value, 10);
            } else {
              /* istanbul ignore next */
              cov_1mdqq2a1gx().b[12][1]++;
              cov_1mdqq2a1gx().s[59]++;
              if (key === 'isActive') {
                /* istanbul ignore next */
                cov_1mdqq2a1gx().b[13][0]++;
                cov_1mdqq2a1gx().s[60]++;
                body[key] = value === 'true';
              } else {
                /* istanbul ignore next */
                cov_1mdqq2a1gx().b[13][1]++;
                cov_1mdqq2a1gx().s[61]++;
                body[key] = value;
              }
            }
          }
        }
      }
      // Convert new image files to base64
      const newImageBase64s =
      /* istanbul ignore next */
      (cov_1mdqq2a1gx().s[62]++, await Promise.all(imageFiles.map(file => {
        /* istanbul ignore next */
        cov_1mdqq2a1gx().f[7]++;
        cov_1mdqq2a1gx().s[63]++;
        return fileToBase64(file);
      })));
      // Combine existing images with new images
      /* istanbul ignore next */
      cov_1mdqq2a1gx().s[64]++;
      body.images = [...existingImages, ...newImageBase64s];
    } else {
      /* istanbul ignore next */
      cov_1mdqq2a1gx().b[8][1]++;
      cov_1mdqq2a1gx().s[65]++;
      // Handle JSON
      try {
        /* istanbul ignore next */
        cov_1mdqq2a1gx().s[66]++;
        body = await request.json();
      } catch (jsonError) {
        /* istanbul ignore next */
        cov_1mdqq2a1gx().s[67]++;
        return _server.NextResponse.json({
          error: 'Invalid request format'
        }, {
          status: 400
        });
      }
    }
    // Convert date strings to Date objects if they exist and are not empty
    const processedBody =
    /* istanbul ignore next */
    (cov_1mdqq2a1gx().s[68]++, {
      ...body,
      lastFertilized:
      /* istanbul ignore next */
      (cov_1mdqq2a1gx().b[15][0]++, body.lastFertilized) &&
      /* istanbul ignore next */
      (cov_1mdqq2a1gx().b[15][1]++, body.lastFertilized !== '') ?
      /* istanbul ignore next */
      (cov_1mdqq2a1gx().b[14][0]++, new Date(body.lastFertilized)) :
      /* istanbul ignore next */
      (cov_1mdqq2a1gx().b[14][1]++, null),
      lastRepot:
      /* istanbul ignore next */
      (cov_1mdqq2a1gx().b[17][0]++, body.lastRepot) &&
      /* istanbul ignore next */
      (cov_1mdqq2a1gx().b[17][1]++, body.lastRepot !== '') ?
      /* istanbul ignore next */
      (cov_1mdqq2a1gx().b[16][0]++, new Date(body.lastRepot)) :
      /* istanbul ignore next */
      (cov_1mdqq2a1gx().b[16][1]++, null)
    });
    // Validate the update data
    const updateData =
    /* istanbul ignore next */
    (cov_1mdqq2a1gx().s[69]++, _plantschemas.updatePlantInstanceSchema.parse({
      ...processedBody,
      id,
      userId: user.id
    }));
    // Remove id and userId from update data as they shouldn't be updated
    const {
      id: _,
      userId: __,
      ...dataToUpdate
    } =
    /* istanbul ignore next */
    (cov_1mdqq2a1gx().s[70]++, updateData);
    // Update the plant instance
    const updatedInstance =
    /* istanbul ignore next */
    (cov_1mdqq2a1gx().s[71]++, await _plantinstances.PlantInstanceQueries.update(id, dataToUpdate));
    // Get the enhanced plant instance with plant data
    const enhancedInstance =
    /* istanbul ignore next */
    (cov_1mdqq2a1gx().s[72]++, await _plantinstances.PlantInstanceQueries.getEnhancedById(updatedInstance.id));
    /* istanbul ignore next */
    cov_1mdqq2a1gx().s[73]++;
    return _server.NextResponse.json(enhancedInstance);
  } catch (error) {
    /* istanbul ignore next */
    cov_1mdqq2a1gx().s[74]++;
    console.error('Failed to update plant instance:', error);
    /* istanbul ignore next */
    cov_1mdqq2a1gx().s[75]++;
    if (
    /* istanbul ignore next */
    (cov_1mdqq2a1gx().b[19][0]++, error instanceof Error) &&
    /* istanbul ignore next */
    (cov_1mdqq2a1gx().b[19][1]++, error.message.includes('validation'))) {
      /* istanbul ignore next */
      cov_1mdqq2a1gx().b[18][0]++;
      cov_1mdqq2a1gx().s[76]++;
      return _server.NextResponse.json({
        error: 'Invalid plant instance data',
        details: error.message
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1mdqq2a1gx().b[18][1]++;
    }
    cov_1mdqq2a1gx().s[77]++;
    return _server.NextResponse.json({
      error: 'Failed to update plant instance'
    }, {
      status: 500
    });
  }
}
async function DELETE(request, {
  params
}) {
  /* istanbul ignore next */
  cov_1mdqq2a1gx().f[8]++;
  cov_1mdqq2a1gx().s[78]++;
  try {
    const {
      user
    } =
    /* istanbul ignore next */
    (cov_1mdqq2a1gx().s[79]++, await (0, _server1.validateRequest)());
    /* istanbul ignore next */
    cov_1mdqq2a1gx().s[80]++;
    if (!user) {
      /* istanbul ignore next */
      cov_1mdqq2a1gx().b[20][0]++;
      cov_1mdqq2a1gx().s[81]++;
      return _server.NextResponse.json({
        error: 'Unauthorized'
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_1mdqq2a1gx().b[20][1]++;
    }
    const resolvedParams =
    /* istanbul ignore next */
    (cov_1mdqq2a1gx().s[82]++, await params);
    const id =
    /* istanbul ignore next */
    (cov_1mdqq2a1gx().s[83]++, parseInt(resolvedParams.id, 10));
    /* istanbul ignore next */
    cov_1mdqq2a1gx().s[84]++;
    if (isNaN(id)) {
      /* istanbul ignore next */
      cov_1mdqq2a1gx().b[21][0]++;
      cov_1mdqq2a1gx().s[85]++;
      return _server.NextResponse.json({
        error: 'Invalid plant instance ID'
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1mdqq2a1gx().b[21][1]++;
    }
    // Check if the plant instance exists and belongs to the user
    const existingInstance =
    /* istanbul ignore next */
    (cov_1mdqq2a1gx().s[86]++, await _plantinstances.PlantInstanceQueries.getEnhancedById(id));
    /* istanbul ignore next */
    cov_1mdqq2a1gx().s[87]++;
    if (!existingInstance) {
      /* istanbul ignore next */
      cov_1mdqq2a1gx().b[22][0]++;
      cov_1mdqq2a1gx().s[88]++;
      return _server.NextResponse.json({
        error: 'Plant instance not found'
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_1mdqq2a1gx().b[22][1]++;
    }
    cov_1mdqq2a1gx().s[89]++;
    if (existingInstance.userId !== user.id) {
      /* istanbul ignore next */
      cov_1mdqq2a1gx().b[23][0]++;
      cov_1mdqq2a1gx().s[90]++;
      return _server.NextResponse.json({
        error: 'Forbidden'
      }, {
        status: 403
      });
    } else
    /* istanbul ignore next */
    {
      cov_1mdqq2a1gx().b[23][1]++;
    }
    // Delete the plant instance
    const deleted =
    /* istanbul ignore next */
    (cov_1mdqq2a1gx().s[91]++, await _plantinstances.PlantInstanceQueries.delete(id));
    /* istanbul ignore next */
    cov_1mdqq2a1gx().s[92]++;
    if (!deleted) {
      /* istanbul ignore next */
      cov_1mdqq2a1gx().b[24][0]++;
      cov_1mdqq2a1gx().s[93]++;
      return _server.NextResponse.json({
        error: 'Failed to delete plant instance'
      }, {
        status: 500
      });
    } else
    /* istanbul ignore next */
    {
      cov_1mdqq2a1gx().b[24][1]++;
    }
    cov_1mdqq2a1gx().s[94]++;
    return _server.NextResponse.json({
      success: true,
      message: 'Plant instance deleted successfully'
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1mdqq2a1gx().s[95]++;
    console.error('Failed to delete plant instance:', error);
    /* istanbul ignore next */
    cov_1mdqq2a1gx().s[96]++;
    return _server.NextResponse.json({
      error: 'Failed to delete plant instance'
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,