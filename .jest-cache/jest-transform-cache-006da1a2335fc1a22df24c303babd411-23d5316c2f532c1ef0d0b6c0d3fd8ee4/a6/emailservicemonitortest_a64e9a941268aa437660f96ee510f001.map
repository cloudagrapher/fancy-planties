{"version":3,"sources":["/Users/stefanbekker/projects/fancy-planties/src/__tests__/services/email-service-monitor.test.ts"],"sourcesContent":["/**\n * @jest-environment node\n */\n\nimport { EmailServiceMonitor } from '@/lib/services/email-service-monitor';\n\ndescribe('EmailServiceMonitor', () => {\n  let monitor: EmailServiceMonitor;\n\n  beforeEach(() => {\n    monitor = new EmailServiceMonitor();\n    jest.clearAllMocks();\n  });\n\n  describe('recordSuccess', () => {\n    it('should record successful email sends', () => {\n      monitor.recordSuccess(150);\n      monitor.recordSuccess(200);\n\n      const stats = monitor.getStats();\n      expect(stats.totalSent).toBe(2);\n      expect(stats.totalFailed).toBe(0);\n      expect(stats.quotaUsed).toBe(2);\n      expect(stats.successRate).toBe(100);\n      expect(stats.averageResponseTime).toBe(175); // (150 + 200) / 2\n    });\n\n    it('should update quota usage', () => {\n      monitor.recordSuccess(100);\n      monitor.recordSuccess(100);\n      monitor.recordSuccess(100);\n\n      const stats = monitor.getStats();\n      expect(stats.quotaUsed).toBe(3);\n    });\n  });\n\n  describe('recordFailure', () => {\n    it('should record failed email sends', () => {\n      const error = { message: 'API Error', code: 'API_ERROR' };\n      monitor.recordFailure(error, 300);\n\n      const stats = monitor.getStats();\n      expect(stats.totalSent).toBe(0);\n      expect(stats.totalFailed).toBe(1);\n      expect(stats.successRate).toBe(0);\n      expect(stats.errorsByType['API_ERROR']).toBe(1);\n      expect(stats.lastError).toEqual({\n        message: 'API Error',\n        code: 'API_ERROR',\n        timestamp: expect.any(Number),\n      });\n    });\n\n    it('should track different error types', () => {\n      monitor.recordFailure({ message: 'Network Error', code: 'NETWORK_ERROR' }, 100);\n      monitor.recordFailure({ message: 'API Error', code: 'API_ERROR' }, 100);\n      monitor.recordFailure({ message: 'Another API Error', code: 'API_ERROR' }, 100);\n\n      const stats = monitor.getStats();\n      expect(stats.errorsByType['NETWORK_ERROR']).toBe(1);\n      expect(stats.errorsByType['API_ERROR']).toBe(2);\n    });\n\n    it('should handle quota exceeded errors', () => {\n      const consoleSpy = jest.spyOn(console, 'error').mockImplementation();\n      \n      monitor.recordFailure({ message: 'Quota exceeded', code: 'QUOTA_EXCEEDED' }, 100);\n\n      expect(consoleSpy).toHaveBeenCalledWith(\n        expect.stringContaining('CRITICAL: Email quota exceeded!')\n      );\n      \n      consoleSpy.mockRestore();\n    });\n  });\n\n  describe('getStats', () => {\n    it('should return current statistics', () => {\n      monitor.recordSuccess(100);\n      monitor.recordFailure({ message: 'Error', code: 'API_ERROR' }, 200);\n\n      const stats = monitor.getStats();\n      expect(stats).toMatchObject({\n        totalSent: 1,\n        totalFailed: 1,\n        quotaUsed: 1,\n        quotaLimit: expect.any(Number),\n        successRate: 50,\n        averageResponseTime: 150, // (100 + 200) / 2\n        errorsByType: { API_ERROR: 1 },\n        lastResetTime: expect.any(Number),\n      });\n    });\n  });\n\n  describe('getRecentEvents', () => {\n    it('should return recent events', () => {\n      monitor.recordSuccess(100);\n      monitor.recordFailure({ message: 'Error', code: 'API_ERROR' }, 200);\n\n      const events = monitor.getRecentEvents(10);\n      expect(events).toHaveLength(2);\n      expect(events[0]).toMatchObject({\n        type: 'success',\n        responseTime: 100,\n        timestamp: expect.any(Number),\n      });\n      expect(events[1]).toMatchObject({\n        type: 'error',\n        responseTime: 200,\n        timestamp: expect.any(Number),\n        error: { message: 'Error', code: 'API_ERROR' },\n      });\n    });\n\n    it('should limit returned events', () => {\n      // Record more events than the limit\n      for (let i = 0; i < 10; i++) {\n        monitor.recordSuccess(100);\n      }\n\n      const events = monitor.getRecentEvents(5);\n      expect(events).toHaveLength(5);\n    });\n  });\n\n  describe('getErrorSummary', () => {\n    it('should return error summary', () => {\n      monitor.recordSuccess(100);\n      monitor.recordFailure({ message: 'Error 1', code: 'API_ERROR' }, 200);\n      monitor.recordFailure({ message: 'Error 2', code: 'NETWORK_ERROR' }, 300);\n      monitor.recordFailure({ message: 'Quota Error', code: 'QUOTA_EXCEEDED' }, 400);\n\n      const summary = monitor.getErrorSummary();\n      expect(summary.totalErrors).toBe(3);\n      expect(summary.errorsByType).toEqual({\n        API_ERROR: 1,\n        NETWORK_ERROR: 1,\n        QUOTA_EXCEEDED: 1,\n      });\n      expect(summary.recentErrors).toHaveLength(3);\n      expect(summary.criticalErrors).toHaveLength(1);\n      expect(summary.criticalErrors[0].error?.code).toBe('QUOTA_EXCEEDED');\n    });\n  });\n\n  describe('quota monitoring', () => {\n    it('should detect when quota is near limit', () => {\n      // Simulate quota limit of 100\n      const originalGetQuotaLimit = (monitor as any).getQuotaLimit;\n      (monitor as any).getQuotaLimit = () => 100;\n      \n      // Record 85 successful sends (85% of quota)\n      for (let i = 0; i < 85; i++) {\n        monitor.recordSuccess(100);\n      }\n\n      expect(monitor.isQuotaNearLimit(0.8)).toBe(true);\n      expect(monitor.isQuotaNearLimit(0.9)).toBe(false);\n      expect(monitor.getQuotaUsagePercentage()).toBe(85);\n\n      // Restore original method\n      (monitor as any).getQuotaLimit = originalGetQuotaLimit;\n    });\n\n    it('should handle zero quota limit', () => {\n      const originalGetQuotaLimit = (monitor as any).getQuotaLimit;\n      (monitor as any).getQuotaLimit = () => 0;\n      \n      // Reset stats to start fresh\n      monitor.forceReset();\n\n      monitor.recordSuccess(100);\n      \n      expect(monitor.isQuotaNearLimit()).toBe(false);\n      expect(monitor.getQuotaUsagePercentage()).toBe(0);\n\n      // Restore original method\n      (monitor as any).getQuotaLimit = originalGetQuotaLimit;\n    });\n  });\n\n  describe('getHealthStatus', () => {\n    it('should return healthy status for good metrics', () => {\n      // Start with fresh monitor\n      const freshMonitor = new EmailServiceMonitor();\n      \n      // Record mostly successful sends (95% success rate)\n      for (let i = 0; i < 95; i++) {\n        freshMonitor.recordSuccess(100);\n      }\n      for (let i = 0; i < 5; i++) {\n        freshMonitor.recordFailure({ message: 'Error', code: 'API_ERROR' }, 100);\n      }\n\n      const health = freshMonitor.getHealthStatus();\n      expect(health.status).toBe('healthy');\n      expect(health.issues).toHaveLength(0);\n      expect(health.recommendations).toHaveLength(0);\n    });\n\n    it('should return warning status for moderate issues', () => {\n      // Start with fresh monitor\n      const freshMonitor = new EmailServiceMonitor();\n      \n      // Record lower success rate (90%)\n      for (let i = 0; i < 90; i++) {\n        freshMonitor.recordSuccess(100);\n      }\n      for (let i = 0; i < 10; i++) {\n        freshMonitor.recordFailure({ message: 'Error', code: 'API_ERROR' }, 100);\n      }\n\n      const health = freshMonitor.getHealthStatus();\n      expect(health.status).toBe('warning');\n      expect(health.issues.length).toBeGreaterThan(0);\n      expect(health.recommendations.length).toBeGreaterThan(0);\n    });\n\n    it('should return critical status for severe issues', () => {\n      // Start with fresh monitor\n      const freshMonitor = new EmailServiceMonitor();\n      \n      // Record very low success rate (70%)\n      for (let i = 0; i < 70; i++) {\n        freshMonitor.recordSuccess(100);\n      }\n      for (let i = 0; i < 30; i++) {\n        freshMonitor.recordFailure({ message: 'Error', code: 'API_ERROR' }, 100);\n      }\n\n      const health = freshMonitor.getHealthStatus();\n      expect(health.status).toBe('critical');\n      expect(health.issues.length).toBeGreaterThan(0);\n      expect(health.recommendations.length).toBeGreaterThan(0);\n    });\n\n    it('should detect high response times', () => {\n      // Start with fresh monitor\n      const freshMonitor = new EmailServiceMonitor();\n      \n      // Record high response times\n      for (let i = 0; i < 10; i++) {\n        freshMonitor.recordSuccess(6000); // 6 seconds\n      }\n\n      const health = freshMonitor.getHealthStatus();\n      expect(health.status).toBe('warning');\n      expect(health.issues.some(issue => issue.includes('response time'))).toBe(true);\n    });\n\n    it('should detect recent quota exceeded errors', () => {\n      monitor.recordFailure({ message: 'Quota exceeded', code: 'QUOTA_EXCEEDED' }, 100);\n\n      const health = monitor.getHealthStatus();\n      expect(health.status).toBe('critical');\n      expect(health.issues.some(issue => issue.includes('Quota exceeded'))).toBe(true);\n    });\n  });\n\n  describe('resetDailyStats', () => {\n    it('should reset statistics', () => {\n      monitor.recordSuccess(100);\n      monitor.recordFailure({ message: 'Error', code: 'API_ERROR' }, 200);\n\n      monitor.resetDailyStats();\n\n      const stats = monitor.getStats();\n      expect(stats.totalSent).toBe(0);\n      expect(stats.totalFailed).toBe(0);\n      expect(stats.quotaUsed).toBe(0);\n      expect(stats.errorsByType).toEqual({});\n    });\n\n    it('should keep recent events but limit them', () => {\n      // Record many events\n      for (let i = 0; i < 200; i++) {\n        monitor.recordSuccess(100);\n      }\n\n      monitor.resetDailyStats();\n\n      const events = monitor.getRecentEvents(200);\n      expect(events.length).toBeLessThanOrEqual(100);\n    });\n  });\n\n  describe('forceReset', () => {\n    it('should force reset all statistics', () => {\n      monitor.recordSuccess(100);\n      monitor.recordFailure({ message: 'Error', code: 'API_ERROR' }, 200);\n\n      monitor.forceReset();\n\n      const stats = monitor.getStats();\n      expect(stats.totalSent).toBe(0);\n      expect(stats.totalFailed).toBe(0);\n      expect(stats.quotaUsed).toBe(0);\n      expect(stats.errorsByType).toEqual({});\n    });\n  });\n\n  describe('success rate calculation', () => {\n    it('should calculate success rate correctly', () => {\n      // 80% success rate\n      for (let i = 0; i < 80; i++) {\n        monitor.recordSuccess(100);\n      }\n      for (let i = 0; i < 20; i++) {\n        monitor.recordFailure({ message: 'Error', code: 'API_ERROR' }, 100);\n      }\n\n      const stats = monitor.getStats();\n      expect(stats.successRate).toBe(80);\n    });\n\n    it('should handle 100% success rate', () => {\n      for (let i = 0; i < 10; i++) {\n        monitor.recordSuccess(100);\n      }\n\n      const stats = monitor.getStats();\n      expect(stats.successRate).toBe(100);\n    });\n\n    it('should handle 0% success rate', () => {\n      for (let i = 0; i < 10; i++) {\n        monitor.recordFailure({ message: 'Error', code: 'API_ERROR' }, 100);\n      }\n\n      const stats = monitor.getStats();\n      expect(stats.successRate).toBe(0);\n    });\n\n    it('should default to 100% with no events', () => {\n      const stats = monitor.getStats();\n      expect(stats.successRate).toBe(100);\n    });\n  });\n});"],"names":["describe","monitor","beforeEach","EmailServiceMonitor","jest","clearAllMocks","it","recordSuccess","stats","getStats","expect","totalSent","toBe","totalFailed","quotaUsed","successRate","averageResponseTime","error","message","code","recordFailure","errorsByType","lastError","toEqual","timestamp","any","Number","consoleSpy","spyOn","console","mockImplementation","toHaveBeenCalledWith","stringContaining","mockRestore","toMatchObject","quotaLimit","API_ERROR","lastResetTime","events","getRecentEvents","toHaveLength","type","responseTime","i","summary","getErrorSummary","totalErrors","NETWORK_ERROR","QUOTA_EXCEEDED","recentErrors","criticalErrors","originalGetQuotaLimit","getQuotaLimit","isQuotaNearLimit","getQuotaUsagePercentage","forceReset","freshMonitor","health","getHealthStatus","status","issues","recommendations","length","toBeGreaterThan","some","issue","includes","resetDailyStats","toBeLessThanOrEqual"],"mappings":"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"}