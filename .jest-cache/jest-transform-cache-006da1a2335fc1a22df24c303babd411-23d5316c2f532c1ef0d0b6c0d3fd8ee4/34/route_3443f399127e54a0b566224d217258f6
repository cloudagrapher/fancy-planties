ae132e1e830c473e158195437ddfdba7
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "GET", {
    enumerable: true,
    get: function() {
        return GET;
    }
});
const _server = require("next/server");
const _carehistory = require("../../../../../lib/db/queries/care-history");
const _server1 = require("../../../../../lib/auth/server");
async function GET(request, { params }) {
    try {
        const { user } = await (0, _server1.validateRequest)();
        if (!user) {
            return _server.NextResponse.json({
                error: 'Unauthorized'
            }, {
                status: 401
            });
        }
        const resolvedParams = await params;
        const plantInstanceId = parseInt(resolvedParams.plantInstanceId, 10);
        if (isNaN(plantInstanceId)) {
            return _server.NextResponse.json({
                error: 'Invalid plant instance ID'
            }, {
                status: 400
            });
        }
        // Get query parameters for filtering
        const { searchParams } = new URL(request.url);
        const careType = searchParams.get('careType') || undefined;
        const startDate = searchParams.get('startDate') ? new Date(searchParams.get('startDate')) : undefined;
        const endDate = searchParams.get('endDate') ? new Date(searchParams.get('endDate')) : undefined;
        const limit = searchParams.get('limit') ? parseInt(searchParams.get('limit'), 10) : 50;
        const offset = searchParams.get('offset') ? parseInt(searchParams.get('offset'), 10) : 0;
        const sortBy = searchParams.get('sortBy') || 'care_date';
        const sortOrder = searchParams.get('sortOrder') || 'desc';
        const filters = {
            careType: careType,
            startDate,
            endDate,
            limit,
            offset,
            sortBy,
            sortOrder
        };
        const careHistory = await _carehistory.CareHistoryQueries.getCareHistoryForPlant(plantInstanceId, user.id, filters);
        return _server.NextResponse.json(careHistory);
    } catch (error) {
        console.error('Failed to get care history:', error);
        return _server.NextResponse.json({
            error: 'Failed to get care history'
        }, {
            status: 500
        });
    }
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9zdGVmYW5iZWtrZXIvcHJvamVjdHMvZmFuY3ktcGxhbnRpZXMvc3JjL2FwcC9hcGkvY2FyZS9oaXN0b3J5L1twbGFudEluc3RhbmNlSWRdL3JvdXRlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5leHRSZXF1ZXN0LCBOZXh0UmVzcG9uc2UgfSBmcm9tICduZXh0L3NlcnZlcic7XG5pbXBvcnQgeyBDYXJlSGlzdG9yeVF1ZXJpZXMgfSBmcm9tICdAL2xpYi9kYi9xdWVyaWVzL2NhcmUtaGlzdG9yeSc7XG5pbXBvcnQgeyB2YWxpZGF0ZVJlcXVlc3QgfSBmcm9tICdAL2xpYi9hdXRoL3NlcnZlcic7XG5cbi8vIEdFVCAvYXBpL2NhcmUvaGlzdG9yeS9bcGxhbnRJbnN0YW5jZUlkXSAtIEdldCBjYXJlIGhpc3RvcnkgZm9yIGEgcGxhbnQgaW5zdGFuY2VcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBHRVQoXG4gIHJlcXVlc3Q6IE5leHRSZXF1ZXN0LFxuICB7IHBhcmFtcyB9OiB7IHBhcmFtczogUHJvbWlzZTx7IHBsYW50SW5zdGFuY2VJZDogc3RyaW5nIH0+IH1cbikge1xuICB0cnkge1xuICAgIGNvbnN0IHsgdXNlciB9ID0gYXdhaXQgdmFsaWRhdGVSZXF1ZXN0KCk7XG4gICAgaWYgKCF1c2VyKSB7XG4gICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oeyBlcnJvcjogJ1VuYXV0aG9yaXplZCcgfSwgeyBzdGF0dXM6IDQwMSB9KTtcbiAgICB9XG5cbiAgICBjb25zdCByZXNvbHZlZFBhcmFtcyA9IGF3YWl0IHBhcmFtcztcbiAgICBjb25zdCBwbGFudEluc3RhbmNlSWQgPSBwYXJzZUludChyZXNvbHZlZFBhcmFtcy5wbGFudEluc3RhbmNlSWQsIDEwKTtcbiAgICBpZiAoaXNOYU4ocGxhbnRJbnN0YW5jZUlkKSkge1xuICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHsgZXJyb3I6ICdJbnZhbGlkIHBsYW50IGluc3RhbmNlIElEJyB9LCB7IHN0YXR1czogNDAwIH0pO1xuICAgIH1cblxuICAgIC8vIEdldCBxdWVyeSBwYXJhbWV0ZXJzIGZvciBmaWx0ZXJpbmdcbiAgICBjb25zdCB7IHNlYXJjaFBhcmFtcyB9ID0gbmV3IFVSTChyZXF1ZXN0LnVybCk7XG4gICAgY29uc3QgY2FyZVR5cGUgPSBzZWFyY2hQYXJhbXMuZ2V0KCdjYXJlVHlwZScpIHx8IHVuZGVmaW5lZDtcbiAgICBjb25zdCBzdGFydERhdGUgPSBzZWFyY2hQYXJhbXMuZ2V0KCdzdGFydERhdGUnKSA/IG5ldyBEYXRlKHNlYXJjaFBhcmFtcy5nZXQoJ3N0YXJ0RGF0ZScpISkgOiB1bmRlZmluZWQ7XG4gICAgY29uc3QgZW5kRGF0ZSA9IHNlYXJjaFBhcmFtcy5nZXQoJ2VuZERhdGUnKSA/IG5ldyBEYXRlKHNlYXJjaFBhcmFtcy5nZXQoJ2VuZERhdGUnKSEpIDogdW5kZWZpbmVkO1xuICAgIGNvbnN0IGxpbWl0ID0gc2VhcmNoUGFyYW1zLmdldCgnbGltaXQnKSA/IHBhcnNlSW50KHNlYXJjaFBhcmFtcy5nZXQoJ2xpbWl0JykhLCAxMCkgOiA1MDtcbiAgICBjb25zdCBvZmZzZXQgPSBzZWFyY2hQYXJhbXMuZ2V0KCdvZmZzZXQnKSA/IHBhcnNlSW50KHNlYXJjaFBhcmFtcy5nZXQoJ29mZnNldCcpISwgMTApIDogMDtcbiAgICBjb25zdCBzb3J0QnkgPSBzZWFyY2hQYXJhbXMuZ2V0KCdzb3J0QnknKSBhcyAnY2FyZV9kYXRlJyB8ICdjYXJlX3R5cGUnIHwgJ2NyZWF0ZWRfYXQnIHx8ICdjYXJlX2RhdGUnO1xuICAgIGNvbnN0IHNvcnRPcmRlciA9IHNlYXJjaFBhcmFtcy5nZXQoJ3NvcnRPcmRlcicpIGFzICdhc2MnIHwgJ2Rlc2MnIHx8ICdkZXNjJztcblxuICAgIGNvbnN0IGZpbHRlcnMgPSB7XG4gICAgICBjYXJlVHlwZTogY2FyZVR5cGUgYXMgYW55LFxuICAgICAgc3RhcnREYXRlLFxuICAgICAgZW5kRGF0ZSxcbiAgICAgIGxpbWl0LFxuICAgICAgb2Zmc2V0LFxuICAgICAgc29ydEJ5LFxuICAgICAgc29ydE9yZGVyLFxuICAgIH07XG5cbiAgICBjb25zdCBjYXJlSGlzdG9yeSA9IGF3YWl0IENhcmVIaXN0b3J5UXVlcmllcy5nZXRDYXJlSGlzdG9yeUZvclBsYW50KFxuICAgICAgcGxhbnRJbnN0YW5jZUlkLFxuICAgICAgdXNlci5pZCxcbiAgICAgIGZpbHRlcnNcbiAgICApO1xuXG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKGNhcmVIaXN0b3J5KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gZ2V0IGNhcmUgaGlzdG9yeTonLCBlcnJvcik7XG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxuICAgICAgeyBlcnJvcjogJ0ZhaWxlZCB0byBnZXQgY2FyZSBoaXN0b3J5JyB9LFxuICAgICAgeyBzdGF0dXM6IDUwMCB9XG4gICAgKTtcbiAgfVxufSJdLCJuYW1lcyI6WyJHRVQiLCJyZXF1ZXN0IiwicGFyYW1zIiwidXNlciIsInZhbGlkYXRlUmVxdWVzdCIsIk5leHRSZXNwb25zZSIsImpzb24iLCJlcnJvciIsInN0YXR1cyIsInJlc29sdmVkUGFyYW1zIiwicGxhbnRJbnN0YW5jZUlkIiwicGFyc2VJbnQiLCJpc05hTiIsInNlYXJjaFBhcmFtcyIsIlVSTCIsInVybCIsImNhcmVUeXBlIiwiZ2V0IiwidW5kZWZpbmVkIiwic3RhcnREYXRlIiwiRGF0ZSIsImVuZERhdGUiLCJsaW1pdCIsIm9mZnNldCIsInNvcnRCeSIsInNvcnRPcmRlciIsImZpbHRlcnMiLCJjYXJlSGlzdG9yeSIsIkNhcmVIaXN0b3J5UXVlcmllcyIsImdldENhcmVIaXN0b3J5Rm9yUGxhbnQiLCJpZCIsImNvbnNvbGUiXSwibWFwcGluZ3MiOiI7Ozs7K0JBS3NCQTs7O2VBQUFBOzs7d0JBTG9COzZCQUNQO3lCQUNIO0FBR3pCLGVBQWVBLElBQ3BCQyxPQUFvQixFQUNwQixFQUFFQyxNQUFNLEVBQW9EO0lBRTVELElBQUk7UUFDRixNQUFNLEVBQUVDLElBQUksRUFBRSxHQUFHLE1BQU1DLElBQUFBLHdCQUFlO1FBQ3RDLElBQUksQ0FBQ0QsTUFBTTtZQUNULE9BQU9FLG9CQUFZLENBQUNDLElBQUksQ0FBQztnQkFBRUMsT0FBTztZQUFlLEdBQUc7Z0JBQUVDLFFBQVE7WUFBSTtRQUNwRTtRQUVBLE1BQU1DLGlCQUFpQixNQUFNUDtRQUM3QixNQUFNUSxrQkFBa0JDLFNBQVNGLGVBQWVDLGVBQWUsRUFBRTtRQUNqRSxJQUFJRSxNQUFNRixrQkFBa0I7WUFDMUIsT0FBT0wsb0JBQVksQ0FBQ0MsSUFBSSxDQUFDO2dCQUFFQyxPQUFPO1lBQTRCLEdBQUc7Z0JBQUVDLFFBQVE7WUFBSTtRQUNqRjtRQUVBLHFDQUFxQztRQUNyQyxNQUFNLEVBQUVLLFlBQVksRUFBRSxHQUFHLElBQUlDLElBQUliLFFBQVFjLEdBQUc7UUFDNUMsTUFBTUMsV0FBV0gsYUFBYUksR0FBRyxDQUFDLGVBQWVDO1FBQ2pELE1BQU1DLFlBQVlOLGFBQWFJLEdBQUcsQ0FBQyxlQUFlLElBQUlHLEtBQUtQLGFBQWFJLEdBQUcsQ0FBQyxnQkFBaUJDO1FBQzdGLE1BQU1HLFVBQVVSLGFBQWFJLEdBQUcsQ0FBQyxhQUFhLElBQUlHLEtBQUtQLGFBQWFJLEdBQUcsQ0FBQyxjQUFlQztRQUN2RixNQUFNSSxRQUFRVCxhQUFhSSxHQUFHLENBQUMsV0FBV04sU0FBU0UsYUFBYUksR0FBRyxDQUFDLFVBQVcsTUFBTTtRQUNyRixNQUFNTSxTQUFTVixhQUFhSSxHQUFHLENBQUMsWUFBWU4sU0FBU0UsYUFBYUksR0FBRyxDQUFDLFdBQVksTUFBTTtRQUN4RixNQUFNTyxTQUFTWCxhQUFhSSxHQUFHLENBQUMsYUFBeUQ7UUFDekYsTUFBTVEsWUFBWVosYUFBYUksR0FBRyxDQUFDLGdCQUFrQztRQUVyRSxNQUFNUyxVQUFVO1lBQ2RWLFVBQVVBO1lBQ1ZHO1lBQ0FFO1lBQ0FDO1lBQ0FDO1lBQ0FDO1lBQ0FDO1FBQ0Y7UUFFQSxNQUFNRSxjQUFjLE1BQU1DLCtCQUFrQixDQUFDQyxzQkFBc0IsQ0FDakVuQixpQkFDQVAsS0FBSzJCLEVBQUUsRUFDUEo7UUFHRixPQUFPckIsb0JBQVksQ0FBQ0MsSUFBSSxDQUFDcUI7SUFDM0IsRUFBRSxPQUFPcEIsT0FBTztRQUNkd0IsUUFBUXhCLEtBQUssQ0FBQywrQkFBK0JBO1FBQzdDLE9BQU9GLG9CQUFZLENBQUNDLElBQUksQ0FDdEI7WUFBRUMsT0FBTztRQUE2QixHQUN0QztZQUFFQyxRQUFRO1FBQUk7SUFFbEI7QUFDRiJ9