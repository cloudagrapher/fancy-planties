703a532a7c376dc4ec85e54c53d17df6
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "careHelpers", {
    enumerable: true,
    get: function() {
        return careHelpers;
    }
});
const careHelpers = {
    // Get care type display information
    getCareTypeDisplay: (careType)=>{
        const displays = {
            fertilizer: {
                label: 'Fertilizer',
                icon: '🌱',
                color: 'text-green-600 bg-green-50',
                description: 'Applied fertilizer to promote growth'
            },
            water: {
                label: 'Water',
                icon: '💧',
                color: 'text-blue-600 bg-blue-50',
                description: 'Watered the plant'
            },
            repot: {
                label: 'Repot',
                icon: '🪴',
                color: 'text-amber-600 bg-amber-50',
                description: 'Repotted with fresh soil'
            },
            prune: {
                label: 'Prune',
                icon: '✂️',
                color: 'text-purple-600 bg-purple-50',
                description: 'Pruned dead or overgrown parts'
            },
            inspect: {
                label: 'Inspect',
                icon: '🔍',
                color: 'text-indigo-600 bg-indigo-50',
                description: 'Inspected for pests or issues'
            },
            other: {
                label: 'Other',
                icon: '📝',
                color: 'text-gray-600 bg-gray-50',
                description: 'Other care activity'
            }
        };
        return displays[careType];
    },
    // Parse fertilizer schedule to days
    parseFertilizerSchedule: (schedule)=>{
        if (!schedule) return 30;
        const scheduleMap = {
            // Legacy formats
            'weekly': 7,
            'biweekly': 14,
            'monthly': 30,
            'bimonthly': 60,
            'quarterly': 90,
            // Week-based formats
            '1 week': 7,
            '2 weeks': 14,
            '1 month': 30,
            '2 months': 60,
            '3 months': 90,
            // Your actual database formats
            'every 2 weeks': 14,
            'every 2-3 weeks': 18,
            'every 2-4 weeks': 21,
            'every 3-4 weeks': 24,
            'every 4 weeks': 28,
            'every 4-6 weeks': 35,
            'every 6-8 weeks': 49,
            'every 17 weeks': 119
        };
        // Check if it's a predefined schedule
        if (scheduleMap[schedule]) {
            return scheduleMap[schedule];
        }
        // Try to parse as custom number of days
        const customDays = parseInt(schedule, 10);
        if (!isNaN(customDays) && customDays > 0) {
            return customDays;
        }
        // Default to monthly if unable to parse
        return 30;
    },
    // Calculate next fertilizer due date
    calculateNextFertilizerDue: (lastFertilized, schedule)=>{
        if (!lastFertilized) return null;
        const intervalDays = careHelpers.parseFertilizerSchedule(schedule);
        const nextDue = new Date(lastFertilized);
        nextDue.setDate(nextDue.getDate() + intervalDays);
        return nextDue;
    },
    // Calculate care status based on fertilizer due date
    calculateCareStatus: (fertilizerDue)=>{
        if (!fertilizerDue) return 'unknown';
        const now = new Date();
        const diffMs = fertilizerDue.getTime() - now.getTime();
        const diffDays = Math.ceil(diffMs / (1000 * 60 * 60 * 24));
        if (diffDays < 0) return 'overdue';
        if (diffDays === 0) return 'due_today';
        if (diffDays <= 7) return 'due_soon';
        return 'healthy';
    },
    // Calculate care urgency for prioritization
    calculateCareUrgency: (fertilizerDue)=>{
        if (!fertilizerDue) return 'none';
        const now = new Date();
        const diffMs = fertilizerDue.getTime() - now.getTime();
        const diffDays = Math.ceil(diffMs / (1000 * 60 * 60 * 24));
        if (diffDays < -7) return 'critical';
        if (diffDays < 0) return 'high';
        if (diffDays <= 1) return 'medium';
        if (diffDays <= 7) return 'low';
        return 'none';
    },
    // Calculate days until fertilizer due (negative if overdue)
    calculateDaysUntilFertilizerDue: (fertilizerDue)=>{
        if (!fertilizerDue) return null;
        const now = new Date();
        const diffMs = fertilizerDue.getTime() - now.getTime();
        return Math.ceil(diffMs / (1000 * 60 * 60 * 24));
    },
    // Calculate days since last fertilized
    calculateDaysSinceLastFertilized: (lastFertilized)=>{
        if (!lastFertilized) return null;
        const now = new Date();
        const diffMs = now.getTime() - lastFertilized.getTime();
        return Math.floor(diffMs / (1000 * 60 * 60 * 24));
    },
    // Calculate days since last repot
    calculateDaysSinceLastRepot: (lastRepot)=>{
        if (!lastRepot) return null;
        const now = new Date();
        const diffMs = now.getTime() - lastRepot.getTime();
        return Math.floor(diffMs / (1000 * 60 * 60 * 24));
    },
    // Calculate care consistency score (0-100)
    calculateCareConsistencyScore: (careHistory, schedule, plantCreatedAt)=>{
        if (careHistory.length === 0) return 0;
        const intervalDays = careHelpers.parseFertilizerSchedule(schedule);
        const now = new Date();
        const totalDays = Math.floor((now.getTime() - plantCreatedAt.getTime()) / (1000 * 60 * 60 * 24));
        // Calculate expected number of care events
        const expectedCareEvents = Math.floor(totalDays / intervalDays);
        if (expectedCareEvents === 0) return 100;
        // Calculate actual care events (only fertilizer for consistency score)
        const fertilizerEvents = careHistory.filter((care)=>care.careType === 'fertilizer');
        const actualCareEvents = fertilizerEvents.length;
        // Calculate score based on adherence to schedule
        const adherenceScore = Math.min(100, actualCareEvents / expectedCareEvents * 100);
        // Bonus points for recent care (within last interval)
        const lastCare = fertilizerEvents[fertilizerEvents.length - 1];
        const daysSinceLastCare = lastCare ? Math.floor((now.getTime() - lastCare.careDate.getTime()) / (1000 * 60 * 60 * 24)) : Infinity;
        const recentCareBonus = daysSinceLastCare <= intervalDays ? 10 : 0;
        return Math.min(100, adherenceScore + recentCareBonus);
    },
    // Get care status color for UI
    getCareStatusColor: (status)=>{
        switch(status){
            case 'overdue':
                return 'text-red-600 bg-red-50 border-red-200';
            case 'due_today':
                return 'text-amber-600 bg-amber-50 border-amber-200';
            case 'due_soon':
                return 'text-yellow-600 bg-yellow-50 border-yellow-200';
            case 'healthy':
                return 'text-green-600 bg-green-50 border-green-200';
            case 'unknown':
                return 'text-gray-600 bg-gray-50 border-gray-200';
            default:
                return 'text-gray-600 bg-gray-50 border-gray-200';
        }
    },
    // Get care urgency color for UI
    getCareUrgencyColor: (urgency)=>{
        switch(urgency){
            case 'critical':
                return 'bg-red-500';
            case 'high':
                return 'bg-red-400';
            case 'medium':
                return 'bg-amber-400';
            case 'low':
                return 'bg-yellow-400';
            case 'none':
                return 'bg-green-400';
            default:
                return 'bg-gray-400';
        }
    },
    // Format care date for display
    formatCareDate: (date)=>{
        const now = new Date();
        const diffMs = now.getTime() - date.getTime();
        const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));
        if (diffDays === 0) return 'Today';
        if (diffDays === 1) return 'Yesterday';
        if (diffDays < 7) return `${diffDays} days ago`;
        if (diffDays < 30) return `${Math.floor(diffDays / 7)} weeks ago`;
        if (diffDays < 365) return `${Math.floor(diffDays / 30)} months ago`;
        return `${Math.floor(diffDays / 365)} years ago`;
    },
    // Validate care form data
    validateCareForm: (data)=>{
        const errors = [];
        const warnings = [];
        // Required fields
        if (!data.plantInstanceId) {
            errors.push('Plant instance is required');
        }
        if (!data.careType) {
            errors.push('Care type is required');
        }
        if (!data.careDate) {
            errors.push('Care date is required');
        }
        // Date validation
        if (data.careDate) {
            const now = new Date();
            if (data.careDate > now) {
                warnings.push('Care date is in the future');
            }
            const oneYearAgo = new Date();
            oneYearAgo.setFullYear(oneYearAgo.getFullYear() - 1);
            if (data.careDate < oneYearAgo) {
                warnings.push('Care date is more than a year ago');
            }
        }
        // Care type specific validation
        if (data.careType === 'fertilizer' && !data.fertilizerType) {
            warnings.push('Consider specifying fertilizer type for better tracking');
        }
        if (data.careType === 'repot' && (!data.potSize || !data.soilType)) {
            warnings.push('Consider specifying pot size and soil type for repotting records');
        }
        return {
            isValid: errors.length === 0,
            errors,
            warnings
        };
    },
    // Create care timeline from history
    createCareTimeline: (careHistory)=>{
        const sortedHistory = [
            ...careHistory
        ].sort((a, b)=>b.careDate.getTime() - a.careDate.getTime());
        return sortedHistory.map((care, index)=>{
            const nextCare = sortedHistory[index + 1];
            const daysSinceLastCare = nextCare ? Math.floor((care.careDate.getTime() - nextCare.careDate.getTime()) / (1000 * 60 * 60 * 24)) : undefined;
            // Determine if care was on schedule (simplified logic)
            const wasOnSchedule = care.careType === 'fertilizer' ? daysSinceLastCare ? daysSinceLastCare <= 35 : true // Within 35 days is reasonable
             : true;
            return {
                id: care.id,
                date: care.careDate,
                careType: care.careType,
                notes: care.notes || undefined,
                fertilizerType: care.fertilizerType || undefined,
                potSize: care.potSize || undefined,
                soilType: care.soilType || undefined,
                images: care.images,
                daysSinceLastCare,
                wasOnSchedule
            };
        });
    },
    // Get default quick care actions
    getDefaultQuickCareActions: ()=>[
            {
                id: 'fertilize',
                label: 'Fertilize',
                icon: '🌱',
                careType: 'fertilizer',
                color: 'bg-green-500 hover:bg-green-600',
                description: 'Apply fertilizer to promote growth',
                isEnabled: true
            },
            {
                id: 'water',
                label: 'Water',
                icon: '💧',
                careType: 'water',
                color: 'bg-blue-500 hover:bg-blue-600',
                description: 'Water the plant',
                isEnabled: true
            },
            {
                id: 'inspect',
                label: 'Inspect',
                icon: '🔍',
                careType: 'inspect',
                color: 'bg-indigo-500 hover:bg-indigo-600',
                description: 'Check for pests or issues',
                isEnabled: true
            },
            {
                id: 'prune',
                label: 'Prune',
                icon: '✂️',
                careType: 'prune',
                color: 'bg-purple-500 hover:bg-purple-600',
                description: 'Remove dead or overgrown parts',
                isEnabled: true
            }
        ]
};

//# sourceMappingURL=data:application/json;base64,