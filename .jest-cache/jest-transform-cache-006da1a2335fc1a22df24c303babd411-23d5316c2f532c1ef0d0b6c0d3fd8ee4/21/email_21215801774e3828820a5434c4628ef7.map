{"version":3,"names":["EmailServiceError","cov_15fnqfwaj8","f","s","ResendEmailService","createEmailService","Error","constructor","message","code","name","config","resend","_resend","Resend","apiKey","sendVerificationEmail","email","sendEmailWithRetry","maxRetries","lastError","attempt","data","error","emails","send","from","fromName","fromEmail","to","subject","html","generateVerificationEmailTemplate","b","mapResendErrorCode","id","_email","emailConfig","logEmailCodes","console","log","String","isDevelopment","delay","Math","pow","Promise","resolve","setTimeout","toLowerCase","includes","codeExpiryMinutes","process","env","RESEND_API_KEY"],"sources":["/Users/stefanbekker/projects/fancy-planties/src/lib/services/email.ts"],"sourcesContent":["import 'server-only';\n\nimport { Resend } from 'resend';\nimport { emailConfig } from '@/lib/config/email';\n\nexport interface EmailService {\n  sendVerificationEmail(email: string, code: string, name: string): Promise<boolean>;\n}\n\nexport interface EmailConfig {\n  apiKey: string;\n  fromEmail: string;\n  fromName: string;\n}\n\nexport class EmailServiceError extends Error {\n  constructor(\n    message: string,\n    public code: 'QUOTA_EXCEEDED' | 'API_ERROR' | 'NETWORK_ERROR' | 'INVALID_EMAIL'\n  ) {\n    super(message);\n    this.name = 'EmailServiceError';\n  }\n}\n\nexport class ResendEmailService implements EmailService {\n  private resend: Resend;\n  private config: EmailConfig;\n\n  constructor(config: EmailConfig) {\n    this.resend = new Resend(config.apiKey);\n    this.config = config;\n  }\n\n  async sendVerificationEmail(email: string, code: string, name: string): Promise<boolean> {\n    return await this.sendEmailWithRetry(email, code, name, 3);\n  }\n\n  private async sendEmailWithRetry(\n    email: string,\n    code: string,\n    name: string,\n    maxRetries: number\n  ): Promise<boolean> {\n    let lastError: Error | null = null;\n\n    for (let attempt = 1; attempt <= maxRetries; attempt++) {\n      try {\n        const { data, error } = await this.resend.emails.send({\n          from: `${this.config.fromName} <${this.config.fromEmail}>`,\n          to: [email],\n          subject: 'Verify your email address',\n          html: this.generateVerificationEmailTemplate(code, name),\n        });\n\n        if (error) {\n          throw new EmailServiceError(\n            `Resend API error: ${error.message}`,\n            this.mapResendErrorCode(error)\n          );\n        }\n\n        if (data?.id) {\n          // Log success in development\n          if (emailConfig.logEmailCodes) {\n            console.log(`‚úÖ Verification email sent to ${email} with code: ${code}`);\n          }\n          return true;\n        }\n\n        throw new EmailServiceError('No email ID returned from Resend', 'API_ERROR');\n\n      } catch (error) {\n        lastError = error instanceof Error ? error : new Error(String(error));\n        \n        // Log attempt in development\n        if (emailConfig.isDevelopment) {\n          console.log(`‚ùå Email send attempt ${attempt}/${maxRetries} failed:`, lastError.message);\n        }\n\n        // Don't retry on certain errors\n        if (error instanceof EmailServiceError && \n            (error.code === 'INVALID_EMAIL' || error.code === 'QUOTA_EXCEEDED')) {\n          throw error;\n        }\n\n        // Wait before retry with exponential backoff\n        if (attempt < maxRetries) {\n          const delay = Math.pow(2, attempt - 1) * 1000; // 1s, 2s, 4s\n          await new Promise(resolve => setTimeout(resolve, delay));\n        }\n      }\n    }\n\n    throw lastError || new EmailServiceError('All retry attempts failed', 'API_ERROR');\n  }\n\n  private mapResendErrorCode(error: any): EmailServiceError['code'] {\n    const message = error.message?.toLowerCase() || '';\n    \n    if (message.includes('quota') || message.includes('limit')) {\n      return 'QUOTA_EXCEEDED';\n    }\n    if (message.includes('invalid') && message.includes('email')) {\n      return 'INVALID_EMAIL';\n    }\n    if (message.includes('network') || message.includes('timeout')) {\n      return 'NETWORK_ERROR';\n    }\n    \n    return 'API_ERROR';\n  }\n\n  private generateVerificationEmailTemplate(code: string, name: string): string {\n    return `\n      <!DOCTYPE html>\n      <html lang=\"en\">\n      <head>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>Verify Your Email</title>\n        <style>\n          body {\n            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n            line-height: 1.6;\n            color: #333;\n            max-width: 600px;\n            margin: 0 auto;\n            padding: 20px;\n            background-color: #f9f9f9;\n          }\n          .container {\n            background: white;\n            padding: 40px;\n            border-radius: 8px;\n            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n          }\n          .header {\n            text-align: center;\n            margin-bottom: 30px;\n          }\n          .logo {\n            font-size: 24px;\n            font-weight: bold;\n            color: #22c55e;\n            margin-bottom: 10px;\n          }\n          .code-container {\n            background: #f8f9fa;\n            border: 2px dashed #22c55e;\n            border-radius: 8px;\n            padding: 20px;\n            text-align: center;\n            margin: 30px 0;\n          }\n          .verification-code {\n            font-size: 32px;\n            font-weight: bold;\n            letter-spacing: 8px;\n            color: #22c55e;\n            font-family: 'Courier New', monospace;\n          }\n          .instructions {\n            background: #e7f3ff;\n            border-left: 4px solid #2196f3;\n            padding: 15px;\n            margin: 20px 0;\n          }\n          .footer {\n            text-align: center;\n            margin-top: 30px;\n            padding-top: 20px;\n            border-top: 1px solid #eee;\n            color: #666;\n            font-size: 14px;\n          }\n          .warning {\n            background: #fff3cd;\n            border: 1px solid #ffeaa7;\n            border-radius: 4px;\n            padding: 12px;\n            margin: 20px 0;\n            color: #856404;\n          }\n        </style>\n      </head>\n      <body>\n        <div class=\"container\">\n          <div class=\"header\">\n            <div class=\"logo\">üå± Fancy Planties</div>\n            <h1>Verify Your Email Address</h1>\n          </div>\n          \n          <p>Hi ${name},</p>\n          \n          <p>Welcome to Fancy Planties! To complete your account setup and start tracking your plants, please verify your email address using the code below:</p>\n          \n          <div class=\"code-container\">\n            <div class=\"verification-code\">${code}</div>\n          </div>\n          \n          <div class=\"instructions\">\n            <strong>How to verify:</strong>\n            <ol>\n              <li>Return to the Fancy Planties verification page</li>\n              <li>Enter the 6-digit code above</li>\n              <li>Click \"Verify Email\" to complete your registration</li>\n            </ol>\n          </div>\n          \n          <div class=\"warning\">\n            <strong>‚è∞ Important:</strong> This verification code will expire in ${emailConfig.codeExpiryMinutes} minutes for security reasons. If you need a new code, you can request one on the verification page.\n          </div>\n          \n          <p>If you didn't create an account with Fancy Planties, you can safely ignore this email.</p>\n          \n          <div class=\"footer\">\n            <p>Happy planting! üåø</p>\n            <p><strong>The Fancy Planties Team</strong></p>\n            <hr style=\"margin: 20px 0; border: none; border-top: 1px solid #eee;\">\n            <p style=\"font-size: 12px; color: #999;\">\n              This is an automated message. Please do not reply to this email.<br>\n              If you have questions, visit our support page or contact us through the app.\n            </p>\n          </div>\n        </div>\n      </body>\n      </html>\n    `;\n  }\n}\n\n// Factory function to create email service instance\nexport function createEmailService(): EmailService {\n  const config: EmailConfig = {\n    apiKey: process.env.RESEND_API_KEY!,\n    fromEmail: emailConfig.fromEmail,\n    fromName: emailConfig.fromName,\n  };\n\n  if (!config.apiKey) {\n    throw new Error('RESEND_API_KEY environment variable is required');\n  }\n\n  return new ResendEmailService(config);\n}"],"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","ignoreList":[]}