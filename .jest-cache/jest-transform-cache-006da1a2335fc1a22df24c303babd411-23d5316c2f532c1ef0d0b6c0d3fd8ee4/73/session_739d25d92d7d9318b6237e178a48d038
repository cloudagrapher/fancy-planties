74597a864b0d51134fa4269d9ee6f51a
// Re-export client-safe utilities
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get getSessionActivities () {
        return getSessionActivities;
    },
    get logSessionActivity () {
        return logSessionActivity;
    }
});
_export_star(require("./client"), exports);
function _export_star(from, to) {
    Object.keys(from).forEach(function(k) {
        if (k !== "default" && !Object.prototype.hasOwnProperty.call(to, k)) {
            Object.defineProperty(to, k, {
                enumerable: true,
                get: function() {
                    return from[k];
                }
            });
        }
    });
    return from;
}
// In-memory session activity storage (for demonstration)
// In production, this would be in a database
const sessionActivities = [];
function logSessionActivity(activity) {
    sessionActivities.push({
        ...activity,
        timestamp: new Date()
    });
    // Keep only last 100 activities per session (in memory)
    const sessionActivitiesForSession = sessionActivities.filter((a)=>a.sessionId === activity.sessionId);
    if (sessionActivitiesForSession.length > 100) {
        const toRemove = sessionActivitiesForSession.slice(0, -100);
        toRemove.forEach((activity)=>{
            const index = sessionActivities.indexOf(activity);
            if (index > -1) {
                sessionActivities.splice(index, 1);
            }
        });
    }
}
function getSessionActivities(sessionId) {
    return sessionActivities.filter((a)=>a.sessionId === sessionId);
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9zdGVmYW5iZWtrZXIvcHJvamVjdHMvZmFuY3ktcGxhbnRpZXMvc3JjL2xpYi9hdXRoL3Nlc3Npb24udHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gUmUtZXhwb3J0IGNsaWVudC1zYWZlIHV0aWxpdGllc1xuZXhwb3J0ICogZnJvbSAnLi9jbGllbnQnO1xuXG4vLyBJbi1tZW1vcnkgc2Vzc2lvbiBhY3Rpdml0eSBzdG9yYWdlIChmb3IgZGVtb25zdHJhdGlvbilcbi8vIEluIHByb2R1Y3Rpb24sIHRoaXMgd291bGQgYmUgaW4gYSBkYXRhYmFzZVxuY29uc3Qgc2Vzc2lvbkFjdGl2aXRpZXM6IFNlc3Npb25BY3Rpdml0eVtdID0gW107XG5cbmV4cG9ydCBmdW5jdGlvbiBsb2dTZXNzaW9uQWN0aXZpdHkoYWN0aXZpdHk6IE9taXQ8U2Vzc2lvbkFjdGl2aXR5LCAndGltZXN0YW1wJz4pIHtcbiAgc2Vzc2lvbkFjdGl2aXRpZXMucHVzaCh7XG4gICAgLi4uYWN0aXZpdHksXG4gICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLFxuICB9KTtcbiAgXG4gIC8vIEtlZXAgb25seSBsYXN0IDEwMCBhY3Rpdml0aWVzIHBlciBzZXNzaW9uIChpbiBtZW1vcnkpXG4gIGNvbnN0IHNlc3Npb25BY3Rpdml0aWVzRm9yU2Vzc2lvbiA9IHNlc3Npb25BY3Rpdml0aWVzLmZpbHRlcihcbiAgICBhID0+IGEuc2Vzc2lvbklkID09PSBhY3Rpdml0eS5zZXNzaW9uSWRcbiAgKTtcbiAgXG4gIGlmIChzZXNzaW9uQWN0aXZpdGllc0ZvclNlc3Npb24ubGVuZ3RoID4gMTAwKSB7XG4gICAgY29uc3QgdG9SZW1vdmUgPSBzZXNzaW9uQWN0aXZpdGllc0ZvclNlc3Npb24uc2xpY2UoMCwgLTEwMCk7XG4gICAgdG9SZW1vdmUuZm9yRWFjaChhY3Rpdml0eSA9PiB7XG4gICAgICBjb25zdCBpbmRleCA9IHNlc3Npb25BY3Rpdml0aWVzLmluZGV4T2YoYWN0aXZpdHkpO1xuICAgICAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICAgICAgc2Vzc2lvbkFjdGl2aXRpZXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0U2Vzc2lvbkFjdGl2aXRpZXMoc2Vzc2lvbklkOiBzdHJpbmcpOiBTZXNzaW9uQWN0aXZpdHlbXSB7XG4gIHJldHVybiBzZXNzaW9uQWN0aXZpdGllcy5maWx0ZXIoYSA9PiBhLnNlc3Npb25JZCA9PT0gc2Vzc2lvbklkKTtcbn1cblxuLy8gSW1wb3J0IFNlc3Npb25BY3Rpdml0eSB0eXBlIGZyb20gY2xpZW50XG5pbXBvcnQgdHlwZSB7IFNlc3Npb25BY3Rpdml0eSB9IGZyb20gJy4vY2xpZW50JzsiXSwibmFtZXMiOlsiZ2V0U2Vzc2lvbkFjdGl2aXRpZXMiLCJsb2dTZXNzaW9uQWN0aXZpdHkiLCJzZXNzaW9uQWN0aXZpdGllcyIsImFjdGl2aXR5IiwicHVzaCIsInRpbWVzdGFtcCIsIkRhdGUiLCJzZXNzaW9uQWN0aXZpdGllc0ZvclNlc3Npb24iLCJmaWx0ZXIiLCJhIiwic2Vzc2lvbklkIiwibGVuZ3RoIiwidG9SZW1vdmUiLCJzbGljZSIsImZvckVhY2giLCJpbmRleCIsImluZGV4T2YiLCJzcGxpY2UiXSwibWFwcGluZ3MiOiJBQUFBLGtDQUFrQzs7Ozs7Ozs7Ozs7O1FBNkJsQkE7ZUFBQUE7O1FBdEJBQztlQUFBQTs7O3FCQU5GOzs7Ozs7Ozs7Ozs7OztBQUVkLHlEQUF5RDtBQUN6RCw2Q0FBNkM7QUFDN0MsTUFBTUMsb0JBQXVDLEVBQUU7QUFFeEMsU0FBU0QsbUJBQW1CRSxRQUE0QztJQUM3RUQsa0JBQWtCRSxJQUFJLENBQUM7UUFDckIsR0FBR0QsUUFBUTtRQUNYRSxXQUFXLElBQUlDO0lBQ2pCO0lBRUEsd0RBQXdEO0lBQ3hELE1BQU1DLDhCQUE4Qkwsa0JBQWtCTSxNQUFNLENBQzFEQyxDQUFBQSxJQUFLQSxFQUFFQyxTQUFTLEtBQUtQLFNBQVNPLFNBQVM7SUFHekMsSUFBSUgsNEJBQTRCSSxNQUFNLEdBQUcsS0FBSztRQUM1QyxNQUFNQyxXQUFXTCw0QkFBNEJNLEtBQUssQ0FBQyxHQUFHLENBQUM7UUFDdkRELFNBQVNFLE9BQU8sQ0FBQ1gsQ0FBQUE7WUFDZixNQUFNWSxRQUFRYixrQkFBa0JjLE9BQU8sQ0FBQ2I7WUFDeEMsSUFBSVksUUFBUSxDQUFDLEdBQUc7Z0JBQ2RiLGtCQUFrQmUsTUFBTSxDQUFDRixPQUFPO1lBQ2xDO1FBQ0Y7SUFDRjtBQUNGO0FBRU8sU0FBU2YscUJBQXFCVSxTQUFpQjtJQUNwRCxPQUFPUixrQkFBa0JNLE1BQU0sQ0FBQ0MsQ0FBQUEsSUFBS0EsRUFBRUMsU0FBUyxLQUFLQTtBQUN2RCJ9