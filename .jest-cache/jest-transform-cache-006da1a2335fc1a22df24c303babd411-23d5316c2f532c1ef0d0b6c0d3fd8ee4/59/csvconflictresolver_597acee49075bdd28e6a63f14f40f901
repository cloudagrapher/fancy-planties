8f2228b0d438b7102aa04b19d63f9dcf
"use strict";

/* istanbul ignore next */
function cov_9dphj4pjn() {
  var path = "/Users/stefanbekker/projects/fancy-planties/src/lib/services/csv-conflict-resolver.ts";
  var hash = "c787bda989c64876e1bb3d6d2d9b5e3442e41bb3";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/stefanbekker/projects/fancy-planties/src/lib/services/csv-conflict-resolver.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 35
        }
      },
      "3": {
        start: {
          line: 11,
          column: 12
        },
        end: {
          line: 11,
          column: 28
        }
      },
      "4": {
        start: {
          line: 12,
          column: 16
        },
        end: {
          line: 12,
          column: 39
        }
      },
      "5": {
        start: {
          line: 13,
          column: 20
        },
        end: {
          line: 13,
          column: 42
        }
      },
      "6": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 29
        }
      },
      "7": {
        start: {
          line: 21,
          column: 26
        },
        end: {
          line: 21,
          column: 36
        }
      },
      "8": {
        start: {
          line: 22,
          column: 36
        },
        end: {
          line: 22,
          column: 37
        }
      },
      "9": {
        start: {
          line: 23,
          column: 23
        },
        end: {
          line: 23,
          column: 25
        }
      },
      "10": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 44,
          column: 9
        }
      },
      "11": {
        start: {
          line: 25,
          column: 29
        },
        end: {
          line: 25,
          column: 102
        }
      },
      "12": {
        start: {
          line: 25,
          column: 49
        },
        end: {
          line: 25,
          column: 101
        }
      },
      "13": {
        start: {
          line: 26,
          column: 12
        },
        end: {
          line: 33,
          column: 13
        }
      },
      "14": {
        start: {
          line: 27,
          column: 16
        },
        end: {
          line: 31,
          column: 19
        }
      },
      "15": {
        start: {
          line: 32,
          column: 16
        },
        end: {
          line: 32,
          column: 25
        }
      },
      "16": {
        start: {
          line: 34,
          column: 12
        },
        end: {
          line: 43,
          column: 13
        }
      },
      "17": {
        start: {
          line: 35,
          column: 16
        },
        end: {
          line: 35,
          column: 65
        }
      },
      "18": {
        start: {
          line: 36,
          column: 16
        },
        end: {
          line: 36,
          column: 40
        }
      },
      "19": {
        start: {
          line: 38,
          column: 16
        },
        end: {
          line: 42,
          column: 19
        }
      },
      "20": {
        start: {
          line: 45,
          column: 8
        },
        end: {
          line: 57,
          column: 10
        }
      },
      "21": {
        start: {
          line: 62,
          column: 8
        },
        end: {
          line: 74,
          column: 9
        }
      },
      "22": {
        start: {
          line: 64,
          column: 16
        },
        end: {
          line: 64,
          column: 71
        }
      },
      "23": {
        start: {
          line: 65,
          column: 16
        },
        end: {
          line: 65,
          column: 22
        }
      },
      "24": {
        start: {
          line: 67,
          column: 16
        },
        end: {
          line: 67,
          column: 70
        }
      },
      "25": {
        start: {
          line: 68,
          column: 16
        },
        end: {
          line: 68,
          column: 22
        }
      },
      "26": {
        start: {
          line: 70,
          column: 16
        },
        end: {
          line: 70,
          column: 72
        }
      },
      "27": {
        start: {
          line: 71,
          column: 16
        },
        end: {
          line: 71,
          column: 22
        }
      },
      "28": {
        start: {
          line: 73,
          column: 16
        },
        end: {
          line: 73,
          column: 75
        }
      },
      "29": {
        start: {
          line: 79,
          column: 8
        },
        end: {
          line: 111,
          column: 9
        }
      },
      "30": {
        start: {
          line: 81,
          column: 16
        },
        end: {
          line: 81,
          column: 22
        }
      },
      "31": {
        start: {
          line: 84,
          column: 16
        },
        end: {
          line: 90,
          column: 17
        }
      },
      "32": {
        start: {
          line: 85,
          column: 20
        },
        end: {
          line: 89,
          column: 97
        }
      },
      "33": {
        start: {
          line: 91,
          column: 16
        },
        end: {
          line: 91,
          column: 22
        }
      },
      "34": {
        start: {
          line: 94,
          column: 16
        },
        end: {
          line: 104,
          column: 17
        }
      },
      "35": {
        start: {
          line: 95,
          column: 20
        },
        end: {
          line: 103,
          column: 23
        }
      },
      "36": {
        start: {
          line: 105,
          column: 16
        },
        end: {
          line: 105,
          column: 22
        }
      },
      "37": {
        start: {
          line: 108,
          column: 16
        },
        end: {
          line: 108,
          column: 94
        }
      },
      "38": {
        start: {
          line: 110,
          column: 16
        },
        end: {
          line: 110,
          column: 83
        }
      },
      "39": {
        start: {
          line: 116,
          column: 8
        },
        end: {
          line: 151,
          column: 9
        }
      },
      "40": {
        start: {
          line: 118,
          column: 16
        },
        end: {
          line: 118,
          column: 22
        }
      },
      "41": {
        start: {
          line: 121,
          column: 16
        },
        end: {
          line: 131,
          column: 17
        }
      },
      "42": {
        start: {
          line: 122,
          column: 20
        },
        end: {
          line: 130,
          column: 23
        }
      },
      "43": {
        start: {
          line: 132,
          column: 16
        },
        end: {
          line: 132,
          column: 22
        }
      },
      "44": {
        start: {
          line: 135,
          column: 16
        },
        end: {
          line: 145,
          column: 17
        }
      },
      "45": {
        start: {
          line: 136,
          column: 20
        },
        end: {
          line: 144,
          column: 23
        }
      },
      "46": {
        start: {
          line: 146,
          column: 16
        },
        end: {
          line: 146,
          column: 22
        }
      },
      "47": {
        start: {
          line: 148,
          column: 16
        },
        end: {
          line: 148,
          column: 94
        }
      },
      "48": {
        start: {
          line: 150,
          column: 16
        },
        end: {
          line: 150,
          column: 83
        }
      },
      "49": {
        start: {
          line: 156,
          column: 8
        },
        end: {
          line: 184,
          column: 9
        }
      },
      "50": {
        start: {
          line: 158,
          column: 16
        },
        end: {
          line: 158,
          column: 22
        }
      },
      "51": {
        start: {
          line: 161,
          column: 16
        },
        end: {
          line: 171,
          column: 17
        }
      },
      "52": {
        start: {
          line: 162,
          column: 20
        },
        end: {
          line: 170,
          column: 23
        }
      },
      "53": {
        start: {
          line: 172,
          column: 16
        },
        end: {
          line: 172,
          column: 22
        }
      },
      "54": {
        start: {
          line: 175,
          column: 16
        },
        end: {
          line: 178,
          column: 17
        }
      },
      "55": {
        start: {
          line: 179,
          column: 16
        },
        end: {
          line: 179,
          column: 22
        }
      },
      "56": {
        start: {
          line: 181,
          column: 16
        },
        end: {
          line: 181,
          column: 94
        }
      },
      "57": {
        start: {
          line: 183,
          column: 16
        },
        end: {
          line: 183,
          column: 83
        }
      },
      "58": {
        start: {
          line: 189,
          column: 8
        },
        end: {
          line: 189,
          column: 69
        }
      },
      "59": {
        start: {
          line: 194,
          column: 28
        },
        end: {
          line: 194,
          column: 30
        }
      },
      "60": {
        start: {
          line: 195,
          column: 27
        },
        end: {
          line: 195,
          column: 60
        }
      },
      "61": {
        start: {
          line: 196,
          column: 8
        },
        end: {
          line: 230,
          column: 9
        }
      },
      "62": {
        start: {
          line: 198,
          column: 16
        },
        end: {
          line: 207,
          column: 19
        }
      },
      "63": {
        start: {
          line: 208,
          column: 16
        },
        end: {
          line: 208,
          column: 22
        }
      },
      "64": {
        start: {
          line: 210,
          column: 16
        },
        end: {
          line: 216,
          column: 19
        }
      },
      "65": {
        start: {
          line: 217,
          column: 16
        },
        end: {
          line: 217,
          column: 22
        }
      },
      "66": {
        start: {
          line: 219,
          column: 16
        },
        end: {
          line: 228,
          column: 19
        }
      },
      "67": {
        start: {
          line: 229,
          column: 16
        },
        end: {
          line: 229,
          column: 22
        }
      },
      "68": {
        start: {
          line: 231,
          column: 8
        },
        end: {
          line: 231,
          column: 27
        }
      },
      "69": {
        start: {
          line: 236,
          column: 8
        },
        end: {
          line: 254,
          column: 9
        }
      },
      "70": {
        start: {
          line: 238,
          column: 16
        },
        end: {
          line: 240,
          column: 17
        }
      },
      "71": {
        start: {
          line: 239,
          column: 20
        },
        end: {
          line: 239,
          column: 151
        }
      },
      "72": {
        start: {
          line: 241,
          column: 16
        },
        end: {
          line: 241,
          column: 28
        }
      },
      "73": {
        start: {
          line: 243,
          column: 16
        },
        end: {
          line: 245,
          column: 17
        }
      },
      "74": {
        start: {
          line: 244,
          column: 20
        },
        end: {
          line: 244,
          column: 157
        }
      },
      "75": {
        start: {
          line: 246,
          column: 16
        },
        end: {
          line: 246,
          column: 28
        }
      },
      "76": {
        start: {
          line: 248,
          column: 16
        },
        end: {
          line: 250,
          column: 17
        }
      },
      "77": {
        start: {
          line: 249,
          column: 20
        },
        end: {
          line: 249,
          column: 151
        }
      },
      "78": {
        start: {
          line: 251,
          column: 16
        },
        end: {
          line: 251,
          column: 28
        }
      },
      "79": {
        start: {
          line: 253,
          column: 16
        },
        end: {
          line: 253,
          column: 29
        }
      },
      "80": {
        start: {
          line: 259,
          column: 8
        },
        end: {
          line: 263,
          column: 255
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 23
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 20,
            column: 6
          },
          end: {
            line: 20,
            column: 7
          }
        },
        loc: {
          start: {
            line: 20,
            column: 53
          },
          end: {
            line: 58,
            column: 5
          }
        },
        line: 20
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 25,
            column: 44
          },
          end: {
            line: 25,
            column: 45
          }
        },
        loc: {
          start: {
            line: 25,
            column: 49
          },
          end: {
            line: 25,
            column: 101
          }
        },
        line: 25
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 61,
            column: 6
          },
          end: {
            line: 61,
            column: 7
          }
        },
        loc: {
          start: {
            line: 61,
            column: 50
          },
          end: {
            line: 75,
            column: 5
          }
        },
        line: 61
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 78,
            column: 6
          },
          end: {
            line: 78,
            column: 7
          }
        },
        loc: {
          start: {
            line: 78,
            column: 56
          },
          end: {
            line: 112,
            column: 5
          }
        },
        line: 78
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 115,
            column: 6
          },
          end: {
            line: 115,
            column: 7
          }
        },
        loc: {
          start: {
            line: 115,
            column: 55
          },
          end: {
            line: 152,
            column: 5
          }
        },
        line: 115
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 155,
            column: 6
          },
          end: {
            line: 155,
            column: 7
          }
        },
        loc: {
          start: {
            line: 155,
            column: 57
          },
          end: {
            line: 185,
            column: 5
          }
        },
        line: 155
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 188,
            column: 6
          },
          end: {
            line: 188,
            column: 7
          }
        },
        loc: {
          start: {
            line: 188,
            column: 35
          },
          end: {
            line: 190,
            column: 5
          }
        },
        line: 188
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 193,
            column: 6
          },
          end: {
            line: 193,
            column: 7
          }
        },
        loc: {
          start: {
            line: 193,
            column: 40
          },
          end: {
            line: 232,
            column: 5
          }
        },
        line: 193
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 235,
            column: 6
          },
          end: {
            line: 235,
            column: 7
          }
        },
        loc: {
          start: {
            line: 235,
            column: 47
          },
          end: {
            line: 255,
            column: 5
          }
        },
        line: 235
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 258,
            column: 6
          },
          end: {
            line: 258,
            column: 7
          }
        },
        loc: {
          start: {
            line: 258,
            column: 49
          },
          end: {
            line: 264,
            column: 5
          }
        },
        line: 258
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 26,
            column: 12
          },
          end: {
            line: 33,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 26,
            column: 12
          },
          end: {
            line: 33,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 26
      },
      "1": {
        loc: {
          start: {
            line: 40,
            column: 29
          },
          end: {
            line: 40,
            column: 89
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 40,
            column: 54
          },
          end: {
            line: 40,
            column: 67
          }
        }, {
          start: {
            line: 40,
            column: 70
          },
          end: {
            line: 40,
            column: 89
          }
        }],
        line: 40
      },
      "2": {
        loc: {
          start: {
            line: 62,
            column: 8
          },
          end: {
            line: 74,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 63,
            column: 12
          },
          end: {
            line: 65,
            column: 22
          }
        }, {
          start: {
            line: 66,
            column: 12
          },
          end: {
            line: 68,
            column: 22
          }
        }, {
          start: {
            line: 69,
            column: 12
          },
          end: {
            line: 71,
            column: 22
          }
        }, {
          start: {
            line: 72,
            column: 12
          },
          end: {
            line: 73,
            column: 75
          }
        }],
        line: 62
      },
      "3": {
        loc: {
          start: {
            line: 79,
            column: 8
          },
          end: {
            line: 111,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 80,
            column: 12
          },
          end: {
            line: 81,
            column: 22
          }
        }, {
          start: {
            line: 82,
            column: 12
          },
          end: {
            line: 91,
            column: 22
          }
        }, {
          start: {
            line: 92,
            column: 12
          },
          end: {
            line: 105,
            column: 22
          }
        }, {
          start: {
            line: 106,
            column: 12
          },
          end: {
            line: 108,
            column: 94
          }
        }, {
          start: {
            line: 109,
            column: 12
          },
          end: {
            line: 110,
            column: 83
          }
        }],
        line: 79
      },
      "4": {
        loc: {
          start: {
            line: 84,
            column: 16
          },
          end: {
            line: 90,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 84,
            column: 16
          },
          end: {
            line: 90,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 84
      },
      "5": {
        loc: {
          start: {
            line: 84,
            column: 20
          },
          end: {
            line: 84,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 84,
            column: 20
          },
          end: {
            line: 84,
            column: 35
          }
        }, {
          start: {
            line: 84,
            column: 39
          },
          end: {
            line: 84,
            column: 62
          }
        }],
        line: 84
      },
      "6": {
        loc: {
          start: {
            line: 86,
            column: 36
          },
          end: {
            line: 86,
            column: 100
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 86,
            column: 36
          },
          end: {
            line: 86,
            column: 62
          }
        }, {
          start: {
            line: 86,
            column: 66
          },
          end: {
            line: 86,
            column: 100
          }
        }],
        line: 86
      },
      "7": {
        loc: {
          start: {
            line: 87,
            column: 42
          },
          end: {
            line: 87,
            column: 118
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 87,
            column: 42
          },
          end: {
            line: 87,
            column: 74
          }
        }, {
          start: {
            line: 87,
            column: 78
          },
          end: {
            line: 87,
            column: 118
          }
        }],
        line: 87
      },
      "8": {
        loc: {
          start: {
            line: 94,
            column: 16
          },
          end: {
            line: 104,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 94,
            column: 16
          },
          end: {
            line: 104,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 94
      },
      "9": {
        loc: {
          start: {
            line: 116,
            column: 8
          },
          end: {
            line: 151,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 117,
            column: 12
          },
          end: {
            line: 118,
            column: 22
          }
        }, {
          start: {
            line: 119,
            column: 12
          },
          end: {
            line: 132,
            column: 22
          }
        }, {
          start: {
            line: 133,
            column: 12
          },
          end: {
            line: 146,
            column: 22
          }
        }, {
          start: {
            line: 147,
            column: 12
          },
          end: {
            line: 148,
            column: 94
          }
        }, {
          start: {
            line: 149,
            column: 12
          },
          end: {
            line: 150,
            column: 83
          }
        }],
        line: 116
      },
      "10": {
        loc: {
          start: {
            line: 121,
            column: 16
          },
          end: {
            line: 131,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 121,
            column: 16
          },
          end: {
            line: 131,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 121
      },
      "11": {
        loc: {
          start: {
            line: 135,
            column: 16
          },
          end: {
            line: 145,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 135,
            column: 16
          },
          end: {
            line: 145,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 135
      },
      "12": {
        loc: {
          start: {
            line: 135,
            column: 20
          },
          end: {
            line: 135,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 135,
            column: 20
          },
          end: {
            line: 135,
            column: 35
          }
        }, {
          start: {
            line: 135,
            column: 39
          },
          end: {
            line: 135,
            column: 71
          }
        }],
        line: 135
      },
      "13": {
        loc: {
          start: {
            line: 156,
            column: 8
          },
          end: {
            line: 184,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 157,
            column: 12
          },
          end: {
            line: 158,
            column: 22
          }
        }, {
          start: {
            line: 159,
            column: 12
          },
          end: {
            line: 172,
            column: 22
          }
        }, {
          start: {
            line: 173,
            column: 12
          },
          end: {
            line: 179,
            column: 22
          }
        }, {
          start: {
            line: 180,
            column: 12
          },
          end: {
            line: 181,
            column: 94
          }
        }, {
          start: {
            line: 182,
            column: 12
          },
          end: {
            line: 183,
            column: 83
          }
        }],
        line: 156
      },
      "14": {
        loc: {
          start: {
            line: 161,
            column: 16
          },
          end: {
            line: 171,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 161,
            column: 16
          },
          end: {
            line: 171,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 161
      },
      "15": {
        loc: {
          start: {
            line: 175,
            column: 16
          },
          end: {
            line: 178,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 175,
            column: 16
          },
          end: {
            line: 178,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 175
      },
      "16": {
        loc: {
          start: {
            line: 175,
            column: 20
          },
          end: {
            line: 175,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 175,
            column: 20
          },
          end: {
            line: 175,
            column: 35
          }
        }, {
          start: {
            line: 175,
            column: 39
          },
          end: {
            line: 175,
            column: 70
          }
        }],
        line: 175
      },
      "17": {
        loc: {
          start: {
            line: 196,
            column: 8
          },
          end: {
            line: 230,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 197,
            column: 12
          },
          end: {
            line: 208,
            column: 22
          }
        }, {
          start: {
            line: 209,
            column: 12
          },
          end: {
            line: 217,
            column: 22
          }
        }, {
          start: {
            line: 218,
            column: 12
          },
          end: {
            line: 229,
            column: 22
          }
        }],
        line: 196
      },
      "18": {
        loc: {
          start: {
            line: 236,
            column: 8
          },
          end: {
            line: 254,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 237,
            column: 12
          },
          end: {
            line: 241,
            column: 28
          }
        }, {
          start: {
            line: 242,
            column: 12
          },
          end: {
            line: 246,
            column: 28
          }
        }, {
          start: {
            line: 247,
            column: 12
          },
          end: {
            line: 251,
            column: 28
          }
        }, {
          start: {
            line: 252,
            column: 12
          },
          end: {
            line: 253,
            column: 29
          }
        }],
        line: 236
      },
      "19": {
        loc: {
          start: {
            line: 238,
            column: 16
          },
          end: {
            line: 240,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 238,
            column: 16
          },
          end: {
            line: 240,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 238
      },
      "20": {
        loc: {
          start: {
            line: 238,
            column: 20
          },
          end: {
            line: 238,
            column: 87
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 238,
            column: 20
          },
          end: {
            line: 238,
            column: 54
          }
        }, {
          start: {
            line: 238,
            column: 58
          },
          end: {
            line: 238,
            column: 87
          }
        }],
        line: 238
      },
      "21": {
        loc: {
          start: {
            line: 239,
            column: 27
          },
          end: {
            line: 239,
            column: 150
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 239,
            column: 27
          },
          end: {
            line: 239,
            column: 42
          }
        }, {
          start: {
            line: 239,
            column: 46
          },
          end: {
            line: 239,
            column: 68
          }
        }, {
          start: {
            line: 239,
            column: 72
          },
          end: {
            line: 239,
            column: 93
          }
        }, {
          start: {
            line: 239,
            column: 97
          },
          end: {
            line: 239,
            column: 120
          }
        }, {
          start: {
            line: 239,
            column: 124
          },
          end: {
            line: 239,
            column: 150
          }
        }],
        line: 239
      },
      "22": {
        loc: {
          start: {
            line: 243,
            column: 16
          },
          end: {
            line: 245,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 243,
            column: 16
          },
          end: {
            line: 245,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 243
      },
      "23": {
        loc: {
          start: {
            line: 243,
            column: 20
          },
          end: {
            line: 243,
            column: 87
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 243,
            column: 20
          },
          end: {
            line: 243,
            column: 54
          }
        }, {
          start: {
            line: 243,
            column: 58
          },
          end: {
            line: 243,
            column: 87
          }
        }],
        line: 243
      },
      "24": {
        loc: {
          start: {
            line: 244,
            column: 27
          },
          end: {
            line: 244,
            column: 156
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 244,
            column: 27
          },
          end: {
            line: 244,
            column: 42
          }
        }, {
          start: {
            line: 244,
            column: 46
          },
          end: {
            line: 244,
            column: 69
          }
        }, {
          start: {
            line: 244,
            column: 73
          },
          end: {
            line: 244,
            column: 97
          }
        }, {
          start: {
            line: 244,
            column: 101
          },
          end: {
            line: 244,
            column: 125
          }
        }, {
          start: {
            line: 244,
            column: 129
          },
          end: {
            line: 244,
            column: 156
          }
        }],
        line: 244
      },
      "25": {
        loc: {
          start: {
            line: 248,
            column: 16
          },
          end: {
            line: 250,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 248,
            column: 16
          },
          end: {
            line: 250,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 248
      },
      "26": {
        loc: {
          start: {
            line: 249,
            column: 27
          },
          end: {
            line: 249,
            column: 150
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 249,
            column: 27
          },
          end: {
            line: 249,
            column: 42
          }
        }, {
          start: {
            line: 249,
            column: 46
          },
          end: {
            line: 249,
            column: 68
          }
        }, {
          start: {
            line: 249,
            column: 72
          },
          end: {
            line: 249,
            column: 93
          }
        }, {
          start: {
            line: 249,
            column: 97
          },
          end: {
            line: 249,
            column: 120
          }
        }, {
          start: {
            line: 249,
            column: 124
          },
          end: {
            line: 249,
            column: 150
          }
        }],
        line: 249
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0, 0, 0],
      "3": [0, 0, 0, 0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0, 0, 0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0, 0, 0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0, 0],
      "18": [0, 0, 0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0, 0, 0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0, 0, 0, 0],
      "25": [0, 0],
      "26": [0, 0, 0, 0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/stefanbekker/projects/fancy-planties/src/lib/services/csv-conflict-resolver.ts"],
      sourcesContent: ["import { db } from '@/lib/db';\nimport { plants, plantInstances, propagations } from '@/lib/db/schema';\nimport { eq, and } from 'drizzle-orm';\nimport type { ImportConflict, ImportSummary } from '@/lib/validation/csv-schemas';\n\nexport interface ConflictResolution {\n  conflictId: string;\n  action: 'skip' | 'merge' | 'create_new' | 'manual_review';\n  data?: any;\n}\n\nexport class CSVConflictResolver {\n  private userId: number;\n\n  constructor(userId: number) {\n    this.userId = userId;\n  }\n\n  /**\n   * Resolve conflicts based on user decisions\n   */\n  async resolveConflicts(\n    conflicts: ImportConflict[],\n    resolutions: ConflictResolution[]\n  ): Promise<ImportSummary> {\n    const startTime = new Date();\n    let successfulResolutions = 0;\n    const errors: any[] = [];\n\n    for (const resolution of resolutions) {\n      const conflict = conflicts.find(c => \n        this.generateConflictId(c) === resolution.conflictId\n      );\n\n      if (!conflict) {\n        errors.push({\n          rowIndex: -1,\n          message: `Conflict not found: ${resolution.conflictId}`,\n          severity: 'error',\n        });\n        continue;\n      }\n\n      try {\n        await this.resolveConflict(conflict, resolution);\n        successfulResolutions++;\n      } catch (error) {\n        errors.push({\n          rowIndex: conflict.rowIndex,\n          message: error instanceof Error ? error.message : 'Resolution failed',\n          severity: 'error',\n        });\n      }\n    }\n\n    return {\n      totalRows: conflicts.length,\n      processedRows: resolutions.length,\n      successfulImports: successfulResolutions,\n      errors,\n      conflicts: [],\n      warnings: [],\n      skippedRows: conflicts.length - resolutions.length,\n      importType: 'plant_taxonomy', // Will be overridden based on context\n      startTime,\n      endTime: new Date(),\n      userId: this.userId,\n    };\n  }\n\n  /**\n   * Resolve a single conflict based on the resolution action\n   */\n  private async resolveConflict(\n    conflict: ImportConflict,\n    resolution: ConflictResolution\n  ): Promise<void> {\n    switch (conflict.type) {\n      case 'duplicate_plant':\n        await this.resolveDuplicatePlant(conflict, resolution);\n        break;\n      case 'missing_parent':\n        await this.resolveMissingParent(conflict, resolution);\n        break;\n      case 'invalid_taxonomy':\n        await this.resolveInvalidTaxonomy(conflict, resolution);\n        break;\n      default:\n        throw new Error(`Unknown conflict type: ${conflict.type}`);\n    }\n  }\n\n  /**\n   * Resolve duplicate plant conflicts\n   */\n  private async resolveDuplicatePlant(\n    conflict: ImportConflict,\n    resolution: ConflictResolution\n  ): Promise<void> {\n    switch (resolution.action) {\n      case 'skip':\n        // Do nothing - skip the duplicate\n        break;\n\n      case 'merge':\n        // Update existing plant with new information if provided\n        if (resolution.data && conflict.existingRecord) {\n          await db\n            .update(plants)\n            .set({\n              commonName: resolution.data.commonName || conflict.existingRecord.commonName,\n              careInstructions: resolution.data.careInstructions || conflict.existingRecord.careInstructions,\n              updatedAt: new Date(),\n            })\n            .where(eq(plants.id, conflict.existingRecord.id));\n        }\n        break;\n\n      case 'create_new':\n        // Create a new plant with modified data to avoid duplicate\n        if (resolution.data) {\n          await db.insert(plants).values({\n            family: resolution.data.family,\n            genus: resolution.data.genus,\n            species: resolution.data.species,\n            commonName: resolution.data.commonName,\n            careInstructions: resolution.data.careInstructions,\n            createdBy: this.userId,\n            isVerified: false,\n          });\n        }\n        break;\n\n      case 'manual_review':\n        // Mark for manual review - no automatic action\n        throw new Error('Manual review required - no automatic resolution available');\n\n      default:\n        throw new Error(`Invalid resolution action: ${resolution.action}`);\n    }\n  }\n\n  /**\n   * Resolve missing parent conflicts for propagations\n   */\n  private async resolveMissingParent(\n    conflict: ImportConflict,\n    resolution: ConflictResolution\n  ): Promise<void> {\n    switch (resolution.action) {\n      case 'skip':\n        // Skip creating the propagation\n        break;\n\n      case 'create_new':\n        // Create propagation without parent link\n        if (resolution.data) {\n          await db.insert(propagations).values({\n            userId: this.userId,\n            plantId: resolution.data.plantId,\n            parentInstanceId: null, // No parent\n            nickname: resolution.data.nickname,\n            location: resolution.data.location,\n            dateStarted: new Date(resolution.data.dateStarted),\n            status: 'started',\n          });\n        }\n        break;\n\n      case 'merge':\n        // Link to existing parent instance if specified\n        if (resolution.data && resolution.data.parentInstanceId) {\n          await db.insert(propagations).values({\n            userId: this.userId,\n            plantId: resolution.data.plantId,\n            parentInstanceId: resolution.data.parentInstanceId,\n            nickname: resolution.data.nickname,\n            location: resolution.data.location,\n            dateStarted: new Date(resolution.data.dateStarted),\n            status: 'started',\n          });\n        }\n        break;\n\n      case 'manual_review':\n        throw new Error('Manual review required - no automatic resolution available');\n\n      default:\n        throw new Error(`Invalid resolution action: ${resolution.action}`);\n    }\n  }\n\n  /**\n   * Resolve invalid taxonomy conflicts\n   */\n  private async resolveInvalidTaxonomy(\n    conflict: ImportConflict,\n    resolution: ConflictResolution\n  ): Promise<void> {\n    switch (resolution.action) {\n      case 'skip':\n        // Skip the invalid entry\n        break;\n\n      case 'create_new':\n        // Create with corrected taxonomy data\n        if (resolution.data) {\n          await db.insert(plants).values({\n            family: resolution.data.family,\n            genus: resolution.data.genus,\n            species: resolution.data.species,\n            commonName: resolution.data.commonName,\n            careInstructions: resolution.data.careInstructions,\n            createdBy: this.userId,\n            isVerified: false,\n          });\n        }\n        break;\n\n      case 'merge':\n        // Link to existing plant with similar taxonomy\n        if (resolution.data && resolution.data.existingPlantId) {\n          // The conflict resolution would involve using the existing plant\n          // instead of creating a new one - this is handled at the import level\n        }\n        break;\n\n      case 'manual_review':\n        throw new Error('Manual review required - no automatic resolution available');\n\n      default:\n        throw new Error(`Invalid resolution action: ${resolution.action}`);\n    }\n  }\n\n  /**\n   * Generate a unique ID for a conflict for tracking resolutions\n   */\n  private generateConflictId(conflict: ImportConflict): string {\n    return `${conflict.type}_${conflict.rowIndex}_${Date.now()}`;\n  }\n\n  /**\n   * Get suggested resolutions for a conflict\n   */\n  getSuggestedResolutions(conflict: ImportConflict): ConflictResolution[] {\n    const suggestions: ConflictResolution[] = [];\n    const conflictId = this.generateConflictId(conflict);\n\n    switch (conflict.type) {\n      case 'duplicate_plant':\n        suggestions.push(\n          { conflictId, action: 'skip' },\n          { conflictId, action: 'merge' },\n          { conflictId, action: 'create_new' }\n        );\n        break;\n\n      case 'missing_parent':\n        suggestions.push(\n          { conflictId, action: 'skip' },\n          { conflictId, action: 'create_new' }\n        );\n        break;\n\n      case 'invalid_taxonomy':\n        suggestions.push(\n          { conflictId, action: 'skip' },\n          { conflictId, action: 'create_new' },\n          { conflictId, action: 'manual_review' }\n        );\n        break;\n    }\n\n    return suggestions;\n  }\n\n  /**\n   * Validate conflict resolution data\n   */\n  validateResolution(conflict: ImportConflict, resolution: ConflictResolution): boolean {\n    switch (conflict.type) {\n      case 'duplicate_plant':\n        if (resolution.action === 'create_new' || resolution.action === 'merge') {\n          return resolution.data && \n                 resolution.data.family && \n                 resolution.data.genus && \n                 resolution.data.species && \n                 resolution.data.commonName;\n        }\n        return true;\n\n      case 'missing_parent':\n        if (resolution.action === 'create_new' || resolution.action === 'merge') {\n          return resolution.data && \n                 resolution.data.plantId && \n                 resolution.data.nickname && \n                 resolution.data.location && \n                 resolution.data.dateStarted;\n        }\n        return true;\n\n      case 'invalid_taxonomy':\n        if (resolution.action === 'create_new') {\n          return resolution.data && \n                 resolution.data.family && \n                 resolution.data.genus && \n                 resolution.data.species && \n                 resolution.data.commonName;\n        }\n        return true;\n\n      default:\n        return false;\n    }\n  }\n\n  /**\n   * Get available parent instances for propagation conflicts\n   */\n  async getAvailableParentInstances(plantId: number) {\n    return await db\n      .select({\n        id: plantInstances.id,\n        nickname: plantInstances.nickname,\n        location: plantInstances.location,\n      })\n      .from(plantInstances)\n      .where(\n        and(\n          eq(plantInstances.userId, this.userId),\n          eq(plantInstances.plantId, plantId),\n          eq(plantInstances.isActive, true)\n        )\n      );\n  }\n}"],
      names: ["CSVConflictResolver", "userId", "resolveConflicts", "conflicts", "resolutions", "startTime", "Date", "successfulResolutions", "errors", "resolution", "conflict", "find", "c", "generateConflictId", "conflictId", "push", "rowIndex", "message", "severity", "resolveConflict", "error", "Error", "totalRows", "length", "processedRows", "successfulImports", "warnings", "skippedRows", "importType", "endTime", "type", "resolveDuplicatePlant", "resolveMissingParent", "resolveInvalidTaxonomy", "action", "data", "existingRecord", "db", "update", "plants", "set", "commonName", "careInstructions", "updatedAt", "where", "eq", "id", "insert", "values", "family", "genus", "species", "createdBy", "isVerified", "propagations", "plantId", "parentInstanceId", "nickname", "location", "dateStarted", "status", "existingPlantId", "now", "getSuggestedResolutions", "suggestions", "validateResolution", "getAvailableParentInstances", "select", "plantInstances", "from", "and", "isActive"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "c787bda989c64876e1bb3d6d2d9b5e3442e41bb3"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_9dphj4pjn = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_9dphj4pjn();
cov_9dphj4pjn().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_9dphj4pjn().s[1]++;
Object.defineProperty(exports, "CSVConflictResolver", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_9dphj4pjn().f[0]++;
    cov_9dphj4pjn().s[2]++;
    return CSVConflictResolver;
  }
});
const _db =
/* istanbul ignore next */
(cov_9dphj4pjn().s[3]++, require("../db"));
const _schema =
/* istanbul ignore next */
(cov_9dphj4pjn().s[4]++, require("../db/schema"));
const _drizzleorm =
/* istanbul ignore next */
(cov_9dphj4pjn().s[5]++, require("drizzle-orm"));
class CSVConflictResolver {
  constructor(userId) {
    /* istanbul ignore next */
    cov_9dphj4pjn().f[1]++;
    cov_9dphj4pjn().s[6]++;
    this.userId = userId;
  }
  /**
  * Resolve conflicts based on user decisions
  */
  async resolveConflicts(conflicts, resolutions) {
    /* istanbul ignore next */
    cov_9dphj4pjn().f[2]++;
    const startTime =
    /* istanbul ignore next */
    (cov_9dphj4pjn().s[7]++, new Date());
    let successfulResolutions =
    /* istanbul ignore next */
    (cov_9dphj4pjn().s[8]++, 0);
    const errors =
    /* istanbul ignore next */
    (cov_9dphj4pjn().s[9]++, []);
    /* istanbul ignore next */
    cov_9dphj4pjn().s[10]++;
    for (const resolution of resolutions) {
      const conflict =
      /* istanbul ignore next */
      (cov_9dphj4pjn().s[11]++, conflicts.find(c => {
        /* istanbul ignore next */
        cov_9dphj4pjn().f[3]++;
        cov_9dphj4pjn().s[12]++;
        return this.generateConflictId(c) === resolution.conflictId;
      }));
      /* istanbul ignore next */
      cov_9dphj4pjn().s[13]++;
      if (!conflict) {
        /* istanbul ignore next */
        cov_9dphj4pjn().b[0][0]++;
        cov_9dphj4pjn().s[14]++;
        errors.push({
          rowIndex: -1,
          message: `Conflict not found: ${resolution.conflictId}`,
          severity: 'error'
        });
        /* istanbul ignore next */
        cov_9dphj4pjn().s[15]++;
        continue;
      } else
      /* istanbul ignore next */
      {
        cov_9dphj4pjn().b[0][1]++;
      }
      cov_9dphj4pjn().s[16]++;
      try {
        /* istanbul ignore next */
        cov_9dphj4pjn().s[17]++;
        await this.resolveConflict(conflict, resolution);
        /* istanbul ignore next */
        cov_9dphj4pjn().s[18]++;
        successfulResolutions++;
      } catch (error) {
        /* istanbul ignore next */
        cov_9dphj4pjn().s[19]++;
        errors.push({
          rowIndex: conflict.rowIndex,
          message: error instanceof Error ?
          /* istanbul ignore next */
          (cov_9dphj4pjn().b[1][0]++, error.message) :
          /* istanbul ignore next */
          (cov_9dphj4pjn().b[1][1]++, 'Resolution failed'),
          severity: 'error'
        });
      }
    }
    /* istanbul ignore next */
    cov_9dphj4pjn().s[20]++;
    return {
      totalRows: conflicts.length,
      processedRows: resolutions.length,
      successfulImports: successfulResolutions,
      errors,
      conflicts: [],
      warnings: [],
      skippedRows: conflicts.length - resolutions.length,
      importType: 'plant_taxonomy',
      startTime,
      endTime: new Date(),
      userId: this.userId
    };
  }
  /**
  * Resolve a single conflict based on the resolution action
  */
  async resolveConflict(conflict, resolution) {
    /* istanbul ignore next */
    cov_9dphj4pjn().f[4]++;
    cov_9dphj4pjn().s[21]++;
    switch (conflict.type) {
      case 'duplicate_plant':
        /* istanbul ignore next */
        cov_9dphj4pjn().b[2][0]++;
        cov_9dphj4pjn().s[22]++;
        await this.resolveDuplicatePlant(conflict, resolution);
        /* istanbul ignore next */
        cov_9dphj4pjn().s[23]++;
        break;
      case 'missing_parent':
        /* istanbul ignore next */
        cov_9dphj4pjn().b[2][1]++;
        cov_9dphj4pjn().s[24]++;
        await this.resolveMissingParent(conflict, resolution);
        /* istanbul ignore next */
        cov_9dphj4pjn().s[25]++;
        break;
      case 'invalid_taxonomy':
        /* istanbul ignore next */
        cov_9dphj4pjn().b[2][2]++;
        cov_9dphj4pjn().s[26]++;
        await this.resolveInvalidTaxonomy(conflict, resolution);
        /* istanbul ignore next */
        cov_9dphj4pjn().s[27]++;
        break;
      default:
        /* istanbul ignore next */
        cov_9dphj4pjn().b[2][3]++;
        cov_9dphj4pjn().s[28]++;
        throw new Error(`Unknown conflict type: ${conflict.type}`);
    }
  }
  /**
  * Resolve duplicate plant conflicts
  */
  async resolveDuplicatePlant(conflict, resolution) {
    /* istanbul ignore next */
    cov_9dphj4pjn().f[5]++;
    cov_9dphj4pjn().s[29]++;
    switch (resolution.action) {
      case 'skip':
        /* istanbul ignore next */
        cov_9dphj4pjn().b[3][0]++;
        cov_9dphj4pjn().s[30]++;
        break;
      case 'merge':
        /* istanbul ignore next */
        cov_9dphj4pjn().b[3][1]++;
        cov_9dphj4pjn().s[31]++;
        // Update existing plant with new information if provided
        if (
        /* istanbul ignore next */
        (cov_9dphj4pjn().b[5][0]++, resolution.data) &&
        /* istanbul ignore next */
        (cov_9dphj4pjn().b[5][1]++, conflict.existingRecord)) {
          /* istanbul ignore next */
          cov_9dphj4pjn().b[4][0]++;
          cov_9dphj4pjn().s[32]++;
          await _db.db.update(_schema.plants).set({
            commonName:
            /* istanbul ignore next */
            (cov_9dphj4pjn().b[6][0]++, resolution.data.commonName) ||
            /* istanbul ignore next */
            (cov_9dphj4pjn().b[6][1]++, conflict.existingRecord.commonName),
            careInstructions:
            /* istanbul ignore next */
            (cov_9dphj4pjn().b[7][0]++, resolution.data.careInstructions) ||
            /* istanbul ignore next */
            (cov_9dphj4pjn().b[7][1]++, conflict.existingRecord.careInstructions),
            updatedAt: new Date()
          }).where((0, _drizzleorm.eq)(_schema.plants.id, conflict.existingRecord.id));
        } else
        /* istanbul ignore next */
        {
          cov_9dphj4pjn().b[4][1]++;
        }
        cov_9dphj4pjn().s[33]++;
        break;
      case 'create_new':
        /* istanbul ignore next */
        cov_9dphj4pjn().b[3][2]++;
        cov_9dphj4pjn().s[34]++;
        // Create a new plant with modified data to avoid duplicate
        if (resolution.data) {
          /* istanbul ignore next */
          cov_9dphj4pjn().b[8][0]++;
          cov_9dphj4pjn().s[35]++;
          await _db.db.insert(_schema.plants).values({
            family: resolution.data.family,
            genus: resolution.data.genus,
            species: resolution.data.species,
            commonName: resolution.data.commonName,
            careInstructions: resolution.data.careInstructions,
            createdBy: this.userId,
            isVerified: false
          });
        } else
        /* istanbul ignore next */
        {
          cov_9dphj4pjn().b[8][1]++;
        }
        cov_9dphj4pjn().s[36]++;
        break;
      case 'manual_review':
        /* istanbul ignore next */
        cov_9dphj4pjn().b[3][3]++;
        cov_9dphj4pjn().s[37]++;
        // Mark for manual review - no automatic action
        throw new Error('Manual review required - no automatic resolution available');
      default:
        /* istanbul ignore next */
        cov_9dphj4pjn().b[3][4]++;
        cov_9dphj4pjn().s[38]++;
        throw new Error(`Invalid resolution action: ${resolution.action}`);
    }
  }
  /**
  * Resolve missing parent conflicts for propagations
  */
  async resolveMissingParent(conflict, resolution) {
    /* istanbul ignore next */
    cov_9dphj4pjn().f[6]++;
    cov_9dphj4pjn().s[39]++;
    switch (resolution.action) {
      case 'skip':
        /* istanbul ignore next */
        cov_9dphj4pjn().b[9][0]++;
        cov_9dphj4pjn().s[40]++;
        break;
      case 'create_new':
        /* istanbul ignore next */
        cov_9dphj4pjn().b[9][1]++;
        cov_9dphj4pjn().s[41]++;
        // Create propagation without parent link
        if (resolution.data) {
          /* istanbul ignore next */
          cov_9dphj4pjn().b[10][0]++;
          cov_9dphj4pjn().s[42]++;
          await _db.db.insert(_schema.propagations).values({
            userId: this.userId,
            plantId: resolution.data.plantId,
            parentInstanceId: null,
            nickname: resolution.data.nickname,
            location: resolution.data.location,
            dateStarted: new Date(resolution.data.dateStarted),
            status: 'started'
          });
        } else
        /* istanbul ignore next */
        {
          cov_9dphj4pjn().b[10][1]++;
        }
        cov_9dphj4pjn().s[43]++;
        break;
      case 'merge':
        /* istanbul ignore next */
        cov_9dphj4pjn().b[9][2]++;
        cov_9dphj4pjn().s[44]++;
        // Link to existing parent instance if specified
        if (
        /* istanbul ignore next */
        (cov_9dphj4pjn().b[12][0]++, resolution.data) &&
        /* istanbul ignore next */
        (cov_9dphj4pjn().b[12][1]++, resolution.data.parentInstanceId)) {
          /* istanbul ignore next */
          cov_9dphj4pjn().b[11][0]++;
          cov_9dphj4pjn().s[45]++;
          await _db.db.insert(_schema.propagations).values({
            userId: this.userId,
            plantId: resolution.data.plantId,
            parentInstanceId: resolution.data.parentInstanceId,
            nickname: resolution.data.nickname,
            location: resolution.data.location,
            dateStarted: new Date(resolution.data.dateStarted),
            status: 'started'
          });
        } else
        /* istanbul ignore next */
        {
          cov_9dphj4pjn().b[11][1]++;
        }
        cov_9dphj4pjn().s[46]++;
        break;
      case 'manual_review':
        /* istanbul ignore next */
        cov_9dphj4pjn().b[9][3]++;
        cov_9dphj4pjn().s[47]++;
        throw new Error('Manual review required - no automatic resolution available');
      default:
        /* istanbul ignore next */
        cov_9dphj4pjn().b[9][4]++;
        cov_9dphj4pjn().s[48]++;
        throw new Error(`Invalid resolution action: ${resolution.action}`);
    }
  }
  /**
  * Resolve invalid taxonomy conflicts
  */
  async resolveInvalidTaxonomy(conflict, resolution) {
    /* istanbul ignore next */
    cov_9dphj4pjn().f[7]++;
    cov_9dphj4pjn().s[49]++;
    switch (resolution.action) {
      case 'skip':
        /* istanbul ignore next */
        cov_9dphj4pjn().b[13][0]++;
        cov_9dphj4pjn().s[50]++;
        break;
      case 'create_new':
        /* istanbul ignore next */
        cov_9dphj4pjn().b[13][1]++;
        cov_9dphj4pjn().s[51]++;
        // Create with corrected taxonomy data
        if (resolution.data) {
          /* istanbul ignore next */
          cov_9dphj4pjn().b[14][0]++;
          cov_9dphj4pjn().s[52]++;
          await _db.db.insert(_schema.plants).values({
            family: resolution.data.family,
            genus: resolution.data.genus,
            species: resolution.data.species,
            commonName: resolution.data.commonName,
            careInstructions: resolution.data.careInstructions,
            createdBy: this.userId,
            isVerified: false
          });
        } else
        /* istanbul ignore next */
        {
          cov_9dphj4pjn().b[14][1]++;
        }
        cov_9dphj4pjn().s[53]++;
        break;
      case 'merge':
        /* istanbul ignore next */
        cov_9dphj4pjn().b[13][2]++;
        cov_9dphj4pjn().s[54]++;
        // Link to existing plant with similar taxonomy
        if (
        /* istanbul ignore next */
        (cov_9dphj4pjn().b[16][0]++, resolution.data) &&
        /* istanbul ignore next */
        (cov_9dphj4pjn().b[16][1]++, resolution.data.existingPlantId)) {
          /* istanbul ignore next */
          cov_9dphj4pjn().b[15][0]++;
        } // The conflict resolution would involve using the existing plant
        // instead of creating a new one - this is handled at the import level
        else
        /* istanbul ignore next */
        {
          cov_9dphj4pjn().b[15][1]++;
        }
        cov_9dphj4pjn().s[55]++;
        break;
      case 'manual_review':
        /* istanbul ignore next */
        cov_9dphj4pjn().b[13][3]++;
        cov_9dphj4pjn().s[56]++;
        throw new Error('Manual review required - no automatic resolution available');
      default:
        /* istanbul ignore next */
        cov_9dphj4pjn().b[13][4]++;
        cov_9dphj4pjn().s[57]++;
        throw new Error(`Invalid resolution action: ${resolution.action}`);
    }
  }
  /**
  * Generate a unique ID for a conflict for tracking resolutions
  */
  generateConflictId(conflict) {
    /* istanbul ignore next */
    cov_9dphj4pjn().f[8]++;
    cov_9dphj4pjn().s[58]++;
    return `${conflict.type}_${conflict.rowIndex}_${Date.now()}`;
  }
  /**
  * Get suggested resolutions for a conflict
  */
  getSuggestedResolutions(conflict) {
    /* istanbul ignore next */
    cov_9dphj4pjn().f[9]++;
    const suggestions =
    /* istanbul ignore next */
    (cov_9dphj4pjn().s[59]++, []);
    const conflictId =
    /* istanbul ignore next */
    (cov_9dphj4pjn().s[60]++, this.generateConflictId(conflict));
    /* istanbul ignore next */
    cov_9dphj4pjn().s[61]++;
    switch (conflict.type) {
      case 'duplicate_plant':
        /* istanbul ignore next */
        cov_9dphj4pjn().b[17][0]++;
        cov_9dphj4pjn().s[62]++;
        suggestions.push({
          conflictId,
          action: 'skip'
        }, {
          conflictId,
          action: 'merge'
        }, {
          conflictId,
          action: 'create_new'
        });
        /* istanbul ignore next */
        cov_9dphj4pjn().s[63]++;
        break;
      case 'missing_parent':
        /* istanbul ignore next */
        cov_9dphj4pjn().b[17][1]++;
        cov_9dphj4pjn().s[64]++;
        suggestions.push({
          conflictId,
          action: 'skip'
        }, {
          conflictId,
          action: 'create_new'
        });
        /* istanbul ignore next */
        cov_9dphj4pjn().s[65]++;
        break;
      case 'invalid_taxonomy':
        /* istanbul ignore next */
        cov_9dphj4pjn().b[17][2]++;
        cov_9dphj4pjn().s[66]++;
        suggestions.push({
          conflictId,
          action: 'skip'
        }, {
          conflictId,
          action: 'create_new'
        }, {
          conflictId,
          action: 'manual_review'
        });
        /* istanbul ignore next */
        cov_9dphj4pjn().s[67]++;
        break;
    }
    /* istanbul ignore next */
    cov_9dphj4pjn().s[68]++;
    return suggestions;
  }
  /**
  * Validate conflict resolution data
  */
  validateResolution(conflict, resolution) {
    /* istanbul ignore next */
    cov_9dphj4pjn().f[10]++;
    cov_9dphj4pjn().s[69]++;
    switch (conflict.type) {
      case 'duplicate_plant':
        /* istanbul ignore next */
        cov_9dphj4pjn().b[18][0]++;
        cov_9dphj4pjn().s[70]++;
        if (
        /* istanbul ignore next */
        (cov_9dphj4pjn().b[20][0]++, resolution.action === 'create_new') ||
        /* istanbul ignore next */
        (cov_9dphj4pjn().b[20][1]++, resolution.action === 'merge')) {
          /* istanbul ignore next */
          cov_9dphj4pjn().b[19][0]++;
          cov_9dphj4pjn().s[71]++;
          return /* istanbul ignore next */(cov_9dphj4pjn().b[21][0]++, resolution.data) &&
          /* istanbul ignore next */
          (cov_9dphj4pjn().b[21][1]++, resolution.data.family) &&
          /* istanbul ignore next */
          (cov_9dphj4pjn().b[21][2]++, resolution.data.genus) &&
          /* istanbul ignore next */
          (cov_9dphj4pjn().b[21][3]++, resolution.data.species) &&
          /* istanbul ignore next */
          (cov_9dphj4pjn().b[21][4]++, resolution.data.commonName);
        } else
        /* istanbul ignore next */
        {
          cov_9dphj4pjn().b[19][1]++;
        }
        cov_9dphj4pjn().s[72]++;
        return true;
      case 'missing_parent':
        /* istanbul ignore next */
        cov_9dphj4pjn().b[18][1]++;
        cov_9dphj4pjn().s[73]++;
        if (
        /* istanbul ignore next */
        (cov_9dphj4pjn().b[23][0]++, resolution.action === 'create_new') ||
        /* istanbul ignore next */
        (cov_9dphj4pjn().b[23][1]++, resolution.action === 'merge')) {
          /* istanbul ignore next */
          cov_9dphj4pjn().b[22][0]++;
          cov_9dphj4pjn().s[74]++;
          return /* istanbul ignore next */(cov_9dphj4pjn().b[24][0]++, resolution.data) &&
          /* istanbul ignore next */
          (cov_9dphj4pjn().b[24][1]++, resolution.data.plantId) &&
          /* istanbul ignore next */
          (cov_9dphj4pjn().b[24][2]++, resolution.data.nickname) &&
          /* istanbul ignore next */
          (cov_9dphj4pjn().b[24][3]++, resolution.data.location) &&
          /* istanbul ignore next */
          (cov_9dphj4pjn().b[24][4]++, resolution.data.dateStarted);
        } else
        /* istanbul ignore next */
        {
          cov_9dphj4pjn().b[22][1]++;
        }
        cov_9dphj4pjn().s[75]++;
        return true;
      case 'invalid_taxonomy':
        /* istanbul ignore next */
        cov_9dphj4pjn().b[18][2]++;
        cov_9dphj4pjn().s[76]++;
        if (resolution.action === 'create_new') {
          /* istanbul ignore next */
          cov_9dphj4pjn().b[25][0]++;
          cov_9dphj4pjn().s[77]++;
          return /* istanbul ignore next */(cov_9dphj4pjn().b[26][0]++, resolution.data) &&
          /* istanbul ignore next */
          (cov_9dphj4pjn().b[26][1]++, resolution.data.family) &&
          /* istanbul ignore next */
          (cov_9dphj4pjn().b[26][2]++, resolution.data.genus) &&
          /* istanbul ignore next */
          (cov_9dphj4pjn().b[26][3]++, resolution.data.species) &&
          /* istanbul ignore next */
          (cov_9dphj4pjn().b[26][4]++, resolution.data.commonName);
        } else
        /* istanbul ignore next */
        {
          cov_9dphj4pjn().b[25][1]++;
        }
        cov_9dphj4pjn().s[78]++;
        return true;
      default:
        /* istanbul ignore next */
        cov_9dphj4pjn().b[18][3]++;
        cov_9dphj4pjn().s[79]++;
        return false;
    }
  }
  /**
  * Get available parent instances for propagation conflicts
  */
  async getAvailableParentInstances(plantId) {
    /* istanbul ignore next */
    cov_9dphj4pjn().f[11]++;
    cov_9dphj4pjn().s[80]++;
    return await _db.db.select({
      id: _schema.plantInstances.id,
      nickname: _schema.plantInstances.nickname,
      location: _schema.plantInstances.location
    }).from(_schema.plantInstances).where((0, _drizzleorm.and)((0, _drizzleorm.eq)(_schema.plantInstances.userId, this.userId), (0, _drizzleorm.eq)(_schema.plantInstances.plantId, plantId), (0, _drizzleorm.eq)(_schema.plantInstances.isActive, true)));
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,