f891f57bd6e02eaf12ea9d0fd0531705
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "PlantQueries", {
    enumerable: true,
    get: function() {
        return PlantQueries;
    }
});
const _drizzleorm = require("drizzle-orm");
const _index = require("../index");
const _schema = require("../schema");
class PlantQueries {
    // Create a new plant taxonomy entry
    static async create(plantData) {
        try {
            const [plant] = await _index.db.insert(_schema.plants).values(plantData).returning();
            return plant;
        } catch (error) {
            console.error('Failed to create plant:', error);
            throw new Error('Failed to create plant');
        }
    }
    // Get plant by ID
    static async getById(id) {
        try {
            const [plant] = await _index.db.select().from(_schema.plants).where((0, _drizzleorm.eq)(_schema.plants.id, id));
            return plant || null;
        } catch (error) {
            console.error('Failed to get plant by ID:', error);
            throw new Error('Failed to get plant');
        }
    }
    // Search plants by taxonomy or common name (fuzzy search)
    static async search(query, limit = 20) {
        try {
            const searchTerm = `%${query.toLowerCase()}%`;
            return await _index.db.select().from(_schema.plants).where((0, _drizzleorm.or)((0, _drizzleorm.ilike)(_schema.plants.family, searchTerm), (0, _drizzleorm.ilike)(_schema.plants.genus, searchTerm), (0, _drizzleorm.ilike)(_schema.plants.species, searchTerm), (0, _drizzleorm.ilike)(_schema.plants.cultivar, searchTerm), (0, _drizzleorm.ilike)(_schema.plants.commonName, searchTerm))).orderBy((0, _drizzleorm.desc)(_schema.plants.isVerified), _schema.plants.commonName).limit(limit);
        } catch (error) {
            console.error('Failed to search plants:', error);
            throw new Error('Failed to search plants');
        }
    }
    // Get all plants with pagination
    static async getAll(offset = 0, limit = 50) {
        try {
            return await _index.db.select().from(_schema.plants).orderBy((0, _drizzleorm.desc)(_schema.plants.isVerified), _schema.plants.commonName).offset(offset).limit(limit);
        } catch (error) {
            console.error('Failed to get plants:', error);
            throw new Error('Failed to get plants');
        }
    }
    // Get plants by family
    static async getByFamily(family) {
        try {
            return await _index.db.select().from(_schema.plants).where((0, _drizzleorm.eq)(_schema.plants.family, family)).orderBy(_schema.plants.genus, _schema.plants.species);
        } catch (error) {
            console.error('Failed to get plants by family:', error);
            throw new Error('Failed to get plants by family');
        }
    }
    // Check if plant taxonomy already exists (including cultivar)
    static async taxonomyExists(family, genus, species, cultivar) {
        try {
            const conditions = [
                (0, _drizzleorm.eq)(_schema.plants.family, family),
                (0, _drizzleorm.eq)(_schema.plants.genus, genus),
                (0, _drizzleorm.eq)(_schema.plants.species, species)
            ];
            // Add cultivar condition - both null or both matching
            if (cultivar) {
                conditions.push((0, _drizzleorm.eq)(_schema.plants.cultivar, cultivar));
            } else {
                conditions.push((0, _drizzleorm.sql)`${_schema.plants.cultivar} IS NULL`);
            }
            const [plant] = await _index.db.select().from(_schema.plants).where((0, _drizzleorm.and)(...conditions));
            return plant || null;
        } catch (error) {
            console.error('Failed to check taxonomy existence:', error);
            throw new Error('Failed to check taxonomy');
        }
    }
    // Update plant
    static async update(id, plantData) {
        try {
            const [plant] = await _index.db.update(_schema.plants).set({
                ...plantData,
                updatedAt: new Date()
            }).where((0, _drizzleorm.eq)(_schema.plants.id, id)).returning();
            if (!plant) {
                throw new Error('Plant not found');
            }
            return plant;
        } catch (error) {
            console.error('Failed to update plant:', error);
            throw new Error('Failed to update plant');
        }
    }
    // Delete plant (only if no instances exist)
    static async delete(id) {
        try {
            const result = await _index.db.delete(_schema.plants).where((0, _drizzleorm.eq)(_schema.plants.id, id));
            return result.length > 0;
        } catch (error) {
            console.error('Failed to delete plant:', error);
            throw new Error('Failed to delete plant');
        }
    }
    // Get popular plants (most used in instances)
    static async getPopular(limit = 10) {
        try {
            return await _index.db.select({
                id: _schema.plants.id,
                family: _schema.plants.family,
                genus: _schema.plants.genus,
                species: _schema.plants.species,
                cultivar: _schema.plants.cultivar,
                commonName: _schema.plants.commonName,
                careInstructions: _schema.plants.careInstructions,
                defaultImage: _schema.plants.defaultImage,
                createdBy: _schema.plants.createdBy,
                isVerified: _schema.plants.isVerified,
                createdAt: _schema.plants.createdAt,
                updatedAt: _schema.plants.updatedAt
            }).from(_schema.plants).orderBy((0, _drizzleorm.desc)(_schema.plants.isVerified), _schema.plants.commonName).limit(limit);
        } catch (error) {
            console.error('Failed to get popular plants:', error);
            throw new Error('Failed to get popular plants');
        }
    }
    // Full-text search using PostgreSQL's built-in search
    static async fullTextSearch(query, limit = 20) {
        try {
            return await _index.db.select().from(_schema.plants).where((0, _drizzleorm.sql)`to_tsvector('english', ${_schema.plants.family} || ' ' || ${_schema.plants.genus} || ' ' || ${_schema.plants.species} || ' ' || COALESCE(${_schema.plants.cultivar}, '') || ' ' || ${_schema.plants.commonName}) @@ plainto_tsquery('english', ${query})`).orderBy((0, _drizzleorm.desc)(_schema.plants.isVerified), _schema.plants.commonName).limit(limit);
        } catch (error) {
            console.error('Failed to perform full-text search:', error);
            // Fallback to regular search
            return this.search(query, limit);
        }
    }
}

//# sourceMappingURL=data:application/json;base64,