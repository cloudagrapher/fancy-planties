0b0c7718a87ac2df9e8763446c5585c4
'use client';
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return SignInForm;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("react");
const _navigation = require("next/navigation");
const _validation = require("../../lib/auth/validation");
function SignInForm() {
    const router = (0, _navigation.useRouter)();
    const searchParams = (0, _navigation.useSearchParams)();
    const redirectTo = searchParams.get('redirect') || '/dashboard';
    const [formData, setFormData] = (0, _react.useState)({
        email: '',
        password: ''
    });
    const [errors, setErrors] = (0, _react.useState)({});
    const [isLoading, setIsLoading] = (0, _react.useState)(false);
    const [generalError, setGeneralError] = (0, _react.useState)('');
    const handleSubmit = async (e)=>{
        e.preventDefault();
        setIsLoading(true);
        setErrors({});
        setGeneralError('');
        try {
            // Validate form data
            const validation = _validation.signInSchema.safeParse(formData);
            if (!validation.success) {
                const fieldErrors = {};
                validation.error.issues.forEach((issue)=>{
                    const field = issue.path.join('.');
                    fieldErrors[field] = issue.message;
                });
                setErrors(fieldErrors);
                return;
            }
            // Submit to API
            const response = await fetch('/api/auth/signin', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(validation.data)
            });
            const result = await response.json();
            if (!response.ok) {
                if (result.errors) {
                    setErrors(result.errors);
                } else {
                    setGeneralError(result.error || 'Sign in failed');
                }
                return;
            }
            // Success - check if email verification is required
            if (result.requiresVerification) {
                // Redirect to email verification page
                router.push('/auth/verify-email');
                router.refresh();
            } else {
                // Success - redirect to dashboard or intended page
                router.push(redirectTo);
                router.refresh();
            }
        } catch (error) {
            console.error('Sign in error:', error);
            setGeneralError('An unexpected error occurred. Please try again.');
        } finally{
            setIsLoading(false);
        }
    };
    const handleChange = (e)=>{
        const { name, value } = e.target;
        setFormData((prev)=>({
                ...prev,
                [name]: value
            }));
        // Clear error when user starts typing
        if (errors[name]) {
            setErrors((prev)=>({
                    ...prev,
                    [name]: ''
                }));
        }
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
        className: `${isLoading ? 'form--loading' : ''}`,
        children: /*#__PURE__*/ (0, _jsxruntime.jsxs)("form", {
            onSubmit: handleSubmit,
            className: "space-y-6",
            autoComplete: "on",
            noValidate: true,
            children: [
                generalError && /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    className: "form-validation-summary",
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            className: "form-validation-summary-title",
                            children: "Sign In Failed"
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("ul", {
                            className: "form-validation-summary-list",
                            children: /*#__PURE__*/ (0, _jsxruntime.jsx)("li", {
                                className: "form-validation-summary-item",
                                children: generalError
                            })
                        })
                    ]
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    className: "form-group",
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("label", {
                            htmlFor: "signin-email",
                            className: "form-label form-label--required",
                            children: "Email Address"
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("input", {
                            id: "signin-email",
                            name: "email",
                            type: "email",
                            autoComplete: "email",
                            required: true,
                            value: formData.email,
                            onChange: handleChange,
                            className: `form-input ${errors.email ? 'form-input--error' : ''}`,
                            placeholder: "Enter your email address",
                            "aria-describedby": errors.email ? 'signin-email-error' : undefined
                        }),
                        errors.email && /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            id: "signin-email-error",
                            className: "form-error",
                            role: "alert",
                            children: errors.email
                        })
                    ]
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    className: "form-group",
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("label", {
                            htmlFor: "signin-password",
                            className: "form-label form-label--required",
                            children: "Password"
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("input", {
                            id: "signin-password",
                            name: "password",
                            type: "password",
                            autoComplete: "current-password",
                            required: true,
                            value: formData.password,
                            onChange: handleChange,
                            className: `form-input ${errors.password ? 'form-input--error' : ''}`,
                            placeholder: "Enter your password",
                            "aria-describedby": errors.password ? 'signin-password-error' : undefined
                        }),
                        errors.password && /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            id: "signin-password-error",
                            className: "form-error",
                            role: "alert",
                            children: errors.password
                        })
                    ]
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    className: "form-actions form-actions--full",
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                            type: "submit",
                            disabled: isLoading,
                            className: `btn btn--primary btn--full ${isLoading ? 'btn--loading' : ''}`,
                            "aria-describedby": isLoading ? 'signin-loading' : undefined,
                            children: isLoading ? 'Signing in...' : 'Sign In'
                        }),
                        isLoading && /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                            id: "signin-loading",
                            className: "sr-only",
                            children: "Please wait while we sign you in"
                        })
                    ]
                })
            ]
        })
    });
}

//# sourceMappingURL=data:application/json;base64,