{"version":3,"sources":["/Users/stefanbekker/projects/fancy-planties/src/test-utils/factories/user-factory.js"],"sourcesContent":["// User test data factory\n\n// Simple random string generator for tests (avoiding oslo dependency issues)\nconst generateRandomString = (length, alphabet = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ') => {\n  let result = '';\n  for (let i = 0; i < length; i++) {\n    result += alphabet.charAt(Math.floor(Math.random() * alphabet.length));\n  }\n  return result;\n};\nimport bcrypt from 'bcryptjs';\n\n// Counter for unique test data\nlet userCounter = 0;\n\n/**\n * Creates a test user object with realistic data\n * @param {Object} overrides - Properties to override in the generated user\n * @returns {Object} Test user object\n */\nexport const createTestUser = (overrides = {}) => {\n  userCounter++;\n  \n  const baseUser = {\n    // Remove id - let database auto-generate it\n    email: `testuser${userCounter}@example.com`,\n    name: `Test User ${userCounter}`,\n    hashedPassword: '$2a$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LewdBPj/RQ/dQ5YQm', // 'password123'\n    isCurator: false,\n    isEmailVerified: true,\n    createdAt: new Date(),\n    updatedAt: new Date(),\n  };\n  \n  return {\n    ...baseUser,\n    ...overrides,\n  };\n};\n\n/**\n * Creates a test user with admin/curator privileges\n * @param {Object} overrides - Properties to override\n * @returns {Object} Test curator user object\n */\nexport const createTestCurator = (overrides = {}) => {\n  return createTestUser({\n    isCurator: true,\n    name: `Test Curator ${userCounter + 1}`,\n    ...overrides,\n  });\n};\n\n/**\n * Creates a test user with unverified email\n * @param {Object} overrides - Properties to override\n * @returns {Object} Test unverified user object\n */\nexport const createTestUnverifiedUser = (overrides = {}) => {\n  return createTestUser({\n    isEmailVerified: false,\n    name: `Test Unverified User ${userCounter + 1}`,\n    ...overrides,\n  });\n};\n\n/**\n * Creates multiple test users\n * @param {number} count - Number of users to create\n * @param {Object} baseOverrides - Base properties to apply to all users\n * @returns {Array} Array of test user objects\n */\nexport const createTestUsers = (count = 3, baseOverrides = {}) => {\n  return Array.from({ length: count }, (_, index) => \n    createTestUser({\n      ...baseOverrides,\n      name: `Test User ${userCounter + index + 1}`,\n    })\n  );\n};\n\n/**\n * Creates a test session object for a user\n * @param {Object} user - User object to create session for\n * @param {Object} overrides - Properties to override\n * @returns {Object} Test session object\n */\nexport const createTestSession = (user, overrides = {}) => {\n  const sessionId = generateRandomString(40, '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ');\n  const expiresAt = new Date(Date.now() + 1000 * 60 * 60 * 24 * 30); // 30 days\n  \n  return {\n    id: sessionId,\n    userId: user.id,\n    expiresAt,\n    ...overrides,\n  };\n};\n\n/**\n * Creates an authenticated test user with session\n * @param {Object} userOverrides - Properties to override for user\n * @param {Object} sessionOverrides - Properties to override for session\n * @returns {Object} Object with user and session properties\n */\nexport const createAuthenticatedTestUser = (userOverrides = {}, sessionOverrides = {}) => {\n  const user = createTestUser(userOverrides);\n  const session = createTestSession(user, sessionOverrides);\n  \n  return { user, session };\n};\n\n/**\n * Creates test email verification code\n * @param {Object} user - User object to create verification code for\n * @param {Object} overrides - Properties to override\n * @returns {Object} Test email verification code object\n */\nexport const createTestEmailVerificationCode = (user, overrides = {}) => {\n  return {\n    id: Math.floor(Math.random() * 10000),\n    userId: user.id,\n    code: generateRandomString(6, '0123456789'),\n    expiresAt: new Date(Date.now() + 1000 * 60 * 15), // 15 minutes\n    createdAt: new Date(),\n    attemptsUsed: 0,\n    ...overrides,\n  };\n};\n\n/**\n * Hashes a password for testing (synchronous version for test setup)\n * @param {string} password - Plain text password\n * @returns {string} Hashed password\n */\nexport const hashTestPassword = (password) => {\n  return bcrypt.hashSync(password, 12);\n};\n\n/**\n * Creates a test user with a specific password\n * @param {string} password - Plain text password\n * @param {Object} overrides - Properties to override\n * @returns {Object} Test user with hashed password\n */\nexport const createTestUserWithPassword = (password, overrides = {}) => {\n  return createTestUser({\n    hashedPassword: hashTestPassword(password),\n    ...overrides,\n  });\n};\n\n/**\n * Reset the user counter (useful for test isolation)\n */\nexport const resetUserCounter = () => {\n  userCounter = 0;\n};"],"names":["createAuthenticatedTestUser","createTestCurator","createTestEmailVerificationCode","createTestSession","createTestUnverifiedUser","createTestUser","createTestUserWithPassword","createTestUsers","hashTestPassword","resetUserCounter","generateRandomString","length","alphabet","result","i","charAt","Math","floor","random","userCounter","overrides","baseUser","email","name","hashedPassword","isCurator","isEmailVerified","createdAt","Date","updatedAt","count","baseOverrides","Array","from","_","index","user","sessionId","expiresAt","now","id","userId","userOverrides","sessionOverrides","session","code","attemptsUsed","password","bcrypt","hashSync"],"mappings":"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"}