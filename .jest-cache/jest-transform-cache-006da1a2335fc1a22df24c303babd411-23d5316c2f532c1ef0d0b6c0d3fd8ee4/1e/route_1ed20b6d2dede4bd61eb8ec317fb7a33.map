{"version":3,"names":["DELETE","cov_6c4accwem","f","s","GET","PUT","request","params","user","_server1","validateRequest","b","_server","NextResponse","json","error","status","id","plantId","parseInt","isNaN","plant","_planttaxonomy","getPlantById","success","data","metadata","operation","timestamp","Date","userId","console","body","validatedData","_plantschemas","updatePlantSchema","parse","updatedPlant","updatePlant","_zod","ZodError","details","issues","deleted","deletePlant","Error","message","includes"],"sources":["/Users/stefanbekker/projects/fancy-planties/src/app/api/plants/[id]/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { validateRequest } from '@/lib/auth/server';\nimport { \n  getPlantById, \n  updatePlant, \n  deletePlant \n} from '@/lib/db/queries/plant-taxonomy';\nimport { updatePlantSchema } from '@/lib/validation/plant-schemas';\nimport { ZodError } from 'zod';\n\n// GET /api/plants/[id] - Get plant by ID\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { user } = await validateRequest();\n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const { id } = await params;\n    const plantId = parseInt(id, 10);\n    if (isNaN(plantId)) {\n      return NextResponse.json({ error: 'Invalid plant ID' }, { status: 400 });\n    }\n\n    const plant = await getPlantById(plantId);\n    if (!plant) {\n      return NextResponse.json({ error: 'Plant not found' }, { status: 404 });\n    }\n\n    return NextResponse.json({\n      success: true,\n      data: plant,\n      metadata: {\n        operation: 'get',\n        timestamp: new Date(),\n        userId: user.id,\n      },\n    });\n  } catch (error) {\n    console.error('Error fetching plant:', error);\n    \n    return NextResponse.json(\n      { error: 'Internal server error' }, \n      { status: 500 }\n    );\n  }\n}\n\n// PUT /api/plants/[id] - Update plant\nexport async function PUT(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { user } = await validateRequest();\n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const { id } = await params;\n    const plantId = parseInt(id, 10);\n    if (isNaN(plantId)) {\n      return NextResponse.json({ error: 'Invalid plant ID' }, { status: 400 });\n    }\n\n    const body = await request.json();\n    const validatedData = updatePlantSchema.parse({\n      ...body,\n      id: plantId,\n    });\n\n    const updatedPlant = await updatePlant(validatedData);\n    if (!updatedPlant) {\n      return NextResponse.json({ error: 'Plant not found' }, { status: 404 });\n    }\n\n    return NextResponse.json({\n      success: true,\n      data: updatedPlant,\n      metadata: {\n        operation: 'update',\n        timestamp: new Date(),\n        userId: user.id,\n      },\n    });\n  } catch (error) {\n    console.error('Error updating plant:', error);\n    \n    if (error instanceof ZodError) {\n      return NextResponse.json(\n        { \n          error: 'Invalid plant data', \n          details: error.issues \n        }, \n        { status: 400 }\n      );\n    }\n\n    return NextResponse.json(\n      { error: 'Internal server error' }, \n      { status: 500 }\n    );\n  }\n}\n\n// DELETE /api/plants/[id] - Delete plant (only if no instances exist)\nexport async function DELETE(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { user } = await validateRequest();\n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const { id } = await params;\n    const plantId = parseInt(id, 10);\n    if (isNaN(plantId)) {\n      return NextResponse.json({ error: 'Invalid plant ID' }, { status: 400 });\n    }\n\n    const deleted = await deletePlant(plantId, user.id);\n    if (!deleted) {\n      return NextResponse.json(\n        { error: 'Plant not found or cannot be deleted' }, \n        { status: 404 }\n      );\n    }\n\n    return NextResponse.json({\n      success: true,\n      data: { id: plantId, deleted: true },\n      metadata: {\n        operation: 'delete',\n        timestamp: new Date(),\n        userId: user.id,\n      },\n    });\n  } catch (error) {\n    console.error('Error deleting plant:', error);\n    \n    if (error instanceof Error && error.message?.includes('Cannot delete plant')) {\n      return NextResponse.json(\n        { error: error.message }, \n        { status: 409 }\n      );\n    }\n\n    return NextResponse.json(\n      { error: 'Internal server error' }, \n      { status: 500 }\n    );\n  }\n}"],"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","ignoreList":[]}