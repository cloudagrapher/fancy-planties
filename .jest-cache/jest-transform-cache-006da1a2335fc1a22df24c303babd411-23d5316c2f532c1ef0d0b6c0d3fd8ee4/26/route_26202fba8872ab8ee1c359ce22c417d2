e6f01d3e13a6faeac4075494459c4581
"use strict";

/* istanbul ignore next */
function cov_1l03wc44gm() {
  var path = "/Users/stefanbekker/projects/fancy-planties/src/app/api/propagations/[id]/convert/route.ts";
  var hash = "5a2dae2b92361d3c847aded244c9dd31f9948a1d";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/stefanbekker/projects/fancy-planties/src/app/api/propagations/[id]/convert/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 20
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 11,
          column: 23
        }
      },
      "4": {
        start: {
          line: 12,
          column: 16
        },
        end: {
          line: 12,
          column: 38
        }
      },
      "5": {
        start: {
          line: 13,
          column: 17
        },
        end: {
          line: 13,
          column: 58
        }
      },
      "6": {
        start: {
          line: 14,
          column: 22
        },
        end: {
          line: 14,
          column: 75
        }
      },
      "7": {
        start: {
          line: 15,
          column: 13
        },
        end: {
          line: 15,
          column: 27
        }
      },
      "8": {
        start: {
          line: 17,
          column: 22
        },
        end: {
          line: 20,
          column: 2
        }
      },
      "9": {
        start: {
          line: 22,
          column: 4
        },
        end: {
          line: 90,
          column: 5
        }
      },
      "10": {
        start: {
          line: 23,
          column: 25
        },
        end: {
          line: 23,
          column: 62
        }
      },
      "11": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 30,
          column: 9
        }
      },
      "12": {
        start: {
          line: 25,
          column: 12
        },
        end: {
          line: 29,
          column: 15
        }
      },
      "13": {
        start: {
          line: 31,
          column: 23
        },
        end: {
          line: 31,
          column: 35
        }
      },
      "14": {
        start: {
          line: 32,
          column: 30
        },
        end: {
          line: 32,
          column: 46
        }
      },
      "15": {
        start: {
          line: 33,
          column: 8
        },
        end: {
          line: 39,
          column: 9
        }
      },
      "16": {
        start: {
          line: 34,
          column: 12
        },
        end: {
          line: 38,
          column: 15
        }
      },
      "17": {
        start: {
          line: 41,
          column: 36
        },
        end: {
          line: 41,
          column: 97
        }
      },
      "18": {
        start: {
          line: 42,
          column: 8
        },
        end: {
          line: 48,
          column: 9
        }
      },
      "19": {
        start: {
          line: 43,
          column: 12
        },
        end: {
          line: 47,
          column: 15
        }
      },
      "20": {
        start: {
          line: 49,
          column: 8
        },
        end: {
          line: 55,
          column: 9
        }
      },
      "21": {
        start: {
          line: 50,
          column: 12
        },
        end: {
          line: 54,
          column: 15
        }
      },
      "22": {
        start: {
          line: 57,
          column: 8
        },
        end: {
          line: 63,
          column: 9
        }
      },
      "23": {
        start: {
          line: 58,
          column: 12
        },
        end: {
          line: 62,
          column: 15
        }
      },
      "24": {
        start: {
          line: 64,
          column: 21
        },
        end: {
          line: 64,
          column: 41
        }
      },
      "25": {
        start: {
          line: 65,
          column: 39
        },
        end: {
          line: 65,
          column: 64
        }
      },
      "26": {
        start: {
          line: 66,
          column: 23
        },
        end: {
          line: 69,
          column: 10
        }
      },
      "27": {
        start: {
          line: 70,
          column: 8
        },
        end: {
          line: 74,
          column: 11
        }
      },
      "28": {
        start: {
          line: 76,
          column: 8
        },
        end: {
          line: 76,
          column: 62
        }
      },
      "29": {
        start: {
          line: 77,
          column: 8
        },
        end: {
          line: 84,
          column: 9
        }
      },
      "30": {
        start: {
          line: 78,
          column: 12
        },
        end: {
          line: 83,
          column: 15
        }
      },
      "31": {
        start: {
          line: 85,
          column: 8
        },
        end: {
          line: 89,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "POST",
        decl: {
          start: {
            line: 21,
            column: 15
          },
          end: {
            line: 21,
            column: 19
          }
        },
        loc: {
          start: {
            line: 21,
            column: 41
          },
          end: {
            line: 91,
            column: 1
          }
        },
        line: 21
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 24,
            column: 8
          },
          end: {
            line: 30,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 24,
            column: 8
          },
          end: {
            line: 30,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 24
      },
      "1": {
        loc: {
          start: {
            line: 33,
            column: 8
          },
          end: {
            line: 39,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 33,
            column: 8
          },
          end: {
            line: 39,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 33
      },
      "2": {
        loc: {
          start: {
            line: 42,
            column: 8
          },
          end: {
            line: 48,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 42,
            column: 8
          },
          end: {
            line: 48,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 42
      },
      "3": {
        loc: {
          start: {
            line: 49,
            column: 8
          },
          end: {
            line: 55,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 49,
            column: 8
          },
          end: {
            line: 55,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 49
      },
      "4": {
        loc: {
          start: {
            line: 57,
            column: 8
          },
          end: {
            line: 63,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 57,
            column: 8
          },
          end: {
            line: 63,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 57
      },
      "5": {
        loc: {
          start: {
            line: 67,
            column: 22
          },
          end: {
            line: 67,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 67,
            column: 22
          },
          end: {
            line: 67,
            column: 30
          }
        }, {
          start: {
            line: 67,
            column: 34
          },
          end: {
            line: 67,
            column: 62
          }
        }],
        line: 67
      },
      "6": {
        loc: {
          start: {
            line: 68,
            column: 22
          },
          end: {
            line: 68,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 68,
            column: 22
          },
          end: {
            line: 68,
            column: 30
          }
        }, {
          start: {
            line: 68,
            column: 34
          },
          end: {
            line: 68,
            column: 62
          }
        }],
        line: 68
      },
      "7": {
        loc: {
          start: {
            line: 77,
            column: 8
          },
          end: {
            line: 84,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 77,
            column: 8
          },
          end: {
            line: 84,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 77
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0
    },
    f: {
      "0": 0,
      "1": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/stefanbekker/projects/fancy-planties/src/app/api/propagations/[id]/convert/route.ts"],
      sourcesContent: ["import 'server-only';\n\nimport { NextRequest, NextResponse } from 'next/server';\nimport { validateRequest } from '@/lib/auth/server';\nimport { PropagationQueries } from '@/lib/db/queries/propagations';\nimport { z } from 'zod';\n\n// Validation schema for conversion\nconst convertSchema = z.object({\n  nickname: z.string().min(1).max(100).optional(),\n  location: z.string().min(1).max(100).optional(),\n});\n\n// POST /api/propagations/[id]/convert - Convert propagation to plant instance\nexport async function POST(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { user } = await validateRequest();\n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const { id } = await params;\n    const propagationId = parseInt(id, 10);\n    if (isNaN(propagationId)) {\n      return NextResponse.json({ error: 'Invalid propagation ID' }, { status: 400 });\n    }\n\n    // Check if propagation exists and belongs to user\n    const existingPropagation = await PropagationQueries.getById(propagationId);\n    if (!existingPropagation) {\n      return NextResponse.json({ error: 'Propagation not found' }, { status: 404 });\n    }\n\n    if (existingPropagation.userId !== user.id) {\n      return NextResponse.json({ error: 'Forbidden' }, { status: 403 });\n    }\n\n    // Check if propagation is ready to be converted (should be established)\n    if (existingPropagation.status !== 'established') {\n      return NextResponse.json(\n        { error: 'Propagation must be established before converting to plant instance' },\n        { status: 400 }\n      );\n    }\n\n    const body = await request.json();\n    const { nickname, location } = convertSchema.parse(body);\n\n    const result = await PropagationQueries.convertToPlantInstance(propagationId, {\n      nickname: nickname || existingPropagation.nickname,\n      location: location || existingPropagation.location,\n    });\n\n    return NextResponse.json({\n      success: true,\n      plantInstanceId: result.plantInstanceId,\n      propagation: result.propagation,\n    });\n  } catch (error) {\n    console.error('Error converting propagation:', error);\n    \n    if (error instanceof z.ZodError) {\n      return NextResponse.json(\n        { error: 'Invalid data', details: error.issues },\n        { status: 400 }\n      );\n    }\n\n    return NextResponse.json(\n      { error: 'Failed to convert propagation to plant instance' },\n      { status: 500 }\n    );\n  }\n}"],
      names: ["POST", "convertSchema", "z", "object", "nickname", "string", "min", "max", "optional", "location", "request", "params", "user", "validateRequest", "NextResponse", "json", "error", "status", "id", "propagationId", "parseInt", "isNaN", "existingPropagation", "PropagationQueries", "getById", "userId", "body", "parse", "result", "convertToPlantInstance", "success", "plantInstanceId", "propagation", "console", "ZodError", "details", "issues"],
      mappings: ";;;;+BAcsBA;;;eAAAA;;;QAdf;wBAEmC;yBACV;8BACG;qBACjB;AAElB,mCAAmC;AACnC,MAAMC,gBAAgBC,MAAC,CAACC,MAAM,CAAC;IAC7BC,UAAUF,MAAC,CAACG,MAAM,GAAGC,GAAG,CAAC,GAAGC,GAAG,CAAC,KAAKC,QAAQ;IAC7CC,UAAUP,MAAC,CAACG,MAAM,GAAGC,GAAG,CAAC,GAAGC,GAAG,CAAC,KAAKC,QAAQ;AAC/C;AAGO,eAAeR,KACpBU,OAAoB,EACpB,EAAEC,MAAM,EAAuC;IAE/C,IAAI;QACF,MAAM,EAAEC,IAAI,EAAE,GAAG,MAAMC,IAAAA,wBAAe;QACtC,IAAI,CAACD,MAAM;YACT,OAAOE,oBAAY,CAACC,IAAI,CAAC;gBAAEC,OAAO;YAAe,GAAG;gBAAEC,QAAQ;YAAI;QACpE;QAEA,MAAM,EAAEC,EAAE,EAAE,GAAG,MAAMP;QACrB,MAAMQ,gBAAgBC,SAASF,IAAI;QACnC,IAAIG,MAAMF,gBAAgB;YACxB,OAAOL,oBAAY,CAACC,IAAI,CAAC;gBAAEC,OAAO;YAAyB,GAAG;gBAAEC,QAAQ;YAAI;QAC9E;QAEA,kDAAkD;QAClD,MAAMK,sBAAsB,MAAMC,gCAAkB,CAACC,OAAO,CAACL;QAC7D,IAAI,CAACG,qBAAqB;YACxB,OAAOR,oBAAY,CAACC,IAAI,CAAC;gBAAEC,OAAO;YAAwB,GAAG;gBAAEC,QAAQ;YAAI;QAC7E;QAEA,IAAIK,oBAAoBG,MAAM,KAAKb,KAAKM,EAAE,EAAE;YAC1C,OAAOJ,oBAAY,CAACC,IAAI,CAAC;gBAAEC,OAAO;YAAY,GAAG;gBAAEC,QAAQ;YAAI;QACjE;QAEA,wEAAwE;QACxE,IAAIK,oBAAoBL,MAAM,KAAK,eAAe;YAChD,OAAOH,oBAAY,CAACC,IAAI,CACtB;gBAAEC,OAAO;YAAsE,GAC/E;gBAAEC,QAAQ;YAAI;QAElB;QAEA,MAAMS,OAAO,MAAMhB,QAAQK,IAAI;QAC/B,MAAM,EAAEX,QAAQ,EAAEK,QAAQ,EAAE,GAAGR,cAAc0B,KAAK,CAACD;QAEnD,MAAME,SAAS,MAAML,gCAAkB,CAACM,sBAAsB,CAACV,eAAe;YAC5Ef,UAAUA,YAAYkB,oBAAoBlB,QAAQ;YAClDK,UAAUA,YAAYa,oBAAoBb,QAAQ;QACpD;QAEA,OAAOK,oBAAY,CAACC,IAAI,CAAC;YACvBe,SAAS;YACTC,iBAAiBH,OAAOG,eAAe;YACvCC,aAAaJ,OAAOI,WAAW;QACjC;IACF,EAAE,OAAOhB,OAAO;QACdiB,QAAQjB,KAAK,CAAC,iCAAiCA;QAE/C,IAAIA,iBAAiBd,MAAC,CAACgC,QAAQ,EAAE;YAC/B,OAAOpB,oBAAY,CAACC,IAAI,CACtB;gBAAEC,OAAO;gBAAgBmB,SAASnB,MAAMoB,MAAM;YAAC,GAC/C;gBAAEnB,QAAQ;YAAI;QAElB;QAEA,OAAOH,oBAAY,CAACC,IAAI,CACtB;YAAEC,OAAO;QAAkD,GAC3D;YAAEC,QAAQ;QAAI;IAElB;AACF"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "5a2dae2b92361d3c847aded244c9dd31f9948a1d"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1l03wc44gm = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1l03wc44gm();
cov_1l03wc44gm().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1l03wc44gm().s[1]++;
Object.defineProperty(exports, "POST", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_1l03wc44gm().f[0]++;
    cov_1l03wc44gm().s[2]++;
    return POST;
  }
});
/* istanbul ignore next */
cov_1l03wc44gm().s[3]++;
require("server-only");
const _server =
/* istanbul ignore next */
(cov_1l03wc44gm().s[4]++, require("next/server"));
const _server1 =
/* istanbul ignore next */
(cov_1l03wc44gm().s[5]++, require("../../../../../lib/auth/server"));
const _propagations =
/* istanbul ignore next */
(cov_1l03wc44gm().s[6]++, require("../../../../../lib/db/queries/propagations"));
const _zod =
/* istanbul ignore next */
(cov_1l03wc44gm().s[7]++, require("zod"));
// Validation schema for conversion
const convertSchema =
/* istanbul ignore next */
(cov_1l03wc44gm().s[8]++, _zod.z.object({
  nickname: _zod.z.string().min(1).max(100).optional(),
  location: _zod.z.string().min(1).max(100).optional()
}));
async function POST(request, {
  params
}) {
  /* istanbul ignore next */
  cov_1l03wc44gm().f[1]++;
  cov_1l03wc44gm().s[9]++;
  try {
    const {
      user
    } =
    /* istanbul ignore next */
    (cov_1l03wc44gm().s[10]++, await (0, _server1.validateRequest)());
    /* istanbul ignore next */
    cov_1l03wc44gm().s[11]++;
    if (!user) {
      /* istanbul ignore next */
      cov_1l03wc44gm().b[0][0]++;
      cov_1l03wc44gm().s[12]++;
      return _server.NextResponse.json({
        error: 'Unauthorized'
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_1l03wc44gm().b[0][1]++;
    }
    const {
      id
    } =
    /* istanbul ignore next */
    (cov_1l03wc44gm().s[13]++, await params);
    const propagationId =
    /* istanbul ignore next */
    (cov_1l03wc44gm().s[14]++, parseInt(id, 10));
    /* istanbul ignore next */
    cov_1l03wc44gm().s[15]++;
    if (isNaN(propagationId)) {
      /* istanbul ignore next */
      cov_1l03wc44gm().b[1][0]++;
      cov_1l03wc44gm().s[16]++;
      return _server.NextResponse.json({
        error: 'Invalid propagation ID'
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1l03wc44gm().b[1][1]++;
    }
    // Check if propagation exists and belongs to user
    const existingPropagation =
    /* istanbul ignore next */
    (cov_1l03wc44gm().s[17]++, await _propagations.PropagationQueries.getById(propagationId));
    /* istanbul ignore next */
    cov_1l03wc44gm().s[18]++;
    if (!existingPropagation) {
      /* istanbul ignore next */
      cov_1l03wc44gm().b[2][0]++;
      cov_1l03wc44gm().s[19]++;
      return _server.NextResponse.json({
        error: 'Propagation not found'
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_1l03wc44gm().b[2][1]++;
    }
    cov_1l03wc44gm().s[20]++;
    if (existingPropagation.userId !== user.id) {
      /* istanbul ignore next */
      cov_1l03wc44gm().b[3][0]++;
      cov_1l03wc44gm().s[21]++;
      return _server.NextResponse.json({
        error: 'Forbidden'
      }, {
        status: 403
      });
    } else
    /* istanbul ignore next */
    {
      cov_1l03wc44gm().b[3][1]++;
    }
    // Check if propagation is ready to be converted (should be established)
    cov_1l03wc44gm().s[22]++;
    if (existingPropagation.status !== 'established') {
      /* istanbul ignore next */
      cov_1l03wc44gm().b[4][0]++;
      cov_1l03wc44gm().s[23]++;
      return _server.NextResponse.json({
        error: 'Propagation must be established before converting to plant instance'
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1l03wc44gm().b[4][1]++;
    }
    const body =
    /* istanbul ignore next */
    (cov_1l03wc44gm().s[24]++, await request.json());
    const {
      nickname,
      location
    } =
    /* istanbul ignore next */
    (cov_1l03wc44gm().s[25]++, convertSchema.parse(body));
    const result =
    /* istanbul ignore next */
    (cov_1l03wc44gm().s[26]++, await _propagations.PropagationQueries.convertToPlantInstance(propagationId, {
      nickname:
      /* istanbul ignore next */
      (cov_1l03wc44gm().b[5][0]++, nickname) ||
      /* istanbul ignore next */
      (cov_1l03wc44gm().b[5][1]++, existingPropagation.nickname),
      location:
      /* istanbul ignore next */
      (cov_1l03wc44gm().b[6][0]++, location) ||
      /* istanbul ignore next */
      (cov_1l03wc44gm().b[6][1]++, existingPropagation.location)
    }));
    /* istanbul ignore next */
    cov_1l03wc44gm().s[27]++;
    return _server.NextResponse.json({
      success: true,
      plantInstanceId: result.plantInstanceId,
      propagation: result.propagation
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1l03wc44gm().s[28]++;
    console.error('Error converting propagation:', error);
    /* istanbul ignore next */
    cov_1l03wc44gm().s[29]++;
    if (error instanceof _zod.z.ZodError) {
      /* istanbul ignore next */
      cov_1l03wc44gm().b[7][0]++;
      cov_1l03wc44gm().s[30]++;
      return _server.NextResponse.json({
        error: 'Invalid data',
        details: error.issues
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1l03wc44gm().b[7][1]++;
    }
    cov_1l03wc44gm().s[31]++;
    return _server.NextResponse.json({
      error: 'Failed to convert propagation to plant instance'
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,