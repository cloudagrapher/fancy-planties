26acb9963beb8d27597e0be1fa9aada9
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _email = require("../../services/email");
const _emailerrors = require("../email-errors");
describe('Email Error Utilities', ()=>{
    describe('getEmailErrorMessage', ()=>{
        it('should return specific message for quota exceeded error', ()=>{
            const error = new _email.EmailServiceError('Quota exceeded', 'QUOTA_EXCEEDED');
            const message = (0, _emailerrors.getEmailErrorMessage)(error);
            expect(message).toContain('temporarily unavailable');
        });
        it('should return specific message for invalid email error', ()=>{
            const error = new _email.EmailServiceError('Invalid email', 'INVALID_EMAIL');
            const message = (0, _emailerrors.getEmailErrorMessage)(error);
            expect(message).toContain('email address appears to be invalid');
        });
        it('should return specific message for network error', ()=>{
            const error = new _email.EmailServiceError('Network timeout', 'NETWORK_ERROR');
            const message = (0, _emailerrors.getEmailErrorMessage)(error);
            expect(message).toContain('Network error occurred');
        });
        it('should return generic message for API error', ()=>{
            const error = new _email.EmailServiceError('API error', 'API_ERROR');
            const message = (0, _emailerrors.getEmailErrorMessage)(error);
            expect(message).toContain('Unable to send verification email');
        });
        it('should return generic message for regular Error', ()=>{
            const error = new Error('Some error');
            const message = (0, _emailerrors.getEmailErrorMessage)(error);
            expect(message).toContain('Unable to send verification email');
        });
        it('should return generic message for unknown error', ()=>{
            const message = (0, _emailerrors.getEmailErrorMessage)('string error');
            expect(message).toContain('An unexpected error occurred');
        });
    });
    describe('shouldRetryEmailOperation', ()=>{
        it('should not retry for invalid email error', ()=>{
            const error = new _email.EmailServiceError('Invalid email', 'INVALID_EMAIL');
            expect((0, _emailerrors.shouldRetryEmailOperation)(error)).toBe(false);
        });
        it('should not retry for quota exceeded error', ()=>{
            const error = new _email.EmailServiceError('Quota exceeded', 'QUOTA_EXCEEDED');
            expect((0, _emailerrors.shouldRetryEmailOperation)(error)).toBe(false);
        });
        it('should retry for network error', ()=>{
            const error = new _email.EmailServiceError('Network error', 'NETWORK_ERROR');
            expect((0, _emailerrors.shouldRetryEmailOperation)(error)).toBe(true);
        });
        it('should retry for API error', ()=>{
            const error = new _email.EmailServiceError('API error', 'API_ERROR');
            expect((0, _emailerrors.shouldRetryEmailOperation)(error)).toBe(true);
        });
        it('should retry for regular Error', ()=>{
            const error = new Error('Some error');
            expect((0, _emailerrors.shouldRetryEmailOperation)(error)).toBe(true);
        });
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9zdGVmYW5iZWtrZXIvcHJvamVjdHMvZmFuY3ktcGxhbnRpZXMvc3JjL2xpYi91dGlscy9fX3Rlc3RzX18vZW1haWwtZXJyb3JzLnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRW1haWxTZXJ2aWNlRXJyb3IgfSBmcm9tICdAL2xpYi9zZXJ2aWNlcy9lbWFpbCc7XG5pbXBvcnQgeyBnZXRFbWFpbEVycm9yTWVzc2FnZSwgc2hvdWxkUmV0cnlFbWFpbE9wZXJhdGlvbiB9IGZyb20gJy4uL2VtYWlsLWVycm9ycyc7XG5cbmRlc2NyaWJlKCdFbWFpbCBFcnJvciBVdGlsaXRpZXMnLCAoKSA9PiB7XG4gIGRlc2NyaWJlKCdnZXRFbWFpbEVycm9yTWVzc2FnZScsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIHJldHVybiBzcGVjaWZpYyBtZXNzYWdlIGZvciBxdW90YSBleGNlZWRlZCBlcnJvcicsICgpID0+IHtcbiAgICAgIGNvbnN0IGVycm9yID0gbmV3IEVtYWlsU2VydmljZUVycm9yKCdRdW90YSBleGNlZWRlZCcsICdRVU9UQV9FWENFRURFRCcpO1xuICAgICAgY29uc3QgbWVzc2FnZSA9IGdldEVtYWlsRXJyb3JNZXNzYWdlKGVycm9yKTtcbiAgICAgIFxuICAgICAgZXhwZWN0KG1lc3NhZ2UpLnRvQ29udGFpbigndGVtcG9yYXJpbHkgdW5hdmFpbGFibGUnKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgcmV0dXJuIHNwZWNpZmljIG1lc3NhZ2UgZm9yIGludmFsaWQgZW1haWwgZXJyb3InLCAoKSA9PiB7XG4gICAgICBjb25zdCBlcnJvciA9IG5ldyBFbWFpbFNlcnZpY2VFcnJvcignSW52YWxpZCBlbWFpbCcsICdJTlZBTElEX0VNQUlMJyk7XG4gICAgICBjb25zdCBtZXNzYWdlID0gZ2V0RW1haWxFcnJvck1lc3NhZ2UoZXJyb3IpO1xuICAgICAgXG4gICAgICBleHBlY3QobWVzc2FnZSkudG9Db250YWluKCdlbWFpbCBhZGRyZXNzIGFwcGVhcnMgdG8gYmUgaW52YWxpZCcpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCByZXR1cm4gc3BlY2lmaWMgbWVzc2FnZSBmb3IgbmV0d29yayBlcnJvcicsICgpID0+IHtcbiAgICAgIGNvbnN0IGVycm9yID0gbmV3IEVtYWlsU2VydmljZUVycm9yKCdOZXR3b3JrIHRpbWVvdXQnLCAnTkVUV09SS19FUlJPUicpO1xuICAgICAgY29uc3QgbWVzc2FnZSA9IGdldEVtYWlsRXJyb3JNZXNzYWdlKGVycm9yKTtcbiAgICAgIFxuICAgICAgZXhwZWN0KG1lc3NhZ2UpLnRvQ29udGFpbignTmV0d29yayBlcnJvciBvY2N1cnJlZCcpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCByZXR1cm4gZ2VuZXJpYyBtZXNzYWdlIGZvciBBUEkgZXJyb3InLCAoKSA9PiB7XG4gICAgICBjb25zdCBlcnJvciA9IG5ldyBFbWFpbFNlcnZpY2VFcnJvcignQVBJIGVycm9yJywgJ0FQSV9FUlJPUicpO1xuICAgICAgY29uc3QgbWVzc2FnZSA9IGdldEVtYWlsRXJyb3JNZXNzYWdlKGVycm9yKTtcbiAgICAgIFxuICAgICAgZXhwZWN0KG1lc3NhZ2UpLnRvQ29udGFpbignVW5hYmxlIHRvIHNlbmQgdmVyaWZpY2F0aW9uIGVtYWlsJyk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHJldHVybiBnZW5lcmljIG1lc3NhZ2UgZm9yIHJlZ3VsYXIgRXJyb3InLCAoKSA9PiB7XG4gICAgICBjb25zdCBlcnJvciA9IG5ldyBFcnJvcignU29tZSBlcnJvcicpO1xuICAgICAgY29uc3QgbWVzc2FnZSA9IGdldEVtYWlsRXJyb3JNZXNzYWdlKGVycm9yKTtcbiAgICAgIFxuICAgICAgZXhwZWN0KG1lc3NhZ2UpLnRvQ29udGFpbignVW5hYmxlIHRvIHNlbmQgdmVyaWZpY2F0aW9uIGVtYWlsJyk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHJldHVybiBnZW5lcmljIG1lc3NhZ2UgZm9yIHVua25vd24gZXJyb3InLCAoKSA9PiB7XG4gICAgICBjb25zdCBtZXNzYWdlID0gZ2V0RW1haWxFcnJvck1lc3NhZ2UoJ3N0cmluZyBlcnJvcicpO1xuICAgICAgXG4gICAgICBleHBlY3QobWVzc2FnZSkudG9Db250YWluKCdBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkJyk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdzaG91bGRSZXRyeUVtYWlsT3BlcmF0aW9uJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgbm90IHJldHJ5IGZvciBpbnZhbGlkIGVtYWlsIGVycm9yJywgKCkgPT4ge1xuICAgICAgY29uc3QgZXJyb3IgPSBuZXcgRW1haWxTZXJ2aWNlRXJyb3IoJ0ludmFsaWQgZW1haWwnLCAnSU5WQUxJRF9FTUFJTCcpO1xuICAgICAgXG4gICAgICBleHBlY3Qoc2hvdWxkUmV0cnlFbWFpbE9wZXJhdGlvbihlcnJvcikpLnRvQmUoZmFsc2UpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBub3QgcmV0cnkgZm9yIHF1b3RhIGV4Y2VlZGVkIGVycm9yJywgKCkgPT4ge1xuICAgICAgY29uc3QgZXJyb3IgPSBuZXcgRW1haWxTZXJ2aWNlRXJyb3IoJ1F1b3RhIGV4Y2VlZGVkJywgJ1FVT1RBX0VYQ0VFREVEJyk7XG4gICAgICBcbiAgICAgIGV4cGVjdChzaG91bGRSZXRyeUVtYWlsT3BlcmF0aW9uKGVycm9yKSkudG9CZShmYWxzZSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHJldHJ5IGZvciBuZXR3b3JrIGVycm9yJywgKCkgPT4ge1xuICAgICAgY29uc3QgZXJyb3IgPSBuZXcgRW1haWxTZXJ2aWNlRXJyb3IoJ05ldHdvcmsgZXJyb3InLCAnTkVUV09SS19FUlJPUicpO1xuICAgICAgXG4gICAgICBleHBlY3Qoc2hvdWxkUmV0cnlFbWFpbE9wZXJhdGlvbihlcnJvcikpLnRvQmUodHJ1ZSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHJldHJ5IGZvciBBUEkgZXJyb3InLCAoKSA9PiB7XG4gICAgICBjb25zdCBlcnJvciA9IG5ldyBFbWFpbFNlcnZpY2VFcnJvcignQVBJIGVycm9yJywgJ0FQSV9FUlJPUicpO1xuICAgICAgXG4gICAgICBleHBlY3Qoc2hvdWxkUmV0cnlFbWFpbE9wZXJhdGlvbihlcnJvcikpLnRvQmUodHJ1ZSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHJldHJ5IGZvciByZWd1bGFyIEVycm9yJywgKCkgPT4ge1xuICAgICAgY29uc3QgZXJyb3IgPSBuZXcgRXJyb3IoJ1NvbWUgZXJyb3InKTtcbiAgICAgIFxuICAgICAgZXhwZWN0KHNob3VsZFJldHJ5RW1haWxPcGVyYXRpb24oZXJyb3IpKS50b0JlKHRydWUpO1xuICAgIH0pO1xuICB9KTtcbn0pOyJdLCJuYW1lcyI6WyJkZXNjcmliZSIsIml0IiwiZXJyb3IiLCJFbWFpbFNlcnZpY2VFcnJvciIsIm1lc3NhZ2UiLCJnZXRFbWFpbEVycm9yTWVzc2FnZSIsImV4cGVjdCIsInRvQ29udGFpbiIsIkVycm9yIiwic2hvdWxkUmV0cnlFbWFpbE9wZXJhdGlvbiIsInRvQmUiXSwibWFwcGluZ3MiOiI7Ozs7dUJBQWtDOzZCQUM4QjtBQUVoRUEsU0FBUyx5QkFBeUI7SUFDaENBLFNBQVMsd0JBQXdCO1FBQy9CQyxHQUFHLDJEQUEyRDtZQUM1RCxNQUFNQyxRQUFRLElBQUlDLHdCQUFpQixDQUFDLGtCQUFrQjtZQUN0RCxNQUFNQyxVQUFVQyxJQUFBQSxpQ0FBb0IsRUFBQ0g7WUFFckNJLE9BQU9GLFNBQVNHLFNBQVMsQ0FBQztRQUM1QjtRQUVBTixHQUFHLDBEQUEwRDtZQUMzRCxNQUFNQyxRQUFRLElBQUlDLHdCQUFpQixDQUFDLGlCQUFpQjtZQUNyRCxNQUFNQyxVQUFVQyxJQUFBQSxpQ0FBb0IsRUFBQ0g7WUFFckNJLE9BQU9GLFNBQVNHLFNBQVMsQ0FBQztRQUM1QjtRQUVBTixHQUFHLG9EQUFvRDtZQUNyRCxNQUFNQyxRQUFRLElBQUlDLHdCQUFpQixDQUFDLG1CQUFtQjtZQUN2RCxNQUFNQyxVQUFVQyxJQUFBQSxpQ0FBb0IsRUFBQ0g7WUFFckNJLE9BQU9GLFNBQVNHLFNBQVMsQ0FBQztRQUM1QjtRQUVBTixHQUFHLCtDQUErQztZQUNoRCxNQUFNQyxRQUFRLElBQUlDLHdCQUFpQixDQUFDLGFBQWE7WUFDakQsTUFBTUMsVUFBVUMsSUFBQUEsaUNBQW9CLEVBQUNIO1lBRXJDSSxPQUFPRixTQUFTRyxTQUFTLENBQUM7UUFDNUI7UUFFQU4sR0FBRyxtREFBbUQ7WUFDcEQsTUFBTUMsUUFBUSxJQUFJTSxNQUFNO1lBQ3hCLE1BQU1KLFVBQVVDLElBQUFBLGlDQUFvQixFQUFDSDtZQUVyQ0ksT0FBT0YsU0FBU0csU0FBUyxDQUFDO1FBQzVCO1FBRUFOLEdBQUcsbURBQW1EO1lBQ3BELE1BQU1HLFVBQVVDLElBQUFBLGlDQUFvQixFQUFDO1lBRXJDQyxPQUFPRixTQUFTRyxTQUFTLENBQUM7UUFDNUI7SUFDRjtJQUVBUCxTQUFTLDZCQUE2QjtRQUNwQ0MsR0FBRyw0Q0FBNEM7WUFDN0MsTUFBTUMsUUFBUSxJQUFJQyx3QkFBaUIsQ0FBQyxpQkFBaUI7WUFFckRHLE9BQU9HLElBQUFBLHNDQUF5QixFQUFDUCxRQUFRUSxJQUFJLENBQUM7UUFDaEQ7UUFFQVQsR0FBRyw2Q0FBNkM7WUFDOUMsTUFBTUMsUUFBUSxJQUFJQyx3QkFBaUIsQ0FBQyxrQkFBa0I7WUFFdERHLE9BQU9HLElBQUFBLHNDQUF5QixFQUFDUCxRQUFRUSxJQUFJLENBQUM7UUFDaEQ7UUFFQVQsR0FBRyxrQ0FBa0M7WUFDbkMsTUFBTUMsUUFBUSxJQUFJQyx3QkFBaUIsQ0FBQyxpQkFBaUI7WUFFckRHLE9BQU9HLElBQUFBLHNDQUF5QixFQUFDUCxRQUFRUSxJQUFJLENBQUM7UUFDaEQ7UUFFQVQsR0FBRyw4QkFBOEI7WUFDL0IsTUFBTUMsUUFBUSxJQUFJQyx3QkFBaUIsQ0FBQyxhQUFhO1lBRWpERyxPQUFPRyxJQUFBQSxzQ0FBeUIsRUFBQ1AsUUFBUVEsSUFBSSxDQUFDO1FBQ2hEO1FBRUFULEdBQUcsa0NBQWtDO1lBQ25DLE1BQU1DLFFBQVEsSUFBSU0sTUFBTTtZQUV4QkYsT0FBT0csSUFBQUEsc0NBQXlCLEVBQUNQLFFBQVFRLElBQUksQ0FBQztRQUNoRDtJQUNGO0FBQ0YifQ==