{"version":3,"sources":["/Users/stefanbekker/projects/fancy-planties/src/app/api/care/history/[plantInstanceId]/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { CareHistoryQueries } from '@/lib/db/queries/care-history';\nimport { validateRequest } from '@/lib/auth/server';\n\n// GET /api/care/history/[plantInstanceId] - Get care history for a plant instance\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: Promise<{ plantInstanceId: string }> }\n) {\n  try {\n    const { user } = await validateRequest();\n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const resolvedParams = await params;\n    const plantInstanceId = parseInt(resolvedParams.plantInstanceId, 10);\n    if (isNaN(plantInstanceId)) {\n      return NextResponse.json({ error: 'Invalid plant instance ID' }, { status: 400 });\n    }\n\n    // Get query parameters for filtering\n    const { searchParams } = new URL(request.url);\n    const careType = searchParams.get('careType') || undefined;\n    const startDate = searchParams.get('startDate') ? new Date(searchParams.get('startDate')!) : undefined;\n    const endDate = searchParams.get('endDate') ? new Date(searchParams.get('endDate')!) : undefined;\n    const limit = searchParams.get('limit') ? parseInt(searchParams.get('limit')!, 10) : 50;\n    const offset = searchParams.get('offset') ? parseInt(searchParams.get('offset')!, 10) : 0;\n    const sortBy = searchParams.get('sortBy') as 'care_date' | 'care_type' | 'created_at' || 'care_date';\n    const sortOrder = searchParams.get('sortOrder') as 'asc' | 'desc' || 'desc';\n\n    const filters = {\n      careType: careType as any,\n      startDate,\n      endDate,\n      limit,\n      offset,\n      sortBy,\n      sortOrder,\n    };\n\n    const careHistory = await CareHistoryQueries.getCareHistoryForPlant(\n      plantInstanceId,\n      user.id,\n      filters\n    );\n\n    return NextResponse.json(careHistory);\n  } catch (error) {\n    console.error('Failed to get care history:', error);\n    return NextResponse.json(\n      { error: 'Failed to get care history' },\n      { status: 500 }\n    );\n  }\n}"],"names":["GET","request","params","user","validateRequest","NextResponse","json","error","status","resolvedParams","plantInstanceId","parseInt","isNaN","searchParams","URL","url","careType","get","undefined","startDate","Date","endDate","limit","offset","sortBy","sortOrder","filters","careHistory","CareHistoryQueries","getCareHistoryForPlant","id","console"],"mappings":";;;;+BAKsBA;;;eAAAA;;;wBALoB;6BACP;yBACH;AAGzB,eAAeA,IACpBC,OAAoB,EACpB,EAAEC,MAAM,EAAoD;IAE5D,IAAI;QACF,MAAM,EAAEC,IAAI,EAAE,GAAG,MAAMC,IAAAA,wBAAe;QACtC,IAAI,CAACD,MAAM;YACT,OAAOE,oBAAY,CAACC,IAAI,CAAC;gBAAEC,OAAO;YAAe,GAAG;gBAAEC,QAAQ;YAAI;QACpE;QAEA,MAAMC,iBAAiB,MAAMP;QAC7B,MAAMQ,kBAAkBC,SAASF,eAAeC,eAAe,EAAE;QACjE,IAAIE,MAAMF,kBAAkB;YAC1B,OAAOL,oBAAY,CAACC,IAAI,CAAC;gBAAEC,OAAO;YAA4B,GAAG;gBAAEC,QAAQ;YAAI;QACjF;QAEA,qCAAqC;QACrC,MAAM,EAAEK,YAAY,EAAE,GAAG,IAAIC,IAAIb,QAAQc,GAAG;QAC5C,MAAMC,WAAWH,aAAaI,GAAG,CAAC,eAAeC;QACjD,MAAMC,YAAYN,aAAaI,GAAG,CAAC,eAAe,IAAIG,KAAKP,aAAaI,GAAG,CAAC,gBAAiBC;QAC7F,MAAMG,UAAUR,aAAaI,GAAG,CAAC,aAAa,IAAIG,KAAKP,aAAaI,GAAG,CAAC,cAAeC;QACvF,MAAMI,QAAQT,aAAaI,GAAG,CAAC,WAAWN,SAASE,aAAaI,GAAG,CAAC,UAAW,MAAM;QACrF,MAAMM,SAASV,aAAaI,GAAG,CAAC,YAAYN,SAASE,aAAaI,GAAG,CAAC,WAAY,MAAM;QACxF,MAAMO,SAASX,aAAaI,GAAG,CAAC,aAAyD;QACzF,MAAMQ,YAAYZ,aAAaI,GAAG,CAAC,gBAAkC;QAErE,MAAMS,UAAU;YACdV,UAAUA;YACVG;YACAE;YACAC;YACAC;YACAC;YACAC;QACF;QAEA,MAAME,cAAc,MAAMC,+BAAkB,CAACC,sBAAsB,CACjEnB,iBACAP,KAAK2B,EAAE,EACPJ;QAGF,OAAOrB,oBAAY,CAACC,IAAI,CAACqB;IAC3B,EAAE,OAAOpB,OAAO;QACdwB,QAAQxB,KAAK,CAAC,+BAA+BA;QAC7C,OAAOF,oBAAY,CAACC,IAAI,CACtB;YAAEC,OAAO;QAA6B,GACtC;YAAEC,QAAQ;QAAI;IAElB;AACF"}