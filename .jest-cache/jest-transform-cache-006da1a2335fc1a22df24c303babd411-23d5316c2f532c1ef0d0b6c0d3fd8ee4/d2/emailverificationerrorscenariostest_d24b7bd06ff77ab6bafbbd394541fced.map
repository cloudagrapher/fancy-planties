{"version":3,"sources":["/Users/stefanbekker/projects/fancy-planties/src/__tests__/integration/email-verification-error-scenarios.test.ts"],"sourcesContent":["/**\n * Email Verification Error Scenario Tests\n * Tests email service failure handling, retry logic, expired code scenarios, \n * cleanup processes, and concurrent verification attempts\n * Requirements: 1.4, 3.1, 7.3, 7.4\n */\n\nimport { emailVerificationCodeService } from '@/lib/services/email-verification-code-service';\nimport { createEmailService } from '@/lib/services/resend-email-service';\nimport { EmailServiceError } from '@/lib/services/email-service';\n\n// Mock email service and related modules\njest.mock('@/lib/services/resend-email-service');\njest.mock('@/lib/services/email-service');\n\n// Mock database\njest.mock('@/lib/db', () => ({\n  db: {\n    select: jest.fn().mockReturnThis(),\n    from: jest.fn().mockReturnThis(),\n    where: jest.fn().mockReturnThis(),\n    insert: jest.fn().mockReturnThis(),\n    values: jest.fn().mockReturnThis(),\n    update: jest.fn().mockReturnThis(),\n    set: jest.fn().mockReturnThis(),\n    delete: jest.fn().mockReturnThis(),\n    returning: jest.fn(),\n    execute: jest.fn(),\n  },\n}));\n\n// Mock auth functions\njest.mock('@/lib/auth', () => ({\n  getUserByEmail: jest.fn(),\n  getUserById: jest.fn(),\n}));\n\nconst mockEmailService = {\n  sendVerificationEmail: jest.fn(),\n};\n\nconst mockCreateEmailService = createEmailService as jest.MockedFunction<typeof createEmailService>;\nconst mockSendEmailWithRetry = require('@/lib/services/email-service').sendEmailWithRetry as jest.MockedFunction<any>;\nconst mockDb = require('@/lib/db').db;\nconst mockGetUserByEmail = require('@/lib/auth').getUserByEmail as jest.MockedFunction<any>;\nconst mockGetUserById = require('@/lib/auth').getUserById as jest.MockedFunction<any>;\n\n// Mock environment variables\nconst originalEnv = process.env;\n\nbeforeAll(() => {\n  process.env = {\n    ...originalEnv,\n    RESEND_API_KEY: 'test-api-key',\n    FROM_EMAIL: 'test@example.com',\n    FROM_NAME: 'Test App',\n    VERIFICATION_CODE_EXPIRY_MINUTES: '10',\n    MAX_VERIFICATION_ATTEMPTS: '5',\n    RESEND_COOLDOWN_SECONDS: '60',\n    MAX_RESEND_PER_HOUR: '5',\n    NODE_ENV: 'test',\n  };\n});\n\nafterAll(() => {\n  process.env = originalEnv;\n});\n\ndescribe('Email Verification Error Scenario Tests', () => {\n  beforeEach(async () => {\n    jest.clearAllMocks();\n    \n    // Default to successful email service\n    mockCreateEmailService.mockReturnValue(mockEmailService);\n    mockSendEmailWithRetry.mockResolvedValue(true);\n    mockEmailService.sendVerificationEmail.mockResolvedValue(true);\n\n    // Setup default database mocks\n    mockDb.returning.mockResolvedValue([]);\n    mockDb.execute.mockResolvedValue([]);\n  });\n\n  describe('Email Service Failure Handling and Retry Logic', () => {\n    it('should handle email service errors during code generation', async () => {\n      // Mock email service to fail\n      mockSendEmailWithRetry.mockRejectedValue(new EmailServiceError('Quota exceeded', 'QUOTA_EXCEEDED'));\n\n      // Mock user data\n      const mockUser = {\n        id: 1,\n        email: 'test@example.com',\n        name: 'Test User',\n        isEmailVerified: false,\n      };\n\n      // Mock user lookup\n      mockGetUserById.mockResolvedValue(mockUser);\n\n      // Mock code insertion\n      mockDb.returning.mockResolvedValueOnce([{ id: 1, code: '123456', userId: 1 }]);\n\n      // Generate verification code (should work even if email fails)\n      const verificationCode = await emailVerificationCodeService.generateCode(mockUser.id);\n      expect(verificationCode).toMatch(/^\\d{6}$/);\n\n      // Verify database operations were called\n      expect(mockDb.insert).toHaveBeenCalled();\n    });\n\n    it('should handle different types of email service errors', async () => {\n      // Mock user data\n      const mockUser = {\n        id: 1,\n        email: 'test@example.com',\n        name: 'Test User',\n        isEmailVerified: false,\n      };\n\n      // Mock user lookup\n      mockGetUserById.mockResolvedValue(mockUser);\n\n      // Test API error\n      mockSendEmailWithRetry.mockRejectedValue(new EmailServiceError('API error', 'API_ERROR'));\n      mockDb.returning.mockResolvedValueOnce([{ id: 1, code: '123456', userId: 1 }]);\n      \n      const code1 = await emailVerificationCodeService.generateCode(mockUser.id);\n      expect(code1).toMatch(/^\\d{6}$/);\n\n      // Test network error\n      mockSendEmailWithRetry.mockRejectedValue(new EmailServiceError('Network timeout', 'NETWORK_ERROR'));\n      mockDb.returning.mockResolvedValueOnce([{ id: 2, code: '654321', userId: 1 }]);\n      \n      const code2 = await emailVerificationCodeService.generateCode(mockUser.id);\n      expect(code2).toMatch(/^\\d{6}$/);\n      expect(code2).not.toBe(code1); // Should be different code\n\n      // Verify database operations were called\n      expect(mockDb.insert).toHaveBeenCalledTimes(2);\n    });\n  });\n\n  describe('Expired Code Scenarios and Cleanup Processes', () => {\n    it('should handle expired verification codes properly', async () => {\n      // Mock user data\n      const mockUser = {\n        id: 1,\n        email: 'test@example.com',\n        name: 'Test User',\n        isEmailVerified: false,\n      };\n\n      // Mock user lookup\n      mockGetUserByEmail.mockResolvedValue(mockUser);\n\n      // Mock expired code lookup\n      mockDb.returning.mockResolvedValueOnce([{\n        id: 1,\n        code: '123456',\n        userId: 1,\n        expiresAt: new Date(Date.now() - 60000), // Expired 1 minute ago\n        attemptsUsed: 0,\n      }]);\n\n      // Try to verify with expired code using service\n      try {\n        await emailVerificationCodeService.validateCode('test@example.com', '123456');\n        fail('Should have thrown an error for expired code');\n      } catch (error: any) {\n        expect(error.code).toBe('CODE_EXPIRED');\n      }\n    });\n\n    it('should clean up expired codes during verification service operations', async () => {\n      // Mock expired codes for cleanup\n      mockDb.returning.mockResolvedValueOnce([\n        { id: 1, code: '111111', expiresAt: new Date(Date.now() - 60000) },\n        { id: 2, code: '222222', expiresAt: new Date(Date.now() - 120000) },\n      ]);\n\n      // Trigger cleanup by calling the service method\n      await emailVerificationCodeService.cleanupExpiredCodes();\n\n      // Verify delete was called for expired codes\n      expect(mockDb.delete).toHaveBeenCalled();\n    });\n  });\n\n  describe('Concurrent Verification Attempts and Race Conditions', () => {\n    it('should handle concurrent verification attempts safely', async () => {\n      // Mock user data\n      const mockUser = {\n        id: 1,\n        email: 'test@example.com',\n        name: 'Test User',\n        isEmailVerified: false,\n      };\n\n      // Mock user lookup\n      mockGetUserByEmail.mockResolvedValue(mockUser);\n\n      // Mock valid code lookup\n      mockDb.returning.mockResolvedValue([{\n        id: 1,\n        code: '123456',\n        userId: 1,\n        expiresAt: new Date(Date.now() + 600000),\n        attemptsUsed: 0,\n      }]);\n\n      // Execute concurrent verification attempts\n      const promises = [\n        emailVerificationCodeService.validateCode('test@example.com', '123456'),\n        emailVerificationCodeService.validateCode('test@example.com', '123456'),\n      ];\n\n      // One should succeed, one might fail due to race conditions\n      const results = await Promise.allSettled(promises);\n      \n      const successCount = results.filter(r => r.status === 'fulfilled' && r.value === true).length;\n\n      // At least one should succeed\n      expect(successCount).toBeGreaterThanOrEqual(1);\n\n      // Verify database operations were called\n      expect(mockDb.update).toHaveBeenCalled(); // User marked as verified\n      expect(mockDb.delete).toHaveBeenCalled(); // Code deleted\n    });\n\n    it('should handle concurrent code generation requests safely', async () => {\n      // Mock user data\n      const mockUser = {\n        id: 1,\n        email: 'test@example.com',\n        name: 'Test User',\n        isEmailVerified: false,\n      };\n\n      // Mock user lookup\n      mockGetUserById.mockResolvedValue(mockUser);\n\n      // Mock code insertions\n      mockDb.returning\n        .mockResolvedValueOnce([{ id: 1, code: '123456', userId: 1 }])\n        .mockResolvedValueOnce([{ id: 2, code: '654321', userId: 1 }]);\n\n      // Execute concurrent code generation requests\n      const promises = [\n        emailVerificationCodeService.generateCode(mockUser.id),\n        emailVerificationCodeService.generateCode(mockUser.id),\n      ];\n\n      const codes = await Promise.all(promises);\n\n      // Both should succeed and return valid codes\n      expect(codes[0]).toMatch(/^\\d{6}$/);\n      expect(codes[1]).toMatch(/^\\d{6}$/);\n\n      // Verify database operations were called\n      expect(mockDb.delete).toHaveBeenCalled(); // Old codes deleted\n      expect(mockDb.insert).toHaveBeenCalled(); // New codes inserted\n    });\n  });\n\n  describe('Database Error Scenarios', () => {\n    it('should handle maximum attempts reached', async () => {\n      // Mock user data\n      const mockUser = {\n        id: 1,\n        email: 'test@example.com',\n        name: 'Test User',\n        isEmailVerified: false,\n      };\n\n      // Mock user lookup\n      mockGetUserByEmail.mockResolvedValue(mockUser);\n\n      // Mock code with max attempts reached\n      mockDb.returning.mockResolvedValueOnce([{\n        id: 1,\n        code: '123456',\n        userId: 1,\n        expiresAt: new Date(Date.now() + 600000),\n        attemptsUsed: 5, // Max attempts reached\n      }]);\n\n      // Try to verify with max attempts reached\n      try {\n        await emailVerificationCodeService.validateCode('test@example.com', '123456');\n        fail('Should have thrown an error for too many attempts');\n      } catch (error: any) {\n        expect(error.code).toBe('TOO_MANY_ATTEMPTS');\n      }\n    });\n\n    it('should handle service errors during validation', async () => {\n      // Test with non-existent user\n      mockGetUserByEmail.mockResolvedValue(null);\n\n      try {\n        await emailVerificationCodeService.validateCode('nonexistent@example.com', '123456');\n        fail('Should have thrown an error for non-existent user');\n      } catch (error: any) {\n        expect(error.code).toBe('USER_NOT_FOUND');\n      }\n    });\n  });\n});"],"names":["jest","mock","db","select","fn","mockReturnThis","from","where","insert","values","update","set","delete","returning","execute","getUserByEmail","getUserById","mockEmailService","sendVerificationEmail","mockCreateEmailService","createEmailService","mockSendEmailWithRetry","require","sendEmailWithRetry","mockDb","mockGetUserByEmail","mockGetUserById","originalEnv","process","env","beforeAll","RESEND_API_KEY","FROM_EMAIL","FROM_NAME","VERIFICATION_CODE_EXPIRY_MINUTES","MAX_VERIFICATION_ATTEMPTS","RESEND_COOLDOWN_SECONDS","MAX_RESEND_PER_HOUR","NODE_ENV","afterAll","describe","beforeEach","clearAllMocks","mockReturnValue","mockResolvedValue","it","mockRejectedValue","EmailServiceError","mockUser","id","email","name","isEmailVerified","mockResolvedValueOnce","code","userId","verificationCode","emailVerificationCodeService","generateCode","expect","toMatch","toHaveBeenCalled","code1","code2","not","toBe","toHaveBeenCalledTimes","expiresAt","Date","now","attemptsUsed","validateCode","fail","error","cleanupExpiredCodes","promises","results","Promise","allSettled","successCount","filter","r","status","value","length","toBeGreaterThanOrEqual","codes","all"],"mappings":"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"}