47a67ef46d72faf409ac93b742f0c1f5
// Authentication Flow Integration Tests
// Tests complete signup, login, and logout workflows
"use strict";
// Mock the navigation hooks before importing components
jest.mock('next/navigation', ()=>({
        useRouter: ()=>({
                push: mockPush,
                refresh: mockRefresh
            }),
        useSearchParams: ()=>({
                get: mockGet
            })
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("@testing-library/react");
const _testutils = require("../../test-utils");
const _apihelpers = require("../../test-utils/helpers/api-helpers.js");
const _userfactory = require("../../test-utils/factories/user-factory.js");
const _SignUpForm = /*#__PURE__*/ _interop_require_default(require("../../components/auth/SignUpForm"));
const _SignInForm = /*#__PURE__*/ _interop_require_default(require("../../components/auth/SignInForm"));
const _LogoutButton = /*#__PURE__*/ _interop_require_default(require("../../components/auth/LogoutButton"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Mock Next.js router
const mockPush = jest.fn();
const mockRefresh = jest.fn();
const mockGet = jest.fn(()=>null);
describe('Authentication Flow Integration Tests', ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
        (0, _apihelpers.resetApiMocks)();
        mockPush.mockClear();
        mockRefresh.mockClear();
    });
    afterEach(()=>{
        (0, _apihelpers.resetApiMocks)();
    });
    describe('Complete Signup Workflow', ()=>{
        it('should complete full signup workflow from form submission to authenticated state', async ()=>{
            // Arrange
            const testUser = (0, _userfactory.createTestUser)({
                name: 'John Doe',
                email: 'john@example.com'
            });
            (0, _apihelpers.mockApiResponse)({
                'POST /api/auth/signup': {
                    status: 200,
                    data: {
                        success: true,
                        user: {
                            id: testUser.id,
                            email: testUser.email,
                            name: testUser.name
                        }
                    }
                }
            });
            const { user } = (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_SignUpForm.default, {}));
            // Act - Fill out signup form
            await _testutils.userInteractions.fillForm({
                'Full Name': 'John Doe',
                'Email Address': 'john@example.com',
                'Password': 'SecurePass123!'
            }, user);
            // Submit form
            await _testutils.userInteractions.submitForm(user, 'Create Account');
            // Assert - Verify API call was made with correct data
            await (0, _react.waitFor)(()=>{
                expect(global.fetch).toHaveBeenCalledWith('/api/auth/signup', expect.objectContaining({
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: expect.stringContaining('john@example.com')
                }));
            });
            // Assert - Verify form shows loading state during submission
            expect(_react.screen.getByText('Creating account...')).toBeInTheDocument();
        });
        it('should handle signup validation errors properly', async ()=>{
            // Arrange
            (0, _apihelpers.mockApiResponse)({
                'POST /api/auth/signup': {
                    status: 400,
                    data: {
                        error: 'Validation failed',
                        errors: {
                            email: 'Email is already in use',
                            password: 'Password must be at least 8 characters'
                        }
                    }
                }
            });
            const { user } = (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_SignUpForm.default, {}));
            // Act - Submit form with valid client data but server errors
            await _testutils.userInteractions.fillForm({
                'Full Name': 'John Doe',
                'Email Address': 'existing@example.com',
                'Password': 'ValidPass123!'
            }, user);
            await _testutils.userInteractions.submitForm(user, 'Create Account');
            // Assert - Verify server error messages are displayed
            await (0, _react.waitFor)(()=>{
                expect(_react.screen.getByText('Email is already in use')).toBeInTheDocument();
                expect(_react.screen.getByText('Password must be at least 8 characters')).toBeInTheDocument();
            });
            // Assert - Verify no redirect occurred
            expect(mockPush).not.toHaveBeenCalled();
        });
        it('should handle signup server errors gracefully', async ()=>{
            // Arrange
            (0, _apihelpers.mockApiError)('/api/auth/signup', 500, {
                error: 'Internal server error'
            }, 'POST');
            const { user } = (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_SignUpForm.default, {}));
            // Act - Submit valid form data
            await _testutils.userInteractions.fillForm({
                'Full Name': 'John Doe',
                'Email Address': 'john@example.com',
                'Password': 'SecurePass123!'
            }, user);
            await _testutils.userInteractions.submitForm(user, 'Create Account');
            // Assert - Verify error message is displayed
            await (0, _react.waitFor)(()=>{
                expect(_react.screen.getByText('Internal server error')).toBeInTheDocument();
            });
            // Assert - Verify no redirect occurred
            expect(mockPush).not.toHaveBeenCalled();
        });
    });
    describe('Login Workflow with Session Persistence', ()=>{
        it('should complete login workflow with session persistence', async ()=>{
            // Arrange
            const testUser = (0, _userfactory.createTestUser)({
                email: 'john@example.com'
            });
            (0, _apihelpers.mockApiResponse)({
                'POST /api/auth/signin': {
                    status: 200,
                    data: {
                        success: true,
                        user: {
                            id: testUser.id,
                            email: testUser.email,
                            name: testUser.name
                        }
                    }
                }
            });
            const { user } = (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_SignInForm.default, {}));
            // Act - Fill out login form
            await _testutils.userInteractions.fillForm({
                'Email Address': 'john@example.com',
                'Password': 'SecurePass123!'
            }, user);
            // Submit form
            await _testutils.userInteractions.submitForm(user, 'Sign In');
            // Assert - Verify API call was made with correct credentials
            await (0, _react.waitFor)(()=>{
                expect(global.fetch).toHaveBeenCalledWith('/api/auth/signin', expect.objectContaining({
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        email: 'john@example.com',
                        password: 'SecurePass123!'
                    })
                }));
            });
            // Assert - Verify redirect to dashboard
            await (0, _react.waitFor)(()=>{
                expect(mockPush).toHaveBeenCalledWith('/dashboard');
                expect(mockRefresh).toHaveBeenCalled();
            });
        });
        it('should handle login with redirect parameter', async ()=>{
            // Arrange
            const testUser = (0, _userfactory.createTestUser)();
            // Mock useSearchParams to return redirect parameter
            jest.doMock('next/navigation', ()=>({
                    useRouter: ()=>({
                            push: mockPush,
                            refresh: mockRefresh
                        }),
                    useSearchParams: ()=>({
                            get: jest.fn((param)=>param === 'redirect' ? '/dashboard/plants' : null)
                        })
                }));
            (0, _apihelpers.mockApiResponse)({
                'POST /api/auth/signin': {
                    status: 200,
                    data: {
                        success: true,
                        user: {
                            id: testUser.id,
                            email: testUser.email,
                            name: testUser.name
                        }
                    }
                }
            });
            const { user } = (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_SignInForm.default, {}));
            // Act - Complete login
            await _testutils.userInteractions.fillForm({
                'Email Address': 'john@example.com',
                'Password': 'SecurePass123!'
            }, user);
            await _testutils.userInteractions.submitForm(user, 'Sign In');
            // Assert - Verify redirect to intended page
            await (0, _react.waitFor)(()=>{
                expect(mockPush).toHaveBeenCalledWith('/dashboard/plants');
            });
        });
        it('should handle invalid login credentials', async ()=>{
            // Arrange
            (0, _apihelpers.mockApiResponse)({
                'POST /api/auth/signin': {
                    status: 401,
                    data: {
                        error: 'Invalid email or password'
                    }
                }
            });
            const { user } = (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_SignInForm.default, {}));
            // Act - Submit invalid credentials
            await _testutils.userInteractions.fillForm({
                'Email Address': 'wrong@example.com',
                'Password': 'wrongpassword'
            }, user);
            await _testutils.userInteractions.submitForm(user, 'Sign In');
            // Assert - Verify error message is displayed
            await (0, _react.waitFor)(()=>{
                expect(_react.screen.getByText('Invalid email or password')).toBeInTheDocument();
            });
            // Assert - Verify no redirect occurred
            expect(mockPush).not.toHaveBeenCalled();
        });
        it('should handle login validation errors', async ()=>{
            // Arrange
            (0, _apihelpers.mockApiResponse)({
                'POST /api/auth/signin': {
                    status: 400,
                    data: {
                        error: 'Validation failed',
                        errors: {
                            email: 'Please enter a valid email address',
                            password: 'Password is required'
                        }
                    }
                }
            });
            const { user } = (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_SignInForm.default, {}));
            // Act - Submit form with invalid data
            await _testutils.userInteractions.fillForm({
                'Email Address': 'invalid-email',
                'Password': 'validpass'
            }, user);
            await _testutils.userInteractions.submitForm(user, 'Sign In');
            // Assert - Verify field-specific errors are displayed
            await (0, _react.waitFor)(()=>{
                expect(_react.screen.getByText('Please enter a valid email address')).toBeInTheDocument();
                expect(_react.screen.getByText('Password is required')).toBeInTheDocument();
            });
        });
    });
    describe('Logout and Session Cleanup', ()=>{
        it('should complete logout workflow with proper session cleanup', async ()=>{
            // Arrange
            (0, _apihelpers.mockApiResponse)({
                'POST /api/auth/signout': {
                    status: 200,
                    data: {
                        success: true,
                        message: 'Signed out successfully'
                    }
                }
            });
            const { user } = (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LogoutButton.default, {}));
            // Act - Click logout button
            const logoutButton = _react.screen.getByRole('button', {
                name: /sign out/i
            });
            await user.click(logoutButton);
            // Assert - Verify API call was made
            await (0, _react.waitFor)(()=>{
                expect(global.fetch).toHaveBeenCalledWith('/api/auth/signout', expect.objectContaining({
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                }));
            });
            // Assert - Verify redirect to signin page
            await (0, _react.waitFor)(()=>{
                expect(mockPush).toHaveBeenCalledWith('/auth/signin');
                expect(mockRefresh).toHaveBeenCalled();
            });
        });
        it('should handle logout when no active session exists', async ()=>{
            // Arrange
            (0, _apihelpers.mockApiResponse)({
                'POST /api/auth/signout': {
                    status: 401,
                    data: {
                        error: 'No active session'
                    }
                }
            });
            const { user } = (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LogoutButton.default, {}));
            // Act - Click logout button
            const logoutButton = _react.screen.getByRole('button', {
                name: /sign out/i
            });
            await user.click(logoutButton);
            // Assert - Verify redirect still occurs (client-side logout)
            await (0, _react.waitFor)(()=>{
                expect(mockPush).toHaveBeenCalledWith('/auth/signin');
                expect(mockRefresh).toHaveBeenCalled();
            });
        });
        it('should handle logout server errors gracefully', async ()=>{
            // Arrange
            (0, _apihelpers.mockApiError)('/api/auth/signout', 500, {
                error: 'Internal server error'
            }, 'POST');
            const { user } = (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LogoutButton.default, {}));
            // Act - Click logout button
            const logoutButton = _react.screen.getByRole('button', {
                name: /sign out/i
            });
            await user.click(logoutButton);
            // Assert - Verify redirect occurs even on server error (fail-safe logout)
            await (0, _react.waitFor)(()=>{
                expect(mockPush).toHaveBeenCalledWith('/auth/signin');
                expect(mockRefresh).toHaveBeenCalled();
            });
        });
        it('should show loading state during logout process', async ()=>{
            // Arrange
            let resolveLogout;
            const logoutPromise = new Promise((resolve)=>{
                resolveLogout = resolve;
            });
            global.fetch = jest.fn(()=>logoutPromise);
            const { user } = (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LogoutButton.default, {}));
            // Act - Click logout button
            const logoutButton = _react.screen.getByRole('button', {
                name: /sign out/i
            });
            await user.click(logoutButton);
            // Assert - Verify loading state is shown
            expect(_react.screen.getByText('Signing out...')).toBeInTheDocument();
            expect(logoutButton).toHaveClass('btn--loading');
            // Complete the logout
            resolveLogout({
                ok: true,
                status: 200,
                json: ()=>Promise.resolve({
                        success: true
                    })
            });
            // Assert - Verify loading state is cleared
            await (0, _react.waitFor)(()=>{
                expect(_react.screen.queryByText('Signing out...')).not.toBeInTheDocument();
            });
        });
    });
    describe('End-to-End Authentication Flow', ()=>{
        it('should complete full authentication cycle: signup -> login -> logout', async ()=>{
            const testUser = (0, _userfactory.createTestUser)({
                name: 'Jane Doe',
                email: 'jane@example.com'
            });
            // Step 1: Signup
            (0, _apihelpers.mockApiResponse)({
                'POST /api/auth/signup': {
                    status: 200,
                    data: {
                        success: true,
                        user: {
                            id: testUser.id,
                            email: testUser.email,
                            name: testUser.name
                        }
                    }
                }
            });
            const { user: userEvent, rerender } = (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_SignUpForm.default, {}));
            // Complete signup
            await _testutils.userInteractions.fillForm({
                'Full Name': 'Jane Doe',
                'Email Address': 'jane@example.com',
                'Password': 'SecurePass123!'
            }, userEvent);
            await _testutils.userInteractions.submitForm(userEvent, 'Create Account');
            await (0, _react.waitFor)(()=>{
                expect(mockPush).toHaveBeenCalledWith('/dashboard');
            });
            // Reset mocks for next step
            jest.clearAllMocks();
            mockPush.mockClear();
            // Step 2: Login (simulate returning user)
            (0, _apihelpers.mockApiResponse)({
                'POST /api/auth/signin': {
                    status: 200,
                    data: {
                        success: true,
                        user: {
                            id: testUser.id,
                            email: testUser.email,
                            name: testUser.name
                        }
                    }
                }
            });
            rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(_SignInForm.default, {}));
            // Complete login
            await _testutils.userInteractions.fillForm({
                'Email Address': 'jane@example.com',
                'Password': 'SecurePass123!'
            }, userEvent);
            await _testutils.userInteractions.submitForm(userEvent, 'Sign In');
            await (0, _react.waitFor)(()=>{
                expect(mockPush).toHaveBeenCalledWith('/dashboard');
            });
            // Reset mocks for logout
            jest.clearAllMocks();
            mockPush.mockClear();
            // Step 3: Logout
            (0, _apihelpers.mockApiResponse)({
                'POST /api/auth/signout': {
                    status: 200,
                    data: {
                        success: true,
                        message: 'Signed out successfully'
                    }
                }
            });
            rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LogoutButton.default, {}));
            // Complete logout
            const logoutButton = _react.screen.getByRole('button', {
                name: /sign out/i
            });
            await userEvent.click(logoutButton);
            await (0, _react.waitFor)(()=>{
                expect(mockPush).toHaveBeenCalledWith('/auth/signin');
            });
        });
        it('should maintain form state during validation errors', async ()=>{
            // Arrange
            (0, _apihelpers.mockApiResponse)({
                'POST /api/auth/signin': {
                    status: 400,
                    data: {
                        error: 'Validation failed',
                        errors: {
                            password: 'Password is required'
                        }
                    }
                }
            });
            const { user } = (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_SignInForm.default, {}));
            // Act - Fill form partially and submit
            await _testutils.userInteractions.fillForm({
                'Email Address': 'jane@example.com'
            }, user);
            await _testutils.userInteractions.submitForm(user, 'Sign In');
            // Assert - Verify form maintains email value after error
            await (0, _react.waitFor)(()=>{
                expect(_react.screen.getByDisplayValue('jane@example.com')).toBeInTheDocument();
                expect(_react.screen.getByText('Password is required')).toBeInTheDocument();
            });
        });
    });
});

//# sourceMappingURL=data:application/json;base64,