1c2a5a2c56535ef6f657653a322e2616
// User test data factory
// Simple random string generator for tests (avoiding oslo dependency issues)
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get createAuthenticatedTestUser () {
        return createAuthenticatedTestUser;
    },
    get createTestCurator () {
        return createTestCurator;
    },
    get createTestEmailVerificationCode () {
        return createTestEmailVerificationCode;
    },
    get createTestSession () {
        return createTestSession;
    },
    get createTestUnverifiedUser () {
        return createTestUnverifiedUser;
    },
    get createTestUser () {
        return createTestUser;
    },
    get createTestUserWithPassword () {
        return createTestUserWithPassword;
    },
    get createTestUsers () {
        return createTestUsers;
    },
    get hashTestPassword () {
        return hashTestPassword;
    },
    get resetUserCounter () {
        return resetUserCounter;
    }
});
const _bcryptjs = /*#__PURE__*/ _interop_require_default(require("bcryptjs"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const generateRandomString = (length, alphabet = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ')=>{
    let result = '';
    for(let i = 0; i < length; i++){
        result += alphabet.charAt(Math.floor(Math.random() * alphabet.length));
    }
    return result;
};
// Counter for unique test data
let userCounter = 0;
const createTestUser = (overrides = {})=>{
    userCounter++;
    const baseUser = {
        id: userCounter,
        email: `testuser${userCounter}@example.com`,
        name: `Test User ${userCounter}`,
        hashedPassword: '$2a$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LewdBPj/RQ/dQ5YQm',
        isCurator: false,
        isEmailVerified: true,
        createdAt: new Date(),
        updatedAt: new Date()
    };
    return {
        ...baseUser,
        ...overrides
    };
};
const createTestCurator = (overrides = {})=>{
    return createTestUser({
        isCurator: true,
        name: `Test Curator ${userCounter + 1}`,
        ...overrides
    });
};
const createTestUnverifiedUser = (overrides = {})=>{
    return createTestUser({
        isEmailVerified: false,
        name: `Test Unverified User ${userCounter + 1}`,
        ...overrides
    });
};
const createTestUsers = (count = 3, baseOverrides = {})=>{
    return Array.from({
        length: count
    }, (_, index)=>createTestUser({
            ...baseOverrides,
            name: `Test User ${userCounter + index + 1}`
        }));
};
const createTestSession = (user, overrides = {})=>{
    const sessionId = generateRandomString(40, '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ');
    const expiresAt = new Date(Date.now() + 1000 * 60 * 60 * 24 * 30); // 30 days
    return {
        id: sessionId,
        userId: user.id,
        expiresAt,
        ...overrides
    };
};
const createAuthenticatedTestUser = (userOverrides = {}, sessionOverrides = {})=>{
    const user = createTestUser(userOverrides);
    const session = createTestSession(user, sessionOverrides);
    return {
        user,
        session
    };
};
const createTestEmailVerificationCode = (user, overrides = {})=>{
    return {
        id: Math.floor(Math.random() * 10000),
        userId: user.id,
        code: generateRandomString(6, '0123456789'),
        expiresAt: new Date(Date.now() + 1000 * 60 * 15),
        createdAt: new Date(),
        attemptsUsed: 0,
        ...overrides
    };
};
const hashTestPassword = (password)=>{
    return _bcryptjs.default.hashSync(password, 12);
};
const createTestUserWithPassword = (password, overrides = {})=>{
    return createTestUser({
        hashedPassword: hashTestPassword(password),
        ...overrides
    });
};
const resetUserCounter = ()=>{
    userCounter = 0;
};

//# sourceMappingURL=data:application/json;base64,