2f9f56b1f950db2d4db9f1a574328568
"use strict";

/* istanbul ignore next */
function cov_472ehenzb() {
  var path = "/Users/stefanbekker/projects/fancy-planties/src/app/api/dashboard/route.ts";
  var hash = "cf53d2f9ce6bb0a5c693e0e1a2bee18f025a2487";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/stefanbekker/projects/fancy-planties/src/app/api/dashboard/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 19
        }
      },
      "3": {
        start: {
          line: 11,
          column: 16
        },
        end: {
          line: 11,
          column: 38
        }
      },
      "4": {
        start: {
          line: 12,
          column: 17
        },
        end: {
          line: 12,
          column: 52
        }
      },
      "5": {
        start: {
          line: 13,
          column: 12
        },
        end: {
          line: 13,
          column: 38
        }
      },
      "6": {
        start: {
          line: 14,
          column: 16
        },
        end: {
          line: 14,
          column: 49
        }
      },
      "7": {
        start: {
          line: 15,
          column: 20
        },
        end: {
          line: 15,
          column: 42
        }
      },
      "8": {
        start: {
          line: 17,
          column: 4
        },
        end: {
          line: 85,
          column: 5
        }
      },
      "9": {
        start: {
          line: 18,
          column: 25
        },
        end: {
          line: 18,
          column: 62
        }
      },
      "10": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 25,
          column: 9
        }
      },
      "11": {
        start: {
          line: 20,
          column: 12
        },
        end: {
          line: 24,
          column: 15
        }
      },
      "12": {
        start: {
          line: 26,
          column: 23
        },
        end: {
          line: 26,
          column: 30
        }
      },
      "13": {
        start: {
          line: 27,
          column: 22
        },
        end: {
          line: 27,
          column: 32
        }
      },
      "14": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 40
        }
      },
      "15": {
        start: {
          line: 30,
          column: 29
        },
        end: {
          line: 34,
          column: 105
        }
      },
      "16": {
        start: {
          line: 36,
          column: 35
        },
        end: {
          line: 40,
          column: 101
        }
      },
      "17": {
        start: {
          line: 42,
          column: 43
        },
        end: {
          line: 47,
          column: 12
        }
      },
      "18": {
        start: {
          line: 48,
          column: 31
        },
        end: {
          line: 48,
          column: 72
        }
      },
      "19": {
        start: {
          line: 49,
          column: 32
        },
        end: {
          line: 49,
          column: 77
        }
      },
      "20": {
        start: {
          line: 50,
          column: 39
        },
        end: {
          line: 50,
          column: 114
        }
      },
      "21": {
        start: {
          line: 52,
          column: 36
        },
        end: {
          line: 56,
          column: 187
        }
      },
      "22": {
        start: {
          line: 58,
          column: 34
        },
        end: {
          line: 58,
          column: 44
        }
      },
      "23": {
        start: {
          line: 59,
          column: 8
        },
        end: {
          line: 59,
          column: 68
        }
      },
      "24": {
        start: {
          line: 60,
          column: 33
        },
        end: {
          line: 66,
          column: 15
        }
      },
      "25": {
        start: {
          line: 60,
          column: 69
        },
        end: {
          line: 60,
          column: 132
        }
      },
      "26": {
        start: {
          line: 60,
          column: 148
        },
        end: {
          line: 66,
          column: 13
        }
      },
      "27": {
        start: {
          line: 67,
          column: 31
        },
        end: {
          line: 76,
          column: 9
        }
      },
      "28": {
        start: {
          line: 77,
          column: 8
        },
        end: {
          line: 77,
          column: 57
        }
      },
      "29": {
        start: {
          line: 79,
          column: 8
        },
        end: {
          line: 79,
          column: 63
        }
      },
      "30": {
        start: {
          line: 80,
          column: 8
        },
        end: {
          line: 84,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "GET",
        decl: {
          start: {
            line: 16,
            column: 15
          },
          end: {
            line: 16,
            column: 18
          }
        },
        loc: {
          start: {
            line: 16,
            column: 28
          },
          end: {
            line: 86,
            column: 1
          }
        },
        line: 16
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 60,
            column: 60
          },
          end: {
            line: 60,
            column: 61
          }
        },
        loc: {
          start: {
            line: 60,
            column: 69
          },
          end: {
            line: 60,
            column: 132
          }
        },
        line: 60
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 60,
            column: 138
          },
          end: {
            line: 60,
            column: 139
          }
        },
        loc: {
          start: {
            line: 60,
            column: 148
          },
          end: {
            line: 66,
            column: 13
          }
        },
        line: 60
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 19,
            column: 8
          },
          end: {
            line: 25,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 19,
            column: 8
          },
          end: {
            line: 25,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 19
      },
      "1": {
        loc: {
          start: {
            line: 48,
            column: 31
          },
          end: {
            line: 48,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 48,
            column: 31
          },
          end: {
            line: 48,
            column: 67
          }
        }, {
          start: {
            line: 48,
            column: 71
          },
          end: {
            line: 48,
            column: 72
          }
        }],
        line: 48
      },
      "2": {
        loc: {
          start: {
            line: 49,
            column: 32
          },
          end: {
            line: 49,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 49,
            column: 32
          },
          end: {
            line: 49,
            column: 72
          }
        }, {
          start: {
            line: 49,
            column: 76
          },
          end: {
            line: 49,
            column: 77
          }
        }],
        line: 49
      },
      "3": {
        loc: {
          start: {
            line: 50,
            column: 39
          },
          end: {
            line: 50,
            column: 114
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 50,
            column: 60
          },
          end: {
            line: 50,
            column: 110
          }
        }, {
          start: {
            line: 50,
            column: 113
          },
          end: {
            line: 50,
            column: 114
          }
        }],
        line: 50
      },
      "4": {
        loc: {
          start: {
            line: 60,
            column: 69
          },
          end: {
            line: 60,
            column: 132
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 60,
            column: 69
          },
          end: {
            line: 60,
            column: 88
          }
        }, {
          start: {
            line: 60,
            column: 92
          },
          end: {
            line: 60,
            column: 132
          }
        }],
        line: 60
      },
      "5": {
        loc: {
          start: {
            line: 68,
            column: 25
          },
          end: {
            line: 68,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 68,
            column: 25
          },
          end: {
            line: 68,
            column: 48
          }
        }, {
          start: {
            line: 68,
            column: 52
          },
          end: {
            line: 68,
            column: 53
          }
        }],
        line: 68
      },
      "6": {
        loc: {
          start: {
            line: 69,
            column: 26
          },
          end: {
            line: 69,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 69,
            column: 26
          },
          end: {
            line: 69,
            column: 50
          }
        }, {
          start: {
            line: 69,
            column: 54
          },
          end: {
            line: 69,
            column: 55
          }
        }],
        line: 69
      },
      "7": {
        loc: {
          start: {
            line: 70,
            column: 26
          },
          end: {
            line: 70,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 70,
            column: 26
          },
          end: {
            line: 70,
            column: 50
          }
        }, {
          start: {
            line: 70,
            column: 54
          },
          end: {
            line: 70,
            column: 55
          }
        }],
        line: 70
      },
      "8": {
        loc: {
          start: {
            line: 71,
            column: 31
          },
          end: {
            line: 71,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 71,
            column: 31
          },
          end: {
            line: 71,
            column: 66
          }
        }, {
          start: {
            line: 71,
            column: 70
          },
          end: {
            line: 71,
            column: 71
          }
        }],
        line: 71
      },
      "9": {
        loc: {
          start: {
            line: 72,
            column: 32
          },
          end: {
            line: 72,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 72,
            column: 32
          },
          end: {
            line: 72,
            column: 68
          }
        }, {
          start: {
            line: 72,
            column: 72
          },
          end: {
            line: 72,
            column: 73
          }
        }],
        line: 72
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/stefanbekker/projects/fancy-planties/src/app/api/dashboard/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport { validateRequest } from '@/lib/auth/server';\nimport { db } from '@/lib/db';\nimport { plantInstances, propagations } from '@/lib/db/schema';\nimport { eq, and, sql, inArray } from 'drizzle-orm';\n\nexport interface FertilizerEvent {\n  id: string;\n  plantName: string;\n  plantId: string;\n  date: string;\n  type: 'fertilize';\n}\n\nexport interface DashboardStats {\n  totalPlants: number;\n  activePlants: number;\n  careDueToday: number;\n  totalPropagations: number;\n  activePropagations: number;\n  successfulPropagations: number;\n  propagationSuccessRate: number;\n  fertilizerEvents: FertilizerEvent[];\n}\n\n// GET /api/dashboard - Get dashboard statistics\nexport async function GET(request: NextRequest) {\n  try {\n    const { user } = await validateRequest();\n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const userId = user.id;\n    const today = new Date();\n    today.setHours(23, 59, 59, 999); // End of today\n\n    // Get plant statistics\n    const [plantStats] = await db\n      .select({\n        totalPlants: sql<number>`count(*)`,\n        activePlants: sql<number>`count(*) filter (where ${plantInstances.isActive} = true)`,\n        careDueToday: sql<number>`count(*) filter (where ${plantInstances.isActive} = true and ${plantInstances.fertilizerDue} <= ${today.toISOString()})`\n      })\n      .from(plantInstances)\n      .where(eq(plantInstances.userId, userId));\n\n    // Get propagation statistics\n    const [propagationStats] = await db\n      .select({\n        totalPropagations: sql<number>`count(*)`,\n        activePropagations: sql<number>`count(*) filter (where ${propagations.status} in ('started', 'rooting'))`,\n        successfulPropagations: sql<number>`count(*) filter (where ${propagations.status} in ('planted', 'established'))`\n      })\n      .from(propagations)\n      .where(eq(propagations.userId, userId));\n\n    // Calculate success rate\n    const totalCompletedPropagations = await db\n      .select({\n        count: sql<number>`count(*)`\n      })\n      .from(propagations)\n      .where(\n        and(\n          eq(propagations.userId, userId),\n          inArray(propagations.status, ['planted', 'established'])\n        )\n      );\n\n    const completedCount = totalCompletedPropagations[0]?.count || 0;\n    const successfulCount = propagationStats?.successfulPropagations || 0;\n    const propagationSuccessRate = completedCount > 0 ? Math.round((successfulCount / completedCount) * 100) : 0;\n\n    // Get fertilizer events from plant instances with due dates\n    const fertilizerEventData = await db\n      .select({\n        id: plantInstances.id,\n        nickname: plantInstances.nickname,\n        fertilizerDue: plantInstances.fertilizerDue\n      })\n      .from(plantInstances)\n      .where(\n        and(\n          eq(plantInstances.userId, userId),\n          eq(plantInstances.isActive, true)\n        )\n      );\n\n    // Convert to fertilizer events with proper date filtering (show events for next 30 days)\n    const thirtyDaysFromNow = new Date();\n    thirtyDaysFromNow.setDate(thirtyDaysFromNow.getDate() + 30);\n    \n    const fertilizerEvents: FertilizerEvent[] = fertilizerEventData\n      .filter(plant => plant.fertilizerDue && plant.fertilizerDue <= thirtyDaysFromNow)\n      .map(plant => ({\n        id: `fertilizer-${plant.id}`,\n        plantName: plant.nickname,\n        plantId: plant.id.toString(),\n        date: plant.fertilizerDue!.toISOString().split('T')[0], // Format as YYYY-MM-DD\n        type: 'fertilize' as const\n      }));\n\n    const dashboardStats: DashboardStats = {\n      totalPlants: plantStats?.totalPlants || 0,\n      activePlants: plantStats?.activePlants || 0,\n      careDueToday: plantStats?.careDueToday || 0,\n      totalPropagations: propagationStats?.totalPropagations || 0,\n      activePropagations: propagationStats?.activePropagations || 0,\n      successfulPropagations: successfulCount,\n      propagationSuccessRate,\n      fertilizerEvents\n    };\n    \n    return NextResponse.json(dashboardStats);\n  } catch (error) {\n    console.error('Failed to get dashboard stats:', error);\n    return NextResponse.json(\n      { error: 'Failed to get dashboard stats' },\n      { status: 500 }\n    );\n  }\n}"],
      names: ["GET", "request", "user", "validateRequest", "NextResponse", "json", "error", "status", "userId", "id", "today", "Date", "setHours", "plantStats", "db", "select", "totalPlants", "sql", "activePlants", "plantInstances", "isActive", "careDueToday", "fertilizerDue", "toISOString", "from", "where", "eq", "propagationStats", "totalPropagations", "activePropagations", "propagations", "successfulPropagations", "totalCompletedPropagations", "count", "and", "inArray", "completedCount", "successfulCount", "propagationSuccessRate", "Math", "round", "fertilizerEventData", "nickname", "thirtyDaysFromNow", "setDate", "getDate", "fertilizerEvents", "filter", "plant", "map", "plantName", "plantId", "toString", "date", "split", "type", "dashboardStats", "console"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "cf53d2f9ce6bb0a5c693e0e1a2bee18f025a2487"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_472ehenzb = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_472ehenzb();
cov_472ehenzb().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_472ehenzb().s[1]++;
Object.defineProperty(exports, "GET", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_472ehenzb().f[0]++;
    cov_472ehenzb().s[2]++;
    return GET;
  }
});
const _server =
/* istanbul ignore next */
(cov_472ehenzb().s[3]++, require("next/server"));
const _server1 =
/* istanbul ignore next */
(cov_472ehenzb().s[4]++, require("../../../lib/auth/server"));
const _db =
/* istanbul ignore next */
(cov_472ehenzb().s[5]++, require("../../../lib/db"));
const _schema =
/* istanbul ignore next */
(cov_472ehenzb().s[6]++, require("../../../lib/db/schema"));
const _drizzleorm =
/* istanbul ignore next */
(cov_472ehenzb().s[7]++, require("drizzle-orm"));
async function GET(request) {
  /* istanbul ignore next */
  cov_472ehenzb().f[1]++;
  cov_472ehenzb().s[8]++;
  try {
    const {
      user
    } =
    /* istanbul ignore next */
    (cov_472ehenzb().s[9]++, await (0, _server1.validateRequest)());
    /* istanbul ignore next */
    cov_472ehenzb().s[10]++;
    if (!user) {
      /* istanbul ignore next */
      cov_472ehenzb().b[0][0]++;
      cov_472ehenzb().s[11]++;
      return _server.NextResponse.json({
        error: 'Unauthorized'
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_472ehenzb().b[0][1]++;
    }
    const userId =
    /* istanbul ignore next */
    (cov_472ehenzb().s[12]++, user.id);
    const today =
    /* istanbul ignore next */
    (cov_472ehenzb().s[13]++, new Date());
    /* istanbul ignore next */
    cov_472ehenzb().s[14]++;
    today.setHours(23, 59, 59, 999); // End of today
    // Get plant statistics
    const [plantStats] =
    /* istanbul ignore next */
    (cov_472ehenzb().s[15]++, await _db.db.select({
      totalPlants: (0, _drizzleorm.sql)`count(*)`,
      activePlants: (0, _drizzleorm.sql)`count(*) filter (where ${_schema.plantInstances.isActive} = true)`,
      careDueToday: (0, _drizzleorm.sql)`count(*) filter (where ${_schema.plantInstances.isActive} = true and ${_schema.plantInstances.fertilizerDue} <= ${today.toISOString()})`
    }).from(_schema.plantInstances).where((0, _drizzleorm.eq)(_schema.plantInstances.userId, userId)));
    // Get propagation statistics
    const [propagationStats] =
    /* istanbul ignore next */
    (cov_472ehenzb().s[16]++, await _db.db.select({
      totalPropagations: (0, _drizzleorm.sql)`count(*)`,
      activePropagations: (0, _drizzleorm.sql)`count(*) filter (where ${_schema.propagations.status} in ('started', 'rooting'))`,
      successfulPropagations: (0, _drizzleorm.sql)`count(*) filter (where ${_schema.propagations.status} in ('planted', 'established'))`
    }).from(_schema.propagations).where((0, _drizzleorm.eq)(_schema.propagations.userId, userId)));
    // Calculate success rate
    const totalCompletedPropagations =
    /* istanbul ignore next */
    (cov_472ehenzb().s[17]++, await _db.db.select({
      count: (0, _drizzleorm.sql)`count(*)`
    }).from(_schema.propagations).where((0, _drizzleorm.and)((0, _drizzleorm.eq)(_schema.propagations.userId, userId), (0, _drizzleorm.inArray)(_schema.propagations.status, ['planted', 'established']))));
    const completedCount =
    /* istanbul ignore next */
    (cov_472ehenzb().s[18]++,
    /* istanbul ignore next */
    (cov_472ehenzb().b[1][0]++, totalCompletedPropagations[0]?.count) ||
    /* istanbul ignore next */
    (cov_472ehenzb().b[1][1]++, 0));
    const successfulCount =
    /* istanbul ignore next */
    (cov_472ehenzb().s[19]++,
    /* istanbul ignore next */
    (cov_472ehenzb().b[2][0]++, propagationStats?.successfulPropagations) ||
    /* istanbul ignore next */
    (cov_472ehenzb().b[2][1]++, 0));
    const propagationSuccessRate =
    /* istanbul ignore next */
    (cov_472ehenzb().s[20]++, completedCount > 0 ?
    /* istanbul ignore next */
    (cov_472ehenzb().b[3][0]++, Math.round(successfulCount / completedCount * 100)) :
    /* istanbul ignore next */
    (cov_472ehenzb().b[3][1]++, 0));
    // Get fertilizer events from plant instances with due dates
    const fertilizerEventData =
    /* istanbul ignore next */
    (cov_472ehenzb().s[21]++, await _db.db.select({
      id: _schema.plantInstances.id,
      nickname: _schema.plantInstances.nickname,
      fertilizerDue: _schema.plantInstances.fertilizerDue
    }).from(_schema.plantInstances).where((0, _drizzleorm.and)((0, _drizzleorm.eq)(_schema.plantInstances.userId, userId), (0, _drizzleorm.eq)(_schema.plantInstances.isActive, true))));
    // Convert to fertilizer events with proper date filtering (show events for next 30 days)
    const thirtyDaysFromNow =
    /* istanbul ignore next */
    (cov_472ehenzb().s[22]++, new Date());
    /* istanbul ignore next */
    cov_472ehenzb().s[23]++;
    thirtyDaysFromNow.setDate(thirtyDaysFromNow.getDate() + 30);
    const fertilizerEvents =
    /* istanbul ignore next */
    (cov_472ehenzb().s[24]++, fertilizerEventData.filter(plant => {
      /* istanbul ignore next */
      cov_472ehenzb().f[2]++;
      cov_472ehenzb().s[25]++;
      return /* istanbul ignore next */(cov_472ehenzb().b[4][0]++, plant.fertilizerDue) &&
      /* istanbul ignore next */
      (cov_472ehenzb().b[4][1]++, plant.fertilizerDue <= thirtyDaysFromNow);
    }).map(plant => {
      /* istanbul ignore next */
      cov_472ehenzb().f[3]++;
      cov_472ehenzb().s[26]++;
      return {
        id: `fertilizer-${plant.id}`,
        plantName: plant.nickname,
        plantId: plant.id.toString(),
        date: plant.fertilizerDue.toISOString().split('T')[0],
        type: 'fertilize'
      };
    }));
    const dashboardStats =
    /* istanbul ignore next */
    (cov_472ehenzb().s[27]++, {
      totalPlants:
      /* istanbul ignore next */
      (cov_472ehenzb().b[5][0]++, plantStats?.totalPlants) ||
      /* istanbul ignore next */
      (cov_472ehenzb().b[5][1]++, 0),
      activePlants:
      /* istanbul ignore next */
      (cov_472ehenzb().b[6][0]++, plantStats?.activePlants) ||
      /* istanbul ignore next */
      (cov_472ehenzb().b[6][1]++, 0),
      careDueToday:
      /* istanbul ignore next */
      (cov_472ehenzb().b[7][0]++, plantStats?.careDueToday) ||
      /* istanbul ignore next */
      (cov_472ehenzb().b[7][1]++, 0),
      totalPropagations:
      /* istanbul ignore next */
      (cov_472ehenzb().b[8][0]++, propagationStats?.totalPropagations) ||
      /* istanbul ignore next */
      (cov_472ehenzb().b[8][1]++, 0),
      activePropagations:
      /* istanbul ignore next */
      (cov_472ehenzb().b[9][0]++, propagationStats?.activePropagations) ||
      /* istanbul ignore next */
      (cov_472ehenzb().b[9][1]++, 0),
      successfulPropagations: successfulCount,
      propagationSuccessRate,
      fertilizerEvents
    });
    /* istanbul ignore next */
    cov_472ehenzb().s[28]++;
    return _server.NextResponse.json(dashboardStats);
  } catch (error) {
    /* istanbul ignore next */
    cov_472ehenzb().s[29]++;
    console.error('Failed to get dashboard stats:', error);
    /* istanbul ignore next */
    cov_472ehenzb().s[30]++;
    return _server.NextResponse.json({
      error: 'Failed to get dashboard stats'
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,