d23f97456983ccf855e4f45e3e727eee
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get MigrationUtils () {
        return _migrations.MigrationUtils;
    },
    get and () {
        return _drizzleorm.and;
    },
    get asc () {
        return _drizzleorm.asc;
    },
    get checkDatabaseConnection () {
        return checkDatabaseConnection;
    },
    get clearUserContext () {
        return clearUserContext;
    },
    get closeDatabaseConnection () {
        return closeDatabaseConnection;
    },
    get db () {
        return db;
    },
    get desc () {
        return _drizzleorm.desc;
    },
    get eq () {
        return _drizzleorm.eq;
    },
    get setUserContext () {
        return setUserContext;
    },
    get sql () {
        return _drizzleorm.sql;
    },
    get withTransaction () {
        return withTransaction;
    }
});
require("server-only");
const _postgresjs = require("drizzle-orm/postgres-js");
const _postgres = /*#__PURE__*/ _interop_require_default(require("postgres"));
const _drizzleorm = require("drizzle-orm");
const _schema = /*#__PURE__*/ _interop_require_wildcard(_export_star(require("./schema"), exports));
const _migrations = require("./migrations");
function _export_star(from, to) {
    Object.keys(from).forEach(function(k) {
        if (k !== "default" && !Object.prototype.hasOwnProperty.call(to, k)) {
            Object.defineProperty(to, k, {
                enumerable: true,
                get: function() {
                    return from[k];
                }
            });
        }
    });
    return from;
}
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const connectionString = process.env.DATABASE_URL || 'postgresql://postgres:postgres@localhost:5433/fancy_planties';
// Connection configuration with pooling
const client = (0, _postgres.default)(connectionString, {
    prepare: false,
    max: 10,
    idle_timeout: 20,
    connect_timeout: 10,
    onnotice: process.env.NODE_ENV === 'development' ? console.log : undefined
});
const db = (0, _postgresjs.drizzle)(client, {
    schema: _schema,
    logger: process.env.NODE_ENV === 'development'
});
async function checkDatabaseConnection() {
    try {
        await db.execute((0, _drizzleorm.sql)`SELECT 1`);
        return true;
    } catch (error) {
        console.error('Database connection failed:', error);
        return false;
    }
}
async function setUserContext(userId) {
    try {
        await db.execute((0, _drizzleorm.sql)`SELECT set_current_user_id(${userId})`);
    } catch (error) {
        console.error('Failed to set user context:', error);
        throw new Error('Failed to set user context');
    }
}
async function clearUserContext() {
    try {
        await db.execute((0, _drizzleorm.sql)`SELECT set_config('app.current_user_id', '', true)`);
    } catch (error) {
        console.error('Failed to clear user context:', error);
    }
}
async function withTransaction(// eslint-disable-next-line @typescript-eslint/no-explicit-any
callback) {
    try {
        return await db.transaction(callback);
    } catch (error) {
        console.error('Transaction failed:', error);
        throw error;
    }
}
async function closeDatabaseConnection() {
    try {
        await client.end();
        console.log('Database connection closed gracefully');
    } catch (error) {
        console.error('Error closing database connection:', error);
    }
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9zdGVmYW5iZWtrZXIvcHJvamVjdHMvZmFuY3ktcGxhbnRpZXMvc3JjL2xpYi9kYi9pbmRleC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJ3NlcnZlci1vbmx5JztcblxuaW1wb3J0IHsgZHJpenpsZSB9IGZyb20gJ2RyaXp6bGUtb3JtL3Bvc3RncmVzLWpzJztcbmltcG9ydCBwb3N0Z3JlcyBmcm9tICdwb3N0Z3Jlcyc7XG5pbXBvcnQgeyBlcSwgYW5kLCBkZXNjLCBhc2MsIHNxbCB9IGZyb20gJ2RyaXp6bGUtb3JtJztcbmltcG9ydCAqIGFzIHNjaGVtYSBmcm9tICcuL3NjaGVtYSc7XG5cbmNvbnN0IGNvbm5lY3Rpb25TdHJpbmcgPSBwcm9jZXNzLmVudi5EQVRBQkFTRV9VUkwgfHwgJ3Bvc3RncmVzcWw6Ly9wb3N0Z3Jlczpwb3N0Z3Jlc0Bsb2NhbGhvc3Q6NTQzMy9mYW5jeV9wbGFudGllcyc7XG5cbi8vIENvbm5lY3Rpb24gY29uZmlndXJhdGlvbiB3aXRoIHBvb2xpbmdcbmNvbnN0IGNsaWVudCA9IHBvc3RncmVzKGNvbm5lY3Rpb25TdHJpbmcsIHtcbiAgcHJlcGFyZTogZmFsc2UsXG4gIG1heDogMTAsIC8vIE1heGltdW0gbnVtYmVyIG9mIGNvbm5lY3Rpb25zIGluIHRoZSBwb29sXG4gIGlkbGVfdGltZW91dDogMjAsIC8vIENsb3NlIGlkbGUgY29ubmVjdGlvbnMgYWZ0ZXIgMjAgc2Vjb25kc1xuICBjb25uZWN0X3RpbWVvdXQ6IDEwLCAvLyBDb25uZWN0aW9uIHRpbWVvdXQgaW4gc2Vjb25kc1xuICBvbm5vdGljZTogcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcgPyBjb25zb2xlLmxvZyA6IHVuZGVmaW5lZCxcbn0pO1xuXG5leHBvcnQgY29uc3QgZGIgPSBkcml6emxlKGNsaWVudCwgeyBcbiAgc2NoZW1hLFxuICBsb2dnZXI6IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnXG59KTtcblxuLy8gRGF0YWJhc2UgY29ubmVjdGlvbiBoZWFsdGggY2hlY2tcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjaGVja0RhdGFiYXNlQ29ubmVjdGlvbigpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgdHJ5IHtcbiAgICBhd2FpdCBkYi5leGVjdXRlKHNxbGBTRUxFQ1QgMWApO1xuICAgIHJldHVybiB0cnVlO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0RhdGFiYXNlIGNvbm5lY3Rpb24gZmFpbGVkOicsIGVycm9yKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuLy8gU2V0IHVzZXIgY29udGV4dCBmb3IgUkxTIChSb3cgTGV2ZWwgU2VjdXJpdHkpXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2V0VXNlckNvbnRleHQodXNlcklkOiBudW1iZXIpIHtcbiAgdHJ5IHtcbiAgICBhd2FpdCBkYi5leGVjdXRlKHNxbGBTRUxFQ1Qgc2V0X2N1cnJlbnRfdXNlcl9pZCgke3VzZXJJZH0pYCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIHNldCB1c2VyIGNvbnRleHQ6JywgZXJyb3IpO1xuICAgIHRocm93IG5ldyBFcnJvcignRmFpbGVkIHRvIHNldCB1c2VyIGNvbnRleHQnKTtcbiAgfVxufVxuXG4vLyBDbGVhciB1c2VyIGNvbnRleHRcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjbGVhclVzZXJDb250ZXh0KCkge1xuICB0cnkge1xuICAgIGF3YWl0IGRiLmV4ZWN1dGUoc3FsYFNFTEVDVCBzZXRfY29uZmlnKCdhcHAuY3VycmVudF91c2VyX2lkJywgJycsIHRydWUpYCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIGNsZWFyIHVzZXIgY29udGV4dDonLCBlcnJvcik7XG4gIH1cbn1cblxuLy8gRGF0YWJhc2UgdHJhbnNhY3Rpb24gd3JhcHBlciB3aXRoIGVycm9yIGhhbmRsaW5nXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gd2l0aFRyYW5zYWN0aW9uPFQ+KFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICBjYWxsYmFjazogKHR4OiBhbnkpID0+IFByb21pc2U8VD5cbik6IFByb21pc2U8VD4ge1xuICB0cnkge1xuICAgIHJldHVybiBhd2FpdCBkYi50cmFuc2FjdGlvbihjYWxsYmFjayk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignVHJhbnNhY3Rpb24gZmFpbGVkOicsIGVycm9yKTtcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxufVxuXG4vLyBHcmFjZWZ1bCBkYXRhYmFzZSBzaHV0ZG93blxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNsb3NlRGF0YWJhc2VDb25uZWN0aW9uKCkge1xuICB0cnkge1xuICAgIGF3YWl0IGNsaWVudC5lbmQoKTtcbiAgICBjb25zb2xlLmxvZygnRGF0YWJhc2UgY29ubmVjdGlvbiBjbG9zZWQgZ3JhY2VmdWxseScpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGNsb3NpbmcgZGF0YWJhc2UgY29ubmVjdGlvbjonLCBlcnJvcik7XG4gIH1cbn1cblxuLy8gRXhwb3J0IGFsbCBzY2hlbWEgYW5kIHV0aWxpdGllc1xuZXhwb3J0ICogZnJvbSAnLi9zY2hlbWEnO1xuZXhwb3J0IHsgZXEsIGFuZCwgZGVzYywgYXNjLCBzcWwgfTtcbmV4cG9ydCB7IE1pZ3JhdGlvblV0aWxzIH0gZnJvbSAnLi9taWdyYXRpb25zJzsiXSwibmFtZXMiOlsiTWlncmF0aW9uVXRpbHMiLCJhbmQiLCJhc2MiLCJjaGVja0RhdGFiYXNlQ29ubmVjdGlvbiIsImNsZWFyVXNlckNvbnRleHQiLCJjbG9zZURhdGFiYXNlQ29ubmVjdGlvbiIsImRiIiwiZGVzYyIsImVxIiwic2V0VXNlckNvbnRleHQiLCJzcWwiLCJ3aXRoVHJhbnNhY3Rpb24iLCJjb25uZWN0aW9uU3RyaW5nIiwicHJvY2VzcyIsImVudiIsIkRBVEFCQVNFX1VSTCIsImNsaWVudCIsInBvc3RncmVzIiwicHJlcGFyZSIsIm1heCIsImlkbGVfdGltZW91dCIsImNvbm5lY3RfdGltZW91dCIsIm9ubm90aWNlIiwiTk9ERV9FTlYiLCJjb25zb2xlIiwibG9nIiwidW5kZWZpbmVkIiwiZHJpenpsZSIsInNjaGVtYSIsImxvZ2dlciIsImV4ZWN1dGUiLCJlcnJvciIsInVzZXJJZCIsIkVycm9yIiwiY2FsbGJhY2siLCJ0cmFuc2FjdGlvbiIsImVuZCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7UUErRVNBO2VBQUFBLDBCQUFjOztRQURWQztlQUFBQSxlQUFHOztRQUFRQztlQUFBQSxlQUFHOztRQXRETEM7ZUFBQUE7O1FBcUJBQztlQUFBQTs7UUFzQkFDO2VBQUFBOztRQWpEVEM7ZUFBQUE7O1FBNERLQztlQUFBQSxnQkFBSTs7UUFBYkM7ZUFBQUEsY0FBRTs7UUEzQ1dDO2VBQUFBOztRQTJDT0M7ZUFBQUEsZUFBRzs7UUF4QlZDO2VBQUFBOzs7UUF0RGY7NEJBRWlCO2lFQUNIOzRCQUNtQjs2RUFDaEI7NEJBMEVPOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF4RS9CLE1BQU1DLG1CQUFtQkMsUUFBUUMsR0FBRyxDQUFDQyxZQUFZLElBQUk7QUFFckQsd0NBQXdDO0FBQ3hDLE1BQU1DLFNBQVNDLElBQUFBLGlCQUFRLEVBQUNMLGtCQUFrQjtJQUN4Q00sU0FBUztJQUNUQyxLQUFLO0lBQ0xDLGNBQWM7SUFDZEMsaUJBQWlCO0lBQ2pCQyxVQUFVVCxRQUFRQyxHQUFHLENBQUNTLFFBQVEsS0FBSyxnQkFBZ0JDLFFBQVFDLEdBQUcsR0FBR0M7QUFDbkU7QUFFTyxNQUFNcEIsS0FBS3FCLElBQUFBLG1CQUFPLEVBQUNYLFFBQVE7SUFDaENZLFFBQUFBO0lBQ0FDLFFBQVFoQixRQUFRQyxHQUFHLENBQUNTLFFBQVEsS0FBSztBQUNuQztBQUdPLGVBQWVwQjtJQUNwQixJQUFJO1FBQ0YsTUFBTUcsR0FBR3dCLE9BQU8sQ0FBQ3BCLElBQUFBLGVBQUcsQ0FBQSxDQUFDLFFBQVEsQ0FBQztRQUM5QixPQUFPO0lBQ1QsRUFBRSxPQUFPcUIsT0FBTztRQUNkUCxRQUFRTyxLQUFLLENBQUMsK0JBQStCQTtRQUM3QyxPQUFPO0lBQ1Q7QUFDRjtBQUdPLGVBQWV0QixlQUFldUIsTUFBYztJQUNqRCxJQUFJO1FBQ0YsTUFBTTFCLEdBQUd3QixPQUFPLENBQUNwQixJQUFBQSxlQUFHLENBQUEsQ0FBQywyQkFBMkIsRUFBRXNCLE9BQU8sQ0FBQyxDQUFDO0lBQzdELEVBQUUsT0FBT0QsT0FBTztRQUNkUCxRQUFRTyxLQUFLLENBQUMsK0JBQStCQTtRQUM3QyxNQUFNLElBQUlFLE1BQU07SUFDbEI7QUFDRjtBQUdPLGVBQWU3QjtJQUNwQixJQUFJO1FBQ0YsTUFBTUUsR0FBR3dCLE9BQU8sQ0FBQ3BCLElBQUFBLGVBQUcsQ0FBQSxDQUFDLGtEQUFrRCxDQUFDO0lBQzFFLEVBQUUsT0FBT3FCLE9BQU87UUFDZFAsUUFBUU8sS0FBSyxDQUFDLGlDQUFpQ0E7SUFDakQ7QUFDRjtBQUdPLGVBQWVwQixnQkFDcEIsOERBQThEO0FBQzlEdUIsUUFBaUM7SUFFakMsSUFBSTtRQUNGLE9BQU8sTUFBTTVCLEdBQUc2QixXQUFXLENBQUNEO0lBQzlCLEVBQUUsT0FBT0gsT0FBTztRQUNkUCxRQUFRTyxLQUFLLENBQUMsdUJBQXVCQTtRQUNyQyxNQUFNQTtJQUNSO0FBQ0Y7QUFHTyxlQUFlMUI7SUFDcEIsSUFBSTtRQUNGLE1BQU1XLE9BQU9vQixHQUFHO1FBQ2hCWixRQUFRQyxHQUFHLENBQUM7SUFDZCxFQUFFLE9BQU9NLE9BQU87UUFDZFAsUUFBUU8sS0FBSyxDQUFDLHNDQUFzQ0E7SUFDdEQ7QUFDRiJ9