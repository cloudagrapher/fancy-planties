{"version":3,"names":["createSession","cov_1kcfy4c2nf","f","s","createUser","getUserByEmail","getUserById","hashPassword","invalidateSession","invalidateUserSessions","signIn","signOut","signUp","verifyPassword","exports","password","saltRounds","_bcryptjs","default","hash","compare","userId","sessionId","_crypto","generateRandomString","expiresAt","Date","now","session","_db","db","insert","_schema","sessions","values","id","returning","_lucia","lucia","toString","email","name","hashedPassword","user","users","toLowerCase","select","from","where","_drizzleorm","eq","b","validPassword","luciaSession","existingUser","Error"],"sources":["/Users/stefanbekker/projects/fancy-planties/src/lib/auth/index.ts"],"sourcesContent":["import 'server-only';\n\nimport bcrypt from 'bcryptjs';\nimport { generateRandomString } from 'oslo/crypto';\nimport { db } from '../db';\nimport { users, sessions, type User as DatabaseUser, type Session as DatabaseSession } from '../db/schema';\nimport { eq } from 'drizzle-orm';\nimport { lucia } from './lucia';\n\n// Export types for use throughout the application\nexport type User = DatabaseUser;\nexport type Session = DatabaseSession;\n\n// Password hashing utilities\nexport async function hashPassword(password: string): Promise<string> {\n  const saltRounds = 12;\n  return await bcrypt.hash(password, saltRounds);\n}\n\nexport async function verifyPassword(password: string, hash: string): Promise<boolean> {\n  return await bcrypt.compare(password, hash);\n}\n\n// Session management utilities\nexport async function createSession(userId: number): Promise<Session> {\n  const sessionId = generateRandomString(40, '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ');\n  const expiresAt = new Date(Date.now() + 1000 * 60 * 60 * 24 * 30); // 30 days\n  \n  const [session] = await db.insert(sessions).values({\n    id: sessionId,\n    userId,\n    expiresAt,\n  }).returning();\n  \n  return session;\n}\n\nexport async function invalidateSession(sessionId: string): Promise<void> {\n  await lucia.invalidateSession(sessionId);\n}\n\nexport async function invalidateUserSessions(userId: number): Promise<void> {\n  await lucia.invalidateUserSessions(userId.toString());\n}\n\n\n// User management utilities\nexport async function createUser(email: string, password: string, name: string): Promise<User> {\n  const hashedPassword = await hashPassword(password);\n  \n  const [user] = await db.insert(users).values({\n    email: email.toLowerCase(),\n    hashedPassword,\n    name,\n  }).returning();\n  \n  return user;\n}\n\nexport async function getUserByEmail(email: string): Promise<User | null> {\n  const [user] = await db.select().from(users).where(eq(users.email, email.toLowerCase()));\n  return user || null;\n}\n\nexport async function getUserById(id: number): Promise<User | null> {\n  const [user] = await db.select().from(users).where(eq(users.id, id));\n  return user || null;\n}\n\n// Authentication flow helpers\nexport async function signIn(email: string, password: string): Promise<{ user: User; session: Session } | null> {\n  const user = await getUserByEmail(email);\n  \n  if (!user) {\n    return null;\n  }\n  \n  const validPassword = await verifyPassword(password, user.hashedPassword);\n  \n  if (!validPassword) {\n    return null;\n  }\n  \n  const luciaSession = await lucia.createSession(user.id.toString(), {});\n  \n  const session: Session = {\n    id: luciaSession.id,\n    userId: user.id,\n    expiresAt: luciaSession.expiresAt,\n  };\n  \n  return {\n    user,\n    session,\n  };\n}\n\nexport async function signUp(email: string, password: string, name: string): Promise<{ user: User; session: Session }> {\n  // Check if user already exists\n  const existingUser = await getUserByEmail(email);\n  \n  if (existingUser) {\n    throw new Error('User already exists');\n  }\n  \n  // Create new user\n  const user = await createUser(email, password, name);\n  \n  // Create session\n  const luciaSession = await lucia.createSession(user.id.toString(), {});\n  \n  const session: Session = {\n    id: luciaSession.id,\n    userId: user.id,\n    expiresAt: luciaSession.expiresAt,\n  };\n  \n  return {\n    user,\n    session,\n  };\n}\n\nexport async function signOut(sessionId: string): Promise<void> {\n  await lucia.invalidateSession(sessionId);\n}\n\n// Re-export utilities from other auth modules  \nexport * from './validation';\nexport * from './middleware';\nexport * from './session';"],"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","ignoreList":[]}