{"version":3,"names":["cov_1h8ui8svcg","actualCoverage","s","getSessionActivities","f","logSessionActivity","exports","sessionActivities","activity","push","timestamp","Date","sessionActivitiesForSession","filter","a","sessionId","length","b","toRemove","slice","forEach","index","indexOf","splice"],"sources":["/Users/stefanbekker/projects/fancy-planties/src/lib/auth/session.ts"],"sourcesContent":["// Re-export client-safe utilities\nexport * from './client';\n\n// In-memory session activity storage (for demonstration)\n// In production, this would be in a database\nconst sessionActivities: SessionActivity[] = [];\n\nexport function logSessionActivity(activity: Omit<SessionActivity, 'timestamp'>) {\n  sessionActivities.push({\n    ...activity,\n    timestamp: new Date(),\n  });\n  \n  // Keep only last 100 activities per session (in memory)\n  const sessionActivitiesForSession = sessionActivities.filter(\n    a => a.sessionId === activity.sessionId\n  );\n  \n  if (sessionActivitiesForSession.length > 100) {\n    const toRemove = sessionActivitiesForSession.slice(0, -100);\n    toRemove.forEach(activity => {\n      const index = sessionActivities.indexOf(activity);\n      if (index > -1) {\n        sessionActivities.splice(index, 1);\n      }\n    });\n  }\n}\n\nexport function getSessionActivities(sessionId: string): SessionActivity[] {\n  return sessionActivities.filter(a => a.sessionId === sessionId);\n}\n\n// Import SessionActivity type from client\nimport type { SessionActivity } from './client';"],"mappingsgB;IAAAA,cAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,cAAA;AAAAA,cAAA,GAAAE,CAAA;;;;;;;;;;;;;;;;;;;;MAsBAC,qBAAA;IAAA;IAAAH,cAAA,GAAAI,CAAA;IAAAJ,cAAA,GAAAE,CAAA;WAAAC,oBAAA;;MAtBAE,mBAAA;IAAA;IAAAL,cAAA,GAAAI,CAAA;IAAAJ,cAAA,GAAAE,CAAA;WAAAG,kBAAA;;;;;qBANF,aAAAC,OAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEd;AACA;AACA,MAAMC,iBAAA;AAAA;AAAA,CAAAP,cAAA,GAAAE,CAAA,QAAuC,EAAE;AAExC,SAASG,mBAAmBG,QAA4C;EAAA;EAAAR,cAAA,GAAAI,CAAA;EAAAJ,cAAA,GAAAE,CAAA;EAC7EK,iBAAA,CAAkBE,IAAI,CAAC;IACrB,GAAGD,QAAQ;IACXE,SAAA,EAAW,IAAIC,IAAA;EACjB;EAEA;EACA,MAAMC,2BAAA;EAAA;EAAA,CAAAZ,cAAA,GAAAE,CAAA,QAA8BK,iBAAA,CAAkBM,MAAM,CAC1DC,CAAA,IAAK;IAAA;IAAAd,cAAA,GAAAI,CAAA;IAAAJ,cAAA,GAAAE,CAAA;IAAA,OAAAY,CAAA,CAAEC,SAAS,KAAKP,QAAA,CAASO,SAAS;EAAT,CAAS;EAAA;EAAAf,cAAA,GAAAE,CAAA;EAGzC,IAAIU,2BAAA,CAA4BI,MAAM,GAAG,KAAK;IAAA;IAAAhB,cAAA,GAAAiB,CAAA;IAC5C,MAAMC,QAAA;IAAA;IAAA,CAAAlB,cAAA,GAAAE,CAAA,QAAWU,2BAAA,CAA4BO,KAAK,CAAC,GAAG,CAAC;IAAA;IAAAnB,cAAA,GAAAE,CAAA;IACvDgB,QAAA,CAASE,OAAO,CAACZ,QAAA;MAAA;MAAAR,cAAA,GAAAI,CAAA;MACf,MAAMiB,KAAA;MAAA;MAAA,CAAArB,cAAA,GAAAE,CAAA,QAAQK,iBAAA,CAAkBe,OAAO,CAACd,QAAA;MAAA;MAAAR,cAAA,GAAAE,CAAA;MACxC,IAAImB,KAAA,GAAQ,CAAC,GAAG;QAAA;QAAArB,cAAA,GAAAiB,CAAA;QAAAjB,cAAA,GAAAE,CAAA;QACdK,iBAAA,CAAkBgB,MAAM,CAACF,KAAA,EAAO;MAClC;MAAA;MAAA;QAAArB,cAAA,GAAAiB,CAAA;MAAA;IACF;EACF;EAAA;EAAA;IAAAjB,cAAA,GAAAiB,CAAA;EAAA;AACF;AAEO,SAASd,qBAAqBY,SAAiB;EAAA;EAAAf,cAAA,GAAAI,CAAA;EAAAJ,cAAA,GAAAE,CAAA;EACpD,OAAOK,iBAAA,CAAkBM,MAAM,CAACC,CAAA,IAAK;IAAA;IAAAd,cAAA,GAAAI,CAAA;IAAAJ,cAAA,GAAAE,CAAA;IAAA,OAAAY,CAAA,CAAEC,SAAS,KAAKA,SAAA;EAAA;AACvD","ignoreList":[]}