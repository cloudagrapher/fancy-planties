9078281038152c737c2ac22dbc14c92c
// Global test setup - only essential browser API mocks and Next.js integration
"use strict";
// Essential Next.js mocks - moved to test-utils for better organization
jest.mock('next/navigation', ()=>require('./src/test-utils/mocks/nextjs-mocks').navigationMock);
jest.mock('next/image', ()=>require('./src/test-utils/mocks/nextjs-mocks').imageMock);
jest.mock('next/server', ()=>require('./src/test-utils/mocks/nextjs-mocks').serverMock);
jest.mock('next/headers', ()=>require('./src/test-utils/mocks/nextjs-mocks').headersMock);
Object.defineProperty(exports, "__esModule", {
    value: true
});
require("@testing-library/jest-dom");
// Essential Node.js polyfills for Jest environment
global.setImmediate = global.setImmediate || ((fn, ...args)=>setTimeout(fn, 0, ...args));
global.clearImmediate = global.clearImmediate || ((id)=>clearTimeout(id));
// Process environment setup
if (typeof global.process === 'undefined') {
    global.process = {
        env: {
            NODE_ENV: 'test'
        },
        nextTick: (fn)=>setTimeout(fn, 0)
    };
}
// Set database URL for tests to use localhost instead of postgres hostname
process.env.DATABASE_URL = 'postgresql://postgres:postgres@localhost:5433/fancy_planties';
// Essential browser API mocks
require('./src/test-utils/setup/browser-mocks');
// Component mocks are now handled per-test basis, not globally
// Global test cleanup - minimal and focused
beforeEach(()=>{
    // Clear all mocks before each test
    jest.clearAllMocks();
    // Reset DOM
    if (typeof document !== 'undefined') {
        document.body.innerHTML = '';
    }
});
afterEach(()=>{
    // Clean up timers
    jest.clearAllTimers();
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9zdGVmYW5iZWtrZXIvcHJvamVjdHMvZmFuY3ktcGxhbnRpZXMvamVzdC5zZXR1cC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBHbG9iYWwgdGVzdCBzZXR1cCAtIG9ubHkgZXNzZW50aWFsIGJyb3dzZXIgQVBJIG1vY2tzIGFuZCBOZXh0LmpzIGludGVncmF0aW9uXG5pbXBvcnQgJ0B0ZXN0aW5nLWxpYnJhcnkvamVzdC1kb20nO1xuXG4vLyBFc3NlbnRpYWwgTm9kZS5qcyBwb2x5ZmlsbHMgZm9yIEplc3QgZW52aXJvbm1lbnRcbmdsb2JhbC5zZXRJbW1lZGlhdGUgPSBnbG9iYWwuc2V0SW1tZWRpYXRlIHx8ICgoZm4sIC4uLmFyZ3MpID0+IHNldFRpbWVvdXQoZm4sIDAsIC4uLmFyZ3MpKTtcbmdsb2JhbC5jbGVhckltbWVkaWF0ZSA9IGdsb2JhbC5jbGVhckltbWVkaWF0ZSB8fCAoKGlkKSA9PiBjbGVhclRpbWVvdXQoaWQpKTtcblxuLy8gUHJvY2VzcyBlbnZpcm9ubWVudCBzZXR1cFxuaWYgKHR5cGVvZiBnbG9iYWwucHJvY2VzcyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgZ2xvYmFsLnByb2Nlc3MgPSB7XG4gICAgZW52OiB7IE5PREVfRU5WOiAndGVzdCcgfSxcbiAgICBuZXh0VGljazogKGZuKSA9PiBzZXRUaW1lb3V0KGZuLCAwKSxcbiAgfTtcbn1cblxuLy8gU2V0IGRhdGFiYXNlIFVSTCBmb3IgdGVzdHMgdG8gdXNlIGxvY2FsaG9zdCBpbnN0ZWFkIG9mIHBvc3RncmVzIGhvc3RuYW1lXG5wcm9jZXNzLmVudi5EQVRBQkFTRV9VUkwgPSAncG9zdGdyZXNxbDovL3Bvc3RncmVzOnBvc3RncmVzQGxvY2FsaG9zdDo1NDMzL2ZhbmN5X3BsYW50aWVzJztcblxuLy8gRXNzZW50aWFsIE5leHQuanMgbW9ja3MgLSBtb3ZlZCB0byB0ZXN0LXV0aWxzIGZvciBiZXR0ZXIgb3JnYW5pemF0aW9uXG5qZXN0Lm1vY2soJ25leHQvbmF2aWdhdGlvbicsICgpID0+IHJlcXVpcmUoJy4vc3JjL3Rlc3QtdXRpbHMvbW9ja3MvbmV4dGpzLW1vY2tzJykubmF2aWdhdGlvbk1vY2spO1xuamVzdC5tb2NrKCduZXh0L2ltYWdlJywgKCkgPT4gcmVxdWlyZSgnLi9zcmMvdGVzdC11dGlscy9tb2Nrcy9uZXh0anMtbW9ja3MnKS5pbWFnZU1vY2spO1xuamVzdC5tb2NrKCduZXh0L3NlcnZlcicsICgpID0+IHJlcXVpcmUoJy4vc3JjL3Rlc3QtdXRpbHMvbW9ja3MvbmV4dGpzLW1vY2tzJykuc2VydmVyTW9jayk7XG5qZXN0Lm1vY2soJ25leHQvaGVhZGVycycsICgpID0+IHJlcXVpcmUoJy4vc3JjL3Rlc3QtdXRpbHMvbW9ja3MvbmV4dGpzLW1vY2tzJykuaGVhZGVyc01vY2spO1xuXG4vLyBFc3NlbnRpYWwgYnJvd3NlciBBUEkgbW9ja3NcbnJlcXVpcmUoJy4vc3JjL3Rlc3QtdXRpbHMvc2V0dXAvYnJvd3Nlci1tb2NrcycpO1xuXG4vLyBDb21wb25lbnQgbW9ja3MgYXJlIG5vdyBoYW5kbGVkIHBlci10ZXN0IGJhc2lzLCBub3QgZ2xvYmFsbHlcblxuLy8gR2xvYmFsIHRlc3QgY2xlYW51cCAtIG1pbmltYWwgYW5kIGZvY3VzZWRcbmJlZm9yZUVhY2goKCkgPT4ge1xuICAvLyBDbGVhciBhbGwgbW9ja3MgYmVmb3JlIGVhY2ggdGVzdFxuICBqZXN0LmNsZWFyQWxsTW9ja3MoKTtcbiAgXG4gIC8vIFJlc2V0IERPTVxuICBpZiAodHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJykge1xuICAgIGRvY3VtZW50LmJvZHkuaW5uZXJIVE1MID0gJyc7XG4gIH1cbn0pO1xuXG5hZnRlckVhY2goKCkgPT4ge1xuICAvLyBDbGVhbiB1cCB0aW1lcnNcbiAgamVzdC5jbGVhckFsbFRpbWVycygpO1xufSk7Il0sIm5hbWVzIjpbImplc3QiLCJtb2NrIiwicmVxdWlyZSIsIm5hdmlnYXRpb25Nb2NrIiwiaW1hZ2VNb2NrIiwic2VydmVyTW9jayIsImhlYWRlcnNNb2NrIiwiZ2xvYmFsIiwic2V0SW1tZWRpYXRlIiwiZm4iLCJhcmdzIiwic2V0VGltZW91dCIsImNsZWFySW1tZWRpYXRlIiwiaWQiLCJjbGVhclRpbWVvdXQiLCJwcm9jZXNzIiwiZW52IiwiTk9ERV9FTlYiLCJuZXh0VGljayIsIkRBVEFCQVNFX1VSTCIsImJlZm9yZUVhY2giLCJjbGVhckFsbE1vY2tzIiwiZG9jdW1lbnQiLCJib2R5IiwiaW5uZXJIVE1MIiwiYWZ0ZXJFYWNoIiwiY2xlYXJBbGxUaW1lcnMiXSwibWFwcGluZ3MiOiJBQUFBLCtFQUErRTs7QUFrQi9FLHdFQUF3RTtBQUN4RUEsS0FBS0MsSUFBSSxDQUFDLG1CQUFtQixJQUFNQyxRQUFRLHVDQUF1Q0MsY0FBYztBQUNoR0gsS0FBS0MsSUFBSSxDQUFDLGNBQWMsSUFBTUMsUUFBUSx1Q0FBdUNFLFNBQVM7QUFDdEZKLEtBQUtDLElBQUksQ0FBQyxlQUFlLElBQU1DLFFBQVEsdUNBQXVDRyxVQUFVO0FBQ3hGTCxLQUFLQyxJQUFJLENBQUMsZ0JBQWdCLElBQU1DLFFBQVEsdUNBQXVDSSxXQUFXOzs7O1FBckJuRjtBQUVQLG1EQUFtRDtBQUNuREMsT0FBT0MsWUFBWSxHQUFHRCxPQUFPQyxZQUFZLElBQUssQ0FBQSxDQUFDQyxJQUFJLEdBQUdDLE9BQVNDLFdBQVdGLElBQUksTUFBTUMsS0FBSTtBQUN4RkgsT0FBT0ssY0FBYyxHQUFHTCxPQUFPSyxjQUFjLElBQUssQ0FBQSxDQUFDQyxLQUFPQyxhQUFhRCxHQUFFO0FBRXpFLDRCQUE0QjtBQUM1QixJQUFJLE9BQU9OLE9BQU9RLE9BQU8sS0FBSyxhQUFhO0lBQ3pDUixPQUFPUSxPQUFPLEdBQUc7UUFDZkMsS0FBSztZQUFFQyxVQUFVO1FBQU87UUFDeEJDLFVBQVUsQ0FBQ1QsS0FBT0UsV0FBV0YsSUFBSTtJQUNuQztBQUNGO0FBRUEsMkVBQTJFO0FBQzNFTSxRQUFRQyxHQUFHLENBQUNHLFlBQVksR0FBRztBQVEzQiw4QkFBOEI7QUFDOUJqQixRQUFRO0FBRVIsK0RBQStEO0FBRS9ELDRDQUE0QztBQUM1Q2tCLFdBQVc7SUFDVCxtQ0FBbUM7SUFDbkNwQixLQUFLcUIsYUFBYTtJQUVsQixZQUFZO0lBQ1osSUFBSSxPQUFPQyxhQUFhLGFBQWE7UUFDbkNBLFNBQVNDLElBQUksQ0FBQ0MsU0FBUyxHQUFHO0lBQzVCO0FBQ0Y7QUFFQUMsVUFBVTtJQUNSLGtCQUFrQjtJQUNsQnpCLEtBQUswQixjQUFjO0FBQ3JCIn0=