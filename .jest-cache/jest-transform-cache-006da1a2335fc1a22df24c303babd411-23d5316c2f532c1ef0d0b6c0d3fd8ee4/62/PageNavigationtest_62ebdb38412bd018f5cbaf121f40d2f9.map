{"version":3,"sources":["/Users/stefanbekker/projects/fancy-planties/src/__tests__/components/navigation/PageNavigation.test.js"],"sourcesContent":["/**\n * @jest-environment jsdom\n */\n\nimport React from 'react';\nimport { screen, waitFor } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport { renderWithProviders } from '@/test-utils/helpers/render-helpers';\n\n// Mock Next.js navigation hooks\nconst mockPush = jest.fn();\nconst mockReplace = jest.fn();\nconst mockBack = jest.fn();\nconst mockForward = jest.fn();\nconst mockRefresh = jest.fn();\nconst mockPathname = jest.fn();\nconst mockSearchParams = jest.fn();\n\njest.mock('next/navigation', () => ({\n  useRouter: () => ({\n    push: mockPush,\n    replace: mockReplace,\n    back: mockBack,\n    forward: mockForward,\n    refresh: mockRefresh,\n  }),\n  usePathname: () => mockPathname(),\n  useSearchParams: () => ({\n    get: mockSearchParams,\n    toString: () => 'param1=value1&param2=value2',\n  }),\n}));\n\n// Test component that uses navigation\nconst NavigationTestComponent = () => {\n  const router = require('next/navigation').useRouter();\n  const pathname = require('next/navigation').usePathname();\n  const searchParams = require('next/navigation').useSearchParams();\n\n  return (\n    <div data-testid=\"navigation-test\">\n      <div data-testid=\"current-path\">{pathname}</div>\n      <div data-testid=\"search-params\">{searchParams.toString()}</div>\n      \n      <button onClick={() => router.push('/dashboard/plants')} data-testid=\"nav-to-plants\">\n        Go to Plants\n      </button>\n      <button onClick={() => router.replace('/dashboard/care')} data-testid=\"nav-replace-care\">\n        Replace with Care\n      </button>\n      <button onClick={() => router.back()} data-testid=\"nav-back\">\n        Go Back\n      </button>\n      <button onClick={() => router.forward()} data-testid=\"nav-forward\">\n        Go Forward\n      </button>\n      <button onClick={() => router.refresh()} data-testid=\"nav-refresh\">\n        Refresh\n      </button>\n      \n      <button \n        onClick={() => router.push(`/dashboard/plants?filter=${searchParams.get('filter') || 'all'}`)}\n        data-testid=\"nav-with-params\"\n      >\n        Navigate with Params\n      </button>\n    </div>\n  );\n};\n\ndescribe('Page Navigation', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    mockPathname.mockReturnValue('/dashboard');\n    mockSearchParams.mockReturnValue('all');\n  });\n\n  describe('Router Navigation Methods', () => {\n    it('navigates using router.push', async () => {\n      const user = userEvent.setup();\n      renderWithProviders(<NavigationTestComponent />);\n\n      await user.click(screen.getByTestId('nav-to-plants'));\n\n      expect(mockPush).toHaveBeenCalledWith('/dashboard/plants');\n    });\n\n    it('navigates using router.replace', async () => {\n      const user = userEvent.setup();\n      renderWithProviders(<NavigationTestComponent />);\n\n      await user.click(screen.getByTestId('nav-replace-care'));\n\n      expect(mockReplace).toHaveBeenCalledWith('/dashboard/care');\n    });\n\n    it('navigates back using router.back', async () => {\n      const user = userEvent.setup();\n      renderWithProviders(<NavigationTestComponent />);\n\n      await user.click(screen.getByTestId('nav-back'));\n\n      expect(mockBack).toHaveBeenCalled();\n    });\n\n    it('navigates forward using router.forward', async () => {\n      const user = userEvent.setup();\n      renderWithProviders(<NavigationTestComponent />);\n\n      await user.click(screen.getByTestId('nav-forward'));\n\n      expect(mockForward).toHaveBeenCalled();\n    });\n\n    it('refreshes page using router.refresh', async () => {\n      const user = userEvent.setup();\n      renderWithProviders(<NavigationTestComponent />);\n\n      await user.click(screen.getByTestId('nav-refresh'));\n\n      expect(mockRefresh).toHaveBeenCalled();\n    });\n  });\n\n  describe('URL Parameters and Query Strings', () => {\n    it('reads current pathname', () => {\n      mockPathname.mockReturnValue('/dashboard/plants');\n      renderWithProviders(<NavigationTestComponent />);\n\n      expect(screen.getByTestId('current-path')).toHaveTextContent('/dashboard/plants');\n    });\n\n    it('reads search parameters', () => {\n      renderWithProviders(<NavigationTestComponent />);\n\n      expect(screen.getByTestId('search-params')).toHaveTextContent('param1=value1&param2=value2');\n    });\n\n    it('navigates with query parameters', async () => {\n      const user = userEvent.setup();\n      mockSearchParams.mockReturnValue('indoor');\n      renderWithProviders(<NavigationTestComponent />);\n\n      await user.click(screen.getByTestId('nav-with-params'));\n\n      expect(mockPush).toHaveBeenCalledWith('/dashboard/plants?filter=indoor');\n    });\n\n    it('handles missing query parameters gracefully', async () => {\n      const user = userEvent.setup();\n      mockSearchParams.mockReturnValue(null);\n      renderWithProviders(<NavigationTestComponent />);\n\n      await user.click(screen.getByTestId('nav-with-params'));\n\n      expect(mockPush).toHaveBeenCalledWith('/dashboard/plants?filter=all');\n    });\n  });\n\n  describe('Navigation State Management', () => {\n    it('updates pathname when navigation occurs', () => {\n      mockPathname.mockReturnValue('/dashboard');\n      const { rerender } = renderWithProviders(<NavigationTestComponent />);\n\n      expect(screen.getByTestId('current-path')).toHaveTextContent('/dashboard');\n\n      // Simulate navigation\n      mockPathname.mockReturnValue('/dashboard/plants');\n      rerender(<NavigationTestComponent />);\n\n      expect(screen.getByTestId('current-path')).toHaveTextContent('/dashboard/plants');\n    });\n\n    it('maintains navigation state consistency', () => {\n      mockPathname.mockReturnValue('/dashboard/care');\n      renderWithProviders(<NavigationTestComponent />);\n\n      // Multiple renders should maintain consistent state\n      expect(screen.getByTestId('current-path')).toHaveTextContent('/dashboard/care');\n    });\n\n    it('handles rapid navigation changes', async () => {\n      const user = userEvent.setup();\n      renderWithProviders(<NavigationTestComponent />);\n\n      // Rapid navigation calls\n      await user.click(screen.getByTestId('nav-to-plants'));\n      await user.click(screen.getByTestId('nav-replace-care'));\n      await user.click(screen.getByTestId('nav-back'));\n\n      expect(mockPush).toHaveBeenCalledWith('/dashboard/plants');\n      expect(mockReplace).toHaveBeenCalledWith('/dashboard/care');\n      expect(mockBack).toHaveBeenCalled();\n    });\n  });\n\n  describe('Route Protection Integration', () => {\n    const ProtectedNavigationComponent = () => {\n      const router = require('next/navigation').useRouter();\n      const [isAuthenticated, setIsAuthenticated] = React.useState(true);\n\n      const handleProtectedNavigation = (path) => {\n        if (isAuthenticated) {\n          router.push(path);\n        } else {\n          router.push('/auth/signin?redirect=' + encodeURIComponent(path));\n        }\n      };\n\n      return (\n        <div>\n          <button onClick={() => setIsAuthenticated(!isAuthenticated)} data-testid=\"toggle-auth\">\n            Toggle Auth: {isAuthenticated ? 'Authenticated' : 'Not Authenticated'}\n          </button>\n          <button \n            onClick={() => handleProtectedNavigation('/dashboard/admin')}\n            data-testid=\"nav-to-admin\"\n          >\n            Go to Admin\n          </button>\n        </div>\n      );\n    };\n\n    it('navigates to protected route when authenticated', async () => {\n      const user = userEvent.setup();\n      renderWithProviders(<ProtectedNavigationComponent />);\n\n      await user.click(screen.getByTestId('nav-to-admin'));\n\n      expect(mockPush).toHaveBeenCalledWith('/dashboard/admin');\n    });\n\n    it('redirects to sign-in when not authenticated', async () => {\n      const user = userEvent.setup();\n      renderWithProviders(<ProtectedNavigationComponent />);\n\n      // Toggle authentication off\n      await user.click(screen.getByTestId('toggle-auth'));\n      expect(screen.getByText(/not authenticated/i)).toBeInTheDocument();\n\n      // Try to navigate to protected route\n      await user.click(screen.getByTestId('nav-to-admin'));\n\n      expect(mockPush).toHaveBeenCalledWith('/auth/signin?redirect=%2Fdashboard%2Fadmin');\n    });\n  });\n\n  describe('Navigation Error Handling', () => {\n    const ErrorHandlingNavigationComponent = () => {\n      const router = require('next/navigation').useRouter();\n      const [error, setError] = React.useState(null);\n\n      const handleNavigationWithError = async (path) => {\n        try {\n          // Simulate navigation that might fail\n          if (path === '/invalid-route') {\n            throw new Error('Invalid route');\n          }\n          router.push(path);\n          setError(null);\n        } catch (err) {\n          setError(err.message);\n        }\n      };\n\n      return (\n        <div>\n          {error && <div data-testid=\"navigation-error\">{error}</div>}\n          <button \n            onClick={() => handleNavigationWithError('/dashboard/plants')}\n            data-testid=\"nav-valid\"\n          >\n            Valid Navigation\n          </button>\n          <button \n            onClick={() => handleNavigationWithError('/invalid-route')}\n            data-testid=\"nav-invalid\"\n          >\n            Invalid Navigation\n          </button>\n        </div>\n      );\n    };\n\n    it('handles successful navigation without errors', async () => {\n      const user = userEvent.setup();\n      renderWithProviders(<ErrorHandlingNavigationComponent />);\n\n      await user.click(screen.getByTestId('nav-valid'));\n\n      expect(mockPush).toHaveBeenCalledWith('/dashboard/plants');\n      expect(screen.queryByTestId('navigation-error')).not.toBeInTheDocument();\n    });\n\n    it('handles navigation errors gracefully', async () => {\n      const user = userEvent.setup();\n      renderWithProviders(<ErrorHandlingNavigationComponent />);\n\n      await user.click(screen.getByTestId('nav-invalid'));\n\n      expect(screen.getByTestId('navigation-error')).toHaveTextContent('Invalid route');\n      expect(mockPush).not.toHaveBeenCalledWith('/invalid-route');\n    });\n  });\n\n  describe('Breadcrumb Navigation', () => {\n    const BreadcrumbComponent = () => {\n      const pathname = require('next/navigation').usePathname();\n      const router = require('next/navigation').useRouter();\n\n      const pathSegments = pathname.split('/').filter(Boolean);\n      \n      const breadcrumbs = pathSegments.map((segment, index) => {\n        const path = '/' + pathSegments.slice(0, index + 1).join('/');\n        const label = segment.charAt(0).toUpperCase() + segment.slice(1);\n        \n        return { path, label, isLast: index === pathSegments.length - 1 };\n      });\n\n      return (\n        <nav data-testid=\"breadcrumb-nav\" aria-label=\"Breadcrumb\">\n          <ol className=\"breadcrumb-list\">\n            <li>\n              <button onClick={() => router.push('/')} data-testid=\"breadcrumb-home\">\n                Home\n              </button>\n            </li>\n            {breadcrumbs.map((crumb, index) => (\n              <li key={crumb.path}>\n                {crumb.isLast ? (\n                  <span data-testid={`breadcrumb-current-${index}`} aria-current=\"page\">\n                    {crumb.label}\n                  </span>\n                ) : (\n                  <button \n                    onClick={() => router.push(crumb.path)}\n                    data-testid={`breadcrumb-link-${index}`}\n                  >\n                    {crumb.label}\n                  </button>\n                )}\n              </li>\n            ))}\n          </ol>\n        </nav>\n      );\n    };\n\n    it('renders breadcrumb navigation correctly', () => {\n      mockPathname.mockReturnValue('/dashboard/plants/123');\n      renderWithProviders(<BreadcrumbComponent />);\n\n      expect(screen.getByTestId('breadcrumb-nav')).toBeInTheDocument();\n      expect(screen.getByTestId('breadcrumb-home')).toBeInTheDocument();\n      expect(screen.getByTestId('breadcrumb-link-0')).toHaveTextContent('Dashboard');\n      expect(screen.getByTestId('breadcrumb-link-1')).toHaveTextContent('Plants');\n      expect(screen.getByTestId('breadcrumb-current-2')).toHaveTextContent('123');\n    });\n\n    it('handles breadcrumb navigation clicks', async () => {\n      const user = userEvent.setup();\n      mockPathname.mockReturnValue('/dashboard/plants/123');\n      renderWithProviders(<BreadcrumbComponent />);\n\n      await user.click(screen.getByTestId('breadcrumb-home'));\n      expect(mockPush).toHaveBeenCalledWith('/');\n\n      await user.click(screen.getByTestId('breadcrumb-link-0'));\n      expect(mockPush).toHaveBeenCalledWith('/dashboard');\n\n      await user.click(screen.getByTestId('breadcrumb-link-1'));\n      expect(mockPush).toHaveBeenCalledWith('/dashboard/plants');\n    });\n\n    it('marks current page correctly in breadcrumbs', () => {\n      mockPathname.mockReturnValue('/dashboard/plants');\n      renderWithProviders(<BreadcrumbComponent />);\n\n      const currentPage = screen.getByTestId('breadcrumb-current-1');\n      expect(currentPage).toHaveAttribute('aria-current', 'page');\n      expect(currentPage).toHaveTextContent('Plants');\n    });\n\n    it('handles root path breadcrumbs', () => {\n      mockPathname.mockReturnValue('/');\n      renderWithProviders(<BreadcrumbComponent />);\n\n      expect(screen.getByTestId('breadcrumb-home')).toBeInTheDocument();\n      expect(screen.queryByTestId('breadcrumb-link-0')).not.toBeInTheDocument();\n    });\n  });\n\n  describe('Navigation Accessibility', () => {\n    const AccessibleNavigationComponent = () => {\n      const router = require('next/navigation').useRouter();\n      const [isNavigating, setIsNavigating] = React.useState(false);\n\n      const handleAccessibleNavigation = async (path, label) => {\n        setIsNavigating(true);\n        \n        // Announce navigation to screen readers\n        const announcement = `Navigating to ${label}`;\n        \n        // Simulate navigation delay\n        setTimeout(() => {\n          router.push(path);\n          setIsNavigating(false);\n        }, 100);\n\n        return announcement;\n      };\n\n      return (\n        <div>\n          <div \n            role=\"status\" \n            aria-live=\"polite\" \n            data-testid=\"navigation-status\"\n            className={isNavigating ? '' : 'sr-only'}\n          >\n            {isNavigating ? 'Navigating...' : ''}\n          </div>\n          \n          <nav role=\"navigation\" aria-label=\"Main navigation\">\n            <button \n              onClick={() => handleAccessibleNavigation('/dashboard/plants', 'Plants page')}\n              data-testid=\"accessible-nav-plants\"\n              aria-describedby=\"plants-description\"\n            >\n              Plants\n            </button>\n            <div id=\"plants-description\" className=\"sr-only\">\n              View and manage your plant collection\n            </div>\n            \n            <button \n              onClick={() => handleAccessibleNavigation('/dashboard/care', 'Care page')}\n              data-testid=\"accessible-nav-care\"\n              disabled={isNavigating}\n            >\n              Care\n            </button>\n          </nav>\n        </div>\n      );\n    };\n\n    it('provides navigation status for screen readers', async () => {\n      const user = userEvent.setup();\n      renderWithProviders(<AccessibleNavigationComponent />);\n\n      await user.click(screen.getByTestId('accessible-nav-plants'));\n\n      expect(screen.getByTestId('navigation-status')).toHaveTextContent('Navigating...');\n      \n      await waitFor(() => {\n        expect(mockPush).toHaveBeenCalledWith('/dashboard/plants');\n      });\n    });\n\n    it('has proper ARIA labels and roles', () => {\n      renderWithProviders(<AccessibleNavigationComponent />);\n\n      const nav = screen.getByRole('navigation');\n      expect(nav).toHaveAttribute('aria-label', 'Main navigation');\n\n      const status = screen.getByRole('status');\n      expect(status).toHaveAttribute('aria-live', 'polite');\n\n      const plantsButton = screen.getByTestId('accessible-nav-plants');\n      expect(plantsButton).toHaveAttribute('aria-describedby', 'plants-description');\n    });\n\n    it('disables navigation during transitions', async () => {\n      const user = userEvent.setup();\n      renderWithProviders(<AccessibleNavigationComponent />);\n\n      await user.click(screen.getByTestId('accessible-nav-plants'));\n\n      const careButton = screen.getByTestId('accessible-nav-care');\n      expect(careButton).toBeDisabled();\n    });\n  });\n});"],"names":["jest","mock","useRouter","push","mockPush","replace","mockReplace","back","mockBack","forward","mockForward","refresh","mockRefresh","usePathname","mockPathname","useSearchParams","get","mockSearchParams","toString","fn","NavigationTestComponent","router","require","pathname","searchParams","div","data-testid","button","onClick","describe","beforeEach","clearAllMocks","mockReturnValue","it","user","userEvent","setup","renderWithProviders","click","screen","getByTestId","expect","toHaveBeenCalledWith","toHaveBeenCalled","toHaveTextContent","rerender","ProtectedNavigationComponent","isAuthenticated","setIsAuthenticated","React","useState","handleProtectedNavigation","path","encodeURIComponent","getByText","toBeInTheDocument","ErrorHandlingNavigationComponent","error","setError","handleNavigationWithError","Error","err","message","queryByTestId","not","BreadcrumbComponent","pathSegments","split","filter","Boolean","breadcrumbs","map","segment","index","slice","join","label","charAt","toUpperCase","isLast","length","nav","aria-label","ol","className","li","crumb","span","aria-current","currentPage","toHaveAttribute","AccessibleNavigationComponent","isNavigating","setIsNavigating","handleAccessibleNavigation","announcement","setTimeout","role","aria-live","aria-describedby","id","disabled","waitFor","getByRole","status","plantsButton","careButton","toBeDisabled"],"mappings":"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"}