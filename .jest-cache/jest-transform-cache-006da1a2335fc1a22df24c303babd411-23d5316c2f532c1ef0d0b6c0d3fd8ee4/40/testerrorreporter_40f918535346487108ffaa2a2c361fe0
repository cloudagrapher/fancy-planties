5cffa58b0b42302a2e82f90bf906783c
/**
 * Test Error Reporter
 * 
 * Provides detailed error context collection and reporting for test failures.
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get debugTestState () {
        return debugTestState;
    },
    get performanceAssert () {
        return performanceAssert;
    },
    get setupErrorReporting () {
        return setupErrorReporting;
    },
    get testErrorReporter () {
        return testErrorReporter;
    },
    get withErrorReporting () {
        return withErrorReporting;
    },
    get withRetry () {
        return withRetry;
    }
});
/**
 * Enhanced error reporter with detailed context collection
 */ class TestErrorReporter {
    /**
   * Collect detailed error context when a test fails
   */ collectErrorContext(error, testName, testFile) {
        const context = {
            testName,
            testFile,
            errorMessage: error.message,
            errorStack: error.stack,
            timestamp: new Date(),
            environment: {
                nodeVersion: process.version,
                platform: process.platform,
                memoryUsage: process.memoryUsage()
            },
            testState: {
                assertions: this.getAssertionCount(),
                duration: this.getTestDuration(),
                retryCount: this.getRetryCount(testName)
            },
            componentState: this.componentStates.get(testName),
            apiCalls: this.getRecentApiCalls(),
            domSnapshot: this.captureDomSnapshot()
        };
        this.errorContexts.push(context);
        return context;
    }
    /**
   * Log API calls for debugging
   */ logApiCall(call) {
        this.apiCallLogs.push({
            ...call,
            timestamp: new Date()
        });
        // Keep only recent calls (last 50)
        if (this.apiCallLogs.length > 50) {
            this.apiCallLogs = this.apiCallLogs.slice(-50);
        }
    }
    /**
   * Store component state for debugging
   */ storeComponentState(testName, state) {
        this.componentStates.set(testName, JSON.parse(JSON.stringify(state)));
    }
    /**
   * Configure retry behavior for specific error patterns
   */ configureRetry(testPattern, config) {
        this.retryConfigs.set(testPattern, config);
    }
    /**
   * Generate detailed error report
   */ generateErrorReport(context) {
        const report = [
            '🚨 TEST FAILURE REPORT',
            '═'.repeat(80),
            `Test: ${context.testName}`,
            `File: ${context.testFile}`,
            `Time: ${context.timestamp.toISOString()}`,
            `Duration: ${context.testState.duration}ms`,
            `Retry Count: ${context.testState.retryCount}`,
            '',
            '📋 ERROR DETAILS',
            '─'.repeat(40),
            `Message: ${context.errorMessage}`,
            '',
            '🔍 STACK TRACE',
            '─'.repeat(40),
            context.errorStack || 'No stack trace available',
            '',
            '💻 ENVIRONMENT',
            '─'.repeat(40),
            `Node Version: ${context.environment.nodeVersion}`,
            `Platform: ${context.environment.platform}`,
            `Memory Usage: ${(context.environment.memoryUsage.heapUsed / 1024 / 1024).toFixed(2)}MB`,
            '',
            '🧪 TEST STATE',
            '─'.repeat(40),
            `Assertions Made: ${context.testState.assertions}`,
            `Test Duration: ${context.testState.duration}ms`,
            ''
        ];
        // Add component state if available
        if (context.componentState) {
            report.push('🎯 COMPONENT STATE', '─'.repeat(40), JSON.stringify(context.componentState, null, 2), '');
        }
        // Add API calls if available
        if (context.apiCalls && context.apiCalls.length > 0) {
            report.push('🌐 RECENT API CALLS', '─'.repeat(40));
            context.apiCalls.forEach((call, index)=>{
                report.push(`${index + 1}. ${call.method} ${call.url}`, `   Status: ${call.status || 'N/A'}`, `   Duration: ${call.duration}ms`, `   Time: ${call.timestamp.toISOString()}`, '');
            });
        }
        // Add DOM snapshot if available
        if (context.domSnapshot) {
            report.push('🖼️  DOM SNAPSHOT', '─'.repeat(40), context.domSnapshot, '');
        }
        report.push('═'.repeat(80));
        return report.join('\n');
    }
    /**
   * Save error report to file
   */ async saveErrorReport(context) {
        const report = this.generateErrorReport(context);
        const filename = `test-error-${context.testName.replace(/[^a-zA-Z0-9]/g, '-')}-${Date.now()}.log`;
        const filepath = `coverage/error-reports/${filename}`;
        try {
            // In a real implementation, would write to file system
            console.log(`💾 Error report saved to: ${filepath}`);
            console.log(report);
            return filepath;
        } catch (error) {
            console.error('Failed to save error report:', error);
            return '';
        }
    }
    /**
   * Get recent API calls for context
   */ getRecentApiCalls() {
        const fiveMinutesAgo = new Date(Date.now() - 5 * 60 * 1000);
        return this.apiCallLogs.filter((call)=>call.timestamp > fiveMinutesAgo);
    }
    /**
   * Capture DOM snapshot for debugging
   */ captureDomSnapshot() {
        try {
            // In browser environment, would capture actual DOM
            if (typeof document !== 'undefined') {
                return document.body.innerHTML;
            }
            return 'DOM not available (Node.js environment)';
        } catch (error) {
            return `Failed to capture DOM: ${error}`;
        }
    }
    /**
   * Get current assertion count
   */ getAssertionCount() {
        try {
            return expect.getState().assertionCalls || 0;
        } catch  {
            return 0;
        }
    }
    /**
   * Get test duration (mock implementation)
   */ getTestDuration() {
        // In real implementation, would track test start time
        return 0;
    }
    /**
   * Get retry count for a test
   */ getRetryCount(testName) {
        // In real implementation, would track retry attempts
        return 0;
    }
    /**
   * Clear all collected data
   */ reset() {
        this.errorContexts = [];
        this.apiCallLogs = [];
        this.componentStates.clear();
    }
    /**
   * Get all error contexts
   */ getErrorContexts() {
        return [
            ...this.errorContexts
        ];
    }
    constructor(){
        this.errorContexts = [];
        this.apiCallLogs = [];
        this.componentStates = new Map();
        this.retryConfigs = new Map();
    }
}
const testErrorReporter = new TestErrorReporter();
function withErrorReporting(testName, testFn) {
    return async ()=>{
        try {
            await testFn();
        } catch (error) {
            const context = testErrorReporter.collectErrorContext(error, testName, expect.getState().testPath || 'unknown');
            await testErrorReporter.saveErrorReport(context);
            throw error; // Re-throw to maintain test failure
        }
    };
}
function withRetry(operation, config = {
    maxRetries: 3,
    retryDelay: 1000,
    retryableErrors: [
        'timeout',
        'network',
        'ECONNRESET'
    ]
}) {
    return new Promise(async (resolve, reject)=>{
        let lastError;
        for(let attempt = 0; attempt <= config.maxRetries; attempt++){
            try {
                const result = await operation();
                resolve(result);
                return;
            } catch (error) {
                lastError = error;
                // Check if error is retryable
                const isRetryable = config.retryableErrors.some((pattern)=>lastError.message.toLowerCase().includes(pattern.toLowerCase()));
                if (!isRetryable || attempt === config.maxRetries) {
                    break;
                }
                console.log(`⚠️  Retry attempt ${attempt + 1}/${config.maxRetries} for: ${lastError.message}`);
                await new Promise((resolve)=>setTimeout(resolve, config.retryDelay));
            }
        }
        reject(lastError);
    });
}
function debugTestState(label, state) {
    console.log(`🐛 DEBUG [${label}]:`, JSON.stringify(state, null, 2));
}
function performanceAssert(assertion, maxDuration = 100, label = 'assertion') {
    const startTime = performance.now();
    const result = assertion();
    const duration = performance.now() - startTime;
    if (duration > maxDuration) {
        console.warn(`⚠️  Slow assertion detected: ${label} took ${duration.toFixed(2)}ms`);
    }
    return result;
}
function setupErrorReporting() {
    beforeEach(()=>{
        const testName = expect.getState().currentTestName || 'unknown';
        console.log(`🧪 Starting test: ${testName}`);
    });
    afterEach(()=>{
        // Log any uncaught errors or warnings
        const testName = expect.getState().currentTestName || 'unknown';
        console.log(`✅ Completed test: ${testName}`);
    });
    afterAll(()=>{
        testErrorReporter.reset();
    });
}

//# sourceMappingURL=data:application/json;base64,