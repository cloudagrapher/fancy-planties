{"version":3,"sources":["/Users/stefanbekker/projects/fancy-planties/src/test-utils/setup/__tests__/database-test-manager.test.js"],"sourcesContent":["/**\n * @jest-environment node\n */\n\nimport { describe, it, expect, beforeEach, afterEach, jest } from '@jest/globals';\n\ndescribe('DatabaseTestManager', () => {\n  let DatabaseTestManager;\n  let createDatabaseTestManager;\n  let globalDatabaseTestManager;\n  let mockDb;\n  let mockUsers;\n  let mockSessions;\n  let mockEmailVerificationCodes;\n  let mockEq;\n\n  beforeAll(async () => {\n    // Mock the database module\n    mockDb = {\n      insert: jest.fn(),\n      select: jest.fn(),\n      update: jest.fn(),\n      delete: jest.fn(),\n    };\n\n    // Mock the schema\n    mockUsers = { id: 'users.id', email: 'users.email' };\n    mockSessions = { id: 'sessions.id', userId: 'sessions.userId' };\n    mockEmailVerificationCodes = { id: 'emailVerificationCodes.id', userId: 'emailVerificationCodes.userId' };\n\n    // Mock drizzle-orm\n    mockEq = jest.fn((field, value) => ({ field, value, type: 'eq' }));\n\n    // Set up module mocks\n    jest.doMock('../../../lib/db', () => ({\n      db: mockDb\n    }));\n\n    jest.doMock('../../../lib/db/schema', () => ({\n      users: mockUsers,\n      sessions: mockSessions,\n      emailVerificationCodes: mockEmailVerificationCodes\n    }));\n\n    jest.doMock('drizzle-orm', () => ({\n      eq: mockEq\n    }));\n\n    // Import the module after mocking\n    const module = await import('../database-test-manager.js');\n    DatabaseTestManager = module.default;\n    createDatabaseTestManager = module.createDatabaseTestManager;\n    globalDatabaseTestManager = module.globalDatabaseTestManager;\n  });\n\n  let manager;\n\n  beforeEach(() => {\n    // Reset all mocks\n    jest.clearAllMocks();\n    mockEq.mockClear();\n    \n    // Create fresh manager instance\n    manager = new DatabaseTestManager();\n    \n    // Setup mock database responses with proper chaining\n    mockDb.insert.mockReturnValue({\n      values: jest.fn().mockReturnValue({\n        returning: jest.fn()\n      })\n    });\n    \n    mockDb.select.mockReturnValue({\n      from: jest.fn().mockReturnValue({\n        where: jest.fn(),\n        limit: jest.fn()\n      })\n    });\n    \n    mockDb.update.mockReturnValue({\n      set: jest.fn().mockReturnValue({\n        where: jest.fn().mockReturnValue({\n          returning: jest.fn()\n        })\n      })\n    });\n    \n    mockDb.delete.mockReturnValue({\n      where: jest.fn()\n    });\n  });\n\n  afterEach(async () => {\n    // Clean up any test data\n    if (manager) {\n      // Mock the cleanup to avoid actual database calls\n      manager.createdUsers = [];\n      manager.createdSessions = [];\n      manager.createdEmailCodes = [];\n    }\n  });\n\n  describe('Constructor', () => {\n    it('should initialize with empty tracking arrays', () => {\n      const newManager = new DatabaseTestManager();\n      \n      expect(newManager.createdUsers).toEqual([]);\n      expect(newManager.createdSessions).toEqual([]);\n      expect(newManager.createdEmailCodes).toEqual([]);\n    });\n  });\n\n  describe('createTestUser', () => {\n    it('should create a user and track the ID', async () => {\n      const userData = { email: 'test@example.com', name: 'Test User' };\n      const mockUser = { id: 1, ...userData };\n      \n      // Setup mock chain\n      const mockReturning = jest.fn().mockResolvedValue([mockUser]);\n      const mockValues = jest.fn().mockReturnValue({ returning: mockReturning });\n      mockDb.insert.mockReturnValue({ values: mockValues });\n      \n      const result = await manager.createTestUser(userData);\n      \n      expect(mockDb.insert).toHaveBeenCalledWith(mockUsers);\n      expect(mockValues).toHaveBeenCalledWith(userData);\n      expect(mockReturning).toHaveBeenCalled();\n      expect(result).toEqual(mockUser);\n      expect(manager.createdUsers).toContain(1);\n    });\n\n    it('should handle database errors gracefully', async () => {\n      const userData = { email: 'test@example.com', name: 'Test User' };\n      const mockError = new Error('Database connection failed');\n      \n      mockDb.insert.mockReturnValue({\n        values: jest.fn().mockReturnValue({\n          returning: jest.fn().mockRejectedValue(mockError)\n        })\n      });\n      \n      await expect(manager.createTestUser(userData)).rejects.toThrow('Database connection failed');\n      expect(manager.createdUsers).toEqual([]);\n    });\n  });\n\n  describe('createTestSession', () => {\n    it('should create a session and track the ID', async () => {\n      const sessionData = { userId: 1, expiresAt: new Date() };\n      const mockSession = { id: 'session-123', ...sessionData };\n      \n      const mockReturning = jest.fn().mockResolvedValue([mockSession]);\n      mockDb.insert.mockReturnValue({\n        values: jest.fn().mockReturnValue({ returning: mockReturning })\n      });\n      \n      const result = await manager.createTestSession(sessionData);\n      \n      expect(mockDb.insert).toHaveBeenCalledWith(mockSessions);\n      expect(result).toEqual(mockSession);\n      expect(manager.createdSessions).toContain('session-123');\n    });\n  });\n\n  describe('createTestEmailCode', () => {\n    it('should create an email verification code and track the ID', async () => {\n      const codeData = { userId: 1, code: '123456', expiresAt: new Date() };\n      const mockCode = { id: 1, ...codeData };\n      \n      const mockReturning = jest.fn().mockResolvedValue([mockCode]);\n      mockDb.insert.mockReturnValue({\n        values: jest.fn().mockReturnValue({ returning: mockReturning })\n      });\n      \n      const result = await manager.createTestEmailCode(codeData);\n      \n      expect(mockDb.insert).toHaveBeenCalledWith(mockEmailVerificationCodes);\n      expect(result).toEqual(mockCode);\n      expect(manager.createdEmailCodes).toContain(1);\n    });\n  });\n\n  describe('getUserById', () => {\n    it('should retrieve a user by ID', async () => {\n      const mockUser = { id: 1, email: 'test@example.com' };\n      \n      const mockWhere = jest.fn().mockResolvedValue([mockUser]);\n      mockDb.select.mockReturnValue({\n        from: jest.fn().mockReturnValue({\n          where: mockWhere\n        })\n      });\n      \n      const result = await manager.getUserById(1);\n      \n      expect(mockDb.select).toHaveBeenCalled();\n      expect(result).toEqual(mockUser);\n    });\n\n    it('should return null when user not found', async () => {\n      const mockWhere = jest.fn().mockResolvedValue([]);\n      mockDb.select.mockReturnValue({\n        from: jest.fn().mockReturnValue({\n          where: mockWhere\n        })\n      });\n      \n      const result = await manager.getUserById(999);\n      \n      expect(result).toBeNull();\n    });\n  });\n\n  describe('getUserByEmail', () => {\n    it('should retrieve a user by email', async () => {\n      const mockUser = { id: 1, email: 'test@example.com' };\n      \n      const mockWhere = jest.fn().mockResolvedValue([mockUser]);\n      mockDb.select.mockReturnValue({\n        from: jest.fn().mockReturnValue({\n          where: mockWhere\n        })\n      });\n      \n      const result = await manager.getUserByEmail('TEST@EXAMPLE.COM');\n      \n      expect(result).toEqual(mockUser);\n    });\n\n    it('should return null when user not found', async () => {\n      const mockWhere = jest.fn().mockResolvedValue([]);\n      mockDb.select.mockReturnValue({\n        from: jest.fn().mockReturnValue({\n          where: mockWhere\n        })\n      });\n      \n      const result = await manager.getUserByEmail('nonexistent@example.com');\n      \n      expect(result).toBeNull();\n    });\n  });\n\n  describe('updateUser', () => {\n    it('should update a user and return the updated record', async () => {\n      const updates = { email: 'newemail@example.com' };\n      const mockUpdatedUser = { id: 1, ...updates, updatedAt: expect.any(Date) };\n      \n      const mockReturning = jest.fn().mockResolvedValue([mockUpdatedUser]);\n      const mockWhere = jest.fn().mockReturnValue({ returning: mockReturning });\n      const mockSet = jest.fn().mockReturnValue({ where: mockWhere });\n      mockDb.update.mockReturnValue({ set: mockSet });\n      \n      const result = await manager.updateUser(1, updates);\n      \n      expect(mockDb.update).toHaveBeenCalledWith(mockUsers);\n      expect(mockSet).toHaveBeenCalledWith({\n        ...updates,\n        updatedAt: expect.any(Date)\n      });\n      expect(result).toEqual(mockUpdatedUser);\n    });\n  });\n\n  describe('deleteUser', () => {\n    it('should delete a user and remove from tracking', async () => {\n      // Add user to tracking first\n      manager.createdUsers.push(1);\n      \n      const mockWhere = jest.fn().mockResolvedValue();\n      mockDb.delete.mockReturnValue({ where: mockWhere });\n      \n      await manager.deleteUser(1);\n      \n      expect(mockDb.delete).toHaveBeenCalledWith(mockUsers);\n      expect(manager.createdUsers).not.toContain(1);\n    });\n  });\n\n  describe('deleteSession', () => {\n    it('should delete a session and remove from tracking', async () => {\n      // Add session to tracking first\n      manager.createdSessions.push('session-123');\n      \n      const mockWhere = jest.fn().mockResolvedValue();\n      mockDb.delete.mockReturnValue({ where: mockWhere });\n      \n      await manager.deleteSession('session-123');\n      \n      expect(mockDb.delete).toHaveBeenCalledWith(mockSessions);\n      expect(manager.createdSessions).not.toContain('session-123');\n    });\n  });\n\n  describe('deleteEmailCode', () => {\n    it('should delete an email code and remove from tracking', async () => {\n      // Add code to tracking first\n      manager.createdEmailCodes.push(1);\n      \n      const mockWhere = jest.fn().mockResolvedValue();\n      mockDb.delete.mockReturnValue({ where: mockWhere });\n      \n      await manager.deleteEmailCode(1);\n      \n      expect(mockDb.delete).toHaveBeenCalledWith(mockEmailVerificationCodes);\n      expect(manager.createdEmailCodes).not.toContain(1);\n    });\n  });\n\n  describe('cleanup', () => {\n    it('should reset tracking arrays when cleanup is called', async () => {\n      // Setup tracking data\n      manager.createdUsers = [1, 2];\n      manager.createdSessions = ['session-1', 'session-2'];\n      manager.createdEmailCodes = [1, 2];\n      \n      const mockWhere = jest.fn().mockResolvedValue();\n      mockDb.delete.mockReturnValue({ where: mockWhere });\n      \n      await manager.cleanup();\n      \n      // Verify arrays are reset\n      expect(manager.createdUsers).toEqual([]);\n      expect(manager.createdSessions).toEqual([]);\n      expect(manager.createdEmailCodes).toEqual([]);\n    });\n\n    it('should reset tracking arrays even if cleanup fails', async () => {\n      // Setup tracking data\n      manager.createdUsers = [1];\n      manager.createdSessions = ['session-1'];\n      manager.createdEmailCodes = [1];\n      \n      // Mock database error\n      mockDb.delete.mockReturnValue({\n        where: jest.fn().mockRejectedValue(new Error('Database error'))\n      });\n      \n      // Spy on console.error to verify error logging\n      const consoleSpy = jest.spyOn(console, 'error').mockImplementation();\n      \n      await manager.cleanup();\n      \n      // Verify arrays are reset despite error\n      expect(manager.createdUsers).toEqual([]);\n      expect(manager.createdSessions).toEqual([]);\n      expect(manager.createdEmailCodes).toEqual([]);\n      expect(consoleSpy).toHaveBeenCalledWith('Database cleanup error:', expect.any(Error));\n      \n      consoleSpy.mockRestore();\n    });\n  });\n\n  describe('isConnected', () => {\n    it('should return true when database connection works', async () => {\n      const mockLimit = jest.fn().mockResolvedValue([]);\n      mockDb.select.mockReturnValue({\n        from: jest.fn().mockReturnValue({\n          limit: mockLimit\n        })\n      });\n      \n      const result = await manager.isConnected();\n      \n      expect(mockDb.select).toHaveBeenCalled();\n      expect(mockLimit).toHaveBeenCalledWith(1);\n      expect(result).toBe(true);\n    });\n\n    it('should return false when database connection fails', async () => {\n      mockDb.select.mockReturnValue({\n        from: jest.fn().mockReturnValue({\n          limit: jest.fn().mockRejectedValue(new Error('Connection failed'))\n        })\n      });\n      \n      // Spy on console.error to verify error logging\n      const consoleSpy = jest.spyOn(console, 'error').mockImplementation();\n      \n      const result = await manager.isConnected();\n      \n      expect(result).toBe(false);\n      expect(consoleSpy).toHaveBeenCalledWith('Database connection test failed:', expect.any(Error));\n      \n      consoleSpy.mockRestore();\n    });\n  });\n\n  describe('Factory Functions', () => {\n    describe('createDatabaseTestManager', () => {\n      it('should create a new DatabaseTestManager instance', () => {\n        const manager1 = createDatabaseTestManager();\n        const manager2 = createDatabaseTestManager();\n        \n        expect(manager1).toBeInstanceOf(DatabaseTestManager);\n        expect(manager2).toBeInstanceOf(DatabaseTestManager);\n        expect(manager1).not.toBe(manager2); // Different instances\n      });\n    });\n\n    describe('globalDatabaseTestManager', () => {\n      it('should provide a singleton instance', () => {\n        expect(globalDatabaseTestManager).toBeInstanceOf(DatabaseTestManager);\n      });\n    });\n  });\n\n  describe('Tracking Functionality', () => {\n    it('should properly track multiple operations', async () => {\n      const userData1 = { email: 'test1@example.com', name: 'Test User 1' };\n      const userData2 = { email: 'test2@example.com', name: 'Test User 2' };\n      const mockUser1 = { id: 1, ...userData1 };\n      const mockUser2 = { id: 2, ...userData2 };\n      \n      // Mock user creation\n      let callCount = 0;\n      const mockReturning = jest.fn().mockImplementation(() => {\n        callCount++;\n        return Promise.resolve(callCount === 1 ? [mockUser1] : [mockUser2]);\n      });\n      \n      mockDb.insert.mockReturnValue({\n        values: jest.fn().mockReturnValue({ returning: mockReturning })\n      });\n      \n      // Create users\n      await manager.createTestUser(userData1);\n      await manager.createTestUser(userData2);\n      \n      expect(manager.createdUsers).toEqual(expect.arrayContaining([1, 2]));\n      expect(manager.createdUsers).toHaveLength(2);\n    });\n\n    it('should handle session management for user', async () => {\n      const sessionData1 = { userId: 1, expiresAt: new Date() };\n      const sessionData2 = { userId: 1, expiresAt: new Date() };\n      const mockSession1 = { id: 'session-1', ...sessionData1 };\n      const mockSession2 = { id: 'session-2', ...sessionData2 };\n      \n      // Mock session creation\n      let callCount = 0;\n      const mockReturning = jest.fn().mockImplementation(() => {\n        callCount++;\n        return Promise.resolve(callCount === 1 ? [mockSession1] : [mockSession2]);\n      });\n      \n      mockDb.insert.mockReturnValue({\n        values: jest.fn().mockReturnValue({ returning: mockReturning })\n      });\n      \n      // Create sessions\n      await manager.createTestSession(sessionData1);\n      await manager.createTestSession(sessionData2);\n      \n      expect(manager.createdSessions).toEqual(['session-1', 'session-2']);\n    });\n  });\n\n  describe('Error Handling', () => {\n    it('should maintain data integrity during partial failures', async () => {\n      // Setup: create some successful records first\n      manager.createdUsers = [1];\n      manager.createdSessions = ['session-1'];\n      manager.createdEmailCodes = [1];\n      \n      // Mock partial failure during cleanup\n      let callCount = 0;\n      mockDb.delete.mockReturnValue({\n        where: jest.fn().mockImplementation(() => {\n          callCount++;\n          if (callCount === 2) { // Fail on second call\n            throw new Error('Session cleanup failed');\n          }\n          return Promise.resolve();\n        })\n      });\n      \n      const consoleSpy = jest.spyOn(console, 'error').mockImplementation();\n      \n      await manager.cleanup();\n      \n      // Verify arrays are still reset despite partial failure\n      expect(manager.createdUsers).toEqual([]);\n      expect(manager.createdSessions).toEqual([]);\n      expect(manager.createdEmailCodes).toEqual([]);\n      \n      consoleSpy.mockRestore();\n    });\n  });\n});"],"names":["describe","DatabaseTestManager","createDatabaseTestManager","globalDatabaseTestManager","mockDb","mockUsers","mockSessions","mockEmailVerificationCodes","mockEq","beforeAll","insert","jest","fn","select","update","delete","id","email","userId","field","value","type","doMock","db","users","sessions","emailVerificationCodes","eq","module","default","manager","beforeEach","clearAllMocks","mockClear","mockReturnValue","values","returning","from","where","limit","set","afterEach","createdUsers","createdSessions","createdEmailCodes","it","newManager","expect","toEqual","userData","name","mockUser","mockReturning","mockResolvedValue","mockValues","result","createTestUser","toHaveBeenCalledWith","toHaveBeenCalled","toContain","mockError","Error","mockRejectedValue","rejects","toThrow","sessionData","expiresAt","Date","mockSession","createTestSession","codeData","code","mockCode","createTestEmailCode","mockWhere","getUserById","toBeNull","getUserByEmail","updates","mockUpdatedUser","updatedAt","any","mockSet","updateUser","push","deleteUser","not","deleteSession","deleteEmailCode","cleanup","consoleSpy","spyOn","console","mockImplementation","mockRestore","mockLimit","isConnected","toBe","manager1","manager2","toBeInstanceOf","userData1","userData2","mockUser1","mockUser2","callCount","Promise","resolve","arrayContaining","toHaveLength","sessionData1","sessionData2","mockSession1","mockSession2"],"mappings":"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"}