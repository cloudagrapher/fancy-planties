a8e513c965f88951ad763b18aaa0ecf5
// Authentication Core Logic Tests
// Tests the core authentication logic without middleware complications
"use strict";
// Mock the auth functions
jest.mock('@/lib/auth', ()=>({
        signUp: jest.fn(),
        signIn: jest.fn(),
        signOut: jest.fn()
    }));
jest.mock('@/lib/auth/server', ()=>({
        setSessionCookie: jest.fn(),
        clearSessionCookie: jest.fn(),
        validateRequest: jest.fn()
    }));
jest.mock('@/lib/auth/validation', ()=>({
        validateInput: jest.fn()
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _server = require("next/server");
const _userfactory = require("../../test-utils/factories/user-factory.js");
const _auth = require("../../lib/auth");
const _server1 = require("../../lib/auth/server");
const _validation = require("../../lib/auth/validation");
// Create simplified handlers for testing (without middleware)
const createSignupHandler = ()=>async (request)=>{
        try {
            const body = await request.json();
            // Validate input
            const validation = (0, _validation.validateInput)({}, body);
            if (!validation.success) {
                return _server.NextResponse.json({
                    error: 'Validation failed',
                    errors: validation.errors
                }, {
                    status: 400
                });
            }
            const { email, password, name } = validation.data;
            // Attempt to sign up
            const result = await (0, _auth.signUp)(email, password, name);
            // Set session cookie
            await (0, _server1.setSessionCookie)(result.session.id);
            return _server.NextResponse.json({
                success: true,
                user: {
                    id: result.user.id,
                    email: result.user.email,
                    name: result.user.name
                }
            });
        } catch (error) {
            console.error('Sign up error:', error);
            if (error instanceof Error && error.message === 'User already exists') {
                return _server.NextResponse.json({
                    error: 'An account with this email already exists'
                }, {
                    status: 409
                });
            }
            return _server.NextResponse.json({
                error: 'Internal server error'
            }, {
                status: 500
            });
        }
    };
const createSigninHandler = ()=>async (request)=>{
        try {
            const body = await request.json();
            // Validate input
            const validation = (0, _validation.validateInput)({}, body);
            if (!validation.success) {
                return _server.NextResponse.json({
                    error: 'Validation failed',
                    errors: validation.errors
                }, {
                    status: 400
                });
            }
            const { email, password } = validation.data;
            // Attempt to sign in
            const result = await (0, _auth.signIn)(email, password);
            if (!result) {
                return _server.NextResponse.json({
                    error: 'Invalid email or password'
                }, {
                    status: 401
                });
            }
            // Set session cookie
            await (0, _server1.setSessionCookie)(result.session.id);
            return _server.NextResponse.json({
                success: true,
                user: {
                    id: result.user.id,
                    email: result.user.email,
                    name: result.user.name
                }
            });
        } catch (error) {
            console.error('Sign in error:', error);
            return _server.NextResponse.json({
                error: 'Internal server error'
            }, {
                status: 500
            });
        }
    };
const createSignoutHandler = ()=>async (_request)=>{
        try {
            const { session } = await (0, _server1.validateRequest)();
            if (!session) {
                return _server.NextResponse.json({
                    error: 'No active session'
                }, {
                    status: 401
                });
            }
            // Sign out and clear session
            await (0, _auth.signOut)(session.id);
            await (0, _server1.clearSessionCookie)();
            return _server.NextResponse.json({
                success: true,
                message: 'Signed out successfully'
            });
        } catch (error) {
            console.error('Sign out error:', error);
            return _server.NextResponse.json({
                error: 'Internal server error'
            }, {
                status: 500
            });
        }
    };
describe('Authentication Core Logic', ()=>{
    let signupHandler, signinHandler, signoutHandler;
    beforeEach(()=>{
        jest.clearAllMocks();
        // Create handlers for each test
        signupHandler = createSignupHandler();
        signinHandler = createSigninHandler();
        signoutHandler = createSignoutHandler();
    });
    afterEach(()=>{
        jest.restoreAllMocks();
    });
    describe('Signup Logic', ()=>{
        it('should create new user with valid data', async ()=>{
            // Arrange
            const testUser = (0, _userfactory.createTestUser)({
                name: 'John Doe',
                email: 'john@example.com'
            });
            const testSession = (0, _userfactory.createTestSession)(testUser);
            const requestBody = {
                name: 'John Doe',
                email: 'john@example.com',
                password: 'SecurePass123!'
            };
            _validation.validateInput.mockReturnValue({
                success: true,
                data: requestBody
            });
            _auth.signUp.mockResolvedValue({
                user: testUser,
                session: testSession
            });
            _server1.setSessionCookie.mockResolvedValue(undefined);
            const request = new _server.NextRequest('http://localhost:3000/api/auth/signup', {
                method: 'POST',
                body: JSON.stringify(requestBody),
                headers: {
                    'Content-Type': 'application/json'
                }
            });
            // Act
            const response = await signupHandler(request);
            const responseData = await response.json();
            // Assert
            expect(response.status).toBe(200);
            expect(responseData).toEqual({
                success: true,
                user: {
                    id: testUser.id,
                    email: testUser.email,
                    name: testUser.name
                }
            });
            expect(_validation.validateInput).toHaveBeenCalledWith({}, requestBody);
            expect(_auth.signUp).toHaveBeenCalledWith('john@example.com', 'SecurePass123!', 'John Doe');
            expect(_server1.setSessionCookie).toHaveBeenCalledWith(testSession.id);
        });
        it('should return validation error for invalid input', async ()=>{
            // Arrange
            const requestBody = {
                name: '',
                email: 'invalid-email',
                password: '123'
            };
            _validation.validateInput.mockReturnValue({
                success: false,
                errors: {
                    name: 'Name is required',
                    email: 'Please enter a valid email address',
                    password: 'Password must be at least 8 characters'
                }
            });
            const request = new _server.NextRequest('http://localhost:3000/api/auth/signup', {
                method: 'POST',
                body: JSON.stringify(requestBody),
                headers: {
                    'Content-Type': 'application/json'
                }
            });
            // Act
            const response = await signupHandler(request);
            const responseData = await response.json();
            // Assert
            expect(response.status).toBe(400);
            expect(responseData).toEqual({
                error: 'Validation failed',
                errors: {
                    name: 'Name is required',
                    email: 'Please enter a valid email address',
                    password: 'Password must be at least 8 characters'
                }
            });
            expect(_auth.signUp).not.toHaveBeenCalled();
            expect(_server1.setSessionCookie).not.toHaveBeenCalled();
        });
        it('should return conflict error when user already exists', async ()=>{
            // Arrange
            const requestBody = {
                name: 'John Doe',
                email: 'existing@example.com',
                password: 'SecurePass123!'
            };
            _validation.validateInput.mockReturnValue({
                success: true,
                data: requestBody
            });
            _auth.signUp.mockRejectedValue(new Error('User already exists'));
            const request = new _server.NextRequest('http://localhost:3000/api/auth/signup', {
                method: 'POST',
                body: JSON.stringify(requestBody),
                headers: {
                    'Content-Type': 'application/json'
                }
            });
            // Act
            const response = await signupHandler(request);
            const responseData = await response.json();
            // Assert
            expect(response.status).toBe(409);
            expect(responseData).toEqual({
                error: 'An account with this email already exists'
            });
            expect(_server1.setSessionCookie).not.toHaveBeenCalled();
        });
    });
    describe('Signin Logic', ()=>{
        it('should authenticate user with valid credentials', async ()=>{
            // Arrange
            const testUser = (0, _userfactory.createTestUser)({
                email: 'john@example.com'
            });
            const testSession = (0, _userfactory.createTestSession)(testUser);
            const requestBody = {
                email: 'john@example.com',
                password: 'SecurePass123!'
            };
            _validation.validateInput.mockReturnValue({
                success: true,
                data: requestBody
            });
            _auth.signIn.mockResolvedValue({
                user: testUser,
                session: testSession
            });
            _server1.setSessionCookie.mockResolvedValue(undefined);
            const request = new _server.NextRequest('http://localhost:3000/api/auth/signin', {
                method: 'POST',
                body: JSON.stringify(requestBody),
                headers: {
                    'Content-Type': 'application/json'
                }
            });
            // Act
            const response = await signinHandler(request);
            const responseData = await response.json();
            // Assert
            expect(response.status).toBe(200);
            expect(responseData).toEqual({
                success: true,
                user: {
                    id: testUser.id,
                    email: testUser.email,
                    name: testUser.name
                }
            });
            expect(_validation.validateInput).toHaveBeenCalledWith({}, requestBody);
            expect(_auth.signIn).toHaveBeenCalledWith('john@example.com', 'SecurePass123!');
            expect(_server1.setSessionCookie).toHaveBeenCalledWith(testSession.id);
        });
        it('should return unauthorized error for invalid credentials', async ()=>{
            // Arrange
            const requestBody = {
                email: 'john@example.com',
                password: 'wrongpassword'
            };
            _validation.validateInput.mockReturnValue({
                success: true,
                data: requestBody
            });
            _auth.signIn.mockResolvedValue(null); // Invalid credentials return null
            const request = new _server.NextRequest('http://localhost:3000/api/auth/signin', {
                method: 'POST',
                body: JSON.stringify(requestBody),
                headers: {
                    'Content-Type': 'application/json'
                }
            });
            // Act
            const response = await signinHandler(request);
            const responseData = await response.json();
            // Assert
            expect(response.status).toBe(401);
            expect(responseData).toEqual({
                error: 'Invalid email or password'
            });
            expect(_auth.signIn).toHaveBeenCalledWith('john@example.com', 'wrongpassword');
            expect(_server1.setSessionCookie).not.toHaveBeenCalled();
        });
    });
    describe('Signout Logic', ()=>{
        it('should sign out user with valid session', async ()=>{
            // Arrange
            const testUser = (0, _userfactory.createTestUser)();
            const testSession = (0, _userfactory.createTestSession)(testUser);
            _server1.validateRequest.mockResolvedValue({
                user: testUser,
                session: testSession
            });
            _auth.signOut.mockResolvedValue(undefined);
            _server1.clearSessionCookie.mockResolvedValue(undefined);
            const request = new _server.NextRequest('http://localhost:3000/api/auth/signout', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Cookie': `auth-session=${testSession.id}`
                }
            });
            // Act
            const response = await signoutHandler(request);
            const responseData = await response.json();
            // Assert
            expect(response.status).toBe(200);
            expect(responseData).toEqual({
                success: true,
                message: 'Signed out successfully'
            });
            expect(_server1.validateRequest).toHaveBeenCalled();
            expect(_auth.signOut).toHaveBeenCalledWith(testSession.id);
            expect(_server1.clearSessionCookie).toHaveBeenCalled();
        });
        it('should return unauthorized error when no active session', async ()=>{
            // Arrange
            _server1.validateRequest.mockResolvedValue({
                user: null,
                session: null
            });
            const request = new _server.NextRequest('http://localhost:3000/api/auth/signout', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            });
            // Act
            const response = await signoutHandler(request);
            const responseData = await response.json();
            // Assert
            expect(response.status).toBe(401);
            expect(responseData).toEqual({
                error: 'No active session'
            });
            expect(_server1.validateRequest).toHaveBeenCalled();
            expect(_auth.signOut).not.toHaveBeenCalled();
            expect(_server1.clearSessionCookie).not.toHaveBeenCalled();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,