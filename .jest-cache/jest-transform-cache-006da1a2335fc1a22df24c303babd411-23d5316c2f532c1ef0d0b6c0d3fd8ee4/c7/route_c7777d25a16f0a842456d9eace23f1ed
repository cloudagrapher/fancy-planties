0c3ae50100b67de4f3c96dc8f8d1541b
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "GET", {
    enumerable: true,
    get: function() {
        return GET;
    }
});
const _server = require("next/server");
const _server1 = require("../../../lib/auth/server");
const _db = require("../../../lib/db");
const _schema = require("../../../lib/db/schema");
const _drizzleorm = require("drizzle-orm");
async function GET(request) {
    try {
        const { user } = await (0, _server1.validateRequest)();
        if (!user) {
            return _server.NextResponse.json({
                error: 'Unauthorized'
            }, {
                status: 401
            });
        }
        const userId = user.id;
        const today = new Date();
        today.setHours(23, 59, 59, 999); // End of today
        // Get plant statistics
        const [plantStats] = await _db.db.select({
            totalPlants: (0, _drizzleorm.sql)`count(*)`,
            activePlants: (0, _drizzleorm.sql)`count(*) filter (where ${_schema.plantInstances.isActive} = true)`,
            careDueToday: (0, _drizzleorm.sql)`count(*) filter (where ${_schema.plantInstances.isActive} = true and ${_schema.plantInstances.fertilizerDue} <= ${today.toISOString()})`
        }).from(_schema.plantInstances).where((0, _drizzleorm.eq)(_schema.plantInstances.userId, userId));
        // Get propagation statistics
        const [propagationStats] = await _db.db.select({
            totalPropagations: (0, _drizzleorm.sql)`count(*)`,
            activePropagations: (0, _drizzleorm.sql)`count(*) filter (where ${_schema.propagations.status} in ('started', 'rooting'))`,
            successfulPropagations: (0, _drizzleorm.sql)`count(*) filter (where ${_schema.propagations.status} in ('planted', 'established'))`
        }).from(_schema.propagations).where((0, _drizzleorm.eq)(_schema.propagations.userId, userId));
        // Calculate success rate
        const totalCompletedPropagations = await _db.db.select({
            count: (0, _drizzleorm.sql)`count(*)`
        }).from(_schema.propagations).where((0, _drizzleorm.and)((0, _drizzleorm.eq)(_schema.propagations.userId, userId), (0, _drizzleorm.inArray)(_schema.propagations.status, [
            'planted',
            'established'
        ])));
        const completedCount = totalCompletedPropagations[0]?.count || 0;
        const successfulCount = propagationStats?.successfulPropagations || 0;
        const propagationSuccessRate = completedCount > 0 ? Math.round(successfulCount / completedCount * 100) : 0;
        // Get fertilizer events from plant instances with due dates
        const fertilizerEventData = await _db.db.select({
            id: _schema.plantInstances.id,
            nickname: _schema.plantInstances.nickname,
            fertilizerDue: _schema.plantInstances.fertilizerDue
        }).from(_schema.plantInstances).where((0, _drizzleorm.and)((0, _drizzleorm.eq)(_schema.plantInstances.userId, userId), (0, _drizzleorm.eq)(_schema.plantInstances.isActive, true)));
        // Convert to fertilizer events with proper date filtering (show events for next 30 days)
        const thirtyDaysFromNow = new Date();
        thirtyDaysFromNow.setDate(thirtyDaysFromNow.getDate() + 30);
        const fertilizerEvents = fertilizerEventData.filter((plant)=>plant.fertilizerDue && plant.fertilizerDue <= thirtyDaysFromNow).map((plant)=>({
                id: `fertilizer-${plant.id}`,
                plantName: plant.nickname,
                plantId: plant.id.toString(),
                date: plant.fertilizerDue.toISOString().split('T')[0],
                type: 'fertilize'
            }));
        const dashboardStats = {
            totalPlants: plantStats?.totalPlants || 0,
            activePlants: plantStats?.activePlants || 0,
            careDueToday: plantStats?.careDueToday || 0,
            totalPropagations: propagationStats?.totalPropagations || 0,
            activePropagations: propagationStats?.activePropagations || 0,
            successfulPropagations: successfulCount,
            propagationSuccessRate,
            fertilizerEvents
        };
        return _server.NextResponse.json(dashboardStats);
    } catch (error) {
        console.error('Failed to get dashboard stats:', error);
        return _server.NextResponse.json({
            error: 'Failed to get dashboard stats'
        }, {
            status: 500
        });
    }
}

//# sourceMappingURL=data:application/json;base64,