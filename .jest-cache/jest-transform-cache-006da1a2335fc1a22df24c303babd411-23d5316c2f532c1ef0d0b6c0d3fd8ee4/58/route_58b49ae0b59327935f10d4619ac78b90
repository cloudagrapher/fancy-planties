c85968e0e70fd10974540d150d1f896a
"use strict";

/* istanbul ignore next */
function cov_2qk2v8jqrg() {
  var path = "/Users/stefanbekker/projects/fancy-planties/src/app/api/offline/sync/route.ts";
  var hash = "2b334e1a1c0269dcdcc8ef89c4b9cfd6638b6fa2";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/stefanbekker/projects/fancy-planties/src/app/api/offline/sync/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 20
        }
      },
      "3": {
        start: {
          line: 11,
          column: 16
        },
        end: {
          line: 11,
          column: 38
        }
      },
      "4": {
        start: {
          line: 12,
          column: 17
        },
        end: {
          line: 12,
          column: 55
        }
      },
      "5": {
        start: {
          line: 13,
          column: 24
        },
        end: {
          line: 13,
          column: 75
        }
      },
      "6": {
        start: {
          line: 14,
          column: 13
        },
        end: {
          line: 14,
          column: 27
        }
      },
      "7": {
        start: {
          line: 15,
          column: 26
        },
        end: {
          line: 30,
          column: 2
        }
      },
      "8": {
        start: {
          line: 32,
          column: 4
        },
        end: {
          line: 65,
          column: 5
        }
      },
      "9": {
        start: {
          line: 33,
          column: 25
        },
        end: {
          line: 33,
          column: 62
        }
      },
      "10": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 40,
          column: 9
        }
      },
      "11": {
        start: {
          line: 35,
          column: 12
        },
        end: {
          line: 39,
          column: 15
        }
      },
      "12": {
        start: {
          line: 41,
          column: 21
        },
        end: {
          line: 41,
          column: 41
        }
      },
      "13": {
        start: {
          line: 42,
          column: 35
        },
        end: {
          line: 42,
          column: 64
        }
      },
      "14": {
        start: {
          line: 43,
          column: 24
        },
        end: {
          line: 43,
          column: 111
        }
      },
      "15": {
        start: {
          line: 44,
          column: 8
        },
        end: {
          line: 49,
          column: 11
        }
      },
      "16": {
        start: {
          line: 47,
          column: 45
        },
        end: {
          line: 47,
          column: 54
        }
      },
      "17": {
        start: {
          line: 48,
          column: 45
        },
        end: {
          line: 48,
          column: 55
        }
      },
      "18": {
        start: {
          line: 51,
          column: 8
        },
        end: {
          line: 58,
          column: 9
        }
      },
      "19": {
        start: {
          line: 52,
          column: 12
        },
        end: {
          line: 57,
          column: 15
        }
      },
      "20": {
        start: {
          line: 59,
          column: 8
        },
        end: {
          line: 59,
          column: 60
        }
      },
      "21": {
        start: {
          line: 60,
          column: 8
        },
        end: {
          line: 64,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "POST",
        decl: {
          start: {
            line: 31,
            column: 15
          },
          end: {
            line: 31,
            column: 19
          }
        },
        loc: {
          start: {
            line: 31,
            column: 29
          },
          end: {
            line: 66,
            column: 1
          }
        },
        line: 31
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 47,
            column: 40
          },
          end: {
            line: 47,
            column: 41
          }
        },
        loc: {
          start: {
            line: 47,
            column: 45
          },
          end: {
            line: 47,
            column: 54
          }
        },
        line: 47
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 48,
            column: 40
          },
          end: {
            line: 48,
            column: 41
          }
        },
        loc: {
          start: {
            line: 48,
            column: 45
          },
          end: {
            line: 48,
            column: 55
          }
        },
        line: 48
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 34,
            column: 8
          },
          end: {
            line: 40,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 34,
            column: 8
          },
          end: {
            line: 40,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 34
      },
      "1": {
        loc: {
          start: {
            line: 51,
            column: 8
          },
          end: {
            line: 58,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 51,
            column: 8
          },
          end: {
            line: 58,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 51
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/stefanbekker/projects/fancy-planties/src/app/api/offline/sync/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport { validateRequest } from '@/lib/auth/server';\nimport { OfflineService } from '@/lib/services/offline-service';\nimport { z } from 'zod';\n\nconst syncRequestSchema = z.object({\n  pendingEntries: z.array(z.object({\n    id: z.string(),\n    plantInstanceId: z.number(),\n    careType: z.enum(['fertilizer', 'repot', 'water', 'prune', 'inspect', 'other']),\n    notes: z.string().optional(),\n    timestamp: z.string(),\n  })),\n});\n\n/**\n * POST /api/offline/sync\n * Sync pending offline entries when back online\n */\nexport async function POST(request: NextRequest) {\n  try {\n    const { user } = await validateRequest();\n    if (!user) {\n      return NextResponse.json(\n        { error: 'Unauthorized' },\n        { status: 401 }\n      );\n    }\n\n    const body = await request.json();\n    const { pendingEntries } = syncRequestSchema.parse(body);\n\n    const results = await OfflineService.processPendingCareEntries(user.id, pendingEntries);\n    \n    return NextResponse.json({\n      success: true,\n      results,\n      syncedCount: results.filter(r => r.success).length,\n      failedCount: results.filter(r => !r.success).length,\n    });\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      return NextResponse.json(\n        { error: 'Invalid request data', details: error.issues },\n        { status: 400 }\n      );\n    }\n\n    console.error('Error syncing offline data:', error);\n    return NextResponse.json(\n      { error: 'Failed to sync offline data' },\n      { status: 500 }\n    );\n  }\n}"],
      names: ["POST", "syncRequestSchema", "z", "object", "pendingEntries", "array", "id", "string", "plantInstanceId", "number", "careType", "enum", "notes", "optional", "timestamp", "request", "user", "validateRequest", "NextResponse", "json", "error", "status", "body", "parse", "results", "OfflineService", "processPendingCareEntries", "success", "syncedCount", "filter", "r", "length", "failedCount", "ZodError", "details", "issues", "console"],
      mappings: ";;;;+BAmBsBA;;;eAAAA;;;wBAnBoB;yBACV;gCACD;qBACb;AAElB,MAAMC,oBAAoBC,MAAC,CAACC,MAAM,CAAC;IACjCC,gBAAgBF,MAAC,CAACG,KAAK,CAACH,MAAC,CAACC,MAAM,CAAC;QAC/BG,IAAIJ,MAAC,CAACK,MAAM;QACZC,iBAAiBN,MAAC,CAACO,MAAM;QACzBC,UAAUR,MAAC,CAACS,IAAI,CAAC;YAAC;YAAc;YAAS;YAAS;YAAS;YAAW;SAAQ;QAC9EC,OAAOV,MAAC,CAACK,MAAM,GAAGM,QAAQ;QAC1BC,WAAWZ,MAAC,CAACK,MAAM;IACrB;AACF;AAMO,eAAeP,KAAKe,OAAoB;IAC7C,IAAI;QACF,MAAM,EAAEC,IAAI,EAAE,GAAG,MAAMC,IAAAA,wBAAe;QACtC,IAAI,CAACD,MAAM;YACT,OAAOE,oBAAY,CAACC,IAAI,CACtB;gBAAEC,OAAO;YAAe,GACxB;gBAAEC,QAAQ;YAAI;QAElB;QAEA,MAAMC,OAAO,MAAMP,QAAQI,IAAI;QAC/B,MAAM,EAAEf,cAAc,EAAE,GAAGH,kBAAkBsB,KAAK,CAACD;QAEnD,MAAME,UAAU,MAAMC,8BAAc,CAACC,yBAAyB,CAACV,KAAKV,EAAE,EAAEF;QAExE,OAAOc,oBAAY,CAACC,IAAI,CAAC;YACvBQ,SAAS;YACTH;YACAI,aAAaJ,QAAQK,MAAM,CAACC,CAAAA,IAAKA,EAAEH,OAAO,EAAEI,MAAM;YAClDC,aAAaR,QAAQK,MAAM,CAACC,CAAAA,IAAK,CAACA,EAAEH,OAAO,EAAEI,MAAM;QACrD;IACF,EAAE,OAAOX,OAAO;QACd,IAAIA,iBAAiBlB,MAAC,CAAC+B,QAAQ,EAAE;YAC/B,OAAOf,oBAAY,CAACC,IAAI,CACtB;gBAAEC,OAAO;gBAAwBc,SAASd,MAAMe,MAAM;YAAC,GACvD;gBAAEd,QAAQ;YAAI;QAElB;QAEAe,QAAQhB,KAAK,CAAC,+BAA+BA;QAC7C,OAAOF,oBAAY,CAACC,IAAI,CACtB;YAAEC,OAAO;QAA8B,GACvC;YAAEC,QAAQ;QAAI;IAElB;AACF"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "2b334e1a1c0269dcdcc8ef89c4b9cfd6638b6fa2"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2qk2v8jqrg = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2qk2v8jqrg();
cov_2qk2v8jqrg().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_2qk2v8jqrg().s[1]++;
Object.defineProperty(exports, "POST", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_2qk2v8jqrg().f[0]++;
    cov_2qk2v8jqrg().s[2]++;
    return POST;
  }
});
const _server =
/* istanbul ignore next */
(cov_2qk2v8jqrg().s[3]++, require("next/server"));
const _server1 =
/* istanbul ignore next */
(cov_2qk2v8jqrg().s[4]++, require("../../../../lib/auth/server"));
const _offlineservice =
/* istanbul ignore next */
(cov_2qk2v8jqrg().s[5]++, require("../../../../lib/services/offline-service"));
const _zod =
/* istanbul ignore next */
(cov_2qk2v8jqrg().s[6]++, require("zod"));
const syncRequestSchema =
/* istanbul ignore next */
(cov_2qk2v8jqrg().s[7]++, _zod.z.object({
  pendingEntries: _zod.z.array(_zod.z.object({
    id: _zod.z.string(),
    plantInstanceId: _zod.z.number(),
    careType: _zod.z.enum(['fertilizer', 'repot', 'water', 'prune', 'inspect', 'other']),
    notes: _zod.z.string().optional(),
    timestamp: _zod.z.string()
  }))
}));
async function POST(request) {
  /* istanbul ignore next */
  cov_2qk2v8jqrg().f[1]++;
  cov_2qk2v8jqrg().s[8]++;
  try {
    const {
      user
    } =
    /* istanbul ignore next */
    (cov_2qk2v8jqrg().s[9]++, await (0, _server1.validateRequest)());
    /* istanbul ignore next */
    cov_2qk2v8jqrg().s[10]++;
    if (!user) {
      /* istanbul ignore next */
      cov_2qk2v8jqrg().b[0][0]++;
      cov_2qk2v8jqrg().s[11]++;
      return _server.NextResponse.json({
        error: 'Unauthorized'
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_2qk2v8jqrg().b[0][1]++;
    }
    const body =
    /* istanbul ignore next */
    (cov_2qk2v8jqrg().s[12]++, await request.json());
    const {
      pendingEntries
    } =
    /* istanbul ignore next */
    (cov_2qk2v8jqrg().s[13]++, syncRequestSchema.parse(body));
    const results =
    /* istanbul ignore next */
    (cov_2qk2v8jqrg().s[14]++, await _offlineservice.OfflineService.processPendingCareEntries(user.id, pendingEntries));
    /* istanbul ignore next */
    cov_2qk2v8jqrg().s[15]++;
    return _server.NextResponse.json({
      success: true,
      results,
      syncedCount: results.filter(r => {
        /* istanbul ignore next */
        cov_2qk2v8jqrg().f[2]++;
        cov_2qk2v8jqrg().s[16]++;
        return r.success;
      }).length,
      failedCount: results.filter(r => {
        /* istanbul ignore next */
        cov_2qk2v8jqrg().f[3]++;
        cov_2qk2v8jqrg().s[17]++;
        return !r.success;
      }).length
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2qk2v8jqrg().s[18]++;
    if (error instanceof _zod.z.ZodError) {
      /* istanbul ignore next */
      cov_2qk2v8jqrg().b[1][0]++;
      cov_2qk2v8jqrg().s[19]++;
      return _server.NextResponse.json({
        error: 'Invalid request data',
        details: error.issues
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_2qk2v8jqrg().b[1][1]++;
    }
    cov_2qk2v8jqrg().s[20]++;
    console.error('Error syncing offline data:', error);
    /* istanbul ignore next */
    cov_2qk2v8jqrg().s[21]++;
    return _server.NextResponse.json({
      error: 'Failed to sync offline data'
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMnFrMnY4anFyZyIsImFjdHVhbENvdmVyYWdlIiwicyIsIlBPU1QiLCJzeW5jUmVxdWVzdFNjaGVtYSIsIl96b2QiLCJ6Iiwib2JqZWN0IiwicGVuZGluZ0VudHJpZXMiLCJhcnJheSIsImlkIiwic3RyaW5nIiwicGxhbnRJbnN0YW5jZUlkIiwibnVtYmVyIiwiY2FyZVR5cGUiLCJlbnVtIiwibm90ZXMiLCJvcHRpb25hbCIsInRpbWVzdGFtcCIsInJlcXVlc3QiLCJmIiwidXNlciIsIl9zZXJ2ZXIxIiwidmFsaWRhdGVSZXF1ZXN0IiwiYiIsIl9zZXJ2ZXIiLCJOZXh0UmVzcG9uc2UiLCJqc29uIiwiZXJyb3IiLCJzdGF0dXMiLCJib2R5IiwicGFyc2UiLCJyZXN1bHRzIiwiX29mZmxpbmVzZXJ2aWNlIiwiT2ZmbGluZVNlcnZpY2UiLCJwcm9jZXNzUGVuZGluZ0NhcmVFbnRyaWVzIiwic3VjY2VzcyIsInN5bmNlZENvdW50IiwiZmlsdGVyIiwiciIsImxlbmd0aCIsImZhaWxlZENvdW50IiwiWm9kRXJyb3IiLCJkZXRhaWxzIiwiaXNzdWVzIiwiY29uc29sZSJdLCJzb3VyY2VzIjpbIi9Vc2Vycy9zdGVmYW5iZWtrZXIvcHJvamVjdHMvZmFuY3ktcGxhbnRpZXMvc3JjL2FwcC9hcGkvb2ZmbGluZS9zeW5jL3JvdXRlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5leHRSZXF1ZXN0LCBOZXh0UmVzcG9uc2UgfSBmcm9tICduZXh0L3NlcnZlcic7XG5pbXBvcnQgeyB2YWxpZGF0ZVJlcXVlc3QgfSBmcm9tICdAL2xpYi9hdXRoL3NlcnZlcic7XG5pbXBvcnQgeyBPZmZsaW5lU2VydmljZSB9IGZyb20gJ0AvbGliL3NlcnZpY2VzL29mZmxpbmUtc2VydmljZSc7XG5pbXBvcnQgeyB6IH0gZnJvbSAnem9kJztcblxuY29uc3Qgc3luY1JlcXVlc3RTY2hlbWEgPSB6Lm9iamVjdCh7XG4gIHBlbmRpbmdFbnRyaWVzOiB6LmFycmF5KHoub2JqZWN0KHtcbiAgICBpZDogei5zdHJpbmcoKSxcbiAgICBwbGFudEluc3RhbmNlSWQ6IHoubnVtYmVyKCksXG4gICAgY2FyZVR5cGU6IHouZW51bShbJ2ZlcnRpbGl6ZXInLCAncmVwb3QnLCAnd2F0ZXInLCAncHJ1bmUnLCAnaW5zcGVjdCcsICdvdGhlciddKSxcbiAgICBub3Rlczogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICAgIHRpbWVzdGFtcDogei5zdHJpbmcoKSxcbiAgfSkpLFxufSk7XG5cbi8qKlxuICogUE9TVCAvYXBpL29mZmxpbmUvc3luY1xuICogU3luYyBwZW5kaW5nIG9mZmxpbmUgZW50cmllcyB3aGVuIGJhY2sgb25saW5lXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBQT1NUKHJlcXVlc3Q6IE5leHRSZXF1ZXN0KSB7XG4gIHRyeSB7XG4gICAgY29uc3QgeyB1c2VyIH0gPSBhd2FpdCB2YWxpZGF0ZVJlcXVlc3QoKTtcbiAgICBpZiAoIXVzZXIpIHtcbiAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcbiAgICAgICAgeyBlcnJvcjogJ1VuYXV0aG9yaXplZCcgfSxcbiAgICAgICAgeyBzdGF0dXM6IDQwMSB9XG4gICAgICApO1xuICAgIH1cblxuICAgIGNvbnN0IGJvZHkgPSBhd2FpdCByZXF1ZXN0Lmpzb24oKTtcbiAgICBjb25zdCB7IHBlbmRpbmdFbnRyaWVzIH0gPSBzeW5jUmVxdWVzdFNjaGVtYS5wYXJzZShib2R5KTtcblxuICAgIGNvbnN0IHJlc3VsdHMgPSBhd2FpdCBPZmZsaW5lU2VydmljZS5wcm9jZXNzUGVuZGluZ0NhcmVFbnRyaWVzKHVzZXIuaWQsIHBlbmRpbmdFbnRyaWVzKTtcbiAgICBcbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oe1xuICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgIHJlc3VsdHMsXG4gICAgICBzeW5jZWRDb3VudDogcmVzdWx0cy5maWx0ZXIociA9PiByLnN1Y2Nlc3MpLmxlbmd0aCxcbiAgICAgIGZhaWxlZENvdW50OiByZXN1bHRzLmZpbHRlcihyID0+ICFyLnN1Y2Nlc3MpLmxlbmd0aCxcbiAgICB9KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiB6LlpvZEVycm9yKSB7XG4gICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXG4gICAgICAgIHsgZXJyb3I6ICdJbnZhbGlkIHJlcXVlc3QgZGF0YScsIGRldGFpbHM6IGVycm9yLmlzc3VlcyB9LFxuICAgICAgICB7IHN0YXR1czogNDAwIH1cbiAgICAgICk7XG4gICAgfVxuXG4gICAgY29uc29sZS5lcnJvcignRXJyb3Igc3luY2luZyBvZmZsaW5lIGRhdGE6JywgZXJyb3IpO1xuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcbiAgICAgIHsgZXJyb3I6ICdGYWlsZWQgdG8gc3luYyBvZmZsaW5lIGRhdGEnIH0sXG4gICAgICB7IHN0YXR1czogNTAwIH1cbiAgICApO1xuICB9XG59Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0lB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