d2c1c4f29eacabce41e54fb16e781627
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get generateCSRFToken () {
        return generateCSRFToken;
    },
    get rateLimit () {
        return rateLimit;
    },
    get requireAuth () {
        return requireAuth;
    },
    get validateCSRFToken () {
        return validateCSRFToken;
    },
    get withAuth () {
        return withAuth;
    },
    get withAuthAndRateLimit () {
        return withAuthAndRateLimit;
    },
    get withCSRFProtection () {
        return withCSRFProtection;
    },
    get withRateLimit () {
        return withRateLimit;
    }
});
const _server = require("next/server");
const _server1 = require("./server");
// Rate limiting store (in production, use Redis or similar)
const rateLimitStore = new Map();
// Rate limiting configuration
const RATE_LIMIT_WINDOW = 15 * 60 * 1000; // 15 minutes
const RATE_LIMIT_MAX_REQUESTS = 100; // Max requests per window
function generateCSRFToken() {
    return crypto.randomUUID();
}
function validateCSRFToken(token, sessionToken) {
    // Simple CSRF validation - in production, use more sophisticated approach
    return token === sessionToken;
}
function rateLimit(identifier) {
    const now = Date.now();
    // Clean up old entries
    for (const [key, value] of rateLimitStore.entries()){
        if (value.resetTime < now) {
            rateLimitStore.delete(key);
        }
    }
    const current = rateLimitStore.get(identifier);
    if (!current || current.resetTime < now) {
        // New window or expired window
        const resetTime = now + RATE_LIMIT_WINDOW;
        rateLimitStore.set(identifier, {
            count: 1,
            resetTime
        });
        return {
            success: true,
            remaining: RATE_LIMIT_MAX_REQUESTS - 1,
            resetTime
        };
    }
    if (current.count >= RATE_LIMIT_MAX_REQUESTS) {
        return {
            success: false,
            remaining: 0,
            resetTime: current.resetTime
        };
    }
    current.count++;
    rateLimitStore.set(identifier, current);
    return {
        success: true,
        remaining: RATE_LIMIT_MAX_REQUESTS - current.count,
        resetTime: current.resetTime
    };
}
async function withAuth(request, handler) {
    try {
        const { user, session } = await (0, _server1.validateRequest)();
        if (!user || !session) {
            return _server.NextResponse.json({
                error: 'Unauthorized'
            }, {
                status: 401
            });
        }
        return await handler(request, user);
    } catch (error) {
        console.error('Auth middleware error:', error);
        return _server.NextResponse.json({
            error: 'Internal server error'
        }, {
            status: 500
        });
    }
}
async function withRateLimit(request, handler) {
    try {
        // Use IP address for rate limiting (in production, consider user ID for authenticated requests)
        const identifier = request.headers.get('x-forwarded-for') || request.headers.get('x-real-ip') || 'unknown';
        const rateLimitResult = rateLimit(identifier);
        if (!rateLimitResult.success) {
            return _server.NextResponse.json({
                error: 'Too many requests',
                resetTime: rateLimitResult.resetTime
            }, {
                status: 429,
                headers: {
                    'X-RateLimit-Limit': RATE_LIMIT_MAX_REQUESTS.toString(),
                    'X-RateLimit-Remaining': rateLimitResult.remaining.toString(),
                    'X-RateLimit-Reset': rateLimitResult.resetTime.toString()
                }
            });
        }
        const response = await handler(request);
        // Add rate limit headers to successful responses
        response.headers.set('X-RateLimit-Limit', RATE_LIMIT_MAX_REQUESTS.toString());
        response.headers.set('X-RateLimit-Remaining', rateLimitResult.remaining.toString());
        response.headers.set('X-RateLimit-Reset', rateLimitResult.resetTime.toString());
        return response;
    } catch (error) {
        console.error('Rate limit middleware error:', error);
        return _server.NextResponse.json({
            error: 'Internal server error'
        }, {
            status: 500
        });
    }
}
async function withAuthAndRateLimit(request, handler) {
    return withRateLimit(request, async (req)=>{
        return withAuth(req, handler);
    });
}
async function withCSRFProtection(request, handler) {
    try {
        // Skip CSRF for GET requests
        if (request.method === 'GET') {
            return await handler(request);
        }
        const csrfToken = request.headers.get('x-csrf-token');
        const sessionCookie = request.cookies.get('auth-session');
        if (!csrfToken || !sessionCookie) {
            return _server.NextResponse.json({
                error: 'CSRF token missing'
            }, {
                status: 403
            });
        }
        // In a real implementation, you'd validate the CSRF token properly
        // For now, we'll just check that it exists
        if (!validateCSRFToken(csrfToken, sessionCookie.value)) {
            return _server.NextResponse.json({
                error: 'Invalid CSRF token'
            }, {
                status: 403
            });
        }
        return await handler(request);
    } catch (error) {
        console.error('CSRF middleware error:', error);
        return _server.NextResponse.json({
            error: 'Internal server error'
        }, {
            status: 500
        });
    }
}
async function requireAuth() {
    const { user, session } = await (0, _server1.validateRequest)();
    if (!user || !session) {
        return null;
    }
    return {
        user,
        session
    };
}

//# sourceMappingURL=data:application/json;base64,