{"version":3,"sources":["/Users/stefanbekker/projects/fancy-planties/src/app/api/plant-instances/[id]/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { PlantInstanceQueries } from '@/lib/db/queries/plant-instances';\nimport { updatePlantInstanceSchema } from '@/lib/validation/plant-schemas';\nimport { validateRequest } from '@/lib/auth/server';\n\n// GET /api/plant-instances/[id] - Get a specific plant instance\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { user } = await validateRequest();\n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const resolvedParams = await params;\n    const id = parseInt(resolvedParams.id, 10);\n    if (isNaN(id)) {\n      return NextResponse.json({ error: 'Invalid plant instance ID' }, { status: 400 });\n    }\n\n    const plantInstance = await PlantInstanceQueries.getEnhancedById(id);\n\n    if (!plantInstance) {\n      return NextResponse.json({ error: 'Plant instance not found' }, { status: 404 });\n    }\n\n    // Check if the plant instance belongs to the current user\n    if (plantInstance.userId !== user.id) {\n      return NextResponse.json({ error: 'Forbidden' }, { status: 403 });\n    }\n\n    return NextResponse.json(plantInstance);\n  } catch (error) {\n    console.error('Failed to get plant instance:', error);\n    return NextResponse.json(\n      { error: 'Failed to get plant instance' },\n      { status: 500 }\n    );\n  }\n}\n\n// PUT /api/plant-instances/[id] - Update a plant instance\nexport async function PUT(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { user } = await validateRequest();\n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const resolvedParams = await params;\n    const id = parseInt(resolvedParams.id, 10);\n    if (isNaN(id)) {\n      return NextResponse.json({ error: 'Invalid plant instance ID' }, { status: 400 });\n    }\n\n    // Check if the plant instance exists and belongs to the user\n    const existingInstance = await PlantInstanceQueries.getEnhancedById(id);\n    if (!existingInstance) {\n      return NextResponse.json({ error: 'Plant instance not found' }, { status: 404 });\n    }\n\n    if (existingInstance.userId !== user.id) {\n      return NextResponse.json({ error: 'Forbidden' }, { status: 403 });\n    }\n\n    // Check if request is FormData or JSON\n    const contentType = request.headers.get('content-type');\n    let body: any;\n\n    if (contentType?.includes('multipart/form-data')) {\n      // Handle FormData for file uploads\n      const formData = await request.formData();\n\n      // Helper function to convert file to base64\n      const fileToBase64 = async (file: File): Promise<string> => {\n        const bytes = await file.arrayBuffer();\n        const buffer = Buffer.from(bytes);\n        const base64 = buffer.toString('base64');\n        return `data:${file.type};base64,${base64}`;\n      };\n\n      // Extract form fields\n      body = {};\n      const imageFiles: File[] = [];\n      const existingImages: (string | FormDataEntryValue)[] = [];\n\n      for (const [key, value] of formData.entries()) {\n        if (key.startsWith('existingImages[')) {\n          // Handle existing images array\n          existingImages.push(value);\n        } else if (key.startsWith('imageFiles[')) {\n          // Handle new image files\n          if (value instanceof File) {\n            imageFiles.push(value);\n          }\n        } else {\n          // Handle regular form fields\n          if (key === 'plantId') {\n            body[key] = parseInt(value as string, 10);\n          } else if (key === 'isActive') {\n            body[key] = value === 'true';\n          } else {\n            body[key] = value;\n          }\n        }\n      }\n\n      // Convert new image files to base64\n      const newImageBase64s = await Promise.all(\n        imageFiles.map(file => fileToBase64(file))\n      );\n\n      // Combine existing images with new images\n      body.images = [...existingImages, ...newImageBase64s];\n    } else {\n      // Handle JSON\n      try {\n        body = await request.json();\n      } catch (jsonError) {\n        return NextResponse.json(\n          { error: 'Invalid request format' },\n          { status: 400 }\n        );\n      }\n    }\n\n    // Convert date strings to Date objects if they exist and are not empty\n    const processedBody = {\n      ...body,\n      lastFertilized: body.lastFertilized && body.lastFertilized !== '' ? new Date(body.lastFertilized) : null,\n      lastRepot: body.lastRepot && body.lastRepot !== '' ? new Date(body.lastRepot) : null,\n    };\n\n    // Validate the update data\n    const updateData = updatePlantInstanceSchema.parse({\n      ...processedBody,\n      id,\n      userId: user.id,\n    });\n\n    // Remove id and userId from update data as they shouldn't be updated\n    const { id: _, userId: __, ...dataToUpdate } = updateData;\n\n    // Update the plant instance\n    const updatedInstance = await PlantInstanceQueries.update(id, dataToUpdate);\n\n    // Get the enhanced plant instance with plant data\n    const enhancedInstance = await PlantInstanceQueries.getEnhancedById(updatedInstance.id);\n\n    return NextResponse.json(enhancedInstance);\n  } catch (error) {\n    console.error('Failed to update plant instance:', error);\n\n    if (error instanceof z.ZodError) {\n      return NextResponse.json(\n        { error: 'Invalid plant instance data', details: error.issues },\n        { status: 400 }\n      );\n    }\n\n    if (error instanceof Error && error.message.includes('validation')) {\n      return NextResponse.json(\n        { error: 'Invalid plant instance data', details: error.message },\n        { status: 400 }\n      );\n    }\n\n    return NextResponse.json(\n      { error: 'Failed to update plant instance' },\n      { status: 500 }\n    );\n  }\n}\n\n// DELETE /api/plant-instances/[id] - Delete a plant instance\nexport async function DELETE(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { user } = await validateRequest();\n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const resolvedParams = await params;\n    const id = parseInt(resolvedParams.id, 10);\n    if (isNaN(id)) {\n      return NextResponse.json({ error: 'Invalid plant instance ID' }, { status: 400 });\n    }\n\n    // Check if the plant instance exists and belongs to the user\n    const existingInstance = await PlantInstanceQueries.getEnhancedById(id);\n    if (!existingInstance) {\n      return NextResponse.json({ error: 'Plant instance not found' }, { status: 404 });\n    }\n\n    if (existingInstance.userId !== user.id) {\n      return NextResponse.json({ error: 'Forbidden' }, { status: 403 });\n    }\n\n    // Delete the plant instance\n    const deleted = await PlantInstanceQueries.delete(id);\n\n    if (!deleted) {\n      return NextResponse.json({ error: 'Failed to delete plant instance' }, { status: 500 });\n    }\n\n    return NextResponse.json({ success: true, message: 'Plant instance deleted successfully' });\n  } catch (error) {\n    console.error('Failed to delete plant instance:', error);\n    return NextResponse.json(\n      { error: 'Failed to delete plant instance' },\n      { status: 500 }\n    );\n  }\n}"],"names":["DELETE","GET","PUT","request","params","user","validateRequest","NextResponse","json","error","status","resolvedParams","id","parseInt","isNaN","plantInstance","PlantInstanceQueries","getEnhancedById","userId","console","existingInstance","contentType","headers","get","body","includes","formData","fileToBase64","file","bytes","arrayBuffer","buffer","Buffer","from","base64","toString","type","imageFiles","existingImages","key","value","entries","startsWith","push","File","newImageBase64s","Promise","all","map","images","jsonError","processedBody","lastFertilized","Date","lastRepot","updateData","updatePlantInstanceSchema","parse","_","__","dataToUpdate","updatedInstance","update","enhancedInstance","z","ZodError","details","issues","Error","message","deleted","delete","success"],"mappings":"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"}