{"version":3,"sources":["/Users/stefanbekker/projects/fancy-planties/src/app/api/auth/signup/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { signUpUnverified } from '@/lib/auth';\nimport { signUpSchema, validateInput } from '@/lib/auth/validation';\nimport { withRateLimit } from '@/lib/auth/middleware';\nimport { emailVerificationCodeService } from '@/lib/services/email-verification-code-service';\nimport { sendEmailWithRetry, EmailServiceError } from '@/lib/services/email-service';\nimport { createEmailService } from '@/lib/services/resend-email-service';\n\nexport async function POST(request: NextRequest) {\n  return withRateLimit(request, async (req) => {\n    try {\n      const body = await req.json();\n      \n      // Validate input\n      const validation = validateInput(signUpSchema, body);\n      if (!validation.success) {\n        return NextResponse.json(\n          { error: 'Validation failed', errors: validation.errors },\n          { status: 400 }\n        );\n      }\n      \n      const { email, password, name } = validation.data;\n      \n      // Create unverified user\n      const user = await signUpUnverified(email, password, name);\n      \n      // Generate verification code\n      const verificationCode = await emailVerificationCodeService.generateCode(user.id);\n      \n      // Send verification email\n      try {\n        const emailService = createEmailService();\n        await sendEmailWithRetry(emailService, email, verificationCode, name);\n        \n        console.log(`Verification email sent to ${email} for user ${user.id}`);\n        \n        return NextResponse.json({\n          success: true,\n          message: 'Account created successfully. Please check your email for a verification code.',\n          requiresVerification: true,\n          user: {\n            id: user.id,\n            email: user.email,\n            name: user.name,\n            isEmailVerified: user.isEmailVerified,\n          },\n        });\n        \n      } catch (emailError) {\n        console.error('Failed to send verification email:', emailError);\n        \n        // If email sending fails, we still created the user, so let them know they can resend\n        if (emailError instanceof EmailServiceError) {\n          let errorMessage = 'Failed to send verification email. ';\n          \n          switch (emailError.code) {\n            case 'QUOTA_EXCEEDED':\n              errorMessage += 'Email service quota exceeded. Please try again later.';\n              break;\n            case 'INVALID_EMAIL':\n              errorMessage += 'Invalid email address provided.';\n              break;\n            case 'API_ERROR':\n              errorMessage += 'Email service error. Please try resending the verification code.';\n              break;\n            case 'NETWORK_ERROR':\n              errorMessage += 'Network error. Please check your connection and try resending.';\n              break;\n            default:\n              errorMessage += 'Please try resending the verification code.';\n          }\n          \n          return NextResponse.json({\n            success: true,\n            message: 'Account created successfully.',\n            requiresVerification: true,\n            emailError: errorMessage,\n            user: {\n              id: user.id,\n              email: user.email,\n              name: user.name,\n              isEmailVerified: user.isEmailVerified,\n            },\n          });\n        }\n        \n        // For unknown email errors, still return success but mention the issue\n        return NextResponse.json({\n          success: true,\n          message: 'Account created successfully.',\n          requiresVerification: true,\n          emailError: 'Failed to send verification email. Please try resending the verification code.',\n          user: {\n            id: user.id,\n            email: user.email,\n            name: user.name,\n            isEmailVerified: user.isEmailVerified,\n          },\n        });\n      }\n      \n    } catch (error) {\n      console.error('Sign up error:', error);\n      \n      if (error instanceof Error && error.message === 'User already exists') {\n        return NextResponse.json(\n          { error: 'An account with this email already exists' },\n          { status: 409 }\n        );\n      }\n      \n      return NextResponse.json(\n        { error: 'Internal server error' },\n        { status: 500 }\n      );\n    }\n  });\n}"],"names":["POST","request","withRateLimit","req","body","json","validation","validateInput","signUpSchema","success","NextResponse","error","errors","status","email","password","name","data","user","signUpUnverified","verificationCode","emailVerificationCodeService","generateCode","id","emailService","createEmailService","sendEmailWithRetry","console","log","message","requiresVerification","isEmailVerified","emailError","EmailServiceError","errorMessage","code","Error"],"mappings":";;;;+BAQsBA;;;eAAAA;;;wBARoB;sBACT;4BACW;4BACd;8CACe;8BACS;oCACnB;AAE5B,eAAeA,KAAKC,OAAoB;IAC7C,OAAOC,IAAAA,yBAAa,EAACD,SAAS,OAAOE;QACnC,IAAI;YACF,MAAMC,OAAO,MAAMD,IAAIE,IAAI;YAE3B,iBAAiB;YACjB,MAAMC,aAAaC,IAAAA,yBAAa,EAACC,wBAAY,EAAEJ;YAC/C,IAAI,CAACE,WAAWG,OAAO,EAAE;gBACvB,OAAOC,oBAAY,CAACL,IAAI,CACtB;oBAAEM,OAAO;oBAAqBC,QAAQN,WAAWM,MAAM;gBAAC,GACxD;oBAAEC,QAAQ;gBAAI;YAElB;YAEA,MAAM,EAAEC,KAAK,EAAEC,QAAQ,EAAEC,IAAI,EAAE,GAAGV,WAAWW,IAAI;YAEjD,yBAAyB;YACzB,MAAMC,OAAO,MAAMC,IAAAA,sBAAgB,EAACL,OAAOC,UAAUC;YAErD,6BAA6B;YAC7B,MAAMI,mBAAmB,MAAMC,0DAA4B,CAACC,YAAY,CAACJ,KAAKK,EAAE;YAEhF,0BAA0B;YAC1B,IAAI;gBACF,MAAMC,eAAeC,IAAAA,sCAAkB;gBACvC,MAAMC,IAAAA,gCAAkB,EAACF,cAAcV,OAAOM,kBAAkBJ;gBAEhEW,QAAQC,GAAG,CAAC,CAAC,2BAA2B,EAAEd,MAAM,UAAU,EAAEI,KAAKK,EAAE,EAAE;gBAErE,OAAOb,oBAAY,CAACL,IAAI,CAAC;oBACvBI,SAAS;oBACToB,SAAS;oBACTC,sBAAsB;oBACtBZ,MAAM;wBACJK,IAAIL,KAAKK,EAAE;wBACXT,OAAOI,KAAKJ,KAAK;wBACjBE,MAAME,KAAKF,IAAI;wBACfe,iBAAiBb,KAAKa,eAAe;oBACvC;gBACF;YAEF,EAAE,OAAOC,YAAY;gBACnBL,QAAQhB,KAAK,CAAC,sCAAsCqB;gBAEpD,sFAAsF;gBACtF,IAAIA,sBAAsBC,+BAAiB,EAAE;oBAC3C,IAAIC,eAAe;oBAEnB,OAAQF,WAAWG,IAAI;wBACrB,KAAK;4BACHD,gBAAgB;4BAChB;wBACF,KAAK;4BACHA,gBAAgB;4BAChB;wBACF,KAAK;4BACHA,gBAAgB;4BAChB;wBACF,KAAK;4BACHA,gBAAgB;4BAChB;wBACF;4BACEA,gBAAgB;oBACpB;oBAEA,OAAOxB,oBAAY,CAACL,IAAI,CAAC;wBACvBI,SAAS;wBACToB,SAAS;wBACTC,sBAAsB;wBACtBE,YAAYE;wBACZhB,MAAM;4BACJK,IAAIL,KAAKK,EAAE;4BACXT,OAAOI,KAAKJ,KAAK;4BACjBE,MAAME,KAAKF,IAAI;4BACfe,iBAAiBb,KAAKa,eAAe;wBACvC;oBACF;gBACF;gBAEA,uEAAuE;gBACvE,OAAOrB,oBAAY,CAACL,IAAI,CAAC;oBACvBI,SAAS;oBACToB,SAAS;oBACTC,sBAAsB;oBACtBE,YAAY;oBACZd,MAAM;wBACJK,IAAIL,KAAKK,EAAE;wBACXT,OAAOI,KAAKJ,KAAK;wBACjBE,MAAME,KAAKF,IAAI;wBACfe,iBAAiBb,KAAKa,eAAe;oBACvC;gBACF;YACF;QAEF,EAAE,OAAOpB,OAAO;YACdgB,QAAQhB,KAAK,CAAC,kBAAkBA;YAEhC,IAAIA,iBAAiByB,SAASzB,MAAMkB,OAAO,KAAK,uBAAuB;gBACrE,OAAOnB,oBAAY,CAACL,IAAI,CACtB;oBAAEM,OAAO;gBAA4C,GACrD;oBAAEE,QAAQ;gBAAI;YAElB;YAEA,OAAOH,oBAAY,CAACL,IAAI,CACtB;gBAAEM,OAAO;YAAwB,GACjC;gBAAEE,QAAQ;YAAI;QAElB;IACF;AACF"}