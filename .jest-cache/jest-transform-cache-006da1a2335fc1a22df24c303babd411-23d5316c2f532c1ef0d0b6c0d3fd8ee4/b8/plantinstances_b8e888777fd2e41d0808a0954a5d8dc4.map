{"version":3,"sources":["/Users/stefanbekker/projects/fancy-planties/src/lib/db/queries/plant-instances.ts"],"sourcesContent":["import { eq, and, desc, asc, isNotNull, lte, gte, ilike, or, sql, inArray } from 'drizzle-orm';\nimport { db } from '../index';\nimport { plantInstances, plants, type PlantInstance, type NewPlantInstance } from '../schema';\nimport type { \n  PlantInstanceFilter, \n  PlantInstanceSearch,\n  BulkPlantInstanceOperation \n} from '@/lib/validation/plant-schemas';\nimport type { \n  EnhancedPlantInstance, \n  PlantInstanceSearchResult,\n  CareDashboardData,\n  BulkOperationResult,\n  PlantInstanceOperationResult\n} from '@/lib/types/plant-instance-types';\nimport { plantInstanceHelpers } from '@/lib/types/plant-instance-types';\n\n// Plant instance CRUD operations\nexport class PlantInstanceQueries {\n  // Create a new plant instance\n  static async create(instanceData: NewPlantInstance): Promise<PlantInstance> {\n    try {\n      const [instance] = await db.insert(plantInstances).values(instanceData).returning();\n      return instance;\n    } catch (error) {\n      console.error('Failed to create plant instance:', error);\n      throw new Error('Failed to create plant instance');\n    }\n  }\n\n  // Get plant instance by ID with plant taxonomy data\n  static async getById(id: number): Promise<(PlantInstance & { plant: typeof plants.$inferSelect }) | null> {\n    try {\n      const [instance] = await db\n        .select()\n        .from(plantInstances)\n        .leftJoin(plants, eq(plantInstances.plantId, plants.id))\n        .where(eq(plantInstances.id, id));\n      \n      if (!instance) return null;\n      \n      return {\n        ...instance.plant_instances,\n        plant: instance.plants!\n      };\n    } catch (error) {\n      console.error('Failed to get plant instance by ID:', error);\n      throw new Error('Failed to get plant instance');\n    }\n  }\n\n  // Get all plant instances for a user\n  static async getByUserId(userId: number, activeOnly: boolean = true): Promise<(PlantInstance & { plant: typeof plants.$inferSelect })[]> {\n    try {\n      const conditions = [eq(plantInstances.userId, userId)];\n      if (activeOnly) {\n        conditions.push(eq(plantInstances.isActive, true));\n      }\n\n      const instances = await db\n        .select()\n        .from(plantInstances)\n        .leftJoin(plants, eq(plantInstances.plantId, plants.id))\n        .where(and(...conditions))\n        .orderBy(desc(plantInstances.createdAt));\n\n      return instances.map(instance => ({\n        ...instance.plant_instances,\n        plant: instance.plants!\n      }));\n    } catch (error) {\n      console.error('Failed to get plant instances by user ID:', error);\n      throw new Error('Failed to get plant instances');\n    }\n  }\n\n  // Get plant instances with overdue fertilizer\n  static async getOverdueFertilizer(userId: number): Promise<(PlantInstance & { plant: typeof plants.$inferSelect })[]> {\n    try {\n      const now = new Date();\n      const instances = await db\n        .select()\n        .from(plantInstances)\n        .leftJoin(plants, eq(plantInstances.plantId, plants.id))\n        .where(\n          and(\n            eq(plantInstances.userId, userId),\n            eq(plantInstances.isActive, true),\n            isNotNull(plantInstances.fertilizerDue),\n            lte(plantInstances.fertilizerDue, now)\n          )\n        )\n        .orderBy(asc(plantInstances.fertilizerDue));\n\n      return instances.map(instance => ({\n        ...instance.plant_instances,\n        plant: instance.plants!\n      }));\n    } catch (error) {\n      console.error('Failed to get overdue fertilizer instances:', error);\n      throw new Error('Failed to get overdue fertilizer instances');\n    }\n  }\n\n  // Get plant instances with fertilizer due soon\n  static async getFertilizerDueSoon(userId: number, daysAhead: number = 7): Promise<(PlantInstance & { plant: typeof plants.$inferSelect })[]> {\n    try {\n      const now = new Date();\n      const futureDate = new Date();\n      futureDate.setDate(now.getDate() + daysAhead);\n\n      const instances = await db\n        .select()\n        .from(plantInstances)\n        .leftJoin(plants, eq(plantInstances.plantId, plants.id))\n        .where(\n          and(\n            eq(plantInstances.userId, userId),\n            eq(plantInstances.isActive, true),\n            isNotNull(plantInstances.fertilizerDue),\n            gte(plantInstances.fertilizerDue, now),\n            lte(plantInstances.fertilizerDue, futureDate)\n          )\n        )\n        .orderBy(asc(plantInstances.fertilizerDue));\n\n      return instances.map(instance => ({\n        ...instance.plant_instances,\n        plant: instance.plants!\n      }));\n    } catch (error) {\n      console.error('Failed to get fertilizer due soon instances:', error);\n      throw new Error('Failed to get fertilizer due soon instances');\n    }\n  }\n\n  // Search plant instances by nickname, location, or notes\n  static async search(userId: number, query: string): Promise<(PlantInstance & { plant: typeof plants.$inferSelect })[]> {\n    try {\n      const searchTerm = `%${query.toLowerCase()}%`;\n      \n      const instances = await db\n        .select()\n        .from(plantInstances)\n        .leftJoin(plants, eq(plantInstances.plantId, plants.id))\n        .where(\n          and(\n            eq(plantInstances.userId, userId),\n            eq(plantInstances.isActive, true),\n            or(\n              ilike(plantInstances.nickname, searchTerm),\n              ilike(plantInstances.location, searchTerm),\n              ilike(plantInstances.notes, searchTerm),\n              ilike(plants.commonName, searchTerm),\n              ilike(plants.genus, searchTerm),\n              ilike(plants.species, searchTerm)\n            )\n          )\n        )\n        .orderBy(desc(plantInstances.createdAt));\n\n      return instances.map(instance => ({\n        ...instance.plant_instances,\n        plant: instance.plants!\n      }));\n    } catch (error) {\n      console.error('Failed to search plant instances:', error);\n      throw new Error('Failed to search plant instances');\n    }\n  }\n\n  // Update plant instance\n  static async update(id: number, instanceData: Partial<NewPlantInstance>): Promise<PlantInstance> {\n    try {\n      const [instance] = await db\n        .update(plantInstances)\n        .set({ ...instanceData, updatedAt: new Date() })\n        .where(eq(plantInstances.id, id))\n        .returning();\n      \n      if (!instance) {\n        throw new Error('Plant instance not found');\n      }\n      \n      return instance;\n    } catch (error) {\n      console.error('Failed to update plant instance:', error);\n      throw new Error('Failed to update plant instance');\n    }\n  }\n\n  // Log fertilizer application and calculate next due date\n  static async logFertilizer(id: number, fertilizerDate?: Date): Promise<PlantInstance> {\n    try {\n      const now = fertilizerDate || new Date();\n      \n      // Get current instance to calculate next due date\n      const [currentInstance] = await db\n        .select()\n        .from(plantInstances)\n        .where(eq(plantInstances.id, id));\n      \n      if (!currentInstance) {\n        throw new Error('Plant instance not found');\n      }\n\n      // Calculate next fertilizer due date based on schedule\n      let nextDue: Date | null = null;\n      if (currentInstance.fertilizerSchedule) {\n        const scheduleMatch = currentInstance.fertilizerSchedule.match(/(\\d+)\\s*(day|week|month)s?/i);\n        if (scheduleMatch) {\n          const [, amount, unit] = scheduleMatch;\n          nextDue = new Date(now);\n          \n          switch (unit.toLowerCase()) {\n            case 'day':\n              nextDue.setDate(nextDue.getDate() + parseInt(amount, 10));\n              break;\n            case 'week':\n              nextDue.setDate(nextDue.getDate() + (parseInt(amount, 10) * 7));\n              break;\n            case 'month':\n              nextDue.setMonth(nextDue.getMonth() + parseInt(amount, 10));\n              break;\n          }\n        }\n      }\n\n      const [instance] = await db\n        .update(plantInstances)\n        .set({\n          lastFertilized: now,\n          fertilizerDue: nextDue,\n          updatedAt: new Date()\n        })\n        .where(eq(plantInstances.id, id))\n        .returning();\n      \n      return instance;\n    } catch (error) {\n      console.error('Failed to log fertilizer:', error);\n      throw new Error('Failed to log fertilizer');\n    }\n  }\n\n  // Log repotting\n  static async logRepot(id: number, repotDate?: Date, notes?: string): Promise<PlantInstance> {\n    try {\n      const now = repotDate || new Date();\n      \n      const updateData: Partial<NewPlantInstance> = {\n        lastRepot: now,\n        updatedAt: new Date()\n      };\n\n      if (notes) {\n        // Get current instance to append notes\n        const [currentInstance] = await db\n          .select()\n          .from(plantInstances)\n          .where(eq(plantInstances.id, id));\n        \n        if (currentInstance) {\n          const existingNotes = currentInstance.notes || '';\n          const repotNote = `Repotted on ${now.toDateString()}: ${notes}`;\n          updateData.notes = existingNotes ? `${existingNotes}\\n${repotNote}` : repotNote;\n        }\n      }\n\n      const [instance] = await db\n        .update(plantInstances)\n        .set(updateData)\n        .where(eq(plantInstances.id, id))\n        .returning();\n      \n      if (!instance) {\n        throw new Error('Plant instance not found');\n      }\n      \n      return instance;\n    } catch (error) {\n      console.error('Failed to log repot:', error);\n      throw new Error('Failed to log repot');\n    }\n  }\n\n  // Deactivate plant instance (soft delete)\n  static async deactivate(id: number): Promise<PlantInstance> {\n    try {\n      const [instance] = await db\n        .update(plantInstances)\n        .set({ isActive: false, updatedAt: new Date() })\n        .where(eq(plantInstances.id, id))\n        .returning();\n      \n      if (!instance) {\n        throw new Error('Plant instance not found');\n      }\n      \n      return instance;\n    } catch (error) {\n      console.error('Failed to deactivate plant instance:', error);\n      throw new Error('Failed to deactivate plant instance');\n    }\n  }\n\n  // Reactivate plant instance\n  static async reactivate(id: number): Promise<PlantInstance> {\n    try {\n      const [instance] = await db\n        .update(plantInstances)\n        .set({ isActive: true, updatedAt: new Date() })\n        .where(eq(plantInstances.id, id))\n        .returning();\n      \n      if (!instance) {\n        throw new Error('Plant instance not found');\n      }\n      \n      return instance;\n    } catch (error) {\n      console.error('Failed to reactivate plant instance:', error);\n      throw new Error('Failed to reactivate plant instance');\n    }\n  }\n\n  // Delete plant instance permanently\n  static async delete(id: number): Promise<boolean> {\n    try {\n      const result = await db.delete(plantInstances).where(eq(plantInstances.id, id));\n      return result.length > 0;\n    } catch (error) {\n      console.error('Failed to delete plant instance:', error);\n      throw new Error('Failed to delete plant instance');\n    }\n  }\n\n  // Get care statistics for a user\n  static async getCareStats(userId: number): Promise<{\n    totalPlants: number;\n    activePlants: number;\n    overdueFertilizer: number;\n    dueSoon: number;\n  }> {\n    try {\n      const now = new Date();\n      const weekFromNow = new Date();\n      weekFromNow.setDate(now.getDate() + 7);\n\n      const [stats] = await db\n        .select({\n          totalPlants: sql<number>`count(*)`,\n          activePlants: sql<number>`count(*) filter (where ${plantInstances.isActive} = true)`,\n          overdueFertilizer: sql<number>`count(*) filter (where ${plantInstances.isActive} = true and ${plantInstances.fertilizerDue} <= ${now})`,\n          dueSoon: sql<number>`count(*) filter (where ${plantInstances.isActive} = true and ${plantInstances.fertilizerDue} > ${now} and ${plantInstances.fertilizerDue} <= ${weekFromNow})`\n        })\n        .from(plantInstances)\n        .where(eq(plantInstances.userId, userId));\n\n      return stats;\n    } catch (error) {\n      console.error('Failed to get care stats:', error);\n      throw new Error('Failed to get care stats');\n    }\n  }\n\n  // Enhanced search with filters\n  static async searchWithFilters(searchParams: PlantInstanceSearch): Promise<PlantInstanceSearchResult> {\n    try {\n      const startTime = Date.now();\n      const { query, userId, activeOnly, limit, offset } = searchParams;\n      const searchTerm = `%${query.toLowerCase()}%`;\n      \n      const conditions = [eq(plantInstances.userId, userId)];\n      \n      if (activeOnly) {\n        conditions.push(eq(plantInstances.isActive, true));\n      }\n\n      // Add search conditions\n      conditions.push(\n        or(\n          ilike(plantInstances.nickname, searchTerm),\n          ilike(plantInstances.location, searchTerm),\n          ilike(plantInstances.notes, searchTerm),\n          ilike(plants.commonName, searchTerm),\n          ilike(plants.genus, searchTerm),\n          ilike(plants.species, searchTerm),\n          ilike(plants.family, searchTerm)\n        )!\n      );\n\n      // Get total count\n      const [countResult] = await db\n        .select({ count: sql<number>`count(*)` })\n        .from(plantInstances)\n        .leftJoin(plants, eq(plantInstances.plantId, plants.id))\n        .where(and(...conditions));\n\n      const totalCount = countResult.count;\n\n      // Get instances with plant data\n      const instances = await db\n        .select()\n        .from(plantInstances)\n        .leftJoin(plants, eq(plantInstances.plantId, plants.id))\n        .where(and(...conditions))\n        .orderBy(desc(plantInstances.createdAt))\n        .limit(limit)\n        .offset(offset);\n\n      const enhancedInstances = instances.map(instance => \n        plantInstanceHelpers.enhancePlantInstance(instance.plant_instances, instance.plants!)\n      );\n\n      const searchTime = Date.now() - startTime;\n\n      return {\n        instances: enhancedInstances,\n        totalCount,\n        hasMore: offset + limit < totalCount,\n        searchTime,\n        filters: {\n          ...searchParams,\n          overdueOnly: false, // Add missing field\n        },\n      };\n    } catch (error) {\n      console.error('Failed to search plant instances with filters:', error);\n      throw new Error('Failed to search plant instances');\n    }\n  }\n\n  // Advanced filtering\n  static async getWithFilters(filterParams: PlantInstanceFilter): Promise<PlantInstanceSearchResult> {\n    try {\n      const startTime = Date.now();\n      const { \n        userId, \n        location, \n        plantId, \n        isActive, \n        overdueOnly, \n        dueSoonDays,\n        createdAfter,\n        createdBefore,\n        lastFertilizedAfter,\n        lastFertilizedBefore,\n        limit, \n        offset \n      } = filterParams;\n\n      const conditions = [eq(plantInstances.userId, userId)];\n      \n      // Apply filters\n      if (location) {\n        conditions.push(ilike(plantInstances.location, `%${location}%`));\n      }\n      \n      if (plantId) {\n        conditions.push(eq(plantInstances.plantId, plantId));\n      }\n      \n      if (isActive !== undefined) {\n        conditions.push(eq(plantInstances.isActive, isActive));\n      }\n\n      if (overdueOnly) {\n        const now = new Date();\n        conditions.push(\n          and(\n            isNotNull(plantInstances.fertilizerDue),\n            lte(plantInstances.fertilizerDue, now)\n          )!\n        );\n      }\n\n      if (dueSoonDays) {\n        const now = new Date();\n        const futureDate = new Date();\n        futureDate.setDate(now.getDate() + dueSoonDays);\n        conditions.push(\n          and(\n            isNotNull(plantInstances.fertilizerDue),\n            gte(plantInstances.fertilizerDue, now),\n            lte(plantInstances.fertilizerDue, futureDate)\n          )!\n        );\n      }\n\n      if (createdAfter) {\n        conditions.push(gte(plantInstances.createdAt, createdAfter));\n      }\n\n      if (createdBefore) {\n        conditions.push(lte(plantInstances.createdAt, createdBefore));\n      }\n\n      if (lastFertilizedAfter) {\n        conditions.push(\n          and(\n            isNotNull(plantInstances.lastFertilized),\n            gte(plantInstances.lastFertilized, lastFertilizedAfter)\n          )!\n        );\n      }\n\n      if (lastFertilizedBefore) {\n        conditions.push(\n          and(\n            isNotNull(plantInstances.lastFertilized),\n            lte(plantInstances.lastFertilized, lastFertilizedBefore)\n          )!\n        );\n      }\n\n      // Get total count\n      const [countResult] = await db\n        .select({ count: sql<number>`count(*)` })\n        .from(plantInstances)\n        .leftJoin(plants, eq(plantInstances.plantId, plants.id))\n        .where(and(...conditions));\n\n      const totalCount = countResult.count;\n\n      // Get instances with plant data\n      const instances = await db\n        .select()\n        .from(plantInstances)\n        .leftJoin(plants, eq(plantInstances.plantId, plants.id))\n        .where(and(...conditions))\n        .orderBy(\n          overdueOnly || dueSoonDays \n            ? asc(plantInstances.fertilizerDue)\n            : desc(plantInstances.createdAt)\n        )\n        .limit(limit)\n        .offset(offset);\n\n      const enhancedInstances = instances.map(instance => \n        plantInstanceHelpers.enhancePlantInstance(instance.plant_instances, instance.plants!)\n      );\n\n      const searchTime = Date.now() - startTime;\n\n      return {\n        instances: enhancedInstances,\n        totalCount,\n        hasMore: offset + limit < totalCount,\n        searchTime,\n        filters: filterParams,\n      };\n    } catch (error) {\n      console.error('Failed to get plant instances with filters:', error);\n      throw new Error('Failed to get plant instances with filters');\n    }\n  }\n\n  // Get enhanced plant instances for a user\n  static async getEnhancedByUserId(userId: number, activeOnly: boolean = true): Promise<EnhancedPlantInstance[]> {\n    try {\n      const conditions = [eq(plantInstances.userId, userId)];\n      if (activeOnly) {\n        conditions.push(eq(plantInstances.isActive, true));\n      }\n\n      const instances = await db\n        .select()\n        .from(plantInstances)\n        .leftJoin(plants, eq(plantInstances.plantId, plants.id))\n        .where(and(...conditions))\n        .orderBy(desc(plantInstances.createdAt));\n\n      return instances.map(instance => \n        plantInstanceHelpers.enhancePlantInstance(instance.plant_instances, instance.plants!)\n      );\n    } catch (error) {\n      console.error('Failed to get enhanced plant instances:', error);\n      throw new Error('Failed to get enhanced plant instances');\n    }\n  }\n\n  // Get care dashboard data\n  static async getCareDashboardData(userId: number): Promise<CareDashboardData> {\n    try {\n      const now = new Date();\n      const tomorrow = new Date();\n      tomorrow.setDate(now.getDate() + 1);\n      const weekFromNow = new Date();\n      weekFromNow.setDate(now.getDate() + 7);\n\n      // Get all active instances with plant data\n      const instances = await this.getEnhancedByUserId(userId, true);\n\n      // Categorize by care status\n      const overdue = instances.filter(instance => instance.careStatus === 'overdue');\n      const dueToday = instances.filter(instance => instance.careStatus === 'due_today');\n      const dueSoon = instances.filter(instance => instance.careStatus === 'due_soon');\n      \n      // Get recently cared for plants (fertilized in last 7 days)\n      const recentlyCared = instances.filter(instance => {\n        if (!instance.lastFertilized) return false;\n        const daysSince = plantInstanceHelpers.calculateDaysSinceLastFertilized(instance.lastFertilized);\n        return daysSince !== null && daysSince <= 7;\n      });\n\n      // Calculate care streak (consecutive days with care activity)\n      const careStreakDays = await this.calculateCareStreak(userId);\n\n      return {\n        overdue: plantInstanceHelpers.sortByCareUrgency(overdue),\n        dueToday: plantInstanceHelpers.sortByCareUrgency(dueToday),\n        dueSoon: plantInstanceHelpers.sortByCareUrgency(dueSoon),\n        recentlyCared,\n        statistics: {\n          totalActivePlants: instances.length,\n          overdueCount: overdue.length,\n          dueTodayCount: dueToday.length,\n          dueSoonCount: dueSoon.length,\n          careStreakDays,\n        },\n      };\n    } catch (error) {\n      console.error('Failed to get care dashboard data:', error);\n      throw new Error('Failed to get care dashboard data');\n    }\n  }\n\n  // Calculate care streak\n  static async calculateCareStreak(userId: number): Promise<number> {\n    try {\n      // This is a simplified implementation\n      // In a real app, you might want to track care events in a separate table\n      const instances = await db\n        .select({\n          lastFertilized: plantInstances.lastFertilized,\n        })\n        .from(plantInstances)\n        .where(\n          and(\n            eq(plantInstances.userId, userId),\n            eq(plantInstances.isActive, true),\n            isNotNull(plantInstances.lastFertilized)\n          )\n        )\n        .orderBy(desc(plantInstances.lastFertilized));\n\n      if (instances.length === 0) return 0;\n\n      // Simple streak calculation based on recent fertilizer applications\n      let streak = 0;\n      const now = new Date();\n      \n      for (const instance of instances) {\n        if (!instance.lastFertilized) break;\n        \n        const daysSince = Math.floor(\n          (now.getTime() - instance.lastFertilized.getTime()) / (1000 * 60 * 60 * 24)\n        );\n        \n        if (daysSince <= 1) {\n          streak = Math.max(streak, 1);\n        }\n      }\n\n      return streak;\n    } catch (error) {\n      console.error('Failed to calculate care streak:', error);\n      return 0;\n    }\n  }\n\n  // Bulk operations\n  static async bulkOperation(operation: BulkPlantInstanceOperation): Promise<BulkOperationResult> {\n    try {\n      const { plantInstanceIds, operation: op, fertilizerDate, notes } = operation;\n      const results: BulkOperationResult['results'] = [];\n      let successCount = 0;\n      let failureCount = 0;\n\n      for (const id of plantInstanceIds) {\n        try {\n          let result: PlantInstance;\n          \n          switch (op) {\n            case 'activate':\n              result = await this.reactivate(id);\n              break;\n            case 'deactivate':\n              result = await this.deactivate(id);\n              break;\n            case 'delete':\n              await this.delete(id);\n              result = { id } as PlantInstance; // Placeholder for deleted item\n              break;\n            case 'fertilize':\n              result = await this.logFertilizer(id, fertilizerDate);\n              break;\n            default:\n              throw new Error(`Unknown operation: ${op}`);\n          }\n\n          results.push({ plantInstanceId: id, success: true });\n          successCount++;\n        } catch (error) {\n          results.push({ \n            plantInstanceId: id, \n            success: false, \n            error: error instanceof Error ? error.message : 'Unknown error'\n          });\n          failureCount++;\n        }\n      }\n\n      return {\n        success: successCount > 0,\n        successCount,\n        failureCount,\n        results,\n      };\n    } catch (error) {\n      console.error('Failed to perform bulk operation:', error);\n      throw new Error('Failed to perform bulk operation');\n    }\n  }\n\n  // Get plant instances by location\n  static async getByLocation(userId: number, location: string): Promise<EnhancedPlantInstance[]> {\n    try {\n      const instances = await db\n        .select()\n        .from(plantInstances)\n        .leftJoin(plants, eq(plantInstances.plantId, plants.id))\n        .where(\n          and(\n            eq(plantInstances.userId, userId),\n            eq(plantInstances.isActive, true),\n            ilike(plantInstances.location, `%${location}%`)\n          )\n        )\n        .orderBy(plantInstances.nickname);\n\n      return instances.map(instance => \n        plantInstanceHelpers.enhancePlantInstance(instance.plant_instances, instance.plants!)\n      );\n    } catch (error) {\n      console.error('Failed to get plant instances by location:', error);\n      throw new Error('Failed to get plant instances by location');\n    }\n  }\n\n  // Get unique locations for a user\n  static async getUserLocations(userId: number): Promise<string[]> {\n    try {\n      const locations = await db\n        .selectDistinct({ location: plantInstances.location })\n        .from(plantInstances)\n        .where(\n          and(\n            eq(plantInstances.userId, userId),\n            eq(plantInstances.isActive, true)\n          )\n        )\n        .orderBy(plantInstances.location);\n\n      return locations.map(l => l.location).filter(Boolean);\n    } catch (error) {\n      console.error('Failed to get user locations:', error);\n      throw new Error('Failed to get user locations');\n    }\n  }\n\n  // Get enhanced plant instance by ID\n  static async getEnhancedById(id: number): Promise<EnhancedPlantInstance | null> {\n    try {\n      const [instance] = await db\n        .select()\n        .from(plantInstances)\n        .leftJoin(plants, eq(plantInstances.plantId, plants.id))\n        .where(eq(plantInstances.id, id));\n      \n      if (!instance || !instance.plants) return null;\n      \n      return plantInstanceHelpers.enhancePlantInstance(instance.plant_instances, instance.plants);\n    } catch (error) {\n      console.error('Failed to get enhanced plant instance by ID:', error);\n      throw new Error('Failed to get enhanced plant instance');\n    }\n  }\n}"],"names":["PlantInstanceQueries","create","instanceData","instance","db","insert","plantInstances","values","returning","error","console","Error","getById","id","select","from","leftJoin","plants","eq","plantId","where","plant_instances","plant","getByUserId","userId","activeOnly","conditions","push","isActive","instances","and","orderBy","desc","createdAt","map","getOverdueFertilizer","now","Date","isNotNull","fertilizerDue","lte","asc","getFertilizerDueSoon","daysAhead","futureDate","setDate","getDate","gte","search","query","searchTerm","toLowerCase","or","ilike","nickname","location","notes","commonName","genus","species","update","set","updatedAt","logFertilizer","fertilizerDate","currentInstance","nextDue","fertilizerSchedule","scheduleMatch","match","amount","unit","parseInt","setMonth","getMonth","lastFertilized","logRepot","repotDate","updateData","lastRepot","existingNotes","repotNote","toDateString","deactivate","reactivate","delete","result","length","getCareStats","weekFromNow","stats","totalPlants","sql","activePlants","overdueFertilizer","dueSoon","searchWithFilters","searchParams","startTime","limit","offset","family","countResult","count","totalCount","enhancedInstances","plantInstanceHelpers","enhancePlantInstance","searchTime","hasMore","filters","overdueOnly","getWithFilters","filterParams","dueSoonDays","createdAfter","createdBefore","lastFertilizedAfter","lastFertilizedBefore","undefined","getEnhancedByUserId","getCareDashboardData","tomorrow","overdue","filter","careStatus","dueToday","recentlyCared","daysSince","calculateDaysSinceLastFertilized","careStreakDays","calculateCareStreak","sortByCareUrgency","statistics","totalActivePlants","overdueCount","dueTodayCount","dueSoonCount","streak","Math","floor","getTime","max","bulkOperation","operation","plantInstanceIds","op","results","successCount","failureCount","plantInstanceId","success","message","getByLocation","getUserLocations","locations","selectDistinct","l","Boolean","getEnhancedById"],"mappings":"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"}