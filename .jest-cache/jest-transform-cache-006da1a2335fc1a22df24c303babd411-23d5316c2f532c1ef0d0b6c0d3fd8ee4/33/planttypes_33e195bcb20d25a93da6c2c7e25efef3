b15a012a90c225c1e22a2c28b5879d63
"use strict";

/* istanbul ignore next */
function cov_cr2bsrwva() {
  var path = "/Users/stefanbekker/projects/fancy-planties/src/lib/types/plant-types.ts";
  var hash = "bdd529d61720f3ee0d0d6effdbe123ea7e45d3d3";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/stefanbekker/projects/fancy-planties/src/lib/types/plant-types.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 28
        }
      },
      "3": {
        start: {
          line: 11,
          column: 21
        },
        end: {
          line: 51,
          column: 1
        }
      },
      "4": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 69
        }
      },
      "5": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 18,
          column: 49
        }
      },
      "6": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 69
        }
      },
      "7": {
        start: {
          line: 25,
          column: 28
        },
        end: {
          line: 30,
          column: 9
        }
      },
      "8": {
        start: {
          line: 33,
          column: 8
        },
        end: {
          line: 33,
          column: 201
        }
      },
      "9": {
        start: {
          line: 37,
          column: 25
        },
        end: {
          line: 43,
          column: 9
        }
      },
      "10": {
        start: {
          line: 45,
          column: 32
        },
        end: {
          line: 45,
          column: 113
        }
      },
      "11": {
        start: {
          line: 45,
          column: 97
        },
        end: {
          line: 45,
          column: 112
        }
      },
      "12": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 46,
          column: 42
        }
      },
      "13": {
        start: {
          line: 47,
          column: 8
        },
        end: {
          line: 49,
          column: 10
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 13,
            column: 23
          },
          end: {
            line: 13,
            column: 24
          }
        },
        loc: {
          start: {
            line: 13,
            column: 32
          },
          end: {
            line: 15,
            column: 5
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 17,
            column: 26
          },
          end: {
            line: 17,
            column: 27
          }
        },
        loc: {
          start: {
            line: 17,
            column: 35
          },
          end: {
            line: 19,
            column: 5
          }
        },
        line: 17
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 21,
            column: 24
          },
          end: {
            line: 21,
            column: 25
          }
        },
        loc: {
          start: {
            line: 21,
            column: 33
          },
          end: {
            line: 23,
            column: 5
          }
        },
        line: 21
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 25,
            column: 18
          },
          end: {
            line: 25,
            column: 19
          }
        },
        loc: {
          start: {
            line: 25,
            column: 28
          },
          end: {
            line: 30,
            column: 9
          }
        },
        line: 25
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 32,
            column: 27
          },
          end: {
            line: 32,
            column: 28
          }
        },
        loc: {
          start: {
            line: 32,
            column: 45
          },
          end: {
            line: 34,
            column: 5
          }
        },
        line: 32
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 36,
            column: 28
          },
          end: {
            line: 36,
            column: 29
          }
        },
        loc: {
          start: {
            line: 36,
            column: 37
          },
          end: {
            line: 50,
            column: 5
          }
        },
        line: 36
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 45,
            column: 89
          },
          end: {
            line: 45,
            column: 90
          }
        },
        loc: {
          start: {
            line: 45,
            column: 97
          },
          end: {
            line: 45,
            column: 112
          }
        },
        line: 45
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 14,
            column: 15
          },
          end: {
            line: 14,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 14,
            column: 15
          },
          end: {
            line: 14,
            column: 31
          }
        }, {
          start: {
            line: 14,
            column: 35
          },
          end: {
            line: 14,
            column: 68
          }
        }],
        line: 14
      },
      "1": {
        loc: {
          start: {
            line: 33,
            column: 15
          },
          end: {
            line: 33,
            column: 200
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 33,
            column: 15
          },
          end: {
            line: 33,
            column: 74
          }
        }, {
          start: {
            line: 33,
            column: 78
          },
          end: {
            line: 33,
            column: 135
          }
        }, {
          start: {
            line: 33,
            column: 139
          },
          end: {
            line: 33,
            column: 200
          }
        }],
        line: 33
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/stefanbekker/projects/fancy-planties/src/lib/types/plant-types.ts"],
      sourcesContent: ["import type { Plant } from '@/lib/db/schema';\nimport type { PlantSuggestion, FuzzySearchConfig } from '@/lib/validation/plant-schemas';\n\n// Enhanced Plant interface with computed properties\nexport interface EnhancedPlant extends Plant {\n  // Computed display name\n  displayName: string;\n  // Scientific name (Genus species)\n  scientificName: string;\n  // Full taxonomy string\n  fullTaxonomy: string;\n  // Search relevance score (for search results)\n  relevanceScore?: number;\n  // Matched search terms (for highlighting)\n  matchedTerms?: string[];\n}\n\n// Plant with usage statistics\nexport interface PlantWithStats extends EnhancedPlant {\n  instanceCount: number;\n  propagationCount: number;\n  popularityScore: number;\n  lastUsed?: Date;\n}\n\n// Plant search result interface\nexport interface PlantSearchResult {\n  plants: PlantSuggestion[];\n  totalCount: number;\n  hasMore: boolean;\n  searchTime: number;\n  suggestions?: string[]; // Alternative search suggestions\n}\n\n// Plant taxonomy hierarchy for browsing\nexport interface TaxonomyHierarchy {\n  families: Array<{\n    name: string;\n    count: number;\n    genera: Array<{\n      name: string;\n      count: number;\n      species: Array<{\n        name: string;\n        count: number;\n        plants: PlantSuggestion[];\n      }>;\n    }>;\n  }>;\n}\n\n// Recent and popular plants for quick selection\nexport interface QuickSelectPlants {\n  recent: PlantSuggestion[];\n  popular: PlantSuggestion[];\n  verified: PlantSuggestion[];\n}\n\n// Plant creation context for tracking user contributions\nexport interface PlantCreationContext {\n  userId: number;\n  source: 'manual' | 'csv_import' | 'api_import';\n  confidence: number; // 0-1 scale for data quality\n  needsVerification: boolean;\n}\n\n// Fuzzy search match result\nexport interface FuzzyMatchResult {\n  item: PlantSuggestion;\n  score: number;\n  matches: Array<{\n    field: string;\n    value: string;\n    indices: number[][];\n  }>;\n}\n\n// Plant lookup options\nexport interface PlantLookupOptions {\n  fuzzyConfig?: Partial<FuzzySearchConfig>;\n  includeStats?: boolean;\n  userContext?: {\n    userId: number;\n    includeUserPlants?: boolean;\n  };\n  filters?: {\n    family?: string;\n    genus?: string;\n    isVerified?: boolean;\n    minPopularity?: number;\n  };\n}\n\n// Plant taxonomy validation result\nexport interface TaxonomyValidationResult {\n  isValid: boolean;\n  errors: string[];\n  warnings: string[];\n  suggestions: {\n    family?: string[];\n    genus?: string[];\n    species?: string[];\n    commonName?: string[];\n  };\n  duplicates: PlantSuggestion[];\n}\n\n// Plant import/export interfaces\nexport interface PlantImportData {\n  family: string;\n  genus: string;\n  species: string;\n  commonName: string;\n  careInstructions?: string;\n  source: string;\n  confidence: number;\n}\n\nexport interface PlantExportData extends Plant {\n  instanceCount: number;\n  propagationCount: number;\n  createdByName?: string;\n}\n\n// Utility type for plant operations\nexport type PlantOperation = 'create' | 'update' | 'delete' | 'search' | 'import';\n\n// Plant service response wrapper\nexport interface PlantServiceResponse<T> {\n  success: boolean;\n  data?: T;\n  error?: string;\n  metadata?: {\n    operation: PlantOperation;\n    timestamp: Date;\n    userId?: number;\n    performance?: {\n      queryTime: number;\n      cacheHit: boolean;\n    };\n  };\n}\n\n// Helper functions for plant data manipulation\nexport const plantHelpers = {\n  // Create display name from plant data\n  createDisplayName: (plant: Pick<Plant, 'commonName' | 'genus' | 'species'>): string => {\n    return plant.commonName || `${plant.genus} ${plant.species}`;\n  },\n\n  // Create scientific name\n  createScientificName: (plant: Pick<Plant, 'genus' | 'species'>): string => {\n    return `${plant.genus} ${plant.species}`;\n  },\n\n  // Create full taxonomy string\n  createFullTaxonomy: (plant: Pick<Plant, 'family' | 'genus' | 'species'>): string => {\n    return `${plant.family} > ${plant.genus} > ${plant.species}`;\n  },\n\n  // Enhance plant with computed properties\n  enhancePlant: (plant: Plant): EnhancedPlant => ({\n    ...plant,\n    displayName: plantHelpers.createDisplayName(plant),\n    scientificName: plantHelpers.createScientificName(plant),\n    fullTaxonomy: plantHelpers.createFullTaxonomy(plant),\n  }),\n\n  // Check if two plants are taxonomically identical\n  areTaxonomicallyEqual: (\n    plant1: Pick<Plant, 'family' | 'genus' | 'species'>,\n    plant2: Pick<Plant, 'family' | 'genus' | 'species'>\n  ): boolean => {\n    return (\n      plant1.family.toLowerCase() === plant2.family.toLowerCase() &&\n      plant1.genus.toLowerCase() === plant2.genus.toLowerCase() &&\n      plant1.species.toLowerCase() === plant2.species.toLowerCase()\n    );\n  },\n\n  // Generate search keywords for a plant\n  generateSearchKeywords: (plant: Plant): string[] => {\n    const keywords = [\n      plant.family.toLowerCase(),\n      plant.genus.toLowerCase(),\n      plant.species.toLowerCase(),\n      plant.commonName.toLowerCase(),\n      plantHelpers.createScientificName(plant).toLowerCase(),\n    ];\n\n    // Add common name variations (split by spaces, commas, etc.)\n    const commonNameParts = plant.commonName\n      .toLowerCase()\n      .split(/[\\s,\\-_]+/)\n      .filter(part => part.length > 2);\n    \n    keywords.push(...commonNameParts);\n\n    return [...new Set(keywords)]; // Remove duplicates\n  },\n};"],
      names: ["plantHelpers", "createDisplayName", "plant", "commonName", "genus", "species", "createScientificName", "createFullTaxonomy", "family", "enhancePlant", "displayName", "scientificName", "fullTaxonomy", "areTaxonomicallyEqual", "plant1", "plant2", "toLowerCase", "generateSearchKeywords", "keywords", "commonNameParts", "split", "filter", "part", "length", "push", "Set"],
      mappings: ";;;;+BAgJaA;;;eAAAA;;;AAAN,MAAMA,eAAe;IAC1B,sCAAsC;IACtCC,mBAAmB,CAACC;QAClB,OAAOA,MAAMC,UAAU,IAAI,GAAGD,MAAME,KAAK,CAAC,CAAC,EAAEF,MAAMG,OAAO,EAAE;IAC9D;IAEA,yBAAyB;IACzBC,sBAAsB,CAACJ;QACrB,OAAO,GAAGA,MAAME,KAAK,CAAC,CAAC,EAAEF,MAAMG,OAAO,EAAE;IAC1C;IAEA,8BAA8B;IAC9BE,oBAAoB,CAACL;QACnB,OAAO,GAAGA,MAAMM,MAAM,CAAC,GAAG,EAAEN,MAAME,KAAK,CAAC,GAAG,EAAEF,MAAMG,OAAO,EAAE;IAC9D;IAEA,yCAAyC;IACzCI,cAAc,CAACP,QAAiC,CAAA;YAC9C,GAAGA,KAAK;YACRQ,aAAaV,aAAaC,iBAAiB,CAACC;YAC5CS,gBAAgBX,aAAaM,oBAAoB,CAACJ;YAClDU,cAAcZ,aAAaO,kBAAkB,CAACL;QAChD,CAAA;IAEA,kDAAkD;IAClDW,uBAAuB,CACrBC,QACAC;QAEA,OACED,OAAON,MAAM,CAACQ,WAAW,OAAOD,OAAOP,MAAM,CAACQ,WAAW,MACzDF,OAAOV,KAAK,CAACY,WAAW,OAAOD,OAAOX,KAAK,CAACY,WAAW,MACvDF,OAAOT,OAAO,CAACW,WAAW,OAAOD,OAAOV,OAAO,CAACW,WAAW;IAE/D;IAEA,uCAAuC;IACvCC,wBAAwB,CAACf;QACvB,MAAMgB,WAAW;YACfhB,MAAMM,MAAM,CAACQ,WAAW;YACxBd,MAAME,KAAK,CAACY,WAAW;YACvBd,MAAMG,OAAO,CAACW,WAAW;YACzBd,MAAMC,UAAU,CAACa,WAAW;YAC5BhB,aAAaM,oBAAoB,CAACJ,OAAOc,WAAW;SACrD;QAED,6DAA6D;QAC7D,MAAMG,kBAAkBjB,MAAMC,UAAU,CACrCa,WAAW,GACXI,KAAK,CAAC,aACNC,MAAM,CAACC,CAAAA,OAAQA,KAAKC,MAAM,GAAG;QAEhCL,SAASM,IAAI,IAAIL;QAEjB,OAAO;eAAI,IAAIM,IAAIP;SAAU,EAAE,oBAAoB;IACrD;AACF"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "bdd529d61720f3ee0d0d6effdbe123ea7e45d3d3"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_cr2bsrwva = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_cr2bsrwva();
cov_cr2bsrwva().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_cr2bsrwva().s[1]++;
Object.defineProperty(exports, "plantHelpers", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_cr2bsrwva().f[0]++;
    cov_cr2bsrwva().s[2]++;
    return plantHelpers;
  }
});
const plantHelpers =
/* istanbul ignore next */
(cov_cr2bsrwva().s[3]++, {
  // Create display name from plant data
  createDisplayName: plant => {
    /* istanbul ignore next */
    cov_cr2bsrwva().f[1]++;
    cov_cr2bsrwva().s[4]++;
    return /* istanbul ignore next */(cov_cr2bsrwva().b[0][0]++, plant.commonName) ||
    /* istanbul ignore next */
    (cov_cr2bsrwva().b[0][1]++, `${plant.genus} ${plant.species}`);
  },
  // Create scientific name
  createScientificName: plant => {
    /* istanbul ignore next */
    cov_cr2bsrwva().f[2]++;
    cov_cr2bsrwva().s[5]++;
    return `${plant.genus} ${plant.species}`;
  },
  // Create full taxonomy string
  createFullTaxonomy: plant => {
    /* istanbul ignore next */
    cov_cr2bsrwva().f[3]++;
    cov_cr2bsrwva().s[6]++;
    return `${plant.family} > ${plant.genus} > ${plant.species}`;
  },
  // Enhance plant with computed properties
  enhancePlant: plant => {
    /* istanbul ignore next */
    cov_cr2bsrwva().f[4]++;
    cov_cr2bsrwva().s[7]++;
    return {
      ...plant,
      displayName: plantHelpers.createDisplayName(plant),
      scientificName: plantHelpers.createScientificName(plant),
      fullTaxonomy: plantHelpers.createFullTaxonomy(plant)
    };
  },
  // Check if two plants are taxonomically identical
  areTaxonomicallyEqual: (plant1, plant2) => {
    /* istanbul ignore next */
    cov_cr2bsrwva().f[5]++;
    cov_cr2bsrwva().s[8]++;
    return /* istanbul ignore next */(cov_cr2bsrwva().b[1][0]++, plant1.family.toLowerCase() === plant2.family.toLowerCase()) &&
    /* istanbul ignore next */
    (cov_cr2bsrwva().b[1][1]++, plant1.genus.toLowerCase() === plant2.genus.toLowerCase()) &&
    /* istanbul ignore next */
    (cov_cr2bsrwva().b[1][2]++, plant1.species.toLowerCase() === plant2.species.toLowerCase());
  },
  // Generate search keywords for a plant
  generateSearchKeywords: plant => {
    /* istanbul ignore next */
    cov_cr2bsrwva().f[6]++;
    const keywords =
    /* istanbul ignore next */
    (cov_cr2bsrwva().s[9]++, [plant.family.toLowerCase(), plant.genus.toLowerCase(), plant.species.toLowerCase(), plant.commonName.toLowerCase(), plantHelpers.createScientificName(plant).toLowerCase()]);
    // Add common name variations (split by spaces, commas, etc.)
    const commonNameParts =
    /* istanbul ignore next */
    (cov_cr2bsrwva().s[10]++, plant.commonName.toLowerCase().split(/[\s,\-_]+/).filter(part => {
      /* istanbul ignore next */
      cov_cr2bsrwva().f[7]++;
      cov_cr2bsrwva().s[11]++;
      return part.length > 2;
    }));
    /* istanbul ignore next */
    cov_cr2bsrwva().s[12]++;
    keywords.push(...commonNameParts);
    /* istanbul ignore next */
    cov_cr2bsrwva().s[13]++;
    return [...new Set(keywords)]; // Remove duplicates
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,