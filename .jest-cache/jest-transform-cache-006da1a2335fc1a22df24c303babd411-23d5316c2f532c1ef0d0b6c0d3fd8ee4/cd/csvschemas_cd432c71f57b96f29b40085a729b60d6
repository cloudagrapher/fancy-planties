f88d3f7fec7def39a0b93b72f14b5d39
"use strict";

/* istanbul ignore next */
function cov_20ie003v73() {
  var path = "/Users/stefanbekker/projects/fancy-planties/src/lib/validation/csv-schemas.ts";
  var hash = "374cca742be6626dd6c4e003b80d86d7186f1236";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/stefanbekker/projects/fancy-planties/src/lib/validation/csv-schemas.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 54,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 29
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 37
        }
      },
      "6": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 36
        }
      },
      "7": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 33
        }
      },
      "8": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 36
        }
      },
      "9": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 35
        }
      },
      "10": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 31,
          column: 38
        }
      },
      "11": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 34,
          column: 32
        }
      },
      "12": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 37,
          column: 44
        }
      },
      "13": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 40,
          column: 44
        }
      },
      "14": {
        start: {
          line: 43,
          column: 8
        },
        end: {
          line: 43,
          column: 42
        }
      },
      "15": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 46,
          column: 46
        }
      },
      "16": {
        start: {
          line: 49,
          column: 8
        },
        end: {
          line: 49,
          column: 41
        }
      },
      "17": {
        start: {
          line: 52,
          column: 8
        },
        end: {
          line: 52,
          column: 39
        }
      },
      "18": {
        start: {
          line: 55,
          column: 13
        },
        end: {
          line: 55,
          column: 27
        }
      },
      "19": {
        start: {
          line: 56,
          column: 34
        },
        end: {
          line: 64,
          column: 2
        }
      },
      "20": {
        start: {
          line: 65,
          column: 39
        },
        end: {
          line: 78,
          column: 2
        }
      },
      "21": {
        start: {
          line: 79,
          column: 32
        },
        end: {
          line: 93,
          column: 2
        }
      },
      "22": {
        start: {
          line: 94,
          column: 37
        },
        end: {
          line: 101,
          column: 2
        }
      },
      "23": {
        start: {
          line: 102,
          column: 37
        },
        end: {
          line: 115,
          column: 2
        }
      },
      "24": {
        start: {
          line: 116,
          column: 35
        },
        end: {
          line: 138,
          column: 2
        }
      },
      "25": {
        start: {
          line: 139,
          column: 26
        },
        end: {
          line: 148,
          column: 2
        }
      },
      "26": {
        start: {
          line: 149,
          column: 29
        },
        end: {
          line: 164,
          column: 2
        }
      },
      "27": {
        start: {
          line: 165,
          column: 28
        },
        end: {
          line: 181,
          column: 2
        }
      },
      "28": {
        start: {
          line: 182,
          column: 25
        },
        end: {
          line: 194,
          column: 2
        }
      },
      "29": {
        start: {
          line: 195,
          column: 31
        },
        end: {
          line: 202,
          column: 2
        }
      },
      "30": {
        start: {
          line: 203,
          column: 30
        },
        end: {
          line: 220,
          column: 2
        }
      },
      "31": {
        start: {
          line: 221,
          column: 22
        },
        end: {
          line: 226,
          column: 2
        }
      },
      "32": {
        start: {
          line: 224,
          column: 41
        },
        end: {
          line: 224,
          column: 124
        }
      },
      "33": {
        start: {
          line: 227,
          column: 29
        },
        end: {
          line: 250,
          column: 2
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        },
        loc: {
          start: {
            line: 12,
            column: 25
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 33
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 18,
            column: 4
          },
          end: {
            line: 18,
            column: 5
          }
        },
        loc: {
          start: {
            line: 18,
            column: 32
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 18
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 21,
            column: 4
          },
          end: {
            line: 21,
            column: 5
          }
        },
        loc: {
          start: {
            line: 21,
            column: 29
          },
          end: {
            line: 23,
            column: 5
          }
        },
        line: 21
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 24,
            column: 4
          },
          end: {
            line: 24,
            column: 5
          }
        },
        loc: {
          start: {
            line: 24,
            column: 32
          },
          end: {
            line: 26,
            column: 5
          }
        },
        line: 24
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 27,
            column: 4
          },
          end: {
            line: 27,
            column: 5
          }
        },
        loc: {
          start: {
            line: 27,
            column: 31
          },
          end: {
            line: 29,
            column: 5
          }
        },
        line: 27
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 30,
            column: 4
          },
          end: {
            line: 30,
            column: 5
          }
        },
        loc: {
          start: {
            line: 30,
            column: 34
          },
          end: {
            line: 32,
            column: 5
          }
        },
        line: 30
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 33,
            column: 4
          },
          end: {
            line: 33,
            column: 5
          }
        },
        loc: {
          start: {
            line: 33,
            column: 28
          },
          end: {
            line: 35,
            column: 5
          }
        },
        line: 33
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 36,
            column: 4
          },
          end: {
            line: 36,
            column: 5
          }
        },
        loc: {
          start: {
            line: 36,
            column: 40
          },
          end: {
            line: 38,
            column: 5
          }
        },
        line: 36
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 39,
            column: 4
          },
          end: {
            line: 39,
            column: 5
          }
        },
        loc: {
          start: {
            line: 39,
            column: 40
          },
          end: {
            line: 41,
            column: 5
          }
        },
        line: 39
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 42,
            column: 4
          },
          end: {
            line: 42,
            column: 5
          }
        },
        loc: {
          start: {
            line: 42,
            column: 38
          },
          end: {
            line: 44,
            column: 5
          }
        },
        line: 42
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 45,
            column: 4
          },
          end: {
            line: 45,
            column: 5
          }
        },
        loc: {
          start: {
            line: 45,
            column: 42
          },
          end: {
            line: 47,
            column: 5
          }
        },
        line: 45
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 48,
            column: 4
          },
          end: {
            line: 48,
            column: 5
          }
        },
        loc: {
          start: {
            line: 48,
            column: 37
          },
          end: {
            line: 50,
            column: 5
          }
        },
        line: 48
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 51,
            column: 4
          },
          end: {
            line: 51,
            column: 5
          }
        },
        loc: {
          start: {
            line: 51,
            column: 35
          },
          end: {
            line: 53,
            column: 5
          }
        },
        line: 51
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 224,
            column: 33
          },
          end: {
            line: 224,
            column: 34
          }
        },
        loc: {
          start: {
            line: 224,
            column: 41
          },
          end: {
            line: 224,
            column: 124
          }
        },
        line: 224
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 224,
            column: 41
          },
          end: {
            line: 224,
            column: 124
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 224,
            column: 41
          },
          end: {
            line: 224,
            column: 60
          }
        }, {
          start: {
            line: 224,
            column: 64
          },
          end: {
            line: 224,
            column: 99
          }
        }, {
          start: {
            line: 224,
            column: 103
          },
          end: {
            line: 224,
            column: 124
          }
        }],
        line: 224
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0
    },
    b: {
      "0": [0, 0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/stefanbekker/projects/fancy-planties/src/lib/validation/csv-schemas.ts"],
      sourcesContent: ["import { z } from 'zod';\n\n// Raw CSV row schemas (before processing)\nexport const rawPlantTaxonomyRowSchema = z.object({\n  'Family': z.string().optional().default(''),\n  'Genus': z.string().optional().default(''),\n  'Species': z.string().optional().default(''),\n  'Cultivar': z.string().optional().default(''), // New cultivar field\n  'Common Name': z.string().optional().default(''), // Separated from cultivar\n  // Legacy support for combined field\n  'Common Name/Variety': z.string().optional().default(''),\n});\n\nexport const rawFertilizerScheduleRowSchema = z.object({\n  'Family': z.string().optional().default(''),\n  'Genus': z.string().optional().default(''),\n  'Species': z.string().optional().default(''),\n  'Cultivar': z.string().optional().default(''), // New cultivar field\n  'Common Name': z.string().optional().default(''), // Separated from cultivar\n  // Legacy support for combined field\n  'Common Name/Variety': z.string().optional().default(''),\n  'Location': z.string().optional().default(''),\n  'Last Fertilized': z.string().optional().default(''),\n  'Fertilizer Schedule': z.string().optional().default(''),\n  'Fertilizer Due': z.string().optional().default(''),\n  'Last Repot': z.string().optional().default(''),\n});\n\nexport const rawPropagationRowSchema = z.object({\n  'Family': z.string().optional().default(''),\n  'Genus': z.string().optional().default(''),\n  'Species': z.string().optional().default(''),\n  'Cultivar': z.string().optional().default(''), // New cultivar field\n  'Common Name': z.string().optional().default(''), // Separated from cultivar\n  // Legacy support for combined field\n  'Common Name/Variety': z.string().optional().default(''),\n  'Location': z.string().optional().default(''),\n  'Date Started': z.string().optional().default(''),\n  // New fields for external source detection\n  'Source': z.string().optional().default(''), // gift, trade, purchase, etc.\n  'Source Details': z.string().optional().default(''), // Additional details about source\n  'Parent Plant': z.string().optional().default(''), // For internal propagations\n});\n\n// Processed CSV data schemas (after validation and transformation)\nexport const processedPlantTaxonomySchema = z.object({\n  family: z.string().min(1, 'Family is required'),\n  genus: z.string().min(1, 'Genus is required'),\n  species: z.string().min(1, 'Species is required'),\n  cultivar: z.string().optional().nullable(), // New cultivar field\n  commonName: z.string().min(1, 'Common name is required'),\n  rowIndex: z.number().int().min(0),\n});\n\nexport const processedPlantInstanceSchema = z.object({\n  family: z.string().optional(),\n  genus: z.string().optional(),\n  species: z.string().optional(),\n  cultivar: z.string().optional().nullable(), // New cultivar field\n  commonName: z.string().min(1, 'Common name is required'),\n  nickname: z.string().min(1, 'Nickname is required'),\n  location: z.string().optional().default('Unknown'),\n  lastFertilized: z.date().nullable(),\n  fertilizerSchedule: z.string(),\n  fertilizerDue: z.date().nullable(),\n  lastRepot: z.date().nullable(),\n  rowIndex: z.number().int().min(0),\n});\n\nexport const processedPropagationSchema = z.object({\n  family: z.string().optional(),\n  genus: z.string().optional(),\n  species: z.string().optional(),\n  cultivar: z.string().optional().nullable(), // New cultivar field\n  commonName: z.string().min(1, 'Common name is required'),\n  nickname: z.string().min(1, 'Nickname is required'),\n  location: z.string().optional().default('Unknown'),\n  dateStarted: z.date(),\n  sourceType: z.enum(['internal', 'external']).default('external'), // Default to external for CSV imports\n  externalSource: z.enum(['gift', 'trade', 'purchase', 'other']).optional().nullable(),\n  externalSourceDetails: z.string().optional().nullable(),\n  parentPlantName: z.string().optional().nullable(), // For matching internal propagations\n  rowIndex: z.number().int().min(0),\n});\n\n// Import result schemas\nexport const importErrorSchema = z.object({\n  rowIndex: z.number().int().min(0),\n  field: z.string().optional(),\n  message: z.string(),\n  severity: z.enum(['error', 'warning']),\n  originalValue: z.string().optional(),\n});\n\nexport const importConflictSchema = z.object({\n  type: z.enum(['duplicate_plant', 'missing_parent', 'invalid_taxonomy']),\n  rowIndex: z.number().int().min(0),\n  message: z.string(),\n  existingRecord: z.any().optional(),\n  suggestedAction: z.enum(['skip', 'merge', 'create_new', 'manual_review']),\n});\n\nexport const importSummarySchema = z.object({\n  totalRows: z.number().int().min(0),\n  processedRows: z.number().int().min(0),\n  successfulImports: z.number().int().min(0),\n  errors: z.array(importErrorSchema),\n  conflicts: z.array(importConflictSchema),\n  warnings: z.array(importErrorSchema),\n  skippedRows: z.number().int().min(0),\n  importType: z.enum(['plant_taxonomy', 'plant_instances', 'propagations']),\n  startTime: z.date(),\n  endTime: z.date().optional(),\n  userId: z.number().int().positive(),\n});\n\n// Plant matching schemas for linking CSV data to existing plants\nexport const plantMatchSchema = z.object({\n  plantId: z.number().int().positive(),\n  confidence: z.number().min(0).max(1),\n  matchedFields: z.array(z.string()),\n  plant: z.object({\n    id: z.number().int().positive(),\n    family: z.string(),\n    genus: z.string(),\n    species: z.string(),\n    cultivar: z.string().optional().nullable(), // New cultivar field\n    commonName: z.string(),\n  }),\n});\n\nexport const plantMatchResultSchema = z.object({\n  rowIndex: z.number().int().min(0),\n  originalData: z.record(z.string(), z.string()),\n  matches: z.array(plantMatchSchema),\n  bestMatch: plantMatchSchema.optional(),\n  requiresManualReview: z.boolean(),\n  confidence: z.number().min(0).max(1),\n});\n\n// CSV import configuration schema\nexport const csvImportConfigSchema = z.object({\n  skipEmptyRows: z.boolean().default(true),\n  skipHeaderRow: z.boolean().default(true),\n  matchingThreshold: z.number().min(0).max(1).default(0.7),\n  createMissingPlants: z.boolean().default(true),\n  handleDuplicates: z.enum(['skip', 'merge', 'create_new']).default('skip'),\n  dateFormat: z.enum(['auto', 'MM/DD/YYYY', 'DD/MM/YYYY', 'YYYY-MM-DD']).default('auto'),\n  userId: z.number().int().positive(),\n});\n\n// File upload schema\nexport const csvFileSchema = z.object({\n  name: z.string().min(1, 'File name is required'),\n  size: z.number().int().min(1, 'File must not be empty').max(5 * 1024 * 1024, 'File too large (max 5MB)'),\n  type: z.string().refine(\n    (type) => type === 'text/csv' || type === 'application/vnd.ms-excel' || type === 'text/plain',\n    'File must be a CSV file'\n  ),\n  content: z.string().min(1, 'File content is required'),\n});\n\n// Import progress tracking schema\nexport const importProgressSchema = z.object({\n  id: z.string().uuid(),\n  userId: z.number().int().positive(),\n  fileName: z.string(),\n  importType: z.enum(['plant_taxonomy', 'plant_instances', 'propagations']),\n  status: z.enum(['pending', 'processing', 'completed', 'failed']),\n  progress: z.number().min(0).max(100),\n  totalRows: z.number().int().min(0),\n  processedRows: z.number().int().min(0),\n  errors: z.array(importErrorSchema),\n  conflicts: z.array(importConflictSchema),\n  startTime: z.date(),\n  endTime: z.date().optional(),\n  summary: importSummarySchema.optional(),\n});\n\n// Export types\nexport type RawPlantTaxonomyRow = z.infer<typeof rawPlantTaxonomyRowSchema>;\nexport type RawFertilizerScheduleRow = z.infer<typeof rawFertilizerScheduleRowSchema>;\nexport type RawPropagationRow = z.infer<typeof rawPropagationRowSchema>;\nexport type ProcessedPlantTaxonomy = z.infer<typeof processedPlantTaxonomySchema>;\nexport type ProcessedPlantInstance = z.infer<typeof processedPlantInstanceSchema>;\nexport type ProcessedPropagation = z.infer<typeof processedPropagationSchema>;\nexport type ImportError = z.infer<typeof importErrorSchema>;\nexport type ImportConflict = z.infer<typeof importConflictSchema>;\nexport type ImportSummary = z.infer<typeof importSummarySchema>;\nexport type PlantMatch = z.infer<typeof plantMatchSchema>;\nexport type PlantMatchResult = z.infer<typeof plantMatchResultSchema>;\nexport type CSVImportConfig = z.infer<typeof csvImportConfigSchema>;\nexport type CSVFile = z.infer<typeof csvFileSchema>;\nexport type ImportProgress = z.infer<typeof importProgressSchema>;"],
      names: ["csvFileSchema", "csvImportConfigSchema", "importConflictSchema", "importErrorSchema", "importProgressSchema", "importSummarySchema", "plantMatchResultSchema", "plantMatchSchema", "processedPlantInstanceSchema", "processedPlantTaxonomySchema", "processedPropagationSchema", "rawFertilizerScheduleRowSchema", "rawPlantTaxonomyRowSchema", "rawPropagationRowSchema", "z", "object", "string", "optional", "default", "family", "min", "genus", "species", "cultivar", "nullable", "commonName", "rowIndex", "number", "int", "nickname", "location", "lastFertilized", "date", "fertilizerSchedule", "fertilizerDue", "lastRepot", "dateStarted", "sourceType", "enum", "externalSource", "externalSourceDetails", "parentPlantName", "field", "message", "severity", "originalValue", "type", "existingRecord", "any", "suggestedAction", "totalRows", "processedRows", "successfulImports", "errors", "array", "conflicts", "warnings", "skippedRows", "importType", "startTime", "endTime", "userId", "positive", "plantId", "confidence", "max", "matchedFields", "plant", "id", "originalData", "record", "matches", "bestMatch", "requiresManualReview", "boolean", "skipEmptyRows", "skipHeaderRow", "matchingThreshold", "createMissingPlants", "handleDuplicates", "dateFormat", "name", "size", "refine", "content", "uuid", "fileName", "status", "progress", "summary"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "374cca742be6626dd6c4e003b80d86d7186f1236"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_20ie003v73 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_20ie003v73();
cov_20ie003v73().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_20ie003v73().f[0]++;
  cov_20ie003v73().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_20ie003v73().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_20ie003v73().s[3]++;
_export(exports, {
  get csvFileSchema() {
    /* istanbul ignore next */
    cov_20ie003v73().f[1]++;
    cov_20ie003v73().s[4]++;
    return csvFileSchema;
  },
  get csvImportConfigSchema() {
    /* istanbul ignore next */
    cov_20ie003v73().f[2]++;
    cov_20ie003v73().s[5]++;
    return csvImportConfigSchema;
  },
  get importConflictSchema() {
    /* istanbul ignore next */
    cov_20ie003v73().f[3]++;
    cov_20ie003v73().s[6]++;
    return importConflictSchema;
  },
  get importErrorSchema() {
    /* istanbul ignore next */
    cov_20ie003v73().f[4]++;
    cov_20ie003v73().s[7]++;
    return importErrorSchema;
  },
  get importProgressSchema() {
    /* istanbul ignore next */
    cov_20ie003v73().f[5]++;
    cov_20ie003v73().s[8]++;
    return importProgressSchema;
  },
  get importSummarySchema() {
    /* istanbul ignore next */
    cov_20ie003v73().f[6]++;
    cov_20ie003v73().s[9]++;
    return importSummarySchema;
  },
  get plantMatchResultSchema() {
    /* istanbul ignore next */
    cov_20ie003v73().f[7]++;
    cov_20ie003v73().s[10]++;
    return plantMatchResultSchema;
  },
  get plantMatchSchema() {
    /* istanbul ignore next */
    cov_20ie003v73().f[8]++;
    cov_20ie003v73().s[11]++;
    return plantMatchSchema;
  },
  get processedPlantInstanceSchema() {
    /* istanbul ignore next */
    cov_20ie003v73().f[9]++;
    cov_20ie003v73().s[12]++;
    return processedPlantInstanceSchema;
  },
  get processedPlantTaxonomySchema() {
    /* istanbul ignore next */
    cov_20ie003v73().f[10]++;
    cov_20ie003v73().s[13]++;
    return processedPlantTaxonomySchema;
  },
  get processedPropagationSchema() {
    /* istanbul ignore next */
    cov_20ie003v73().f[11]++;
    cov_20ie003v73().s[14]++;
    return processedPropagationSchema;
  },
  get rawFertilizerScheduleRowSchema() {
    /* istanbul ignore next */
    cov_20ie003v73().f[12]++;
    cov_20ie003v73().s[15]++;
    return rawFertilizerScheduleRowSchema;
  },
  get rawPlantTaxonomyRowSchema() {
    /* istanbul ignore next */
    cov_20ie003v73().f[13]++;
    cov_20ie003v73().s[16]++;
    return rawPlantTaxonomyRowSchema;
  },
  get rawPropagationRowSchema() {
    /* istanbul ignore next */
    cov_20ie003v73().f[14]++;
    cov_20ie003v73().s[17]++;
    return rawPropagationRowSchema;
  }
});
const _zod =
/* istanbul ignore next */
(cov_20ie003v73().s[18]++, require("zod"));
const rawPlantTaxonomyRowSchema =
/* istanbul ignore next */
(cov_20ie003v73().s[19]++, _zod.z.object({
  'Family': _zod.z.string().optional().default(''),
  'Genus': _zod.z.string().optional().default(''),
  'Species': _zod.z.string().optional().default(''),
  'Cultivar': _zod.z.string().optional().default(''),
  'Common Name': _zod.z.string().optional().default(''),
  // Legacy support for combined field
  'Common Name/Variety': _zod.z.string().optional().default('')
}));
const rawFertilizerScheduleRowSchema =
/* istanbul ignore next */
(cov_20ie003v73().s[20]++, _zod.z.object({
  'Family': _zod.z.string().optional().default(''),
  'Genus': _zod.z.string().optional().default(''),
  'Species': _zod.z.string().optional().default(''),
  'Cultivar': _zod.z.string().optional().default(''),
  'Common Name': _zod.z.string().optional().default(''),
  // Legacy support for combined field
  'Common Name/Variety': _zod.z.string().optional().default(''),
  'Location': _zod.z.string().optional().default(''),
  'Last Fertilized': _zod.z.string().optional().default(''),
  'Fertilizer Schedule': _zod.z.string().optional().default(''),
  'Fertilizer Due': _zod.z.string().optional().default(''),
  'Last Repot': _zod.z.string().optional().default('')
}));
const rawPropagationRowSchema =
/* istanbul ignore next */
(cov_20ie003v73().s[21]++, _zod.z.object({
  'Family': _zod.z.string().optional().default(''),
  'Genus': _zod.z.string().optional().default(''),
  'Species': _zod.z.string().optional().default(''),
  'Cultivar': _zod.z.string().optional().default(''),
  'Common Name': _zod.z.string().optional().default(''),
  // Legacy support for combined field
  'Common Name/Variety': _zod.z.string().optional().default(''),
  'Location': _zod.z.string().optional().default(''),
  'Date Started': _zod.z.string().optional().default(''),
  // New fields for external source detection
  'Source': _zod.z.string().optional().default(''),
  'Source Details': _zod.z.string().optional().default(''),
  'Parent Plant': _zod.z.string().optional().default('')
}));
const processedPlantTaxonomySchema =
/* istanbul ignore next */
(cov_20ie003v73().s[22]++, _zod.z.object({
  family: _zod.z.string().min(1, 'Family is required'),
  genus: _zod.z.string().min(1, 'Genus is required'),
  species: _zod.z.string().min(1, 'Species is required'),
  cultivar: _zod.z.string().optional().nullable(),
  commonName: _zod.z.string().min(1, 'Common name is required'),
  rowIndex: _zod.z.number().int().min(0)
}));
const processedPlantInstanceSchema =
/* istanbul ignore next */
(cov_20ie003v73().s[23]++, _zod.z.object({
  family: _zod.z.string().optional(),
  genus: _zod.z.string().optional(),
  species: _zod.z.string().optional(),
  cultivar: _zod.z.string().optional().nullable(),
  commonName: _zod.z.string().min(1, 'Common name is required'),
  nickname: _zod.z.string().min(1, 'Nickname is required'),
  location: _zod.z.string().optional().default('Unknown'),
  lastFertilized: _zod.z.date().nullable(),
  fertilizerSchedule: _zod.z.string(),
  fertilizerDue: _zod.z.date().nullable(),
  lastRepot: _zod.z.date().nullable(),
  rowIndex: _zod.z.number().int().min(0)
}));
const processedPropagationSchema =
/* istanbul ignore next */
(cov_20ie003v73().s[24]++, _zod.z.object({
  family: _zod.z.string().optional(),
  genus: _zod.z.string().optional(),
  species: _zod.z.string().optional(),
  cultivar: _zod.z.string().optional().nullable(),
  commonName: _zod.z.string().min(1, 'Common name is required'),
  nickname: _zod.z.string().min(1, 'Nickname is required'),
  location: _zod.z.string().optional().default('Unknown'),
  dateStarted: _zod.z.date(),
  sourceType: _zod.z.enum(['internal', 'external']).default('external'),
  externalSource: _zod.z.enum(['gift', 'trade', 'purchase', 'other']).optional().nullable(),
  externalSourceDetails: _zod.z.string().optional().nullable(),
  parentPlantName: _zod.z.string().optional().nullable(),
  rowIndex: _zod.z.number().int().min(0)
}));
const importErrorSchema =
/* istanbul ignore next */
(cov_20ie003v73().s[25]++, _zod.z.object({
  rowIndex: _zod.z.number().int().min(0),
  field: _zod.z.string().optional(),
  message: _zod.z.string(),
  severity: _zod.z.enum(['error', 'warning']),
  originalValue: _zod.z.string().optional()
}));
const importConflictSchema =
/* istanbul ignore next */
(cov_20ie003v73().s[26]++, _zod.z.object({
  type: _zod.z.enum(['duplicate_plant', 'missing_parent', 'invalid_taxonomy']),
  rowIndex: _zod.z.number().int().min(0),
  message: _zod.z.string(),
  existingRecord: _zod.z.any().optional(),
  suggestedAction: _zod.z.enum(['skip', 'merge', 'create_new', 'manual_review'])
}));
const importSummarySchema =
/* istanbul ignore next */
(cov_20ie003v73().s[27]++, _zod.z.object({
  totalRows: _zod.z.number().int().min(0),
  processedRows: _zod.z.number().int().min(0),
  successfulImports: _zod.z.number().int().min(0),
  errors: _zod.z.array(importErrorSchema),
  conflicts: _zod.z.array(importConflictSchema),
  warnings: _zod.z.array(importErrorSchema),
  skippedRows: _zod.z.number().int().min(0),
  importType: _zod.z.enum(['plant_taxonomy', 'plant_instances', 'propagations']),
  startTime: _zod.z.date(),
  endTime: _zod.z.date().optional(),
  userId: _zod.z.number().int().positive()
}));
const plantMatchSchema =
/* istanbul ignore next */
(cov_20ie003v73().s[28]++, _zod.z.object({
  plantId: _zod.z.number().int().positive(),
  confidence: _zod.z.number().min(0).max(1),
  matchedFields: _zod.z.array(_zod.z.string()),
  plant: _zod.z.object({
    id: _zod.z.number().int().positive(),
    family: _zod.z.string(),
    genus: _zod.z.string(),
    species: _zod.z.string(),
    cultivar: _zod.z.string().optional().nullable(),
    commonName: _zod.z.string()
  })
}));
const plantMatchResultSchema =
/* istanbul ignore next */
(cov_20ie003v73().s[29]++, _zod.z.object({
  rowIndex: _zod.z.number().int().min(0),
  originalData: _zod.z.record(_zod.z.string(), _zod.z.string()),
  matches: _zod.z.array(plantMatchSchema),
  bestMatch: plantMatchSchema.optional(),
  requiresManualReview: _zod.z.boolean(),
  confidence: _zod.z.number().min(0).max(1)
}));
const csvImportConfigSchema =
/* istanbul ignore next */
(cov_20ie003v73().s[30]++, _zod.z.object({
  skipEmptyRows: _zod.z.boolean().default(true),
  skipHeaderRow: _zod.z.boolean().default(true),
  matchingThreshold: _zod.z.number().min(0).max(1).default(0.7),
  createMissingPlants: _zod.z.boolean().default(true),
  handleDuplicates: _zod.z.enum(['skip', 'merge', 'create_new']).default('skip'),
  dateFormat: _zod.z.enum(['auto', 'MM/DD/YYYY', 'DD/MM/YYYY', 'YYYY-MM-DD']).default('auto'),
  userId: _zod.z.number().int().positive()
}));
const csvFileSchema =
/* istanbul ignore next */
(cov_20ie003v73().s[31]++, _zod.z.object({
  name: _zod.z.string().min(1, 'File name is required'),
  size: _zod.z.number().int().min(1, 'File must not be empty').max(5 * 1024 * 1024, 'File too large (max 5MB)'),
  type: _zod.z.string().refine(type => {
    /* istanbul ignore next */
    cov_20ie003v73().f[15]++;
    cov_20ie003v73().s[32]++;
    return /* istanbul ignore next */(cov_20ie003v73().b[0][0]++, type === 'text/csv') ||
    /* istanbul ignore next */
    (cov_20ie003v73().b[0][1]++, type === 'application/vnd.ms-excel') ||
    /* istanbul ignore next */
    (cov_20ie003v73().b[0][2]++, type === 'text/plain');
  }, 'File must be a CSV file'),
  content: _zod.z.string().min(1, 'File content is required')
}));
const importProgressSchema =
/* istanbul ignore next */
(cov_20ie003v73().s[33]++, _zod.z.object({
  id: _zod.z.string().uuid(),
  userId: _zod.z.number().int().positive(),
  fileName: _zod.z.string(),
  importType: _zod.z.enum(['plant_taxonomy', 'plant_instances', 'propagations']),
  status: _zod.z.enum(['pending', 'processing', 'completed', 'failed']),
  progress: _zod.z.number().min(0).max(100),
  totalRows: _zod.z.number().int().min(0),
  processedRows: _zod.z.number().int().min(0),
  errors: _zod.z.array(importErrorSchema),
  conflicts: _zod.z.array(importConflictSchema),
  startTime: _zod.z.date(),
  endTime: _zod.z.date().optional(),
  summary: importSummarySchema.optional()
}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,