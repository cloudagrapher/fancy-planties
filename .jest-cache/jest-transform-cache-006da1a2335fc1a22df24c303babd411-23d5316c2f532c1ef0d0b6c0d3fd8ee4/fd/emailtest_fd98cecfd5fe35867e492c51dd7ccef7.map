{"version":3,"sources":["/Users/stefanbekker/projects/fancy-planties/src/lib/services/__tests__/email.test.ts"],"sourcesContent":["import { ResendEmailService, EmailServiceError } from '../email';\n\n// Mock Resend\njest.mock('resend', () => ({\n  Resend: jest.fn().mockImplementation(() => ({\n    emails: {\n      send: jest.fn(),\n    },\n  })),\n}));\n\ndescribe('ResendEmailService', () => {\n  let emailService: ResendEmailService;\n  let mockResend: any;\n\n  beforeEach(() => {\n    const { Resend } = require('resend');\n    mockResend = {\n      emails: {\n        send: jest.fn(),\n      },\n    };\n    Resend.mockImplementation(() => mockResend);\n\n    emailService = new ResendEmailService({\n      apiKey: 'test-api-key',\n      fromEmail: 'test@example.com',\n      fromName: 'Test App',\n    });\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('sendVerificationEmail', () => {\n    it('should send email successfully', async () => {\n      mockResend.emails.send.mockResolvedValue({\n        data: { id: 'email-id-123' },\n        error: null,\n      });\n\n      const result = await emailService.sendVerificationEmail(\n        'user@example.com',\n        '123456',\n        'John Doe'\n      );\n\n      expect(result).toBe(true);\n      expect(mockResend.emails.send).toHaveBeenCalledWith({\n        from: 'Test App <test@example.com>',\n        to: ['user@example.com'],\n        subject: 'Verify your email address',\n        html: expect.stringContaining('123456'),\n      });\n    });\n\n    it('should include user name in email template', async () => {\n      mockResend.emails.send.mockResolvedValue({\n        data: { id: 'email-id-123' },\n        error: null,\n      });\n\n      await emailService.sendVerificationEmail(\n        'user@example.com',\n        '123456',\n        'John Doe'\n      );\n\n      const callArgs = mockResend.emails.send.mock.calls[0][0];\n      expect(callArgs.html).toContain('Hi John Doe,');\n      expect(callArgs.html).toContain('123456');\n    });\n\n    it('should retry on API errors', async () => {\n      mockResend.emails.send\n        .mockRejectedValueOnce(new Error('Network error'))\n        .mockResolvedValue({\n          data: { id: 'email-id-123' },\n          error: null,\n        });\n\n      const result = await emailService.sendVerificationEmail(\n        'user@example.com',\n        '123456',\n        'John Doe'\n      );\n\n      expect(result).toBe(true);\n      expect(mockResend.emails.send).toHaveBeenCalledTimes(2);\n    });\n\n    it('should throw EmailServiceError on Resend API error', async () => {\n      mockResend.emails.send.mockResolvedValue({\n        data: null,\n        error: { message: 'Invalid email address' },\n      });\n\n      await expect(\n        emailService.sendVerificationEmail('invalid-email', '123456', 'John Doe')\n      ).rejects.toThrow(EmailServiceError);\n    });\n\n    it('should not retry on invalid email error', async () => {\n      mockResend.emails.send.mockResolvedValue({\n        data: null,\n        error: { message: 'Invalid email address' },\n      });\n\n      await expect(\n        emailService.sendVerificationEmail('invalid-email', '123456', 'John Doe')\n      ).rejects.toThrow(EmailServiceError);\n\n      expect(mockResend.emails.send).toHaveBeenCalledTimes(1);\n    });\n\n    it('should throw error after max retries', async () => {\n      mockResend.emails.send.mockRejectedValue(new Error('Network error'));\n\n      await expect(\n        emailService.sendVerificationEmail('user@example.com', '123456', 'John Doe')\n      ).rejects.toThrow('Network error');\n\n      expect(mockResend.emails.send).toHaveBeenCalledTimes(3);\n    });\n  });\n});"],"names":["jest","mock","Resend","fn","mockImplementation","emails","send","describe","emailService","mockResend","beforeEach","require","ResendEmailService","apiKey","fromEmail","fromName","afterEach","clearAllMocks","it","mockResolvedValue","data","id","error","result","sendVerificationEmail","expect","toBe","toHaveBeenCalledWith","from","to","subject","html","stringContaining","callArgs","calls","toContain","mockRejectedValueOnce","Error","toHaveBeenCalledTimes","message","rejects","toThrow","EmailServiceError","mockRejectedValue"],"mappings":"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"}