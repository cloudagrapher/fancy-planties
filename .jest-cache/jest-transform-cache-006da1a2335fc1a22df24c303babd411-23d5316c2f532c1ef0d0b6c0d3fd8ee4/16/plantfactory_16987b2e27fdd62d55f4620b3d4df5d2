378c3fd4f692cc733d542dda36a4077b
// Plant test data factory
// Counter for unique test data
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get createRealisticPlantInstances () {
        return createRealisticPlantInstances;
    },
    get createRealisticPlants () {
        return createRealisticPlants;
    },
    get createTestCareRecord () {
        return createTestCareRecord;
    },
    get createTestCareRecordForPlant () {
        return createTestCareRecordForPlant;
    },
    get createTestCareRecords () {
        return createTestCareRecords;
    },
    get createTestPlant () {
        return createTestPlant;
    },
    get createTestPlantInstance () {
        return createTestPlantInstance;
    },
    get createTestPlantInstanceForUser () {
        return createTestPlantInstanceForUser;
    },
    get createTestPlantInstanceNeedingCare () {
        return createTestPlantInstanceNeedingCare;
    },
    get createTestPlantInstanceWithCareHistory () {
        return createTestPlantInstanceWithCareHistory;
    },
    get createTestPlantInstanceWithImages () {
        return createTestPlantInstanceWithImages;
    },
    get createTestPlantInstances () {
        return createTestPlantInstances;
    },
    get createTestPlantInstancesWithSchedules () {
        return createTestPlantInstancesWithSchedules;
    },
    get createTestPlantSuggestion () {
        return createTestPlantSuggestion;
    },
    get createTestPlantWithTaxonomy () {
        return createTestPlantWithTaxonomy;
    },
    get createTestPlants () {
        return createTestPlants;
    },
    get createTestPlantsForSearch () {
        return createTestPlantsForSearch;
    },
    get resetPlantCounters () {
        return resetPlantCounters;
    }
});
let plantCounter = 0;
let plantInstanceCounter = 0;
let careRecordCounter = 0;
const createTestPlant = (overrides = {})=>{
    plantCounter++;
    const basePlant = {
        // Remove id - let database auto-generate it
        family: `Testaceae${plantCounter}`,
        genus: `Testus${plantCounter}`,
        species: `testicus${plantCounter}`,
        cultivar: plantCounter % 2 === 0 ? `'Variegata${plantCounter}'` : null,
        commonName: `Test Plant ${plantCounter}`,
        isVerified: true,
        createdAt: new Date(),
        updatedAt: new Date()
    };
    return {
        ...basePlant,
        ...overrides
    };
};
const createTestPlantInstance = (overrides = {})=>{
    plantInstanceCounter++;
    const basePlantInstance = {
        // Remove id - let database auto-generate it
        // plantId and userId should be provided via overrides
        nickname: `My Test Plant ${plantInstanceCounter}`,
        location: `Test Location ${plantInstanceCounter}`,
        fertilizerSchedule: 'every_4_weeks',
        lastFertilized: new Date(Date.now() - 1000 * 60 * 60 * 24 * 7),
        lastRepot: new Date(Date.now() - 1000 * 60 * 60 * 24 * 30),
        notes: `Test notes for plant instance ${plantInstanceCounter}`,
        images: [],
        isActive: true,
        createdAt: new Date(),
        updatedAt: new Date()
    };
    return {
        ...basePlantInstance,
        ...overrides
    };
};
const createTestPlantSuggestion = (overrides = {})=>{
    const plant = createTestPlant(overrides);
    return {
        id: plant.id,
        family: plant.family,
        genus: plant.genus,
        species: plant.species,
        cultivar: plant.cultivar,
        commonName: plant.commonName,
        isVerified: plant.isVerified
    };
};
const createTestPlants = (count = 3, baseOverrides = {})=>{
    return Array.from({
        length: count
    }, (_, index)=>createTestPlant({
            ...baseOverrides,
            commonName: `Test Plant ${plantCounter + index + 1}`
        }));
};
const createTestPlantInstances = (count = 3, baseOverrides = {})=>{
    return Array.from({
        length: count
    }, (_, index)=>createTestPlantInstance({
            ...baseOverrides,
            nickname: `My Test Plant ${plantInstanceCounter + index + 1}`
        }));
};
const createTestPlantWithTaxonomy = (taxonomy, overrides = {})=>{
    return createTestPlant({
        family: taxonomy.family || 'Testaceae',
        genus: taxonomy.genus || 'Testus',
        species: taxonomy.species || 'testicus',
        cultivar: taxonomy.cultivar || null,
        commonName: taxonomy.commonName || 'Test Plant',
        ...overrides
    });
};
const createTestPlantInstanceWithCareHistory = (overrides = {}, careRecordCount = 5)=>{
    const plantInstance = createTestPlantInstance(overrides);
    // Create care history
    const careHistory = Array.from({
        length: careRecordCount
    }, (_, index)=>({
            id: index + 1,
            plantInstanceId: plantInstance.id,
            careType: [
                'fertilizer',
                'water',
                'repot',
                'prune',
                'inspect'
            ][index % 5],
            careDate: new Date(Date.now() - 1000 * 60 * 60 * 24 * (index + 1)),
            notes: `Care record ${index + 1}`,
            createdAt: new Date(Date.now() - 1000 * 60 * 60 * 24 * (index + 1))
        }));
    return {
        ...plantInstance,
        careHistory
    };
};
const createTestPlantInstanceWithImages = (overrides = {}, imageCount = 3)=>{
    const images = Array.from({
        length: imageCount
    }, (_, index)=>`/uploads/plants/test-image-${index + 1}.jpg`);
    return createTestPlantInstance({
        ...overrides,
        images
    });
};
const createTestPlantInstanceForUser = (userId, overrides = {})=>{
    return createTestPlantInstance({
        userId,
        ...overrides
    });
};
const createTestPlantInstancesWithSchedules = (schedules = [
    'weekly',
    'biweekly',
    'every_4_weeks'
])=>{
    return schedules.map((schedule, index)=>createTestPlantInstance({
            nickname: `Plant with ${schedule} schedule`,
            fertilizerSchedule: schedule
        }));
};
const createTestPlantInstanceNeedingCare = (careType = 'fertilizer', daysOverdue = 1, overrides = {})=>{
    const lastCareDate = new Date();
    // Calculate when care was last done based on schedule and overdue days
    if (careType === 'fertilizer') {
        lastCareDate.setDate(lastCareDate.getDate() - (28 + daysOverdue)); // 4 weeks + overdue
    } else if (careType === 'water') {
        lastCareDate.setDate(lastCareDate.getDate() - (7 + daysOverdue)); // 1 week + overdue
    }
    return createTestPlantInstance({
        lastFertilized: careType === 'fertilizer' ? lastCareDate : null,
        lastWatered: careType === 'water' ? lastCareDate : null,
        fertilizerSchedule: 'every_4_weeks',
        ...overrides
    });
};
const createTestPlantsForSearch = (searchCriteria = {})=>{
    const plants = [];
    // Create plants that match search criteria
    if (searchCriteria.family) {
        plants.push(createTestPlant({
            family: searchCriteria.family,
            commonName: `Plant in ${searchCriteria.family}`
        }));
    }
    if (searchCriteria.commonName) {
        plants.push(createTestPlant({
            commonName: searchCriteria.commonName
        }));
    }
    if (searchCriteria.genus) {
        plants.push(createTestPlant({
            genus: searchCriteria.genus,
            commonName: `${searchCriteria.genus} species`
        }));
    }
    // Add some non-matching plants for contrast
    plants.push(createTestPlant({
        commonName: 'Non-matching Plant 1'
    }), createTestPlant({
        commonName: 'Non-matching Plant 2'
    }));
    return plants;
};
const createTestCareRecord = (overrides = {})=>{
    careRecordCounter++;
    const baseCareRecord = {
        id: careRecordCounter,
        plantInstanceId: 1,
        userId: 1,
        careType: 'watering',
        careDate: new Date(),
        notes: `Test care record ${careRecordCounter}`,
        createdAt: new Date(),
        updatedAt: new Date()
    };
    return {
        ...baseCareRecord,
        ...overrides
    };
};
const createTestCareRecords = (count = 3, baseOverrides = {})=>{
    return Array.from({
        length: count
    }, (_, index)=>createTestCareRecord({
            ...baseOverrides,
            careType: [
                'watering',
                'fertilizing',
                'repotting'
            ][index % 3],
            careDate: new Date(Date.now() - 1000 * 60 * 60 * 24 * (index + 1))
        }));
};
const createTestCareRecordForPlant = (plantInstanceId, overrides = {})=>{
    return createTestCareRecord({
        plantInstanceId,
        ...overrides
    });
};
const resetPlantCounters = ()=>{
    plantCounter = 0;
    plantInstanceCounter = 0;
    careRecordCounter = 0;
};
const createRealisticPlants = {
    monstera: ()=>createTestPlant({
            family: 'Araceae',
            genus: 'Monstera',
            species: 'deliciosa',
            cultivar: null,
            commonName: 'Monstera Deliciosa'
        }),
    pothos: ()=>createTestPlant({
            family: 'Araceae',
            genus: 'Epipremnum',
            species: 'aureum',
            cultivar: null,
            commonName: 'Golden Pothos'
        }),
    snakePlant: ()=>createTestPlant({
            family: 'Asparagaceae',
            genus: 'Sansevieria',
            species: 'trifasciata',
            cultivar: null,
            commonName: 'Snake Plant'
        }),
    fiddle: ()=>createTestPlant({
            family: 'Moraceae',
            genus: 'Ficus',
            species: 'lyrata',
            cultivar: null,
            commonName: 'Fiddle Leaf Fig'
        })
};
const createRealisticPlantInstances = {
    thriving: ()=>createTestPlantInstance({
            nickname: 'My Thriving Plant',
            location: 'Living Room Window',
            notes: 'Growing beautifully, lots of new growth',
            lastFertilized: new Date(Date.now() - 1000 * 60 * 60 * 24 * 14),
            fertilizerSchedule: 'every_4_weeks'
        }),
    struggling: ()=>createTestPlantInstance({
            nickname: 'Struggling Plant',
            location: 'Dark Corner',
            notes: 'Yellowing leaves, might need more light',
            lastFertilized: new Date(Date.now() - 1000 * 60 * 60 * 24 * 35),
            fertilizerSchedule: 'every_4_weeks'
        }),
    newPlant: ()=>createTestPlantInstance({
            nickname: 'New Addition',
            location: 'Kitchen Counter',
            notes: 'Just brought home from nursery',
            lastFertilized: null,
            lastRepot: new Date(),
            fertilizerSchedule: 'every_4_weeks'
        })
};

//# sourceMappingURL=data:application/json;base64,