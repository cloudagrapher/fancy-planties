{"version":3,"sources":["/Users/stefanbekker/projects/fancy-planties/src/__tests__/components/forms/SignInForm.test.js"],"sourcesContent":["/**\n * @jest-environment jsdom\n */\n\nimport React from 'react';\nimport { screen, waitFor } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport { renderWithProviders, mockApiResponses, mockApiError } from '@/test-utils/helpers/render-helpers';\nimport SignInForm from '@/components/auth/SignInForm';\n\n// Mock Next.js navigation\nconst mockPush = jest.fn();\nconst mockRefresh = jest.fn();\nconst mockSearchParamsGet = jest.fn();\n\njest.mock('next/navigation', () => ({\n  useRouter: () => ({\n    push: mockPush,\n    refresh: mockRefresh,\n  }),\n  useSearchParams: () => ({\n    get: mockSearchParamsGet,\n  }),\n}));\n\ndescribe('SignInForm', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    \n    // Set default mock behavior for search params\n    mockSearchParamsGet.mockImplementation((key) => {\n      if (key === 'redirect') return '/dashboard';\n      return null;\n    });\n    \n    // Mock successful sign-in by default\n    mockApiResponses({\n      '/api/auth/signin': { success: true, user: { id: 1, email: 'test@example.com' } },\n    });\n  });\n\n  describe('Form Rendering', () => {\n    it('renders all form fields', () => {\n      renderWithProviders(<SignInForm />);\n\n      expect(screen.getByLabelText(/email address/i)).toBeInTheDocument();\n      expect(screen.getByLabelText(/password/i)).toBeInTheDocument();\n      expect(screen.getByRole('button', { name: /sign in/i })).toBeInTheDocument();\n    });\n\n    it('has proper form attributes for accessibility', () => {\n      renderWithProviders(<SignInForm />);\n\n      const form = screen.getByRole('form', { hidden: true });\n      expect(form).toHaveAttribute('autoComplete', 'on');\n      expect(form).toHaveAttribute('noValidate');\n\n      const emailInput = screen.getByLabelText(/email address/i);\n      expect(emailInput).toHaveAttribute('type', 'email');\n      expect(emailInput).toHaveAttribute('autoComplete', 'email');\n      expect(emailInput).toHaveAttribute('required');\n\n      const passwordInput = screen.getByLabelText(/password/i);\n      expect(passwordInput).toHaveAttribute('type', 'password');\n      expect(passwordInput).toHaveAttribute('autoComplete', 'current-password');\n      expect(passwordInput).toHaveAttribute('required');\n    });\n\n    it('shows required field indicators', () => {\n      renderWithProviders(<SignInForm />);\n\n      expect(screen.getByText(/email address/i)).toBeInTheDocument();\n      expect(screen.getByText(/password/i)).toBeInTheDocument();\n      \n      // Check for required indicators in labels\n      const labels = screen.getAllByText(/\\*/);\n      expect(labels).toHaveLength(2); // Email and password should be marked as required\n    });\n  });\n\n  describe('Form Validation', () => {\n    it('validates required fields on submission', async () => {\n      const user = userEvent.setup();\n      renderWithProviders(<SignInForm />);\n\n      const submitButton = screen.getByRole('button', { name: /sign in/i });\n      await user.click(submitButton);\n\n      await waitFor(() => {\n        expect(screen.getByText(/please enter a valid email address/i)).toBeInTheDocument();\n        expect(screen.getByText(/password is required/i)).toBeInTheDocument();\n      });\n\n      // Should not make API call with invalid data\n      expect(global.fetch).not.toHaveBeenCalled();\n    });\n\n    it('validates email format', async () => {\n      const user = userEvent.setup();\n      renderWithProviders(<SignInForm />);\n\n      const emailInput = screen.getByLabelText(/email address/i);\n      await user.type(emailInput, 'invalid-email');\n\n      const submitButton = screen.getByRole('button', { name: /sign in/i });\n      await user.click(submitButton);\n\n      await waitFor(() => {\n        expect(screen.getByText(/invalid email format/i)).toBeInTheDocument();\n      });\n    });\n\n    it('validates minimum password length', async () => {\n      const user = userEvent.setup();\n      renderWithProviders(<SignInForm />);\n\n      const passwordInput = screen.getByLabelText(/password/i);\n      await user.type(passwordInput, '123'); // Too short\n\n      const submitButton = screen.getByRole('button', { name: /sign in/i });\n      await user.click(submitButton);\n\n      await waitFor(() => {\n        expect(screen.getByText(/password must be at least/i)).toBeInTheDocument();\n      });\n    });\n\n    it('clears field errors when user starts typing', async () => {\n      const user = userEvent.setup();\n      renderWithProviders(<SignInForm />);\n\n      // Trigger validation error\n      const submitButton = screen.getByRole('button', { name: /sign in/i });\n      await user.click(submitButton);\n\n      await waitFor(() => {\n        expect(screen.getByText(/please enter a valid email address/i)).toBeInTheDocument();\n      });\n\n      // Start typing in email field\n      const emailInput = screen.getByLabelText(/email address/i);\n      await user.type(emailInput, 'test');\n\n      // Error should be cleared\n      expect(screen.queryByText(/please enter a valid email address/i)).not.toBeInTheDocument();\n    });\n  });\n\n  describe('Form Submission', () => {\n    it('submits valid form data', async () => {\n      const user = userEvent.setup();\n      renderWithProviders(<SignInForm />);\n\n      // Fill form with valid data\n      await user.type(screen.getByLabelText(/email address/i), 'test@example.com');\n      await user.type(screen.getByLabelText(/password/i), 'password123');\n\n      // Submit form\n      await user.click(screen.getByRole('button', { name: /sign in/i }));\n\n      await waitFor(() => {\n        expect(global.fetch).toHaveBeenCalledWith(\n          '/api/auth/signin',\n          expect.objectContaining({\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n              email: 'test@example.com',\n              password: 'password123',\n            }),\n          })\n        );\n      });\n    });\n\n    it('redirects to dashboard on successful sign-in', async () => {\n      const user = userEvent.setup();\n      renderWithProviders(<SignInForm />);\n\n      await user.type(screen.getByLabelText(/email address/i), 'test@example.com');\n      await user.type(screen.getByLabelText(/password/i), 'password123');\n      await user.click(screen.getByRole('button', { name: /sign in/i }));\n\n      await waitFor(() => {\n        expect(mockPush).toHaveBeenCalledWith('/dashboard');\n        expect(mockRefresh).toHaveBeenCalled();\n      });\n    });\n\n    it('redirects to specified redirect URL', async () => {\n      const user = userEvent.setup();\n      \n      // Mock useSearchParams to return a redirect URL\n      mockSearchParamsGet.mockImplementation((key) => {\n        if (key === 'redirect') return '/plants';\n        return null;\n      });\n\n      renderWithProviders(<SignInForm />);\n\n      await user.type(screen.getByLabelText(/email address/i), 'test@example.com');\n      await user.type(screen.getByLabelText(/password/i), 'password123');\n      await user.click(screen.getByRole('button', { name: /sign in/i }));\n\n      await waitFor(() => {\n        expect(mockPush).toHaveBeenCalledWith('/plants');\n      });\n    });\n\n    it('shows loading state during submission', async () => {\n      const user = userEvent.setup();\n      \n      // Mock delayed response\n      global.fetch = jest.fn(() => \n        new Promise(resolve => \n          setTimeout(() => resolve({\n            ok: true,\n            json: () => Promise.resolve({ success: true })\n          }), 100)\n        )\n      );\n\n      renderWithProviders(<SignInForm />);\n\n      await user.type(screen.getByLabelText(/email address/i), 'test@example.com');\n      await user.type(screen.getByLabelText(/password/i), 'password123');\n      \n      const submitButton = screen.getByRole('button', { name: /sign in/i });\n      await user.click(submitButton);\n\n      // Check loading state\n      expect(submitButton).toBeDisabled();\n      expect(screen.getByText(/signing in/i)).toBeInTheDocument();\n      expect(screen.getByText(/please wait while we sign you in/i)).toBeInTheDocument();\n    });\n  });\n\n  describe('Error Handling', () => {\n    it('displays server validation errors', async () => {\n      const user = userEvent.setup();\n      mockApiError('/api/auth/signin', 400, {\n        errors: {\n          email: 'Email not found',\n          password: 'Invalid password',\n        },\n      });\n\n      renderWithProviders(<SignInForm />);\n\n      await user.type(screen.getByLabelText(/email address/i), 'test@example.com');\n      await user.type(screen.getByLabelText(/password/i), 'wrongpassword');\n      await user.click(screen.getByRole('button', { name: /sign in/i }));\n\n      await waitFor(() => {\n        expect(screen.getByText('Email not found')).toBeInTheDocument();\n        expect(screen.getByText('Invalid password')).toBeInTheDocument();\n      });\n    });\n\n    it('displays general error message', async () => {\n      const user = userEvent.setup();\n      mockApiError('/api/auth/signin', 401, {\n        error: 'Invalid credentials',\n      });\n\n      renderWithProviders(<SignInForm />);\n\n      await user.type(screen.getByLabelText(/email address/i), 'test@example.com');\n      await user.type(screen.getByLabelText(/password/i), 'wrongpassword');\n      await user.click(screen.getByRole('button', { name: /sign in/i }));\n\n      await waitFor(() => {\n        expect(screen.getByText('Sign In Failed')).toBeInTheDocument();\n        expect(screen.getByText('Invalid credentials')).toBeInTheDocument();\n      });\n    });\n\n    it('handles network errors gracefully', async () => {\n      const user = userEvent.setup();\n      \n      // Mock network error\n      global.fetch = jest.fn(() => Promise.reject(new Error('Network error')));\n\n      renderWithProviders(<SignInForm />);\n\n      await user.type(screen.getByLabelText(/email address/i), 'test@example.com');\n      await user.type(screen.getByLabelText(/password/i), 'password123');\n      await user.click(screen.getByRole('button', { name: /sign in/i }));\n\n      await waitFor(() => {\n        expect(screen.getByText(/an unexpected error occurred/i)).toBeInTheDocument();\n      });\n    });\n\n    it('clears errors when form is resubmitted', async () => {\n      const user = userEvent.setup();\n      mockApiError('/api/auth/signin', 401, { error: 'Invalid credentials' });\n\n      renderWithProviders(<SignInForm />);\n\n      // First submission with error\n      await user.type(screen.getByLabelText(/email address/i), 'test@example.com');\n      await user.type(screen.getByLabelText(/password/i), 'wrongpassword');\n      await user.click(screen.getByRole('button', { name: /sign in/i }));\n\n      await waitFor(() => {\n        expect(screen.getByText('Invalid credentials')).toBeInTheDocument();\n      });\n\n      // Mock successful response for retry\n      mockApiResponses({\n        '/api/auth/signin': { success: true },\n      });\n\n      // Retry submission\n      await user.clear(screen.getByLabelText(/password/i));\n      await user.type(screen.getByLabelText(/password/i), 'correctpassword');\n      await user.click(screen.getByRole('button', { name: /sign in/i }));\n\n      // Error should be cleared\n      expect(screen.queryByText('Invalid credentials')).not.toBeInTheDocument();\n    });\n  });\n\n  describe('Accessibility', () => {\n    it('has proper ARIA attributes', () => {\n      renderWithProviders(<SignInForm />);\n\n      const emailInput = screen.getByLabelText(/email address/i);\n      const passwordInput = screen.getByLabelText(/password/i);\n\n      expect(emailInput).toHaveAttribute('id', 'signin-email');\n      expect(passwordInput).toHaveAttribute('id', 'signin-password');\n    });\n\n    it('associates error messages with form fields', async () => {\n      const user = userEvent.setup();\n      renderWithProviders(<SignInForm />);\n\n      await user.click(screen.getByRole('button', { name: /sign in/i }));\n\n      await waitFor(() => {\n        const emailInput = screen.getByLabelText(/email address/i);\n        const emailError = screen.getByText(/please enter a valid email address/i);\n        \n        expect(emailInput).toHaveAttribute('aria-describedby', 'signin-email-error');\n        expect(emailError).toHaveAttribute('id', 'signin-email-error');\n        expect(emailError).toHaveAttribute('role', 'alert');\n      });\n    });\n\n    it('provides screen reader feedback for loading state', async () => {\n      const user = userEvent.setup();\n      \n      // Mock delayed response\n      global.fetch = jest.fn(() => \n        new Promise(resolve => \n          setTimeout(() => resolve({\n            ok: true,\n            json: () => Promise.resolve({ success: true })\n          }), 100)\n        )\n      );\n\n      renderWithProviders(<SignInForm />);\n\n      await user.type(screen.getByLabelText(/email address/i), 'test@example.com');\n      await user.type(screen.getByLabelText(/password/i), 'password123');\n      \n      const submitButton = screen.getByRole('button', { name: /sign in/i });\n      await user.click(submitButton);\n\n      expect(submitButton).toHaveAttribute('aria-describedby', 'signin-loading');\n      expect(screen.getByText(/please wait while we sign you in/i)).toHaveClass('sr-only');\n    });\n\n    it('has proper form validation summary', async () => {\n      const user = userEvent.setup();\n      mockApiError('/api/auth/signin', 401, { error: 'Invalid credentials' });\n\n      renderWithProviders(<SignInForm />);\n\n      await user.type(screen.getByLabelText(/email address/i), 'test@example.com');\n      await user.type(screen.getByLabelText(/password/i), 'wrongpassword');\n      await user.click(screen.getByRole('button', { name: /sign in/i }));\n\n      await waitFor(() => {\n        const summary = screen.getByText('Sign In Failed').closest('.form-validation-summary');\n        expect(summary).toBeInTheDocument();\n        expect(summary).toHaveClass('form-validation-summary');\n      });\n    });\n  });\n\n  describe('Form Interaction', () => {\n    it('allows keyboard navigation', async () => {\n      const user = userEvent.setup();\n      renderWithProviders(<SignInForm />);\n\n      const emailInput = screen.getByLabelText(/email address/i);\n      const passwordInput = screen.getByLabelText(/password/i);\n      const submitButton = screen.getByRole('button', { name: /sign in/i });\n\n      // Tab through form elements\n      await user.tab();\n      expect(emailInput).toHaveFocus();\n\n      await user.tab();\n      expect(passwordInput).toHaveFocus();\n\n      await user.tab();\n      expect(submitButton).toHaveFocus();\n    });\n\n    it('submits form on Enter key in password field', async () => {\n      const user = userEvent.setup();\n      renderWithProviders(<SignInForm />);\n\n      await user.type(screen.getByLabelText(/email address/i), 'test@example.com');\n      await user.type(screen.getByLabelText(/password/i), 'password123');\n      \n      // Press Enter in password field\n      await user.keyboard('{Enter}');\n\n      await waitFor(() => {\n        expect(global.fetch).toHaveBeenCalledWith('/api/auth/signin', expect.any(Object));\n      });\n    });\n\n    it('maintains form state during validation', async () => {\n      const user = userEvent.setup();\n      renderWithProviders(<SignInForm />);\n\n      const emailInput = screen.getByLabelText(/email address/i);\n      const passwordInput = screen.getByLabelText(/password/i);\n\n      await user.type(emailInput, 'test@example.com');\n      await user.type(passwordInput, 'short'); // Invalid password\n\n      await user.click(screen.getByRole('button', { name: /sign in/i }));\n\n      // Form values should be preserved even with validation errors\n      expect(emailInput).toHaveValue('test@example.com');\n      expect(passwordInput).toHaveValue('short');\n    });\n  });\n});"],"names":["jest","mock","useRouter","push","mockPush","refresh","mockRefresh","useSearchParams","get","mockSearchParamsGet","fn","describe","beforeEach","clearAllMocks","mockImplementation","key","mockApiResponses","success","user","id","email","it","renderWithProviders","SignInForm","expect","screen","getByLabelText","toBeInTheDocument","getByRole","name","form","hidden","toHaveAttribute","emailInput","passwordInput","getByText","labels","getAllByText","toHaveLength","userEvent","setup","submitButton","click","waitFor","global","fetch","not","toHaveBeenCalled","type","queryByText","toHaveBeenCalledWith","objectContaining","method","headers","body","JSON","stringify","password","Promise","resolve","setTimeout","ok","json","toBeDisabled","mockApiError","errors","error","reject","Error","clear","emailError","toHaveClass","summary","closest","tab","toHaveFocus","keyboard","any","Object","toHaveValue"],"mappings":"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"}