{"version":3,"names":["POST","resendVerificationSchema","cov_9dazl3zw4","s","_zod","z","object","email","string","request","f","_emailverificationmiddleware","withResendRateLimit","req","body","b","_parsedBody","json","validation","safeParse","success","_server","NextResponse","error","details","issues","map","issue","field","path","join","message","status","data","normalizedEmail","toLowerCase","user","_auth","getUserByEmail","isEmailVerified","redirectTo","verificationCode","_emailverificationcodeservice","emailVerificationCodeService","generateCode","id","emailService","_resendemailservice","createEmailService","_emailservice","sendEmailWithRetry","name","console","log","cooldownSeconds","emailError","EmailServiceError","errorMessage","code","VerificationCodeError","statusCode","VerificationError","USER_NOT_FOUND","ALREADY_VERIFIED"],"sources":["/Users/stefanbekker/projects/fancy-planties/src/app/api/auth/resend-verification/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { z } from 'zod';\nimport { emailVerificationCodeService, VerificationCodeError, VerificationError } from '@/lib/services/email-verification-code-service';\nimport { sendEmailWithRetry, EmailServiceError } from '@/lib/services/email-service';\nimport { createEmailService } from '@/lib/services/resend-email-service';\nimport { getUserByEmail } from '@/lib/auth';\nimport { withResendRateLimit } from '@/lib/auth/email-verification-middleware';\n\n// Validation schema for resend verification request\nconst resendVerificationSchema = z.object({\n  email: z.string().email('Invalid email address'),\n});\n\n// Note: Rate limiting is handled by the withResendRateLimit middleware with enhanced email verification limits\n\nexport async function POST(request: NextRequest) {\n  return withResendRateLimit(request, async (req) => {\n    // Extract parsed body from middleware\n    const body = (req as any)._parsedBody || await req.json();\n    try {\n      // Validate input\n      const validation = resendVerificationSchema.safeParse(body);\n      if (!validation.success) {\n        return NextResponse.json(\n          { \n            error: 'Validation failed', \n            details: validation.error.issues.map(issue => ({\n              field: issue.path.join('.'),\n              message: issue.message\n            }))\n          },\n          { status: 400 }\n        );\n      }\n      \n      const { email } = validation.data;\n      const normalizedEmail = email.toLowerCase();\n      \n      try {\n        // Check if user exists\n        const user = await getUserByEmail(normalizedEmail);\n        \n        if (!user) {\n          return NextResponse.json(\n            { error: 'User not found. Please sign up first.' },\n            { status: 404 }\n          );\n        }\n        \n        // Check if user is already verified\n        if (user.isEmailVerified) {\n          return NextResponse.json(\n            { \n              error: 'Email is already verified. You can sign in to your account.',\n              redirectTo: '/auth/signin'\n            },\n            { status: 400 }\n          );\n        }\n        \n        // Generate new verification code (this will invalidate existing codes)\n        const verificationCode = await emailVerificationCodeService.generateCode(user.id);\n        \n        // Send verification email\n        try {\n          const emailService = createEmailService();\n          await sendEmailWithRetry(emailService, normalizedEmail, verificationCode, user.name);\n          \n          console.log(`Verification code resent to ${normalizedEmail} for user ${user.id}`);\n          \n          return NextResponse.json({\n            success: true,\n            message: 'Verification code sent successfully. Please check your email.',\n            cooldownSeconds: 60 // 60 seconds cooldown\n          });\n          \n        } catch (emailError) {\n          console.error('Failed to resend verification email:', emailError);\n          \n          if (emailError instanceof EmailServiceError) {\n            let errorMessage = 'Failed to send verification email. ';\n            \n            switch (emailError.code) {\n              case 'QUOTA_EXCEEDED':\n                errorMessage += 'Email service quota exceeded. Please try again later.';\n                return NextResponse.json(\n                  { error: errorMessage },\n                  { status: 503 }\n                );\n              case 'INVALID_EMAIL':\n                errorMessage += 'Invalid email address.';\n                return NextResponse.json(\n                  { error: errorMessage },\n                  { status: 400 }\n                );\n              case 'API_ERROR':\n                errorMessage += 'Email service error. Please try again.';\n                break;\n              case 'NETWORK_ERROR':\n                errorMessage += 'Network error. Please check your connection and try again.';\n                break;\n              default:\n                errorMessage += 'Please try again.';\n            }\n            \n            return NextResponse.json(\n              { error: errorMessage },\n              { status: 500 }\n            );\n          }\n          \n          return NextResponse.json(\n            { error: 'Failed to send verification email. Please try again.' },\n            { status: 500 }\n          );\n        }\n        \n      } catch (error) {\n        if (error instanceof VerificationCodeError) {\n          let errorMessage: string;\n          let statusCode = 400;\n          \n          switch (error.code) {\n            case VerificationError.USER_NOT_FOUND:\n              errorMessage = 'User not found. Please sign up first.';\n              statusCode = 404;\n              break;\n            case VerificationError.ALREADY_VERIFIED:\n              errorMessage = 'Email is already verified. You can sign in to your account.';\n              return NextResponse.json({\n                success: true,\n                message: errorMessage,\n                redirectTo: '/auth/signin'\n              });\n            default:\n              errorMessage = 'Failed to generate verification code. Please try again.';\n          }\n          \n          console.log(`Resend verification failed for ${normalizedEmail}: ${error.code} - ${errorMessage}`);\n          \n          return NextResponse.json(\n            { \n              error: errorMessage,\n              code: error.code\n            },\n            { status: statusCode }\n          );\n        }\n        \n        // Log unexpected errors\n        console.error('Unexpected error during resend verification:', error);\n        \n        return NextResponse.json(\n          { error: 'Internal server error' },\n          { status: 500 }\n        );\n      }\n      \n    } catch (error) {\n      console.error('Resend verification endpoint error:', error);\n      \n      return NextResponse.json(\n        { error: 'Internal server error' },\n        { status: 500 }\n      );\n    }\n  });\n}\n\n"],"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","ignoreList":[]}