{"version":3,"sources":["/Users/stefanbekker/projects/fancy-planties/src/lib/services/__tests__/email-verification-code-service-unit.test.ts"],"sourcesContent":["import { describe, it, expect, jest } from '@jest/globals';\nimport { VerificationError, VerificationCodeError } from '../email-verification-code-service';\n\ndescribe('EmailVerificationCodeService - Unit Tests', () => {\n  describe('VerificationCodeError', () => {\n    it('should create error with correct message and code', () => {\n      const error = new VerificationCodeError('Test message', VerificationError.CODE_EXPIRED);\n      \n      expect(error.message).toBe('Test message');\n      expect(error.code).toBe(VerificationError.CODE_EXPIRED);\n      expect(error.name).toBe('VerificationCodeError');\n    });\n  });\n\n  describe('VerificationError enum', () => {\n    it('should have all required error codes', () => {\n      expect(VerificationError.CODE_EXPIRED).toBe('CODE_EXPIRED');\n      expect(VerificationError.CODE_INVALID).toBe('CODE_INVALID');\n      expect(VerificationError.TOO_MANY_ATTEMPTS).toBe('TOO_MANY_ATTEMPTS');\n      expect(VerificationError.USER_NOT_FOUND).toBe('USER_NOT_FOUND');\n      expect(VerificationError.ALREADY_VERIFIED).toBe('ALREADY_VERIFIED');\n    });\n  });\n\n  describe('Code generation security', () => {\n    it('should generate cryptographically secure codes', () => {\n      // Test the crypto.randomBytes functionality directly\n      const crypto = require('crypto');\n      const originalRandomBytes = crypto.randomBytes;\n      \n      // Mock to return predictable values for testing\n      const mockBuffer = Buffer.from([0, 0, 0, 1]); // Small number\n      crypto.randomBytes = jest.fn().mockReturnValue(mockBuffer);\n      \n      // Test the logic that would be in generateSecureCode\n      const buffer = crypto.randomBytes(4);\n      const randomNumber = buffer.readUInt32BE(0);\n      const code = (randomNumber % 1000000).toString().padStart(6, '0');\n      \n      expect(code).toMatch(/^\\d{6}$/);\n      expect(code.length).toBe(6);\n      expect(code).toBe('000001'); // Should pad with leading zeros\n      \n      // Restore original function\n      crypto.randomBytes = originalRandomBytes;\n    });\n\n    it('should generate different codes with different random inputs', () => {\n      const crypto = require('crypto');\n      const originalRandomBytes = crypto.randomBytes;\n      \n      // Test with different mock values\n      const testCases = [\n        { buffer: Buffer.from([0, 0, 0, 1]), expected: '000001' },\n        { buffer: Buffer.from([0, 0, 39, 16]), expected: '010000' }, // 10000\n        { buffer: Buffer.from([0, 15, 66, 64]), expected: '999999' }, // Close to 1000000\n      ];\n      \n      testCases.forEach(({ buffer, expected }) => {\n        crypto.randomBytes = jest.fn().mockReturnValue(buffer);\n        \n        const randomNumber = buffer.readUInt32BE(0);\n        const code = (randomNumber % 1000000).toString().padStart(6, '0');\n        \n        expect(code).toBe(expected);\n        expect(code.length).toBe(6);\n      });\n      \n      // Restore original function\n      crypto.randomBytes = originalRandomBytes;\n    });\n\n    it('should handle large random numbers correctly', () => {\n      const crypto = require('crypto');\n      const originalRandomBytes = crypto.randomBytes;\n      \n      // Test with maximum 32-bit value\n      const maxBuffer = Buffer.from([255, 255, 255, 255]);\n      crypto.randomBytes = jest.fn().mockReturnValue(maxBuffer);\n      \n      const randomNumber = maxBuffer.readUInt32BE(0);\n      const code = (randomNumber % 1000000).toString().padStart(6, '0');\n      \n      expect(code).toMatch(/^\\d{6}$/);\n      expect(code.length).toBe(6);\n      expect(parseInt(code)).toBeLessThan(1000000);\n      \n      // Restore original function\n      crypto.randomBytes = originalRandomBytes;\n    });\n  });\n\n  describe('Constants and configuration', () => {\n    it('should have correct service constants', () => {\n      // These would be the constants from the service\n      const CODE_LENGTH = 6;\n      const EXPIRY_MINUTES = 10;\n      const MAX_ATTEMPTS = 5;\n      \n      expect(CODE_LENGTH).toBe(6);\n      expect(EXPIRY_MINUTES).toBe(10);\n      expect(MAX_ATTEMPTS).toBe(5);\n    });\n\n    it('should calculate correct expiration time', () => {\n      const EXPIRY_MINUTES = 10;\n      const beforeTime = Date.now();\n      const expiresAt = new Date(Date.now() + EXPIRY_MINUTES * 60 * 1000);\n      const afterTime = Date.now();\n      \n      const expectedMin = beforeTime + 9.5 * 60 * 1000; // 9.5 minutes\n      const expectedMax = afterTime + 10.5 * 60 * 1000; // 10.5 minutes\n      \n      expect(expiresAt.getTime()).toBeGreaterThan(expectedMin);\n      expect(expiresAt.getTime()).toBeLessThan(expectedMax);\n    });\n  });\n\n  describe('Validation logic', () => {\n    it('should correctly identify expired codes', () => {\n      const now = new Date();\n      const expiredCode = new Date(now.getTime() - 5 * 60 * 1000); // 5 minutes ago\n      const validCode = new Date(now.getTime() + 5 * 60 * 1000); // 5 minutes from now\n      \n      expect(now > expiredCode).toBe(true);\n      expect(now > validCode).toBe(false);\n    });\n\n    it('should correctly identify max attempts exceeded', () => {\n      const MAX_ATTEMPTS = 5;\n      \n      expect(5 >= MAX_ATTEMPTS).toBe(true); // At max attempts\n      expect(6 >= MAX_ATTEMPTS).toBe(true); // Over max attempts\n      expect(4 >= MAX_ATTEMPTS).toBe(false); // Under max attempts\n    });\n  });\n});"],"names":["describe","it","error","VerificationCodeError","VerificationError","CODE_EXPIRED","expect","message","toBe","code","name","CODE_INVALID","TOO_MANY_ATTEMPTS","USER_NOT_FOUND","ALREADY_VERIFIED","crypto","require","originalRandomBytes","randomBytes","mockBuffer","Buffer","from","jest","fn","mockReturnValue","buffer","randomNumber","readUInt32BE","toString","padStart","toMatch","length","testCases","expected","forEach","maxBuffer","parseInt","toBeLessThan","CODE_LENGTH","EXPIRY_MINUTES","MAX_ATTEMPTS","beforeTime","Date","now","expiresAt","afterTime","expectedMin","expectedMax","getTime","toBeGreaterThan","expiredCode","validCode"],"mappings":";;;;yBAA2C;8CACc;AAEzDA,IAAAA,iBAAQ,EAAC,6CAA6C;IACpDA,IAAAA,iBAAQ,EAAC,yBAAyB;QAChCC,IAAAA,WAAE,EAAC,qDAAqD;YACtD,MAAMC,QAAQ,IAAIC,mDAAqB,CAAC,gBAAgBC,+CAAiB,CAACC,YAAY;YAEtFC,IAAAA,eAAM,EAACJ,MAAMK,OAAO,EAAEC,IAAI,CAAC;YAC3BF,IAAAA,eAAM,EAACJ,MAAMO,IAAI,EAAED,IAAI,CAACJ,+CAAiB,CAACC,YAAY;YACtDC,IAAAA,eAAM,EAACJ,MAAMQ,IAAI,EAAEF,IAAI,CAAC;QAC1B;IACF;IAEAR,IAAAA,iBAAQ,EAAC,0BAA0B;QACjCC,IAAAA,WAAE,EAAC,wCAAwC;YACzCK,IAAAA,eAAM,EAACF,+CAAiB,CAACC,YAAY,EAAEG,IAAI,CAAC;YAC5CF,IAAAA,eAAM,EAACF,+CAAiB,CAACO,YAAY,EAAEH,IAAI,CAAC;YAC5CF,IAAAA,eAAM,EAACF,+CAAiB,CAACQ,iBAAiB,EAAEJ,IAAI,CAAC;YACjDF,IAAAA,eAAM,EAACF,+CAAiB,CAACS,cAAc,EAAEL,IAAI,CAAC;YAC9CF,IAAAA,eAAM,EAACF,+CAAiB,CAACU,gBAAgB,EAAEN,IAAI,CAAC;QAClD;IACF;IAEAR,IAAAA,iBAAQ,EAAC,4BAA4B;QACnCC,IAAAA,WAAE,EAAC,kDAAkD;YACnD,qDAAqD;YACrD,MAAMc,SAASC,QAAQ;YACvB,MAAMC,sBAAsBF,OAAOG,WAAW;YAE9C,gDAAgD;YAChD,MAAMC,aAAaC,OAAOC,IAAI,CAAC;gBAAC;gBAAG;gBAAG;gBAAG;aAAE,GAAG,eAAe;YAC7DN,OAAOG,WAAW,GAAGI,aAAI,CAACC,EAAE,GAAGC,eAAe,CAACL;YAE/C,qDAAqD;YACrD,MAAMM,SAASV,OAAOG,WAAW,CAAC;YAClC,MAAMQ,eAAeD,OAAOE,YAAY,CAAC;YACzC,MAAMlB,OAAO,AAACiB,CAAAA,eAAe,OAAM,EAAGE,QAAQ,GAAGC,QAAQ,CAAC,GAAG;YAE7DvB,IAAAA,eAAM,EAACG,MAAMqB,OAAO,CAAC;YACrBxB,IAAAA,eAAM,EAACG,KAAKsB,MAAM,EAAEvB,IAAI,CAAC;YACzBF,IAAAA,eAAM,EAACG,MAAMD,IAAI,CAAC,WAAW,gCAAgC;YAE7D,4BAA4B;YAC5BO,OAAOG,WAAW,GAAGD;QACvB;QAEAhB,IAAAA,WAAE,EAAC,gEAAgE;YACjE,MAAMc,SAASC,QAAQ;YACvB,MAAMC,sBAAsBF,OAAOG,WAAW;YAE9C,kCAAkC;YAClC,MAAMc,YAAY;gBAChB;oBAAEP,QAAQL,OAAOC,IAAI,CAAC;wBAAC;wBAAG;wBAAG;wBAAG;qBAAE;oBAAGY,UAAU;gBAAS;gBACxD;oBAAER,QAAQL,OAAOC,IAAI,CAAC;wBAAC;wBAAG;wBAAG;wBAAI;qBAAG;oBAAGY,UAAU;gBAAS;gBAC1D;oBAAER,QAAQL,OAAOC,IAAI,CAAC;wBAAC;wBAAG;wBAAI;wBAAI;qBAAG;oBAAGY,UAAU;gBAAS;aAC5D;YAEDD,UAAUE,OAAO,CAAC,CAAC,EAAET,MAAM,EAAEQ,QAAQ,EAAE;gBACrClB,OAAOG,WAAW,GAAGI,aAAI,CAACC,EAAE,GAAGC,eAAe,CAACC;gBAE/C,MAAMC,eAAeD,OAAOE,YAAY,CAAC;gBACzC,MAAMlB,OAAO,AAACiB,CAAAA,eAAe,OAAM,EAAGE,QAAQ,GAAGC,QAAQ,CAAC,GAAG;gBAE7DvB,IAAAA,eAAM,EAACG,MAAMD,IAAI,CAACyB;gBAClB3B,IAAAA,eAAM,EAACG,KAAKsB,MAAM,EAAEvB,IAAI,CAAC;YAC3B;YAEA,4BAA4B;YAC5BO,OAAOG,WAAW,GAAGD;QACvB;QAEAhB,IAAAA,WAAE,EAAC,gDAAgD;YACjD,MAAMc,SAASC,QAAQ;YACvB,MAAMC,sBAAsBF,OAAOG,WAAW;YAE9C,iCAAiC;YACjC,MAAMiB,YAAYf,OAAOC,IAAI,CAAC;gBAAC;gBAAK;gBAAK;gBAAK;aAAI;YAClDN,OAAOG,WAAW,GAAGI,aAAI,CAACC,EAAE,GAAGC,eAAe,CAACW;YAE/C,MAAMT,eAAeS,UAAUR,YAAY,CAAC;YAC5C,MAAMlB,OAAO,AAACiB,CAAAA,eAAe,OAAM,EAAGE,QAAQ,GAAGC,QAAQ,CAAC,GAAG;YAE7DvB,IAAAA,eAAM,EAACG,MAAMqB,OAAO,CAAC;YACrBxB,IAAAA,eAAM,EAACG,KAAKsB,MAAM,EAAEvB,IAAI,CAAC;YACzBF,IAAAA,eAAM,EAAC8B,SAAS3B,OAAO4B,YAAY,CAAC;YAEpC,4BAA4B;YAC5BtB,OAAOG,WAAW,GAAGD;QACvB;IACF;IAEAjB,IAAAA,iBAAQ,EAAC,+BAA+B;QACtCC,IAAAA,WAAE,EAAC,yCAAyC;YAC1C,gDAAgD;YAChD,MAAMqC,cAAc;YACpB,MAAMC,iBAAiB;YACvB,MAAMC,eAAe;YAErBlC,IAAAA,eAAM,EAACgC,aAAa9B,IAAI,CAAC;YACzBF,IAAAA,eAAM,EAACiC,gBAAgB/B,IAAI,CAAC;YAC5BF,IAAAA,eAAM,EAACkC,cAAchC,IAAI,CAAC;QAC5B;QAEAP,IAAAA,WAAE,EAAC,4CAA4C;YAC7C,MAAMsC,iBAAiB;YACvB,MAAME,aAAaC,KAAKC,GAAG;YAC3B,MAAMC,YAAY,IAAIF,KAAKA,KAAKC,GAAG,KAAKJ,iBAAiB,KAAK;YAC9D,MAAMM,YAAYH,KAAKC,GAAG;YAE1B,MAAMG,cAAcL,aAAa,MAAM,KAAK,MAAM,cAAc;YAChE,MAAMM,cAAcF,YAAY,OAAO,KAAK,MAAM,eAAe;YAEjEvC,IAAAA,eAAM,EAACsC,UAAUI,OAAO,IAAIC,eAAe,CAACH;YAC5CxC,IAAAA,eAAM,EAACsC,UAAUI,OAAO,IAAIX,YAAY,CAACU;QAC3C;IACF;IAEA/C,IAAAA,iBAAQ,EAAC,oBAAoB;QAC3BC,IAAAA,WAAE,EAAC,2CAA2C;YAC5C,MAAM0C,MAAM,IAAID;YAChB,MAAMQ,cAAc,IAAIR,KAAKC,IAAIK,OAAO,KAAK,IAAI,KAAK,OAAO,gBAAgB;YAC7E,MAAMG,YAAY,IAAIT,KAAKC,IAAIK,OAAO,KAAK,IAAI,KAAK,OAAO,qBAAqB;YAEhF1C,IAAAA,eAAM,EAACqC,MAAMO,aAAa1C,IAAI,CAAC;YAC/BF,IAAAA,eAAM,EAACqC,MAAMQ,WAAW3C,IAAI,CAAC;QAC/B;QAEAP,IAAAA,WAAE,EAAC,mDAAmD;YACpD,MAAMuC,eAAe;YAErBlC,IAAAA,eAAM,EAAC,KAAKkC,cAAchC,IAAI,CAAC,OAAO,kBAAkB;YACxDF,IAAAA,eAAM,EAAC,KAAKkC,cAAchC,IAAI,CAAC,OAAO,oBAAoB;YAC1DF,IAAAA,eAAM,EAAC,KAAKkC,cAAchC,IAAI,CAAC,QAAQ,qBAAqB;QAC9D;IACF;AACF"}