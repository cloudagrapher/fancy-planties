499b7515613682ed535045cb18c37ad1
"use strict";

/* istanbul ignore next */
function cov_2p8r0y8w0l() {
  var path = "/Users/stefanbekker/projects/fancy-planties/src/lib/auth/email-verification-middleware.ts";
  var hash = "c23fd05a13404366dcdbed7df9ea52fa739ea216";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/stefanbekker/projects/fancy-planties/src/lib/auth/email-verification-middleware.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 24,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 46
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 35
        }
      },
      "6": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 38
        }
      },
      "7": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 41
        }
      },
      "8": {
        start: {
          line: 25,
          column: 0
        },
        end: {
          line: 25,
          column: 23
        }
      },
      "9": {
        start: {
          line: 26,
          column: 16
        },
        end: {
          line: 26,
          column: 38
        }
      },
      "10": {
        start: {
          line: 27,
          column: 38
        },
        end: {
          line: 27,
          column: 92
        }
      },
      "11": {
        start: {
          line: 32,
          column: 25
        },
        end: {
          line: 32,
          column: 63
        }
      },
      "12": {
        start: {
          line: 33,
          column: 19
        },
        end: {
          line: 33,
          column: 51
        }
      },
      "13": {
        start: {
          line: 34,
          column: 23
        },
        end: {
          line: 34,
          column: 59
        }
      },
      "14": {
        start: {
          line: 35,
          column: 4
        },
        end: {
          line: 38,
          column: 5
        }
      },
      "15": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 37,
          column: 49
        }
      },
      "16": {
        start: {
          line: 39,
          column: 4
        },
        end: {
          line: 41,
          column: 5
        }
      },
      "17": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 40,
          column: 22
        }
      },
      "18": {
        start: {
          line: 42,
          column: 4
        },
        end: {
          line: 44,
          column: 5
        }
      },
      "19": {
        start: {
          line: 43,
          column: 8
        },
        end: {
          line: 43,
          column: 26
        }
      },
      "20": {
        start: {
          line: 46,
          column: 4
        },
        end: {
          line: 46,
          column: 21
        }
      },
      "21": {
        start: {
          line: 49,
          column: 4
        },
        end: {
          line: 162,
          column: 5
        }
      },
      "22": {
        start: {
          line: 50,
          column: 27
        },
        end: {
          line: 50,
          column: 55
        }
      },
      "23": {
        start: {
          line: 53,
          column: 8
        },
        end: {
          line: 80,
          column: 9
        }
      },
      "24": {
        start: {
          line: 54,
          column: 12
        },
        end: {
          line: 79,
          column: 13
        }
      },
      "25": {
        start: {
          line: 55,
          column: 29
        },
        end: {
          line: 55,
          column: 49
        }
      },
      "26": {
        start: {
          line: 56,
          column: 16
        },
        end: {
          line: 56,
          column: 50
        }
      },
      "27": {
        start: {
          line: 57,
          column: 16
        },
        end: {
          line: 63,
          column: 17
        }
      },
      "28": {
        start: {
          line: 58,
          column: 20
        },
        end: {
          line: 62,
          column: 23
        }
      },
      "29": {
        start: {
          line: 65,
          column: 35
        },
        end: {
          line: 69,
          column: 18
        }
      },
      "30": {
        start: {
          line: 71,
          column: 16
        },
        end: {
          line: 71,
          column: 46
        }
      },
      "31": {
        start: {
          line: 72,
          column: 16
        },
        end: {
          line: 72,
          column: 37
        }
      },
      "32": {
        start: {
          line: 74,
          column: 16
        },
        end: {
          line: 78,
          column: 19
        }
      },
      "33": {
        start: {
          line: 82,
          column: 8
        },
        end: {
          line: 99,
          column: 9
        }
      },
      "34": {
        start: {
          line: 83,
          column: 35
        },
        end: {
          line: 83,
          column: 143
        }
      },
      "35": {
        start: {
          line: 84,
          column: 12
        },
        end: {
          line: 98,
          column: 13
        }
      },
      "36": {
        start: {
          line: 85,
          column: 16
        },
        end: {
          line: 97,
          column: 19
        }
      },
      "37": {
        start: {
          line: 101,
          column: 8
        },
        end: {
          line: 118,
          column: 9
        }
      },
      "38": {
        start: {
          line: 102,
          column: 39
        },
        end: {
          line: 102,
          column: 142
        }
      },
      "39": {
        start: {
          line: 103,
          column: 12
        },
        end: {
          line: 117,
          column: 13
        }
      },
      "40": {
        start: {
          line: 104,
          column: 16
        },
        end: {
          line: 116,
          column: 19
        }
      },
      "41": {
        start: {
          line: 120,
          column: 8
        },
        end: {
          line: 139,
          column: 9
        }
      },
      "42": {
        start: {
          line: 121,
          column: 33
        },
        end: {
          line: 121,
          column: 130
        }
      },
      "43": {
        start: {
          line: 122,
          column: 12
        },
        end: {
          line: 138,
          column: 13
        }
      },
      "44": {
        start: {
          line: 123,
          column: 37
        },
        end: {
          line: 123,
          column: 224
        }
      },
      "45": {
        start: {
          line: 124,
          column: 16
        },
        end: {
          line: 137,
          column: 19
        }
      },
      "46": {
        start: {
          line: 141,
          column: 29
        },
        end: {
          line: 141,
          column: 131
        }
      },
      "47": {
        start: {
          line: 142,
          column: 8
        },
        end: {
          line: 147,
          column: 9
        }
      },
      "48": {
        start: {
          line: 144,
          column: 12
        },
        end: {
          line: 146,
          column: 15
        }
      },
      "49": {
        start: {
          line: 149,
          column: 25
        },
        end: {
          line: 149,
          column: 47
        }
      },
      "50": {
        start: {
          line: 151,
          column: 8
        },
        end: {
          line: 153,
          column: 9
        }
      },
      "51": {
        start: {
          line: 152,
          column: 12
        },
        end: {
          line: 152,
          column: 98
        }
      },
      "52": {
        start: {
          line: 154,
          column: 8
        },
        end: {
          line: 154,
          column: 24
        }
      },
      "53": {
        start: {
          line: 156,
          column: 8
        },
        end: {
          line: 156,
          column: 80
        }
      },
      "54": {
        start: {
          line: 157,
          column: 8
        },
        end: {
          line: 161,
          column: 11
        }
      },
      "55": {
        start: {
          line: 165,
          column: 4
        },
        end: {
          line: 169,
          column: 7
        }
      },
      "56": {
        start: {
          line: 172,
          column: 4
        },
        end: {
          line: 176,
          column: 7
        }
      },
      "57": {
        start: {
          line: 179,
          column: 4
        },
        end: {
          line: 198,
          column: 5
        }
      },
      "58": {
        start: {
          line: 180,
          column: 27
        },
        end: {
          line: 180,
          column: 55
        }
      },
      "59": {
        start: {
          line: 182,
          column: 31
        },
        end: {
          line: 182,
          column: 132
        }
      },
      "60": {
        start: {
          line: 183,
          column: 8
        },
        end: {
          line: 189,
          column: 9
        }
      },
      "61": {
        start: {
          line: 184,
          column: 12
        },
        end: {
          line: 188,
          column: 15
        }
      },
      "62": {
        start: {
          line: 190,
          column: 8
        },
        end: {
          line: 190,
          column: 38
        }
      },
      "63": {
        start: {
          line: 192,
          column: 8
        },
        end: {
          line: 192,
          column: 70
        }
      },
      "64": {
        start: {
          line: 193,
          column: 8
        },
        end: {
          line: 197,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        },
        loc: {
          start: {
            line: 12,
            column: 42
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 31
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 18,
            column: 4
          },
          end: {
            line: 18,
            column: 5
          }
        },
        loc: {
          start: {
            line: 18,
            column: 34
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 18
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 21,
            column: 4
          },
          end: {
            line: 21,
            column: 5
          }
        },
        loc: {
          start: {
            line: 21,
            column: 37
          },
          end: {
            line: 23,
            column: 5
          }
        },
        line: 21
      },
      "5": {
        name: "getClientIdentifier",
        decl: {
          start: {
            line: 30,
            column: 13
          },
          end: {
            line: 30,
            column: 32
          }
        },
        loc: {
          start: {
            line: 30,
            column: 42
          },
          end: {
            line: 47,
            column: 1
          }
        },
        line: 30
      },
      "6": {
        name: "withEmailVerificationRateLimit",
        decl: {
          start: {
            line: 48,
            column: 15
          },
          end: {
            line: 48,
            column: 45
          }
        },
        loc: {
          start: {
            line: 48,
            column: 78
          },
          end: {
            line: 163,
            column: 1
          }
        },
        line: 48
      },
      "7": {
        name: "withVerificationRateLimit",
        decl: {
          start: {
            line: 164,
            column: 15
          },
          end: {
            line: 164,
            column: 40
          }
        },
        loc: {
          start: {
            line: 164,
            column: 59
          },
          end: {
            line: 170,
            column: 1
          }
        },
        line: 164
      },
      "8": {
        name: "withResendRateLimit",
        decl: {
          start: {
            line: 171,
            column: 15
          },
          end: {
            line: 171,
            column: 34
          }
        },
        loc: {
          start: {
            line: 171,
            column: 53
          },
          end: {
            line: 177,
            column: 1
          }
        },
        line: 171
      },
      "9": {
        name: "withSecurityMonitoring",
        decl: {
          start: {
            line: 178,
            column: 15
          },
          end: {
            line: 178,
            column: 37
          }
        },
        loc: {
          start: {
            line: 178,
            column: 56
          },
          end: {
            line: 199,
            column: 1
          }
        },
        line: 178
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 35,
            column: 4
          },
          end: {
            line: 38,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 35,
            column: 4
          },
          end: {
            line: 38,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 35
      },
      "1": {
        loc: {
          start: {
            line: 39,
            column: 4
          },
          end: {
            line: 41,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 39,
            column: 4
          },
          end: {
            line: 41,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 39
      },
      "2": {
        loc: {
          start: {
            line: 42,
            column: 4
          },
          end: {
            line: 44,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 42,
            column: 4
          },
          end: {
            line: 44,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 42
      },
      "3": {
        loc: {
          start: {
            line: 48,
            column: 64
          },
          end: {
            line: 48,
            column: 76
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 48,
            column: 74
          },
          end: {
            line: 48,
            column: 76
          }
        }],
        line: 48
      },
      "4": {
        loc: {
          start: {
            line: 53,
            column: 8
          },
          end: {
            line: 80,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 53,
            column: 8
          },
          end: {
            line: 80,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 53
      },
      "5": {
        loc: {
          start: {
            line: 53,
            column: 12
          },
          end: {
            line: 53,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 53,
            column: 12
          },
          end: {
            line: 53,
            column: 32
          }
        }, {
          start: {
            line: 53,
            column: 36
          },
          end: {
            line: 53,
            column: 63
          }
        }],
        line: 53
      },
      "6": {
        loc: {
          start: {
            line: 57,
            column: 16
          },
          end: {
            line: 63,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 57,
            column: 16
          },
          end: {
            line: 63,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 57
      },
      "7": {
        loc: {
          start: {
            line: 57,
            column: 20
          },
          end: {
            line: 57,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 57,
            column: 20
          },
          end: {
            line: 57,
            column: 40
          }
        }, {
          start: {
            line: 57,
            column: 44
          },
          end: {
            line: 57,
            column: 50
          }
        }],
        line: 57
      },
      "8": {
        loc: {
          start: {
            line: 82,
            column: 8
          },
          end: {
            line: 99,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 82,
            column: 8
          },
          end: {
            line: 99,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 82
      },
      "9": {
        loc: {
          start: {
            line: 84,
            column: 12
          },
          end: {
            line: 98,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 84,
            column: 12
          },
          end: {
            line: 98,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 84
      },
      "10": {
        loc: {
          start: {
            line: 95,
            column: 39
          },
          end: {
            line: 95,
            column: 86
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 95,
            column: 39
          },
          end: {
            line: 95,
            column: 76
          }
        }, {
          start: {
            line: 95,
            column: 80
          },
          end: {
            line: 95,
            column: 86
          }
        }],
        line: 95
      },
      "11": {
        loc: {
          start: {
            line: 101,
            column: 8
          },
          end: {
            line: 118,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 101,
            column: 8
          },
          end: {
            line: 118,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 101
      },
      "12": {
        loc: {
          start: {
            line: 103,
            column: 12
          },
          end: {
            line: 117,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 103,
            column: 12
          },
          end: {
            line: 117,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 103
      },
      "13": {
        loc: {
          start: {
            line: 114,
            column: 39
          },
          end: {
            line: 114,
            column: 90
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 114,
            column: 39
          },
          end: {
            line: 114,
            column: 80
          }
        }, {
          start: {
            line: 114,
            column: 84
          },
          end: {
            line: 114,
            column: 90
          }
        }],
        line: 114
      },
      "14": {
        loc: {
          start: {
            line: 120,
            column: 8
          },
          end: {
            line: 139,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 120,
            column: 8
          },
          end: {
            line: 139,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 120
      },
      "15": {
        loc: {
          start: {
            line: 120,
            column: 12
          },
          end: {
            line: 120,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 120,
            column: 12
          },
          end: {
            line: 120,
            column: 39
          }
        }, {
          start: {
            line: 120,
            column: 43
          },
          end: {
            line: 120,
            column: 48
          }
        }],
        line: 120
      },
      "16": {
        loc: {
          start: {
            line: 122,
            column: 12
          },
          end: {
            line: 138,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 122,
            column: 12
          },
          end: {
            line: 138,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 122
      },
      "17": {
        loc: {
          start: {
            line: 123,
            column: 37
          },
          end: {
            line: 123,
            column: 224
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 123,
            column: 70
          },
          end: {
            line: 123,
            column: 170
          }
        }, {
          start: {
            line: 123,
            column: 173
          },
          end: {
            line: 123,
            column: 224
          }
        }],
        line: 123
      },
      "18": {
        loc: {
          start: {
            line: 135,
            column: 39
          },
          end: {
            line: 135,
            column: 82
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 135,
            column: 39
          },
          end: {
            line: 135,
            column: 74
          }
        }, {
          start: {
            line: 135,
            column: 78
          },
          end: {
            line: 135,
            column: 82
          }
        }],
        line: 135
      },
      "19": {
        loc: {
          start: {
            line: 142,
            column: 8
          },
          end: {
            line: 147,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 142,
            column: 8
          },
          end: {
            line: 147,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 142
      },
      "20": {
        loc: {
          start: {
            line: 151,
            column: 8
          },
          end: {
            line: 153,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 151,
            column: 8
          },
          end: {
            line: 153,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 151
      },
      "21": {
        loc: {
          start: {
            line: 151,
            column: 12
          },
          end: {
            line: 151,
            column: 75
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 151,
            column: 12
          },
          end: {
            line: 151,
            column: 39
          }
        }, {
          start: {
            line: 151,
            column: 43
          },
          end: {
            line: 151,
            column: 48
          }
        }, {
          start: {
            line: 151,
            column: 52
          },
          end: {
            line: 151,
            column: 75
          }
        }],
        line: 151
      },
      "22": {
        loc: {
          start: {
            line: 183,
            column: 8
          },
          end: {
            line: 189,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 183,
            column: 8
          },
          end: {
            line: 189,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 183
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0, 0],
      "22": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/stefanbekker/projects/fancy-planties/src/lib/auth/email-verification-middleware.ts"],
      sourcesContent: ["import 'server-only';\nimport { NextRequest, NextResponse } from 'next/server';\nimport { emailVerificationRateLimiter } from '@/lib/services/email-verification-rate-limiter';\n\n/**\n * Get client identifier for rate limiting\n */\nfunction getClientIdentifier(request: NextRequest): string {\n  // Try to get real IP address\n  const forwardedFor = request.headers.get('x-forwarded-for');\n  const realIp = request.headers.get('x-real-ip');\n  const remoteAddr = request.headers.get('x-remote-addr');\n  \n  if (forwardedFor) {\n    // x-forwarded-for can contain multiple IPs, take the first one\n    return forwardedFor.split(',')[0].trim();\n  }\n  \n  if (realIp) {\n    return realIp;\n  }\n  \n  if (remoteAddr) {\n    return remoteAddr;\n  }\n  \n  // Fallback identifier\n  return 'unknown';\n}\n\n/**\n * Enhanced rate limiting middleware for email verification endpoints\n */\nexport async function withEmailVerificationRateLimit(\n  request: NextRequest,\n  handler: (request: NextRequest) => Promise<NextResponse>,\n  options: {\n    checkVerificationAttempts?: boolean;\n    checkResendRequests?: boolean;\n    checkOverallActivity?: boolean;\n    requireEmail?: boolean;\n  } = {}\n): Promise<NextResponse> {\n  try {\n    const identifier = getClientIdentifier(request);\n    let email: string | undefined;\n    \n    // Extract email from request body if needed\n    if (options.requireEmail || options.checkResendRequests) {\n      try {\n        const body = await request.json();\n        email = body.email?.toLowerCase();\n        \n        if (options.requireEmail && !email) {\n          return NextResponse.json(\n            { error: 'Email is required' },\n            { status: 400 }\n          );\n        }\n        \n        // Create a new request with the parsed body for the handler\n        const newRequest = new NextRequest(request.url, {\n          method: request.method,\n          headers: request.headers,\n          body: JSON.stringify(body),\n        });\n        \n        // Copy the parsed body to the new request for the handler to use\n        (newRequest as any)._parsedBody = body;\n        request = newRequest;\n      } catch (error) {\n        return NextResponse.json(\n          { error: 'Invalid JSON in request body' },\n          { status: 400 }\n        );\n      }\n    }\n    \n    // Check overall email verification activity first\n    if (options.checkOverallActivity !== false) {\n      const activityResult = emailVerificationRateLimiter.checkEmailVerificationActivity(identifier, email);\n      \n      if (!activityResult.allowed) {\n        return NextResponse.json(\n          {\n            error: 'Too many email verification requests. Please try again later.',\n            retryAfter: activityResult.retryAfter,\n            resetTime: activityResult.resetTime,\n          },\n          {\n            status: 429,\n            headers: {\n              'X-RateLimit-Limit': '20',\n              'X-RateLimit-Remaining': activityResult.remaining.toString(),\n              'X-RateLimit-Reset': activityResult.resetTime.toString(),\n              'Retry-After': activityResult.retryAfter?.toString() || '3600',\n            },\n          }\n        );\n      }\n    }\n    \n    // Check verification attempts rate limit\n    if (options.checkVerificationAttempts) {\n      const verificationResult = emailVerificationRateLimiter.checkVerificationAttempts(identifier, email);\n      \n      if (!verificationResult.allowed) {\n        return NextResponse.json(\n          {\n            error: 'Too many verification attempts. Please try again later.',\n            retryAfter: verificationResult.retryAfter,\n            resetTime: verificationResult.resetTime,\n          },\n          {\n            status: 429,\n            headers: {\n              'X-RateLimit-Limit': '10',\n              'X-RateLimit-Remaining': verificationResult.remaining.toString(),\n              'X-RateLimit-Reset': verificationResult.resetTime.toString(),\n              'Retry-After': verificationResult.retryAfter?.toString() || '3600',\n            },\n          }\n        );\n      }\n    }\n    \n    // Check resend requests rate limit\n    if (options.checkResendRequests && email) {\n      const resendResult = emailVerificationRateLimiter.checkResendRequests(email, identifier);\n      \n      if (!resendResult.allowed) {\n        const errorMessage = resendResult.cooldownRemaining\n          ? `Please wait ${resendResult.cooldownRemaining} seconds before requesting another verification code.`\n          : 'Too many resend requests. Please try again later.';\n        \n        return NextResponse.json(\n          {\n            error: errorMessage,\n            retryAfter: resendResult.retryAfter,\n            resetTime: resendResult.resetTime,\n            cooldownSeconds: resendResult.cooldownRemaining,\n          },\n          {\n            status: 429,\n            headers: {\n              'X-RateLimit-Limit': '5',\n              'X-RateLimit-Remaining': resendResult.remaining.toString(),\n              'X-RateLimit-Reset': resendResult.resetTime.toString(),\n              'Retry-After': resendResult.retryAfter?.toString() || '60',\n            },\n          }\n        );\n      }\n    }\n    \n    // Check for suspicious activity\n    const isSuspicious = emailVerificationRateLimiter.detectSuspiciousActivity(identifier, email);\n    if (isSuspicious) {\n      // For now, just log it. In production, you might want to add additional restrictions\n      console.warn(`Suspicious email verification activity detected from ${identifier}`, { email });\n    }\n    \n    // Call the handler\n    const response = await handler(request);\n    \n    // Record successful resend if applicable\n    if (options.checkResendRequests && email && response.status === 200) {\n      emailVerificationRateLimiter.recordResendSuccess(email);\n    }\n    \n    return response;\n    \n  } catch (error) {\n    console.error('Email verification rate limit middleware error:', error);\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    );\n  }\n}\n\n/**\n * Middleware specifically for verification attempts\n */\nexport async function withVerificationRateLimit(\n  request: NextRequest,\n  handler: (request: NextRequest) => Promise<NextResponse>\n): Promise<NextResponse> {\n  return withEmailVerificationRateLimit(request, handler, {\n    checkVerificationAttempts: true,\n    checkOverallActivity: true,\n    requireEmail: true,\n  });\n}\n\n/**\n * Middleware specifically for resend requests\n */\nexport async function withResendRateLimit(\n  request: NextRequest,\n  handler: (request: NextRequest) => Promise<NextResponse>\n): Promise<NextResponse> {\n  return withEmailVerificationRateLimit(request, handler, {\n    checkResendRequests: true,\n    checkOverallActivity: true,\n    requireEmail: true,\n  });\n}\n\n/**\n * Security monitoring endpoint middleware\n */\nexport async function withSecurityMonitoring(\n  request: NextRequest,\n  handler: (request: NextRequest) => Promise<NextResponse>\n): Promise<NextResponse> {\n  try {\n    const identifier = getClientIdentifier(request);\n    \n    // Basic rate limiting for monitoring endpoints\n    const activityResult = emailVerificationRateLimiter.checkEmailVerificationActivity(identifier);\n    \n    if (!activityResult.allowed) {\n      return NextResponse.json(\n        { error: 'Too many requests' },\n        { status: 429 }\n      );\n    }\n    \n    return await handler(request);\n    \n  } catch (error) {\n    console.error('Security monitoring middleware error:', error);\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    );\n  }\n}"],
      names: ["withEmailVerificationRateLimit", "withResendRateLimit", "withSecurityMonitoring", "withVerificationRateLimit", "getClientIdentifier", "request", "forwardedFor", "headers", "get", "realIp", "remoteAddr", "split", "trim", "handler", "options", "identifier", "email", "requireEmail", "checkResendRequests", "body", "json", "toLowerCase", "NextResponse", "error", "status", "newRequest", "NextRequest", "url", "method", "JSON", "stringify", "_parsedBody", "checkOverallActivity", "activityResult", "emailVerificationRateLimiter", "checkEmailVerificationActivity", "allowed", "retryAfter", "resetTime", "remaining", "toString", "checkVerificationAttempts", "verificationResult", "resendResult", "errorMessage", "cooldownRemaining", "cooldownSeconds", "isSuspicious", "detectSuspiciousActivity", "console", "warn", "response", "recordResendSuccess"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "c23fd05a13404366dcdbed7df9ea52fa739ea216"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2p8r0y8w0l = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2p8r0y8w0l();
cov_2p8r0y8w0l().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_2p8r0y8w0l().f[0]++;
  cov_2p8r0y8w0l().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_2p8r0y8w0l().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_2p8r0y8w0l().s[3]++;
_export(exports, {
  get withEmailVerificationRateLimit() {
    /* istanbul ignore next */
    cov_2p8r0y8w0l().f[1]++;
    cov_2p8r0y8w0l().s[4]++;
    return withEmailVerificationRateLimit;
  },
  get withResendRateLimit() {
    /* istanbul ignore next */
    cov_2p8r0y8w0l().f[2]++;
    cov_2p8r0y8w0l().s[5]++;
    return withResendRateLimit;
  },
  get withSecurityMonitoring() {
    /* istanbul ignore next */
    cov_2p8r0y8w0l().f[3]++;
    cov_2p8r0y8w0l().s[6]++;
    return withSecurityMonitoring;
  },
  get withVerificationRateLimit() {
    /* istanbul ignore next */
    cov_2p8r0y8w0l().f[4]++;
    cov_2p8r0y8w0l().s[7]++;
    return withVerificationRateLimit;
  }
});
/* istanbul ignore next */
cov_2p8r0y8w0l().s[8]++;
require("server-only");
const _server =
/* istanbul ignore next */
(cov_2p8r0y8w0l().s[9]++, require("next/server"));
const _emailverificationratelimiter =
/* istanbul ignore next */
(cov_2p8r0y8w0l().s[10]++, require("../services/email-verification-rate-limiter"));
/**
 * Get client identifier for rate limiting
 */
function getClientIdentifier(request) {
  /* istanbul ignore next */
  cov_2p8r0y8w0l().f[5]++;
  // Try to get real IP address
  const forwardedFor =
  /* istanbul ignore next */
  (cov_2p8r0y8w0l().s[11]++, request.headers.get('x-forwarded-for'));
  const realIp =
  /* istanbul ignore next */
  (cov_2p8r0y8w0l().s[12]++, request.headers.get('x-real-ip'));
  const remoteAddr =
  /* istanbul ignore next */
  (cov_2p8r0y8w0l().s[13]++, request.headers.get('x-remote-addr'));
  /* istanbul ignore next */
  cov_2p8r0y8w0l().s[14]++;
  if (forwardedFor) {
    /* istanbul ignore next */
    cov_2p8r0y8w0l().b[0][0]++;
    cov_2p8r0y8w0l().s[15]++;
    // x-forwarded-for can contain multiple IPs, take the first one
    return forwardedFor.split(',')[0].trim();
  } else
  /* istanbul ignore next */
  {
    cov_2p8r0y8w0l().b[0][1]++;
  }
  cov_2p8r0y8w0l().s[16]++;
  if (realIp) {
    /* istanbul ignore next */
    cov_2p8r0y8w0l().b[1][0]++;
    cov_2p8r0y8w0l().s[17]++;
    return realIp;
  } else
  /* istanbul ignore next */
  {
    cov_2p8r0y8w0l().b[1][1]++;
  }
  cov_2p8r0y8w0l().s[18]++;
  if (remoteAddr) {
    /* istanbul ignore next */
    cov_2p8r0y8w0l().b[2][0]++;
    cov_2p8r0y8w0l().s[19]++;
    return remoteAddr;
  } else
  /* istanbul ignore next */
  {
    cov_2p8r0y8w0l().b[2][1]++;
  }
  // Fallback identifier
  cov_2p8r0y8w0l().s[20]++;
  return 'unknown';
}
async function withEmailVerificationRateLimit(request, handler, options =
/* istanbul ignore next */
(cov_2p8r0y8w0l().b[3][0]++, {})) {
  /* istanbul ignore next */
  cov_2p8r0y8w0l().f[6]++;
  cov_2p8r0y8w0l().s[21]++;
  try {
    const identifier =
    /* istanbul ignore next */
    (cov_2p8r0y8w0l().s[22]++, getClientIdentifier(request));
    let email;
    // Extract email from request body if needed
    /* istanbul ignore next */
    cov_2p8r0y8w0l().s[23]++;
    if (
    /* istanbul ignore next */
    (cov_2p8r0y8w0l().b[5][0]++, options.requireEmail) ||
    /* istanbul ignore next */
    (cov_2p8r0y8w0l().b[5][1]++, options.checkResendRequests)) {
      /* istanbul ignore next */
      cov_2p8r0y8w0l().b[4][0]++;
      cov_2p8r0y8w0l().s[24]++;
      try {
        const body =
        /* istanbul ignore next */
        (cov_2p8r0y8w0l().s[25]++, await request.json());
        /* istanbul ignore next */
        cov_2p8r0y8w0l().s[26]++;
        email = body.email?.toLowerCase();
        /* istanbul ignore next */
        cov_2p8r0y8w0l().s[27]++;
        if (
        /* istanbul ignore next */
        (cov_2p8r0y8w0l().b[7][0]++, options.requireEmail) &&
        /* istanbul ignore next */
        (cov_2p8r0y8w0l().b[7][1]++, !email)) {
          /* istanbul ignore next */
          cov_2p8r0y8w0l().b[6][0]++;
          cov_2p8r0y8w0l().s[28]++;
          return _server.NextResponse.json({
            error: 'Email is required'
          }, {
            status: 400
          });
        } else
        /* istanbul ignore next */
        {
          cov_2p8r0y8w0l().b[6][1]++;
        }
        // Create a new request with the parsed body for the handler
        const newRequest =
        /* istanbul ignore next */
        (cov_2p8r0y8w0l().s[29]++, new _server.NextRequest(request.url, {
          method: request.method,
          headers: request.headers,
          body: JSON.stringify(body)
        }));
        // Copy the parsed body to the new request for the handler to use
        /* istanbul ignore next */
        cov_2p8r0y8w0l().s[30]++;
        newRequest._parsedBody = body;
        /* istanbul ignore next */
        cov_2p8r0y8w0l().s[31]++;
        request = newRequest;
      } catch (error) {
        /* istanbul ignore next */
        cov_2p8r0y8w0l().s[32]++;
        return _server.NextResponse.json({
          error: 'Invalid JSON in request body'
        }, {
          status: 400
        });
      }
    } else
    /* istanbul ignore next */
    {
      cov_2p8r0y8w0l().b[4][1]++;
    }
    // Check overall email verification activity first
    cov_2p8r0y8w0l().s[33]++;
    if (options.checkOverallActivity !== false) {
      /* istanbul ignore next */
      cov_2p8r0y8w0l().b[8][0]++;
      const activityResult =
      /* istanbul ignore next */
      (cov_2p8r0y8w0l().s[34]++, _emailverificationratelimiter.emailVerificationRateLimiter.checkEmailVerificationActivity(identifier, email));
      /* istanbul ignore next */
      cov_2p8r0y8w0l().s[35]++;
      if (!activityResult.allowed) {
        /* istanbul ignore next */
        cov_2p8r0y8w0l().b[9][0]++;
        cov_2p8r0y8w0l().s[36]++;
        return _server.NextResponse.json({
          error: 'Too many email verification requests. Please try again later.',
          retryAfter: activityResult.retryAfter,
          resetTime: activityResult.resetTime
        }, {
          status: 429,
          headers: {
            'X-RateLimit-Limit': '20',
            'X-RateLimit-Remaining': activityResult.remaining.toString(),
            'X-RateLimit-Reset': activityResult.resetTime.toString(),
            'Retry-After':
            /* istanbul ignore next */
            (cov_2p8r0y8w0l().b[10][0]++, activityResult.retryAfter?.toString()) ||
            /* istanbul ignore next */
            (cov_2p8r0y8w0l().b[10][1]++, '3600')
          }
        });
      } else
      /* istanbul ignore next */
      {
        cov_2p8r0y8w0l().b[9][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_2p8r0y8w0l().b[8][1]++;
    }
    // Check verification attempts rate limit
    cov_2p8r0y8w0l().s[37]++;
    if (options.checkVerificationAttempts) {
      /* istanbul ignore next */
      cov_2p8r0y8w0l().b[11][0]++;
      const verificationResult =
      /* istanbul ignore next */
      (cov_2p8r0y8w0l().s[38]++, _emailverificationratelimiter.emailVerificationRateLimiter.checkVerificationAttempts(identifier, email));
      /* istanbul ignore next */
      cov_2p8r0y8w0l().s[39]++;
      if (!verificationResult.allowed) {
        /* istanbul ignore next */
        cov_2p8r0y8w0l().b[12][0]++;
        cov_2p8r0y8w0l().s[40]++;
        return _server.NextResponse.json({
          error: 'Too many verification attempts. Please try again later.',
          retryAfter: verificationResult.retryAfter,
          resetTime: verificationResult.resetTime
        }, {
          status: 429,
          headers: {
            'X-RateLimit-Limit': '10',
            'X-RateLimit-Remaining': verificationResult.remaining.toString(),
            'X-RateLimit-Reset': verificationResult.resetTime.toString(),
            'Retry-After':
            /* istanbul ignore next */
            (cov_2p8r0y8w0l().b[13][0]++, verificationResult.retryAfter?.toString()) ||
            /* istanbul ignore next */
            (cov_2p8r0y8w0l().b[13][1]++, '3600')
          }
        });
      } else
      /* istanbul ignore next */
      {
        cov_2p8r0y8w0l().b[12][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_2p8r0y8w0l().b[11][1]++;
    }
    // Check resend requests rate limit
    cov_2p8r0y8w0l().s[41]++;
    if (
    /* istanbul ignore next */
    (cov_2p8r0y8w0l().b[15][0]++, options.checkResendRequests) &&
    /* istanbul ignore next */
    (cov_2p8r0y8w0l().b[15][1]++, email)) {
      /* istanbul ignore next */
      cov_2p8r0y8w0l().b[14][0]++;
      const resendResult =
      /* istanbul ignore next */
      (cov_2p8r0y8w0l().s[42]++, _emailverificationratelimiter.emailVerificationRateLimiter.checkResendRequests(email, identifier));
      /* istanbul ignore next */
      cov_2p8r0y8w0l().s[43]++;
      if (!resendResult.allowed) {
        /* istanbul ignore next */
        cov_2p8r0y8w0l().b[16][0]++;
        const errorMessage =
        /* istanbul ignore next */
        (cov_2p8r0y8w0l().s[44]++, resendResult.cooldownRemaining ?
        /* istanbul ignore next */
        (cov_2p8r0y8w0l().b[17][0]++, `Please wait ${resendResult.cooldownRemaining} seconds before requesting another verification code.`) :
        /* istanbul ignore next */
        (cov_2p8r0y8w0l().b[17][1]++, 'Too many resend requests. Please try again later.'));
        /* istanbul ignore next */
        cov_2p8r0y8w0l().s[45]++;
        return _server.NextResponse.json({
          error: errorMessage,
          retryAfter: resendResult.retryAfter,
          resetTime: resendResult.resetTime,
          cooldownSeconds: resendResult.cooldownRemaining
        }, {
          status: 429,
          headers: {
            'X-RateLimit-Limit': '5',
            'X-RateLimit-Remaining': resendResult.remaining.toString(),
            'X-RateLimit-Reset': resendResult.resetTime.toString(),
            'Retry-After':
            /* istanbul ignore next */
            (cov_2p8r0y8w0l().b[18][0]++, resendResult.retryAfter?.toString()) ||
            /* istanbul ignore next */
            (cov_2p8r0y8w0l().b[18][1]++, '60')
          }
        });
      } else
      /* istanbul ignore next */
      {
        cov_2p8r0y8w0l().b[16][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_2p8r0y8w0l().b[14][1]++;
    }
    // Check for suspicious activity
    const isSuspicious =
    /* istanbul ignore next */
    (cov_2p8r0y8w0l().s[46]++, _emailverificationratelimiter.emailVerificationRateLimiter.detectSuspiciousActivity(identifier, email));
    /* istanbul ignore next */
    cov_2p8r0y8w0l().s[47]++;
    if (isSuspicious) {
      /* istanbul ignore next */
      cov_2p8r0y8w0l().b[19][0]++;
      cov_2p8r0y8w0l().s[48]++;
      // For now, just log it. In production, you might want to add additional restrictions
      console.warn(`Suspicious email verification activity detected from ${identifier}`, {
        email
      });
    } else
    /* istanbul ignore next */
    {
      cov_2p8r0y8w0l().b[19][1]++;
    }
    // Call the handler
    const response =
    /* istanbul ignore next */
    (cov_2p8r0y8w0l().s[49]++, await handler(request));
    // Record successful resend if applicable
    /* istanbul ignore next */
    cov_2p8r0y8w0l().s[50]++;
    if (
    /* istanbul ignore next */
    (cov_2p8r0y8w0l().b[21][0]++, options.checkResendRequests) &&
    /* istanbul ignore next */
    (cov_2p8r0y8w0l().b[21][1]++, email) &&
    /* istanbul ignore next */
    (cov_2p8r0y8w0l().b[21][2]++, response.status === 200)) {
      /* istanbul ignore next */
      cov_2p8r0y8w0l().b[20][0]++;
      cov_2p8r0y8w0l().s[51]++;
      _emailverificationratelimiter.emailVerificationRateLimiter.recordResendSuccess(email);
    } else
    /* istanbul ignore next */
    {
      cov_2p8r0y8w0l().b[20][1]++;
    }
    cov_2p8r0y8w0l().s[52]++;
    return response;
  } catch (error) {
    /* istanbul ignore next */
    cov_2p8r0y8w0l().s[53]++;
    console.error('Email verification rate limit middleware error:', error);
    /* istanbul ignore next */
    cov_2p8r0y8w0l().s[54]++;
    return _server.NextResponse.json({
      error: 'Internal server error'
    }, {
      status: 500
    });
  }
}
async function withVerificationRateLimit(request, handler) {
  /* istanbul ignore next */
  cov_2p8r0y8w0l().f[7]++;
  cov_2p8r0y8w0l().s[55]++;
  return withEmailVerificationRateLimit(request, handler, {
    checkVerificationAttempts: true,
    checkOverallActivity: true,
    requireEmail: true
  });
}
async function withResendRateLimit(request, handler) {
  /* istanbul ignore next */
  cov_2p8r0y8w0l().f[8]++;
  cov_2p8r0y8w0l().s[56]++;
  return withEmailVerificationRateLimit(request, handler, {
    checkResendRequests: true,
    checkOverallActivity: true,
    requireEmail: true
  });
}
async function withSecurityMonitoring(request, handler) {
  /* istanbul ignore next */
  cov_2p8r0y8w0l().f[9]++;
  cov_2p8r0y8w0l().s[57]++;
  try {
    const identifier =
    /* istanbul ignore next */
    (cov_2p8r0y8w0l().s[58]++, getClientIdentifier(request));
    // Basic rate limiting for monitoring endpoints
    const activityResult =
    /* istanbul ignore next */
    (cov_2p8r0y8w0l().s[59]++, _emailverificationratelimiter.emailVerificationRateLimiter.checkEmailVerificationActivity(identifier));
    /* istanbul ignore next */
    cov_2p8r0y8w0l().s[60]++;
    if (!activityResult.allowed) {
      /* istanbul ignore next */
      cov_2p8r0y8w0l().b[22][0]++;
      cov_2p8r0y8w0l().s[61]++;
      return _server.NextResponse.json({
        error: 'Too many requests'
      }, {
        status: 429
      });
    } else
    /* istanbul ignore next */
    {
      cov_2p8r0y8w0l().b[22][1]++;
    }
    cov_2p8r0y8w0l().s[62]++;
    return await handler(request);
  } catch (error) {
    /* istanbul ignore next */
    cov_2p8r0y8w0l().s[63]++;
    console.error('Security monitoring middleware error:', error);
    /* istanbul ignore next */
    cov_2p8r0y8w0l().s[64]++;
    return _server.NextResponse.json({
      error: 'Internal server error'
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,