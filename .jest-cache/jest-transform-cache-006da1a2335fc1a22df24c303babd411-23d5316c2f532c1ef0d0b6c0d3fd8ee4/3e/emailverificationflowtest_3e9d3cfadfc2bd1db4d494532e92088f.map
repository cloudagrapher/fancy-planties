{"version":3,"sources":["/Users/stefanbekker/projects/fancy-planties/src/__tests__/integration/email-verification-flow.test.ts"],"sourcesContent":["/**\n * Email Verification Flow Integration Tests\n * Tests complete signup and verification process, resend functionality, and rate limiting\n * Requirements: 1.1, 1.4, 2.1, 2.2\n */\n\nimport { emailVerificationCodeService } from '@/lib/services/email-verification-code-service';\nimport { createEmailService } from '@/lib/services/resend-email-service';\n\n// Mock email service\njest.mock('@/lib/services/resend-email-service');\njest.mock('@/lib/services/email-service');\n\n// Mock database\njest.mock('@/lib/db', () => ({\n  db: {\n    select: jest.fn().mockReturnThis(),\n    from: jest.fn().mockReturnThis(),\n    where: jest.fn().mockReturnThis(),\n    insert: jest.fn().mockReturnThis(),\n    values: jest.fn().mockReturnThis(),\n    update: jest.fn().mockReturnThis(),\n    set: jest.fn().mockReturnThis(),\n    delete: jest.fn().mockReturnThis(),\n    returning: jest.fn(),\n    execute: jest.fn(),\n  },\n}));\n\n// Mock auth functions\njest.mock('@/lib/auth', () => ({\n  getUserByEmail: jest.fn(),\n  getUserById: jest.fn(),\n}));\n\nconst mockEmailService = {\n  sendVerificationEmail: jest.fn(),\n};\n\nconst mockCreateEmailService = createEmailService as jest.MockedFunction<typeof createEmailService>;\nconst mockSendEmailWithRetry = require('@/lib/services/email-service').sendEmailWithRetry as jest.MockedFunction<any>;\nconst mockDb = require('@/lib/db').db;\nconst mockGetUserByEmail = require('@/lib/auth').getUserByEmail as jest.MockedFunction<any>;\nconst mockGetUserById = require('@/lib/auth').getUserById as jest.MockedFunction<any>;\n\n// Mock environment variables\nconst originalEnv = process.env;\n\nbeforeAll(() => {\n  process.env = {\n    ...originalEnv,\n    RESEND_API_KEY: 'test-api-key',\n    FROM_EMAIL: 'test@example.com',\n    FROM_NAME: 'Test App',\n    VERIFICATION_CODE_EXPIRY_MINUTES: '10',\n    MAX_VERIFICATION_ATTEMPTS: '5',\n    RESEND_COOLDOWN_SECONDS: '60',\n    MAX_RESEND_PER_HOUR: '5',\n    NODE_ENV: 'test',\n  };\n});\n\nafterAll(() => {\n  process.env = originalEnv;\n});\n\ndescribe('Email Verification Flow Integration Tests', () => {\n  beforeEach(async () => {\n    jest.clearAllMocks();\n    \n    // Mock email service to always succeed\n    mockCreateEmailService.mockReturnValue(mockEmailService);\n    mockSendEmailWithRetry.mockResolvedValue(true);\n    mockEmailService.sendVerificationEmail.mockResolvedValue(true);\n\n    // Setup default database mocks\n    mockDb.returning.mockResolvedValue([]);\n    mockDb.execute.mockResolvedValue([]);\n  });\n\n  describe('Complete Signup and Verification Process', () => {\n    it('should complete full signup and verification workflow', async () => {\n      // Step 1: Create user and verification code directly\n      const user = await dbManager.createTestUser({\n        email: 'test@example.com',\n        name: 'Test User',\n        passwordHash: 'hashed_password',\n        isEmailVerified: false,\n      });\n\n      // Step 2: Generate verification code\n      const verificationCode = await emailVerificationCodeService.generateCode(user.id);\n      expect(verificationCode).toMatch(/^\\d{6}$/);\n\n      // Step 3: Verify the code was stored in database\n      const emailCodes = await dbManager.getEmailCodesByUserId(user.id);\n      expect(emailCodes).toHaveLength(1);\n      expect(emailCodes[0].code).toBe(verificationCode);\n\n      // Step 4: Validate the verification code\n      const isValid = await emailVerificationCodeService.validateCode('test@example.com', verificationCode);\n      expect(isValid).toBe(true);\n\n      // Step 5: Verify user is now verified in database\n      const verifiedUser = await dbManager.getUserById(user.id);\n      expect(verifiedUser.isEmailVerified).toBe(true);\n\n      // Step 6: Verify verification code was deleted\n      const remainingCodes = await dbManager.getEmailCodesByUserId(user.id);\n      expect(remainingCodes).toHaveLength(0);\n    });\n\n    it('should handle email service failure gracefully during code generation', async () => {\n      // Create user\n      const user = await dbManager.createTestUser({\n        email: 'test@example.com',\n        name: 'Test User',\n        passwordHash: 'hashed_password',\n        isEmailVerified: false,\n      });\n\n      // Generate verification code (this should work even if email fails)\n      const verificationCode = await emailVerificationCodeService.generateCode(user.id);\n      expect(verificationCode).toMatch(/^\\d{6}$/);\n\n      // Verify code was stored in database\n      const emailCodes = await dbManager.getEmailCodesByUserId(user.id);\n      expect(emailCodes).toHaveLength(1);\n      expect(emailCodes[0].code).toBe(verificationCode);\n\n      // User should still be unverified\n      const unverifiedUser = await dbManager.getUserById(user.id);\n      expect(unverifiedUser.isEmailVerified).toBe(false);\n    });\n\n    it('should reject verification with invalid code', async () => {\n      // Create user and verification code\n      const user = await dbManager.createTestUser({\n        email: 'test@example.com',\n        name: 'Test User',\n        passwordHash: 'hashed_password',\n        isEmailVerified: false,\n      });\n\n      await dbManager.createTestEmailCode({\n        userId: user.id,\n        code: '123456',\n        expiresAt: new Date(Date.now() + 10 * 60 * 1000), // 10 minutes from now\n        attemptsUsed: 0,\n      });\n\n      // Try to verify with wrong code using service directly\n      try {\n        await emailVerificationCodeService.validateCode('test@example.com', '654321');\n        fail('Should have thrown an error for invalid code');\n      } catch (error: any) {\n        expect(error.code).toBe('CODE_INVALID');\n      }\n\n      // Verify user is still not verified\n      const unverifiedUser = await dbManager.getUserById(user.id);\n      expect(unverifiedUser.isEmailVerified).toBe(false);\n    });\n\n    it('should reject verification with expired code', async () => {\n      // Create user and expired verification code\n      const user = await dbManager.createTestUser({\n        email: 'test@example.com',\n        name: 'Test User',\n        passwordHash: 'hashed_password',\n        isEmailVerified: false,\n      });\n\n      await dbManager.createTestEmailCode({\n        userId: user.id,\n        code: '123456',\n        expiresAt: new Date(Date.now() - 1000), // Expired 1 second ago\n        attemptsUsed: 0,\n      });\n\n      // Try to verify with expired code using service directly\n      try {\n        await emailVerificationCodeService.validateCode('test@example.com', '123456');\n        fail('Should have thrown an error for expired code');\n      } catch (error: any) {\n        expect(error.code).toBe('CODE_EXPIRED');\n      }\n\n      // Verify user is still not verified\n      const unverifiedUser = await dbManager.getUserById(user.id);\n      expect(unverifiedUser.isEmailVerified).toBe(false);\n    });\n  });\n\n  describe('Resend Verification Code Functionality', () => {\n    it('should resend verification code by generating new code', async () => {\n      // Create unverified user\n      const user = await dbManager.createTestUser({\n        email: 'test@example.com',\n        name: 'Test User',\n        passwordHash: 'hashed_password',\n        isEmailVerified: false,\n      });\n\n      // Create existing verification code\n      await dbManager.createTestEmailCode({\n        userId: user.id,\n        code: '123456',\n        expiresAt: new Date(Date.now() + 10 * 60 * 1000),\n        attemptsUsed: 0,\n      });\n\n      // Generate new verification code (simulating resend)\n      const newCode = await emailVerificationCodeService.generateCode(user.id);\n      expect(newCode).toMatch(/^\\d{6}$/);\n      expect(newCode).not.toBe('123456'); // Should be a new code\n\n      // Verify new code was generated (old one should be invalidated)\n      const emailCodes = await dbManager.getEmailCodesByUserId(user.id);\n      expect(emailCodes).toHaveLength(1);\n      expect(emailCodes[0].code).toBe(newCode);\n    });\n\n    it('should handle resend for already verified user', async () => {\n      // Create verified user\n      const user = await dbManager.createTestUser({\n        email: 'test@example.com',\n        name: 'Test User',\n        passwordHash: 'hashed_password',\n        isEmailVerified: true, // Already verified\n      });\n\n      // Try to generate code for already verified user\n      try {\n        await emailVerificationCodeService.generateCode(user.id);\n        fail('Should have thrown an error for already verified user');\n      } catch (error: any) {\n        expect(error.code).toBe('ALREADY_VERIFIED');\n      }\n    });\n\n    it('should handle resend for non-existent user', async () => {\n      // Try to validate code for non-existent user\n      try {\n        await emailVerificationCodeService.validateCode('nonexistent@example.com', '123456');\n        fail('Should have thrown an error for non-existent user');\n      } catch (error: any) {\n        expect(error.code).toBe('USER_NOT_FOUND');\n      }\n    });\n  });\n\n  describe('Rate Limiting Enforcement', () => {\n    it('should enforce verification attempt limits', async () => {\n      // Create user and verification code\n      const user = await dbManager.createTestUser({\n        email: 'test@example.com',\n        name: 'Test User',\n        passwordHash: 'hashed_password',\n        isEmailVerified: false,\n      });\n\n      const emailCode = await dbManager.createTestEmailCode({\n        userId: user.id,\n        code: '123456',\n        expiresAt: new Date(Date.now() + 10 * 60 * 1000),\n        attemptsUsed: 5, // Already at max attempts (limit is 5)\n      });\n\n      // Try to verify with max attempts reached\n      try {\n        await emailVerificationCodeService.validateCode('test@example.com', '123456');\n        fail('Should have thrown an error for too many attempts');\n      } catch (error: any) {\n        expect(error.code).toBe('TOO_MANY_ATTEMPTS');\n      }\n\n      // Verify user is still not verified\n      const unverifiedUser = await dbManager.getUserById(user.id);\n      expect(unverifiedUser.isEmailVerified).toBe(false);\n    });\n\n    it('should handle validation at service level', async () => {\n      // Create user for testing\n      const user = await dbManager.createTestUser({\n        email: 'test@example.com',\n        name: 'Test User',\n        passwordHash: 'hashed_password',\n        isEmailVerified: false,\n      });\n\n      // Generate valid code\n      const validCode = await emailVerificationCodeService.generateCode(user.id);\n      expect(validCode).toMatch(/^\\d{6}$/);\n\n      // Test that service validates codes properly\n      const isValid = await emailVerificationCodeService.validateCode('test@example.com', validCode);\n      expect(isValid).toBe(true);\n\n      // Verify user is now verified\n      const verifiedUser = await dbManager.getUserById(user.id);\n      expect(verifiedUser.isEmailVerified).toBe(true);\n    });\n  });\n\n  describe('Edge Cases and Error Scenarios', () => {\n    it('should handle duplicate verification code generation', async () => {\n      // Create user\n      const user = await dbManager.createTestUser({\n        email: 'test@example.com',\n        name: 'Test User',\n        passwordHash: 'hashed_password',\n        isEmailVerified: false,\n      });\n\n      // Generate first code\n      const firstCode = await emailVerificationCodeService.generateCode(user.id);\n      expect(firstCode).toMatch(/^\\d{6}$/);\n\n      // Generate second code (should invalidate first)\n      const secondCode = await emailVerificationCodeService.generateCode(user.id);\n      expect(secondCode).toMatch(/^\\d{6}$/);\n      expect(secondCode).not.toBe(firstCode);\n\n      // Verify only one code exists\n      const emailCodes = await dbManager.getEmailCodesByUserId(user.id);\n      expect(emailCodes).toHaveLength(1);\n      expect(emailCodes[0].code).toBe(secondCode);\n    });\n\n    it('should handle service errors gracefully', async () => {\n      // Test with non-existent user ID\n      try {\n        await emailVerificationCodeService.generateCode(99999); // Non-existent user ID\n        fail('Should have thrown an error for non-existent user');\n      } catch (error: any) {\n        expect(error.code).toBe('USER_NOT_FOUND');\n      }\n    });\n\n    it('should handle cleanup of expired codes', async () => {\n      // Create user with expired code\n      const user = await dbManager.createTestUser({\n        email: 'test@example.com',\n        name: 'Test User',\n        passwordHash: 'hashed_password',\n        isEmailVerified: false,\n      });\n\n      await dbManager.createTestEmailCode({\n        userId: user.id,\n        code: '123456',\n        expiresAt: new Date(Date.now() - 60000), // Expired 1 minute ago\n        attemptsUsed: 0,\n      });\n\n      // Run cleanup\n      await emailVerificationCodeService.cleanupExpiredCodes();\n\n      // Verify expired code was cleaned up\n      const remainingCodes = await dbManager.getEmailCodesByUserId(user.id);\n      expect(remainingCodes).toHaveLength(0);\n    });\n  });\n});"],"names":["jest","mock","db","select","fn","mockReturnThis","from","where","insert","values","update","set","delete","returning","execute","getUserByEmail","getUserById","mockEmailService","sendVerificationEmail","mockCreateEmailService","createEmailService","mockSendEmailWithRetry","require","sendEmailWithRetry","mockDb","mockGetUserByEmail","mockGetUserById","originalEnv","process","env","beforeAll","RESEND_API_KEY","FROM_EMAIL","FROM_NAME","VERIFICATION_CODE_EXPIRY_MINUTES","MAX_VERIFICATION_ATTEMPTS","RESEND_COOLDOWN_SECONDS","MAX_RESEND_PER_HOUR","NODE_ENV","afterAll","describe","beforeEach","clearAllMocks","mockReturnValue","mockResolvedValue","it","user","dbManager","createTestUser","email","name","passwordHash","isEmailVerified","verificationCode","emailVerificationCodeService","generateCode","id","expect","toMatch","emailCodes","getEmailCodesByUserId","toHaveLength","code","toBe","isValid","validateCode","verifiedUser","remainingCodes","unverifiedUser","createTestEmailCode","userId","expiresAt","Date","now","attemptsUsed","fail","error","newCode","not","emailCode","validCode","firstCode","secondCode","cleanupExpiredCodes"],"mappings":"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"}