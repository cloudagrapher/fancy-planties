{"version":3,"sources":["/Users/stefanbekker/projects/fancy-planties/src/test-utils/performance/efficient-test-data.ts"],"sourcesContent":["/**\n * Efficient Test Data Setup and Teardown\n * \n * Provides optimized utilities for fast test data creation and cleanup.\n */\n\nimport { testPerformanceMonitor } from './test-performance-monitor';\n\ninterface TestDataPool<T> {\n  available: T[];\n  inUse: Set<T>;\n  factory: () => T;\n  cleanup: (item: T) => void | Promise<void>;\n}\n\ninterface DatabaseTransaction {\n  id: string;\n  rollback: () => Promise<void>;\n  commit: () => Promise<void>;\n}\n\n/**\n * Efficient test data manager with object pooling\n */\nclass EfficientTestDataManager {\n  private pools = new Map<string, TestDataPool<any>>();\n  private transactions = new Map<string, DatabaseTransaction>();\n  private cleanupTasks: (() => Promise<void>)[] = [];\n\n  /**\n   * Create a data pool for reusable test objects\n   */\n  createPool<T>(\n    poolName: string,\n    factory: () => T,\n    cleanup: (item: T) => void | Promise<void>,\n    initialSize: number = 5\n  ): void {\n    const pool: TestDataPool<T> = {\n      available: [],\n      inUse: new Set(),\n      factory,\n      cleanup,\n    };\n\n    // Pre-populate pool\n    for (let i = 0; i < initialSize; i++) {\n      pool.available.push(factory());\n    }\n\n    this.pools.set(poolName, pool);\n  }\n\n  /**\n   * Get an item from the pool (reuse if available, create if needed)\n   */\n  getFromPool<T>(poolName: string): T {\n    const pool = this.pools.get(poolName) as TestDataPool<T>;\n    if (!pool) {\n      throw new Error(`Pool '${poolName}' not found`);\n    }\n\n    let item: T;\n    if (pool.available.length > 0) {\n      item = pool.available.pop()!;\n    } else {\n      item = pool.factory();\n    }\n\n    pool.inUse.add(item);\n    return item;\n  }\n\n  /**\n   * Return an item to the pool for reuse\n   */\n  async returnToPool<T>(poolName: string, item: T): Promise<void> {\n    const pool = this.pools.get(poolName) as TestDataPool<T>;\n    if (!pool) {\n      throw new Error(`Pool '${poolName}' not found`);\n    }\n\n    if (pool.inUse.has(item)) {\n      pool.inUse.delete(item);\n      await pool.cleanup(item);\n      pool.available.push(item);\n    }\n  }\n\n  /**\n   * Create a database transaction for test isolation\n   */\n  async createTransaction(testName: string): Promise<string> {\n    const transactionId = `tx_${testName}_${Date.now()}`;\n    \n    // Mock transaction for now - in real implementation would use actual DB\n    const transaction: DatabaseTransaction = {\n      id: transactionId,\n      rollback: async () => {\n        console.log(`ðŸ”„ Rolling back transaction: ${transactionId}`);\n      },\n      commit: async () => {\n        console.log(`âœ… Committing transaction: ${transactionId}`);\n      },\n    };\n\n    this.transactions.set(transactionId, transaction);\n    return transactionId;\n  }\n\n  /**\n   * Rollback a transaction (for test cleanup)\n   */\n  async rollbackTransaction(transactionId: string): Promise<void> {\n    const transaction = this.transactions.get(transactionId);\n    if (transaction) {\n      await transaction.rollback();\n      this.transactions.delete(transactionId);\n    }\n  }\n\n  /**\n   * Add a cleanup task to be executed during teardown\n   */\n  addCleanupTask(task: () => Promise<void>): void {\n    this.cleanupTasks.push(task);\n  }\n\n  /**\n   * Execute all cleanup tasks\n   */\n  async executeCleanup(): Promise<void> {\n    const startTime = performance.now();\n    \n    // Execute cleanup tasks in parallel for speed\n    await Promise.all(this.cleanupTasks.map(task => task()));\n    \n    // Rollback any remaining transactions\n    await Promise.all(\n      Array.from(this.transactions.keys()).map(id => this.rollbackTransaction(id))\n    );\n\n    // Clear cleanup tasks\n    this.cleanupTasks = [];\n    \n    const duration = performance.now() - startTime;\n    console.log(`ðŸ§¹ Cleanup completed in ${duration.toFixed(2)}ms`);\n  }\n\n  /**\n   * Reset all pools and cleanup\n   */\n  async reset(): Promise<void> {\n    await this.executeCleanup();\n    \n    // Clear all pools\n    for (const [poolName, pool] of this.pools) {\n      // Cleanup all items in use\n      for (const item of pool.inUse) {\n        await pool.cleanup(item);\n      }\n      // Cleanup all available items\n      for (const item of pool.available) {\n        await pool.cleanup(item);\n      }\n    }\n    \n    this.pools.clear();\n    this.transactions.clear();\n  }\n}\n\n// Global instance\nexport const efficientTestData = new EfficientTestDataManager();\n\n/**\n * Fast test user factory with pooling\n */\nexport function createUserPool() {\n  efficientTestData.createPool(\n    'users',\n    () => ({\n      id: Math.floor(Math.random() * 1000000),\n      email: `test${Date.now()}@example.com`,\n      username: `user${Date.now()}`,\n      hashedPassword: 'hashed_password',\n      createdAt: new Date(),\n    }),\n    async (user) => {\n      // Reset user state for reuse\n      user.email = `test${Date.now()}@example.com`;\n      user.username = `user${Date.now()}`;\n    },\n    3 // Keep 3 users in pool\n  );\n}\n\n/**\n * Fast plant data factory with pooling\n */\nexport function createPlantPool() {\n  efficientTestData.createPool(\n    'plants',\n    () => ({\n      id: Math.floor(Math.random() * 1000000),\n      commonName: 'Test Plant',\n      scientificName: 'Testicus planticus',\n      family: 'Testaceae',\n      userId: 1,\n    }),\n    async (plant) => {\n      // Reset plant state for reuse\n      plant.commonName = 'Test Plant';\n      plant.scientificName = 'Testicus planticus';\n    },\n    5 // Keep 5 plants in pool\n  );\n}\n\n/**\n * Fast plant instance factory with pooling\n */\nexport function createPlantInstancePool() {\n  efficientTestData.createPool(\n    'plantInstances',\n    () => ({\n      id: Math.floor(Math.random() * 1000000),\n      plantId: 1,\n      nickname: 'Test Instance',\n      location: 'Test Location',\n      userId: 1,\n      careHistory: [],\n    }),\n    async (instance) => {\n      // Reset instance state for reuse\n      instance.nickname = 'Test Instance';\n      instance.location = 'Test Location';\n      instance.careHistory = [];\n    },\n    5 // Keep 5 instances in pool\n  );\n}\n\n/**\n * Setup efficient test data for a test suite\n */\nexport function setupEfficientTestData() {\n  beforeAll(async () => {\n    createUserPool();\n    createPlantPool();\n    createPlantInstancePool();\n  });\n\n  afterAll(async () => {\n    await efficientTestData.reset();\n  });\n}\n\n/**\n * Setup transaction-based test isolation\n */\nexport function setupTransactionIsolation() {\n  let transactionId: string;\n\n  beforeEach(async () => {\n    const testName = expect.getState().currentTestName || 'unknown';\n    transactionId = await efficientTestData.createTransaction(testName);\n  });\n\n  afterEach(async () => {\n    if (transactionId) {\n      await efficientTestData.rollbackTransaction(transactionId);\n    }\n  });\n}\n\n/**\n * Batch operations for better performance\n */\nexport class BatchOperations {\n  private operations: (() => Promise<any>)[] = [];\n  private batchSize: number;\n\n  constructor(batchSize: number = 10) {\n    this.batchSize = batchSize;\n  }\n\n  /**\n   * Add an operation to the batch\n   */\n  add(operation: () => Promise<any>): void {\n    this.operations.push(operation);\n  }\n\n  /**\n   * Execute all operations in batches\n   */\n  async execute(): Promise<any[]> {\n    const results: any[] = [];\n    \n    for (let i = 0; i < this.operations.length; i += this.batchSize) {\n      const batch = this.operations.slice(i, i + this.batchSize);\n      const batchResults = await Promise.all(batch.map(op => op()));\n      results.push(...batchResults);\n    }\n    \n    return results;\n  }\n\n  /**\n   * Clear all operations\n   */\n  clear(): void {\n    this.operations = [];\n  }\n}\n\n/**\n * Memory-efficient test data generator\n */\nexport function* generateTestData<T>(\n  factory: () => T,\n  count: number\n): Generator<T, void, unknown> {\n  for (let i = 0; i < count; i++) {\n    yield factory();\n  }\n}\n\n/**\n * Lazy loading test data helper\n */\nexport class LazyTestData<T> {\n  private data: T | null = null;\n  private factory: () => T | Promise<T>;\n\n  constructor(factory: () => T | Promise<T>) {\n    this.factory = factory;\n  }\n\n  async get(): Promise<T> {\n    if (this.data === null) {\n      this.data = await this.factory();\n    }\n    return this.data;\n  }\n\n  reset(): void {\n    this.data = null;\n  }\n}"],"names":["BatchOperations","LazyTestData","createPlantInstancePool","createPlantPool","createUserPool","efficientTestData","generateTestData","setupEfficientTestData","setupTransactionIsolation","EfficientTestDataManager","createPool","poolName","factory","cleanup","initialSize","pool","available","inUse","Set","i","push","pools","set","getFromPool","get","Error","item","length","pop","add","returnToPool","has","delete","createTransaction","testName","transactionId","Date","now","transaction","id","rollback","console","log","commit","transactions","rollbackTransaction","addCleanupTask","task","cleanupTasks","executeCleanup","startTime","performance","Promise","all","map","Array","from","keys","duration","toFixed","reset","clear","Map","Math","floor","random","email","username","hashedPassword","createdAt","user","commonName","scientificName","family","userId","plant","plantId","nickname","location","careHistory","instance","beforeAll","afterAll","beforeEach","expect","getState","currentTestName","afterEach","batchSize","operations","operation","execute","results","batch","slice","batchResults","op","count","data"],"mappings":"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"}