{"version":3,"names":["createDebouncedErrorHandler","cov_2k6aw7ycza","f","s","createErrorState","createLoadingState","getUserFriendlyErrorMessage","isRetryableError","useAsyncOperationState","error","defaultMessage","b","retryable","Error","message","code","details","isLoading","operation","progress","initialState","state","setState","_react","useState","loading","success","setLoading","prev","setError","undefined","setSuccess","reset","includes","statusMatch","match","status","parseInt","handler","delay","timeoutId","lastError","errorState","clearTimeout","setTimeout"],"sources":["/Users/stefanbekker/projects/fancy-planties/src/lib/utils/error-handling.ts"],"sourcesContent":["import { useState } from 'react';\n\n/**\n * Standardized error handling utilities for consistent error states across components\n */\n\nexport interface ErrorState {\n  message: string;\n  code?: string;\n  retryable?: boolean;\n  details?: any;\n}\n\nexport interface LoadingState {\n  isLoading: boolean;\n  operation?: string;\n  progress?: number;\n}\n\nexport interface AsyncOperationState {\n  loading: LoadingState;\n  error: ErrorState | null;\n  success: boolean;\n}\n\n/**\n * Creates a standardized error state object\n */\nexport function createErrorState(\n  error: unknown,\n  defaultMessage = 'An unexpected error occurred',\n  retryable = true\n): ErrorState {\n  if (error instanceof Error) {\n    return {\n      message: error.message,\n      code: (error as any).code,\n      retryable,\n      details: error\n    };\n  }\n\n  if (typeof error === 'string') {\n    return {\n      message: error,\n      retryable\n    };\n  }\n\n  return {\n    message: defaultMessage,\n    retryable,\n    details: error\n  };\n}\n\n/**\n * Creates a standardized loading state object\n */\nexport function createLoadingState(\n  isLoading: boolean,\n  operation?: string,\n  progress?: number\n): LoadingState {\n  return {\n    isLoading,\n    operation,\n    progress\n  };\n}\n\n/**\n * Hook for managing async operation state\n */\nexport function useAsyncOperationState(initialState?: Partial<AsyncOperationState>) {\n  const [state, setState] = useState<AsyncOperationState>({\n    loading: { isLoading: false },\n    error: null,\n    success: false,\n    ...initialState\n  });\n\n  const setLoading = (loading: boolean, operation?: string, progress?: number) => {\n    setState(prev => ({\n      ...prev,\n      loading: createLoadingState(loading, operation, progress),\n      error: loading ? null : prev.error, // Clear error when starting new operation\n      success: false\n    }));\n  };\n\n  const setError = (error: unknown, retryable = true) => {\n    setState(prev => ({\n      ...prev,\n      loading: { isLoading: false },\n      error: createErrorState(error, undefined, retryable),\n      success: false\n    }));\n  };\n\n  const setSuccess = () => {\n    setState(prev => ({\n      ...prev,\n      loading: { isLoading: false },\n      error: null,\n      success: true\n    }));\n  };\n\n  const reset = () => {\n    setState({\n      loading: { isLoading: false },\n      error: null,\n      success: false\n    });\n  };\n\n  return {\n    ...state,\n    setLoading,\n    setError,\n    setSuccess,\n    reset\n  };\n}\n\n/**\n * Standardized error display component props\n */\nexport interface ErrorDisplayProps {\n  error: ErrorState;\n  onRetry?: () => void;\n  className?: string;\n  showDetails?: boolean;\n}\n\n/**\n * Standardized loading display component props\n */\nexport interface LoadingDisplayProps {\n  loading: LoadingState;\n  className?: string;\n  size?: 'sm' | 'md' | 'lg';\n  showProgress?: boolean;\n}\n\n/**\n * Utility to determine if an operation should be retryable based on error type\n */\nexport function isRetryableError(error: unknown): boolean {\n  if (error instanceof Error) {\n    // Network errors are usually retryable\n    if (error.message.includes('fetch') || error.message.includes('network')) {\n      return true;\n    }\n    \n    // Server errors (5xx) are retryable, client errors (4xx) usually aren't\n    const statusMatch = error.message.match(/(\\d{3})/);\n    if (statusMatch) {\n      const status = parseInt(statusMatch[1]);\n      return status >= 500;\n    }\n  }\n  \n  return true; // Default to retryable\n}\n\n/**\n * Utility to extract user-friendly error messages\n */\nexport function getUserFriendlyErrorMessage(error: unknown): string {\n  if (error instanceof Error) {\n    // Handle specific error types\n    if (error.message.includes('fetch')) {\n      return 'Unable to connect to the server. Please check your internet connection.';\n    }\n    \n    if (error.message.includes('timeout')) {\n      return 'The request timed out. Please try again.';\n    }\n    \n    if (error.message.includes('401') || error.message.includes('unauthorized')) {\n      return 'You are not authorized to perform this action. Please sign in again.';\n    }\n    \n    if (error.message.includes('403') || error.message.includes('forbidden')) {\n      return 'You do not have permission to perform this action.';\n    }\n    \n    if (error.message.includes('404') || error.message.includes('not found')) {\n      return 'The requested resource was not found.';\n    }\n    \n    if (error.message.includes('500') || error.message.includes('internal server')) {\n      return 'A server error occurred. Please try again later.';\n    }\n    \n    // Return the original message if it's user-friendly\n    return error.message;\n  }\n  \n  if (typeof error === 'string') {\n    return error;\n  }\n  \n  return 'An unexpected error occurred. Please try again.';\n}\n\n/**\n * Debounced error handler to prevent error spam\n */\nexport function createDebouncedErrorHandler(\n  handler: (error: ErrorState) => void,\n  delay = 1000\n) {\n  let timeoutId: NodeJS.Timeout | null = null;\n  let lastError: string | null = null;\n  \n  return (error: unknown) => {\n    const errorState = createErrorState(error);\n    \n    // Don't show the same error multiple times quickly\n    if (lastError === errorState.message && timeoutId) {\n      return;\n    }\n    \n    lastError = errorState.message;\n    \n    if (timeoutId) {\n      clearTimeout(timeoutId);\n    }\n    \n    timeoutId = setTimeout(() => {\n      handler(errorState);\n      timeoutId = null;\n      lastError = null;\n    }, delay);\n  };\n}"],"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","ignoreList":[]}