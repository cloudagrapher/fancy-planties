b83f8f75f0396a4490d070dd8cd820a5
/**
 * Email Verification Flow Integration Tests
 * Tests complete signup and verification process, resend functionality, and rate limiting
 * Requirements: 1.1, 1.4, 2.1, 2.2
 */ "use strict";
// Mock email service
jest.mock('@/lib/services/resend-email-service');
jest.mock('@/lib/services/email-service');
// Mock database
jest.mock('@/lib/db', ()=>({
        db: {
            select: jest.fn().mockReturnThis(),
            from: jest.fn().mockReturnThis(),
            where: jest.fn().mockReturnThis(),
            insert: jest.fn().mockReturnThis(),
            values: jest.fn().mockReturnThis(),
            update: jest.fn().mockReturnThis(),
            set: jest.fn().mockReturnThis(),
            delete: jest.fn().mockReturnThis(),
            returning: jest.fn(),
            execute: jest.fn()
        }
    }));
// Mock auth functions
jest.mock('@/lib/auth', ()=>({
        getUserByEmail: jest.fn(),
        getUserById: jest.fn()
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _emailverificationcodeservice = require("../../lib/services/email-verification-code-service");
const _resendemailservice = require("../../lib/services/resend-email-service");
const mockEmailService = {
    sendVerificationEmail: jest.fn()
};
const mockCreateEmailService = _resendemailservice.createEmailService;
const mockSendEmailWithRetry = require('@/lib/services/email-service').sendEmailWithRetry;
const mockDb = require('@/lib/db').db;
const mockGetUserByEmail = require('@/lib/auth').getUserByEmail;
const mockGetUserById = require('@/lib/auth').getUserById;
// Mock environment variables
const originalEnv = process.env;
beforeAll(()=>{
    process.env = {
        ...originalEnv,
        RESEND_API_KEY: 'test-api-key',
        FROM_EMAIL: 'test@example.com',
        FROM_NAME: 'Test App',
        VERIFICATION_CODE_EXPIRY_MINUTES: '10',
        MAX_VERIFICATION_ATTEMPTS: '5',
        RESEND_COOLDOWN_SECONDS: '60',
        MAX_RESEND_PER_HOUR: '5',
        NODE_ENV: 'test'
    };
});
afterAll(()=>{
    process.env = originalEnv;
});
describe('Email Verification Flow Integration Tests', ()=>{
    beforeEach(async ()=>{
        jest.clearAllMocks();
        // Mock email service to always succeed
        mockCreateEmailService.mockReturnValue(mockEmailService);
        mockSendEmailWithRetry.mockResolvedValue(true);
        mockEmailService.sendVerificationEmail.mockResolvedValue(true);
        // Setup default database mocks
        mockDb.returning.mockResolvedValue([]);
        mockDb.execute.mockResolvedValue([]);
    });
    describe('Complete Signup and Verification Process', ()=>{
        it('should complete full signup and verification workflow', async ()=>{
            // Mock user data
            const mockUser = {
                id: 1,
                email: 'test@example.com',
                name: 'Test User',
                isEmailVerified: false
            };
            // Mock database responses for user lookup
            mockGetUserByEmail.mockResolvedValue(mockUser);
            mockGetUserById.mockResolvedValue(mockUser);
            // Mock code insertion
            mockDb.returning.mockResolvedValueOnce([
                {
                    id: 1,
                    code: '123456',
                    userId: 1
                }
            ]);
            // Step 1: Generate verification code
            const verificationCode = await _emailverificationcodeservice.emailVerificationCodeService.generateCode(mockUser.id);
            expect(verificationCode).toMatch(/^\d{6}$/);
            // Step 2: Mock successful validation
            mockDb.returning.mockResolvedValueOnce([
                {
                    id: 1,
                    code: verificationCode,
                    userId: 1,
                    expiresAt: new Date(Date.now() + 600000),
                    attemptsUsed: 0
                }
            ]);
            // Mock user update to verified
            mockGetUserById.mockResolvedValueOnce({
                ...mockUser,
                isEmailVerified: true
            });
            // Step 3: Validate the verification code
            const isValid = await _emailverificationcodeservice.emailVerificationCodeService.validateCode('test@example.com', verificationCode);
            expect(isValid).toBe(true);
            // Verify database operations were called
            expect(mockDb.insert).toHaveBeenCalled();
            expect(mockDb.update).toHaveBeenCalled();
            expect(mockDb.delete).toHaveBeenCalled();
        });
        it('should handle email service failure gracefully during code generation', async ()=>{
            // Mock user data
            const mockUser = {
                id: 1,
                email: 'test@example.com',
                name: 'Test User',
                isEmailVerified: false
            };
            // Mock user lookup
            mockGetUserById.mockResolvedValue(mockUser);
            // Mock code insertion
            mockDb.returning.mockResolvedValueOnce([
                {
                    id: 1,
                    code: '123456',
                    userId: 1
                }
            ]);
            // Generate verification code (this should work even if email fails)
            const verificationCode = await _emailverificationcodeservice.emailVerificationCodeService.generateCode(mockUser.id);
            expect(verificationCode).toMatch(/^\d{6}$/);
            // Verify database insert was called
            expect(mockDb.insert).toHaveBeenCalled();
            expect(mockDb.values).toHaveBeenCalled();
        });
        it('should reject verification with invalid code', async ()=>{
            // Mock user data
            const mockUser = {
                id: 1,
                email: 'test@example.com',
                name: 'Test User',
                isEmailVerified: false
            };
            // Mock user lookup
            mockGetUserByEmail.mockResolvedValue(mockUser);
            // Mock code lookup - return empty array (no matching code)
            mockDb.returning.mockResolvedValueOnce([]);
            // Try to verify with wrong code using service directly
            try {
                await _emailverificationcodeservice.emailVerificationCodeService.validateCode('test@example.com', '654321');
                fail('Should have thrown an error for invalid code');
            } catch (error) {
                expect(error.code).toBe('CODE_INVALID');
            }
        });
        it('should reject verification with expired code', async ()=>{
            // Mock user data
            const mockUser = {
                id: 1,
                email: 'test@example.com',
                name: 'Test User',
                isEmailVerified: false
            };
            // Mock user lookup
            mockGetUserByEmail.mockResolvedValue(mockUser);
            // Mock expired code lookup
            mockDb.returning.mockResolvedValueOnce([
                {
                    id: 1,
                    code: '123456',
                    userId: 1,
                    expiresAt: new Date(Date.now() - 1000),
                    attemptsUsed: 0
                }
            ]);
            // Try to verify with expired code using service directly
            try {
                await _emailverificationcodeservice.emailVerificationCodeService.validateCode('test@example.com', '123456');
                fail('Should have thrown an error for expired code');
            } catch (error) {
                expect(error.code).toBe('CODE_EXPIRED');
            }
        });
    });
    describe('Resend Verification Code Functionality', ()=>{
        it('should resend verification code by generating new code', async ()=>{
            // Mock user data
            const mockUser = {
                id: 1,
                email: 'test@example.com',
                name: 'Test User',
                isEmailVerified: false
            };
            // Mock user lookup
            mockGetUserById.mockResolvedValue(mockUser);
            // Mock code insertion for new code
            mockDb.returning.mockResolvedValueOnce([
                {
                    id: 1,
                    code: '654321',
                    userId: 1
                }
            ]);
            // Generate new verification code (simulating resend)
            const newCode = await _emailverificationcodeservice.emailVerificationCodeService.generateCode(mockUser.id);
            expect(newCode).toMatch(/^\d{6}$/);
            // Verify database operations were called
            expect(mockDb.delete).toHaveBeenCalled(); // Old codes deleted
            expect(mockDb.insert).toHaveBeenCalled(); // New code inserted
        });
        it('should handle resend for already verified user', async ()=>{
            // Mock verified user
            const mockUser = {
                id: 1,
                email: 'test@example.com',
                name: 'Test User',
                isEmailVerified: true
            };
            // Mock user lookup
            mockGetUserById.mockResolvedValue(mockUser);
            // Try to generate code for already verified user
            try {
                await _emailverificationcodeservice.emailVerificationCodeService.generateCode(mockUser.id);
                fail('Should have thrown an error for already verified user');
            } catch (error) {
                expect(error.code).toBe('ALREADY_VERIFIED');
            }
        });
        it('should handle resend for non-existent user', async ()=>{
            // Mock user not found
            mockGetUserByEmail.mockResolvedValue(null);
            // Try to validate code for non-existent user
            try {
                await _emailverificationcodeservice.emailVerificationCodeService.validateCode('nonexistent@example.com', '123456');
                fail('Should have thrown an error for non-existent user');
            } catch (error) {
                expect(error.code).toBe('USER_NOT_FOUND');
            }
        });
    });
    describe('Rate Limiting Enforcement', ()=>{
        it('should enforce verification attempt limits', async ()=>{
            // Mock user data
            const mockUser = {
                id: 1,
                email: 'test@example.com',
                name: 'Test User',
                isEmailVerified: false
            };
            // Mock user lookup
            mockGetUserByEmail.mockResolvedValue(mockUser);
            // Mock code with max attempts reached
            mockDb.returning.mockResolvedValueOnce([
                {
                    id: 1,
                    code: '123456',
                    userId: 1,
                    expiresAt: new Date(Date.now() + 600000),
                    attemptsUsed: 5
                }
            ]);
            // Try to verify with max attempts reached
            try {
                await _emailverificationcodeservice.emailVerificationCodeService.validateCode('test@example.com', '123456');
                fail('Should have thrown an error for too many attempts');
            } catch (error) {
                expect(error.code).toBe('TOO_MANY_ATTEMPTS');
            }
        });
        it('should handle validation at service level', async ()=>{
            // Mock user data
            const mockUser = {
                id: 1,
                email: 'test@example.com',
                name: 'Test User',
                isEmailVerified: false
            };
            // Mock user lookup
            mockGetUserById.mockResolvedValue(mockUser);
            mockGetUserByEmail.mockResolvedValue(mockUser);
            // Mock code insertion
            mockDb.returning.mockResolvedValueOnce([
                {
                    id: 1,
                    code: '123456',
                    userId: 1
                }
            ]);
            // Generate valid code
            const validCode = await _emailverificationcodeservice.emailVerificationCodeService.generateCode(mockUser.id);
            expect(validCode).toMatch(/^\d{6}$/);
            // Mock successful validation
            mockDb.returning.mockResolvedValueOnce([
                {
                    id: 1,
                    code: validCode,
                    userId: 1,
                    expiresAt: new Date(Date.now() + 600000),
                    attemptsUsed: 0
                }
            ]);
            // Test that service validates codes properly
            const isValid = await _emailverificationcodeservice.emailVerificationCodeService.validateCode('test@example.com', validCode);
            expect(isValid).toBe(true);
            // Verify database operations were called
            expect(mockDb.update).toHaveBeenCalled(); // User marked as verified
            expect(mockDb.delete).toHaveBeenCalled(); // Code deleted
        });
    });
    describe('Edge Cases and Error Scenarios', ()=>{
        it('should handle duplicate verification code generation', async ()=>{
            // Mock user data
            const mockUser = {
                id: 1,
                email: 'test@example.com',
                name: 'Test User',
                isEmailVerified: false
            };
            // Mock user lookup
            mockGetUserById.mockResolvedValue(mockUser);
            // Mock code insertions
            mockDb.returning.mockResolvedValueOnce([
                {
                    id: 1,
                    code: '123456',
                    userId: 1
                }
            ]).mockResolvedValueOnce([
                {
                    id: 2,
                    code: '654321',
                    userId: 1
                }
            ]);
            // Generate first code
            const firstCode = await _emailverificationcodeservice.emailVerificationCodeService.generateCode(mockUser.id);
            expect(firstCode).toMatch(/^\d{6}$/);
            // Generate second code (should invalidate first)
            const secondCode = await _emailverificationcodeservice.emailVerificationCodeService.generateCode(mockUser.id);
            expect(secondCode).toMatch(/^\d{6}$/);
            expect(secondCode).not.toBe(firstCode);
            // Verify delete was called to remove old codes
            expect(mockDb.delete).toHaveBeenCalled();
        });
        it('should handle service errors gracefully', async ()=>{
            // Mock user not found
            mockGetUserById.mockResolvedValue(null);
            // Test with non-existent user ID
            try {
                await _emailverificationcodeservice.emailVerificationCodeService.generateCode(99999); // Non-existent user ID
                fail('Should have thrown an error for non-existent user');
            } catch (error) {
                expect(error.code).toBe('USER_NOT_FOUND');
            }
        });
        it('should handle cleanup of expired codes', async ()=>{
            // Mock cleanup operation
            mockDb.returning.mockResolvedValueOnce([
                {
                    id: 1,
                    code: '123456',
                    expiresAt: new Date(Date.now() - 60000)
                }
            ]);
            // Run cleanup
            await _emailverificationcodeservice.emailVerificationCodeService.cleanupExpiredCodes();
            // Verify delete was called for expired codes
            expect(mockDb.delete).toHaveBeenCalled();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9zdGVmYW5iZWtrZXIvcHJvamVjdHMvZmFuY3ktcGxhbnRpZXMvc3JjL19fdGVzdHNfXy9pbnRlZ3JhdGlvbi9lbWFpbC12ZXJpZmljYXRpb24tZmxvdy50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogRW1haWwgVmVyaWZpY2F0aW9uIEZsb3cgSW50ZWdyYXRpb24gVGVzdHNcbiAqIFRlc3RzIGNvbXBsZXRlIHNpZ251cCBhbmQgdmVyaWZpY2F0aW9uIHByb2Nlc3MsIHJlc2VuZCBmdW5jdGlvbmFsaXR5LCBhbmQgcmF0ZSBsaW1pdGluZ1xuICogUmVxdWlyZW1lbnRzOiAxLjEsIDEuNCwgMi4xLCAyLjJcbiAqL1xuXG5pbXBvcnQgeyBlbWFpbFZlcmlmaWNhdGlvbkNvZGVTZXJ2aWNlIH0gZnJvbSAnQC9saWIvc2VydmljZXMvZW1haWwtdmVyaWZpY2F0aW9uLWNvZGUtc2VydmljZSc7XG5pbXBvcnQgeyBjcmVhdGVFbWFpbFNlcnZpY2UgfSBmcm9tICdAL2xpYi9zZXJ2aWNlcy9yZXNlbmQtZW1haWwtc2VydmljZSc7XG5cbi8vIE1vY2sgZW1haWwgc2VydmljZVxuamVzdC5tb2NrKCdAL2xpYi9zZXJ2aWNlcy9yZXNlbmQtZW1haWwtc2VydmljZScpO1xuamVzdC5tb2NrKCdAL2xpYi9zZXJ2aWNlcy9lbWFpbC1zZXJ2aWNlJyk7XG5cbi8vIE1vY2sgZGF0YWJhc2Vcbmplc3QubW9jaygnQC9saWIvZGInLCAoKSA9PiAoe1xuICBkYjoge1xuICAgIHNlbGVjdDogamVzdC5mbigpLm1vY2tSZXR1cm5UaGlzKCksXG4gICAgZnJvbTogamVzdC5mbigpLm1vY2tSZXR1cm5UaGlzKCksXG4gICAgd2hlcmU6IGplc3QuZm4oKS5tb2NrUmV0dXJuVGhpcygpLFxuICAgIGluc2VydDogamVzdC5mbigpLm1vY2tSZXR1cm5UaGlzKCksXG4gICAgdmFsdWVzOiBqZXN0LmZuKCkubW9ja1JldHVyblRoaXMoKSxcbiAgICB1cGRhdGU6IGplc3QuZm4oKS5tb2NrUmV0dXJuVGhpcygpLFxuICAgIHNldDogamVzdC5mbigpLm1vY2tSZXR1cm5UaGlzKCksXG4gICAgZGVsZXRlOiBqZXN0LmZuKCkubW9ja1JldHVyblRoaXMoKSxcbiAgICByZXR1cm5pbmc6IGplc3QuZm4oKSxcbiAgICBleGVjdXRlOiBqZXN0LmZuKCksXG4gIH0sXG59KSk7XG5cbi8vIE1vY2sgYXV0aCBmdW5jdGlvbnNcbmplc3QubW9jaygnQC9saWIvYXV0aCcsICgpID0+ICh7XG4gIGdldFVzZXJCeUVtYWlsOiBqZXN0LmZuKCksXG4gIGdldFVzZXJCeUlkOiBqZXN0LmZuKCksXG59KSk7XG5cbmNvbnN0IG1vY2tFbWFpbFNlcnZpY2UgPSB7XG4gIHNlbmRWZXJpZmljYXRpb25FbWFpbDogamVzdC5mbigpLFxufTtcblxuY29uc3QgbW9ja0NyZWF0ZUVtYWlsU2VydmljZSA9IGNyZWF0ZUVtYWlsU2VydmljZSBhcyBqZXN0Lk1vY2tlZEZ1bmN0aW9uPHR5cGVvZiBjcmVhdGVFbWFpbFNlcnZpY2U+O1xuY29uc3QgbW9ja1NlbmRFbWFpbFdpdGhSZXRyeSA9IHJlcXVpcmUoJ0AvbGliL3NlcnZpY2VzL2VtYWlsLXNlcnZpY2UnKS5zZW5kRW1haWxXaXRoUmV0cnkgYXMgamVzdC5Nb2NrZWRGdW5jdGlvbjxhbnk+O1xuY29uc3QgbW9ja0RiID0gcmVxdWlyZSgnQC9saWIvZGInKS5kYjtcbmNvbnN0IG1vY2tHZXRVc2VyQnlFbWFpbCA9IHJlcXVpcmUoJ0AvbGliL2F1dGgnKS5nZXRVc2VyQnlFbWFpbCBhcyBqZXN0Lk1vY2tlZEZ1bmN0aW9uPGFueT47XG5jb25zdCBtb2NrR2V0VXNlckJ5SWQgPSByZXF1aXJlKCdAL2xpYi9hdXRoJykuZ2V0VXNlckJ5SWQgYXMgamVzdC5Nb2NrZWRGdW5jdGlvbjxhbnk+O1xuXG4vLyBNb2NrIGVudmlyb25tZW50IHZhcmlhYmxlc1xuY29uc3Qgb3JpZ2luYWxFbnYgPSBwcm9jZXNzLmVudjtcblxuYmVmb3JlQWxsKCgpID0+IHtcbiAgcHJvY2Vzcy5lbnYgPSB7XG4gICAgLi4ub3JpZ2luYWxFbnYsXG4gICAgUkVTRU5EX0FQSV9LRVk6ICd0ZXN0LWFwaS1rZXknLFxuICAgIEZST01fRU1BSUw6ICd0ZXN0QGV4YW1wbGUuY29tJyxcbiAgICBGUk9NX05BTUU6ICdUZXN0IEFwcCcsXG4gICAgVkVSSUZJQ0FUSU9OX0NPREVfRVhQSVJZX01JTlVURVM6ICcxMCcsXG4gICAgTUFYX1ZFUklGSUNBVElPTl9BVFRFTVBUUzogJzUnLFxuICAgIFJFU0VORF9DT09MRE9XTl9TRUNPTkRTOiAnNjAnLFxuICAgIE1BWF9SRVNFTkRfUEVSX0hPVVI6ICc1JyxcbiAgICBOT0RFX0VOVjogJ3Rlc3QnLFxuICB9O1xufSk7XG5cbmFmdGVyQWxsKCgpID0+IHtcbiAgcHJvY2Vzcy5lbnYgPSBvcmlnaW5hbEVudjtcbn0pO1xuXG5kZXNjcmliZSgnRW1haWwgVmVyaWZpY2F0aW9uIEZsb3cgSW50ZWdyYXRpb24gVGVzdHMnLCAoKSA9PiB7XG4gIGJlZm9yZUVhY2goYXN5bmMgKCkgPT4ge1xuICAgIGplc3QuY2xlYXJBbGxNb2NrcygpO1xuICAgIFxuICAgIC8vIE1vY2sgZW1haWwgc2VydmljZSB0byBhbHdheXMgc3VjY2VlZFxuICAgIG1vY2tDcmVhdGVFbWFpbFNlcnZpY2UubW9ja1JldHVyblZhbHVlKG1vY2tFbWFpbFNlcnZpY2UpO1xuICAgIG1vY2tTZW5kRW1haWxXaXRoUmV0cnkubW9ja1Jlc29sdmVkVmFsdWUodHJ1ZSk7XG4gICAgbW9ja0VtYWlsU2VydmljZS5zZW5kVmVyaWZpY2F0aW9uRW1haWwubW9ja1Jlc29sdmVkVmFsdWUodHJ1ZSk7XG5cbiAgICAvLyBTZXR1cCBkZWZhdWx0IGRhdGFiYXNlIG1vY2tzXG4gICAgbW9ja0RiLnJldHVybmluZy5tb2NrUmVzb2x2ZWRWYWx1ZShbXSk7XG4gICAgbW9ja0RiLmV4ZWN1dGUubW9ja1Jlc29sdmVkVmFsdWUoW10pO1xuICB9KTtcblxuICBkZXNjcmliZSgnQ29tcGxldGUgU2lnbnVwIGFuZCBWZXJpZmljYXRpb24gUHJvY2VzcycsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIGNvbXBsZXRlIGZ1bGwgc2lnbnVwIGFuZCB2ZXJpZmljYXRpb24gd29ya2Zsb3cnLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBNb2NrIHVzZXIgZGF0YVxuICAgICAgY29uc3QgbW9ja1VzZXIgPSB7XG4gICAgICAgIGlkOiAxLFxuICAgICAgICBlbWFpbDogJ3Rlc3RAZXhhbXBsZS5jb20nLFxuICAgICAgICBuYW1lOiAnVGVzdCBVc2VyJyxcbiAgICAgICAgaXNFbWFpbFZlcmlmaWVkOiBmYWxzZSxcbiAgICAgIH07XG5cbiAgICAgIC8vIE1vY2sgZGF0YWJhc2UgcmVzcG9uc2VzIGZvciB1c2VyIGxvb2t1cFxuICAgICAgbW9ja0dldFVzZXJCeUVtYWlsLm1vY2tSZXNvbHZlZFZhbHVlKG1vY2tVc2VyKTtcbiAgICAgIG1vY2tHZXRVc2VyQnlJZC5tb2NrUmVzb2x2ZWRWYWx1ZShtb2NrVXNlcik7XG5cbiAgICAgIC8vIE1vY2sgY29kZSBpbnNlcnRpb25cbiAgICAgIG1vY2tEYi5yZXR1cm5pbmcubW9ja1Jlc29sdmVkVmFsdWVPbmNlKFt7IGlkOiAxLCBjb2RlOiAnMTIzNDU2JywgdXNlcklkOiAxIH1dKTtcblxuICAgICAgLy8gU3RlcCAxOiBHZW5lcmF0ZSB2ZXJpZmljYXRpb24gY29kZVxuICAgICAgY29uc3QgdmVyaWZpY2F0aW9uQ29kZSA9IGF3YWl0IGVtYWlsVmVyaWZpY2F0aW9uQ29kZVNlcnZpY2UuZ2VuZXJhdGVDb2RlKG1vY2tVc2VyLmlkKTtcbiAgICAgIGV4cGVjdCh2ZXJpZmljYXRpb25Db2RlKS50b01hdGNoKC9eXFxkezZ9JC8pO1xuXG4gICAgICAvLyBTdGVwIDI6IE1vY2sgc3VjY2Vzc2Z1bCB2YWxpZGF0aW9uXG4gICAgICBtb2NrRGIucmV0dXJuaW5nLm1vY2tSZXNvbHZlZFZhbHVlT25jZShbeyBcbiAgICAgICAgaWQ6IDEsIFxuICAgICAgICBjb2RlOiB2ZXJpZmljYXRpb25Db2RlLCBcbiAgICAgICAgdXNlcklkOiAxLCBcbiAgICAgICAgZXhwaXJlc0F0OiBuZXcgRGF0ZShEYXRlLm5vdygpICsgNjAwMDAwKSxcbiAgICAgICAgYXR0ZW1wdHNVc2VkOiAwIFxuICAgICAgfV0pO1xuICAgICAgXG4gICAgICAvLyBNb2NrIHVzZXIgdXBkYXRlIHRvIHZlcmlmaWVkXG4gICAgICBtb2NrR2V0VXNlckJ5SWQubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHsgLi4ubW9ja1VzZXIsIGlzRW1haWxWZXJpZmllZDogdHJ1ZSB9KTtcblxuICAgICAgLy8gU3RlcCAzOiBWYWxpZGF0ZSB0aGUgdmVyaWZpY2F0aW9uIGNvZGVcbiAgICAgIGNvbnN0IGlzVmFsaWQgPSBhd2FpdCBlbWFpbFZlcmlmaWNhdGlvbkNvZGVTZXJ2aWNlLnZhbGlkYXRlQ29kZSgndGVzdEBleGFtcGxlLmNvbScsIHZlcmlmaWNhdGlvbkNvZGUpO1xuICAgICAgZXhwZWN0KGlzVmFsaWQpLnRvQmUodHJ1ZSk7XG5cbiAgICAgIC8vIFZlcmlmeSBkYXRhYmFzZSBvcGVyYXRpb25zIHdlcmUgY2FsbGVkXG4gICAgICBleHBlY3QobW9ja0RiLmluc2VydCkudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgICAgZXhwZWN0KG1vY2tEYi51cGRhdGUpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICAgIGV4cGVjdChtb2NrRGIuZGVsZXRlKS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBlbWFpbCBzZXJ2aWNlIGZhaWx1cmUgZ3JhY2VmdWxseSBkdXJpbmcgY29kZSBnZW5lcmF0aW9uJywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gTW9jayB1c2VyIGRhdGFcbiAgICAgIGNvbnN0IG1vY2tVc2VyID0ge1xuICAgICAgICBpZDogMSxcbiAgICAgICAgZW1haWw6ICd0ZXN0QGV4YW1wbGUuY29tJyxcbiAgICAgICAgbmFtZTogJ1Rlc3QgVXNlcicsXG4gICAgICAgIGlzRW1haWxWZXJpZmllZDogZmFsc2UsXG4gICAgICB9O1xuXG4gICAgICAvLyBNb2NrIHVzZXIgbG9va3VwXG4gICAgICBtb2NrR2V0VXNlckJ5SWQubW9ja1Jlc29sdmVkVmFsdWUobW9ja1VzZXIpO1xuXG4gICAgICAvLyBNb2NrIGNvZGUgaW5zZXJ0aW9uXG4gICAgICBtb2NrRGIucmV0dXJuaW5nLm1vY2tSZXNvbHZlZFZhbHVlT25jZShbeyBpZDogMSwgY29kZTogJzEyMzQ1NicsIHVzZXJJZDogMSB9XSk7XG5cbiAgICAgIC8vIEdlbmVyYXRlIHZlcmlmaWNhdGlvbiBjb2RlICh0aGlzIHNob3VsZCB3b3JrIGV2ZW4gaWYgZW1haWwgZmFpbHMpXG4gICAgICBjb25zdCB2ZXJpZmljYXRpb25Db2RlID0gYXdhaXQgZW1haWxWZXJpZmljYXRpb25Db2RlU2VydmljZS5nZW5lcmF0ZUNvZGUobW9ja1VzZXIuaWQpO1xuICAgICAgZXhwZWN0KHZlcmlmaWNhdGlvbkNvZGUpLnRvTWF0Y2goL15cXGR7Nn0kLyk7XG5cbiAgICAgIC8vIFZlcmlmeSBkYXRhYmFzZSBpbnNlcnQgd2FzIGNhbGxlZFxuICAgICAgZXhwZWN0KG1vY2tEYi5pbnNlcnQpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICAgIGV4cGVjdChtb2NrRGIudmFsdWVzKS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHJlamVjdCB2ZXJpZmljYXRpb24gd2l0aCBpbnZhbGlkIGNvZGUnLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBNb2NrIHVzZXIgZGF0YVxuICAgICAgY29uc3QgbW9ja1VzZXIgPSB7XG4gICAgICAgIGlkOiAxLFxuICAgICAgICBlbWFpbDogJ3Rlc3RAZXhhbXBsZS5jb20nLFxuICAgICAgICBuYW1lOiAnVGVzdCBVc2VyJyxcbiAgICAgICAgaXNFbWFpbFZlcmlmaWVkOiBmYWxzZSxcbiAgICAgIH07XG5cbiAgICAgIC8vIE1vY2sgdXNlciBsb29rdXBcbiAgICAgIG1vY2tHZXRVc2VyQnlFbWFpbC5tb2NrUmVzb2x2ZWRWYWx1ZShtb2NrVXNlcik7XG5cbiAgICAgIC8vIE1vY2sgY29kZSBsb29rdXAgLSByZXR1cm4gZW1wdHkgYXJyYXkgKG5vIG1hdGNoaW5nIGNvZGUpXG4gICAgICBtb2NrRGIucmV0dXJuaW5nLm1vY2tSZXNvbHZlZFZhbHVlT25jZShbXSk7XG5cbiAgICAgIC8vIFRyeSB0byB2ZXJpZnkgd2l0aCB3cm9uZyBjb2RlIHVzaW5nIHNlcnZpY2UgZGlyZWN0bHlcbiAgICAgIHRyeSB7XG4gICAgICAgIGF3YWl0IGVtYWlsVmVyaWZpY2F0aW9uQ29kZVNlcnZpY2UudmFsaWRhdGVDb2RlKCd0ZXN0QGV4YW1wbGUuY29tJywgJzY1NDMyMScpO1xuICAgICAgICBmYWlsKCdTaG91bGQgaGF2ZSB0aHJvd24gYW4gZXJyb3IgZm9yIGludmFsaWQgY29kZScpO1xuICAgICAgfSBjYXRjaCAoZXJyb3I6IGFueSkge1xuICAgICAgICBleHBlY3QoZXJyb3IuY29kZSkudG9CZSgnQ09ERV9JTlZBTElEJyk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHJlamVjdCB2ZXJpZmljYXRpb24gd2l0aCBleHBpcmVkIGNvZGUnLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBNb2NrIHVzZXIgZGF0YVxuICAgICAgY29uc3QgbW9ja1VzZXIgPSB7XG4gICAgICAgIGlkOiAxLFxuICAgICAgICBlbWFpbDogJ3Rlc3RAZXhhbXBsZS5jb20nLFxuICAgICAgICBuYW1lOiAnVGVzdCBVc2VyJyxcbiAgICAgICAgaXNFbWFpbFZlcmlmaWVkOiBmYWxzZSxcbiAgICAgIH07XG5cbiAgICAgIC8vIE1vY2sgdXNlciBsb29rdXBcbiAgICAgIG1vY2tHZXRVc2VyQnlFbWFpbC5tb2NrUmVzb2x2ZWRWYWx1ZShtb2NrVXNlcik7XG5cbiAgICAgIC8vIE1vY2sgZXhwaXJlZCBjb2RlIGxvb2t1cFxuICAgICAgbW9ja0RiLnJldHVybmluZy5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2UoW3tcbiAgICAgICAgaWQ6IDEsXG4gICAgICAgIGNvZGU6ICcxMjM0NTYnLFxuICAgICAgICB1c2VySWQ6IDEsXG4gICAgICAgIGV4cGlyZXNBdDogbmV3IERhdGUoRGF0ZS5ub3coKSAtIDEwMDApLCAvLyBFeHBpcmVkIDEgc2Vjb25kIGFnb1xuICAgICAgICBhdHRlbXB0c1VzZWQ6IDAsXG4gICAgICB9XSk7XG5cbiAgICAgIC8vIFRyeSB0byB2ZXJpZnkgd2l0aCBleHBpcmVkIGNvZGUgdXNpbmcgc2VydmljZSBkaXJlY3RseVxuICAgICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgZW1haWxWZXJpZmljYXRpb25Db2RlU2VydmljZS52YWxpZGF0ZUNvZGUoJ3Rlc3RAZXhhbXBsZS5jb20nLCAnMTIzNDU2Jyk7XG4gICAgICAgIGZhaWwoJ1Nob3VsZCBoYXZlIHRocm93biBhbiBlcnJvciBmb3IgZXhwaXJlZCBjb2RlJyk7XG4gICAgICB9IGNhdGNoIChlcnJvcjogYW55KSB7XG4gICAgICAgIGV4cGVjdChlcnJvci5jb2RlKS50b0JlKCdDT0RFX0VYUElSRUQnKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ1Jlc2VuZCBWZXJpZmljYXRpb24gQ29kZSBGdW5jdGlvbmFsaXR5JywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgcmVzZW5kIHZlcmlmaWNhdGlvbiBjb2RlIGJ5IGdlbmVyYXRpbmcgbmV3IGNvZGUnLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBNb2NrIHVzZXIgZGF0YVxuICAgICAgY29uc3QgbW9ja1VzZXIgPSB7XG4gICAgICAgIGlkOiAxLFxuICAgICAgICBlbWFpbDogJ3Rlc3RAZXhhbXBsZS5jb20nLFxuICAgICAgICBuYW1lOiAnVGVzdCBVc2VyJyxcbiAgICAgICAgaXNFbWFpbFZlcmlmaWVkOiBmYWxzZSxcbiAgICAgIH07XG5cbiAgICAgIC8vIE1vY2sgdXNlciBsb29rdXBcbiAgICAgIG1vY2tHZXRVc2VyQnlJZC5tb2NrUmVzb2x2ZWRWYWx1ZShtb2NrVXNlcik7XG5cbiAgICAgIC8vIE1vY2sgY29kZSBpbnNlcnRpb24gZm9yIG5ldyBjb2RlXG4gICAgICBtb2NrRGIucmV0dXJuaW5nLm1vY2tSZXNvbHZlZFZhbHVlT25jZShbeyBpZDogMSwgY29kZTogJzY1NDMyMScsIHVzZXJJZDogMSB9XSk7XG5cbiAgICAgIC8vIEdlbmVyYXRlIG5ldyB2ZXJpZmljYXRpb24gY29kZSAoc2ltdWxhdGluZyByZXNlbmQpXG4gICAgICBjb25zdCBuZXdDb2RlID0gYXdhaXQgZW1haWxWZXJpZmljYXRpb25Db2RlU2VydmljZS5nZW5lcmF0ZUNvZGUobW9ja1VzZXIuaWQpO1xuICAgICAgZXhwZWN0KG5ld0NvZGUpLnRvTWF0Y2goL15cXGR7Nn0kLyk7XG5cbiAgICAgIC8vIFZlcmlmeSBkYXRhYmFzZSBvcGVyYXRpb25zIHdlcmUgY2FsbGVkXG4gICAgICBleHBlY3QobW9ja0RiLmRlbGV0ZSkudG9IYXZlQmVlbkNhbGxlZCgpOyAvLyBPbGQgY29kZXMgZGVsZXRlZFxuICAgICAgZXhwZWN0KG1vY2tEYi5pbnNlcnQpLnRvSGF2ZUJlZW5DYWxsZWQoKTsgLy8gTmV3IGNvZGUgaW5zZXJ0ZWRcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIHJlc2VuZCBmb3IgYWxyZWFkeSB2ZXJpZmllZCB1c2VyJywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gTW9jayB2ZXJpZmllZCB1c2VyXG4gICAgICBjb25zdCBtb2NrVXNlciA9IHtcbiAgICAgICAgaWQ6IDEsXG4gICAgICAgIGVtYWlsOiAndGVzdEBleGFtcGxlLmNvbScsXG4gICAgICAgIG5hbWU6ICdUZXN0IFVzZXInLFxuICAgICAgICBpc0VtYWlsVmVyaWZpZWQ6IHRydWUsIC8vIEFscmVhZHkgdmVyaWZpZWRcbiAgICAgIH07XG5cbiAgICAgIC8vIE1vY2sgdXNlciBsb29rdXBcbiAgICAgIG1vY2tHZXRVc2VyQnlJZC5tb2NrUmVzb2x2ZWRWYWx1ZShtb2NrVXNlcik7XG5cbiAgICAgIC8vIFRyeSB0byBnZW5lcmF0ZSBjb2RlIGZvciBhbHJlYWR5IHZlcmlmaWVkIHVzZXJcbiAgICAgIHRyeSB7XG4gICAgICAgIGF3YWl0IGVtYWlsVmVyaWZpY2F0aW9uQ29kZVNlcnZpY2UuZ2VuZXJhdGVDb2RlKG1vY2tVc2VyLmlkKTtcbiAgICAgICAgZmFpbCgnU2hvdWxkIGhhdmUgdGhyb3duIGFuIGVycm9yIGZvciBhbHJlYWR5IHZlcmlmaWVkIHVzZXInKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcbiAgICAgICAgZXhwZWN0KGVycm9yLmNvZGUpLnRvQmUoJ0FMUkVBRFlfVkVSSUZJRUQnKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIHJlc2VuZCBmb3Igbm9uLWV4aXN0ZW50IHVzZXInLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBNb2NrIHVzZXIgbm90IGZvdW5kXG4gICAgICBtb2NrR2V0VXNlckJ5RW1haWwubW9ja1Jlc29sdmVkVmFsdWUobnVsbCk7XG5cbiAgICAgIC8vIFRyeSB0byB2YWxpZGF0ZSBjb2RlIGZvciBub24tZXhpc3RlbnQgdXNlclxuICAgICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgZW1haWxWZXJpZmljYXRpb25Db2RlU2VydmljZS52YWxpZGF0ZUNvZGUoJ25vbmV4aXN0ZW50QGV4YW1wbGUuY29tJywgJzEyMzQ1NicpO1xuICAgICAgICBmYWlsKCdTaG91bGQgaGF2ZSB0aHJvd24gYW4gZXJyb3IgZm9yIG5vbi1leGlzdGVudCB1c2VyJyk7XG4gICAgICB9IGNhdGNoIChlcnJvcjogYW55KSB7XG4gICAgICAgIGV4cGVjdChlcnJvci5jb2RlKS50b0JlKCdVU0VSX05PVF9GT1VORCcpO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnUmF0ZSBMaW1pdGluZyBFbmZvcmNlbWVudCcsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIGVuZm9yY2UgdmVyaWZpY2F0aW9uIGF0dGVtcHQgbGltaXRzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gTW9jayB1c2VyIGRhdGFcbiAgICAgIGNvbnN0IG1vY2tVc2VyID0ge1xuICAgICAgICBpZDogMSxcbiAgICAgICAgZW1haWw6ICd0ZXN0QGV4YW1wbGUuY29tJyxcbiAgICAgICAgbmFtZTogJ1Rlc3QgVXNlcicsXG4gICAgICAgIGlzRW1haWxWZXJpZmllZDogZmFsc2UsXG4gICAgICB9O1xuXG4gICAgICAvLyBNb2NrIHVzZXIgbG9va3VwXG4gICAgICBtb2NrR2V0VXNlckJ5RW1haWwubW9ja1Jlc29sdmVkVmFsdWUobW9ja1VzZXIpO1xuXG4gICAgICAvLyBNb2NrIGNvZGUgd2l0aCBtYXggYXR0ZW1wdHMgcmVhY2hlZFxuICAgICAgbW9ja0RiLnJldHVybmluZy5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2UoW3tcbiAgICAgICAgaWQ6IDEsXG4gICAgICAgIGNvZGU6ICcxMjM0NTYnLFxuICAgICAgICB1c2VySWQ6IDEsXG4gICAgICAgIGV4cGlyZXNBdDogbmV3IERhdGUoRGF0ZS5ub3coKSArIDYwMDAwMCksXG4gICAgICAgIGF0dGVtcHRzVXNlZDogNSwgLy8gTWF4IGF0dGVtcHRzIHJlYWNoZWRcbiAgICAgIH1dKTtcblxuICAgICAgLy8gVHJ5IHRvIHZlcmlmeSB3aXRoIG1heCBhdHRlbXB0cyByZWFjaGVkXG4gICAgICB0cnkge1xuICAgICAgICBhd2FpdCBlbWFpbFZlcmlmaWNhdGlvbkNvZGVTZXJ2aWNlLnZhbGlkYXRlQ29kZSgndGVzdEBleGFtcGxlLmNvbScsICcxMjM0NTYnKTtcbiAgICAgICAgZmFpbCgnU2hvdWxkIGhhdmUgdGhyb3duIGFuIGVycm9yIGZvciB0b28gbWFueSBhdHRlbXB0cycpO1xuICAgICAgfSBjYXRjaCAoZXJyb3I6IGFueSkge1xuICAgICAgICBleHBlY3QoZXJyb3IuY29kZSkudG9CZSgnVE9PX01BTllfQVRURU1QVFMnKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIHZhbGlkYXRpb24gYXQgc2VydmljZSBsZXZlbCcsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIE1vY2sgdXNlciBkYXRhXG4gICAgICBjb25zdCBtb2NrVXNlciA9IHtcbiAgICAgICAgaWQ6IDEsXG4gICAgICAgIGVtYWlsOiAndGVzdEBleGFtcGxlLmNvbScsXG4gICAgICAgIG5hbWU6ICdUZXN0IFVzZXInLFxuICAgICAgICBpc0VtYWlsVmVyaWZpZWQ6IGZhbHNlLFxuICAgICAgfTtcblxuICAgICAgLy8gTW9jayB1c2VyIGxvb2t1cFxuICAgICAgbW9ja0dldFVzZXJCeUlkLm1vY2tSZXNvbHZlZFZhbHVlKG1vY2tVc2VyKTtcbiAgICAgIG1vY2tHZXRVc2VyQnlFbWFpbC5tb2NrUmVzb2x2ZWRWYWx1ZShtb2NrVXNlcik7XG5cbiAgICAgIC8vIE1vY2sgY29kZSBpbnNlcnRpb25cbiAgICAgIG1vY2tEYi5yZXR1cm5pbmcubW9ja1Jlc29sdmVkVmFsdWVPbmNlKFt7IGlkOiAxLCBjb2RlOiAnMTIzNDU2JywgdXNlcklkOiAxIH1dKTtcblxuICAgICAgLy8gR2VuZXJhdGUgdmFsaWQgY29kZVxuICAgICAgY29uc3QgdmFsaWRDb2RlID0gYXdhaXQgZW1haWxWZXJpZmljYXRpb25Db2RlU2VydmljZS5nZW5lcmF0ZUNvZGUobW9ja1VzZXIuaWQpO1xuICAgICAgZXhwZWN0KHZhbGlkQ29kZSkudG9NYXRjaCgvXlxcZHs2fSQvKTtcblxuICAgICAgLy8gTW9jayBzdWNjZXNzZnVsIHZhbGlkYXRpb25cbiAgICAgIG1vY2tEYi5yZXR1cm5pbmcubW9ja1Jlc29sdmVkVmFsdWVPbmNlKFt7XG4gICAgICAgIGlkOiAxLFxuICAgICAgICBjb2RlOiB2YWxpZENvZGUsXG4gICAgICAgIHVzZXJJZDogMSxcbiAgICAgICAgZXhwaXJlc0F0OiBuZXcgRGF0ZShEYXRlLm5vdygpICsgNjAwMDAwKSxcbiAgICAgICAgYXR0ZW1wdHNVc2VkOiAwLFxuICAgICAgfV0pO1xuXG4gICAgICAvLyBUZXN0IHRoYXQgc2VydmljZSB2YWxpZGF0ZXMgY29kZXMgcHJvcGVybHlcbiAgICAgIGNvbnN0IGlzVmFsaWQgPSBhd2FpdCBlbWFpbFZlcmlmaWNhdGlvbkNvZGVTZXJ2aWNlLnZhbGlkYXRlQ29kZSgndGVzdEBleGFtcGxlLmNvbScsIHZhbGlkQ29kZSk7XG4gICAgICBleHBlY3QoaXNWYWxpZCkudG9CZSh0cnVlKTtcblxuICAgICAgLy8gVmVyaWZ5IGRhdGFiYXNlIG9wZXJhdGlvbnMgd2VyZSBjYWxsZWRcbiAgICAgIGV4cGVjdChtb2NrRGIudXBkYXRlKS50b0hhdmVCZWVuQ2FsbGVkKCk7IC8vIFVzZXIgbWFya2VkIGFzIHZlcmlmaWVkXG4gICAgICBleHBlY3QobW9ja0RiLmRlbGV0ZSkudG9IYXZlQmVlbkNhbGxlZCgpOyAvLyBDb2RlIGRlbGV0ZWRcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ0VkZ2UgQ2FzZXMgYW5kIEVycm9yIFNjZW5hcmlvcycsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBkdXBsaWNhdGUgdmVyaWZpY2F0aW9uIGNvZGUgZ2VuZXJhdGlvbicsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIE1vY2sgdXNlciBkYXRhXG4gICAgICBjb25zdCBtb2NrVXNlciA9IHtcbiAgICAgICAgaWQ6IDEsXG4gICAgICAgIGVtYWlsOiAndGVzdEBleGFtcGxlLmNvbScsXG4gICAgICAgIG5hbWU6ICdUZXN0IFVzZXInLFxuICAgICAgICBpc0VtYWlsVmVyaWZpZWQ6IGZhbHNlLFxuICAgICAgfTtcblxuICAgICAgLy8gTW9jayB1c2VyIGxvb2t1cFxuICAgICAgbW9ja0dldFVzZXJCeUlkLm1vY2tSZXNvbHZlZFZhbHVlKG1vY2tVc2VyKTtcblxuICAgICAgLy8gTW9jayBjb2RlIGluc2VydGlvbnNcbiAgICAgIG1vY2tEYi5yZXR1cm5pbmdcbiAgICAgICAgLm1vY2tSZXNvbHZlZFZhbHVlT25jZShbeyBpZDogMSwgY29kZTogJzEyMzQ1NicsIHVzZXJJZDogMSB9XSlcbiAgICAgICAgLm1vY2tSZXNvbHZlZFZhbHVlT25jZShbeyBpZDogMiwgY29kZTogJzY1NDMyMScsIHVzZXJJZDogMSB9XSk7XG5cbiAgICAgIC8vIEdlbmVyYXRlIGZpcnN0IGNvZGVcbiAgICAgIGNvbnN0IGZpcnN0Q29kZSA9IGF3YWl0IGVtYWlsVmVyaWZpY2F0aW9uQ29kZVNlcnZpY2UuZ2VuZXJhdGVDb2RlKG1vY2tVc2VyLmlkKTtcbiAgICAgIGV4cGVjdChmaXJzdENvZGUpLnRvTWF0Y2goL15cXGR7Nn0kLyk7XG5cbiAgICAgIC8vIEdlbmVyYXRlIHNlY29uZCBjb2RlIChzaG91bGQgaW52YWxpZGF0ZSBmaXJzdClcbiAgICAgIGNvbnN0IHNlY29uZENvZGUgPSBhd2FpdCBlbWFpbFZlcmlmaWNhdGlvbkNvZGVTZXJ2aWNlLmdlbmVyYXRlQ29kZShtb2NrVXNlci5pZCk7XG4gICAgICBleHBlY3Qoc2Vjb25kQ29kZSkudG9NYXRjaCgvXlxcZHs2fSQvKTtcbiAgICAgIGV4cGVjdChzZWNvbmRDb2RlKS5ub3QudG9CZShmaXJzdENvZGUpO1xuXG4gICAgICAvLyBWZXJpZnkgZGVsZXRlIHdhcyBjYWxsZWQgdG8gcmVtb3ZlIG9sZCBjb2Rlc1xuICAgICAgZXhwZWN0KG1vY2tEYi5kZWxldGUpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIHNlcnZpY2UgZXJyb3JzIGdyYWNlZnVsbHknLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBNb2NrIHVzZXIgbm90IGZvdW5kXG4gICAgICBtb2NrR2V0VXNlckJ5SWQubW9ja1Jlc29sdmVkVmFsdWUobnVsbCk7XG5cbiAgICAgIC8vIFRlc3Qgd2l0aCBub24tZXhpc3RlbnQgdXNlciBJRFxuICAgICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgZW1haWxWZXJpZmljYXRpb25Db2RlU2VydmljZS5nZW5lcmF0ZUNvZGUoOTk5OTkpOyAvLyBOb24tZXhpc3RlbnQgdXNlciBJRFxuICAgICAgICBmYWlsKCdTaG91bGQgaGF2ZSB0aHJvd24gYW4gZXJyb3IgZm9yIG5vbi1leGlzdGVudCB1c2VyJyk7XG4gICAgICB9IGNhdGNoIChlcnJvcjogYW55KSB7XG4gICAgICAgIGV4cGVjdChlcnJvci5jb2RlKS50b0JlKCdVU0VSX05PVF9GT1VORCcpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgY2xlYW51cCBvZiBleHBpcmVkIGNvZGVzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gTW9jayBjbGVhbnVwIG9wZXJhdGlvblxuICAgICAgbW9ja0RiLnJldHVybmluZy5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2UoW1xuICAgICAgICB7IGlkOiAxLCBjb2RlOiAnMTIzNDU2JywgZXhwaXJlc0F0OiBuZXcgRGF0ZShEYXRlLm5vdygpIC0gNjAwMDApIH1cbiAgICAgIF0pO1xuXG4gICAgICAvLyBSdW4gY2xlYW51cFxuICAgICAgYXdhaXQgZW1haWxWZXJpZmljYXRpb25Db2RlU2VydmljZS5jbGVhbnVwRXhwaXJlZENvZGVzKCk7XG5cbiAgICAgIC8vIFZlcmlmeSBkZWxldGUgd2FzIGNhbGxlZCBmb3IgZXhwaXJlZCBjb2Rlc1xuICAgICAgZXhwZWN0KG1vY2tEYi5kZWxldGUpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICB9KTtcbiAgfSk7XG59KTsiXSwibmFtZXMiOlsiamVzdCIsIm1vY2siLCJkYiIsInNlbGVjdCIsImZuIiwibW9ja1JldHVyblRoaXMiLCJmcm9tIiwid2hlcmUiLCJpbnNlcnQiLCJ2YWx1ZXMiLCJ1cGRhdGUiLCJzZXQiLCJkZWxldGUiLCJyZXR1cm5pbmciLCJleGVjdXRlIiwiZ2V0VXNlckJ5RW1haWwiLCJnZXRVc2VyQnlJZCIsIm1vY2tFbWFpbFNlcnZpY2UiLCJzZW5kVmVyaWZpY2F0aW9uRW1haWwiLCJtb2NrQ3JlYXRlRW1haWxTZXJ2aWNlIiwiY3JlYXRlRW1haWxTZXJ2aWNlIiwibW9ja1NlbmRFbWFpbFdpdGhSZXRyeSIsInJlcXVpcmUiLCJzZW5kRW1haWxXaXRoUmV0cnkiLCJtb2NrRGIiLCJtb2NrR2V0VXNlckJ5RW1haWwiLCJtb2NrR2V0VXNlckJ5SWQiLCJvcmlnaW5hbEVudiIsInByb2Nlc3MiLCJlbnYiLCJiZWZvcmVBbGwiLCJSRVNFTkRfQVBJX0tFWSIsIkZST01fRU1BSUwiLCJGUk9NX05BTUUiLCJWRVJJRklDQVRJT05fQ09ERV9FWFBJUllfTUlOVVRFUyIsIk1BWF9WRVJJRklDQVRJT05fQVRURU1QVFMiLCJSRVNFTkRfQ09PTERPV05fU0VDT05EUyIsIk1BWF9SRVNFTkRfUEVSX0hPVVIiLCJOT0RFX0VOViIsImFmdGVyQWxsIiwiZGVzY3JpYmUiLCJiZWZvcmVFYWNoIiwiY2xlYXJBbGxNb2NrcyIsIm1vY2tSZXR1cm5WYWx1ZSIsIm1vY2tSZXNvbHZlZFZhbHVlIiwiaXQiLCJtb2NrVXNlciIsImlkIiwiZW1haWwiLCJuYW1lIiwiaXNFbWFpbFZlcmlmaWVkIiwibW9ja1Jlc29sdmVkVmFsdWVPbmNlIiwiY29kZSIsInVzZXJJZCIsInZlcmlmaWNhdGlvbkNvZGUiLCJlbWFpbFZlcmlmaWNhdGlvbkNvZGVTZXJ2aWNlIiwiZ2VuZXJhdGVDb2RlIiwiZXhwZWN0IiwidG9NYXRjaCIsImV4cGlyZXNBdCIsIkRhdGUiLCJub3ciLCJhdHRlbXB0c1VzZWQiLCJpc1ZhbGlkIiwidmFsaWRhdGVDb2RlIiwidG9CZSIsInRvSGF2ZUJlZW5DYWxsZWQiLCJmYWlsIiwiZXJyb3IiLCJuZXdDb2RlIiwidmFsaWRDb2RlIiwiZmlyc3RDb2RlIiwic2Vjb25kQ29kZSIsIm5vdCIsImNsZWFudXBFeHBpcmVkQ29kZXMiXSwibWFwcGluZ3MiOiJBQUFBOzs7O0NBSUM7QUFLRCxxQkFBcUI7QUFDckJBLEtBQUtDLElBQUksQ0FBQztBQUNWRCxLQUFLQyxJQUFJLENBQUM7QUFFVixnQkFBZ0I7QUFDaEJELEtBQUtDLElBQUksQ0FBQyxZQUFZLElBQU8sQ0FBQTtRQUMzQkMsSUFBSTtZQUNGQyxRQUFRSCxLQUFLSSxFQUFFLEdBQUdDLGNBQWM7WUFDaENDLE1BQU1OLEtBQUtJLEVBQUUs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