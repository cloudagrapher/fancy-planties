5af335fdb3fb760ffd1e8eee66ebd30b
"use strict";

/* istanbul ignore next */
function cov_ttk08hdfc() {
  var path = "/Users/stefanbekker/projects/fancy-planties/src/lib/services/plant-matching.ts";
  var hash = "36b466dc4fc0482efa588ccf33c9adbc273dd8ad";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/stefanbekker/projects/fancy-planties/src/lib/services/plant-matching.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 28
        }
      },
      "3": {
        start: {
          line: 11,
          column: 12
        },
        end: {
          line: 11,
          column: 28
        }
      },
      "4": {
        start: {
          line: 12,
          column: 16
        },
        end: {
          line: 12,
          column: 39
        }
      },
      "5": {
        start: {
          line: 13,
          column: 20
        },
        end: {
          line: 13,
          column: 42
        }
      },
      "6": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 51
        }
      },
      "7": {
        start: {
          line: 21,
          column: 65
        },
        end: {
          line: 21,
          column: 97
        }
      },
      "8": {
        start: {
          line: 23,
          column: 33
        },
        end: {
          line: 23,
          column: 109
        }
      },
      "9": {
        start: {
          line: 25,
          column: 24
        },
        end: {
          line: 25,
          column: 26
        }
      },
      "10": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 37,
          column: 9
        }
      },
      "11": {
        start: {
          line: 27,
          column: 26
        },
        end: {
          line: 33,
          column: 21
        }
      },
      "12": {
        start: {
          line: 34,
          column: 12
        },
        end: {
          line: 36,
          column: 13
        }
      },
      "13": {
        start: {
          line: 35,
          column: 16
        },
        end: {
          line: 35,
          column: 36
        }
      },
      "14": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 39,
          column: 58
        }
      },
      "15": {
        start: {
          line: 39,
          column: 29
        },
        end: {
          line: 39,
          column: 56
        }
      },
      "16": {
        start: {
          line: 40,
          column: 26
        },
        end: {
          line: 40,
          column: 36
        }
      },
      "17": {
        start: {
          line: 41,
          column: 37
        },
        end: {
          line: 41,
          column: 77
        }
      },
      "18": {
        start: {
          line: 42,
          column: 8
        },
        end: {
          line: 49,
          column: 10
        }
      },
      "19": {
        start: {
          line: 54,
          column: 8
        },
        end: {
          line: 60,
          column: 10
        }
      },
      "20": {
        start: {
          line: 65,
          column: 27
        },
        end: {
          line: 65,
          column: 29
        }
      },
      "21": {
        start: {
          line: 67,
          column: 8
        },
        end: {
          line: 75,
          column: 9
        }
      },
      "22": {
        start: {
          line: 68,
          column: 12
        },
        end: {
          line: 72,
          column: 13
        }
      },
      "23": {
        start: {
          line: 69,
          column: 16
        },
        end: {
          line: 69,
          column: 263
        }
      },
      "24": {
        start: {
          line: 71,
          column: 16
        },
        end: {
          line: 71,
          column: 246
        }
      },
      "25": {
        start: {
          line: 74,
          column: 12
        },
        end: {
          line: 74,
          column: 203
        }
      },
      "26": {
        start: {
          line: 77,
          column: 8
        },
        end: {
          line: 79,
          column: 9
        }
      },
      "27": {
        start: {
          line: 78,
          column: 12
        },
        end: {
          line: 78,
          column: 151
        }
      },
      "28": {
        start: {
          line: 81,
          column: 8
        },
        end: {
          line: 83,
          column: 9
        }
      },
      "29": {
        start: {
          line: 82,
          column: 12
        },
        end: {
          line: 82,
          column: 98
        }
      },
      "30": {
        start: {
          line: 85,
          column: 8
        },
        end: {
          line: 87,
          column: 9
        }
      },
      "31": {
        start: {
          line: 86,
          column: 12
        },
        end: {
          line: 86,
          column: 94
        }
      },
      "32": {
        start: {
          line: 89,
          column: 8
        },
        end: {
          line: 91,
          column: 9
        }
      },
      "33": {
        start: {
          line: 90,
          column: 12
        },
        end: {
          line: 90,
          column: 149
        }
      },
      "34": {
        start: {
          line: 92,
          column: 8
        },
        end: {
          line: 94,
          column: 9
        }
      },
      "35": {
        start: {
          line: 93,
          column: 12
        },
        end: {
          line: 93,
          column: 22
        }
      },
      "36": {
        start: {
          line: 95,
          column: 8
        },
        end: {
          line: 95,
          column: 110
        }
      },
      "37": {
        start: {
          line: 100,
          column: 30
        },
        end: {
          line: 100,
          column: 32
        }
      },
      "38": {
        start: {
          line: 101,
          column: 25
        },
        end: {
          line: 101,
          column: 26
        }
      },
      "39": {
        start: {
          line: 102,
          column: 23
        },
        end: {
          line: 102,
          column: 24
        }
      },
      "40": {
        start: {
          line: 104,
          column: 8
        },
        end: {
          line: 111,
          column: 9
        }
      },
      "41": {
        start: {
          line: 105,
          column: 12
        },
        end: {
          line: 105,
          column: 26
        }
      },
      "42": {
        start: {
          line: 106,
          column: 31
        },
        end: {
          line: 106,
          column: 93
        }
      },
      "43": {
        start: {
          line: 107,
          column: 12
        },
        end: {
          line: 110,
          column: 13
        }
      },
      "44": {
        start: {
          line: 108,
          column: 16
        },
        end: {
          line: 108,
          column: 41
        }
      },
      "45": {
        start: {
          line: 109,
          column: 16
        },
        end: {
          line: 109,
          column: 45
        }
      },
      "46": {
        start: {
          line: 113,
          column: 8
        },
        end: {
          line: 120,
          column: 9
        }
      },
      "47": {
        start: {
          line: 114,
          column: 12
        },
        end: {
          line: 114,
          column: 26
        }
      },
      "48": {
        start: {
          line: 115,
          column: 31
        },
        end: {
          line: 115,
          column: 91
        }
      },
      "49": {
        start: {
          line: 116,
          column: 12
        },
        end: {
          line: 119,
          column: 13
        }
      },
      "50": {
        start: {
          line: 117,
          column: 16
        },
        end: {
          line: 117,
          column: 45
        }
      },
      "51": {
        start: {
          line: 118,
          column: 16
        },
        end: {
          line: 118,
          column: 44
        }
      },
      "52": {
        start: {
          line: 122,
          column: 8
        },
        end: {
          line: 129,
          column: 9
        }
      },
      "53": {
        start: {
          line: 123,
          column: 12
        },
        end: {
          line: 123,
          column: 26
        }
      },
      "54": {
        start: {
          line: 124,
          column: 31
        },
        end: {
          line: 124,
          column: 95
        }
      },
      "55": {
        start: {
          line: 125,
          column: 12
        },
        end: {
          line: 128,
          column: 13
        }
      },
      "56": {
        start: {
          line: 126,
          column: 16
        },
        end: {
          line: 126,
          column: 45
        }
      },
      "57": {
        start: {
          line: 127,
          column: 16
        },
        end: {
          line: 127,
          column: 46
        }
      },
      "58": {
        start: {
          line: 131,
          column: 8
        },
        end: {
          line: 145,
          column: 9
        }
      },
      "59": {
        start: {
          line: 132,
          column: 12
        },
        end: {
          line: 132,
          column: 28
        }
      },
      "60": {
        start: {
          line: 133,
          column: 12
        },
        end: {
          line: 143,
          column: 13
        }
      },
      "61": {
        start: {
          line: 134,
          column: 35
        },
        end: {
          line: 134,
          column: 101
        }
      },
      "62": {
        start: {
          line: 135,
          column: 16
        },
        end: {
          line: 138,
          column: 17
        }
      },
      "63": {
        start: {
          line: 136,
          column: 20
        },
        end: {
          line: 136,
          column: 51
        }
      },
      "64": {
        start: {
          line: 137,
          column: 20
        },
        end: {
          line: 137,
          column: 51
        }
      },
      "65": {
        start: {
          line: 139,
          column: 19
        },
        end: {
          line: 143,
          column: 13
        }
      },
      "66": {
        start: {
          line: 141,
          column: 16
        },
        end: {
          line: 141,
          column: 34
        }
      },
      "67": {
        start: {
          line: 142,
          column: 16
        },
        end: {
          line: 142,
          column: 47
        }
      },
      "68": {
        start: {
          line: 147,
          column: 8
        },
        end: {
          line: 154,
          column: 9
        }
      },
      "69": {
        start: {
          line: 148,
          column: 12
        },
        end: {
          line: 148,
          column: 28
        }
      },
      "70": {
        start: {
          line: 149,
          column: 31
        },
        end: {
          line: 149,
          column: 101
        }
      },
      "71": {
        start: {
          line: 150,
          column: 12
        },
        end: {
          line: 153,
          column: 13
        }
      },
      "72": {
        start: {
          line: 151,
          column: 16
        },
        end: {
          line: 151,
          column: 47
        }
      },
      "73": {
        start: {
          line: 152,
          column: 16
        },
        end: {
          line: 152,
          column: 49
        }
      },
      "74": {
        start: {
          line: 155,
          column: 27
        },
        end: {
          line: 155,
          column: 67
        }
      },
      "75": {
        start: {
          line: 156,
          column: 8
        },
        end: {
          line: 168,
          column: 10
        }
      },
      "76": {
        start: {
          line: 173,
          column: 19
        },
        end: {
          line: 173,
          column: 44
        }
      },
      "77": {
        start: {
          line: 174,
          column: 19
        },
        end: {
          line: 174,
          column: 44
        }
      },
      "78": {
        start: {
          line: 175,
          column: 8
        },
        end: {
          line: 175,
          column: 34
        }
      },
      "79": {
        start: {
          line: 175,
          column: 23
        },
        end: {
          line: 175,
          column: 34
        }
      },
      "80": {
        start: {
          line: 176,
          column: 8
        },
        end: {
          line: 176,
          column: 59
        }
      },
      "81": {
        start: {
          line: 176,
          column: 48
        },
        end: {
          line: 176,
          column: 59
        }
      },
      "82": {
        start: {
          line: 178,
          column: 8
        },
        end: {
          line: 180,
          column: 9
        }
      },
      "83": {
        start: {
          line: 179,
          column: 12
        },
        end: {
          line: 179,
          column: 23
        }
      },
      "84": {
        start: {
          line: 182,
          column: 23
        },
        end: {
          line: 182,
          column: 95
        }
      },
      "85": {
        start: {
          line: 182,
          column: 63
        },
        end: {
          line: 182,
          column: 94
        }
      },
      "86": {
        start: {
          line: 183,
          column: 8
        },
        end: {
          line: 185,
          column: 9
        }
      },
      "87": {
        start: {
          line: 183,
          column: 20
        },
        end: {
          line: 183,
          column: 21
        }
      },
      "88": {
        start: {
          line: 184,
          column: 12
        },
        end: {
          line: 184,
          column: 29
        }
      },
      "89": {
        start: {
          line: 186,
          column: 8
        },
        end: {
          line: 188,
          column: 9
        }
      },
      "90": {
        start: {
          line: 186,
          column: 20
        },
        end: {
          line: 186,
          column: 21
        }
      },
      "91": {
        start: {
          line: 187,
          column: 12
        },
        end: {
          line: 187,
          column: 29
        }
      },
      "92": {
        start: {
          line: 189,
          column: 8
        },
        end: {
          line: 195,
          column: 9
        }
      },
      "93": {
        start: {
          line: 189,
          column: 20
        },
        end: {
          line: 189,
          column: 21
        }
      },
      "94": {
        start: {
          line: 190,
          column: 12
        },
        end: {
          line: 194,
          column: 13
        }
      },
      "95": {
        start: {
          line: 190,
          column: 24
        },
        end: {
          line: 190,
          column: 25
        }
      },
      "96": {
        start: {
          line: 191,
          column: 34
        },
        end: {
          line: 191,
          column: 65
        }
      },
      "97": {
        start: {
          line: 192,
          column: 16
        },
        end: {
          line: 193,
          column: 18
        }
      },
      "98": {
        start: {
          line: 196,
          column: 25
        },
        end: {
          line: 196,
          column: 53
        }
      },
      "99": {
        start: {
          line: 197,
          column: 26
        },
        end: {
          line: 197,
          column: 56
        }
      },
      "100": {
        start: {
          line: 198,
          column: 8
        },
        end: {
          line: 198,
          column: 40
        }
      },
      "101": {
        start: {
          line: 203,
          column: 8
        },
        end: {
          line: 206,
          column: 16
        }
      },
      "102": {
        start: {
          line: 211,
          column: 65
        },
        end: {
          line: 211,
          column: 97
        }
      },
      "103": {
        start: {
          line: 213,
          column: 8
        },
        end: {
          line: 215,
          column: 9
        }
      },
      "104": {
        start: {
          line: 214,
          column: 12
        },
        end: {
          line: 214,
          column: 24
        }
      },
      "105": {
        start: {
          line: 216,
          column: 8
        },
        end: {
          line: 239,
          column: 9
        }
      },
      "106": {
        start: {
          line: 217,
          column: 31
        },
        end: {
          line: 227,
          column: 14
        }
      },
      "107": {
        start: {
          line: 228,
          column: 12
        },
        end: {
          line: 228,
          column: 28
        }
      },
      "108": {
        start: {
          line: 231,
          column: 12
        },
        end: {
          line: 237,
          column: 13
        }
      },
      "109": {
        start: {
          line: 233,
          column: 33
        },
        end: {
          line: 235,
          column: 269
        }
      },
      "110": {
        start: {
          line: 236,
          column: 16
        },
        end: {
          line: 236,
          column: 43
        }
      },
      "111": {
        start: {
          line: 238,
          column: 12
        },
        end: {
          line: 238,
          column: 24
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 40
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 20,
            column: 6
          },
          end: {
            line: 20,
            column: 7
          }
        },
        loc: {
          start: {
            line: 20,
            column: 33
          },
          end: {
            line: 50,
            column: 5
          }
        },
        line: 20
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 39,
            column: 21
          },
          end: {
            line: 39,
            column: 22
          }
        },
        loc: {
          start: {
            line: 39,
            column: 29
          },
          end: {
            line: 39,
            column: 56
          }
        },
        line: 39
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 53,
            column: 6
          },
          end: {
            line: 53,
            column: 7
          }
        },
        loc: {
          start: {
            line: 53,
            column: 34
          },
          end: {
            line: 61,
            column: 5
          }
        },
        line: 53
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 64,
            column: 6
          },
          end: {
            line: 64,
            column: 7
          }
        },
        loc: {
          start: {
            line: 64,
            column: 78
          },
          end: {
            line: 96,
            column: 5
          }
        },
        line: 64
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 99,
            column: 6
          },
          end: {
            line: 99,
            column: 7
          }
        },
        loc: {
          start: {
            line: 99,
            column: 39
          },
          end: {
            line: 169,
            column: 5
          }
        },
        line: 99
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 172,
            column: 6
          },
          end: {
            line: 172,
            column: 7
          }
        },
        loc: {
          start: {
            line: 172,
            column: 44
          },
          end: {
            line: 199,
            column: 5
          }
        },
        line: 172
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 182,
            column: 59
          },
          end: {
            line: 182,
            column: 60
          }
        },
        loc: {
          start: {
            line: 182,
            column: 63
          },
          end: {
            line: 182,
            column: 94
          }
        },
        line: 182
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 202,
            column: 6
          },
          end: {
            line: 202,
            column: 7
          }
        },
        loc: {
          start: {
            line: 202,
            column: 24
          },
          end: {
            line: 207,
            column: 5
          }
        },
        line: 202
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 210,
            column: 6
          },
          end: {
            line: 210,
            column: 7
          }
        },
        loc: {
          start: {
            line: 210,
            column: 48
          },
          end: {
            line: 240,
            column: 5
          }
        },
        line: 210
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 15,
            column: 16
          },
          end: {
            line: 15,
            column: 39
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 15,
            column: 36
          },
          end: {
            line: 15,
            column: 39
          }
        }],
        line: 15
      },
      "1": {
        loc: {
          start: {
            line: 34,
            column: 12
          },
          end: {
            line: 36,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 34,
            column: 12
          },
          end: {
            line: 36,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 34
      },
      "2": {
        loc: {
          start: {
            line: 41,
            column: 37
          },
          end: {
            line: 41,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 41,
            column: 37
          },
          end: {
            line: 41,
            column: 47
          }
        }, {
          start: {
            line: 41,
            column: 51
          },
          end: {
            line: 41,
            column: 77
          }
        }],
        line: 41
      },
      "3": {
        loc: {
          start: {
            line: 48,
            column: 24
          },
          end: {
            line: 48,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 48,
            column: 24
          },
          end: {
            line: 48,
            column: 45
          }
        }, {
          start: {
            line: 48,
            column: 49
          },
          end: {
            line: 48,
            column: 50
          }
        }],
        line: 48
      },
      "4": {
        loc: {
          start: {
            line: 55,
            column: 36
          },
          end: {
            line: 55,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 55,
            column: 36
          },
          end: {
            line: 55,
            column: 53
          }
        }, {
          start: {
            line: 55,
            column: 57
          },
          end: {
            line: 55,
            column: 74
          }
        }, {
          start: {
            line: 55,
            column: 78
          },
          end: {
            line: 55,
            column: 80
          }
        }],
        line: 55
      },
      "5": {
        loc: {
          start: {
            line: 56,
            column: 35
          },
          end: {
            line: 56,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 56,
            column: 35
          },
          end: {
            line: 56,
            column: 51
          }
        }, {
          start: {
            line: 56,
            column: 55
          },
          end: {
            line: 56,
            column: 71
          }
        }, {
          start: {
            line: 56,
            column: 75
          },
          end: {
            line: 56,
            column: 77
          }
        }],
        line: 56
      },
      "6": {
        loc: {
          start: {
            line: 57,
            column: 37
          },
          end: {
            line: 57,
            column: 83
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 57,
            column: 37
          },
          end: {
            line: 57,
            column: 55
          }
        }, {
          start: {
            line: 57,
            column: 59
          },
          end: {
            line: 57,
            column: 77
          }
        }, {
          start: {
            line: 57,
            column: 81
          },
          end: {
            line: 57,
            column: 83
          }
        }],
        line: 57
      },
      "7": {
        loc: {
          start: {
            line: 58,
            column: 38
          },
          end: {
            line: 58,
            column: 86
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 58,
            column: 38
          },
          end: {
            line: 58,
            column: 57
          }
        }, {
          start: {
            line: 58,
            column: 61
          },
          end: {
            line: 58,
            column: 80
          }
        }, {
          start: {
            line: 58,
            column: 84
          },
          end: {
            line: 58,
            column: 86
          }
        }],
        line: 58
      },
      "8": {
        loc: {
          start: {
            line: 59,
            column: 40
          },
          end: {
            line: 59,
            column: 127
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 59,
            column: 40
          },
          end: {
            line: 59,
            column: 62
          }
        }, {
          start: {
            line: 59,
            column: 66
          },
          end: {
            line: 59,
            column: 96
          }
        }, {
          start: {
            line: 59,
            column: 100
          },
          end: {
            line: 59,
            column: 121
          }
        }, {
          start: {
            line: 59,
            column: 125
          },
          end: {
            line: 59,
            column: 127
          }
        }],
        line: 59
      },
      "9": {
        loc: {
          start: {
            line: 67,
            column: 8
          },
          end: {
            line: 75,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 67,
            column: 8
          },
          end: {
            line: 75,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 67
      },
      "10": {
        loc: {
          start: {
            line: 67,
            column: 12
          },
          end: {
            line: 67,
            column: 38
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 67,
            column: 12
          },
          end: {
            line: 67,
            column: 18
          }
        }, {
          start: {
            line: 67,
            column: 22
          },
          end: {
            line: 67,
            column: 27
          }
        }, {
          start: {
            line: 67,
            column: 31
          },
          end: {
            line: 67,
            column: 38
          }
        }],
        line: 67
      },
      "11": {
        loc: {
          start: {
            line: 68,
            column: 12
          },
          end: {
            line: 72,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 68,
            column: 12
          },
          end: {
            line: 72,
            column: 13
          }
        }, {
          start: {
            line: 70,
            column: 19
          },
          end: {
            line: 72,
            column: 13
          }
        }],
        line: 68
      },
      "12": {
        loc: {
          start: {
            line: 77,
            column: 8
          },
          end: {
            line: 79,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 77,
            column: 8
          },
          end: {
            line: 79,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 77
      },
      "13": {
        loc: {
          start: {
            line: 77,
            column: 12
          },
          end: {
            line: 77,
            column: 28
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 77,
            column: 12
          },
          end: {
            line: 77,
            column: 17
          }
        }, {
          start: {
            line: 77,
            column: 21
          },
          end: {
            line: 77,
            column: 28
          }
        }],
        line: 77
      },
      "14": {
        loc: {
          start: {
            line: 81,
            column: 8
          },
          end: {
            line: 83,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 81,
            column: 8
          },
          end: {
            line: 83,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 81
      },
      "15": {
        loc: {
          start: {
            line: 85,
            column: 8
          },
          end: {
            line: 87,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 85,
            column: 8
          },
          end: {
            line: 87,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 85
      },
      "16": {
        loc: {
          start: {
            line: 89,
            column: 8
          },
          end: {
            line: 91,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 89,
            column: 8
          },
          end: {
            line: 91,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 89
      },
      "17": {
        loc: {
          start: {
            line: 89,
            column: 12
          },
          end: {
            line: 89,
            column: 27
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 89,
            column: 12
          },
          end: {
            line: 89,
            column: 18
          }
        }, {
          start: {
            line: 89,
            column: 22
          },
          end: {
            line: 89,
            column: 27
          }
        }],
        line: 89
      },
      "18": {
        loc: {
          start: {
            line: 92,
            column: 8
          },
          end: {
            line: 94,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 92,
            column: 8
          },
          end: {
            line: 94,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 92
      },
      "19": {
        loc: {
          start: {
            line: 104,
            column: 8
          },
          end: {
            line: 111,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 104,
            column: 8
          },
          end: {
            line: 111,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 104
      },
      "20": {
        loc: {
          start: {
            line: 104,
            column: 12
          },
          end: {
            line: 104,
            column: 44
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 104,
            column: 12
          },
          end: {
            line: 104,
            column: 26
          }
        }, {
          start: {
            line: 104,
            column: 30
          },
          end: {
            line: 104,
            column: 44
          }
        }],
        line: 104
      },
      "21": {
        loc: {
          start: {
            line: 107,
            column: 12
          },
          end: {
            line: 110,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 107,
            column: 12
          },
          end: {
            line: 110,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 107
      },
      "22": {
        loc: {
          start: {
            line: 113,
            column: 8
          },
          end: {
            line: 120,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 113,
            column: 8
          },
          end: {
            line: 120,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 113
      },
      "23": {
        loc: {
          start: {
            line: 113,
            column: 12
          },
          end: {
            line: 113,
            column: 42
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 113,
            column: 12
          },
          end: {
            line: 113,
            column: 25
          }
        }, {
          start: {
            line: 113,
            column: 29
          },
          end: {
            line: 113,
            column: 42
          }
        }],
        line: 113
      },
      "24": {
        loc: {
          start: {
            line: 116,
            column: 12
          },
          end: {
            line: 119,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 116,
            column: 12
          },
          end: {
            line: 119,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 116
      },
      "25": {
        loc: {
          start: {
            line: 122,
            column: 8
          },
          end: {
            line: 129,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 122,
            column: 8
          },
          end: {
            line: 129,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 122
      },
      "26": {
        loc: {
          start: {
            line: 122,
            column: 12
          },
          end: {
            line: 122,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 122,
            column: 12
          },
          end: {
            line: 122,
            column: 27
          }
        }, {
          start: {
            line: 122,
            column: 31
          },
          end: {
            line: 122,
            column: 46
          }
        }],
        line: 122
      },
      "27": {
        loc: {
          start: {
            line: 125,
            column: 12
          },
          end: {
            line: 128,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 125,
            column: 12
          },
          end: {
            line: 128,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 125
      },
      "28": {
        loc: {
          start: {
            line: 131,
            column: 8
          },
          end: {
            line: 145,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 131,
            column: 8
          },
          end: {
            line: 145,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 131
      },
      "29": {
        loc: {
          start: {
            line: 131,
            column: 12
          },
          end: {
            line: 131,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 131,
            column: 12
          },
          end: {
            line: 131,
            column: 28
          }
        }, {
          start: {
            line: 131,
            column: 32
          },
          end: {
            line: 131,
            column: 48
          }
        }],
        line: 131
      },
      "30": {
        loc: {
          start: {
            line: 133,
            column: 12
          },
          end: {
            line: 143,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 133,
            column: 12
          },
          end: {
            line: 143,
            column: 13
          }
        }, {
          start: {
            line: 139,
            column: 19
          },
          end: {
            line: 143,
            column: 13
          }
        }],
        line: 133
      },
      "31": {
        loc: {
          start: {
            line: 133,
            column: 16
          },
          end: {
            line: 133,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 133,
            column: 16
          },
          end: {
            line: 133,
            column: 32
          }
        }, {
          start: {
            line: 133,
            column: 36
          },
          end: {
            line: 133,
            column: 52
          }
        }],
        line: 133
      },
      "32": {
        loc: {
          start: {
            line: 135,
            column: 16
          },
          end: {
            line: 138,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 135,
            column: 16
          },
          end: {
            line: 138,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 135
      },
      "33": {
        loc: {
          start: {
            line: 139,
            column: 19
          },
          end: {
            line: 143,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 139,
            column: 19
          },
          end: {
            line: 143,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 139
      },
      "34": {
        loc: {
          start: {
            line: 139,
            column: 23
          },
          end: {
            line: 139,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 139,
            column: 23
          },
          end: {
            line: 139,
            column: 40
          }
        }, {
          start: {
            line: 139,
            column: 44
          },
          end: {
            line: 139,
            column: 61
          }
        }],
        line: 139
      },
      "35": {
        loc: {
          start: {
            line: 147,
            column: 8
          },
          end: {
            line: 154,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 147,
            column: 8
          },
          end: {
            line: 154,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 147
      },
      "36": {
        loc: {
          start: {
            line: 147,
            column: 12
          },
          end: {
            line: 147,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 147,
            column: 12
          },
          end: {
            line: 147,
            column: 30
          }
        }, {
          start: {
            line: 147,
            column: 34
          },
          end: {
            line: 147,
            column: 52
          }
        }],
        line: 147
      },
      "37": {
        loc: {
          start: {
            line: 150,
            column: 12
          },
          end: {
            line: 153,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 150,
            column: 12
          },
          end: {
            line: 153,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 150
      },
      "38": {
        loc: {
          start: {
            line: 155,
            column: 27
          },
          end: {
            line: 155,
            column: 67
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 155,
            column: 42
          },
          end: {
            line: 155,
            column: 63
          }
        }, {
          start: {
            line: 155,
            column: 66
          },
          end: {
            line: 155,
            column: 67
          }
        }],
        line: 155
      },
      "39": {
        loc: {
          start: {
            line: 175,
            column: 8
          },
          end: {
            line: 175,
            column: 34
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 175,
            column: 8
          },
          end: {
            line: 175,
            column: 34
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 175
      },
      "40": {
        loc: {
          start: {
            line: 176,
            column: 8
          },
          end: {
            line: 176,
            column: 59
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 176,
            column: 8
          },
          end: {
            line: 176,
            column: 59
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 176
      },
      "41": {
        loc: {
          start: {
            line: 176,
            column: 12
          },
          end: {
            line: 176,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 176,
            column: 12
          },
          end: {
            line: 176,
            column: 27
          }
        }, {
          start: {
            line: 176,
            column: 31
          },
          end: {
            line: 176,
            column: 46
          }
        }],
        line: 176
      },
      "42": {
        loc: {
          start: {
            line: 178,
            column: 8
          },
          end: {
            line: 180,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 178,
            column: 8
          },
          end: {
            line: 180,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 178
      },
      "43": {
        loc: {
          start: {
            line: 178,
            column: 12
          },
          end: {
            line: 178,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 178,
            column: 12
          },
          end: {
            line: 178,
            column: 27
          }
        }, {
          start: {
            line: 178,
            column: 31
          },
          end: {
            line: 178,
            column: 46
          }
        }],
        line: 178
      },
      "44": {
        loc: {
          start: {
            line: 191,
            column: 34
          },
          end: {
            line: 191,
            column: 65
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 191,
            column: 60
          },
          end: {
            line: 191,
            column: 61
          }
        }, {
          start: {
            line: 191,
            column: 64
          },
          end: {
            line: 191,
            column: 65
          }
        }],
        line: 191
      },
      "45": {
        loc: {
          start: {
            line: 213,
            column: 8
          },
          end: {
            line: 215,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 213,
            column: 8
          },
          end: {
            line: 215,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 213
      },
      "46": {
        loc: {
          start: {
            line: 213,
            column: 12
          },
          end: {
            line: 213,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 213,
            column: 12
          },
          end: {
            line: 213,
            column: 19
          }
        }, {
          start: {
            line: 213,
            column: 23
          },
          end: {
            line: 213,
            column: 29
          }
        }, {
          start: {
            line: 213,
            column: 33
          },
          end: {
            line: 213,
            column: 41
          }
        }, {
          start: {
            line: 213,
            column: 45
          },
          end: {
            line: 213,
            column: 56
          }
        }],
        line: 213
      },
      "47": {
        loc: {
          start: {
            line: 221,
            column: 26
          },
          end: {
            line: 221,
            column: 42
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 221,
            column: 26
          },
          end: {
            line: 221,
            column: 34
          }
        }, {
          start: {
            line: 221,
            column: 38
          },
          end: {
            line: 221,
            column: 42
          }
        }],
        line: 221
      },
      "48": {
        loc: {
          start: {
            line: 231,
            column: 12
          },
          end: {
            line: 237,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 231,
            column: 12
          },
          end: {
            line: 237,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 231
      },
      "49": {
        loc: {
          start: {
            line: 231,
            column: 16
          },
          end: {
            line: 231,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 231,
            column: 16
          },
          end: {
            line: 231,
            column: 38
          }
        }, {
          start: {
            line: 231,
            column: 42
          },
          end: {
            line: 231,
            column: 74
          }
        }],
        line: 231
      },
      "50": {
        loc: {
          start: {
            line: 235,
            column: 219
          },
          end: {
            line: 235,
            column: 257
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 235,
            column: 230
          },
          end: {
            line: 235,
            column: 245
          }
        }, {
          start: {
            line: 235,
            column: 248
          },
          end: {
            line: 235,
            column: 257
          }
        }],
        line: 235
      },
      "51": {
        loc: {
          start: {
            line: 236,
            column: 23
          },
          end: {
            line: 236,
            column: 42
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 236,
            column: 23
          },
          end: {
            line: 236,
            column: 34
          }
        }, {
          start: {
            line: 236,
            column: 38
          },
          end: {
            line: 236,
            column: 42
          }
        }],
        line: 236
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0, 0],
      "5": [0, 0, 0],
      "6": [0, 0, 0],
      "7": [0, 0, 0],
      "8": [0, 0, 0, 0],
      "9": [0, 0],
      "10": [0, 0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0, 0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/stefanbekker/projects/fancy-planties/src/lib/services/plant-matching.ts"],
      sourcesContent: ["import { db } from '@/lib/db';\nimport { plants } from '@/lib/db/schema';\nimport { eq, or, ilike, sql } from 'drizzle-orm';\nimport type { PlantMatch, PlantMatchResult } from '@/lib/validation/csv-schemas';\n\nexport class PlantMatcher {\n  private matchingThreshold: number;\n\n  constructor(matchingThreshold: number = 0.7) {\n    this.matchingThreshold = matchingThreshold;\n  }\n\n  /**\n   * Find matching plants for CSV row data\n   */\n  async findMatches(rowData: Record<string, string>): Promise<PlantMatchResult> {\n    const { family, genus, species, cultivar, commonName } = this.extractPlantFields(rowData);\n    \n    // Get all potential matches from database\n    const potentialMatches = await this.getPotentialMatches(family, genus, species, cultivar, commonName);\n    \n    // Calculate match scores\n    const matches: PlantMatch[] = [];\n    \n    for (const plant of potentialMatches) {\n      const match = this.calculateMatch(\n        { family, genus, species, cultivar, commonName },\n        plant\n      );\n      \n      if (match.confidence >= this.matchingThreshold) {\n        matches.push(match);\n      }\n    }\n\n    // Sort by confidence (highest first)\n    matches.sort((a, b) => b.confidence - a.confidence);\n\n    const bestMatch = matches[0];\n    const requiresManualReview = !bestMatch || bestMatch.confidence < 0.9;\n\n    return {\n      rowIndex: 0, // Will be set by caller\n      originalData: rowData,\n      matches,\n      bestMatch,\n      requiresManualReview,\n      confidence: bestMatch?.confidence || 0,\n    };\n  }\n\n  /**\n   * Extract plant taxonomy fields from CSV row data\n   */\n  private extractPlantFields(rowData: Record<string, string>) {\n    return {\n      family: this.cleanField(rowData['Family'] || rowData['family'] || ''),\n      genus: this.cleanField(rowData['Genus'] || rowData['genus'] || ''),\n      species: this.cleanField(rowData['Species'] || rowData['species'] || ''),\n      cultivar: this.cleanField(rowData['Cultivar'] || rowData['cultivar'] || ''),\n      commonName: this.cleanField(rowData['Common Name'] || rowData['Common Name/Variety'] || rowData['commonName'] || ''),\n    };\n  }\n\n  /**\n   * Get potential plant matches from database\n   */\n  private async getPotentialMatches(\n    family: string,\n    genus: string,\n    species: string,\n    cultivar: string,\n    commonName: string\n  ) {\n    const conditions = [];\n\n    // Exact matches first (including cultivar if provided)\n    if (family && genus && species) {\n      if (cultivar) {\n        conditions.push(\n          sql`${plants.family} ILIKE ${`%${family}%`} AND ${plants.genus} ILIKE ${`%${genus}%`} AND ${plants.species} ILIKE ${`%${species}%`} AND ${plants.cultivar} ILIKE ${`%${cultivar}%`}`\n        );\n      } else {\n        conditions.push(\n          sql`${plants.family} ILIKE ${`%${family}%`} AND ${plants.genus} ILIKE ${`%${genus}%`} AND ${plants.species} ILIKE ${`%${species}%`} AND ${plants.cultivar} IS NULL`\n        );\n      }\n      \n      // Also add condition without cultivar constraint for broader matching\n      conditions.push(\n        sql`${plants.family} ILIKE ${`%${family}%`} AND ${plants.genus} ILIKE ${`%${genus}%`} AND ${plants.species} ILIKE ${`%${species}%`}`\n      );\n    }\n\n    // Genus and species match\n    if (genus && species) {\n      conditions.push(\n        sql`${plants.genus} ILIKE ${`%${genus}%`} AND ${plants.species} ILIKE ${`%${species}%`}`\n      );\n    }\n\n    // Common name match\n    if (commonName) {\n      conditions.push(ilike(plants.commonName, `%${commonName}%`));\n    }\n\n    // Cultivar match\n    if (cultivar) {\n      conditions.push(ilike(plants.cultivar, `%${cultivar}%`));\n    }\n\n    // Family and genus match\n    if (family && genus) {\n      conditions.push(\n        sql`${plants.family} ILIKE ${`%${family}%`} AND ${plants.genus} ILIKE ${`%${genus}%`}`\n      );\n    }\n\n    if (conditions.length === 0) {\n      return [];\n    }\n\n    return await db\n      .select()\n      .from(plants)\n      .where(or(...conditions))\n      .limit(20); // Limit to prevent too many matches\n  }\n\n  /**\n   * Calculate match confidence between CSV data and database plant\n   */\n  private calculateMatch(\n    csvData: { family: string; genus: string; species: string; cultivar: string; commonName: string },\n    dbPlant: any\n  ): PlantMatch {\n    const matchedFields: string[] = [];\n    let totalScore = 0;\n    let maxScore = 0;\n\n    // Family match (weight: 1)\n    if (csvData.family && dbPlant.family) {\n      maxScore += 1;\n      const similarity = this.calculateStringSimilarity(csvData.family, dbPlant.family);\n      if (similarity > 0.8) {\n        totalScore += similarity;\n        matchedFields.push('family');\n      }\n    }\n\n    // Genus match (weight: 2)\n    if (csvData.genus && dbPlant.genus) {\n      maxScore += 2;\n      const similarity = this.calculateStringSimilarity(csvData.genus, dbPlant.genus);\n      if (similarity > 0.8) {\n        totalScore += similarity * 2;\n        matchedFields.push('genus');\n      }\n    }\n\n    // Species match (weight: 2)\n    if (csvData.species && dbPlant.species) {\n      maxScore += 2;\n      const similarity = this.calculateStringSimilarity(csvData.species, dbPlant.species);\n      if (similarity > 0.8) {\n        totalScore += similarity * 2;\n        matchedFields.push('species');\n      }\n    }\n\n    // Cultivar match (weight: 1.5)\n    if (csvData.cultivar || dbPlant.cultivar) {\n      maxScore += 1.5;\n      if (csvData.cultivar && dbPlant.cultivar) {\n        const similarity = this.calculateStringSimilarity(csvData.cultivar, dbPlant.cultivar);\n        if (similarity > 0.8) {\n          totalScore += similarity * 1.5;\n          matchedFields.push('cultivar');\n        }\n      } else if (!csvData.cultivar && !dbPlant.cultivar) {\n        // Both null/empty - perfect match\n        totalScore += 1.5;\n        matchedFields.push('cultivar');\n      }\n      // If one has cultivar and other doesn't, no points but still valid match\n    }\n\n    // Common name match (weight: 1.5)\n    if (csvData.commonName && dbPlant.commonName) {\n      maxScore += 1.5;\n      const similarity = this.calculateStringSimilarity(csvData.commonName, dbPlant.commonName);\n      if (similarity > 0.6) { // Lower threshold for common names due to variations\n        totalScore += similarity * 1.5;\n        matchedFields.push('commonName');\n      }\n    }\n\n    const confidence = maxScore > 0 ? totalScore / maxScore : 0;\n\n    return {\n      plantId: dbPlant.id,\n      confidence: Math.min(confidence, 1), // Cap at 1.0\n      matchedFields,\n      plant: {\n        id: dbPlant.id,\n        family: dbPlant.family,\n        genus: dbPlant.genus,\n        species: dbPlant.species,\n        cultivar: dbPlant.cultivar,\n        commonName: dbPlant.commonName,\n      },\n    };\n  }\n\n  /**\n   * Calculate string similarity using Levenshtein distance\n   */\n  private calculateStringSimilarity(str1: string, str2: string): number {\n    const s1 = str1.toLowerCase().trim();\n    const s2 = str2.toLowerCase().trim();\n\n    if (s1 === s2) return 1.0;\n    if (s1.length === 0 || s2.length === 0) return 0.0;\n\n    // Check for substring matches\n    if (s1.includes(s2) || s2.includes(s1)) {\n      return 0.9;\n    }\n\n    // Levenshtein distance calculation\n    const matrix = Array(s2.length + 1).fill(null).map(() => Array(s1.length + 1).fill(null));\n\n    for (let i = 0; i <= s1.length; i++) {\n      matrix[0][i] = i;\n    }\n\n    for (let j = 0; j <= s2.length; j++) {\n      matrix[j][0] = j;\n    }\n\n    for (let j = 1; j <= s2.length; j++) {\n      for (let i = 1; i <= s1.length; i++) {\n        const indicator = s1[i - 1] === s2[j - 1] ? 0 : 1;\n        matrix[j][i] = Math.min(\n          matrix[j][i - 1] + 1, // deletion\n          matrix[j - 1][i] + 1, // insertion\n          matrix[j - 1][i - 1] + indicator // substitution\n        );\n      }\n    }\n\n    const distance = matrix[s2.length][s1.length];\n    const maxLength = Math.max(s1.length, s2.length);\n    return 1 - distance / maxLength;\n  }\n\n  /**\n   * Clean and normalize field values\n   */\n  private cleanField(value: string): string {\n    return value\n      .trim()\n      .replace(/[\"\"]/g, '\"') // Normalize quotes\n      .replace(/\\s+/g, ' ') // Normalize whitespace\n      .replace(/^\\(.*\\)$/, '') // Remove parentheses around entire value\n      .trim();\n  }\n\n  /**\n   * Create a new plant from CSV data if no good match is found\n   */\n  async createPlantFromCSV(\n    csvData: Record<string, string>,\n    userId: number\n  ): Promise<{ id: number } | null> {\n    const { family, genus, species, cultivar, commonName } = this.extractPlantFields(csvData);\n\n    // Validate required fields\n    if (!family || !genus || !species || !commonName) {\n      return null;\n    }\n\n    try {\n      const [newPlant] = await db\n        .insert(plants)\n        .values({\n          family,\n          genus,\n          species,\n          cultivar: cultivar || null,\n          commonName,\n          createdBy: userId,\n          isVerified: false,\n        })\n        .returning({ id: plants.id });\n\n      return newPlant;\n    } catch (error) {\n      // Handle duplicate key errors\n      if (error instanceof Error && error.message.includes('unique')) {\n        // Try to find the existing plant\n        const existing = await db\n          .select({ id: plants.id })\n          .from(plants)\n          .where(\n            sql`${plants.family} = ${family} AND ${plants.genus} = ${genus} AND ${plants.species} = ${species} AND ${plants.cultivar} ${cultivar ? `= ${cultivar}` : 'IS NULL'}`\n          )\n          .limit(1);\n\n        return existing[0] || null;\n      }\n      throw error;\n    }\n  }\n}"],
      names: ["PlantMatcher", "matchingThreshold", "findMatches", "rowData", "family", "genus", "species", "cultivar", "commonName", "extractPlantFields", "potentialMatches", "getPotentialMatches", "matches", "plant", "match", "calculateMatch", "confidence", "push", "sort", "a", "b", "bestMatch", "requiresManualReview", "rowIndex", "originalData", "cleanField", "conditions", "sql", "plants", "ilike", "length", "db", "select", "from", "where", "or", "limit", "csvData", "dbPlant", "matchedFields", "totalScore", "maxScore", "similarity", "calculateStringSimilarity", "plantId", "id", "Math", "min", "str1", "str2", "s1", "toLowerCase", "trim", "s2", "includes", "matrix", "Array", "fill", "map", "i", "j", "indicator", "distance", "maxLength", "max", "value", "replace", "createPlantFromCSV", "userId", "newPlant", "insert", "values", "createdBy", "isVerified", "returning", "error", "Error", "message", "existing"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "36b466dc4fc0482efa588ccf33c9adbc273dd8ad"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_ttk08hdfc = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_ttk08hdfc();
cov_ttk08hdfc().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_ttk08hdfc().s[1]++;
Object.defineProperty(exports, "PlantMatcher", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_ttk08hdfc().f[0]++;
    cov_ttk08hdfc().s[2]++;
    return PlantMatcher;
  }
});
const _db =
/* istanbul ignore next */
(cov_ttk08hdfc().s[3]++, require("../db"));
const _schema =
/* istanbul ignore next */
(cov_ttk08hdfc().s[4]++, require("../db/schema"));
const _drizzleorm =
/* istanbul ignore next */
(cov_ttk08hdfc().s[5]++, require("drizzle-orm"));
class PlantMatcher {
  constructor(matchingThreshold =
  /* istanbul ignore next */
  (cov_ttk08hdfc().b[0][0]++, 0.7)) {
    /* istanbul ignore next */
    cov_ttk08hdfc().f[1]++;
    cov_ttk08hdfc().s[6]++;
    this.matchingThreshold = matchingThreshold;
  }
  /**
  * Find matching plants for CSV row data
  */
  async findMatches(rowData) {
    /* istanbul ignore next */
    cov_ttk08hdfc().f[2]++;
    const {
      family,
      genus,
      species,
      cultivar,
      commonName
    } =
    /* istanbul ignore next */
    (cov_ttk08hdfc().s[7]++, this.extractPlantFields(rowData));
    // Get all potential matches from database
    const potentialMatches =
    /* istanbul ignore next */
    (cov_ttk08hdfc().s[8]++, await this.getPotentialMatches(family, genus, species, cultivar, commonName));
    // Calculate match scores
    const matches =
    /* istanbul ignore next */
    (cov_ttk08hdfc().s[9]++, []);
    /* istanbul ignore next */
    cov_ttk08hdfc().s[10]++;
    for (const plant of potentialMatches) {
      const match =
      /* istanbul ignore next */
      (cov_ttk08hdfc().s[11]++, this.calculateMatch({
        family,
        genus,
        species,
        cultivar,
        commonName
      }, plant));
      /* istanbul ignore next */
      cov_ttk08hdfc().s[12]++;
      if (match.confidence >= this.matchingThreshold) {
        /* istanbul ignore next */
        cov_ttk08hdfc().b[1][0]++;
        cov_ttk08hdfc().s[13]++;
        matches.push(match);
      } else
      /* istanbul ignore next */
      {
        cov_ttk08hdfc().b[1][1]++;
      }
    }
    // Sort by confidence (highest first)
    /* istanbul ignore next */
    cov_ttk08hdfc().s[14]++;
    matches.sort((a, b) => {
      /* istanbul ignore next */
      cov_ttk08hdfc().f[3]++;
      cov_ttk08hdfc().s[15]++;
      return b.confidence - a.confidence;
    });
    const bestMatch =
    /* istanbul ignore next */
    (cov_ttk08hdfc().s[16]++, matches[0]);
    const requiresManualReview =
    /* istanbul ignore next */
    (cov_ttk08hdfc().s[17]++,
    /* istanbul ignore next */
    (cov_ttk08hdfc().b[2][0]++, !bestMatch) ||
    /* istanbul ignore next */
    (cov_ttk08hdfc().b[2][1]++, bestMatch.confidence < 0.9));
    /* istanbul ignore next */
    cov_ttk08hdfc().s[18]++;
    return {
      rowIndex: 0,
      originalData: rowData,
      matches,
      bestMatch,
      requiresManualReview,
      confidence:
      /* istanbul ignore next */
      (cov_ttk08hdfc().b[3][0]++, bestMatch?.confidence) ||
      /* istanbul ignore next */
      (cov_ttk08hdfc().b[3][1]++, 0)
    };
  }
  /**
  * Extract plant taxonomy fields from CSV row data
  */
  extractPlantFields(rowData) {
    /* istanbul ignore next */
    cov_ttk08hdfc().f[4]++;
    cov_ttk08hdfc().s[19]++;
    return {
      family: this.cleanField(
      /* istanbul ignore next */
      (cov_ttk08hdfc().b[4][0]++, rowData['Family']) ||
      /* istanbul ignore next */
      (cov_ttk08hdfc().b[4][1]++, rowData['family']) ||
      /* istanbul ignore next */
      (cov_ttk08hdfc().b[4][2]++, '')),
      genus: this.cleanField(
      /* istanbul ignore next */
      (cov_ttk08hdfc().b[5][0]++, rowData['Genus']) ||
      /* istanbul ignore next */
      (cov_ttk08hdfc().b[5][1]++, rowData['genus']) ||
      /* istanbul ignore next */
      (cov_ttk08hdfc().b[5][2]++, '')),
      species: this.cleanField(
      /* istanbul ignore next */
      (cov_ttk08hdfc().b[6][0]++, rowData['Species']) ||
      /* istanbul ignore next */
      (cov_ttk08hdfc().b[6][1]++, rowData['species']) ||
      /* istanbul ignore next */
      (cov_ttk08hdfc().b[6][2]++, '')),
      cultivar: this.cleanField(
      /* istanbul ignore next */
      (cov_ttk08hdfc().b[7][0]++, rowData['Cultivar']) ||
      /* istanbul ignore next */
      (cov_ttk08hdfc().b[7][1]++, rowData['cultivar']) ||
      /* istanbul ignore next */
      (cov_ttk08hdfc().b[7][2]++, '')),
      commonName: this.cleanField(
      /* istanbul ignore next */
      (cov_ttk08hdfc().b[8][0]++, rowData['Common Name']) ||
      /* istanbul ignore next */
      (cov_ttk08hdfc().b[8][1]++, rowData['Common Name/Variety']) ||
      /* istanbul ignore next */
      (cov_ttk08hdfc().b[8][2]++, rowData['commonName']) ||
      /* istanbul ignore next */
      (cov_ttk08hdfc().b[8][3]++, ''))
    };
  }
  /**
  * Get potential plant matches from database
  */
  async getPotentialMatches(family, genus, species, cultivar, commonName) {
    /* istanbul ignore next */
    cov_ttk08hdfc().f[5]++;
    const conditions =
    /* istanbul ignore next */
    (cov_ttk08hdfc().s[20]++, []);
    // Exact matches first (including cultivar if provided)
    /* istanbul ignore next */
    cov_ttk08hdfc().s[21]++;
    if (
    /* istanbul ignore next */
    (cov_ttk08hdfc().b[10][0]++, family) &&
    /* istanbul ignore next */
    (cov_ttk08hdfc().b[10][1]++, genus) &&
    /* istanbul ignore next */
    (cov_ttk08hdfc().b[10][2]++, species)) {
      /* istanbul ignore next */
      cov_ttk08hdfc().b[9][0]++;
      cov_ttk08hdfc().s[22]++;
      if (cultivar) {
        /* istanbul ignore next */
        cov_ttk08hdfc().b[11][0]++;
        cov_ttk08hdfc().s[23]++;
        conditions.push((0, _drizzleorm.sql)`${_schema.plants.family} ILIKE ${`%${family}%`} AND ${_schema.plants.genus} ILIKE ${`%${genus}%`} AND ${_schema.plants.species} ILIKE ${`%${species}%`} AND ${_schema.plants.cultivar} ILIKE ${`%${cultivar}%`}`);
      } else {
        /* istanbul ignore next */
        cov_ttk08hdfc().b[11][1]++;
        cov_ttk08hdfc().s[24]++;
        conditions.push((0, _drizzleorm.sql)`${_schema.plants.family} ILIKE ${`%${family}%`} AND ${_schema.plants.genus} ILIKE ${`%${genus}%`} AND ${_schema.plants.species} ILIKE ${`%${species}%`} AND ${_schema.plants.cultivar} IS NULL`);
      }
      // Also add condition without cultivar constraint for broader matching
      /* istanbul ignore next */
      cov_ttk08hdfc().s[25]++;
      conditions.push((0, _drizzleorm.sql)`${_schema.plants.family} ILIKE ${`%${family}%`} AND ${_schema.plants.genus} ILIKE ${`%${genus}%`} AND ${_schema.plants.species} ILIKE ${`%${species}%`}`);
    } else
    /* istanbul ignore next */
    {
      cov_ttk08hdfc().b[9][1]++;
    }
    // Genus and species match
    cov_ttk08hdfc().s[26]++;
    if (
    /* istanbul ignore next */
    (cov_ttk08hdfc().b[13][0]++, genus) &&
    /* istanbul ignore next */
    (cov_ttk08hdfc().b[13][1]++, species)) {
      /* istanbul ignore next */
      cov_ttk08hdfc().b[12][0]++;
      cov_ttk08hdfc().s[27]++;
      conditions.push((0, _drizzleorm.sql)`${_schema.plants.genus} ILIKE ${`%${genus}%`} AND ${_schema.plants.species} ILIKE ${`%${species}%`}`);
    } else
    /* istanbul ignore next */
    {
      cov_ttk08hdfc().b[12][1]++;
    }
    // Common name match
    cov_ttk08hdfc().s[28]++;
    if (commonName) {
      /* istanbul ignore next */
      cov_ttk08hdfc().b[14][0]++;
      cov_ttk08hdfc().s[29]++;
      conditions.push((0, _drizzleorm.ilike)(_schema.plants.commonName, `%${commonName}%`));
    } else
    /* istanbul ignore next */
    {
      cov_ttk08hdfc().b[14][1]++;
    }
    // Cultivar match
    cov_ttk08hdfc().s[30]++;
    if (cultivar) {
      /* istanbul ignore next */
      cov_ttk08hdfc().b[15][0]++;
      cov_ttk08hdfc().s[31]++;
      conditions.push((0, _drizzleorm.ilike)(_schema.plants.cultivar, `%${cultivar}%`));
    } else
    /* istanbul ignore next */
    {
      cov_ttk08hdfc().b[15][1]++;
    }
    // Family and genus match
    cov_ttk08hdfc().s[32]++;
    if (
    /* istanbul ignore next */
    (cov_ttk08hdfc().b[17][0]++, family) &&
    /* istanbul ignore next */
    (cov_ttk08hdfc().b[17][1]++, genus)) {
      /* istanbul ignore next */
      cov_ttk08hdfc().b[16][0]++;
      cov_ttk08hdfc().s[33]++;
      conditions.push((0, _drizzleorm.sql)`${_schema.plants.family} ILIKE ${`%${family}%`} AND ${_schema.plants.genus} ILIKE ${`%${genus}%`}`);
    } else
    /* istanbul ignore next */
    {
      cov_ttk08hdfc().b[16][1]++;
    }
    cov_ttk08hdfc().s[34]++;
    if (conditions.length === 0) {
      /* istanbul ignore next */
      cov_ttk08hdfc().b[18][0]++;
      cov_ttk08hdfc().s[35]++;
      return [];
    } else
    /* istanbul ignore next */
    {
      cov_ttk08hdfc().b[18][1]++;
    }
    cov_ttk08hdfc().s[36]++;
    return await _db.db.select().from(_schema.plants).where((0, _drizzleorm.or)(...conditions)).limit(20); // Limit to prevent too many matches
  }
  /**
  * Calculate match confidence between CSV data and database plant
  */
  calculateMatch(csvData, dbPlant) {
    /* istanbul ignore next */
    cov_ttk08hdfc().f[6]++;
    const matchedFields =
    /* istanbul ignore next */
    (cov_ttk08hdfc().s[37]++, []);
    let totalScore =
    /* istanbul ignore next */
    (cov_ttk08hdfc().s[38]++, 0);
    let maxScore =
    /* istanbul ignore next */
    (cov_ttk08hdfc().s[39]++, 0);
    // Family match (weight: 1)
    /* istanbul ignore next */
    cov_ttk08hdfc().s[40]++;
    if (
    /* istanbul ignore next */
    (cov_ttk08hdfc().b[20][0]++, csvData.family) &&
    /* istanbul ignore next */
    (cov_ttk08hdfc().b[20][1]++, dbPlant.family)) {
      /* istanbul ignore next */
      cov_ttk08hdfc().b[19][0]++;
      cov_ttk08hdfc().s[41]++;
      maxScore += 1;
      const similarity =
      /* istanbul ignore next */
      (cov_ttk08hdfc().s[42]++, this.calculateStringSimilarity(csvData.family, dbPlant.family));
      /* istanbul ignore next */
      cov_ttk08hdfc().s[43]++;
      if (similarity > 0.8) {
        /* istanbul ignore next */
        cov_ttk08hdfc().b[21][0]++;
        cov_ttk08hdfc().s[44]++;
        totalScore += similarity;
        /* istanbul ignore next */
        cov_ttk08hdfc().s[45]++;
        matchedFields.push('family');
      } else
      /* istanbul ignore next */
      {
        cov_ttk08hdfc().b[21][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_ttk08hdfc().b[19][1]++;
    }
    // Genus match (weight: 2)
    cov_ttk08hdfc().s[46]++;
    if (
    /* istanbul ignore next */
    (cov_ttk08hdfc().b[23][0]++, csvData.genus) &&
    /* istanbul ignore next */
    (cov_ttk08hdfc().b[23][1]++, dbPlant.genus)) {
      /* istanbul ignore next */
      cov_ttk08hdfc().b[22][0]++;
      cov_ttk08hdfc().s[47]++;
      maxScore += 2;
      const similarity =
      /* istanbul ignore next */
      (cov_ttk08hdfc().s[48]++, this.calculateStringSimilarity(csvData.genus, dbPlant.genus));
      /* istanbul ignore next */
      cov_ttk08hdfc().s[49]++;
      if (similarity > 0.8) {
        /* istanbul ignore next */
        cov_ttk08hdfc().b[24][0]++;
        cov_ttk08hdfc().s[50]++;
        totalScore += similarity * 2;
        /* istanbul ignore next */
        cov_ttk08hdfc().s[51]++;
        matchedFields.push('genus');
      } else
      /* istanbul ignore next */
      {
        cov_ttk08hdfc().b[24][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_ttk08hdfc().b[22][1]++;
    }
    // Species match (weight: 2)
    cov_ttk08hdfc().s[52]++;
    if (
    /* istanbul ignore next */
    (cov_ttk08hdfc().b[26][0]++, csvData.species) &&
    /* istanbul ignore next */
    (cov_ttk08hdfc().b[26][1]++, dbPlant.species)) {
      /* istanbul ignore next */
      cov_ttk08hdfc().b[25][0]++;
      cov_ttk08hdfc().s[53]++;
      maxScore += 2;
      const similarity =
      /* istanbul ignore next */
      (cov_ttk08hdfc().s[54]++, this.calculateStringSimilarity(csvData.species, dbPlant.species));
      /* istanbul ignore next */
      cov_ttk08hdfc().s[55]++;
      if (similarity > 0.8) {
        /* istanbul ignore next */
        cov_ttk08hdfc().b[27][0]++;
        cov_ttk08hdfc().s[56]++;
        totalScore += similarity * 2;
        /* istanbul ignore next */
        cov_ttk08hdfc().s[57]++;
        matchedFields.push('species');
      } else
      /* istanbul ignore next */
      {
        cov_ttk08hdfc().b[27][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_ttk08hdfc().b[25][1]++;
    }
    // Cultivar match (weight: 1.5)
    cov_ttk08hdfc().s[58]++;
    if (
    /* istanbul ignore next */
    (cov_ttk08hdfc().b[29][0]++, csvData.cultivar) ||
    /* istanbul ignore next */
    (cov_ttk08hdfc().b[29][1]++, dbPlant.cultivar)) {
      /* istanbul ignore next */
      cov_ttk08hdfc().b[28][0]++;
      cov_ttk08hdfc().s[59]++;
      maxScore += 1.5;
      /* istanbul ignore next */
      cov_ttk08hdfc().s[60]++;
      if (
      /* istanbul ignore next */
      (cov_ttk08hdfc().b[31][0]++, csvData.cultivar) &&
      /* istanbul ignore next */
      (cov_ttk08hdfc().b[31][1]++, dbPlant.cultivar)) {
        /* istanbul ignore next */
        cov_ttk08hdfc().b[30][0]++;
        const similarity =
        /* istanbul ignore next */
        (cov_ttk08hdfc().s[61]++, this.calculateStringSimilarity(csvData.cultivar, dbPlant.cultivar));
        /* istanbul ignore next */
        cov_ttk08hdfc().s[62]++;
        if (similarity > 0.8) {
          /* istanbul ignore next */
          cov_ttk08hdfc().b[32][0]++;
          cov_ttk08hdfc().s[63]++;
          totalScore += similarity * 1.5;
          /* istanbul ignore next */
          cov_ttk08hdfc().s[64]++;
          matchedFields.push('cultivar');
        } else
        /* istanbul ignore next */
        {
          cov_ttk08hdfc().b[32][1]++;
        }
      } else {
        /* istanbul ignore next */
        cov_ttk08hdfc().b[30][1]++;
        cov_ttk08hdfc().s[65]++;
        if (
        /* istanbul ignore next */
        (cov_ttk08hdfc().b[34][0]++, !csvData.cultivar) &&
        /* istanbul ignore next */
        (cov_ttk08hdfc().b[34][1]++, !dbPlant.cultivar)) {
          /* istanbul ignore next */
          cov_ttk08hdfc().b[33][0]++;
          cov_ttk08hdfc().s[66]++;
          // Both null/empty - perfect match
          totalScore += 1.5;
          /* istanbul ignore next */
          cov_ttk08hdfc().s[67]++;
          matchedFields.push('cultivar');
        } else
        /* istanbul ignore next */
        {
          cov_ttk08hdfc().b[33][1]++;
        }
      }
      // If one has cultivar and other doesn't, no points but still valid match
    } else
    /* istanbul ignore next */
    {
      cov_ttk08hdfc().b[28][1]++;
    }
    // Common name match (weight: 1.5)
    cov_ttk08hdfc().s[68]++;
    if (
    /* istanbul ignore next */
    (cov_ttk08hdfc().b[36][0]++, csvData.commonName) &&
    /* istanbul ignore next */
    (cov_ttk08hdfc().b[36][1]++, dbPlant.commonName)) {
      /* istanbul ignore next */
      cov_ttk08hdfc().b[35][0]++;
      cov_ttk08hdfc().s[69]++;
      maxScore += 1.5;
      const similarity =
      /* istanbul ignore next */
      (cov_ttk08hdfc().s[70]++, this.calculateStringSimilarity(csvData.commonName, dbPlant.commonName));
      /* istanbul ignore next */
      cov_ttk08hdfc().s[71]++;
      if (similarity > 0.6) {
        /* istanbul ignore next */
        cov_ttk08hdfc().b[37][0]++;
        cov_ttk08hdfc().s[72]++;
        totalScore += similarity * 1.5;
        /* istanbul ignore next */
        cov_ttk08hdfc().s[73]++;
        matchedFields.push('commonName');
      } else
      /* istanbul ignore next */
      {
        cov_ttk08hdfc().b[37][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_ttk08hdfc().b[35][1]++;
    }
    const confidence =
    /* istanbul ignore next */
    (cov_ttk08hdfc().s[74]++, maxScore > 0 ?
    /* istanbul ignore next */
    (cov_ttk08hdfc().b[38][0]++, totalScore / maxScore) :
    /* istanbul ignore next */
    (cov_ttk08hdfc().b[38][1]++, 0));
    /* istanbul ignore next */
    cov_ttk08hdfc().s[75]++;
    return {
      plantId: dbPlant.id,
      confidence: Math.min(confidence, 1),
      matchedFields,
      plant: {
        id: dbPlant.id,
        family: dbPlant.family,
        genus: dbPlant.genus,
        species: dbPlant.species,
        cultivar: dbPlant.cultivar,
        commonName: dbPlant.commonName
      }
    };
  }
  /**
  * Calculate string similarity using Levenshtein distance
  */
  calculateStringSimilarity(str1, str2) {
    /* istanbul ignore next */
    cov_ttk08hdfc().f[7]++;
    const s1 =
    /* istanbul ignore next */
    (cov_ttk08hdfc().s[76]++, str1.toLowerCase().trim());
    const s2 =
    /* istanbul ignore next */
    (cov_ttk08hdfc().s[77]++, str2.toLowerCase().trim());
    /* istanbul ignore next */
    cov_ttk08hdfc().s[78]++;
    if (s1 === s2) {
      /* istanbul ignore next */
      cov_ttk08hdfc().b[39][0]++;
      cov_ttk08hdfc().s[79]++;
      return 1.0;
    } else
    /* istanbul ignore next */
    {
      cov_ttk08hdfc().b[39][1]++;
    }
    cov_ttk08hdfc().s[80]++;
    if (
    /* istanbul ignore next */
    (cov_ttk08hdfc().b[41][0]++, s1.length === 0) ||
    /* istanbul ignore next */
    (cov_ttk08hdfc().b[41][1]++, s2.length === 0)) {
      /* istanbul ignore next */
      cov_ttk08hdfc().b[40][0]++;
      cov_ttk08hdfc().s[81]++;
      return 0.0;
    } else
    /* istanbul ignore next */
    {
      cov_ttk08hdfc().b[40][1]++;
    }
    // Check for substring matches
    cov_ttk08hdfc().s[82]++;
    if (
    /* istanbul ignore next */
    (cov_ttk08hdfc().b[43][0]++, s1.includes(s2)) ||
    /* istanbul ignore next */
    (cov_ttk08hdfc().b[43][1]++, s2.includes(s1))) {
      /* istanbul ignore next */
      cov_ttk08hdfc().b[42][0]++;
      cov_ttk08hdfc().s[83]++;
      return 0.9;
    } else
    /* istanbul ignore next */
    {
      cov_ttk08hdfc().b[42][1]++;
    }
    // Levenshtein distance calculation
    const matrix =
    /* istanbul ignore next */
    (cov_ttk08hdfc().s[84]++, Array(s2.length + 1).fill(null).map(() => {
      /* istanbul ignore next */
      cov_ttk08hdfc().f[8]++;
      cov_ttk08hdfc().s[85]++;
      return Array(s1.length + 1).fill(null);
    }));
    /* istanbul ignore next */
    cov_ttk08hdfc().s[86]++;
    for (let i =
    /* istanbul ignore next */
    (cov_ttk08hdfc().s[87]++, 0); i <= s1.length; i++) {
      /* istanbul ignore next */
      cov_ttk08hdfc().s[88]++;
      matrix[0][i] = i;
    }
    /* istanbul ignore next */
    cov_ttk08hdfc().s[89]++;
    for (let j =
    /* istanbul ignore next */
    (cov_ttk08hdfc().s[90]++, 0); j <= s2.length; j++) {
      /* istanbul ignore next */
      cov_ttk08hdfc().s[91]++;
      matrix[j][0] = j;
    }
    /* istanbul ignore next */
    cov_ttk08hdfc().s[92]++;
    for (let j =
    /* istanbul ignore next */
    (cov_ttk08hdfc().s[93]++, 1); j <= s2.length; j++) {
      /* istanbul ignore next */
      cov_ttk08hdfc().s[94]++;
      for (let i =
      /* istanbul ignore next */
      (cov_ttk08hdfc().s[95]++, 1); i <= s1.length; i++) {
        const indicator =
        /* istanbul ignore next */
        (cov_ttk08hdfc().s[96]++, s1[i - 1] === s2[j - 1] ?
        /* istanbul ignore next */
        (cov_ttk08hdfc().b[44][0]++, 0) :
        /* istanbul ignore next */
        (cov_ttk08hdfc().b[44][1]++, 1));
        /* istanbul ignore next */
        cov_ttk08hdfc().s[97]++;
        matrix[j][i] = Math.min(matrix[j][i - 1] + 1, matrix[j - 1][i] + 1, matrix[j - 1][i - 1] + indicator // substitution
        );
      }
    }
    const distance =
    /* istanbul ignore next */
    (cov_ttk08hdfc().s[98]++, matrix[s2.length][s1.length]);
    const maxLength =
    /* istanbul ignore next */
    (cov_ttk08hdfc().s[99]++, Math.max(s1.length, s2.length));
    /* istanbul ignore next */
    cov_ttk08hdfc().s[100]++;
    return 1 - distance / maxLength;
  }
  /**
  * Clean and normalize field values
  */
  cleanField(value) {
    /* istanbul ignore next */
    cov_ttk08hdfc().f[9]++;
    cov_ttk08hdfc().s[101]++;
    return value.trim().replace(/[""]/g, '"') // Normalize quotes
    .replace(/\s+/g, ' ') // Normalize whitespace
    .replace(/^\(.*\)$/, '') // Remove parentheses around entire value
    .trim();
  }
  /**
  * Create a new plant from CSV data if no good match is found
  */
  async createPlantFromCSV(csvData, userId) {
    /* istanbul ignore next */
    cov_ttk08hdfc().f[10]++;
    const {
      family,
      genus,
      species,
      cultivar,
      commonName
    } =
    /* istanbul ignore next */
    (cov_ttk08hdfc().s[102]++, this.extractPlantFields(csvData));
    // Validate required fields
    /* istanbul ignore next */
    cov_ttk08hdfc().s[103]++;
    if (
    /* istanbul ignore next */
    (cov_ttk08hdfc().b[46][0]++, !family) ||
    /* istanbul ignore next */
    (cov_ttk08hdfc().b[46][1]++, !genus) ||
    /* istanbul ignore next */
    (cov_ttk08hdfc().b[46][2]++, !species) ||
    /* istanbul ignore next */
    (cov_ttk08hdfc().b[46][3]++, !commonName)) {
      /* istanbul ignore next */
      cov_ttk08hdfc().b[45][0]++;
      cov_ttk08hdfc().s[104]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_ttk08hdfc().b[45][1]++;
    }
    cov_ttk08hdfc().s[105]++;
    try {
      const [newPlant] =
      /* istanbul ignore next */
      (cov_ttk08hdfc().s[106]++, await _db.db.insert(_schema.plants).values({
        family,
        genus,
        species,
        cultivar:
        /* istanbul ignore next */
        (cov_ttk08hdfc().b[47][0]++, cultivar) ||
        /* istanbul ignore next */
        (cov_ttk08hdfc().b[47][1]++, null),
        commonName,
        createdBy: userId,
        isVerified: false
      }).returning({
        id: _schema.plants.id
      }));
      /* istanbul ignore next */
      cov_ttk08hdfc().s[107]++;
      return newPlant;
    } catch (error) {
      /* istanbul ignore next */
      cov_ttk08hdfc().s[108]++;
      // Handle duplicate key errors
      if (
      /* istanbul ignore next */
      (cov_ttk08hdfc().b[49][0]++, error instanceof Error) &&
      /* istanbul ignore next */
      (cov_ttk08hdfc().b[49][1]++, error.message.includes('unique'))) {
        /* istanbul ignore next */
        cov_ttk08hdfc().b[48][0]++;
        // Try to find the existing plant
        const existing =
        /* istanbul ignore next */
        (cov_ttk08hdfc().s[109]++, await _db.db.select({
          id: _schema.plants.id
        }).from(_schema.plants).where((0, _drizzleorm.sql)`${_schema.plants.family} = ${family} AND ${_schema.plants.genus} = ${genus} AND ${_schema.plants.species} = ${species} AND ${_schema.plants.cultivar} ${cultivar ?
        /* istanbul ignore next */
        (cov_ttk08hdfc().b[50][0]++, `= ${cultivar}`) :
        /* istanbul ignore next */
        (cov_ttk08hdfc().b[50][1]++, 'IS NULL')}`).limit(1));
        /* istanbul ignore next */
        cov_ttk08hdfc().s[110]++;
        return /* istanbul ignore next */(cov_ttk08hdfc().b[51][0]++, existing[0]) ||
        /* istanbul ignore next */
        (cov_ttk08hdfc().b[51][1]++, null);
      } else
      /* istanbul ignore next */
      {
        cov_ttk08hdfc().b[48][1]++;
      }
      cov_ttk08hdfc().s[111]++;
      throw error;
    }
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,