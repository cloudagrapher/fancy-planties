e48ca457ff898a247e8d9023d94f86ca
/**
 * @jest-environment jsdom
 */ "use strict";
jest.mock('next/navigation', ()=>({
        redirect: mockRedirect
    }));
// Mock auth server functions
jest.mock('@/lib/auth/server', ()=>({
        requireAuthSession: jest.fn()
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _renderhelpers = require("../../../test-utils/helpers/render-helpers.js");
const _AuthGuard = /*#__PURE__*/ _interop_require_default(require("../../../components/auth/AuthGuard"));
const _server = require("../../../lib/auth/server");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Mock Next.js navigation
const mockRedirect = jest.fn();
const mockRequireAuthSession = _server.requireAuthSession;
describe('AuthGuard', ()=>{
    const TestComponent = ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
            "data-testid": "protected-content",
            children: "Protected Content"
        });
    beforeEach(()=>{
        jest.clearAllMocks();
    });
    describe('Authentication Success', ()=>{
        beforeEach(()=>{
            mockRequireAuthSession.mockResolvedValue({
                user: {
                    id: 1,
                    email: 'test@example.com'
                },
                session: {
                    id: 'session-123'
                }
            });
        });
        it('renders children when user is authenticated', async ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthGuard.default, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {})
            }));
            expect(_react1.screen.getByTestId('protected-content')).toBeInTheDocument();
            expect(mockRequireAuthSession).toHaveBeenCalled();
            expect(mockRedirect).not.toHaveBeenCalled();
        });
        it('passes through multiple children', async ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsxs)(_AuthGuard.default, {
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        "data-testid": "child-1",
                        children: "Child 1"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        "data-testid": "child-2",
                        children: "Child 2"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {})
                ]
            }));
            expect(_react1.screen.getByTestId('child-1')).toBeInTheDocument();
            expect(_react1.screen.getByTestId('child-2')).toBeInTheDocument();
            expect(_react1.screen.getByTestId('protected-content')).toBeInTheDocument();
        });
        it('preserves child component props and state', async ()=>{
            const ChildWithProps = ({ title, count })=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    "data-testid": "child-with-props",
                    children: [
                        title,
                        ": ",
                        count
                    ]
                });
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthGuard.default, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(ChildWithProps, {
                    title: "Test",
                    count: 42
                })
            }));
            expect(_react1.screen.getByTestId('child-with-props')).toHaveTextContent('Test: 42');
        });
    });
    describe('Authentication Failure', ()=>{
        beforeEach(()=>{
            mockRequireAuthSession.mockRejectedValue(new Error('Not authenticated'));
        });
        it('redirects to default sign-in page when authentication fails', async ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthGuard.default, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {})
            }));
            expect(mockRequireAuthSession).toHaveBeenCalled();
            expect(mockRedirect).toHaveBeenCalledWith('/auth/signin');
            expect(_react1.screen.queryByTestId('protected-content')).not.toBeInTheDocument();
        });
        it('redirects to custom redirect URL when provided', async ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthGuard.default, {
                redirectTo: "/custom-login",
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {})
            }));
            expect(mockRedirect).toHaveBeenCalledWith('/custom-login');
        });
        it('handles different authentication error types', async ()=>{
            const errorTypes = [
                new Error('Session expired'),
                new Error('Invalid token'),
                new Error('User not found'),
                'String error',
                null,
                undefined
            ];
            for (const error of errorTypes){
                jest.clearAllMocks();
                mockRequireAuthSession.mockRejectedValue(error);
                (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthGuard.default, {
                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {})
                }));
                expect(mockRedirect).toHaveBeenCalledWith('/auth/signin');
            }
        });
    });
    describe('Route Protection Scenarios', ()=>{
        it('protects admin routes', async ()=>{
            mockRequireAuthSession.mockRejectedValue(new Error('Insufficient permissions'));
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthGuard.default, {
                redirectTo: "/auth/signin?redirect=/admin",
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    "data-testid": "admin-panel",
                    children: "Admin Panel"
                })
            }));
            expect(mockRedirect).toHaveBeenCalledWith('/auth/signin?redirect=/admin');
            expect(_react1.screen.queryByTestId('admin-panel')).not.toBeInTheDocument();
        });
        it('protects user dashboard', async ()=>{
            mockRequireAuthSession.mockRejectedValue(new Error('Not authenticated'));
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthGuard.default, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    "data-testid": "user-dashboard",
                    children: "User Dashboard"
                })
            }));
            expect(mockRedirect).toHaveBeenCalledWith('/auth/signin');
            expect(_react1.screen.queryByTestId('user-dashboard')).not.toBeInTheDocument();
        });
        it('protects API-dependent components', async ()=>{
            mockRequireAuthSession.mockRejectedValue(new Error('Token invalid'));
            const ApiComponent = ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    "data-testid": "api-component",
                    children: "Component that requires API access"
                });
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthGuard.default, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(ApiComponent, {})
            }));
            expect(mockRedirect).toHaveBeenCalledWith('/auth/signin');
            expect(_react1.screen.queryByTestId('api-component')).not.toBeInTheDocument();
        });
    });
    describe('Session Validation', ()=>{
        it('validates session on each render', async ()=>{
            mockRequireAuthSession.mockResolvedValue({
                user: {
                    id: 1,
                    email: 'test@example.com'
                },
                session: {
                    id: 'session-123'
                }
            });
            const { rerender } = (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthGuard.default, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {})
            }));
            expect(mockRequireAuthSession).toHaveBeenCalledTimes(1);
            // Re-render should trigger validation again
            rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthGuard.default, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {})
            }));
            expect(mockRequireAuthSession).toHaveBeenCalledTimes(2);
        });
        it('handles session expiration during component lifecycle', async ()=>{
            // Initially authenticated
            mockRequireAuthSession.mockResolvedValue({
                user: {
                    id: 1,
                    email: 'test@example.com'
                },
                session: {
                    id: 'session-123'
                }
            });
            const { rerender } = (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthGuard.default, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {})
            }));
            expect(_react1.screen.getByTestId('protected-content')).toBeInTheDocument();
            // Session expires
            mockRequireAuthSession.mockRejectedValue(new Error('Session expired'));
            rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthGuard.default, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {})
            }));
            expect(mockRedirect).toHaveBeenCalledWith('/auth/signin');
        });
    });
    describe('Error Handling', ()=>{
        it('handles network errors gracefully', async ()=>{
            mockRequireAuthSession.mockRejectedValue(new Error('Network error'));
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthGuard.default, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {})
            }));
            expect(mockRedirect).toHaveBeenCalledWith('/auth/signin');
        });
        it('handles server errors gracefully', async ()=>{
            mockRequireAuthSession.mockRejectedValue(new Error('Internal server error'));
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthGuard.default, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {})
            }));
            expect(mockRedirect).toHaveBeenCalledWith('/auth/signin');
        });
        it('handles malformed responses gracefully', async ()=>{
            mockRequireAuthSession.mockRejectedValue(new Error('Invalid response format'));
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthGuard.default, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {})
            }));
            expect(mockRedirect).toHaveBeenCalledWith('/auth/signin');
        });
    });
    describe('Integration with Authentication Flow', ()=>{
        it('works with sign-in redirect flow', async ()=>{
            mockRequireAuthSession.mockRejectedValue(new Error('Not authenticated'));
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthGuard.default, {
                redirectTo: "/auth/signin?redirect=/dashboard/plants",
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    "data-testid": "plants-page",
                    children: "Plants Page"
                })
            }));
            expect(mockRedirect).toHaveBeenCalledWith('/auth/signin?redirect=/dashboard/plants');
        });
        it('preserves query parameters in redirect', async ()=>{
            mockRequireAuthSession.mockRejectedValue(new Error('Not authenticated'));
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthGuard.default, {
                redirectTo: "/auth/signin?redirect=/dashboard/care&tab=overdue",
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    "data-testid": "care-page",
                    children: "Care Page"
                })
            }));
            expect(mockRedirect).toHaveBeenCalledWith('/auth/signin?redirect=/dashboard/care&tab=overdue');
        });
        it('handles successful authentication after redirect', async ()=>{
            // Simulate successful authentication after redirect
            mockRequireAuthSession.mockResolvedValue({
                user: {
                    id: 1,
                    email: 'test@example.com'
                },
                session: {
                    id: 'session-123'
                }
            });
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthGuard.default, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    "data-testid": "protected-page",
                    children: "Protected Page"
                })
            }));
            expect(_react1.screen.getByTestId('protected-page')).toBeInTheDocument();
            expect(mockRedirect).not.toHaveBeenCalled();
        });
    });
    describe('Performance Considerations', ()=>{
        it('does not cause unnecessary re-renders', async ()=>{
            mockRequireAuthSession.mockResolvedValue({
                user: {
                    id: 1,
                    email: 'test@example.com'
                },
                session: {
                    id: 'session-123'
                }
            });
            let renderCount = 0;
            const CountingComponent = ()=>{
                renderCount++;
                return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    "data-testid": "counting-component",
                    children: [
                        "Render count: ",
                        renderCount
                    ]
                });
            };
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthGuard.default, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(CountingComponent, {})
            }));
            expect(_react1.screen.getByTestId('counting-component')).toHaveTextContent('Render count: 1');
        });
        it('handles rapid authentication state changes', async ()=>{
            // Simulate rapid state changes
            mockRequireAuthSession.mockResolvedValueOnce({
                user: {
                    id: 1,
                    email: 'test@example.com'
                },
                session: {
                    id: 'session-123'
                }
            }).mockRejectedValueOnce(new Error('Session expired')).mockResolvedValueOnce({
                user: {
                    id: 1,
                    email: 'test@example.com'
                },
                session: {
                    id: 'session-456'
                }
            });
            const { rerender } = (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthGuard.default, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {})
            }));
            // First render - authenticated
            expect(_react1.screen.getByTestId('protected-content')).toBeInTheDocument();
            // Second render - session expired
            rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthGuard.default, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {})
            }));
            expect(mockRedirect).toHaveBeenCalledWith('/auth/signin');
            // Third render - re-authenticated
            jest.clearAllMocks();
            rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthGuard.default, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {})
            }));
            expect(_react1.screen.getByTestId('protected-content')).toBeInTheDocument();
        });
    });
    describe('Component Composition', ()=>{
        it('works with nested components', async ()=>{
            mockRequireAuthSession.mockResolvedValue({
                user: {
                    id: 1,
                    email: 'test@example.com'
                },
                session: {
                    id: 'session-123'
                }
            });
            const NestedComponent = ({ children })=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    "data-testid": "nested-wrapper",
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("header", {
                            children: "Header"
                        }),
                        children,
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("footer", {
                            children: "Footer"
                        })
                    ]
                });
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthGuard.default, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(NestedComponent, {
                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {})
                })
            }));
            expect(_react1.screen.getByTestId('nested-wrapper')).toBeInTheDocument();
            expect(_react1.screen.getByTestId('protected-content')).toBeInTheDocument();
            expect(_react1.screen.getByText('Header')).toBeInTheDocument();
            expect(_react1.screen.getByText('Footer')).toBeInTheDocument();
        });
        it('works with conditional rendering', async ()=>{
            mockRequireAuthSession.mockResolvedValue({
                user: {
                    id: 1,
                    email: 'test@example.com'
                },
                session: {
                    id: 'session-123'
                }
            });
            const ConditionalComponent = ({ showContent })=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    children: [
                        showContent && /*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {}),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            "data-testid": "always-visible",
                            children: "Always visible"
                        })
                    ]
                });
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthGuard.default, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(ConditionalComponent, {
                    showContent: true
                })
            }));
            expect(_react1.screen.getByTestId('protected-content')).toBeInTheDocument();
            expect(_react1.screen.getByTestId('always-visible')).toBeInTheDocument();
        });
        it('works with React fragments', async ()=>{
            mockRequireAuthSession.mockResolvedValue({
                user: {
                    id: 1,
                    email: 'test@example.com'
                },
                session: {
                    id: 'session-123'
                }
            });
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthGuard.default, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_jsxruntime.Fragment, {
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            "data-testid": "fragment-child-1",
                            children: "Fragment Child 1"
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {}),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            "data-testid": "fragment-child-2",
                            children: "Fragment Child 2"
                        })
                    ]
                })
            }));
            expect(_react1.screen.getByTestId('fragment-child-1')).toBeInTheDocument();
            expect(_react1.screen.getByTestId('protected-content')).toBeInTheDocument();
            expect(_react1.screen.getByTestId('fragment-child-2')).toBeInTheDocument();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,