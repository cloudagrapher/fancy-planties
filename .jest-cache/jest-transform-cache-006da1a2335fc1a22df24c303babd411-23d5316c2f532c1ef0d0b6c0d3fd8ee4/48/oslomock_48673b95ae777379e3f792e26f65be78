ad6935b8e3551b7f095b79928c4b1dc8
// Mock for oslo package to handle ES module issues in Jest
// This provides mock implementations for crypto functions used in tests
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get ECDSA () {
        return ECDSA;
    },
    get crypto () {
        return crypto;
    },
    get decodeBase32 () {
        return decodeBase32;
    },
    get decodeHex () {
        return decodeHex;
    },
    get // Export all functions as default for different import patterns
    default () {
        return _default;
    },
    get encodeBase32 () {
        return encodeBase32;
    },
    get encodeHex () {
        return encodeHex;
    },
    get generateId () {
        return generateId;
    },
    get generateRandomString () {
        return generateRandomString;
    },
    get password () {
        return password;
    }
});
const generateRandomString = (length, alphabet)=>{
    return 'mock-random-string-' + length;
};
const generateId = (length)=>{
    return 'mock-id-' + (length || 15);
};
const encodeBase32 = (data)=>{
    return 'MOCK' + Buffer.from(data).toString('base64').replace(/=/g, '');
};
const decodeBase32 = (encoded)=>{
    const base64 = encoded.replace('MOCK', '') + '==';
    return Buffer.from(base64, 'base64');
};
const encodeHex = (data)=>{
    return Buffer.from(data).toString('hex');
};
const decodeHex = (encoded)=>{
    return Buffer.from(encoded, 'hex');
};
const _default = {
    generateRandomString,
    generateId,
    encodeBase32,
    decodeBase32,
    encodeHex,
    decodeHex
};
const crypto = {
    generateRandomString,
    generateId
};
const password = {
    hash: async (password)=>'mock-hash-' + password,
    verify: async (hash, password)=>hash === 'mock-hash-' + password
};
const ECDSA = {
    sign: ()=>'mock-signature',
    verify: ()=>true
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9zdGVmYW5iZWtrZXIvcHJvamVjdHMvZmFuY3ktcGxhbnRpZXMvc3JjL3Rlc3QtdXRpbHMvbW9ja3Mvb3Nsby1tb2NrLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIE1vY2sgZm9yIG9zbG8gcGFja2FnZSB0byBoYW5kbGUgRVMgbW9kdWxlIGlzc3VlcyBpbiBKZXN0XG4vLyBUaGlzIHByb3ZpZGVzIG1vY2sgaW1wbGVtZW50YXRpb25zIGZvciBjcnlwdG8gZnVuY3Rpb25zIHVzZWQgaW4gdGVzdHNcblxuZXhwb3J0IGNvbnN0IGdlbmVyYXRlUmFuZG9tU3RyaW5nID0gKGxlbmd0aCwgYWxwaGFiZXQpID0+IHtcbiAgcmV0dXJuICdtb2NrLXJhbmRvbS1zdHJpbmctJyArIGxlbmd0aDtcbn07XG5cbmV4cG9ydCBjb25zdCBnZW5lcmF0ZUlkID0gKGxlbmd0aCkgPT4ge1xuICByZXR1cm4gJ21vY2staWQtJyArIChsZW5ndGggfHwgMTUpO1xufTtcblxuZXhwb3J0IGNvbnN0IGVuY29kZUJhc2UzMiA9IChkYXRhKSA9PiB7XG4gIHJldHVybiAnTU9DSycgKyBCdWZmZXIuZnJvbShkYXRhKS50b1N0cmluZygnYmFzZTY0JykucmVwbGFjZSgvPS9nLCAnJyk7XG59O1xuXG5leHBvcnQgY29uc3QgZGVjb2RlQmFzZTMyID0gKGVuY29kZWQpID0+IHtcbiAgY29uc3QgYmFzZTY0ID0gZW5jb2RlZC5yZXBsYWNlKCdNT0NLJywgJycpICsgJz09JztcbiAgcmV0dXJuIEJ1ZmZlci5mcm9tKGJhc2U2NCwgJ2Jhc2U2NCcpO1xufTtcblxuZXhwb3J0IGNvbnN0IGVuY29kZUhleCA9IChkYXRhKSA9PiB7XG4gIHJldHVybiBCdWZmZXIuZnJvbShkYXRhKS50b1N0cmluZygnaGV4Jyk7XG59O1xuXG5leHBvcnQgY29uc3QgZGVjb2RlSGV4ID0gKGVuY29kZWQpID0+IHtcbiAgcmV0dXJuIEJ1ZmZlci5mcm9tKGVuY29kZWQsICdoZXgnKTtcbn07XG5cbi8vIEV4cG9ydCBhbGwgZnVuY3Rpb25zIGFzIGRlZmF1bHQgZm9yIGRpZmZlcmVudCBpbXBvcnQgcGF0dGVybnNcbmV4cG9ydCBkZWZhdWx0IHtcbiAgZ2VuZXJhdGVSYW5kb21TdHJpbmcsXG4gIGdlbmVyYXRlSWQsXG4gIGVuY29kZUJhc2UzMixcbiAgZGVjb2RlQmFzZTMyLFxuICBlbmNvZGVIZXgsXG4gIGRlY29kZUhleFxufTtcblxuLy8gSGFuZGxlIGNyeXB0byBtb2R1bGUgZXhwb3J0c1xuZXhwb3J0IGNvbnN0IGNyeXB0byA9IHtcbiAgZ2VuZXJhdGVSYW5kb21TdHJpbmcsXG4gIGdlbmVyYXRlSWRcbn07XG5cbi8vIEhhbmRsZSBwYXNzd29yZCBtb2R1bGUgZXhwb3J0cyBcbmV4cG9ydCBjb25zdCBwYXNzd29yZCA9IHtcbiAgaGFzaDogYXN5bmMgKHBhc3N3b3JkKSA9PiAnbW9jay1oYXNoLScgKyBwYXNzd29yZCxcbiAgdmVyaWZ5OiBhc3luYyAoaGFzaCwgcGFzc3dvcmQpID0+IGhhc2ggPT09ICdtb2NrLWhhc2gtJyArIHBhc3N3b3JkXG59O1xuXG4vLyBNb2NrIEVDRFNBIGlmIG5lZWRlZFxuZXhwb3J0IGNvbnN0IEVDRFNBID0ge1xuICBzaWduOiAoKSA9PiAnbW9jay1zaWduYXR1cmUnLFxuICB2ZXJpZnk6ICgpID0+IHRydWVcbn07Il0sIm5hbWVzIjpbIkVDRFNBIiwiY3J5cHRvIiwiZGVjb2RlQmFzZTMyIiwiZGVjb2RlSGV4IiwiZW5jb2RlQmFzZTMyIiwiZW5jb2RlSGV4IiwiZ2VuZXJhdGVJZCIsImdlbmVyYXRlUmFuZG9tU3RyaW5nIiwicGFzc3dvcmQiLCJsZW5ndGgiLCJhbHBoYWJldCIsImRhdGEiLCJCdWZmZXIiLCJmcm9tIiwidG9TdHJpbmciLCJyZXBsYWNlIiwiZW5jb2RlZCIsImJhc2U2NCIsImhhc2giLCJ2ZXJpZnkiLCJzaWduIl0sIm1hcHBpbmdzIjoiQUFBQSwyREFBMkQ7QUFDM0Qsd0VBQXdFOzs7Ozs7Ozs7Ozs7UUFrRDNEQTtlQUFBQTs7UUFaQUM7ZUFBQUE7O1FBeEJBQztlQUFBQTs7UUFTQUM7ZUFBQUE7O1FBSWIsZ0VBQWdFO0lBQ2hFO2VBQUE7O1FBbEJhQztlQUFBQTs7UUFTQUM7ZUFBQUE7O1FBYkFDO2VBQUFBOztRQUpBQztlQUFBQTs7UUEwQ0FDO2VBQUFBOzs7QUExQ04sTUFBTUQsdUJBQXVCLENBQUNFLFFBQVFDO0lBQzNDLE9BQU8sd0JBQXdCRDtBQUNqQztBQUVPLE1BQU1ILGFBQWEsQ0FBQ0c7SUFDekIsT0FBTyxhQUFjQSxDQUFBQSxVQUFVLEVBQUM7QUFDbEM7QUFFTyxNQUFNTCxlQUFlLENBQUNPO0lBQzNCLE9BQU8sU0FBU0MsT0FBT0MsSUFBSSxDQUFDRixNQUFNRyxRQUFRLENBQUMsVUFBVUMsT0FBTyxDQUFDLE1BQU07QUFDckU7QUFFTyxNQUFNYixlQUFlLENBQUNjO0lBQzNCLE1BQU1DLFNBQVNELFFBQVFELE9BQU8sQ0FBQyxRQUFRLE1BQU07SUFDN0MsT0FBT0gsT0FBT0MsSUFBSSxDQUFDSSxRQUFRO0FBQzdCO0FBRU8sTUFBTVosWUFBWSxDQUFDTTtJQUN4QixPQUFPQyxPQUFPQyxJQUFJLENBQUNGLE1BQU1HLFFBQVEsQ0FBQztBQUNwQztBQUVPLE1BQU1YLFlBQVksQ0FBQ2E7SUFDeEIsT0FBT0osT0FBT0MsSUFBSSxDQUFDRyxTQUFTO0FBQzlCO01BR0EsV0FBZTtJQUNiVDtJQUNBRDtJQUNBRjtJQUNBRjtJQUNBRztJQUNBRjtBQUNGO0FBR08sTUFBTUYsU0FBUztJQUNwQk07SUFDQUQ7QUFDRjtBQUdPLE1BQU1FLFdBQVc7SUFDdEJVLE1BQU0sT0FBT1YsV0FBYSxlQUFlQTtJQUN6Q1csUUFBUSxPQUFPRCxNQUFNVixXQUFhVSxTQUFTLGVBQWVWO0FBQzVEO0FBR08sTUFBTVIsUUFBUTtJQUNuQm9CLE1BQU0sSUFBTTtJQUNaRCxRQUFRLElBQU07QUFDaEIifQ==