{"version":3,"sources":["/Users/stefanbekker/projects/fancy-planties/src/test-utils/setup/database-test-manager.js"],"sourcesContent":["import 'server-only';\n\nimport { db } from '../../lib/db';\nimport { users, sessions, emailVerificationCodes, plants, plantInstances, propagations, careHistory } from '../../lib/db/schema';\nimport { eq } from 'drizzle-orm';\n\n/**\n * Database Test Manager\n * Provides isolated database operations for testing with proper cleanup\n */\nclass DatabaseTestManager {\n  constructor() {\n    this.createdUsers = [];\n    this.createdSessions = [];\n    this.createdEmailCodes = [];\n    this.createdPlants = [];\n    this.createdPlantInstances = [];\n    this.createdPropagations = [];\n    this.createdCareHistory = [];\n  }\n\n  /**\n   * Create a test user in the database\n   * @param {Object} userData - User data to insert\n   * @returns {Promise<Object>} Created user\n   */\n  async createTestUser(userData) {\n    const [user] = await db.insert(users).values(userData).returning();\n    this.createdUsers.push(user.id);\n    return user;\n  }\n\n  /**\n   * Create a test session in the database\n   * @param {Object} sessionData - Session data to insert\n   * @returns {Promise<Object>} Created session\n   */\n  async createTestSession(sessionData) {\n    const [session] = await db.insert(sessions).values(sessionData).returning();\n    this.createdSessions.push(session.id);\n    return session;\n  }\n\n  /**\n   * Create a test email verification code in the database\n   * @param {Object} codeData - Email verification code data to insert\n   * @returns {Promise<Object>} Created email verification code\n   */\n  async createTestEmailCode(codeData) {\n    const [code] = await db.insert(emailVerificationCodes).values(codeData).returning();\n    this.createdEmailCodes.push(code.id);\n    return code;\n  }\n\n  /**\n   * Create a test plant in the database\n   * @param {Object} plantData - Plant data to insert\n   * @returns {Promise<Object>} Created plant\n   */\n  async createTestPlant(plantData) {\n    const [plant] = await db.insert(plants).values(plantData).returning();\n    this.createdPlants.push(plant.id);\n    return plant;\n  }\n\n  /**\n   * Create a test plant instance in the database\n   * @param {Object} instanceData - Plant instance data to insert\n   * @returns {Promise<Object>} Created plant instance\n   */\n  async createTestPlantInstance(instanceData) {\n    const [instance] = await db.insert(plantInstances).values(instanceData).returning();\n    this.createdPlantInstances.push(instance.id);\n    return instance;\n  }\n\n  /**\n   * Create a test propagation in the database\n   * @param {Object} propagationData - Propagation data to insert\n   * @returns {Promise<Object>} Created propagation\n   */\n  async createTestPropagation(propagationData) {\n    const [propagation] = await db.insert(propagations).values(propagationData).returning();\n    this.createdPropagations.push(propagation.id);\n    return propagation;\n  }\n\n  /**\n   * Create a test care history record in the database\n   * @param {Object} careData - Care history data to insert\n   * @returns {Promise<Object>} Created care history record\n   */\n  async createTestCareHistory(careData) {\n    const [care] = await db.insert(careHistory).values(careData).returning();\n    this.createdCareHistory.push(care.id);\n    return care;\n  }\n\n  /**\n   * Get a user by ID from the database\n   * @param {number} userId - User ID to retrieve\n   * @returns {Promise<Object|null>} User or null if not found\n   */\n  async getUserById(userId) {\n    const [user] = await db.select().from(users).where(eq(users.id, userId));\n    return user || null;\n  }\n\n  /**\n   * Get a user by email from the database\n   * @param {string} email - Email to search for\n   * @returns {Promise<Object|null>} User or null if not found\n   */\n  async getUserByEmail(email) {\n    const [user] = await db.select().from(users).where(eq(users.email, email.toLowerCase()));\n    return user || null;\n  }\n\n  /**\n   * Get a session by ID from the database\n   * @param {string} sessionId - Session ID to retrieve\n   * @returns {Promise<Object|null>} Session or null if not found\n   */\n  async getSessionById(sessionId) {\n    const [session] = await db.select().from(sessions).where(eq(sessions.id, sessionId));\n    return session || null;\n  }\n\n  /**\n   * Get sessions for a user from the database\n   * @param {number} userId - User ID to get sessions for\n   * @returns {Promise<Array>} Array of sessions\n   */\n  async getSessionsByUserId(userId) {\n    return await db.select().from(sessions).where(eq(sessions.userId, userId));\n  }\n\n  /**\n   * Get email verification codes for a user\n   * @param {number} userId - User ID to get codes for\n   * @returns {Promise<Array>} Array of email verification codes\n   */\n  async getEmailCodesByUserId(userId) {\n    return await db.select().from(emailVerificationCodes).where(eq(emailVerificationCodes.userId, userId));\n  }\n\n  /**\n   * Update a user in the database\n   * @param {number} userId - User ID to update\n   * @param {Object} updates - Updates to apply\n   * @returns {Promise<Object>} Updated user\n   */\n  async updateUser(userId, updates) {\n    const [user] = await db.update(users)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(users.id, userId))\n      .returning();\n    return user;\n  }\n\n  /**\n   * Delete a user from the database\n   * @param {number} userId - User ID to delete\n   * @returns {Promise<void>}\n   */\n  async deleteUser(userId) {\n    await db.delete(users).where(eq(users.id, userId));\n    // Remove from tracking\n    this.createdUsers = this.createdUsers.filter(id => id !== userId);\n  }\n\n  /**\n   * Delete a session from the database\n   * @param {string} sessionId - Session ID to delete\n   * @returns {Promise<void>}\n   */\n  async deleteSession(sessionId) {\n    await db.delete(sessions).where(eq(sessions.id, sessionId));\n    // Remove from tracking\n    this.createdSessions = this.createdSessions.filter(id => id !== sessionId);\n  }\n\n  /**\n   * Delete an email verification code from the database\n   * @param {number} codeId - Code ID to delete\n   * @returns {Promise<void>}\n   */\n  async deleteEmailCode(codeId) {\n    await db.delete(emailVerificationCodes).where(eq(emailVerificationCodes.id, codeId));\n    // Remove from tracking\n    this.createdEmailCodes = this.createdEmailCodes.filter(id => id !== codeId);\n  }\n\n  /**\n   * Clean up all test data created by this manager\n   * @returns {Promise<void>}\n   */\n  async cleanup() {\n    try {\n      // Clean up in reverse order of dependencies to respect foreign key constraints\n      \n      // 1. Care history (references plant instances and users)\n      for (const careId of this.createdCareHistory) {\n        await db.delete(careHistory).where(eq(careHistory.id, careId));\n      }\n\n      // 2. Propagations (references plant instances, plants, and users)\n      for (const propagationId of this.createdPropagations) {\n        await db.delete(propagations).where(eq(propagations.id, propagationId));\n      }\n\n      // 3. Plant instances (references plants and users)\n      for (const instanceId of this.createdPlantInstances) {\n        await db.delete(plantInstances).where(eq(plantInstances.id, instanceId));\n      }\n\n      // 4. Plants (references users)\n      for (const plantId of this.createdPlants) {\n        await db.delete(plants).where(eq(plants.id, plantId));\n      }\n\n      // 5. Email verification codes (references users)\n      for (const codeId of this.createdEmailCodes) {\n        await db.delete(emailVerificationCodes).where(eq(emailVerificationCodes.id, codeId));\n      }\n\n      // 6. Sessions (references users)\n      for (const sessionId of this.createdSessions) {\n        await db.delete(sessions).where(eq(sessions.id, sessionId));\n      }\n\n      // 7. Users (no dependencies)\n      for (const userId of this.createdUsers) {\n        await db.delete(users).where(eq(users.id, userId));\n      }\n\n      // Reset tracking arrays\n      this.createdUsers = [];\n      this.createdSessions = [];\n      this.createdEmailCodes = [];\n      this.createdPlants = [];\n      this.createdPlantInstances = [];\n      this.createdPropagations = [];\n      this.createdCareHistory = [];\n    } catch (error) {\n      console.error('Database cleanup error:', error);\n      // Reset tracking arrays even if cleanup fails\n      this.createdUsers = [];\n      this.createdSessions = [];\n      this.createdEmailCodes = [];\n      this.createdPlants = [];\n      this.createdPlantInstances = [];\n      this.createdPropagations = [];\n      this.createdCareHistory = [];\n    }\n  }\n\n  /**\n   * Check if the database connection is working\n   * @returns {Promise<boolean>} True if connection is working\n   */\n  async isConnected() {\n    try {\n      // Simple query to test connection\n      await db.select().from(users).limit(1);\n      return true;\n    } catch (error) {\n      console.error('Database connection test failed:', error);\n      return false;\n    }\n  }\n}\n\n/**\n * Create a new database test manager instance\n * @returns {DatabaseTestManager} New database test manager\n */\nexport const createDatabaseTestManager = () => {\n  return new DatabaseTestManager();\n};\n\n/**\n * Global database test manager for shared use\n */\nexport const globalDatabaseTestManager = new DatabaseTestManager();\n\nexport default DatabaseTestManager;"],"names":["createDatabaseTestManager","globalDatabaseTestManager","DatabaseTestManager","createdUsers","createdSessions","createdEmailCodes","createdPlants","createdPlantInstances","createdPropagations","createdCareHistory","createTestUser","userData","user","db","insert","users","values","returning","push","id","createTestSession","sessionData","session","sessions","createTestEmailCode","codeData","code","emailVerificationCodes","createTestPlant","plantData","plant","plants","createTestPlantInstance","instanceData","instance","plantInstances","createTestPropagation","propagationData","propagation","propagations","createTestCareHistory","careData","care","careHistory","getUserById","userId","select","from","where","eq","getUserByEmail","email","toLowerCase","getSessionById","sessionId","getSessionsByUserId","getEmailCodesByUserId","updateUser","updates","update","set","updatedAt","Date","deleteUser","delete","filter","deleteSession","deleteEmailCode","codeId","cleanup","careId","propagationId","instanceId","plantId","error","console","isConnected","limit"],"mappings":"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"}