de78114e3138c3fbc3eca9647decc34d
/**
 * Test Performance Monitor
 * 
 * Provides utilities for monitoring and optimizing test execution performance.
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get PERFORMANCE_THRESHOLDS () {
        return PERFORMANCE_THRESHOLDS;
    },
    get assertPerformance () {
        return assertPerformance;
    },
    get measureAsyncOperation () {
        return measureAsyncOperation;
    },
    get testPerformanceMonitor () {
        return testPerformanceMonitor;
    },
    get withPerformanceMonitoring () {
        return withPerformanceMonitoring;
    }
});
class TestPerformanceMonitor {
    /**
   * Start monitoring a test suite
   */ startSuite(suiteName) {
        this.suiteStartTime = performance.now();
        console.log(`üìä Starting performance monitoring for suite: ${suiteName}`);
    }
    /**
   * Start monitoring an individual test
   */ startTest(testName) {
        this.currentTestName = testName;
        this.testStartTime = performance.now();
    }
    /**
   * End monitoring an individual test
   */ endTest(status = 'passed') {
        const duration = performance.now() - this.testStartTime;
        const memoryUsage = process.memoryUsage();
        const metric = {
            testName: this.currentTestName,
            duration,
            memoryUsage,
            timestamp: new Date(),
            status
        };
        this.metrics.push(metric);
        // Log slow tests (> 1 second)
        if (duration > 1000) {
            console.warn(`‚ö†Ô∏è  Slow test detected: ${this.currentTestName} (${duration.toFixed(2)}ms)`);
        }
    }
    /**
   * End monitoring a test suite and generate report
   */ endSuite(suiteName) {
        const totalDuration = performance.now() - this.suiteStartTime;
        const suiteMetrics = this.generateSuiteMetrics(suiteName, totalDuration);
        this.logSuiteReport(suiteMetrics);
        this.reset();
        return suiteMetrics;
    }
    /**
   * Generate performance metrics for a test suite
   */ generateSuiteMetrics(suiteName, totalDuration) {
        const testMetrics = this.metrics.filter((m)=>m.status !== 'skipped');
        const slowestTest = testMetrics.reduce((slowest, current)=>!slowest || current.duration > slowest.duration ? current : slowest, null);
        const fastestTest = testMetrics.reduce((fastest, current)=>!fastest || current.duration < fastest.duration ? current : fastest, null);
        const memoryPeak = Math.max(...this.metrics.map((m)=>m.memoryUsage.heapUsed));
        const averageDuration = testMetrics.length > 0 ? testMetrics.reduce((sum, m)=>sum + m.duration, 0) / testMetrics.length : 0;
        return {
            suiteName,
            totalTests: this.metrics.length,
            totalDuration,
            averageDuration,
            slowestTest,
            fastestTest,
            memoryPeak
        };
    }
    /**
   * Log performance report for a test suite
   */ logSuiteReport(metrics) {
        console.log('\nüìà Test Performance Report');
        console.log('‚ïê'.repeat(50));
        console.log(`Suite: ${metrics.suiteName}`);
        console.log(`Total Tests: ${metrics.totalTests}`);
        console.log(`Total Duration: ${metrics.totalDuration.toFixed(2)}ms`);
        console.log(`Average Test Duration: ${metrics.averageDuration.toFixed(2)}ms`);
        if (metrics.slowestTest) {
            console.log(`Slowest Test: ${metrics.slowestTest.testName} (${metrics.slowestTest.duration.toFixed(2)}ms)`);
        }
        if (metrics.fastestTest) {
            console.log(`Fastest Test: ${metrics.fastestTest.testName} (${metrics.fastestTest.duration.toFixed(2)}ms)`);
        }
        console.log(`Peak Memory Usage: ${(metrics.memoryPeak / 1024 / 1024).toFixed(2)}MB`);
        console.log('‚ïê'.repeat(50));
    }
    /**
   * Reset metrics for next suite
   */ reset() {
        this.metrics = [];
        this.suiteStartTime = 0;
        this.testStartTime = 0;
        this.currentTestName = '';
    }
    /**
   * Get current metrics
   */ getMetrics() {
        return [
            ...this.metrics
        ];
    }
    constructor(){
        this.metrics = [];
        this.suiteStartTime = 0;
        this.testStartTime = 0;
        this.currentTestName = '';
    }
}
const testPerformanceMonitor = new TestPerformanceMonitor();
function withPerformanceMonitoring(suiteName) {
    beforeAll(()=>{
        testPerformanceMonitor.startSuite(suiteName);
    });
    beforeEach(()=>{
        const testName = expect.getState().currentTestName || 'unknown';
        testPerformanceMonitor.startTest(testName);
    });
    afterEach(()=>{
        const testState = expect.getState();
        const status = testState.assertionCalls > 0 ? 'passed' : 'skipped';
        testPerformanceMonitor.endTest(status);
    });
    afterAll(()=>{
        testPerformanceMonitor.endSuite(suiteName);
    });
}
async function measureAsyncOperation(operation, operationName) {
    const startMemory = process.memoryUsage().heapUsed;
    const startTime = performance.now();
    const result = await operation();
    const endTime = performance.now();
    const endMemory = process.memoryUsage().heapUsed;
    const duration = endTime - startTime;
    const memoryDelta = endMemory - startMemory;
    console.log(`‚è±Ô∏è  ${operationName}: ${duration.toFixed(2)}ms, Memory: ${(memoryDelta / 1024).toFixed(2)}KB`);
    return {
        result,
        duration,
        memoryDelta
    };
}
const PERFORMANCE_THRESHOLDS = {
    UNIT_TEST_MAX_DURATION: 100,
    INTEGRATION_TEST_MAX_DURATION: 1000,
    API_TEST_MAX_DURATION: 2000,
    DATABASE_TEST_MAX_DURATION: 3000,
    MAX_MEMORY_USAGE_MB: 100
};
function assertPerformance(duration, memoryUsage, testType) {
    const maxDuration = PERFORMANCE_THRESHOLDS[testType] || PERFORMANCE_THRESHOLDS.UNIT_TEST_MAX_DURATION;
    const maxMemoryMB = PERFORMANCE_THRESHOLDS.MAX_MEMORY_USAGE_MB;
    if (duration > maxDuration) {
        console.warn(`‚ö†Ô∏è  Performance warning: Test exceeded ${maxDuration}ms threshold (${duration.toFixed(2)}ms)`);
    }
    const memoryMB = memoryUsage / 1024 / 1024;
    if (memoryMB > maxMemoryMB) {
        console.warn(`‚ö†Ô∏è  Memory warning: Test exceeded ${maxMemoryMB}MB threshold (${memoryMB.toFixed(2)}MB)`);
    }
}

//# sourceMappingURL=data:application/json;base64,