{"version":3,"names":["generateCSRFToken","cov_1wuefq0aln","f","s","rateLimit","requireAuth","validateCSRFToken","withAuth","withAuthAndRateLimit","withCSRFProtection","withRateLimit","rateLimitStore","Map","RATE_LIMIT_WINDOW","RATE_LIMIT_MAX_REQUESTS","crypto","randomUUID","token","sessionToken","identifier","now","Date","key","value","entries","resetTime","b","delete","current","get","set","count","success","remaining","request","handler","user","session","_server1","validateRequest","_server","NextResponse","json","error","status","console","headers","rateLimitResult","toString","response","req","method","csrfToken","sessionCookie","cookies"],"sources":["/Users/stefanbekker/projects/fancy-planties/src/lib/auth/middleware.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { validateRequest } from './server';\nimport type { User } from '../db/schema';\n\n// Rate limiting store (in production, use Redis or similar)\nconst rateLimitStore = new Map<string, { count: number; resetTime: number }>();\n\n// Rate limiting configuration\nconst RATE_LIMIT_WINDOW = 15 * 60 * 1000; // 15 minutes\nconst RATE_LIMIT_MAX_REQUESTS = 100; // Max requests per window\n\n// CSRF token generation and validation\nexport function generateCSRFToken(): string {\n  return crypto.randomUUID();\n}\n\nexport function validateCSRFToken(token: string, sessionToken: string): boolean {\n  // Simple CSRF validation - in production, use more sophisticated approach\n  return token === sessionToken;\n}\n\n// Rate limiting middleware\nexport function rateLimit(identifier: string): { success: boolean; remaining: number; resetTime: number } {\n  const now = Date.now();\n  \n  // Clean up old entries\n  for (const [key, value] of rateLimitStore.entries()) {\n    if (value.resetTime < now) {\n      rateLimitStore.delete(key);\n    }\n  }\n  \n  const current = rateLimitStore.get(identifier);\n  \n  if (!current || current.resetTime < now) {\n    // New window or expired window\n    const resetTime = now + RATE_LIMIT_WINDOW;\n    rateLimitStore.set(identifier, { count: 1, resetTime });\n    return {\n      success: true,\n      remaining: RATE_LIMIT_MAX_REQUESTS - 1,\n      resetTime,\n    };\n  }\n  \n  if (current.count >= RATE_LIMIT_MAX_REQUESTS) {\n    return {\n      success: false,\n      remaining: 0,\n      resetTime: current.resetTime,\n    };\n  }\n  \n  current.count++;\n  rateLimitStore.set(identifier, current);\n  \n  return {\n    success: true,\n    remaining: RATE_LIMIT_MAX_REQUESTS - current.count,\n    resetTime: current.resetTime,\n  };\n}\n\n// Authentication middleware for API routes\nexport async function withAuth(\n  request: NextRequest,\n  handler: (request: NextRequest, user: User) => Promise<NextResponse>\n): Promise<NextResponse> {\n  try {\n    const { user, session } = await validateRequest();\n    \n    if (!user || !session) {\n      return NextResponse.json(\n        { error: 'Unauthorized' },\n        { status: 401 }\n      );\n    }\n    \n    return await handler(request, user);\n  } catch (error) {\n    console.error('Auth middleware error:', error);\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    );\n  }\n}\n\n// Rate limiting middleware for API routes\nexport async function withRateLimit(\n  request: NextRequest,\n  handler: (request: NextRequest) => Promise<NextResponse>\n): Promise<NextResponse> {\n  try {\n    // Use IP address for rate limiting (in production, consider user ID for authenticated requests)\n    const identifier = request.headers.get('x-forwarded-for') || \n                      request.headers.get('x-real-ip') || \n                      'unknown';\n    \n    const rateLimitResult = rateLimit(identifier);\n    \n    if (!rateLimitResult.success) {\n      return NextResponse.json(\n        { \n          error: 'Too many requests',\n          resetTime: rateLimitResult.resetTime,\n        },\n        { \n          status: 429,\n          headers: {\n            'X-RateLimit-Limit': RATE_LIMIT_MAX_REQUESTS.toString(),\n            'X-RateLimit-Remaining': rateLimitResult.remaining.toString(),\n            'X-RateLimit-Reset': rateLimitResult.resetTime.toString(),\n          },\n        }\n      );\n    }\n    \n    const response = await handler(request);\n    \n    // Add rate limit headers to successful responses\n    response.headers.set('X-RateLimit-Limit', RATE_LIMIT_MAX_REQUESTS.toString());\n    response.headers.set('X-RateLimit-Remaining', rateLimitResult.remaining.toString());\n    response.headers.set('X-RateLimit-Reset', rateLimitResult.resetTime.toString());\n    \n    return response;\n  } catch (error) {\n    console.error('Rate limit middleware error:', error);\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    );\n  }\n}\n\n// Combined middleware for authenticated and rate-limited routes\nexport async function withAuthAndRateLimit(\n  request: NextRequest,\n  handler: (request: NextRequest, user: User) => Promise<NextResponse>\n): Promise<NextResponse> {\n  return withRateLimit(request, async (req) => {\n    return withAuth(req, handler);\n  });\n}\n\n// CSRF protection middleware\nexport async function withCSRFProtection(\n  request: NextRequest,\n  handler: (request: NextRequest) => Promise<NextResponse>\n): Promise<NextResponse> {\n  try {\n    // Skip CSRF for GET requests\n    if (request.method === 'GET') {\n      return await handler(request);\n    }\n    \n    const csrfToken = request.headers.get('x-csrf-token');\n    const sessionCookie = request.cookies.get('auth-session');\n    \n    if (!csrfToken || !sessionCookie) {\n      return NextResponse.json(\n        { error: 'CSRF token missing' },\n        { status: 403 }\n      );\n    }\n    \n    // In a real implementation, you'd validate the CSRF token properly\n    // For now, we'll just check that it exists\n    if (!validateCSRFToken(csrfToken, sessionCookie.value)) {\n      return NextResponse.json(\n        { error: 'Invalid CSRF token' },\n        { status: 403 }\n      );\n    }\n    \n    return await handler(request);\n  } catch (error) {\n    console.error('CSRF middleware error:', error);\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    );\n  }\n}\n\n// Route protection helper for pages\nexport async function requireAuth(): Promise<{ user: User; session: { id: string; userId: number; expiresAt: Date } } | null> {\n  const { user, session } = await validateRequest();\n  \n  if (!user || !session) {\n    return null;\n  }\n  \n  return { user, session };\n}"],"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","ignoreList":[]}