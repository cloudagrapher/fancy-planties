0687227bf141266d55e02083d6586857
/**
 * @jest-environment jsdom
 */ "use strict";
jest.mock('next/navigation', ()=>({
        usePathname: ()=>mockPathname()
    }));
jest.mock('@/hooks/useHapticFeedback', ()=>({
        useHapticFeedback: ()=>({
                triggerHaptic: mockTriggerHaptic
            })
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _userevent = /*#__PURE__*/ _interop_require_default(require("@testing-library/user-event"));
const _renderhelpers = require("../../../test-utils/helpers/render-helpers.js");
const _BottomNavigation = /*#__PURE__*/ _interop_require_default(require("../../../components/navigation/BottomNavigation"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Mock Next.js navigation
const mockPathname = jest.fn();
// Mock haptic feedback hook
const mockTriggerHaptic = jest.fn();
describe('BottomNavigation', ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
        mockPathname.mockReturnValue('/dashboard');
    });
    describe('Navigation Rendering', ()=>{
        it('renders all navigation items', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_BottomNavigation.default, {}));
            expect(_react1.screen.getByRole('link', {
                name: /navigate to plants/i
            })).toBeInTheDocument();
            expect(_react1.screen.getByRole('link', {
                name: /navigate to care/i
            })).toBeInTheDocument();
            expect(_react1.screen.getByRole('link', {
                name: /navigate to dashboard/i
            })).toBeInTheDocument();
            expect(_react1.screen.getByRole('link', {
                name: /navigate to propagations/i
            })).toBeInTheDocument();
            expect(_react1.screen.getByRole('link', {
                name: /navigate to handbook/i
            })).toBeInTheDocument();
        });
        it('renders navigation icons', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_BottomNavigation.default, {}));
            expect(_react1.screen.getByText('🌱')).toBeInTheDocument(); // Plants
            expect(_react1.screen.getByText('💧')).toBeInTheDocument(); // Care
            expect(_react1.screen.getByText('🏠')).toBeInTheDocument(); // Dashboard
            expect(_react1.screen.getByText('🌿')).toBeInTheDocument(); // Propagations
            expect(_react1.screen.getByText('📖')).toBeInTheDocument(); // Handbook
        });
        it('renders navigation labels', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_BottomNavigation.default, {}));
            expect(_react1.screen.getByText('Plants')).toBeInTheDocument();
            expect(_react1.screen.getByText('Care')).toBeInTheDocument();
            expect(_react1.screen.getByText('Dashboard')).toBeInTheDocument();
            expect(_react1.screen.getByText('Propagations')).toBeInTheDocument();
            expect(_react1.screen.getByText('Handbook')).toBeInTheDocument();
        });
        it('has proper navigation structure', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_BottomNavigation.default, {}));
            const nav = _react1.screen.getByRole('navigation');
            expect(nav).toBeInTheDocument();
            expect(nav).toHaveClass('bottom-nav');
            const container = nav.querySelector('.bottom-nav-container');
            expect(container).toBeInTheDocument();
        });
    });
    describe('Active State Management', ()=>{
        it('marks dashboard as active when on dashboard route', ()=>{
            mockPathname.mockReturnValue('/dashboard');
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_BottomNavigation.default, {}));
            const dashboardLink = _react1.screen.getByRole('link', {
                name: /navigate to dashboard/i
            });
            expect(dashboardLink).toHaveClass('bottom-nav-item--active');
        });
        it('marks plants as active when on plants route', ()=>{
            mockPathname.mockReturnValue('/dashboard/plants');
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_BottomNavigation.default, {}));
            const plantsLink = _react1.screen.getByRole('link', {
                name: /navigate to plants/i
            });
            expect(plantsLink).toHaveClass('bottom-nav-item--active');
        });
        it('marks care as active when on care route', ()=>{
            mockPathname.mockReturnValue('/dashboard/care');
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_BottomNavigation.default, {}));
            const careLink = _react1.screen.getByRole('link', {
                name: /navigate to care/i
            });
            expect(careLink).toHaveClass('bottom-nav-item--active');
        });
        it('marks propagations as active when on propagations route', ()=>{
            mockPathname.mockReturnValue('/dashboard/propagations');
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_BottomNavigation.default, {}));
            const propagationsLink = _react1.screen.getByRole('link', {
                name: /navigate to propagations/i
            });
            expect(propagationsLink).toHaveClass('bottom-nav-item--active');
        });
        it('marks handbook as active when on handbook route', ()=>{
            mockPathname.mockReturnValue('/dashboard/handbook');
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_BottomNavigation.default, {}));
            const handbookLink = _react1.screen.getByRole('link', {
                name: /navigate to handbook/i
            });
            expect(handbookLink).toHaveClass('bottom-nav-item--active');
        });
        it('handles nested routes correctly', ()=>{
            mockPathname.mockReturnValue('/dashboard/plants/123');
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_BottomNavigation.default, {}));
            const plantsLink = _react1.screen.getByRole('link', {
                name: /navigate to plants/i
            });
            expect(plantsLink).toHaveClass('bottom-nav-item--active');
        });
        it('only marks dashboard as active for exact dashboard route', ()=>{
            mockPathname.mockReturnValue('/dashboard/plants');
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_BottomNavigation.default, {}));
            const dashboardLink = _react1.screen.getByRole('link', {
                name: /navigate to dashboard/i
            });
            expect(dashboardLink).not.toHaveClass('bottom-nav-item--active');
            expect(dashboardLink).toHaveClass('bottom-nav-item--inactive');
        });
        it('marks inactive items with inactive class', ()=>{
            mockPathname.mockReturnValue('/dashboard/plants');
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_BottomNavigation.default, {}));
            const careLink = _react1.screen.getByRole('link', {
                name: /navigate to care/i
            });
            const dashboardLink = _react1.screen.getByRole('link', {
                name: /navigate to dashboard/i
            });
            const propagationsLink = _react1.screen.getByRole('link', {
                name: /navigate to propagations/i
            });
            expect(careLink).toHaveClass('bottom-nav-item--inactive');
            expect(dashboardLink).toHaveClass('bottom-nav-item--inactive');
            expect(propagationsLink).toHaveClass('bottom-nav-item--inactive');
        });
    });
    describe('Navigation Links', ()=>{
        it('has correct href attributes', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_BottomNavigation.default, {}));
            expect(_react1.screen.getByRole('link', {
                name: /navigate to plants/i
            })).toHaveAttribute('href', '/dashboard/plants');
            expect(_react1.screen.getByRole('link', {
                name: /navigate to care/i
            })).toHaveAttribute('href', '/dashboard/care');
            expect(_react1.screen.getByRole('link', {
                name: /navigate to dashboard/i
            })).toHaveAttribute('href', '/dashboard');
            expect(_react1.screen.getByRole('link', {
                name: /navigate to propagations/i
            })).toHaveAttribute('href', '/dashboard/propagations');
            expect(_react1.screen.getByRole('link', {
                name: /navigate to handbook/i
            })).toHaveAttribute('href', '/dashboard/handbook');
        });
        it('has proper title attributes for tooltips', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_BottomNavigation.default, {}));
            expect(_react1.screen.getByRole('link', {
                name: /navigate to plants/i
            })).toHaveAttribute('title', 'Navigate to Plants');
            expect(_react1.screen.getByRole('link', {
                name: /navigate to care/i
            })).toHaveAttribute('title', 'Navigate to Care');
            expect(_react1.screen.getByRole('link', {
                name: /navigate to dashboard/i
            })).toHaveAttribute('title', 'Navigate to Dashboard');
        });
    });
    describe('Care Notification Badge', ()=>{
        it('does not show badge when no notifications', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_BottomNavigation.default, {
                careNotificationCount: 0
            }));
            expect(_react1.screen.queryByRole('status')).not.toBeInTheDocument();
        });
        it('shows badge with notification count', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_BottomNavigation.default, {
                careNotificationCount: 5
            }));
            const badge = _react1.screen.getByRole('status', {
                name: /5 notifications/i
            });
            expect(badge).toBeInTheDocument();
            expect(badge).toHaveTextContent('5');
            expect(badge).toHaveClass('bottom-nav-badge');
        });
        it('shows 99+ for counts over 99', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_BottomNavigation.default, {
                careNotificationCount: 150
            }));
            const badge = _react1.screen.getByRole('status', {
                name: /150 notifications/i
            });
            expect(badge).toHaveTextContent('99+');
        });
        it('updates care link aria-label with notification count', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_BottomNavigation.default, {
                careNotificationCount: 3
            }));
            const careLink = _react1.screen.getByRole('link', {
                name: /navigate to care \(3 notifications\)/i
            });
            expect(careLink).toBeInTheDocument();
            expect(careLink).toHaveAttribute('title', 'Navigate to Care (3 notifications)');
        });
        it('badge has proper accessibility attributes', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_BottomNavigation.default, {
                careNotificationCount: 7
            }));
            const badge = _react1.screen.getByRole('status');
            expect(badge).toHaveAttribute('aria-label', '7 notifications');
        });
    });
    describe('User Interactions', ()=>{
        it('triggers haptic feedback on touch', async ()=>{
            const user = _userevent.default.setup();
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_BottomNavigation.default, {}));
            const plantsLink = _react1.screen.getByRole('link', {
                name: /navigate to plants/i
            });
            // Simulate touch start
            await user.pointer({
                keys: '[TouchA>]',
                target: plantsLink
            });
            expect(mockTriggerHaptic).toHaveBeenCalledWith('selection');
        });
        it('triggers haptic feedback on mouse down', async ()=>{
            const user = _userevent.default.setup();
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_BottomNavigation.default, {}));
            const plantsLink = _react1.screen.getByRole('link', {
                name: /navigate to plants/i
            });
            // Simulate mouse down
            await user.pointer({
                keys: '[MouseLeft>]',
                target: plantsLink
            });
            expect(mockTriggerHaptic).toHaveBeenCalledWith('selection');
        });
        it('applies pressed state temporarily', async ()=>{
            const user = _userevent.default.setup();
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_BottomNavigation.default, {}));
            const plantsLink = _react1.screen.getByRole('link', {
                name: /navigate to plants/i
            });
            // Simulate touch start
            await user.pointer({
                keys: '[TouchA>]',
                target: plantsLink
            });
            // Should have pressed class temporarily
            expect(plantsLink).toHaveClass('bottom-nav-item--pressed');
            // Wait for pressed state to be removed
            await (0, _react1.waitFor)(()=>{
                expect(plantsLink).not.toHaveClass('bottom-nav-item--pressed');
            }, {
                timeout: 200
            });
        });
        it('handles multiple rapid taps correctly', async ()=>{
            const user = _userevent.default.setup();
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_BottomNavigation.default, {}));
            const plantsLink = _react1.screen.getByRole('link', {
                name: /navigate to plants/i
            });
            // Rapid taps
            await user.pointer({
                keys: '[TouchA>]',
                target: plantsLink
            });
            await user.pointer({
                keys: '[TouchA>]',
                target: plantsLink
            });
            await user.pointer({
                keys: '[TouchA>]',
                target: plantsLink
            });
            expect(mockTriggerHaptic).toHaveBeenCalledTimes(3);
        });
    });
    describe('Accessibility', ()=>{
        it('has proper navigation landmark', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_BottomNavigation.default, {}));
            const nav = _react1.screen.getByRole('navigation');
            expect(nav).toBeInTheDocument();
        });
        it('has descriptive aria-labels for all links', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_BottomNavigation.default, {}));
            expect(_react1.screen.getByLabelText(/navigate to plants/i)).toBeInTheDocument();
            expect(_react1.screen.getByLabelText(/navigate to care/i)).toBeInTheDocument();
            expect(_react1.screen.getByLabelText(/navigate to dashboard/i)).toBeInTheDocument();
            expect(_react1.screen.getByLabelText(/navigate to propagations/i)).toBeInTheDocument();
            expect(_react1.screen.getByLabelText(/navigate to handbook/i)).toBeInTheDocument();
        });
        it('marks icons as decorative with aria-hidden', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_BottomNavigation.default, {}));
            const icons = _react1.screen.getAllByText(/[🌱💧🏠🌿📖]/);
            icons.forEach((icon)=>{
                expect(icon).toHaveAttribute('aria-hidden', 'true');
            });
        });
        it('provides screen reader context for notification badges', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_BottomNavigation.default, {
                careNotificationCount: 5
            }));
            const badge = _react1.screen.getByRole('status');
            expect(badge).toHaveAttribute('aria-label', '5 notifications');
        });
        it('supports keyboard navigation', async ()=>{
            const user = _userevent.default.setup();
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_BottomNavigation.default, {}));
            // Tab through navigation items
            await user.tab();
            expect(_react1.screen.getByRole('link', {
                name: /navigate to plants/i
            })).toHaveFocus();
            await user.tab();
            expect(_react1.screen.getByRole('link', {
                name: /navigate to care/i
            })).toHaveFocus();
            await user.tab();
            expect(_react1.screen.getByRole('link', {
                name: /navigate to dashboard/i
            })).toHaveFocus();
            await user.tab();
            expect(_react1.screen.getByRole('link', {
                name: /navigate to propagations/i
            })).toHaveFocus();
            await user.tab();
            expect(_react1.screen.getByRole('link', {
                name: /navigate to handbook/i
            })).toHaveFocus();
        });
        it('supports Enter key activation', async ()=>{
            const user = _userevent.default.setup();
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_BottomNavigation.default, {}));
            const plantsLink = _react1.screen.getByRole('link', {
                name: /navigate to plants/i
            });
            plantsLink.focus();
            await user.keyboard('{Enter}');
            // Link should be activated (Next.js Link handles navigation)
            expect(plantsLink).toHaveAttribute('href', '/dashboard/plants');
        });
    });
    describe('Responsive Behavior', ()=>{
        it('maintains consistent structure across screen sizes', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_BottomNavigation.default, {}));
            const nav = _react1.screen.getByRole('navigation');
            const container = nav.querySelector('.bottom-nav-container');
            const items = _react1.screen.getAllByRole('link');
            expect(nav).toHaveClass('bottom-nav');
            expect(container).toHaveClass('bottom-nav-container');
            expect(items).toHaveLength(5);
        });
        it('preserves all navigation items on mobile', ()=>{
            // Simulate mobile viewport
            Object.defineProperty(window, 'innerWidth', {
                writable: true,
                configurable: true,
                value: 375
            });
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_BottomNavigation.default, {}));
            const items = _react1.screen.getAllByRole('link');
            expect(items).toHaveLength(5);
        });
    });
    describe('State Consistency', ()=>{
        it('maintains active state when component re-renders', ()=>{
            mockPathname.mockReturnValue('/dashboard/plants');
            const { rerender } = (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_BottomNavigation.default, {}));
            let plantsLink = _react1.screen.getByRole('link', {
                name: /navigate to plants/i
            });
            expect(plantsLink).toHaveClass('bottom-nav-item--active');
            // Re-render with same pathname
            rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(_BottomNavigation.default, {}));
            plantsLink = _react1.screen.getByRole('link', {
                name: /navigate to plants/i
            });
            expect(plantsLink).toHaveClass('bottom-nav-item--active');
        });
        it('updates active state when pathname changes', ()=>{
            mockPathname.mockReturnValue('/dashboard/plants');
            const { rerender } = (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_BottomNavigation.default, {}));
            let plantsLink = _react1.screen.getByRole('link', {
                name: /navigate to plants/i
            });
            let careLink = _react1.screen.getByRole('link', {
                name: /navigate to care/i
            });
            expect(plantsLink).toHaveClass('bottom-nav-item--active');
            expect(careLink).toHaveClass('bottom-nav-item--inactive');
            // Change pathname
            mockPathname.mockReturnValue('/dashboard/care');
            rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(_BottomNavigation.default, {}));
            plantsLink = _react1.screen.getByRole('link', {
                name: /navigate to plants/i
            });
            careLink = _react1.screen.getByRole('link', {
                name: /navigate to care/i
            });
            expect(plantsLink).toHaveClass('bottom-nav-item--inactive');
            expect(careLink).toHaveClass('bottom-nav-item--active');
        });
        it('updates notification badge when count changes', ()=>{
            const { rerender } = (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_BottomNavigation.default, {
                careNotificationCount: 3
            }));
            expect(_react1.screen.getByRole('status', {
                name: /3 notifications/i
            })).toBeInTheDocument();
            // Update notification count
            rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(_BottomNavigation.default, {
                careNotificationCount: 7
            }));
            expect(_react1.screen.getByRole('status', {
                name: /7 notifications/i
            })).toBeInTheDocument();
            expect(_react1.screen.queryByRole('status', {
                name: /3 notifications/i
            })).not.toBeInTheDocument();
        });
        it('removes badge when notification count becomes zero', ()=>{
            const { rerender } = (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_BottomNavigation.default, {
                careNotificationCount: 5
            }));
            expect(_react1.screen.getByRole('status')).toBeInTheDocument();
            // Set count to zero
            rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(_BottomNavigation.default, {
                careNotificationCount: 0
            }));
            expect(_react1.screen.queryByRole('status')).not.toBeInTheDocument();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,