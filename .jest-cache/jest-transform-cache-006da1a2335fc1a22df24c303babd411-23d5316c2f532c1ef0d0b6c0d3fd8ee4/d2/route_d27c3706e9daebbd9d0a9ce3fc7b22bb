6072aa7943949b28171883d5385bdc41
"use strict";

/* istanbul ignore next */
function cov_2gjjkbydq5() {
  var path = "/Users/stefanbekker/projects/fancy-planties/src/app/api/plant-instances/route.ts";
  var hash = "07781f33ac6921778ed9a72cee686ce3a8c51e08";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/stefanbekker/projects/fancy-planties/src/app/api/plant-instances/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 18,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 19
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 20
        }
      },
      "6": {
        start: {
          line: 19,
          column: 16
        },
        end: {
          line: 19,
          column: 38
        }
      },
      "7": {
        start: {
          line: 20,
          column: 13
        },
        end: {
          line: 20,
          column: 27
        }
      },
      "8": {
        start: {
          line: 21,
          column: 24
        },
        end: {
          line: 21,
          column: 74
        }
      },
      "9": {
        start: {
          line: 22,
          column: 22
        },
        end: {
          line: 22,
          column: 70
        }
      },
      "10": {
        start: {
          line: 23,
          column: 17
        },
        end: {
          line: 23,
          column: 52
        }
      },
      "11": {
        start: {
          line: 25,
          column: 4
        },
        end: {
          line: 65,
          column: 5
        }
      },
      "12": {
        start: {
          line: 26,
          column: 27
        },
        end: {
          line: 26,
          column: 72
        }
      },
      "13": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 34,
          column: 9
        }
      },
      "14": {
        start: {
          line: 28,
          column: 12
        },
        end: {
          line: 33,
          column: 15
        }
      },
      "15": {
        start: {
          line: 35,
          column: 25
        },
        end: {
          line: 35,
          column: 35
        }
      },
      "16": {
        start: {
          line: 36,
          column: 33
        },
        end: {
          line: 36,
          column: 53
        }
      },
      "17": {
        start: {
          line: 38,
          column: 29
        },
        end: {
          line: 51,
          column: 9
        }
      },
      "18": {
        start: {
          line: 53,
          column: 33
        },
        end: {
          line: 53,
          column: 92
        }
      },
      "19": {
        start: {
          line: 55,
          column: 23
        },
        end: {
          line: 55,
          column: 98
        }
      },
      "20": {
        start: {
          line: 56,
          column: 8
        },
        end: {
          line: 56,
          column: 49
        }
      },
      "21": {
        start: {
          line: 58,
          column: 8
        },
        end: {
          line: 58,
          column: 63
        }
      },
      "22": {
        start: {
          line: 59,
          column: 8
        },
        end: {
          line: 64,
          column: 11
        }
      },
      "23": {
        start: {
          line: 68,
          column: 4
        },
        end: {
          line: 222,
          column: 5
        }
      },
      "24": {
        start: {
          line: 69,
          column: 27
        },
        end: {
          line: 69,
          column: 72
        }
      },
      "25": {
        start: {
          line: 70,
          column: 8
        },
        end: {
          line: 77,
          column: 9
        }
      },
      "26": {
        start: {
          line: 71,
          column: 12
        },
        end: {
          line: 76,
          column: 15
        }
      },
      "27": {
        start: {
          line: 78,
          column: 25
        },
        end: {
          line: 78,
          column: 35
        }
      },
      "28": {
        start: {
          line: 80,
          column: 28
        },
        end: {
          line: 80,
          column: 63
        }
      },
      "29": {
        start: {
          line: 82,
          column: 8
        },
        end: {
          line: 143,
          column: 9
        }
      },
      "30": {
        start: {
          line: 84,
          column: 29
        },
        end: {
          line: 84,
          column: 53
        }
      },
      "31": {
        start: {
          line: 85,
          column: 12
        },
        end: {
          line: 85,
          column: 22
        }
      },
      "32": {
        start: {
          line: 87,
          column: 33
        },
        end: {
          line: 92,
          column: 13
        }
      },
      "33": {
        start: {
          line: 88,
          column: 30
        },
        end: {
          line: 88,
          column: 54
        }
      },
      "34": {
        start: {
          line: 89,
          column: 31
        },
        end: {
          line: 89,
          column: 49
        }
      },
      "35": {
        start: {
          line: 90,
          column: 31
        },
        end: {
          line: 90,
          column: 56
        }
      },
      "36": {
        start: {
          line: 91,
          column: 16
        },
        end: {
          line: 91,
          column: 60
        }
      },
      "37": {
        start: {
          line: 93,
          column: 31
        },
        end: {
          line: 93,
          column: 33
        }
      },
      "38": {
        start: {
          line: 94,
          column: 35
        },
        end: {
          line: 94,
          column: 37
        }
      },
      "39": {
        start: {
          line: 96,
          column: 12
        },
        end: {
          line: 115,
          column: 13
        }
      },
      "40": {
        start: {
          line: 97,
          column: 16
        },
        end: {
          line: 114,
          column: 17
        }
      },
      "41": {
        start: {
          line: 99,
          column: 20
        },
        end: {
          line: 101,
          column: 21
        }
      },
      "42": {
        start: {
          line: 100,
          column: 24
        },
        end: {
          line: 100,
          column: 47
        }
      },
      "43": {
        start: {
          line: 102,
          column: 23
        },
        end: {
          line: 114,
          column: 17
        }
      },
      "44": {
        start: {
          line: 104,
          column: 20
        },
        end: {
          line: 104,
          column: 47
        }
      },
      "45": {
        start: {
          line: 107,
          column: 20
        },
        end: {
          line: 113,
          column: 21
        }
      },
      "46": {
        start: {
          line: 108,
          column: 24
        },
        end: {
          line: 108,
          column: 56
        }
      },
      "47": {
        start: {
          line: 109,
          column: 27
        },
        end: {
          line: 113,
          column: 21
        }
      },
      "48": {
        start: {
          line: 110,
          column: 24
        },
        end: {
          line: 110,
          column: 53
        }
      },
      "49": {
        start: {
          line: 112,
          column: 24
        },
        end: {
          line: 112,
          column: 42
        }
      },
      "50": {
        start: {
          line: 117,
          column: 36
        },
        end: {
          line: 117,
          column: 97
        }
      },
      "51": {
        start: {
          line: 117,
          column: 77
        },
        end: {
          line: 117,
          column: 95
        }
      },
      "52": {
        start: {
          line: 119,
          column: 12
        },
        end: {
          line: 122,
          column: 14
        }
      },
      "53": {
        start: {
          line: 125,
          column: 12
        },
        end: {
          line: 142,
          column: 13
        }
      },
      "54": {
        start: {
          line: 126,
          column: 16
        },
        end: {
          line: 126,
          column: 44
        }
      },
      "55": {
        start: {
          line: 127,
          column: 16
        },
        end: {
          line: 134,
          column: 17
        }
      },
      "56": {
        start: {
          line: 128,
          column: 20
        },
        end: {
          line: 133,
          column: 23
        }
      },
      "57": {
        start: {
          line: 136,
          column: 16
        },
        end: {
          line: 141,
          column: 19
        }
      },
      "58": {
        start: {
          line: 145,
          column: 29
        },
        end: {
          line: 151,
          column: 9
        }
      },
      "59": {
        start: {
          line: 154,
          column: 8
        },
        end: {
          line: 173,
          column: 9
        }
      },
      "60": {
        start: {
          line: 155,
          column: 12
        },
        end: {
          line: 155,
          column: 88
        }
      },
      "61": {
        start: {
          line: 157,
          column: 12
        },
        end: {
          line: 165,
          column: 13
        }
      },
      "62": {
        start: {
          line: 158,
          column: 16
        },
        end: {
          line: 164,
          column: 19
        }
      },
      "63": {
        start: {
          line: 166,
          column: 12
        },
        end: {
          line: 172,
          column: 15
        }
      },
      "64": {
        start: {
          line: 175,
          column: 8
        },
        end: {
          line: 194,
          column: 9
        }
      },
      "65": {
        start: {
          line: 176,
          column: 24
        },
        end: {
          line: 176,
          column: 34
        }
      },
      "66": {
        start: {
          line: 177,
          column: 34
        },
        end: {
          line: 177,
          column: 103
        }
      },
      "67": {
        start: {
          line: 178,
          column: 12
        },
        end: {
          line: 193,
          column: 13
        }
      },
      "68": {
        start: {
          line: 179,
          column: 41
        },
        end: {
          line: 179,
          column: 54
        }
      },
      "69": {
        start: {
          line: 180,
          column: 32
        },
        end: {
          line: 180,
          column: 45
        }
      },
      "70": {
        start: {
          line: 181,
          column: 16
        },
        end: {
          line: 191,
          column: 17
        }
      },
      "71": {
        start: {
          line: 183,
          column: 24
        },
        end: {
          line: 183,
          column: 82
        }
      },
      "72": {
        start: {
          line: 184,
          column: 24
        },
        end: {
          line: 184,
          column: 30
        }
      },
      "73": {
        start: {
          line: 186,
          column: 24
        },
        end: {
          line: 186,
          column: 86
        }
      },
      "74": {
        start: {
          line: 187,
          column: 24
        },
        end: {
          line: 187,
          column: 30
        }
      },
      "75": {
        start: {
          line: 189,
          column: 24
        },
        end: {
          line: 189,
          column: 84
        }
      },
      "76": {
        start: {
          line: 190,
          column: 24
        },
        end: {
          line: 190,
          column: 30
        }
      },
      "77": {
        start: {
          line: 192,
          column: 16
        },
        end: {
          line: 192,
          column: 54
        }
      },
      "78": {
        start: {
          line: 196,
          column: 30
        },
        end: {
          line: 196,
          column: 94
        }
      },
      "79": {
        start: {
          line: 198,
          column: 33
        },
        end: {
          line: 198,
          column: 109
        }
      },
      "80": {
        start: {
          line: 199,
          column: 8
        },
        end: {
          line: 204,
          column: 11
        }
      },
      "81": {
        start: {
          line: 206,
          column: 8
        },
        end: {
          line: 206,
          column: 65
        }
      },
      "82": {
        start: {
          line: 207,
          column: 8
        },
        end: {
          line: 215,
          column: 9
        }
      },
      "83": {
        start: {
          line: 208,
          column: 12
        },
        end: {
          line: 214,
          column: 15
        }
      },
      "84": {
        start: {
          line: 216,
          column: 8
        },
        end: {
          line: 221,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        },
        loc: {
          start: {
            line: 12,
            column: 15
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 16
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "GET",
        decl: {
          start: {
            line: 24,
            column: 15
          },
          end: {
            line: 24,
            column: 18
          }
        },
        loc: {
          start: {
            line: 24,
            column: 28
          },
          end: {
            line: 66,
            column: 1
          }
        },
        line: 24
      },
      "4": {
        name: "POST",
        decl: {
          start: {
            line: 67,
            column: 15
          },
          end: {
            line: 67,
            column: 19
          }
        },
        loc: {
          start: {
            line: 67,
            column: 29
          },
          end: {
            line: 223,
            column: 1
          }
        },
        line: 67
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 87,
            column: 33
          },
          end: {
            line: 87,
            column: 34
          }
        },
        loc: {
          start: {
            line: 87,
            column: 47
          },
          end: {
            line: 92,
            column: 13
          }
        },
        line: 87
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 117,
            column: 69
          },
          end: {
            line: 117,
            column: 70
          }
        },
        loc: {
          start: {
            line: 117,
            column: 77
          },
          end: {
            line: 117,
            column: 95
          }
        },
        line: 117
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 27,
            column: 8
          },
          end: {
            line: 34,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 27,
            column: 8
          },
          end: {
            line: 34,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 27
      },
      "1": {
        loc: {
          start: {
            line: 32,
            column: 24
          },
          end: {
            line: 32,
            column: 86
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 32,
            column: 77
          },
          end: {
            line: 32,
            column: 80
          }
        }, {
          start: {
            line: 32,
            column: 83
          },
          end: {
            line: 32,
            column: 86
          }
        }],
        line: 32
      },
      "2": {
        loc: {
          start: {
            line: 40,
            column: 22
          },
          end: {
            line: 40,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 40,
            column: 22
          },
          end: {
            line: 40,
            column: 50
          }
        }, {
          start: {
            line: 40,
            column: 54
          },
          end: {
            line: 40,
            column: 63
          }
        }],
        line: 40
      },
      "3": {
        loc: {
          start: {
            line: 41,
            column: 21
          },
          end: {
            line: 41,
            column: 104
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 41,
            column: 51
          },
          end: {
            line: 41,
            column: 92
          }
        }, {
          start: {
            line: 41,
            column: 95
          },
          end: {
            line: 41,
            column: 104
          }
        }],
        line: 41
      },
      "4": {
        loc: {
          start: {
            line: 42,
            column: 22
          },
          end: {
            line: 42,
            column: 104
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 42,
            column: 53
          },
          end: {
            line: 42,
            column: 92
          }
        }, {
          start: {
            line: 42,
            column: 95
          },
          end: {
            line: 42,
            column: 104
          }
        }],
        line: 42
      },
      "5": {
        loc: {
          start: {
            line: 44,
            column: 25
          },
          end: {
            line: 44,
            column: 116
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 44,
            column: 59
          },
          end: {
            line: 44,
            column: 104
          }
        }, {
          start: {
            line: 44,
            column: 107
          },
          end: {
            line: 44,
            column: 116
          }
        }],
        line: 44
      },
      "6": {
        loc: {
          start: {
            line: 45,
            column: 26
          },
          end: {
            line: 45,
            column: 115
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 45,
            column: 61
          },
          end: {
            line: 45,
            column: 103
          }
        }, {
          start: {
            line: 45,
            column: 106
          },
          end: {
            line: 45,
            column: 115
          }
        }],
        line: 45
      },
      "7": {
        loc: {
          start: {
            line: 46,
            column: 27
          },
          end: {
            line: 46,
            column: 118
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 46,
            column: 63
          },
          end: {
            line: 46,
            column: 106
          }
        }, {
          start: {
            line: 46,
            column: 109
          },
          end: {
            line: 46,
            column: 118
          }
        }],
        line: 46
      },
      "8": {
        loc: {
          start: {
            line: 47,
            column: 33
          },
          end: {
            line: 47,
            column: 136
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 47,
            column: 75
          },
          end: {
            line: 47,
            column: 124
          }
        }, {
          start: {
            line: 47,
            column: 127
          },
          end: {
            line: 47,
            column: 136
          }
        }],
        line: 47
      },
      "9": {
        loc: {
          start: {
            line: 48,
            column: 34
          },
          end: {
            line: 48,
            column: 139
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 48,
            column: 77
          },
          end: {
            line: 48,
            column: 127
          }
        }, {
          start: {
            line: 48,
            column: 130
          },
          end: {
            line: 48,
            column: 139
          }
        }],
        line: 48
      },
      "10": {
        loc: {
          start: {
            line: 49,
            column: 19
          },
          end: {
            line: 49,
            column: 91
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 49,
            column: 47
          },
          end: {
            line: 49,
            column: 86
          }
        }, {
          start: {
            line: 49,
            column: 89
          },
          end: {
            line: 49,
            column: 91
          }
        }],
        line: 49
      },
      "11": {
        loc: {
          start: {
            line: 50,
            column: 20
          },
          end: {
            line: 50,
            column: 93
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 50,
            column: 49
          },
          end: {
            line: 50,
            column: 89
          }
        }, {
          start: {
            line: 50,
            column: 92
          },
          end: {
            line: 50,
            column: 93
          }
        }],
        line: 50
      },
      "12": {
        loc: {
          start: {
            line: 70,
            column: 8
          },
          end: {
            line: 77,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 70,
            column: 8
          },
          end: {
            line: 77,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 70
      },
      "13": {
        loc: {
          start: {
            line: 75,
            column: 24
          },
          end: {
            line: 75,
            column: 86
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 75,
            column: 77
          },
          end: {
            line: 75,
            column: 80
          }
        }, {
          start: {
            line: 75,
            column: 83
          },
          end: {
            line: 75,
            column: 86
          }
        }],
        line: 75
      },
      "14": {
        loc: {
          start: {
            line: 82,
            column: 8
          },
          end: {
            line: 143,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 82,
            column: 8
          },
          end: {
            line: 143,
            column: 9
          }
        }, {
          start: {
            line: 123,
            column: 15
          },
          end: {
            line: 143,
            column: 9
          }
        }],
        line: 82
      },
      "15": {
        loc: {
          start: {
            line: 97,
            column: 16
          },
          end: {
            line: 114,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 97,
            column: 16
          },
          end: {
            line: 114,
            column: 17
          }
        }, {
          start: {
            line: 102,
            column: 23
          },
          end: {
            line: 114,
            column: 17
          }
        }],
        line: 97
      },
      "16": {
        loc: {
          start: {
            line: 99,
            column: 20
          },
          end: {
            line: 101,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 99,
            column: 20
          },
          end: {
            line: 101,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 99
      },
      "17": {
        loc: {
          start: {
            line: 102,
            column: 23
          },
          end: {
            line: 114,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 102,
            column: 23
          },
          end: {
            line: 114,
            column: 17
          }
        }, {
          start: {
            line: 105,
            column: 23
          },
          end: {
            line: 114,
            column: 17
          }
        }],
        line: 102
      },
      "18": {
        loc: {
          start: {
            line: 107,
            column: 20
          },
          end: {
            line: 113,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 107,
            column: 20
          },
          end: {
            line: 113,
            column: 21
          }
        }, {
          start: {
            line: 109,
            column: 27
          },
          end: {
            line: 113,
            column: 21
          }
        }],
        line: 107
      },
      "19": {
        loc: {
          start: {
            line: 109,
            column: 27
          },
          end: {
            line: 113,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 109,
            column: 27
          },
          end: {
            line: 113,
            column: 21
          }
        }, {
          start: {
            line: 111,
            column: 27
          },
          end: {
            line: 113,
            column: 21
          }
        }],
        line: 109
      },
      "20": {
        loc: {
          start: {
            line: 127,
            column: 16
          },
          end: {
            line: 134,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 127,
            column: 16
          },
          end: {
            line: 134,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 127
      },
      "21": {
        loc: {
          start: {
            line: 127,
            column: 20
          },
          end: {
            line: 127,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 127,
            column: 20
          },
          end: {
            line: 127,
            column: 25
          }
        }, {
          start: {
            line: 127,
            column: 29
          },
          end: {
            line: 127,
            column: 59
          }
        }],
        line: 127
      },
      "22": {
        loc: {
          start: {
            line: 149,
            column: 28
          },
          end: {
            line: 149,
            column: 116
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 149,
            column: 80
          },
          end: {
            line: 149,
            column: 109
          }
        }, {
          start: {
            line: 149,
            column: 112
          },
          end: {
            line: 149,
            column: 116
          }
        }],
        line: 149
      },
      "23": {
        loc: {
          start: {
            line: 149,
            column: 28
          },
          end: {
            line: 149,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 149,
            column: 28
          },
          end: {
            line: 149,
            column: 47
          }
        }, {
          start: {
            line: 149,
            column: 51
          },
          end: {
            line: 149,
            column: 77
          }
        }],
        line: 149
      },
      "24": {
        loc: {
          start: {
            line: 150,
            column: 23
          },
          end: {
            line: 150,
            column: 96
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 150,
            column: 65
          },
          end: {
            line: 150,
            column: 89
          }
        }, {
          start: {
            line: 150,
            column: 92
          },
          end: {
            line: 150,
            column: 96
          }
        }],
        line: 150
      },
      "25": {
        loc: {
          start: {
            line: 150,
            column: 23
          },
          end: {
            line: 150,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 150,
            column: 23
          },
          end: {
            line: 150,
            column: 37
          }
        }, {
          start: {
            line: 150,
            column: 41
          },
          end: {
            line: 150,
            column: 62
          }
        }],
        line: 150
      },
      "26": {
        loc: {
          start: {
            line: 157,
            column: 12
          },
          end: {
            line: 165,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 157,
            column: 12
          },
          end: {
            line: 165,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 157
      },
      "27": {
        loc: {
          start: {
            line: 169,
            column: 25
          },
          end: {
            line: 169,
            column: 100
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 169,
            column: 60
          },
          end: {
            line: 169,
            column: 83
          }
        }, {
          start: {
            line: 169,
            column: 86
          },
          end: {
            line: 169,
            column: 100
          }
        }],
        line: 169
      },
      "28": {
        loc: {
          start: {
            line: 175,
            column: 8
          },
          end: {
            line: 194,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 175,
            column: 8
          },
          end: {
            line: 194,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 175
      },
      "29": {
        loc: {
          start: {
            line: 175,
            column: 12
          },
          end: {
            line: 175,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 175,
            column: 12
          },
          end: {
            line: 175,
            column: 44
          }
        }, {
          start: {
            line: 175,
            column: 48
          },
          end: {
            line: 175,
            column: 76
          }
        }],
        line: 175
      },
      "30": {
        loc: {
          start: {
            line: 178,
            column: 12
          },
          end: {
            line: 193,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 178,
            column: 12
          },
          end: {
            line: 193,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 178
      },
      "31": {
        loc: {
          start: {
            line: 181,
            column: 16
          },
          end: {
            line: 191,
            column: 17
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 182,
            column: 20
          },
          end: {
            line: 184,
            column: 30
          }
        }, {
          start: {
            line: 185,
            column: 20
          },
          end: {
            line: 187,
            column: 30
          }
        }, {
          start: {
            line: 188,
            column: 20
          },
          end: {
            line: 190,
            column: 30
          }
        }],
        line: 181
      },
      "32": {
        loc: {
          start: {
            line: 207,
            column: 8
          },
          end: {
            line: 215,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 207,
            column: 8
          },
          end: {
            line: 215,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 207
      },
      "33": {
        loc: {
          start: {
            line: 207,
            column: 12
          },
          end: {
            line: 207,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 207,
            column: 12
          },
          end: {
            line: 207,
            column: 34
          }
        }, {
          start: {
            line: 207,
            column: 38
          },
          end: {
            line: 207,
            column: 74
          }
        }],
        line: 207
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0, 0],
      "32": [0, 0],
      "33": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/stefanbekker/projects/fancy-planties/src/app/api/plant-instances/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport { z } from 'zod';\nimport { PlantInstanceQueries } from '@/lib/db/queries/plant-instances';\nimport { createPlantInstanceSchema, plantInstanceFilterSchema } from '@/lib/validation/plant-schemas';\nimport { validateVerifiedRequest } from '@/lib/auth/server';\n\n// GET /api/plant-instances - Get plant instances with optional filtering\nexport async function GET(request: NextRequest) {\n  try {\n    const authResult = await validateVerifiedRequest();\n    if (!authResult.user) {\n      return NextResponse.json({ \n        success: false,\n        error: authResult.error \n      }, { status: authResult.error === 'Email verification required' ? 403 : 401 });\n    }\n    \n    const { user } = authResult;\n\n    const { searchParams } = new URL(request.url);\n    \n    // Parse filter parameters\n    const filterParams = {\n      userId: user.id,\n      location: searchParams.get('location') || undefined,\n      plantId: searchParams.get('plantId') ? parseInt(searchParams.get('plantId')!, 10) : undefined,\n      isActive: searchParams.get('isActive') ? searchParams.get('isActive') === 'true' : undefined,\n      overdueOnly: searchParams.get('overdueOnly') === 'true',\n      dueSoonDays: searchParams.get('dueSoonDays') ? parseInt(searchParams.get('dueSoonDays')!, 10) : undefined,\n      createdAfter: searchParams.get('createdAfter') ? new Date(searchParams.get('createdAfter')!) : undefined,\n      createdBefore: searchParams.get('createdBefore') ? new Date(searchParams.get('createdBefore')!) : undefined,\n      lastFertilizedAfter: searchParams.get('lastFertilizedAfter') ? new Date(searchParams.get('lastFertilizedAfter')!) : undefined,\n      lastFertilizedBefore: searchParams.get('lastFertilizedBefore') ? new Date(searchParams.get('lastFertilizedBefore')!) : undefined,\n      limit: searchParams.get('limit') ? parseInt(searchParams.get('limit')!, 10) : 20,\n      offset: searchParams.get('offset') ? parseInt(searchParams.get('offset')!, 10) : 0,\n    };\n\n    // Validate filter parameters\n    const validatedFilters = plantInstanceFilterSchema.parse(filterParams);\n    \n    // Get plant instances with filters\n    const result = await PlantInstanceQueries.getWithFilters(validatedFilters);\n    \n    return NextResponse.json(result);\n  } catch (error) {\n    console.error('Failed to get plant instances:', error);\n    return NextResponse.json(\n      { \n        success: false,\n        error: 'Internal server error' \n      },\n      { status: 500 }\n    );\n  }\n}\n\n// POST /api/plant-instances - Create a new plant instance\nexport async function POST(request: NextRequest) {\n  try {\n    const authResult = await validateVerifiedRequest();\n    if (!authResult.user) {\n      return NextResponse.json({ \n        success: false,\n        error: authResult.error \n      }, { status: authResult.error === 'Email verification required' ? 403 : 401 });\n    }\n    \n    const { user } = authResult;\n\n    // Check if request is FormData or JSON\n    const contentType = request.headers.get('content-type');\n    let body: any;\n    \n    if (contentType?.includes('multipart/form-data')) {\n      // Handle FormData (for file uploads)\n      const formData = await request.formData();\n      body = {};\n      \n      // Helper function to convert file to base64\n      const fileToBase64 = async (file: File): Promise<string> => {\n        const bytes = await file.arrayBuffer();\n        const buffer = Buffer.from(bytes);\n        const base64 = buffer.toString('base64');\n        return `data:${file.type};base64,${base64}`;\n      };\n\n      const imageFiles: File[] = [];\n      const existingImages: string[] = [];\n      \n      // Extract form fields\n      for (const [key, value] of formData.entries()) {\n        if (key.startsWith('imageFiles[')) {\n          // Handle new image files\n          if (value instanceof File) {\n            imageFiles.push(value);\n          }\n        } else if (key.startsWith('existingImages[')) {\n          // Handle existing images\n          existingImages.push(value as string);\n        } else {\n          // Convert form values to appropriate types\n          if (key === 'plantId') {\n            body[key] = parseInt(value as string, 10);\n          } else if (key === 'isActive') {\n            body[key] = value === 'true';\n          } else {\n            body[key] = value;\n          }\n        }\n      }\n\n      // Convert new image files to base64\n      const newImageBase64s = await Promise.all(\n        imageFiles.map(file => fileToBase64(file))\n      );\n\n      // Combine existing images with new images\n      body.images = [...existingImages, ...newImageBase64s];\n    } else {\n      // Handle JSON\n      try {\n        body = await request.json();\n        if (!body || Object.keys(body).length === 0) {\n          return NextResponse.json(\n            { \n              success: false,\n              error: 'Request body is required' \n            },\n            { status: 400 }\n          );\n        }\n      } catch (jsonError) {\n        return NextResponse.json(\n          { \n            success: false,\n            error: 'Invalid JSON in request body' \n          },\n          { status: 400 }\n        );\n      }\n    }\n    \n    // Add user ID to the request body and convert date strings to Date objects\n    const instanceData = {\n      ...body,\n      userId: user.id,\n      // Convert date strings to Date objects if they exist and are not empty\n      lastFertilized: body.lastFertilized && body.lastFertilized !== '' ? new Date(body.lastFertilized) : null,\n      lastRepot: body.lastRepot && body.lastRepot !== '' ? new Date(body.lastRepot) : null,\n    };\n\n    // Validate the plant instance data\n    let validatedData;\n    try {\n      validatedData = createPlantInstanceSchema.parse(instanceData);\n    } catch (validationError) {\n      if (validationError instanceof z.ZodError) {\n        return NextResponse.json(\n          { \n            success: false,\n            error: 'Validation failed',\n            details: validationError.issues\n          },\n          { status: 400 }\n        );\n      }\n      return NextResponse.json(\n        { \n          success: false,\n          error: 'Validation failed',\n          details: validationError instanceof Error ? validationError.message : 'Invalid data'\n        },\n        { status: 400 }\n      );\n    }\n    \n    // Calculate initial fertilizer due date if schedule is provided\n    if (validatedData.fertilizerSchedule && !validatedData.fertilizerDue) {\n      const now = new Date();\n      const scheduleMatch = validatedData.fertilizerSchedule.match(/(\\d+)\\s*(day|week|month)s?/i);\n      \n      if (scheduleMatch) {\n        const [, amount, unit] = scheduleMatch;\n        const dueDate = new Date(now);\n        \n        switch (unit.toLowerCase()) {\n          case 'day':\n            dueDate.setDate(dueDate.getDate() + parseInt(amount, 10));\n            break;\n          case 'week':\n            dueDate.setDate(dueDate.getDate() + (parseInt(amount, 10) * 7));\n            break;\n          case 'month':\n            dueDate.setMonth(dueDate.getMonth() + parseInt(amount, 10));\n            break;\n        }\n        \n        validatedData.fertilizerDue = dueDate;\n      }\n    }\n\n    // Create the plant instance\n    const plantInstance = await PlantInstanceQueries.create(validatedData);\n    \n    // Get the enhanced plant instance with plant data\n    const enhancedInstance = await PlantInstanceQueries.getEnhancedById(plantInstance.id);\n    \n    return NextResponse.json({\n      success: true,\n      data: enhancedInstance\n    }, { status: 201 });\n  } catch (error) {\n    console.error('Failed to create plant instance:', error);\n    \n    if (error instanceof Error && error.message.includes('validation')) {\n      return NextResponse.json(\n        { \n          success: false,\n          error: 'Invalid plant instance data', \n          details: error.message \n        },\n        { status: 400 }\n      );\n    }\n    \n    return NextResponse.json(\n      { \n        success: false,\n        error: 'Failed to create plant instance' \n      },\n      { status: 500 }\n    );\n  }\n}"],
      names: ["GET", "POST", "request", "authResult", "validateVerifiedRequest", "user", "NextResponse", "json", "success", "error", "status", "searchParams", "URL", "url", "filterParams", "userId", "id", "location", "get", "undefined", "plantId", "parseInt", "isActive", "overdueOnly", "dueSoonDays", "createdAfter", "Date", "createdBefore", "lastFertilizedAfter", "lastFertilizedBefore", "limit", "offset", "validatedFilters", "plantInstanceFilterSchema", "parse", "result", "PlantInstanceQueries", "getWithFilters", "console", "contentType", "headers", "body", "includes", "formData", "fileToBase64", "file", "bytes", "arrayBuffer", "buffer", "Buffer", "from", "base64", "toString", "type", "imageFiles", "existingImages", "key", "value", "entries", "startsWith", "File", "push", "newImageBase64s", "Promise", "all", "map", "images", "Object", "keys", "length", "jsonError", "instanceData", "lastFertilized", "lastRepot", "validatedData", "createPlantInstanceSchema", "validationError", "z", "ZodError", "details", "issues", "Error", "message", "fertilizerSchedule", "fertilizerDue", "now", "scheduleMatch", "match", "amount", "unit", "dueDate", "toLowerCase", "setDate", "getDate", "setMonth", "getMonth", "plantInstance", "create", "enhancedInstance", "getEnhancedById", "data"],
      mappings: ";;;;;;;;;;;QAOsBA;eAAAA;;QAkDAC;eAAAA;;;wBAzDoB;qBACxB;gCACmB;8BACgC;yBAC7B;AAGjC,eAAeD,IAAIE,OAAoB;IAC5C,IAAI;QACF,MAAMC,aAAa,MAAMC,IAAAA,gCAAuB;QAChD,IAAI,CAACD,WAAWE,IAAI,EAAE;YACpB,OAAOC,oBAAY,CAACC,IAAI,CAAC;gBACvBC,SAAS;gBACTC,OAAON,WAAWM,KAAK;YACzB,GAAG;gBAAEC,QAAQP,WAAWM,KAAK,KAAK,gCAAgC,MAAM;YAAI;QAC9E;QAEA,MAAM,EAAEJ,IAAI,EAAE,GAAGF;QAEjB,MAAM,EAAEQ,YAAY,EAAE,GAAG,IAAIC,IAAIV,QAAQW,GAAG;QAE5C,0BAA0B;QAC1B,MAAMC,eAAe;YACnBC,QAAQV,KAAKW,EAAE;YACfC,UAAUN,aAAaO,GAAG,CAAC,eAAeC;YAC1CC,SAAST,aAAaO,GAAG,CAAC,aAAaG,SAASV,aAAaO,GAAG,CAAC,YAAa,MAAMC;YACpFG,UAAUX,aAAaO,GAAG,CAAC,cAAcP,aAAaO,GAAG,CAAC,gBAAgB,SAASC;YACnFI,aAAaZ,aAAaO,GAAG,CAAC,mBAAmB;YACjDM,aAAab,aAAaO,GAAG,CAAC,iBAAiBG,SAASV,aAAaO,GAAG,CAAC,gBAAiB,MAAMC;YAChGM,cAAcd,aAAaO,GAAG,CAAC,kBAAkB,IAAIQ,KAAKf,aAAaO,GAAG,CAAC,mBAAoBC;YAC/FQ,eAAehB,aAAaO,GAAG,CAAC,mBAAmB,IAAIQ,KAAKf,aAAaO,GAAG,CAAC,oBAAqBC;YAClGS,qBAAqBjB,aAAaO,GAAG,CAAC,yBAAyB,IAAIQ,KAAKf,aAAaO,GAAG,CAAC,0BAA2BC;YACpHU,sBAAsBlB,aAAaO,GAAG,CAAC,0BAA0B,IAAIQ,KAAKf,aAAaO,GAAG,CAAC,2BAA4BC;YACvHW,OAAOnB,aAAaO,GAAG,CAAC,WAAWG,SAASV,aAAaO,GAAG,CAAC,UAAW,MAAM;YAC9Ea,QAAQpB,aAAaO,GAAG,CAAC,YAAYG,SAASV,aAAaO,GAAG,CAAC,WAAY,MAAM;QACnF;QAEA,6BAA6B;QAC7B,MAAMc,mBAAmBC,uCAAyB,CAACC,KAAK,CAACpB;QAEzD,mCAAmC;QACnC,MAAMqB,SAAS,MAAMC,oCAAoB,CAACC,cAAc,CAACL;QAEzD,OAAO1B,oBAAY,CAACC,IAAI,CAAC4B;IAC3B,EAAE,OAAO1B,OAAO;QACd6B,QAAQ7B,KAAK,CAAC,kCAAkCA;QAChD,OAAOH,oBAAY,CAACC,IAAI,CACtB;YACEC,SAAS;YACTC,OAAO;QACT,GACA;YAAEC,QAAQ;QAAI;IAElB;AACF;AAGO,eAAeT,KAAKC,OAAoB;IAC7C,IAAI;QACF,MAAMC,aAAa,MAAMC,IAAAA,gCAAuB;QAChD,IAAI,CAACD,WAAWE,IAAI,EAAE;YACpB,OAAOC,oBAAY,CAACC,IAAI,CAAC;gBACvBC,SAAS;gBACTC,OAAON,WAAWM,KAAK;YACzB,GAAG;gBAAEC,QAAQP,WAAWM,KAAK,KAAK,gCAAgC,MAAM;YAAI;QAC9E;QAEA,MAAM,EAAEJ,IAAI,EAAE,GAAGF;QAEjB,uCAAuC;QACvC,MAAMoC,cAAcrC,QAAQsC,OAAO,CAACtB,GAAG,CAAC;QACxC,IAAIuB;QAEJ,IAAIF,aAAaG,SAAS,wBAAwB;YAChD,qCAAqC;YACrC,MAAMC,WAAW,MAAMzC,QAAQyC,QAAQ;YACvCF,OAAO,CAAC;YAER,4CAA4C;YAC5C,MAAMG,eAAe,OAAOC;gBAC1B,MAAMC,QAAQ,MAAMD,KAAKE,WAAW;gBACpC,MAAMC,SAASC,OAAOC,IAAI,CAACJ;gBAC3B,MAAMK,SAASH,OAAOI,QAAQ,CAAC;gBAC/B,OAAO,CAAC,KAAK,EAAEP,KAAKQ,IAAI,CAAC,QAAQ,EAAEF,QAAQ;YAC7C;YAEA,MAAMG,aAAqB,EAAE;YAC7B,MAAMC,iBAA2B,EAAE;YAEnC,sBAAsB;YACtB,KAAK,MAAM,CAACC,KAAKC,MAAM,IAAId,SAASe,OAAO,GAAI;gBAC7C,IAAIF,IAAIG,UAAU,CAAC,gBAAgB;oBACjC,yBAAyB;oBACzB,IAAIF,iBAAiBG,MAAM;wBACzBN,WAAWO,IAAI,CAACJ;oBAClB;gBACF,OAAO,IAAID,IAAIG,UAAU,CAAC,oBAAoB;oBAC5C,yBAAyB;oBACzBJ,eAAeM,IAAI,CAACJ;gBACtB,OAAO;oBACL,2CAA2C;oBAC3C,IAAID,QAAQ,WAAW;wBACrBf,IAAI,CAACe,IAAI,GAAGnC,SAASoC,OAAiB;oBACxC,OAAO,IAAID,QAAQ,YAAY;wBAC7Bf,IAAI,CAACe,IAAI,GAAGC,UAAU;oBACxB,OAAO;wBACLhB,IAAI,CAACe,IAAI,GAAGC;oBACd;gBACF;YACF;YAEA,oCAAoC;YACpC,MAAMK,kBAAkB,MAAMC,QAAQC,GAAG,CACvCV,WAAWW,GAAG,CAACpB,CAAAA,OAAQD,aAAaC;YAGtC,0CAA0C;YAC1CJ,KAAKyB,MAAM,GAAG;mBAAIX;mBAAmBO;aAAgB;QACvD,OAAO;YACL,cAAc;YACd,IAAI;gBACFrB,OAAO,MAAMvC,QAAQK,IAAI;gBACzB,IAAI,CAACkC,QAAQ0B,OAAOC,IAAI,CAAC3B,MAAM4B,MAAM,KAAK,GAAG;oBAC3C,OAAO/D,oBAAY,CAACC,IAAI,CACtB;wBACEC,SAAS;wBACTC,OAAO;oBACT,GACA;wBAAEC,QAAQ;oBAAI;gBAElB;YACF,EAAE,OAAO4D,WAAW;gBAClB,OAAOhE,oBAAY,CAACC,IAAI,CACtB;oBACEC,SAAS;oBACTC,OAAO;gBACT,GACA;oBAAEC,QAAQ;gBAAI;YAElB;QACF;QAEA,2EAA2E;QAC3E,MAAM6D,eAAe;YACnB,GAAG9B,IAAI;YACP1B,QAAQV,KAAKW,EAAE;YACf,uEAAuE;YACvEwD,gBAAgB/B,KAAK+B,cAAc,IAAI/B,KAAK+B,cAAc,KAAK,KAAK,IAAI9C,KAAKe,KAAK+B,cAAc,IAAI;YACpGC,WAAWhC,KAAKgC,SAAS,IAAIhC,KAAKgC,SAAS,KAAK,KAAK,IAAI/C,KAAKe,KAAKgC,SAAS,IAAI;QAClF;QAEA,mCAAmC;QACnC,IAAIC;QACJ,IAAI;YACFA,gBAAgBC,uCAAyB,CAACzC,KAAK,CAACqC;QAClD,EAAE,OAAOK,iBAAiB;YACxB,IAAIA,2BAA2BC,MAAC,CAACC,QAAQ,EAAE;gBACzC,OAAOxE,oBAAY,CAACC,IAAI,CACtB;oBACEC,SAAS;oBACTC,OAAO;oBACPsE,SAASH,gBAAgBI,MAAM;gBACjC,GACA;oBAAEtE,QAAQ;gBAAI;YAElB;YACA,OAAOJ,oBAAY,CAACC,IAAI,CACtB;gBACEC,SAAS;gBACTC,OAAO;gBACPsE,SAASH,2BAA2BK,QAAQL,gBAAgBM,OAAO,GAAG;YACxE,GACA;gBAAExE,QAAQ;YAAI;QAElB;QAEA,gEAAgE;QAChE,IAAIgE,cAAcS,kBAAkB,IAAI,CAACT,cAAcU,aAAa,EAAE;YACpE,MAAMC,MAAM,IAAI3D;YAChB,MAAM4D,gBAAgBZ,cAAcS,kBAAkB,CAACI,KAAK,CAAC;YAE7D,IAAID,eAAe;gBACjB,MAAM,GAAGE,QAAQC,KAAK,GAAGH;gBACzB,MAAMI,UAAU,IAAIhE,KAAK2D;gBAEzB,OAAQI,KAAKE,WAAW;oBACtB,KAAK;wBACHD,QAAQE,OAAO,CAACF,QAAQG,OAAO,KAAKxE,SAASmE,QAAQ;wBACrD;oBACF,KAAK;wBACHE,QAAQE,OAAO,CAACF,QAAQG,OAAO,KAAMxE,SAASmE,QAAQ,MAAM;wBAC5D;oBACF,KAAK;wBACHE,QAAQI,QAAQ,CAACJ,QAAQK,QAAQ,KAAK1E,SAASmE,QAAQ;wBACvD;gBACJ;gBAEAd,cAAcU,aAAa,GAAGM;YAChC;QACF;QAEA,4BAA4B;QAC5B,MAAMM,gBAAgB,MAAM5D,oCAAoB,CAAC6D,MAAM,CAACvB;QAExD,kDAAkD;QAClD,MAAMwB,mBAAmB,MAAM9D,oCAAoB,CAAC+D,eAAe,CAACH,cAAchF,EAAE;QAEpF,OAAOV,oBAAY,CAACC,IAAI,CAAC;YACvBC,SAAS;YACT4F,MAAMF;QACR,GAAG;YAAExF,QAAQ;QAAI;IACnB,EAAE,OAAOD,OAAO;QACd6B,QAAQ7B,KAAK,CAAC,oCAAoCA;QAElD,IAAIA,iBAAiBwE,SAASxE,MAAMyE,OAAO,CAACxC,QAAQ,CAAC,eAAe;YAClE,OAAOpC,oBAAY,CAACC,IAAI,CACtB;gBACEC,SAAS;gBACTC,OAAO;gBACPsE,SAAStE,MAAMyE,OAAO;YACxB,GACA;gBAAExE,QAAQ;YAAI;QAElB;QAEA,OAAOJ,oBAAY,CAACC,IAAI,CACtB;YACEC,SAAS;YACTC,OAAO;QACT,GACA;YAAEC,QAAQ;QAAI;IAElB;AACF"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "07781f33ac6921778ed9a72cee686ce3a8c51e08"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2gjjkbydq5 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2gjjkbydq5();
cov_2gjjkbydq5().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_2gjjkbydq5().f[0]++;
  cov_2gjjkbydq5().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_2gjjkbydq5().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_2gjjkbydq5().s[3]++;
_export(exports, {
  get GET() {
    /* istanbul ignore next */
    cov_2gjjkbydq5().f[1]++;
    cov_2gjjkbydq5().s[4]++;
    return GET;
  },
  get POST() {
    /* istanbul ignore next */
    cov_2gjjkbydq5().f[2]++;
    cov_2gjjkbydq5().s[5]++;
    return POST;
  }
});
const _server =
/* istanbul ignore next */
(cov_2gjjkbydq5().s[6]++, require("next/server"));
const _zod =
/* istanbul ignore next */
(cov_2gjjkbydq5().s[7]++, require("zod"));
const _plantinstances =
/* istanbul ignore next */
(cov_2gjjkbydq5().s[8]++, require("../../../lib/db/queries/plant-instances"));
const _plantschemas =
/* istanbul ignore next */
(cov_2gjjkbydq5().s[9]++, require("../../../lib/validation/plant-schemas"));
const _server1 =
/* istanbul ignore next */
(cov_2gjjkbydq5().s[10]++, require("../../../lib/auth/server"));
async function GET(request) {
  /* istanbul ignore next */
  cov_2gjjkbydq5().f[3]++;
  cov_2gjjkbydq5().s[11]++;
  try {
    const authResult =
    /* istanbul ignore next */
    (cov_2gjjkbydq5().s[12]++, await (0, _server1.validateVerifiedRequest)());
    /* istanbul ignore next */
    cov_2gjjkbydq5().s[13]++;
    if (!authResult.user) {
      /* istanbul ignore next */
      cov_2gjjkbydq5().b[0][0]++;
      cov_2gjjkbydq5().s[14]++;
      return _server.NextResponse.json({
        success: false,
        error: authResult.error
      }, {
        status: authResult.error === 'Email verification required' ?
        /* istanbul ignore next */
        (cov_2gjjkbydq5().b[1][0]++, 403) :
        /* istanbul ignore next */
        (cov_2gjjkbydq5().b[1][1]++, 401)
      });
    } else
    /* istanbul ignore next */
    {
      cov_2gjjkbydq5().b[0][1]++;
    }
    const {
      user
    } =
    /* istanbul ignore next */
    (cov_2gjjkbydq5().s[15]++, authResult);
    const {
      searchParams
    } =
    /* istanbul ignore next */
    (cov_2gjjkbydq5().s[16]++, new URL(request.url));
    // Parse filter parameters
    const filterParams =
    /* istanbul ignore next */
    (cov_2gjjkbydq5().s[17]++, {
      userId: user.id,
      location:
      /* istanbul ignore next */
      (cov_2gjjkbydq5().b[2][0]++, searchParams.get('location')) ||
      /* istanbul ignore next */
      (cov_2gjjkbydq5().b[2][1]++, undefined),
      plantId: searchParams.get('plantId') ?
      /* istanbul ignore next */
      (cov_2gjjkbydq5().b[3][0]++, parseInt(searchParams.get('plantId'), 10)) :
      /* istanbul ignore next */
      (cov_2gjjkbydq5().b[3][1]++, undefined),
      isActive: searchParams.get('isActive') ?
      /* istanbul ignore next */
      (cov_2gjjkbydq5().b[4][0]++, searchParams.get('isActive') === 'true') :
      /* istanbul ignore next */
      (cov_2gjjkbydq5().b[4][1]++, undefined),
      overdueOnly: searchParams.get('overdueOnly') === 'true',
      dueSoonDays: searchParams.get('dueSoonDays') ?
      /* istanbul ignore next */
      (cov_2gjjkbydq5().b[5][0]++, parseInt(searchParams.get('dueSoonDays'), 10)) :
      /* istanbul ignore next */
      (cov_2gjjkbydq5().b[5][1]++, undefined),
      createdAfter: searchParams.get('createdAfter') ?
      /* istanbul ignore next */
      (cov_2gjjkbydq5().b[6][0]++, new Date(searchParams.get('createdAfter'))) :
      /* istanbul ignore next */
      (cov_2gjjkbydq5().b[6][1]++, undefined),
      createdBefore: searchParams.get('createdBefore') ?
      /* istanbul ignore next */
      (cov_2gjjkbydq5().b[7][0]++, new Date(searchParams.get('createdBefore'))) :
      /* istanbul ignore next */
      (cov_2gjjkbydq5().b[7][1]++, undefined),
      lastFertilizedAfter: searchParams.get('lastFertilizedAfter') ?
      /* istanbul ignore next */
      (cov_2gjjkbydq5().b[8][0]++, new Date(searchParams.get('lastFertilizedAfter'))) :
      /* istanbul ignore next */
      (cov_2gjjkbydq5().b[8][1]++, undefined),
      lastFertilizedBefore: searchParams.get('lastFertilizedBefore') ?
      /* istanbul ignore next */
      (cov_2gjjkbydq5().b[9][0]++, new Date(searchParams.get('lastFertilizedBefore'))) :
      /* istanbul ignore next */
      (cov_2gjjkbydq5().b[9][1]++, undefined),
      limit: searchParams.get('limit') ?
      /* istanbul ignore next */
      (cov_2gjjkbydq5().b[10][0]++, parseInt(searchParams.get('limit'), 10)) :
      /* istanbul ignore next */
      (cov_2gjjkbydq5().b[10][1]++, 20),
      offset: searchParams.get('offset') ?
      /* istanbul ignore next */
      (cov_2gjjkbydq5().b[11][0]++, parseInt(searchParams.get('offset'), 10)) :
      /* istanbul ignore next */
      (cov_2gjjkbydq5().b[11][1]++, 0)
    });
    // Validate filter parameters
    const validatedFilters =
    /* istanbul ignore next */
    (cov_2gjjkbydq5().s[18]++, _plantschemas.plantInstanceFilterSchema.parse(filterParams));
    // Get plant instances with filters
    const result =
    /* istanbul ignore next */
    (cov_2gjjkbydq5().s[19]++, await _plantinstances.PlantInstanceQueries.getWithFilters(validatedFilters));
    /* istanbul ignore next */
    cov_2gjjkbydq5().s[20]++;
    return _server.NextResponse.json(result);
  } catch (error) {
    /* istanbul ignore next */
    cov_2gjjkbydq5().s[21]++;
    console.error('Failed to get plant instances:', error);
    /* istanbul ignore next */
    cov_2gjjkbydq5().s[22]++;
    return _server.NextResponse.json({
      success: false,
      error: 'Internal server error'
    }, {
      status: 500
    });
  }
}
async function POST(request) {
  /* istanbul ignore next */
  cov_2gjjkbydq5().f[4]++;
  cov_2gjjkbydq5().s[23]++;
  try {
    const authResult =
    /* istanbul ignore next */
    (cov_2gjjkbydq5().s[24]++, await (0, _server1.validateVerifiedRequest)());
    /* istanbul ignore next */
    cov_2gjjkbydq5().s[25]++;
    if (!authResult.user) {
      /* istanbul ignore next */
      cov_2gjjkbydq5().b[12][0]++;
      cov_2gjjkbydq5().s[26]++;
      return _server.NextResponse.json({
        success: false,
        error: authResult.error
      }, {
        status: authResult.error === 'Email verification required' ?
        /* istanbul ignore next */
        (cov_2gjjkbydq5().b[13][0]++, 403) :
        /* istanbul ignore next */
        (cov_2gjjkbydq5().b[13][1]++, 401)
      });
    } else
    /* istanbul ignore next */
    {
      cov_2gjjkbydq5().b[12][1]++;
    }
    const {
      user
    } =
    /* istanbul ignore next */
    (cov_2gjjkbydq5().s[27]++, authResult);
    // Check if request is FormData or JSON
    const contentType =
    /* istanbul ignore next */
    (cov_2gjjkbydq5().s[28]++, request.headers.get('content-type'));
    let body;
    /* istanbul ignore next */
    cov_2gjjkbydq5().s[29]++;
    if (contentType?.includes('multipart/form-data')) {
      /* istanbul ignore next */
      cov_2gjjkbydq5().b[14][0]++;
      // Handle FormData (for file uploads)
      const formData =
      /* istanbul ignore next */
      (cov_2gjjkbydq5().s[30]++, await request.formData());
      /* istanbul ignore next */
      cov_2gjjkbydq5().s[31]++;
      body = {};
      // Helper function to convert file to base64
      /* istanbul ignore next */
      cov_2gjjkbydq5().s[32]++;
      const fileToBase64 = async file => {
        /* istanbul ignore next */
        cov_2gjjkbydq5().f[5]++;
        const bytes =
        /* istanbul ignore next */
        (cov_2gjjkbydq5().s[33]++, await file.arrayBuffer());
        const buffer =
        /* istanbul ignore next */
        (cov_2gjjkbydq5().s[34]++, Buffer.from(bytes));
        const base64 =
        /* istanbul ignore next */
        (cov_2gjjkbydq5().s[35]++, buffer.toString('base64'));
        /* istanbul ignore next */
        cov_2gjjkbydq5().s[36]++;
        return `data:${file.type};base64,${base64}`;
      };
      const imageFiles =
      /* istanbul ignore next */
      (cov_2gjjkbydq5().s[37]++, []);
      const existingImages =
      /* istanbul ignore next */
      (cov_2gjjkbydq5().s[38]++, []);
      // Extract form fields
      /* istanbul ignore next */
      cov_2gjjkbydq5().s[39]++;
      for (const [key, value] of formData.entries()) {
        /* istanbul ignore next */
        cov_2gjjkbydq5().s[40]++;
        if (key.startsWith('imageFiles[')) {
          /* istanbul ignore next */
          cov_2gjjkbydq5().b[15][0]++;
          cov_2gjjkbydq5().s[41]++;
          // Handle new image files
          if (value instanceof File) {
            /* istanbul ignore next */
            cov_2gjjkbydq5().b[16][0]++;
            cov_2gjjkbydq5().s[42]++;
            imageFiles.push(value);
          } else
          /* istanbul ignore next */
          {
            cov_2gjjkbydq5().b[16][1]++;
          }
        } else {
          /* istanbul ignore next */
          cov_2gjjkbydq5().b[15][1]++;
          cov_2gjjkbydq5().s[43]++;
          if (key.startsWith('existingImages[')) {
            /* istanbul ignore next */
            cov_2gjjkbydq5().b[17][0]++;
            cov_2gjjkbydq5().s[44]++;
            // Handle existing images
            existingImages.push(value);
          } else {
            /* istanbul ignore next */
            cov_2gjjkbydq5().b[17][1]++;
            cov_2gjjkbydq5().s[45]++;
            // Convert form values to appropriate types
            if (key === 'plantId') {
              /* istanbul ignore next */
              cov_2gjjkbydq5().b[18][0]++;
              cov_2gjjkbydq5().s[46]++;
              body[key] = parseInt(value, 10);
            } else {
              /* istanbul ignore next */
              cov_2gjjkbydq5().b[18][1]++;
              cov_2gjjkbydq5().s[47]++;
              if (key === 'isActive') {
                /* istanbul ignore next */
                cov_2gjjkbydq5().b[19][0]++;
                cov_2gjjkbydq5().s[48]++;
                body[key] = value === 'true';
              } else {
                /* istanbul ignore next */
                cov_2gjjkbydq5().b[19][1]++;
                cov_2gjjkbydq5().s[49]++;
                body[key] = value;
              }
            }
          }
        }
      }
      // Convert new image files to base64
      const newImageBase64s =
      /* istanbul ignore next */
      (cov_2gjjkbydq5().s[50]++, await Promise.all(imageFiles.map(file => {
        /* istanbul ignore next */
        cov_2gjjkbydq5().f[6]++;
        cov_2gjjkbydq5().s[51]++;
        return fileToBase64(file);
      })));
      // Combine existing images with new images
      /* istanbul ignore next */
      cov_2gjjkbydq5().s[52]++;
      body.images = [...existingImages, ...newImageBase64s];
    } else {
      /* istanbul ignore next */
      cov_2gjjkbydq5().b[14][1]++;
      cov_2gjjkbydq5().s[53]++;
      // Handle JSON
      try {
        /* istanbul ignore next */
        cov_2gjjkbydq5().s[54]++;
        body = await request.json();
        /* istanbul ignore next */
        cov_2gjjkbydq5().s[55]++;
        if (
        /* istanbul ignore next */
        (cov_2gjjkbydq5().b[21][0]++, !body) ||
        /* istanbul ignore next */
        (cov_2gjjkbydq5().b[21][1]++, Object.keys(body).length === 0)) {
          /* istanbul ignore next */
          cov_2gjjkbydq5().b[20][0]++;
          cov_2gjjkbydq5().s[56]++;
          return _server.NextResponse.json({
            success: false,
            error: 'Request body is required'
          }, {
            status: 400
          });
        } else
        /* istanbul ignore next */
        {
          cov_2gjjkbydq5().b[20][1]++;
        }
      } catch (jsonError) {
        /* istanbul ignore next */
        cov_2gjjkbydq5().s[57]++;
        return _server.NextResponse.json({
          success: false,
          error: 'Invalid JSON in request body'
        }, {
          status: 400
        });
      }
    }
    // Add user ID to the request body and convert date strings to Date objects
    const instanceData =
    /* istanbul ignore next */
    (cov_2gjjkbydq5().s[58]++, {
      ...body,
      userId: user.id,
      // Convert date strings to Date objects if they exist and are not empty
      lastFertilized:
      /* istanbul ignore next */
      (cov_2gjjkbydq5().b[23][0]++, body.lastFertilized) &&
      /* istanbul ignore next */
      (cov_2gjjkbydq5().b[23][1]++, body.lastFertilized !== '') ?
      /* istanbul ignore next */
      (cov_2gjjkbydq5().b[22][0]++, new Date(body.lastFertilized)) :
      /* istanbul ignore next */
      (cov_2gjjkbydq5().b[22][1]++, null),
      lastRepot:
      /* istanbul ignore next */
      (cov_2gjjkbydq5().b[25][0]++, body.lastRepot) &&
      /* istanbul ignore next */
      (cov_2gjjkbydq5().b[25][1]++, body.lastRepot !== '') ?
      /* istanbul ignore next */
      (cov_2gjjkbydq5().b[24][0]++, new Date(body.lastRepot)) :
      /* istanbul ignore next */
      (cov_2gjjkbydq5().b[24][1]++, null)
    });
    // Validate the plant instance data
    let validatedData;
    /* istanbul ignore next */
    cov_2gjjkbydq5().s[59]++;
    try {
      /* istanbul ignore next */
      cov_2gjjkbydq5().s[60]++;
      validatedData = _plantschemas.createPlantInstanceSchema.parse(instanceData);
    } catch (validationError) {
      /* istanbul ignore next */
      cov_2gjjkbydq5().s[61]++;
      if (validationError instanceof _zod.z.ZodError) {
        /* istanbul ignore next */
        cov_2gjjkbydq5().b[26][0]++;
        cov_2gjjkbydq5().s[62]++;
        return _server.NextResponse.json({
          success: false,
          error: 'Validation failed',
          details: validationError.issues
        }, {
          status: 400
        });
      } else
      /* istanbul ignore next */
      {
        cov_2gjjkbydq5().b[26][1]++;
      }
      cov_2gjjkbydq5().s[63]++;
      return _server.NextResponse.json({
        success: false,
        error: 'Validation failed',
        details: validationError instanceof Error ?
        /* istanbul ignore next */
        (cov_2gjjkbydq5().b[27][0]++, validationError.message) :
        /* istanbul ignore next */
        (cov_2gjjkbydq5().b[27][1]++, 'Invalid data')
      }, {
        status: 400
      });
    }
    // Calculate initial fertilizer due date if schedule is provided
    /* istanbul ignore next */
    cov_2gjjkbydq5().s[64]++;
    if (
    /* istanbul ignore next */
    (cov_2gjjkbydq5().b[29][0]++, validatedData.fertilizerSchedule) &&
    /* istanbul ignore next */
    (cov_2gjjkbydq5().b[29][1]++, !validatedData.fertilizerDue)) {
      /* istanbul ignore next */
      cov_2gjjkbydq5().b[28][0]++;
      const now =
      /* istanbul ignore next */
      (cov_2gjjkbydq5().s[65]++, new Date());
      const scheduleMatch =
      /* istanbul ignore next */
      (cov_2gjjkbydq5().s[66]++, validatedData.fertilizerSchedule.match(/(\d+)\s*(day|week|month)s?/i));
      /* istanbul ignore next */
      cov_2gjjkbydq5().s[67]++;
      if (scheduleMatch) {
        /* istanbul ignore next */
        cov_2gjjkbydq5().b[30][0]++;
        const [, amount, unit] =
        /* istanbul ignore next */
        (cov_2gjjkbydq5().s[68]++, scheduleMatch);
        const dueDate =
        /* istanbul ignore next */
        (cov_2gjjkbydq5().s[69]++, new Date(now));
        /* istanbul ignore next */
        cov_2gjjkbydq5().s[70]++;
        switch (unit.toLowerCase()) {
          case 'day':
            /* istanbul ignore next */
            cov_2gjjkbydq5().b[31][0]++;
            cov_2gjjkbydq5().s[71]++;
            dueDate.setDate(dueDate.getDate() + parseInt(amount, 10));
            /* istanbul ignore next */
            cov_2gjjkbydq5().s[72]++;
            break;
          case 'week':
            /* istanbul ignore next */
            cov_2gjjkbydq5().b[31][1]++;
            cov_2gjjkbydq5().s[73]++;
            dueDate.setDate(dueDate.getDate() + parseInt(amount, 10) * 7);
            /* istanbul ignore next */
            cov_2gjjkbydq5().s[74]++;
            break;
          case 'month':
            /* istanbul ignore next */
            cov_2gjjkbydq5().b[31][2]++;
            cov_2gjjkbydq5().s[75]++;
            dueDate.setMonth(dueDate.getMonth() + parseInt(amount, 10));
            /* istanbul ignore next */
            cov_2gjjkbydq5().s[76]++;
            break;
        }
        /* istanbul ignore next */
        cov_2gjjkbydq5().s[77]++;
        validatedData.fertilizerDue = dueDate;
      } else
      /* istanbul ignore next */
      {
        cov_2gjjkbydq5().b[30][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_2gjjkbydq5().b[28][1]++;
    }
    // Create the plant instance
    const plantInstance =
    /* istanbul ignore next */
    (cov_2gjjkbydq5().s[78]++, await _plantinstances.PlantInstanceQueries.create(validatedData));
    // Get the enhanced plant instance with plant data
    const enhancedInstance =
    /* istanbul ignore next */
    (cov_2gjjkbydq5().s[79]++, await _plantinstances.PlantInstanceQueries.getEnhancedById(plantInstance.id));
    /* istanbul ignore next */
    cov_2gjjkbydq5().s[80]++;
    return _server.NextResponse.json({
      success: true,
      data: enhancedInstance
    }, {
      status: 201
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2gjjkbydq5().s[81]++;
    console.error('Failed to create plant instance:', error);
    /* istanbul ignore next */
    cov_2gjjkbydq5().s[82]++;
    if (
    /* istanbul ignore next */
    (cov_2gjjkbydq5().b[33][0]++, error instanceof Error) &&
    /* istanbul ignore next */
    (cov_2gjjkbydq5().b[33][1]++, error.message.includes('validation'))) {
      /* istanbul ignore next */
      cov_2gjjkbydq5().b[32][0]++;
      cov_2gjjkbydq5().s[83]++;
      return _server.NextResponse.json({
        success: false,
        error: 'Invalid plant instance data',
        details: error.message
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_2gjjkbydq5().b[32][1]++;
    }
    cov_2gjjkbydq5().s[84]++;
    return _server.NextResponse.json({
      success: false,
      error: 'Failed to create plant instance'
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJHRVQiLCJjb3ZfMmdqamtieWRxNSIsImYiLCJzIiwiUE9TVCIsInJlcXVlc3QiLCJhdXRoUmVzdWx0IiwiX3NlcnZlcjEiLCJ2YWxpZGF0ZVZlcmlmaWVkUmVxdWVzdCIsInVzZXIiLCJiIiwiX3NlcnZlciIsIk5leHRSZXNwb25zZSIsImpzb24iLCJzdWNjZXNzIiwiZXJyb3IiLCJzdGF0dXMiLCJzZWFyY2hQYXJhbXMiLCJVUkwiLCJ1cmwiLCJmaWx0ZXJQYXJhbXMiLCJ1c2VySWQiLCJpZCIsImxvY2F0aW9uIiwiZ2V0IiwidW5kZWZpbmVkIiwicGxhbnRJZCIsInBhcnNlSW50IiwiaXNBY3RpdmUiLCJvdmVyZHVlT25seSIsImR1ZVNvb25EYXlzIiwiY3JlYXRlZEFmdGVyIiwiRGF0ZSIsImNyZWF0ZWRCZWZvcmUiLCJsYXN0RmVydGlsaXplZEFmdGVyIiwibGFzdEZlcnRpbGl6ZWRCZWZvcmUiLCJsaW1pdCIsIm9mZnNldCIsInZhbGlkYXRlZEZpbHRlcnMiLCJfcGxhbnRzY2hlbWFzIiwicGxhbnRJbnN0YW5jZUZpbHRlclNjaGVtYSIsInBhcnNlIiwicmVzdWx0IiwiX3BsYW50aW5zdGFuY2VzIiwiUGxhbnRJbnN0YW5jZVF1ZXJpZXMiLCJnZXRXaXRoRmlsdGVycyIsImNvbnNvbGUiLCJjb250ZW50VHlwZSIsImhlYWRlcnMiLCJib2R5IiwiaW5jbHVkZXMiLCJmb3JtRGF0YSIsImZpbGVUb0Jhc2U2NCIsImZpbGUiLCJieXRlcyIsImFycmF5QnVmZmVyIiwiYnVmZmVyIiwiQnVmZmVyIiwiZnJvbSIsImJhc2U2NCIsInRvU3RyaW5nIiwidHlwZSIsImltYWdlRmlsZXMiLCJleGlzdGluZ0ltYWdlcyIsImtleSIsInZhbHVlIiwiZW50cmllcyIsInN0YXJ0c1dpdGgiLCJGaWxlIiwicHVzaCIsIm5ld0ltYWdlQmFzZTY0cyIsIlByb21pc2UiLCJhbGwiLCJtYXAiLCJpbWFnZXMiLCJPYmplY3QiLCJrZXlzIiwibGVuZ3RoIiwianNvbkVycm9yIiwiaW5zdGFuY2VEYXRhIiwibGFzdEZlcnRpbGl6ZWQiLCJsYXN0UmVwb3QiLCJ2YWxpZGF0ZWREYXRhIiwiY3JlYXRlUGxhbnRJbnN0YW5jZVNjaGVtYSIsInZhbGlkYXRpb25FcnJvciIsIl96b2QiLCJ6IiwiWm9kRXJyb3IiLCJkZXRhaWxzIiwiaXNzdWVzIiwiRXJyb3IiLCJtZXNzYWdlIiwiZmVydGlsaXplclNjaGVkdWxlIiwiZmVydGlsaXplckR1ZSIsIm5vdyIsInNjaGVkdWxlTWF0Y2giLCJtYXRjaCIsImFtb3VudCIsInVuaXQiLCJkdWVEYXRlIiwidG9Mb3dlckNhc2UiLCJzZXREYXRlIiwiZ2V0RGF0ZSIsInNldE1vbnRoIiwiZ2V0TW9udGgiLCJwbGFudEluc3RhbmNlIiwiY3JlYXRlIiwiZW5oYW5jZWRJbnN0YW5jZSIsImdldEVuaGFuY2VkQnlJZCIsImRhdGEiXSwic291cmNlcyI6WyIvVXNlcnMvc3RlZmFuYmVra2VyL3Byb2plY3RzL2ZhbmN5LXBsYW50aWVzL3NyYy9hcHAvYXBpL3BsYW50LWluc3RhbmNlcy9yb3V0ZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZXh0UmVxdWVzdCwgTmV4dFJlc3BvbnNlIH0gZnJvbSAnbmV4dC9zZXJ2ZXInO1xuaW1wb3J0IHsgeiB9IGZyb20gJ3pvZCc7XG5pbXBvcnQgeyBQbGFudEluc3RhbmNlUXVlcmllcyB9IGZyb20gJ0AvbGliL2RiL3F1ZXJpZXMvcGxhbnQtaW5zdGFuY2VzJztcbmltcG9ydCB7IGNyZWF0ZVBsYW50SW5zdGFuY2VTY2hlbWEsIHBsYW50SW5zdGFuY2VGaWx0ZXJTY2hlbWEgfSBmcm9tICdAL2xpYi92YWxpZGF0aW9uL3BsYW50LXNjaGVtYXMnO1xuaW1wb3J0IHsgdmFsaWRhdGVWZXJpZmllZFJlcXVlc3QgfSBmcm9tICdAL2xpYi9hdXRoL3NlcnZlcic7XG5cbi8vIEdFVCAvYXBpL3BsYW50LWluc3RhbmNlcyAtIEdldCBwbGFudCBpbnN0YW5jZXMgd2l0aCBvcHRpb25hbCBmaWx0ZXJpbmdcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBHRVQocmVxdWVzdDogTmV4dFJlcXVlc3QpIHtcbiAgdHJ5IHtcbiAgICBjb25zdCBhdXRoUmVzdWx0ID0gYXdhaXQgdmFsaWRhdGVWZXJpZmllZFJlcXVlc3QoKTtcbiAgICBpZiAoIWF1dGhSZXN1bHQudXNlcikge1xuICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHsgXG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICBlcnJvcjogYXV0aFJlc3VsdC5lcnJvciBcbiAgICAgIH0sIHsgc3RhdHVzOiBhdXRoUmVzdWx0LmVycm9yID09PSAnRW1haWwgdmVyaWZpY2F0aW9uIHJlcXVpcmVkJyA/IDQwMyA6IDQwMSB9KTtcbiAgICB9XG4gICAgXG4gICAgY29uc3QgeyB1c2VyIH0gPSBhdXRoUmVzdWx0O1xuXG4gICAgY29uc3QgeyBzZWFyY2hQYXJhbXMgfSA9IG5ldyBVUkwocmVxdWVzdC51cmwpO1xuICAgIFxuICAgIC8vIFBhcnNlIGZpbHRlciBwYXJhbWV0ZXJzXG4gICAgY29uc3QgZmlsdGVyUGFyYW1zID0ge1xuICAgICAgdXNlcklkOiB1c2VyLmlkLFxuICAgICAgbG9jYXRpb246IHNlYXJjaFBhcmFtcy5nZXQoJ2xvY2F0aW9uJykgfHwgdW5kZWZpbmVkLFxuICAgICAgcGxhbnRJZDogc2VhcmNoUGFyYW1zLmdldCgncGxhbnRJZCcpID8gcGFyc2VJbnQoc2VhcmNoUGFyYW1zLmdldCgncGxhbnRJZCcpISwgMTApIDogdW5kZWZpbmVkLFxuICAgICAgaXNBY3RpdmU6IHNlYXJjaFBhcmFtcy5nZXQoJ2lzQWN0aXZlJykgPyBzZWFyY2hQYXJhbXMuZ2V0KCdpc0FjdGl2ZScpID09PSAndHJ1ZScgOiB1bmRlZmluZWQsXG4gICAgICBvdmVyZHVlT25seTogc2VhcmNoUGFyYW1zLmdldCgnb3ZlcmR1ZU9ubHknKSA9PT0gJ3RydWUnLFxuICAgICAgZHVlU29vbkRheXM6IHNlYXJjaFBhcmFtcy5nZXQoJ2R1ZVNvb25EYXlzJykgPyBwYXJzZUludChzZWFyY2hQYXJhbXMuZ2V0KCdkdWVTb29uRGF5cycpISwgMTApIDogdW5kZWZpbmVkLFxuICAgICAgY3JlYXRlZEFmdGVyOiBzZWFyY2hQYXJhbXMuZ2V0KCdjcmVhdGVkQWZ0ZXInKSA/IG5ldyBEYXRlKHNlYXJjaFBhcmFtcy5nZXQoJ2NyZWF0ZWRBZnRlcicpISkgOiB1bmRlZmluZWQsXG4gICAgICBjcmVhdGVkQmVmb3JlOiBzZWFyY2hQYXJhbXMuZ2V0KCdjcmVhdGVkQmVmb3JlJykgPyBuZXcgRGF0ZShzZWFyY2hQYXJhbXMuZ2V0KCdjcmVhdGVkQmVmb3JlJykhKSA6IHVuZGVmaW5lZCxcbiAgICAgIGxhc3RGZXJ0aWxpemVkQWZ0ZXI6IHNlYXJjaFBhcmFtcy5nZXQoJ2xhc3RGZXJ0aWxpemVkQWZ0ZXInKSA/IG5ldyBEYXRlKHNlYXJjaFBhcmFtcy5nZXQoJ2xhc3RGZXJ0aWxpemVkQWZ0ZXInKSEpIDogdW5kZWZpbmVkLFxuICAgICAgbGFzdEZlcnRpbGl6ZWRCZWZvcmU6IHNlYXJjaFBhcmFtcy5nZXQoJ2xhc3RGZXJ0aWxpemVkQmVmb3JlJykgPyBuZXcgRGF0ZShzZWFyY2hQYXJhbXMuZ2V0KCdsYXN0RmVydGlsaXplZEJlZm9yZScpISkgOiB1bmRlZmluZWQsXG4gICAgICBsaW1pdDogc2VhcmNoUGFyYW1zLmdldCgnbGltaXQnKSA/IHBhcnNlSW50KHNlYXJjaFBhcmFtcy5nZXQoJ2xpbWl0JykhLCAxMCkgOiAyMCxcbiAgICAgIG9mZnNldDogc2VhcmNoUGFyYW1zLmdldCgnb2Zmc2V0JykgPyBwYXJzZUludChzZWFyY2hQYXJhbXMuZ2V0KCdvZmZzZXQnKSEsIDEwKSA6IDAsXG4gICAgfTtcblxuICAgIC8vIFZhbGlkYXRlIGZpbHRlciBwYXJhbWV0ZXJzXG4gICAgY29uc3QgdmFsaWRhdGVkRmlsdGVycyA9IHBsYW50SW5zdGFuY2VGaWx0ZXJTY2hlbWEucGFyc2UoZmlsdGVyUGFyYW1zKTtcbiAgICBcbiAgICAvLyBHZXQgcGxhbnQgaW5zdGFuY2VzIHdpdGggZmlsdGVyc1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IFBsYW50SW5zdGFuY2VRdWVyaWVzLmdldFdpdGhGaWx0ZXJzKHZhbGlkYXRlZEZpbHRlcnMpO1xuICAgIFxuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihyZXN1bHQpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBnZXQgcGxhbnQgaW5zdGFuY2VzOicsIGVycm9yKTtcbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXG4gICAgICB7IFxuICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgZXJyb3I6ICdJbnRlcm5hbCBzZXJ2ZXIgZXJyb3InIFxuICAgICAgfSxcbiAgICAgIHsgc3RhdHVzOiA1MDAgfVxuICAgICk7XG4gIH1cbn1cblxuLy8gUE9TVCAvYXBpL3BsYW50LWluc3RhbmNlcyAtIENyZWF0ZSBhIG5ldyBwbGFudCBpbnN0YW5jZVxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIFBPU1QocmVxdWVzdDogTmV4dFJlcXVlc3QpIHtcbiAgdHJ5IHtcbiAgICBjb25zdCBhdXRoUmVzdWx0ID0gYXdhaXQgdmFsaWRhdGVWZXJpZmllZFJlcXVlc3QoKTtcbiAgICBpZiAoIWF1dGhSZXN1bHQudXNlcikge1xuICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHsgXG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICBlcnJvcjogYXV0aFJlc3VsdC5lcnJvciBcbiAgICAgIH0sIHsgc3RhdHVzOiBhdXRoUmVzdWx0LmVycm9yID09PSAnRW1haWwgdmVyaWZpY2F0aW9uIHJlcXVpcmVkJyA/IDQwMyA6IDQwMSB9KTtcbiAgICB9XG4gICAgXG4gICAgY29uc3QgeyB1c2VyIH0gPSBhdXRoUmVzdWx0O1xuXG4gICAgLy8gQ2hlY2sgaWYgcmVxdWVzdCBpcyBGb3JtRGF0YSBvciBKU09OXG4gICAgY29uc3QgY29udGVudFR5cGUgPSByZXF1ZXN0LmhlYWRlcnMuZ2V0KCdjb250ZW50LXR5cGUnKTtcbiAgICBsZXQgYm9keTogYW55O1xuICAgIFxuICAgIGlmIChjb250ZW50VHlwZT8uaW5jbHVkZXMoJ211bHRpcGFydC9mb3JtLWRhdGEnKSkge1xuICAgICAgLy8gSGFuZGxlIEZvcm1EYXRhIChmb3IgZmlsZSB1cGxvYWRzKVxuICAgICAgY29uc3QgZm9ybURhdGEgPSBhd2FpdCByZXF1ZXN0LmZvcm1EYXRhKCk7XG4gICAgICBib2R5ID0ge307XG4gICAgICBcbiAgICAgIC8vIEhlbHBlciBmdW5jdGlvbiB0byBjb252ZXJ0IGZpbGUgdG8gYmFzZTY0XG4gICAgICBjb25zdCBmaWxlVG9CYXNlNjQgPSBhc3luYyAoZmlsZTogRmlsZSk6IFByb21pc2U8c3RyaW5nPiA9PiB7XG4gICAgICAgIGNvbnN0IGJ5dGVzID0gYXdhaXQgZmlsZS5hcnJheUJ1ZmZlcigpO1xuICAgICAgICBjb25zdCBidWZmZXIgPSBCdWZmZXIuZnJvbShieXRlcyk7XG4gICAgICAgIGNvbnN0IGJhc2U2NCA9IGJ1ZmZlci50b1N0cmluZygnYmFzZTY0Jyk7XG4gICAgICAgIHJldHVybiBgZGF0YToke2ZpbGUudHlwZX07YmFzZTY0LCR7YmFzZTY0fWA7XG4gICAgICB9O1xuXG4gICAgICBjb25zdCBpbWFnZUZpbGVzOiBGaWxlW10gPSBbXTtcbiAgICAgIGNvbnN0IGV4aXN0aW5nSW1hZ2VzOiBzdHJpbmdbXSA9IFtdO1xuICAgICAgXG4gICAgICAvLyBFeHRyYWN0IGZvcm0gZmllbGRzXG4gICAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBmb3JtRGF0YS5lbnRyaWVzKCkpIHtcbiAgICAgICAgaWYgKGtleS5zdGFydHNXaXRoKCdpbWFnZUZpbGVzWycpKSB7XG4gICAgICAgICAgLy8gSGFuZGxlIG5ldyBpbWFnZSBmaWxlc1xuICAgICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIEZpbGUpIHtcbiAgICAgICAgICAgIGltYWdlRmlsZXMucHVzaCh2YWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGtleS5zdGFydHNXaXRoKCdleGlzdGluZ0ltYWdlc1snKSkge1xuICAgICAgICAgIC8vIEhhbmRsZSBleGlzdGluZyBpbWFnZXNcbiAgICAgICAgICBleGlzdGluZ0ltYWdlcy5wdXNoKHZhbHVlIGFzIHN0cmluZyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gQ29udmVydCBmb3JtIHZhbHVlcyB0byBhcHByb3ByaWF0ZSB0eXBlc1xuICAgICAgICAgIGlmIChrZXkgPT09ICdwbGFudElkJykge1xuICAgICAgICAgICAgYm9keVtrZXldID0gcGFyc2VJbnQodmFsdWUgYXMgc3RyaW5nLCAxMCk7XG4gICAgICAgICAgfSBlbHNlIGlmIChrZXkgPT09ICdpc0FjdGl2ZScpIHtcbiAgICAgICAgICAgIGJvZHlba2V5XSA9IHZhbHVlID09PSAndHJ1ZSc7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGJvZHlba2V5XSA9IHZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBDb252ZXJ0IG5ldyBpbWFnZSBmaWxlcyB0byBiYXNlNjRcbiAgICAgIGNvbnN0IG5ld0ltYWdlQmFzZTY0cyA9IGF3YWl0IFByb21pc2UuYWxsKFxuICAgICAgICBpbWFnZUZpbGVzLm1hcChmaWxlID0+IGZpbGVUb0Jhc2U2NChmaWxlKSlcbiAgICAgICk7XG5cbiAgICAgIC8vIENvbWJpbmUgZXhpc3RpbmcgaW1hZ2VzIHdpdGggbmV3IGltYWdlc1xuICAgICAgYm9keS5pbWFnZXMgPSBbLi4uZXhpc3RpbmdJbWFnZXMsIC4uLm5ld0ltYWdlQmFzZTY0c107XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEhhbmRsZSBKU09OXG4gICAgICB0cnkge1xuICAgICAgICBib2R5ID0gYXdhaXQgcmVxdWVzdC5qc29uKCk7XG4gICAgICAgIGlmICghYm9keSB8fCBPYmplY3Qua2V5cyhib2R5KS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXG4gICAgICAgICAgICB7IFxuICAgICAgICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgICAgICAgZXJyb3I6ICdSZXF1ZXN0IGJvZHkgaXMgcmVxdWlyZWQnIFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHsgc3RhdHVzOiA0MDAgfVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGpzb25FcnJvcikge1xuICAgICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXG4gICAgICAgICAgeyBcbiAgICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICAgICAgZXJyb3I6ICdJbnZhbGlkIEpTT04gaW4gcmVxdWVzdCBib2R5JyBcbiAgICAgICAgICB9LFxuICAgICAgICAgIHsgc3RhdHVzOiA0MDAgfVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICBcbiAgICAvLyBBZGQgdXNlciBJRCB0byB0aGUgcmVxdWVzdCBib2R5IGFuZCBjb252ZXJ0IGRhdGUgc3RyaW5ncyB0byBEYXRlIG9iamVjdHNcbiAgICBjb25zdCBpbnN0YW5jZURhdGEgPSB7XG4gICAgICAuLi5ib2R5LFxuICAgICAgdXNlcklkOiB1c2VyLmlkLFxuICAgICAgLy8gQ29udmVydCBkYXRlIHN0cmluZ3MgdG8gRGF0ZSBvYmplY3RzIGlmIHRoZXkgZXhpc3QgYW5kIGFyZSBub3QgZW1wdHlcbiAgICAgIGxhc3RGZXJ0aWxpemVkOiBib2R5Lmxhc3RGZXJ0aWxpemVkICYmIGJvZHkubGFzdEZlcnRpbGl6ZWQgIT09ICcnID8gbmV3IERhdGUoYm9keS5sYXN0RmVydGlsaXplZCkgOiBudWxsLFxuICAgICAgbGFzdFJlcG90OiBib2R5Lmxhc3RSZXBvdCAmJiBib2R5Lmxhc3RSZXBvdCAhPT0gJycgPyBuZXcgRGF0ZShib2R5Lmxhc3RSZXBvdCkgOiBudWxsLFxuICAgIH07XG5cbiAgICAvLyBWYWxpZGF0ZSB0aGUgcGxhbnQgaW5zdGFuY2UgZGF0YVxuICAgIGxldCB2YWxpZGF0ZWREYXRhO1xuICAgIHRyeSB7XG4gICAgICB2YWxpZGF0ZWREYXRhID0gY3JlYXRlUGxhbnRJbnN0YW5jZVNjaGVtYS5wYXJzZShpbnN0YW5jZURhdGEpO1xuICAgIH0gY2F0Y2ggKHZhbGlkYXRpb25FcnJvcikge1xuICAgICAgaWYgKHZhbGlkYXRpb25FcnJvciBpbnN0YW5jZW9mIHouWm9kRXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxuICAgICAgICAgIHsgXG4gICAgICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgICAgIGVycm9yOiAnVmFsaWRhdGlvbiBmYWlsZWQnLFxuICAgICAgICAgICAgZGV0YWlsczogdmFsaWRhdGlvbkVycm9yLmlzc3Vlc1xuICAgICAgICAgIH0sXG4gICAgICAgICAgeyBzdGF0dXM6IDQwMCB9XG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXG4gICAgICAgIHsgXG4gICAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgICAgZXJyb3I6ICdWYWxpZGF0aW9uIGZhaWxlZCcsXG4gICAgICAgICAgZGV0YWlsczogdmFsaWRhdGlvbkVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyB2YWxpZGF0aW9uRXJyb3IubWVzc2FnZSA6ICdJbnZhbGlkIGRhdGEnXG4gICAgICAgIH0sXG4gICAgICAgIHsgc3RhdHVzOiA0MDAgfVxuICAgICAgKTtcbiAgICB9XG4gICAgXG4gICAgLy8gQ2FsY3VsYXRlIGluaXRpYWwgZmVydGlsaXplciBkdWUgZGF0ZSBpZiBzY2hlZHVsZSBpcyBwcm92aWRlZFxuICAgIGlmICh2YWxpZGF0ZWREYXRhLmZlcnRpbGl6ZXJTY2hlZHVsZSAmJiAhdmFsaWRhdGVkRGF0YS5mZXJ0aWxpemVyRHVlKSB7XG4gICAgICBjb25zdCBub3cgPSBuZXcgRGF0ZSgpO1xuICAgICAgY29uc3Qgc2NoZWR1bGVNYXRjaCA9IHZhbGlkYXRlZERhdGEuZmVydGlsaXplclNjaGVkdWxlLm1hdGNoKC8oXFxkKylcXHMqKGRheXx3ZWVrfG1vbnRoKXM/L2kpO1xuICAgICAgXG4gICAgICBpZiAoc2NoZWR1bGVNYXRjaCkge1xuICAgICAgICBjb25zdCBbLCBhbW91bnQsIHVuaXRdID0gc2NoZWR1bGVNYXRjaDtcbiAgICAgICAgY29uc3QgZHVlRGF0ZSA9IG5ldyBEYXRlKG5vdyk7XG4gICAgICAgIFxuICAgICAgICBzd2l0Y2ggKHVuaXQudG9Mb3dlckNhc2UoKSkge1xuICAgICAgICAgIGNhc2UgJ2RheSc6XG4gICAgICAgICAgICBkdWVEYXRlLnNldERhdGUoZHVlRGF0ZS5nZXREYXRlKCkgKyBwYXJzZUludChhbW91bnQsIDEwKSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICd3ZWVrJzpcbiAgICAgICAgICAgIGR1ZURhdGUuc2V0RGF0ZShkdWVEYXRlLmdldERhdGUoKSArIChwYXJzZUludChhbW91bnQsIDEwKSAqIDcpKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ21vbnRoJzpcbiAgICAgICAgICAgIGR1ZURhdGUuc2V0TW9udGgoZHVlRGF0ZS5nZXRNb250aCgpICsgcGFyc2VJbnQoYW1vdW50LCAxMCkpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHZhbGlkYXRlZERhdGEuZmVydGlsaXplckR1ZSA9IGR1ZURhdGU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQ3JlYXRlIHRoZSBwbGFudCBpbnN0YW5jZVxuICAgIGNvbnN0IHBsYW50SW5zdGFuY2UgPSBhd2FpdCBQbGFudEluc3RhbmNlUXVlcmllcy5jcmVhdGUodmFsaWRhdGVkRGF0YSk7XG4gICAgXG4gICAgLy8gR2V0IHRoZSBlbmhhbmNlZCBwbGFudCBpbnN0YW5jZSB3aXRoIHBsYW50IGRhdGFcbiAgICBjb25zdCBlbmhhbmNlZEluc3RhbmNlID0gYXdhaXQgUGxhbnRJbnN0YW5jZVF1ZXJpZXMuZ2V0RW5oYW5jZWRCeUlkKHBsYW50SW5zdGFuY2UuaWQpO1xuICAgIFxuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7XG4gICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgZGF0YTogZW5oYW5jZWRJbnN0YW5jZVxuICAgIH0sIHsgc3RhdHVzOiAyMDEgfSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIGNyZWF0ZSBwbGFudCBpbnN0YW5jZTonLCBlcnJvcik7XG4gICAgXG4gICAgaWYgKGVycm9yIGluc3RhbmNlb2YgRXJyb3IgJiYgZXJyb3IubWVzc2FnZS5pbmNsdWRlcygndmFsaWRhdGlvbicpKSB7XG4gICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXG4gICAgICAgIHsgXG4gICAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgICAgZXJyb3I6ICdJbnZhbGlkIHBsYW50IGluc3RhbmNlIGRhdGEnLCBcbiAgICAgICAgICBkZXRhaWxzOiBlcnJvci5tZXNzYWdlIFxuICAgICAgICB9LFxuICAgICAgICB7IHN0YXR1czogNDAwIH1cbiAgICAgICk7XG4gICAgfVxuICAgIFxuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcbiAgICAgIHsgXG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICBlcnJvcjogJ0ZhaWxlZCB0byBjcmVhdGUgcGxhbnQgaW5zdGFuY2UnIFxuICAgICAgfSxcbiAgICAgIHsgc3RhdHVzOiA1MDAgfVxuICAgICk7XG4gIH1cbn0iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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