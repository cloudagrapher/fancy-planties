{"version":3,"sources":["/Users/stefanbekker/projects/fancy-planties/src/__tests__/api/admin/email-verification-monitor.test.ts"],"sourcesContent":["/**\n * @jest-environment node\n */\n\nimport { NextRequest } from 'next/server';\nimport { GET, POST } from '@/app/api/admin/email-verification-monitor/route';\nimport { requireAuth } from '@/lib/auth/middleware';\nimport { emailVerificationCleanupService } from '@/lib/services/email-verification-cleanup';\nimport { emailServiceMonitor } from '@/lib/services/email-service-monitor';\n\n// Mock dependencies\njest.mock('@/lib/auth/middleware');\njest.mock('@/lib/services/email-verification-cleanup');\njest.mock('@/lib/services/email-service-monitor');\n\nconst mockRequireAuth = requireAuth as jest.MockedFunction<typeof requireAuth>;\nconst mockCleanupService = emailVerificationCleanupService as jest.Mocked<typeof emailVerificationCleanupService>;\nconst mockEmailServiceMonitor = emailServiceMonitor as jest.Mocked<typeof emailServiceMonitor>;\n\ndescribe('/api/admin/email-verification-monitor', () => {\n  const mockUser = { id: 1, email: 'admin@example.com', name: 'Admin' };\n  \n  beforeEach(() => {\n    jest.clearAllMocks();\n    \n    // Mock authentication\n    mockRequireAuth.mockResolvedValue({ user: mockUser });\n    \n    // Mock system status\n    mockCleanupService.getSystemStatus.mockResolvedValue({\n      verificationCodes: {\n        totalActive: 10,\n        expiredCount: 2,\n        highAttemptCount: 1,\n      },\n      rateLimits: {\n        verificationAttempts: 5,\n        resendRequests: 3,\n        emailVerificationActivity: 8,\n        resendCooldowns: 1,\n        securityEvents: 0,\n      },\n      emailService: {\n        health: 'healthy',\n        quotaUsage: 45,\n        successRate: 98.5,\n        totalSent: 200,\n        totalFailed: 3,\n        averageResponseTime: 150,\n        issues: [],\n        recommendations: [],\n      },\n      cleanup: {\n        lastCleanup: Date.now() - 30 * 60 * 1000, // 30 minutes ago\n        isRunning: false,\n        nextCleanupDue: Date.now() + 30 * 60 * 1000, // 30 minutes from now\n      },\n    });\n    \n    // Mock email service monitor\n    mockEmailServiceMonitor.getStats.mockReturnValue({\n      totalSent: 200,\n      totalFailed: 3,\n      quotaUsed: 45,\n      quotaLimit: 100,\n      errorsByType: { API_ERROR: 2, NETWORK_ERROR: 1 },\n      successRate: 98.5,\n      averageResponseTime: 150,\n      lastResetTime: Date.now() - 2 * 60 * 60 * 1000, // 2 hours ago\n    });\n    \n    mockEmailServiceMonitor.getHealthStatus.mockReturnValue({\n      status: 'healthy',\n      issues: [],\n      recommendations: [],\n    });\n    \n    mockEmailServiceMonitor.getRecentEvents.mockReturnValue([\n      {\n        type: 'success',\n        timestamp: Date.now() - 5 * 60 * 1000,\n        responseTime: 120,\n      },\n      {\n        type: 'error',\n        timestamp: Date.now() - 10 * 60 * 1000,\n        responseTime: 300,\n        error: { message: 'API Error', code: 'API_ERROR' },\n      },\n    ]);\n    \n    mockEmailServiceMonitor.getErrorSummary.mockReturnValue({\n      totalErrors: 3,\n      errorsByType: { API_ERROR: 2, NETWORK_ERROR: 1 },\n      recentErrors: [\n        {\n          type: 'error',\n          timestamp: Date.now() - 10 * 60 * 1000,\n          responseTime: 300,\n          error: { message: 'API Error', code: 'API_ERROR' },\n        },\n      ],\n      criticalErrors: [],\n    });\n    \n    mockEmailServiceMonitor.isQuotaNearLimit.mockReturnValue(false);\n    \n    mockCleanupService.getCleanupStats.mockReturnValue({\n      lastCleanup: Date.now() - 30 * 60 * 1000,\n      isRunning: false,\n      recentStats: [\n        {\n          expiredCodes: 5,\n          rateLimitData: 3,\n          timestamp: Date.now() - 30 * 60 * 1000,\n        },\n      ],\n      totalExpiredCodes: 25,\n      totalRateLimitData: 15,\n    });\n  });\n\n  describe('GET', () => {\n    it('should return comprehensive monitoring data', async () => {\n      const request = new NextRequest('http://localhost/api/admin/email-verification-monitor');\n      const response = await GET(request);\n      \n      expect(response.status).toBe(200);\n      \n      const data = await response.json();\n      expect(data).toMatchObject({\n        timestamp: expect.any(Number),\n        systemStatus: expect.objectContaining({\n          verificationCodes: expect.any(Object),\n          rateLimits: expect.any(Object),\n          emailService: expect.any(Object),\n          cleanup: expect.any(Object),\n        }),\n        emailService: expect.objectContaining({\n          stats: expect.any(Object),\n          health: expect.any(Object),\n          recentEvents: expect.any(Array),\n          errorSummary: expect.any(Object),\n          quotaWarning: expect.any(Boolean),\n          quotaCritical: expect.any(Boolean),\n        }),\n        cleanup: expect.any(Object),\n        alerts: expect.any(Array),\n      });\n      \n      expect(mockRequireAuth).toHaveBeenCalledWith();\n      expect(mockCleanupService.getSystemStatus).toHaveBeenCalledWith();\n      expect(mockEmailServiceMonitor.getStats).toHaveBeenCalledWith();\n      expect(mockEmailServiceMonitor.getHealthStatus).toHaveBeenCalledWith();\n      expect(mockEmailServiceMonitor.getRecentEvents).toHaveBeenCalledWith(50);\n      expect(mockEmailServiceMonitor.getErrorSummary).toHaveBeenCalledWith();\n    });\n\n    it('should generate alerts for critical conditions', async () => {\n      // Mock critical email service health\n      mockCleanupService.getSystemStatus.mockResolvedValue({\n        verificationCodes: { totalActive: 10, expiredCount: 2, highAttemptCount: 1 },\n        rateLimits: { verificationAttempts: 5, resendRequests: 3, emailVerificationActivity: 8, resendCooldowns: 1, securityEvents: 15 },\n        emailService: {\n          health: 'critical',\n          quotaUsage: 96,\n          successRate: 75,\n          totalSent: 200,\n          totalFailed: 50,\n          averageResponseTime: 150,\n          issues: ['Critical quota usage', 'Low success rate'],\n          recommendations: ['Immediate action required'],\n        },\n        cleanup: { lastCleanup: Date.now() - 30 * 60 * 1000, isRunning: false, nextCleanupDue: Date.now() + 30 * 60 * 1000 },\n      });\n      \n      mockEmailServiceMonitor.getHealthStatus.mockReturnValue({\n        status: 'critical',\n        issues: ['Critical quota usage', 'Low success rate'],\n        recommendations: ['Immediate action required'],\n      });\n\n      const request = new NextRequest('http://localhost/api/admin/email-verification-monitor');\n      const response = await GET(request);\n      \n      expect(response.status).toBe(200);\n      \n      const data = await response.json();\n      expect(data.alerts.length).toBeGreaterThan(0);\n      \n      // Should have critical alerts\n      const criticalAlerts = data.alerts.filter((alert: any) => alert.level === 'critical');\n      expect(criticalAlerts.length).toBeGreaterThan(0);\n      \n      // Should have quota alert\n      const quotaAlert = data.alerts.find((alert: any) => alert.message.includes('quota'));\n      expect(quotaAlert).toBeDefined();\n      expect(quotaAlert.level).toBe('critical');\n      \n      // Should have success rate alert\n      const successRateAlert = data.alerts.find((alert: any) => alert.message.includes('success rate'));\n      expect(successRateAlert).toBeDefined();\n      expect(successRateAlert.level).toBe('critical');\n      \n      // Should have security events alert\n      const securityAlert = data.alerts.find((alert: any) => alert.message.includes('security events'));\n      expect(securityAlert).toBeDefined();\n      expect(securityAlert.level).toBe('warning');\n    });\n\n    it('should handle authentication errors', async () => {\n      mockRequireAuth.mockRejectedValue(new Error('Unauthorized'));\n      \n      const request = new NextRequest('http://localhost/api/admin/email-verification-monitor');\n      const response = await GET(request);\n      \n      expect(response.status).toBe(500);\n      \n      const data = await response.json();\n      expect(data.error).toBe('Failed to fetch monitoring data');\n    });\n\n    it('should handle system status errors', async () => {\n      mockCleanupService.getSystemStatus.mockRejectedValue(new Error('Database error'));\n      \n      const request = new NextRequest('http://localhost/api/admin/email-verification-monitor');\n      const response = await GET(request);\n      \n      expect(response.status).toBe(500);\n      \n      const data = await response.json();\n      expect(data.error).toBe('Failed to fetch monitoring data');\n      expect(data.details).toBe('Database error');\n    });\n  });\n\n  describe('POST', () => {\n    it('should handle force-cleanup action', async () => {\n      const cleanupResult = {\n        expiredCodes: 10,\n        rateLimitData: 5,\n        timestamp: Date.now(),\n      };\n      \n      mockCleanupService.forceCleanup.mockResolvedValue(cleanupResult);\n      \n      const request = new NextRequest('http://localhost/api/admin/email-verification-monitor', {\n        method: 'POST',\n        body: JSON.stringify({ action: 'force-cleanup' }),\n        headers: { 'Content-Type': 'application/json' },\n      });\n      \n      const response = await POST(request);\n      \n      expect(response.status).toBe(200);\n      \n      const data = await response.json();\n      expect(data).toEqual({\n        success: true,\n        message: 'Cleanup completed successfully',\n        result: cleanupResult,\n      });\n      \n      expect(mockCleanupService.forceCleanup).toHaveBeenCalledWith();\n    });\n\n    it('should handle reset-email-stats action', async () => {\n      const request = new NextRequest('http://localhost/api/admin/email-verification-monitor', {\n        method: 'POST',\n        body: JSON.stringify({ action: 'reset-email-stats' }),\n        headers: { 'Content-Type': 'application/json' },\n      });\n      \n      const response = await POST(request);\n      \n      expect(response.status).toBe(200);\n      \n      const data = await response.json();\n      expect(data).toEqual({\n        success: true,\n        message: 'Email service statistics reset successfully',\n      });\n      \n      expect(mockEmailServiceMonitor.forceReset).toHaveBeenCalledWith();\n    });\n\n    it('should handle get-error-details action', async () => {\n      const errorDetails = {\n        totalErrors: 5,\n        errorsByType: { API_ERROR: 3, NETWORK_ERROR: 2 },\n        recentErrors: [],\n        criticalErrors: [],\n      };\n      \n      const recentEvents = [\n        { type: 'error', timestamp: Date.now(), responseTime: 200, error: { message: 'Error', code: 'API_ERROR' } },\n      ];\n      \n      mockEmailServiceMonitor.getErrorSummary.mockReturnValue(errorDetails);\n      mockEmailServiceMonitor.getRecentEvents.mockReturnValue(recentEvents);\n      \n      const request = new NextRequest('http://localhost/api/admin/email-verification-monitor', {\n        method: 'POST',\n        body: JSON.stringify({ action: 'get-error-details' }),\n        headers: { 'Content-Type': 'application/json' },\n      });\n      \n      const response = await POST(request);\n      \n      expect(response.status).toBe(200);\n      \n      const data = await response.json();\n      expect(data).toEqual({\n        success: true,\n        errorDetails,\n        recentEvents,\n      });\n      \n      expect(mockEmailServiceMonitor.getErrorSummary).toHaveBeenCalledWith();\n      expect(mockEmailServiceMonitor.getRecentEvents).toHaveBeenCalledWith(200);\n    });\n\n    it('should handle invalid action', async () => {\n      const request = new NextRequest('http://localhost/api/admin/email-verification-monitor', {\n        method: 'POST',\n        body: JSON.stringify({ action: 'invalid-action' }),\n        headers: { 'Content-Type': 'application/json' },\n      });\n      \n      const response = await POST(request);\n      \n      expect(response.status).toBe(400);\n      \n      const data = await response.json();\n      expect(data.error).toBe('Invalid action specified');\n    });\n\n    it('should handle authentication errors', async () => {\n      mockRequireAuth.mockRejectedValue(new Error('Unauthorized'));\n      \n      const request = new NextRequest('http://localhost/api/admin/email-verification-monitor', {\n        method: 'POST',\n        body: JSON.stringify({ action: 'force-cleanup' }),\n        headers: { 'Content-Type': 'application/json' },\n      });\n      \n      const response = await POST(request);\n      \n      expect(response.status).toBe(500);\n      \n      const data = await response.json();\n      expect(data.error).toBe('Failed to perform admin action');\n    });\n\n    it('should handle cleanup errors', async () => {\n      mockCleanupService.forceCleanup.mockRejectedValue(new Error('Cleanup failed'));\n      \n      const request = new NextRequest('http://localhost/api/admin/email-verification-monitor', {\n        method: 'POST',\n        body: JSON.stringify({ action: 'force-cleanup' }),\n        headers: { 'Content-Type': 'application/json' },\n      });\n      \n      const response = await POST(request);\n      \n      expect(response.status).toBe(500);\n      \n      const data = await response.json();\n      expect(data.error).toBe('Failed to perform admin action');\n      expect(data.details).toBe('Cleanup failed');\n    });\n  });\n});"],"names":["jest","mock","mockRequireAuth","requireAuth","mockCleanupService","emailVerificationCleanupService","mockEmailServiceMonitor","emailServiceMonitor","describe","mockUser","id","email","name","beforeEach","clearAllMocks","mockResolvedValue","user","getSystemStatus","verificationCodes","totalActive","expiredCount","highAttemptCount","rateLimits","verificationAttempts","resendRequests","emailVerificationActivity","resendCooldowns","securityEvents","emailService","health","quotaUsage","successRate","totalSent","totalFailed","averageResponseTime","issues","recommendations","cleanup","lastCleanup","Date","now","isRunning","nextCleanupDue","getStats","mockReturnValue","quotaUsed","quotaLimit","errorsByType","API_ERROR","NETWORK_ERROR","lastResetTime","getHealthStatus","status","getRecentEvents","type","timestamp","responseTime","error","message","code","getErrorSummary","totalErrors","recentErrors","criticalErrors","isQuotaNearLimit","getCleanupStats","recentStats","expiredCodes","rateLimitData","totalExpiredCodes","totalRateLimitData","it","request","NextRequest","response","GET","expect","toBe","data","json","toMatchObject","any","Number","systemStatus","objectContaining","Object","stats","recentEvents","Array","errorSummary","quotaWarning","Boolean","quotaCritical","alerts","toHaveBeenCalledWith","length","toBeGreaterThan","criticalAlerts","filter","alert","level","quotaAlert","find","includes","toBeDefined","successRateAlert","securityAlert","mockRejectedValue","Error","details","cleanupResult","forceCleanup","method","body","JSON","stringify","action","headers","POST","toEqual","success","result","forceReset","errorDetails"],"mappings":"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"}