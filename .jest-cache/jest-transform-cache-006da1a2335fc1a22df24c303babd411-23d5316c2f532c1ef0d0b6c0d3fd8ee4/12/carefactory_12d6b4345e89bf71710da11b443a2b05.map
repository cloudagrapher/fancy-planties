{"version":3,"sources":["/Users/stefanbekker/projects/fancy-planties/src/test-utils/factories/care-factory.js"],"sourcesContent":["// Care record test data factory\n\n// Counter for unique test data\nlet careRecordCounter = 0;\n\n// Care types and related data for realistic test records\nconst CARE_TYPES = ['fertilizer', 'water', 'repot', 'prune', 'inspect', 'other'];\n\nconst FERTILIZER_TYPES = [\n  'Balanced liquid fertilizer (10-10-10)',\n  'High nitrogen fertilizer (20-10-10)',\n  'Bloom booster (10-30-20)',\n  'Organic compost tea',\n  'Fish emulsion',\n  'Worm casting tea',\n  'Slow-release granules'\n];\n\nconst POT_SIZES = [\n  '4 inch', '6 inch', '8 inch', '10 inch', '12 inch', '14 inch',\n  'Small', 'Medium', 'Large', 'Extra Large'\n];\n\nconst SOIL_TYPES = [\n  'Standard potting mix',\n  'Cactus and succulent mix',\n  'African violet mix',\n  'Orchid bark mix',\n  'Custom aroid mix',\n  'Seed starting mix',\n  'Organic potting soil'\n];\n\nconst CARE_NOTES = [\n  'Plant looking healthy and growing well',\n  'Noticed some new growth this week',\n  'Soil was quite dry, gave thorough watering',\n  'Removed a few yellow leaves',\n  'Plant seems to be thriving in this location',\n  'Added humidity tray to help with dry air',\n  'Rotated plant for even light exposure',\n  'Checked for pests - all clear',\n  'Roots were getting pot-bound, time for repot',\n  'Pruned back leggy growth to encourage bushiness'\n];\n\n/**\n * Creates a test care record with realistic data\n * @param {Object} overrides - Properties to override in the generated care record\n * @returns {Object} Test care record object\n */\nexport const createTestCareRecord = (overrides = {}) => {\n  careRecordCounter++;\n  \n  const careType = CARE_TYPES[careRecordCounter % CARE_TYPES.length];\n  const careDate = new Date(Date.now() - Math.random() * 1000 * 60 * 60 * 24 * 30); // Random date within last 30 days\n  \n  const baseCareRecord = {\n    // Remove id - let database auto-generate it\n    // userId and plantInstanceId should be provided via overrides\n    careType: overrides.careType || careType,\n    careDate: overrides.careDate || careDate,\n    notes: CARE_NOTES[careRecordCounter % CARE_NOTES.length],\n    fertilizerType: (overrides.careType || careType) === 'fertilizer' ? FERTILIZER_TYPES[careRecordCounter % FERTILIZER_TYPES.length] : null,\n    potSize: (overrides.careType || careType) === 'repot' ? POT_SIZES[careRecordCounter % POT_SIZES.length] : null,\n    soilType: (overrides.careType || careType) === 'repot' ? SOIL_TYPES[careRecordCounter % SOIL_TYPES.length] : null,\n    images: [],\n    createdAt: new Date(),\n    updatedAt: new Date(),\n    // Add computed fields for display\n    formattedDate: (overrides.careDate || careDate).toLocaleDateString(),\n    daysSinceCare: Math.floor((Date.now() - (overrides.careDate || careDate).getTime()) / (1000 * 60 * 60 * 24)),\n  };\n  \n  return {\n    ...baseCareRecord,\n    ...overrides,\n  };\n};\n\n/**\n * Creates a fertilizer care record\n * @param {Object} plantInstance - Plant instance object\n * @param {Object} user - User object\n * @param {Object} overrides - Properties to override\n * @returns {Object} Test fertilizer care record\n */\nexport const createTestFertilizerRecord = (plantInstance, user, overrides = {}) => {\n  return createTestCareRecord(plantInstance, user, {\n    careType: 'fertilizer',\n    fertilizerType: FERTILIZER_TYPES[0],\n    notes: 'Applied balanced liquid fertilizer at half strength',\n    ...overrides,\n  });\n};\n\n/**\n * Creates a watering care record\n * @param {Object} plantInstance - Plant instance object\n * @param {Object} user - User object\n * @param {Object} overrides - Properties to override\n * @returns {Object} Test watering care record\n */\nexport const createTestWateringRecord = (plantInstance, user, overrides = {}) => {\n  return createTestCareRecord(plantInstance, user, {\n    careType: 'water',\n    notes: 'Watered thoroughly until water drained from bottom',\n    ...overrides,\n  });\n};\n\n/**\n * Creates a repotting care record\n * @param {Object} plantInstance - Plant instance object\n * @param {Object} user - User object\n * @param {Object} overrides - Properties to override\n * @returns {Object} Test repotting care record\n */\nexport const createTestRepottingRecord = (plantInstance, user, overrides = {}) => {\n  return createTestCareRecord(plantInstance, user, {\n    careType: 'repot',\n    potSize: POT_SIZES[0],\n    soilType: SOIL_TYPES[0],\n    notes: 'Repotted into larger container with fresh soil mix',\n    ...overrides,\n  });\n};\n\n/**\n * Creates a pruning care record\n * @param {Object} plantInstance - Plant instance object\n * @param {Object} user - User object\n * @param {Object} overrides - Properties to override\n * @returns {Object} Test pruning care record\n */\nexport const createTestPruningRecord = (plantInstance, user, overrides = {}) => {\n  return createTestCareRecord(plantInstance, user, {\n    careType: 'prune',\n    notes: 'Removed dead and yellowing leaves, trimmed leggy growth',\n    ...overrides,\n  });\n};\n\n/**\n * Creates an inspection care record\n * @param {Object} plantInstance - Plant instance object\n * @param {Object} user - User object\n * @param {Object} overrides - Properties to override\n * @returns {Object} Test inspection care record\n */\nexport const createTestInspectionRecord = (plantInstance, user, overrides = {}) => {\n  return createTestCareRecord(plantInstance, user, {\n    careType: 'inspect',\n    notes: 'Weekly health check - plant looking good, no pests detected',\n    ...overrides,\n  });\n};\n\n/**\n * Creates a care history for a plant instance\n * @param {Object} plantInstance - Plant instance object\n * @param {Object} user - User object\n * @param {number} count - Number of care records to create\n * @param {Object} baseOverrides - Base properties to apply to all records\n * @returns {Array} Array of test care record objects\n */\nexport const createTestCareHistory = (plantInstance, user, count = 10, baseOverrides = {}) => {\n  const records = [];\n  \n  for (let i = 0; i < count; i++) {\n    // Create records with dates spread over the last few months\n    const daysAgo = Math.floor(Math.random() * 90); // Random day within last 3 months\n    const careDate = new Date(Date.now() - daysAgo * 1000 * 60 * 60 * 24);\n    \n    const record = createTestCareRecord(plantInstance, user, {\n      careDate,\n      ...baseOverrides,\n    });\n    \n    records.push(record);\n  }\n  \n  // Sort by date (most recent first)\n  return records.sort((a, b) => new Date(b.careDate) - new Date(a.careDate));\n};\n\n/**\n * Creates a realistic care schedule for a plant\n * @param {Object} plantInstance - Plant instance object\n * @param {Object} user - User object\n * @param {number} months - Number of months of history to create\n * @returns {Array} Array of care records following a realistic schedule\n */\nexport const createRealisticCareSchedule = (plantInstance, user, months = 6) => {\n  const records = [];\n  const startDate = new Date();\n  startDate.setMonth(startDate.getMonth() - months);\n  \n  let currentDate = new Date(startDate);\n  const endDate = new Date();\n  \n  while (currentDate <= endDate) {\n    // Weekly watering\n    if (Math.random() > 0.1) { // 90% chance of watering each week\n      records.push(createTestWateringRecord(plantInstance, user, {\n        careDate: new Date(currentDate),\n      }));\n    }\n    \n    // Monthly fertilizing (during growing season)\n    const month = currentDate.getMonth();\n    if ((month >= 2 && month <= 8) && currentDate.getDate() <= 7) { // March-September, first week\n      records.push(createTestFertilizerRecord(plantInstance, user, {\n        careDate: new Date(currentDate),\n      }));\n    }\n    \n    // Quarterly inspection\n    if (currentDate.getDate() === 1 && month % 3 === 0) {\n      records.push(createTestInspectionRecord(plantInstance, user, {\n        careDate: new Date(currentDate),\n      }));\n    }\n    \n    // Occasional pruning\n    if (Math.random() > 0.95) { // 5% chance each week\n      records.push(createTestPruningRecord(plantInstance, user, {\n        careDate: new Date(currentDate),\n      }));\n    }\n    \n    // Annual repotting\n    if (month === 3 && currentDate.getDate() <= 7 && Math.random() > 0.7) { // April, 30% chance\n      records.push(createTestRepottingRecord(plantInstance, user, {\n        careDate: new Date(currentDate),\n      }));\n    }\n    \n    // Move to next week\n    currentDate.setDate(currentDate.getDate() + 7);\n  }\n  \n  // Sort by date (most recent first)\n  return records.sort((a, b) => new Date(b.careDate) - new Date(a.careDate));\n};\n\n/**\n * Creates care statistics data for testing\n * @param {Array} careRecords - Array of care record objects\n * @returns {Object} Care statistics object\n */\nexport const createTestCareStatistics = (careRecords) => {\n  const stats = {\n    totalCareEvents: careRecords.length,\n    careTypeBreakdown: {},\n    recentActivity: 0,\n    averageCaresPerWeek: 0,\n    lastCareDate: null,\n    upcomingCare: [],\n  };\n  \n  // Calculate care type breakdown\n  careRecords.forEach(record => {\n    stats.careTypeBreakdown[record.careType] = (stats.careTypeBreakdown[record.careType] || 0) + 1;\n  });\n  \n  // Calculate recent activity (last 30 days)\n  const thirtyDaysAgo = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000);\n  stats.recentActivity = careRecords.filter(record => \n    new Date(record.careDate) >= thirtyDaysAgo\n  ).length;\n  \n  // Calculate average cares per week\n  if (careRecords.length > 0) {\n    const oldestRecord = careRecords[careRecords.length - 1];\n    const newestRecord = careRecords[0];\n    const daysDiff = (new Date(newestRecord.careDate) - new Date(oldestRecord.careDate)) / (1000 * 60 * 60 * 24);\n    const weeksDiff = daysDiff / 7;\n    stats.averageCaresPerWeek = weeksDiff > 0 ? (careRecords.length / weeksDiff).toFixed(1) : 0;\n    stats.lastCareDate = newestRecord.careDate;\n  }\n  \n  return stats;\n};\n\n/**\n * Reset the care record counter (useful for test isolation)\n */\nexport const resetCareCounter = () => {\n  careRecordCounter = 0;\n};"],"names":["createRealisticCareSchedule","createTestCareHistory","createTestCareRecord","createTestCareStatistics","createTestFertilizerRecord","createTestInspectionRecord","createTestPruningRecord","createTestRepottingRecord","createTestWateringRecord","resetCareCounter","careRecordCounter","CARE_TYPES","FERTILIZER_TYPES","POT_SIZES","SOIL_TYPES","CARE_NOTES","overrides","careType","length","careDate","Date","now","Math","random","baseCareRecord","notes","fertilizerType","potSize","soilType","images","createdAt","updatedAt","formattedDate","toLocaleDateString","daysSinceCare","floor","getTime","plantInstance","user","count","baseOverrides","records","i","daysAgo","record","push","sort","a","b","months","startDate","setMonth","getMonth","currentDate","endDate","month","getDate","setDate","careRecords","stats","totalCareEvents","careTypeBreakdown","recentActivity","averageCaresPerWeek","lastCareDate","upcomingCare","forEach","thirtyDaysAgo","filter","oldestRecord","newestRecord","daysDiff","weeksDiff","toFixed"],"mappings":"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"}