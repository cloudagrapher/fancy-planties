511d6983c71618918f15b111e0341472
/**
 * Test Benchmarking and Alerting System
 * 
 * Provides performance benchmarking and alerting for CI/CD integration.
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get recordBenchmark () {
        return recordBenchmark;
    },
    get saveBenchmarkReport () {
        return saveBenchmarkReport;
    },
    get testBenchmarkingSystem () {
        return testBenchmarkingSystem;
    },
    get withBenchmarking () {
        return withBenchmarking;
    }
});
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
/**
 * Test benchmarking system for performance monitoring
 */ class TestBenchmarkingSystem {
    constructor(){
        this.results = [];
        this.baselines = new Map();
        this.thresholds = new Map();
        this.alerts = [];
        // Load baseline data if available
        this.loadBaselines();
        // Set default thresholds
        this.setDefaultThresholds();
    }
    /**
   * Record a benchmark result
   */ recordBenchmark(testName, duration, memoryUsage, environment = 'local') {
        const result = {
            testName,
            duration,
            memoryUsage,
            timestamp: new Date(),
            environment,
            branch: process.env.GITHUB_REF_NAME || process.env.BRANCH_NAME,
            commit: process.env.GITHUB_SHA || process.env.COMMIT_SHA
        };
        this.results.push(result);
        this.checkThresholds(result);
        this.checkRegression(result);
    }
    /**
   * Set performance thresholds for a test
   */ setThresholds(testName, thresholds) {
        this.thresholds.set(testName, thresholds);
    }
    /**
   * Set baseline performance for comparison
   */ setBaseline(testName, result) {
        this.baselines.set(testName, result);
    }
    /**
   * Generate comprehensive benchmark report
   */ generateReport() {
        const totalTests = this.results.length;
        const totalDuration = this.results.reduce((sum, r)=>sum + r.duration, 0);
        const averageDuration = totalTests > 0 ? totalDuration / totalTests : 0;
        const memoryPeak = Math.max(...this.results.map((r)=>r.memoryUsage));
        // Find slowest tests
        const slowestTests = [
            ...this.results
        ].sort((a, b)=>b.duration - a.duration).slice(0, 10);
        // Find regressions
        const regressions = this.findRegressions();
        return {
            summary: {
                totalTests,
                averageDuration,
                totalDuration,
                memoryPeak: memoryPeak / 1024 / 1024,
                alertCount: this.alerts.length
            },
            alerts: [
                ...this.alerts
            ],
            slowestTests,
            regressions
        };
    }
    /**
   * Generate CI-friendly report output
   */ generateCIReport() {
        const report = this.generateReport();
        const lines = [];
        lines.push('## 📊 Test Performance Report');
        lines.push('');
        lines.push('### 📈 Summary');
        lines.push(`- **Total Tests**: ${report.summary.totalTests}`);
        lines.push(`- **Average Duration**: ${report.summary.averageDuration.toFixed(2)}ms`);
        lines.push(`- **Total Duration**: ${report.summary.totalDuration.toFixed(2)}ms`);
        lines.push(`- **Memory Peak**: ${report.summary.memoryPeak.toFixed(2)}MB`);
        lines.push(`- **Alerts**: ${report.summary.alertCount}`);
        lines.push('');
        // Alerts section
        if (report.alerts.length > 0) {
            lines.push('### 🚨 Performance Alerts');
            lines.push('| Test | Type | Severity | Details |');
            lines.push('|------|------|----------|---------|');
            report.alerts.forEach((alert)=>{
                const icon = alert.severity === 'error' ? '🔴' : '⚠️';
                lines.push(`| ${alert.testName} | ${alert.type} | ${icon} ${alert.severity} | ${alert.message} |`);
            });
            lines.push('');
        }
        // Slowest tests
        if (report.slowestTests.length > 0) {
            lines.push('### 🐌 Slowest Tests');
            lines.push('| Test | Duration | Memory |');
            lines.push('|------|----------|--------|');
            report.slowestTests.slice(0, 5).forEach((test)=>{
                lines.push(`| ${test.testName} | ${test.duration.toFixed(2)}ms | ${(test.memoryUsage / 1024 / 1024).toFixed(2)}MB |`);
            });
            lines.push('');
        }
        // Regressions
        if (report.regressions.length > 0) {
            lines.push('### 📉 Performance Regressions');
            lines.push('| Test | Current | Baseline | Regression |');
            lines.push('|------|---------|----------|------------|');
            report.regressions.forEach((regression)=>{
                lines.push(`| ${regression.testName} | ${regression.currentDuration.toFixed(2)}ms | ${regression.baselineDuration.toFixed(2)}ms | +${regression.regressionPercent.toFixed(1)}% |`);
            });
            lines.push('');
        }
        return lines.join('\n');
    }
    /**
   * Export benchmark data for storage
   */ exportData() {
        return {
            results: this.results,
            baselines: Object.fromEntries(this.baselines),
            thresholds: Object.fromEntries(this.thresholds),
            alerts: this.alerts,
            timestamp: new Date().toISOString(),
            environment: process.env.CI ? 'ci' : 'local'
        };
    }
    /**
   * Import benchmark data
   */ importData(data) {
        if (data.results) {
            this.results = data.results;
        }
        if (data.baselines) {
            this.baselines = new Map(Object.entries(data.baselines));
        }
        if (data.thresholds) {
            this.thresholds = new Map(Object.entries(data.thresholds));
        }
        if (data.alerts) {
            this.alerts = data.alerts;
        }
    }
    /**
   * Check if result exceeds thresholds
   */ checkThresholds(result) {
        const thresholds = this.thresholds.get(result.testName) || this.getDefaultThresholds();
        // Check duration threshold
        if (result.duration > thresholds.maxDuration) {
            this.alerts.push({
                type: 'duration',
                severity: result.duration > thresholds.maxDuration * 2 ? 'error' : 'warning',
                testName: result.testName,
                current: result.duration,
                threshold: thresholds.maxDuration,
                message: `Test duration ${result.duration.toFixed(2)}ms exceeds threshold ${thresholds.maxDuration}ms`
            });
        }
        // Check memory threshold
        const memoryMB = result.memoryUsage / 1024 / 1024;
        if (memoryMB > thresholds.maxMemoryMB) {
            this.alerts.push({
                type: 'memory',
                severity: memoryMB > thresholds.maxMemoryMB * 2 ? 'error' : 'warning',
                testName: result.testName,
                current: memoryMB,
                threshold: thresholds.maxMemoryMB,
                message: `Memory usage ${memoryMB.toFixed(2)}MB exceeds threshold ${thresholds.maxMemoryMB}MB`
            });
        }
    }
    /**
   * Check for performance regression
   */ checkRegression(result) {
        const baseline = this.baselines.get(result.testName);
        if (!baseline) return;
        const thresholds = this.thresholds.get(result.testName) || this.getDefaultThresholds();
        const regressionPercent = (result.duration - baseline.duration) / baseline.duration * 100;
        if (regressionPercent > thresholds.regressionThreshold) {
            this.alerts.push({
                type: 'regression',
                severity: regressionPercent > thresholds.regressionThreshold * 2 ? 'error' : 'warning',
                testName: result.testName,
                current: result.duration,
                threshold: baseline.duration * (1 + thresholds.regressionThreshold / 100),
                baseline: baseline.duration,
                message: `Performance regression of ${regressionPercent.toFixed(1)}% detected`
            });
        }
    }
    /**
   * Find all performance regressions
   */ findRegressions() {
        const regressions = [];
        this.results.forEach((result)=>{
            const baseline = this.baselines.get(result.testName);
            if (baseline) {
                const regressionPercent = (result.duration - baseline.duration) / baseline.duration * 100;
                if (regressionPercent > 10) {
                    regressions.push({
                        testName: result.testName,
                        currentDuration: result.duration,
                        baselineDuration: baseline.duration,
                        regressionPercent
                    });
                }
            }
        });
        return regressions.sort((a, b)=>b.regressionPercent - a.regressionPercent);
    }
    /**
   * Load baseline data from storage
   */ loadBaselines() {
        try {
            // In a real implementation, would load from file or database
            const baselineData = process.env.BENCHMARK_BASELINES;
            if (baselineData) {
                const baselines = JSON.parse(baselineData);
                this.baselines = new Map(Object.entries(baselines));
            }
        } catch (error) {
            console.warn('Failed to load benchmark baselines:', error);
        }
    }
    /**
   * Set default performance thresholds
   */ setDefaultThresholds() {
        const defaultThresholds = {
            maxDuration: 1000,
            maxMemoryMB: 50,
            regressionThreshold: 20
        };
        // Set specific thresholds for different test types
        this.thresholds.set('unit', {
            maxDuration: 100,
            maxMemoryMB: 10,
            regressionThreshold: 15
        });
        this.thresholds.set('integration', {
            maxDuration: 2000,
            maxMemoryMB: 100,
            regressionThreshold: 25
        });
        this.thresholds.set('e2e', {
            maxDuration: 10000,
            maxMemoryMB: 200,
            regressionThreshold: 30
        });
    }
    /**
   * Get default thresholds
   */ getDefaultThresholds() {
        return {
            maxDuration: 1000,
            maxMemoryMB: 50,
            regressionThreshold: 20
        };
    }
    /**
   * Clear all data
   */ reset() {
        this.results = [];
        this.alerts = [];
    }
}
const testBenchmarkingSystem = new TestBenchmarkingSystem();
function withBenchmarking(testType = 'unit') {
    beforeEach(()=>{
        const testName = expect.getState().currentTestName || 'unknown';
        const startTime = performance.now();
        const startMemory = process.memoryUsage().heapUsed;
        // Store start metrics
        global.__testStartTime = startTime;
        global.__testStartMemory = startMemory;
    });
    afterEach(()=>{
        const testName = expect.getState().currentTestName || 'unknown';
        const endTime = performance.now();
        const endMemory = process.memoryUsage().heapUsed;
        const duration = endTime - global.__testStartTime;
        const memoryUsage = endMemory - global.__testStartMemory;
        testBenchmarkingSystem.recordBenchmark(testName, duration, memoryUsage, process.env.CI ? 'ci' : 'local');
    });
}
function recordBenchmark(testName, duration, memoryUsage) {
    testBenchmarkingSystem.recordBenchmark(testName, duration, memoryUsage);
}
async function saveBenchmarkReport(outputPath = 'coverage/benchmark-report.json') {
    const report = testBenchmarkingSystem.generateReport();
    const data = testBenchmarkingSystem.exportData();
    try {
        // Save detailed data
        const fs = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("fs")));
        fs.writeFileSync(outputPath, JSON.stringify(data, null, 2));
        // Save CI report
        const ciReport = testBenchmarkingSystem.generateCIReport();
        fs.writeFileSync(outputPath.replace('.json', '-ci.md'), ciReport);
        console.log(`📊 Benchmark report saved to ${outputPath}`);
    } catch (error) {
        console.error('Failed to save benchmark report:', error);
    }
}

//# sourceMappingURL=data:application/json;base64,