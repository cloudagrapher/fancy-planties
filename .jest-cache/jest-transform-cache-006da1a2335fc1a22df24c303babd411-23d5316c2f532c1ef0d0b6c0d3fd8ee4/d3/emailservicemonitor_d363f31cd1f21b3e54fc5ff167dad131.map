{"version":3,"names":["EmailServiceMonitor","cov_jtvi6d6qq","f","s","emailServiceMonitor","constructor","recentEvents","maxEvents","resetInterval","quotaLimit","getQuotaLimit","stats","totalSent","totalFailed","quotaUsed","errorsByType","successRate","averageResponseTime","lastResetTime","Date","now","recordSuccess","responseTime","b","event","type","timestamp","addEvent","updateStats","process","env","NODE_ENV","console","log","recordFailure","error","code","lastError","message","handleQuotaExceeded","getStats","checkForReset","getRecentEvents","limit","slice","getErrorSummary","recentErrors","filter","criticalErrors","totalErrors","isQuotaNearLimit","threshold","getQuotaUsagePercentage","Math","round","resetDailyStats","forceReset","getHealthStatus","issues","recommendations","status","push","toFixed","recentCriticalErrors","length","total","totalTime","reduce","sum","dailyLimit","parseInt","EMAIL_DAILY_QUOTA","tomorrow","setUTCDate","getUTCDate","setUTCHours","msUntilMidnight","getTime","setTimeout","setInterval"],"sources":["/Users/stefanbekker/projects/fancy-planties/src/lib/services/email-service-monitor.ts"],"sourcesContent":["import 'server-only';\n\nexport interface EmailServiceStats {\n  totalSent: number;\n  totalFailed: number;\n  quotaUsed: number;\n  quotaLimit: number;\n  lastError?: {\n    message: string;\n    code: string;\n    timestamp: number;\n  };\n  errorsByType: Record<string, number>;\n  successRate: number;\n  averageResponseTime: number;\n  lastResetTime: number;\n}\n\nexport interface EmailServiceEvent {\n  type: 'success' | 'error';\n  timestamp: number;\n  responseTime: number;\n  error?: {\n    message: string;\n    code: string;\n  };\n}\n\nexport class EmailServiceMonitor {\n  private stats: EmailServiceStats;\n  private recentEvents: EmailServiceEvent[] = [];\n  private readonly maxEvents = 1000; // Keep last 1000 events\n  private readonly resetInterval = 24 * 60 * 60 * 1000; // 24 hours\n\n  constructor() {\n    const quotaLimit = this.getQuotaLimit();\n    this.stats = {\n      totalSent: 0,\n      totalFailed: 0,\n      quotaUsed: 0,\n      quotaLimit,\n      errorsByType: {},\n      successRate: 100,\n      averageResponseTime: 0,\n      lastResetTime: Date.now(),\n    };\n  }\n\n  /**\n   * Record a successful email send\n   */\n  recordSuccess(responseTime: number): void {\n    this.stats.totalSent++;\n    if (this.stats.quotaLimit > 0) {\n      this.stats.quotaUsed++;\n    }\n    \n    const event: EmailServiceEvent = {\n      type: 'success',\n      timestamp: Date.now(),\n      responseTime,\n    };\n    \n    this.addEvent(event);\n    this.updateStats();\n    \n    // Log success in development\n    if (process.env.NODE_ENV === 'development') {\n      console.log(`[EMAIL_MONITOR] Email sent successfully (${responseTime}ms)`);\n    }\n  }\n\n  /**\n   * Record a failed email send\n   */\n  recordFailure(error: { message: string; code: string }, responseTime: number): void {\n    this.stats.totalFailed++;\n    \n    // Update error counts by type\n    this.stats.errorsByType[error.code] = (this.stats.errorsByType[error.code] || 0) + 1;\n    \n    // Update last error\n    this.stats.lastError = {\n      message: error.message,\n      code: error.code,\n      timestamp: Date.now(),\n    };\n    \n    const event: EmailServiceEvent = {\n      type: 'error',\n      timestamp: Date.now(),\n      responseTime,\n      error,\n    };\n    \n    this.addEvent(event);\n    this.updateStats();\n    \n    // Log error\n    console.error(`[EMAIL_MONITOR] Email send failed: ${error.code} - ${error.message} (${responseTime}ms)`);\n    \n    // Check for quota issues\n    if (error.code === 'QUOTA_EXCEEDED') {\n      this.handleQuotaExceeded();\n    }\n  }\n\n  /**\n   * Get current statistics\n   */\n  getStats(): EmailServiceStats {\n    this.checkForReset();\n    return { ...this.stats };\n  }\n\n  /**\n   * Get recent events (last N events)\n   */\n  getRecentEvents(limit: number = 100): EmailServiceEvent[] {\n    return this.recentEvents.slice(-limit);\n  }\n\n  /**\n   * Get error summary\n   */\n  getErrorSummary(): {\n    totalErrors: number;\n    errorsByType: Record<string, number>;\n    recentErrors: EmailServiceEvent[];\n    criticalErrors: EmailServiceEvent[];\n  } {\n    const recentErrors = this.recentEvents\n      .filter(event => event.type === 'error')\n      .slice(-50);\n    \n    const criticalErrors = this.recentEvents\n      .filter(event => \n        event.type === 'error' && \n        event.error?.code === 'QUOTA_EXCEEDED'\n      )\n      .slice(-10);\n\n    return {\n      totalErrors: this.stats.totalFailed,\n      errorsByType: { ...this.stats.errorsByType },\n      recentErrors,\n      criticalErrors,\n    };\n  }\n\n  /**\n   * Check if quota is approaching limit\n   */\n  isQuotaNearLimit(threshold: number = 0.8): boolean {\n    if (this.stats.quotaLimit === 0) return false;\n    return (this.stats.quotaUsed / this.stats.quotaLimit) >= threshold;\n  }\n\n  /**\n   * Get quota usage percentage\n   */\n  getQuotaUsagePercentage(): number {\n    if (this.stats.quotaLimit === 0) return 0;\n    return Math.round((this.stats.quotaUsed / this.stats.quotaLimit) * 100);\n  }\n\n  /**\n   * Reset daily statistics (called automatically)\n   */\n  resetDailyStats(): void {\n    console.log('[EMAIL_MONITOR] Resetting daily statistics');\n    \n    this.stats.totalSent = 0;\n    this.stats.totalFailed = 0;\n    this.stats.quotaUsed = 0;\n    this.stats.errorsByType = {};\n    this.stats.lastResetTime = Date.now();\n    \n    // Keep only recent events (last 100)\n    this.recentEvents = this.recentEvents.slice(-100);\n    \n    this.updateStats();\n  }\n\n  /**\n   * Force reset statistics (for testing or manual reset)\n   */\n  forceReset(): void {\n    console.log('[EMAIL_MONITOR] Force resetting statistics');\n    this.resetDailyStats();\n  }\n\n  /**\n   * Get health status\n   */\n  getHealthStatus(): {\n    status: 'healthy' | 'warning' | 'critical';\n    issues: string[];\n    recommendations: string[];\n  } {\n    const issues: string[] = [];\n    const recommendations: string[] = [];\n    let status: 'healthy' | 'warning' | 'critical' = 'healthy';\n\n    // Check success rate\n    if (this.stats.successRate < 95) {\n      status = 'warning';\n      issues.push(`Low success rate: ${this.stats.successRate.toFixed(1)}%`);\n      recommendations.push('Check email service configuration and network connectivity');\n    }\n\n    if (this.stats.successRate < 80) {\n      status = 'critical';\n    }\n\n    // Check quota usage\n    if (this.isQuotaNearLimit(0.9)) {\n      status = status === 'critical' ? 'critical' : 'warning';\n      issues.push(`High quota usage: ${this.getQuotaUsagePercentage()}%`);\n      recommendations.push('Consider upgrading email service plan or implementing email throttling');\n    }\n\n    if (this.isQuotaNearLimit(0.95)) {\n      status = 'critical';\n    }\n\n    // Check for recent critical errors\n    const recentCriticalErrors = this.recentEvents\n      .filter(event => \n        event.type === 'error' && \n        event.error?.code === 'QUOTA_EXCEEDED' &&\n        Date.now() - event.timestamp < 60 * 60 * 1000 // Last hour\n      );\n\n    if (recentCriticalErrors.length > 0) {\n      status = 'critical';\n      issues.push('Quota exceeded errors in the last hour');\n      recommendations.push('Immediate attention required - email service quota exceeded');\n    }\n\n    // Check average response time\n    if (this.stats.averageResponseTime > 5000) {\n      status = status === 'critical' ? 'critical' : 'warning';\n      issues.push(`High response time: ${this.stats.averageResponseTime}ms`);\n      recommendations.push('Check email service performance and network latency');\n    }\n\n    return { status, issues, recommendations };\n  }\n\n  private addEvent(event: EmailServiceEvent): void {\n    this.recentEvents.push(event);\n    \n    // Keep only the most recent events\n    if (this.recentEvents.length > this.maxEvents) {\n      this.recentEvents = this.recentEvents.slice(-this.maxEvents);\n    }\n  }\n\n  private updateStats(): void {\n    const total = this.stats.totalSent + this.stats.totalFailed;\n    this.stats.successRate = total > 0 ? (this.stats.totalSent / total) * 100 : 100;\n    \n    // Calculate average response time from recent events\n    const recentEvents = this.recentEvents.slice(-100);\n    if (recentEvents.length > 0) {\n      const totalTime = recentEvents.reduce((sum, event) => sum + event.responseTime, 0);\n      this.stats.averageResponseTime = Math.round(totalTime / recentEvents.length);\n    }\n  }\n\n  private checkForReset(): void {\n    const now = Date.now();\n    if (now - this.stats.lastResetTime >= this.resetInterval) {\n      this.resetDailyStats();\n    }\n  }\n\n  private getQuotaLimit(): number {\n    // Default Resend free tier limits\n    // This could be made configurable via environment variables\n    const dailyLimit = parseInt(process.env.EMAIL_DAILY_QUOTA || '100', 10);\n    return dailyLimit;\n  }\n\n  private handleQuotaExceeded(): void {\n    console.error('[EMAIL_MONITOR] CRITICAL: Email quota exceeded!');\n    \n    // In a production system, you might want to:\n    // - Send alerts to administrators\n    // - Temporarily disable email sending\n    // - Switch to a backup email service\n    // - Log to external monitoring system\n    \n    if (process.env.NODE_ENV === 'production') {\n      // Log critical error for external monitoring\n      console.error('[EMAIL_MONITOR] ALERT: Email service quota exceeded - immediate attention required');\n    }\n  }\n}\n\n// Export singleton instance\nexport const emailServiceMonitor = new EmailServiceMonitor();\n\n// Schedule daily reset (but not during tests)\nif (process.env.NODE_ENV === 'production') {\n  // Reset at midnight UTC\n  const now = new Date();\n  const tomorrow = new Date(now);\n  tomorrow.setUTCDate(tomorrow.getUTCDate() + 1);\n  tomorrow.setUTCHours(0, 0, 0, 0);\n  \n  const msUntilMidnight = tomorrow.getTime() - now.getTime();\n  \n  setTimeout(() => {\n    emailServiceMonitor.resetDailyStats();\n    \n    // Then reset every 24 hours\n    setInterval(() => {\n      emailServiceMonitor.resetDailyStats();\n    }, 24 * 60 * 60 * 1000);\n  }, msUntilMidnight);\n}"],"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","ignoreList":[]}