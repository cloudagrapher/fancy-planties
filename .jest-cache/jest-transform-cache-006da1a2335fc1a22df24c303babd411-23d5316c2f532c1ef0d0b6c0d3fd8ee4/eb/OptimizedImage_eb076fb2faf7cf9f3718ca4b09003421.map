{"version":3,"names":["cov_1bnpm3fkpw","actualCoverage","s","LazyImageGallery","f","OptimizedImage","src","alt","width","b","height","className","priority","quality","placeholder","onLoad","onError","isLoaded","setIsLoaded","_react","useState","hasError","setHasError","optimizedSrc","setOptimizedSrc","imgRef","useRef","isInView","setIsInView","useEffect","current","observer","_performance","imageOptimization","createLazyLoadObserver","entry","isIntersecting","unobserve","target","observe","disconnect","startsWith","compressBase64Image","then","catch","handleLoad","handleError","_jsxruntime","jsxs","ref","style","jsx","_image","default","sizes","Math","floor","images","onImageClick","loadedImages","setLoadedImages","Set","handleImageInView","index","prev","map","image","LazyGalleryImage","shouldLoad","has","onInView","onClick"],"sources":["/Users/stefanbekker/projects/fancy-planties/src/components/shared/OptimizedImage.tsx"],"sourcesContent":["'use client';\n\nimport { useState, useRef, useEffect } from 'react';\nimport Image from 'next/image';\nimport { imageOptimization } from '@/lib/utils/performance';\n\ninterface OptimizedImageProps {\n  src: string;\n  alt: string;\n  width?: number;\n  height?: number;\n  className?: string;\n  priority?: boolean;\n  quality?: number;\n  placeholder?: 'blur' | 'empty';\n  onLoad?: () => void;\n  onError?: () => void;\n}\n\nexport function OptimizedImage({\n  src,\n  alt,\n  width = 400,\n  height = 300,\n  className = '',\n  priority = false,\n  quality = 80,\n  placeholder = 'empty',\n  onLoad,\n  onError,\n}: OptimizedImageProps) {\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [hasError, setHasError] = useState(false);\n  const [optimizedSrc, setOptimizedSrc] = useState<string>(src);\n  const imgRef = useRef<HTMLDivElement>(null);\n  const [isInView, setIsInView] = useState(priority);\n\n  // Lazy loading with Intersection Observer\n  useEffect(() => {\n    if (priority || !imgRef.current) return;\n\n    const observer = imageOptimization.createLazyLoadObserver((entry) => {\n      if (entry.isIntersecting) {\n        setIsInView(true);\n        observer.unobserve(entry.target);\n      }\n    });\n\n    observer.observe(imgRef.current);\n\n    return () => observer.disconnect();\n  }, [priority]);\n\n  // Optimize base64 images\n  useEffect(() => {\n    if (src.startsWith('data:image/') && !priority) {\n      imageOptimization.compressBase64Image(src, quality / 100)\n        .then(setOptimizedSrc)\n        .catch(() => setOptimizedSrc(src));\n    } else {\n      setOptimizedSrc(src);\n    }\n  }, [src, quality, priority]);\n\n  const handleLoad = () => {\n    setIsLoaded(true);\n    onLoad?.();\n  };\n\n  const handleError = () => {\n    setHasError(true);\n    onError?.();\n  };\n\n  return (\n    <div \n      ref={imgRef}\n      className={`relative overflow-hidden ${className}`}\n      style={{ width, height }}\n    >\n      {/* Loading placeholder */}\n      {!isLoaded && !hasError && (\n        <div className=\"image-placeholder--loading overlay\">\n          <div className=\"spinner\" />\n        </div>\n      )}\n\n      {/* Error placeholder */}\n      {hasError && (\n        <div className=\"image-placeholder--error overlay\">\n          <div className=\"image-placeholder-text\">Failed to load image</div>\n        </div>\n      )}\n\n      {/* Actual image */}\n      {isInView && !hasError && (\n        <Image\n          src={optimizedSrc}\n          alt={alt}\n          width={width}\n          height={height}\n          priority={priority}\n          quality={quality}\n          placeholder={placeholder}\n          className={`transition-opacity duration-300 ${\n            isLoaded ? 'opacity-100' : 'opacity-0'\n          }`}\n          onLoad={handleLoad}\n          onError={handleError}\n          sizes={`(max-width: 768px) ${width}px, (max-width: 1200px) ${Math.floor(width * 1.5)}px, ${width * 2}px`}\n        />\n      )}\n    </div>\n  );\n}\n\ninterface LazyImageGalleryProps {\n  images: string[];\n  alt: string;\n  className?: string;\n  onImageClick?: (index: number) => void;\n}\n\nexport function LazyImageGallery({\n  images,\n  alt,\n  className = '',\n  onImageClick,\n}: LazyImageGalleryProps) {\n  const [loadedImages, setLoadedImages] = useState<Set<number>>(new Set([0])); // Load first image immediately\n\n  const handleImageInView = (index: number) => {\n    setLoadedImages(prev => new Set([...prev, index]));\n  };\n\n  return (\n    <div className={`grid grid-cols-2 gap-2 ${className}`}>\n      {images.map((image, index) => (\n        <LazyGalleryImage\n          key={index}\n          src={image}\n          alt={`${alt} ${index + 1}`}\n          index={index}\n          shouldLoad={loadedImages.has(index)}\n          onInView={() => handleImageInView(index)}\n          onClick={() => onImageClick?.(index)}\n        />\n      ))}\n    </div>\n  );\n}\n\ninterface LazyGalleryImageProps {\n  src: string;\n  alt: string;\n  index: number;\n  shouldLoad: boolean;\n  onInView: () => void;\n  onClick: () => void;\n}\n\nfunction LazyGalleryImage({\n  src,\n  alt,\n  index,\n  shouldLoad,\n  onInView,\n  onClick,\n}: LazyGalleryImageProps) {\n  const imgRef = useRef<HTMLDivElement>(null);\n  const [isInView, setIsInView] = useState(false);\n\n  useEffect(() => {\n    if (!imgRef.current || shouldLoad) return;\n\n    const observer = imageOptimization.createLazyLoadObserver(() => {\n      setIsInView(true);\n      onInView();\n    });\n\n    observer.observe(imgRef.current);\n\n    return () => observer.disconnect();\n  }, [shouldLoad, onInView]);\n\n  return (\n    <div\n      ref={imgRef}\n      className=\"aspect-square cursor-pointer hover:opacity-80 transition-opacity\"\n      onClick={onClick}\n    >\n      {(shouldLoad || isInView) ? (\n        <OptimizedImage\n          src={src}\n          alt={alt}\n          width={200}\n          height={200}\n          className=\"w-full h-full object-cover rounded-lg\"\n          quality={70}\n        />\n      ) : (\n        <div className=\"image-placeholder--loading w-full h-full rounded-lg\">\n          <div className=\"image-placeholder-text text-xs\">Loading...</div>\n        </div>\n      )}\n    </div>\n  );\n}"],"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","ignoreList":[]}