{"version":3,"sources":["/Users/stefanbekker/projects/fancy-planties/src/lib/services/__tests__/email-verification-code-service.test.ts"],"sourcesContent":["import { describe, it, expect, beforeEach, afterEach, jest } from '@jest/globals';\nimport { EmailVerificationCodeService, VerificationError, VerificationCodeError } from '../email-verification-code-service';\n\n// Mock the database\nconst mockDb = {\n  insert: jest.fn(),\n  select: jest.fn(),\n  update: jest.fn(),\n  delete: jest.fn(),\n  transaction: jest.fn(),\n};\n\njest.mock('@/lib/db', () => ({\n  db: mockDb,\n}));\n\ndescribe('EmailVerificationCodeService', () => {\n  let service: EmailVerificationCodeService;\n  const mockUserId = 1;\n  const mockEmail = 'test@example.com';\n  const mockCode = '123456';\n\n  beforeEach(() => {\n    service = new EmailVerificationCodeService();\n    jest.clearAllMocks();\n  });\n\n  afterEach(() => {\n    jest.restoreAllMocks();\n  });\n\n  describe('generateCode', () => {\n    it('should generate a 6-digit code', async () => {\n      // Mock deleteUserCodes to resolve\n      const deleteUserCodesSpy = jest.spyOn(service, 'deleteUserCodes').mockResolvedValue();\n      \n      // Mock insert chain\n      const mockValues = jest.fn().mockResolvedValue(undefined);\n      mockDb.insert.mockReturnValue({ values: mockValues });\n      \n      const code = await service.generateCode(mockUserId);\n      \n      expect(code).toMatch(/^\\d{6}$/);\n      expect(deleteUserCodesSpy).toHaveBeenCalledWith(mockUserId);\n      expect(mockDb.insert).toHaveBeenCalled();\n      expect(mockValues).toHaveBeenCalledWith(\n        expect.objectContaining({\n          userId: mockUserId,\n          code: expect.stringMatching(/^\\d{6}$/),\n          expiresAt: expect.any(Date),\n          attemptsUsed: 0,\n        })\n      );\n    });\n\n    it('should delete existing codes before generating new one', async () => {\n      const deleteUserCodesSpy = jest.spyOn(service, 'deleteUserCodes').mockResolvedValue();\n      const mockValues = jest.fn().mockResolvedValue(undefined);\n      mockDb.insert.mockReturnValue({ values: mockValues });\n      \n      await service.generateCode(mockUserId);\n      \n      expect(deleteUserCodesSpy).toHaveBeenCalledWith(mockUserId);\n    });\n\n    it('should store code with correct expiration time', async () => {\n      jest.spyOn(service, 'deleteUserCodes').mockResolvedValue();\n      const mockValues = jest.fn().mockResolvedValue(undefined);\n      mockDb.insert.mockReturnValue({ values: mockValues });\n      \n      const beforeTime = Date.now();\n      await service.generateCode(mockUserId);\n      const afterTime = Date.now();\n      \n      expect(mockValues).toHaveBeenCalledWith(\n        expect.objectContaining({\n          userId: mockUserId,\n          code: expect.stringMatching(/^\\d{6}$/),\n          expiresAt: expect.any(Date),\n          attemptsUsed: 0,\n        })\n      );\n      \n      // Check that expiration is approximately 10 minutes from now\n      const callArgs = mockValues.mock.calls[0][0];\n      const expirationTime = callArgs.expiresAt.getTime();\n      const expectedMin = beforeTime + 9.5 * 60 * 1000; // 9.5 minutes\n      const expectedMax = afterTime + 10.5 * 60 * 1000; // 10.5 minutes\n      \n      expect(expirationTime).toBeGreaterThan(expectedMin);\n      expect(expirationTime).toBeLessThan(expectedMax);\n    });\n  });\n\n  describe('validateCode', () => {\n    const mockUser = { id: mockUserId, isEmailVerified: false };\n    const mockVerificationCode = {\n      id: 1,\n      userId: mockUserId,\n      code: mockCode,\n      expiresAt: new Date(Date.now() + 5 * 60 * 1000), // 5 minutes from now\n      createdAt: new Date(),\n      attemptsUsed: 0,\n    };\n\n    it('should validate correct code successfully', async () => {\n      // Mock user lookup\n      const mockUserLimit = jest.fn().mockResolvedValue([mockUser]);\n      const mockUserWhere = jest.fn().mockReturnValue({ limit: mockUserLimit });\n      const mockUserFrom = jest.fn().mockReturnValue({ where: mockUserWhere });\n      mockDb.select.mockReturnValueOnce({ from: mockUserFrom });\n\n      // Mock verification code lookup\n      const mockCodeLimit = jest.fn().mockResolvedValue([mockVerificationCode]);\n      const mockCodeWhere = jest.fn().mockReturnValue({ limit: mockCodeLimit });\n      const mockCodeFrom = jest.fn().mockReturnValue({ where: mockCodeWhere });\n      mockDb.select.mockReturnValueOnce({ from: mockCodeFrom });\n\n      // Mock transaction\n      const mockTx = {\n        update: jest.fn().mockReturnValue({\n          set: jest.fn().mockReturnValue({\n            where: jest.fn().mockResolvedValue(undefined),\n          }),\n        }),\n        delete: jest.fn().mockReturnValue({\n          where: jest.fn().mockResolvedValue(undefined),\n        }),\n      };\n      mockDb.transaction.mockImplementation(async (callback) => callback(mockTx));\n\n      const result = await service.validateCode(mockEmail, mockCode);\n\n      expect(result).toBe(true);\n      expect(mockDb.transaction).toHaveBeenCalled();\n    });\n\n    it('should throw USER_NOT_FOUND when user does not exist', async () => {\n      // Mock user lookup to return empty array\n      const mockUserLimit = jest.fn().mockResolvedValue([]);\n      const mockUserWhere = jest.fn().mockReturnValue({ limit: mockUserLimit });\n      const mockUserFrom = jest.fn().mockReturnValue({ where: mockUserWhere });\n      mockDb.select.mockReturnValueOnce({ from: mockUserFrom });\n\n      await expect(service.validateCode(mockEmail, mockCode))\n        .rejects\n        .toThrow(new VerificationCodeError('User not found', VerificationError.USER_NOT_FOUND));\n    });\n\n    it('should throw ALREADY_VERIFIED when user is already verified', async () => {\n      // Mock user lookup to return verified user\n      const mockUserLimit = jest.fn().mockResolvedValue([{ ...mockUser, isEmailVerified: true }]);\n      const mockUserWhere = jest.fn().mockReturnValue({ limit: mockUserLimit });\n      const mockUserFrom = jest.fn().mockReturnValue({ where: mockUserWhere });\n      mockDb.select.mockReturnValueOnce({ from: mockUserFrom });\n\n      await expect(service.validateCode(mockEmail, mockCode))\n        .rejects\n        .toThrow(new VerificationCodeError('Email already verified', VerificationError.ALREADY_VERIFIED));\n    });\n\n    it('should throw CODE_INVALID when code does not exist', async () => {\n      // Mock user lookup\n      const mockUserLimit = jest.fn().mockResolvedValue([mockUser]);\n      const mockUserWhere = jest.fn().mockReturnValue({ limit: mockUserLimit });\n      const mockUserFrom = jest.fn().mockReturnValue({ where: mockUserWhere });\n      mockDb.select.mockReturnValueOnce({ from: mockUserFrom });\n\n      // Mock verification code lookup to return empty array\n      const mockCodeLimit = jest.fn().mockResolvedValue([]);\n      const mockCodeWhere = jest.fn().mockReturnValue({ limit: mockCodeLimit });\n      const mockCodeFrom = jest.fn().mockReturnValue({ where: mockCodeWhere });\n      mockDb.select.mockReturnValueOnce({ from: mockCodeFrom });\n\n      await expect(service.validateCode(mockEmail, mockCode))\n        .rejects\n        .toThrow(new VerificationCodeError('Invalid verification code', VerificationError.CODE_INVALID));\n    });\n\n    it('should throw CODE_EXPIRED when code has expired', async () => {\n      const expiredCode = {\n        ...mockVerificationCode,\n        expiresAt: new Date(Date.now() - 5 * 60 * 1000), // 5 minutes ago\n      };\n\n      // Mock user lookup\n      const mockUserLimit = jest.fn().mockResolvedValue([mockUser]);\n      const mockUserWhere = jest.fn().mockReturnValue({ limit: mockUserLimit });\n      const mockUserFrom = jest.fn().mockReturnValue({ where: mockUserWhere });\n      mockDb.select.mockReturnValueOnce({ from: mockUserFrom });\n\n      // Mock verification code lookup\n      const mockCodeLimit = jest.fn().mockResolvedValue([expiredCode]);\n      const mockCodeWhere = jest.fn().mockReturnValue({ limit: mockCodeLimit });\n      const mockCodeFrom = jest.fn().mockReturnValue({ where: mockCodeWhere });\n      mockDb.select.mockReturnValueOnce({ from: mockCodeFrom });\n\n      // Mock delete for expired code cleanup\n      const mockDeleteWhere = jest.fn().mockResolvedValue(undefined);\n      mockDb.delete.mockReturnValue({ where: mockDeleteWhere });\n\n      await expect(service.validateCode(mockEmail, mockCode))\n        .rejects\n        .toThrow(new VerificationCodeError('Verification code has expired', VerificationError.CODE_EXPIRED));\n\n      expect(mockDb.delete).toHaveBeenCalled();\n    });\n\n    it('should throw TOO_MANY_ATTEMPTS when max attempts exceeded', async () => {\n      const maxAttemptsCode = {\n        ...mockVerificationCode,\n        attemptsUsed: 5, // Max attempts\n      };\n\n      // Mock user lookup\n      const mockUserLimit = jest.fn().mockResolvedValue([mockUser]);\n      const mockUserWhere = jest.fn().mockReturnValue({ limit: mockUserLimit });\n      const mockUserFrom = jest.fn().mockReturnValue({ where: mockUserWhere });\n      mockDb.select.mockReturnValueOnce({ from: mockUserFrom });\n\n      // Mock verification code lookup\n      const mockCodeLimit = jest.fn().mockResolvedValue([maxAttemptsCode]);\n      const mockCodeWhere = jest.fn().mockReturnValue({ limit: mockCodeLimit });\n      const mockCodeFrom = jest.fn().mockReturnValue({ where: mockCodeWhere });\n      mockDb.select.mockReturnValueOnce({ from: mockCodeFrom });\n\n      // Mock delete for code invalidation\n      const mockDeleteWhere = jest.fn().mockResolvedValue(undefined);\n      mockDb.delete.mockReturnValue({ where: mockDeleteWhere });\n\n      await expect(service.validateCode(mockEmail, mockCode))\n        .rejects\n        .toThrow(new VerificationCodeError('Too many verification attempts', VerificationError.TOO_MANY_ATTEMPTS));\n\n      expect(mockDb.delete).toHaveBeenCalled();\n    });\n  });\n\n  describe('incrementAttempts', () => {\n    const mockUser = { id: mockUserId };\n    const mockVerificationCode = { id: 1, attemptsUsed: 2 };\n\n    it('should increment attempts for valid code', async () => {\n      // Mock user lookup\n      const mockUserLimit = jest.fn().mockResolvedValue([mockUser]);\n      const mockUserWhere = jest.fn().mockReturnValue({ limit: mockUserLimit });\n      const mockUserFrom = jest.fn().mockReturnValue({ where: mockUserWhere });\n      mockDb.select.mockReturnValueOnce({ from: mockUserFrom });\n\n      // Mock verification code lookup\n      const mockCodeLimit = jest.fn().mockResolvedValue([mockVerificationCode]);\n      const mockCodeWhere = jest.fn().mockReturnValue({ limit: mockCodeLimit });\n      const mockCodeFrom = jest.fn().mockReturnValue({ where: mockCodeWhere });\n      mockDb.select.mockReturnValueOnce({ from: mockCodeFrom });\n\n      // Mock update\n      const mockUpdateWhere = jest.fn().mockResolvedValue(undefined);\n      const mockUpdateSet = jest.fn().mockReturnValue({ where: mockUpdateWhere });\n      mockDb.update.mockReturnValue({ set: mockUpdateSet });\n\n      await service.incrementAttempts(mockEmail, mockCode);\n\n      expect(mockDb.update).toHaveBeenCalled();\n      expect(mockUpdateSet).toHaveBeenCalledWith({ attemptsUsed: 3 });\n    });\n\n    it('should handle user not found gracefully', async () => {\n      // Mock user lookup to return empty array\n      const mockUserLimit = jest.fn().mockResolvedValue([]);\n      const mockUserWhere = jest.fn().mockReturnValue({ limit: mockUserLimit });\n      const mockUserFrom = jest.fn().mockReturnValue({ where: mockUserWhere });\n      mockDb.select.mockReturnValueOnce({ from: mockUserFrom });\n\n      await expect(service.incrementAttempts(mockEmail, mockCode)).resolves.toBeUndefined();\n      expect(mockDb.update).not.toHaveBeenCalled();\n    });\n\n    it('should handle code not found gracefully', async () => {\n      // Mock user lookup\n      const mockUserLimit = jest.fn().mockResolvedValue([mockUser]);\n      const mockUserWhere = jest.fn().mockReturnValue({ limit: mockUserLimit });\n      const mockUserFrom = jest.fn().mockReturnValue({ where: mockUserWhere });\n      mockDb.select.mockReturnValueOnce({ from: mockUserFrom });\n\n      // Mock verification code lookup to return empty array\n      const mockCodeLimit = jest.fn().mockResolvedValue([]);\n      const mockCodeWhere = jest.fn().mockReturnValue({ limit: mockCodeLimit });\n      const mockCodeFrom = jest.fn().mockReturnValue({ where: mockCodeWhere });\n      mockDb.select.mockReturnValueOnce({ from: mockCodeFrom });\n\n      await expect(service.incrementAttempts(mockEmail, mockCode)).resolves.toBeUndefined();\n      expect(mockDb.update).not.toHaveBeenCalled();\n    });\n  });\n\n  describe('cleanupExpiredCodes', () => {\n    it('should delete expired codes and return count', async () => {\n      const mockDeleteResult = { rowCount: 5 };\n      const mockDeleteWhere = jest.fn().mockResolvedValue(mockDeleteResult);\n      mockDb.delete.mockReturnValue({ where: mockDeleteWhere });\n\n      const result = await service.cleanupExpiredCodes();\n\n      expect(result).toBe(5);\n      expect(mockDb.delete).toHaveBeenCalled();\n    });\n\n    it('should handle missing rowCount gracefully', async () => {\n      const mockDeleteResult = {}; // No rowCount property\n      const mockDeleteWhere = jest.fn().mockResolvedValue(mockDeleteResult);\n      mockDb.delete.mockReturnValue({ where: mockDeleteWhere });\n\n      const result = await service.cleanupExpiredCodes();\n\n      expect(result).toBe(0);\n    });\n  });\n\n  describe('deleteUserCodes', () => {\n    it('should delete all codes for a user', async () => {\n      const mockDeleteWhere = jest.fn().mockResolvedValue(undefined);\n      mockDb.delete.mockReturnValue({ where: mockDeleteWhere });\n\n      await service.deleteUserCodes(mockUserId);\n\n      expect(mockDb.delete).toHaveBeenCalled();\n    });\n  });\n\n  describe('getUserActiveCode', () => {\n    it('should return active code for user', async () => {\n      const mockActiveCode = {\n        id: 1,\n        userId: mockUserId,\n        code: mockCode,\n        expiresAt: new Date(Date.now() + 5 * 60 * 1000),\n        createdAt: new Date(),\n        attemptsUsed: 0,\n      };\n\n      const mockLimit = jest.fn().mockResolvedValue([mockActiveCode]);\n      const mockWhere = jest.fn().mockReturnValue({ limit: mockLimit });\n      const mockFrom = jest.fn().mockReturnValue({ where: mockWhere });\n      mockDb.select.mockReturnValue({ from: mockFrom });\n\n      const result = await service.getUserActiveCode(mockUserId);\n\n      expect(result).toEqual(mockActiveCode);\n    });\n\n    it('should return null when no active code exists', async () => {\n      const mockLimit = jest.fn().mockResolvedValue([]);\n      const mockWhere = jest.fn().mockReturnValue({ limit: mockLimit });\n      const mockFrom = jest.fn().mockReturnValue({ where: mockWhere });\n      mockDb.select.mockReturnValue({ from: mockFrom });\n\n      const result = await service.getUserActiveCode(mockUserId);\n\n      expect(result).toBeNull();\n    });\n  });\n\n  describe('hasActiveCode', () => {\n    it('should return true when user has active code', async () => {\n      jest.spyOn(service, 'getUserActiveCode').mockResolvedValue({\n        id: 1,\n        userId: mockUserId,\n        code: mockCode,\n        expiresAt: new Date(),\n        createdAt: new Date(),\n        attemptsUsed: 0,\n      });\n\n      const result = await service.hasActiveCode(mockUserId);\n\n      expect(result).toBe(true);\n    });\n\n    it('should return false when user has no active code', async () => {\n      jest.spyOn(service, 'getUserActiveCode').mockResolvedValue(null);\n\n      const result = await service.hasActiveCode(mockUserId);\n\n      expect(result).toBe(false);\n    });\n  });\n\n  describe('getCodeStats', () => {\n    it('should return code statistics', async () => {\n      // Mock the three select queries for stats\n      const mockFrom1 = jest.fn().mockReturnValue({\n        where: jest.fn().mockResolvedValue([1, 2, 3]), // 3 active codes\n      });\n      const mockFrom2 = jest.fn().mockReturnValue({\n        where: jest.fn().mockResolvedValue([1, 2]), // 2 expired codes\n      });\n      const mockFrom3 = jest.fn().mockReturnValue({\n        where: jest.fn().mockResolvedValue([1]), // 1 high attempt code\n      });\n\n      mockDb.select\n        .mockReturnValueOnce({ from: mockFrom1 })\n        .mockReturnValueOnce({ from: mockFrom2 })\n        .mockReturnValueOnce({ from: mockFrom3 });\n\n      const result = await service.getCodeStats();\n\n      expect(result).toEqual({\n        totalActive: 3,\n        expiredCount: 2,\n        highAttemptCount: 1,\n      });\n    });\n  });\n\n  describe('code generation security', () => {\n    it('should generate unique codes', async () => {\n      jest.spyOn(service, 'deleteUserCodes').mockResolvedValue();\n      const mockValues = jest.fn().mockResolvedValue(undefined);\n      mockDb.insert.mockReturnValue({ values: mockValues });\n      \n      const codes = new Set();\n      for (let i = 0; i < 100; i++) {\n        const code = await service.generateCode(mockUserId);\n        codes.add(code);\n      }\n      \n      // Should have generated 100 unique codes (very high probability)\n      expect(codes.size).toBeGreaterThan(95);\n    });\n\n    it('should always generate 6-digit codes', async () => {\n      jest.spyOn(service, 'deleteUserCodes').mockResolvedValue();\n      const mockValues = jest.fn().mockResolvedValue(undefined);\n      mockDb.insert.mockReturnValue({ values: mockValues });\n      \n      for (let i = 0; i < 50; i++) {\n        const code = await service.generateCode(mockUserId);\n        expect(code).toMatch(/^\\d{6}$/);\n        expect(code.length).toBe(6);\n      }\n    });\n\n    it('should pad codes with leading zeros', async () => {\n      jest.spyOn(service, 'deleteUserCodes').mockResolvedValue();\n      const mockValues = jest.fn().mockResolvedValue(undefined);\n      mockDb.insert.mockReturnValue({ values: mockValues });\n      \n      // Mock crypto.randomBytes to return a small number\n      const originalRandomBytes = require('crypto').randomBytes;\n      const mockRandomBytes = jest.fn().mockReturnValue(Buffer.from([0, 0, 0, 1])); // Very small number\n      require('crypto').randomBytes = mockRandomBytes;\n      \n      const code = await service.generateCode(mockUserId);\n      \n      expect(code).toMatch(/^\\d{6}$/);\n      expect(code.length).toBe(6);\n      \n      // Restore original function\n      require('crypto').randomBytes = originalRandomBytes;\n    });\n  });\n});"],"names":["mockDb","insert","jest","fn","select","update","delete","transaction","mock","db","describe","service","mockUserId","mockEmail","mockCode","beforeEach","EmailVerificationCodeService","clearAllMocks","afterEach","restoreAllMocks","it","deleteUserCodesSpy","spyOn","mockResolvedValue","mockValues","undefined","mockReturnValue","values","code","generateCode","expect","toMatch","toHaveBeenCalledWith","toHaveBeenCalled","objectContaining","userId","stringMatching","expiresAt","any","Date","attemptsUsed","beforeTime","now","afterTime","callArgs","calls","expirationTime","getTime","expectedMin","expectedMax","toBeGreaterThan","toBeLessThan","mockUser","id","isEmailVerified","mockVerificationCode","createdAt","mockUserLimit","mockUserWhere","limit","mockUserFrom","where","mockReturnValueOnce","from","mockCodeLimit","mockCodeWhere","mockCodeFrom","mockTx","set","mockImplementation","callback","result","validateCode","toBe","rejects","toThrow","VerificationCodeError","VerificationError","USER_NOT_FOUND","ALREADY_VERIFIED","CODE_INVALID","expiredCode","mockDeleteWhere","CODE_EXPIRED","maxAttemptsCode","TOO_MANY_ATTEMPTS","mockUpdateWhere","mockUpdateSet","incrementAttempts","resolves","toBeUndefined","not","mockDeleteResult","rowCount","cleanupExpiredCodes","deleteUserCodes","mockActiveCode","mockLimit","mockWhere","mockFrom","getUserActiveCode","toEqual","toBeNull","hasActiveCode","mockFrom1","mockFrom2","mockFrom3","getCodeStats","totalActive","expiredCount","highAttemptCount","codes","Set","i","add","size","length","originalRandomBytes","require","randomBytes","mockRandomBytes","Buffer"],"mappings":"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"}