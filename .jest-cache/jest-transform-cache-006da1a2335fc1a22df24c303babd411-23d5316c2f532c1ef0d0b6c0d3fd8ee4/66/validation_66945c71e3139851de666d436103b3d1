1f42205621a826f3a77aba562e83820a
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get changePasswordSchema () {
        return changePasswordSchema;
    },
    get emailSchema () {
        return emailSchema;
    },
    get formatValidationErrors () {
        return formatValidationErrors;
    },
    get nameSchema () {
        return nameSchema;
    },
    get passwordResetRequestSchema () {
        return passwordResetRequestSchema;
    },
    get passwordResetSchema () {
        return passwordResetSchema;
    },
    get passwordSchema () {
        return passwordSchema;
    },
    get signInSchema () {
        return signInSchema;
    },
    get signUpSchema () {
        return signUpSchema;
    },
    get updateProfileSchema () {
        return updateProfileSchema;
    },
    get validateInput () {
        return validateInput;
    }
});
const _zod = require("zod");
const passwordSchema = _zod.z.string().min(8, 'Password must be at least 8 characters long').max(128, 'Password must be less than 128 characters').regex(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)/, 'Password must contain at least one lowercase letter, one uppercase letter, and one number');
const emailSchema = _zod.z.string().email('Please enter a valid email address').max(255, 'Email must be less than 255 characters').transform((email)=>email.toLowerCase());
const nameSchema = _zod.z.string().min(1, 'Name is required').max(100, 'Name must be less than 100 characters').regex(/^[a-zA-Z\s'-]+$/, 'Name can only contain letters, spaces, hyphens, and apostrophes').transform((name)=>name.trim());
const signUpSchema = _zod.z.object({
    email: emailSchema,
    password: passwordSchema,
    name: nameSchema
});
const signInSchema = _zod.z.object({
    email: emailSchema,
    password: _zod.z.string().min(1, 'Password is required')
});
const passwordResetRequestSchema = _zod.z.object({
    email: emailSchema
});
const passwordResetSchema = _zod.z.object({
    token: _zod.z.string().min(1, 'Reset token is required'),
    password: passwordSchema
});
const changePasswordSchema = _zod.z.object({
    currentPassword: _zod.z.string().min(1, 'Current password is required'),
    newPassword: passwordSchema
});
const updateProfileSchema = _zod.z.object({
    name: nameSchema,
    email: emailSchema
});
function formatValidationErrors(error) {
    const errors = {};
    error.issues.forEach((issue)=>{
        const path = issue.path.join('.');
        errors[path] = issue.message;
    });
    return errors;
}
function validateInput(schema, input) {
    try {
        const data = schema.parse(input);
        return {
            success: true,
            data
        };
    } catch (error) {
        if (error instanceof _zod.z.ZodError) {
            return {
                success: false,
                errors: formatValidationErrors(error)
            };
        }
        throw error;
    }
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9zdGVmYW5iZWtrZXIvcHJvamVjdHMvZmFuY3ktcGxhbnRpZXMvc3JjL2xpYi9hdXRoL3ZhbGlkYXRpb24udHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgeiB9IGZyb20gJ3pvZCc7XG5cbi8vIFBhc3N3b3JkIHZhbGlkYXRpb24gc2NoZW1hXG5leHBvcnQgY29uc3QgcGFzc3dvcmRTY2hlbWEgPSB6XG4gIC5zdHJpbmcoKVxuICAubWluKDgsICdQYXNzd29yZCBtdXN0IGJlIGF0IGxlYXN0IDggY2hhcmFjdGVycyBsb25nJylcbiAgLm1heCgxMjgsICdQYXNzd29yZCBtdXN0IGJlIGxlc3MgdGhhbiAxMjggY2hhcmFjdGVycycpXG4gIC5yZWdleChcbiAgICAvXig/PS4qW2Etel0pKD89LipbQS1aXSkoPz0uKlxcZCkvLFxuICAgICdQYXNzd29yZCBtdXN0IGNvbnRhaW4gYXQgbGVhc3Qgb25lIGxvd2VyY2FzZSBsZXR0ZXIsIG9uZSB1cHBlcmNhc2UgbGV0dGVyLCBhbmQgb25lIG51bWJlcidcbiAgKTtcblxuLy8gRW1haWwgdmFsaWRhdGlvbiBzY2hlbWFcbmV4cG9ydCBjb25zdCBlbWFpbFNjaGVtYSA9IHpcbiAgLnN0cmluZygpXG4gIC5lbWFpbCgnUGxlYXNlIGVudGVyIGEgdmFsaWQgZW1haWwgYWRkcmVzcycpXG4gIC5tYXgoMjU1LCAnRW1haWwgbXVzdCBiZSBsZXNzIHRoYW4gMjU1IGNoYXJhY3RlcnMnKVxuICAudHJhbnNmb3JtKChlbWFpbCkgPT4gZW1haWwudG9Mb3dlckNhc2UoKSk7XG5cbi8vIE5hbWUgdmFsaWRhdGlvbiBzY2hlbWFcbmV4cG9ydCBjb25zdCBuYW1lU2NoZW1hID0gelxuICAuc3RyaW5nKClcbiAgLm1pbigxLCAnTmFtZSBpcyByZXF1aXJlZCcpXG4gIC5tYXgoMTAwLCAnTmFtZSBtdXN0IGJlIGxlc3MgdGhhbiAxMDAgY2hhcmFjdGVycycpXG4gIC5yZWdleCgvXlthLXpBLVpcXHMnLV0rJC8sICdOYW1lIGNhbiBvbmx5IGNvbnRhaW4gbGV0dGVycywgc3BhY2VzLCBoeXBoZW5zLCBhbmQgYXBvc3Ryb3BoZXMnKVxuICAudHJhbnNmb3JtKChuYW1lKSA9PiBuYW1lLnRyaW0oKSk7XG5cbi8vIFNpZ24gdXAgdmFsaWRhdGlvbiBzY2hlbWFcbmV4cG9ydCBjb25zdCBzaWduVXBTY2hlbWEgPSB6Lm9iamVjdCh7XG4gIGVtYWlsOiBlbWFpbFNjaGVtYSxcbiAgcGFzc3dvcmQ6IHBhc3N3b3JkU2NoZW1hLFxuICBuYW1lOiBuYW1lU2NoZW1hLFxufSk7XG5cbi8vIFNpZ24gaW4gdmFsaWRhdGlvbiBzY2hlbWFcbmV4cG9ydCBjb25zdCBzaWduSW5TY2hlbWEgPSB6Lm9iamVjdCh7XG4gIGVtYWlsOiBlbWFpbFNjaGVtYSxcbiAgcGFzc3dvcmQ6IHouc3RyaW5nKCkubWluKDEsICdQYXNzd29yZCBpcyByZXF1aXJlZCcpLFxufSk7XG5cbi8vIFBhc3N3b3JkIHJlc2V0IHJlcXVlc3Qgc2NoZW1hXG5leHBvcnQgY29uc3QgcGFzc3dvcmRSZXNldFJlcXVlc3RTY2hlbWEgPSB6Lm9iamVjdCh7XG4gIGVtYWlsOiBlbWFpbFNjaGVtYSxcbn0pO1xuXG4vLyBQYXNzd29yZCByZXNldCBzY2hlbWFcbmV4cG9ydCBjb25zdCBwYXNzd29yZFJlc2V0U2NoZW1hID0gei5vYmplY3Qoe1xuICB0b2tlbjogei5zdHJpbmcoKS5taW4oMSwgJ1Jlc2V0IHRva2VuIGlzIHJlcXVpcmVkJyksXG4gIHBhc3N3b3JkOiBwYXNzd29yZFNjaGVtYSxcbn0pO1xuXG4vLyBDaGFuZ2UgcGFzc3dvcmQgc2NoZW1hXG5leHBvcnQgY29uc3QgY2hhbmdlUGFzc3dvcmRTY2hlbWEgPSB6Lm9iamVjdCh7XG4gIGN1cnJlbnRQYXNzd29yZDogei5zdHJpbmcoKS5taW4oMSwgJ0N1cnJlbnQgcGFzc3dvcmQgaXMgcmVxdWlyZWQnKSxcbiAgbmV3UGFzc3dvcmQ6IHBhc3N3b3JkU2NoZW1hLFxufSk7XG5cbi8vIFVwZGF0ZSBwcm9maWxlIHNjaGVtYVxuZXhwb3J0IGNvbnN0IHVwZGF0ZVByb2ZpbGVTY2hlbWEgPSB6Lm9iamVjdCh7XG4gIG5hbWU6IG5hbWVTY2hlbWEsXG4gIGVtYWlsOiBlbWFpbFNjaGVtYSxcbn0pO1xuXG4vLyBWYWxpZGF0aW9uIGhlbHBlciB0eXBlc1xuZXhwb3J0IHR5cGUgU2lnblVwSW5wdXQgPSB6LmluZmVyPHR5cGVvZiBzaWduVXBTY2hlbWE+O1xuZXhwb3J0IHR5cGUgU2lnbkluSW5wdXQgPSB6LmluZmVyPHR5cGVvZiBzaWduSW5TY2hlbWE+O1xuZXhwb3J0IHR5cGUgUGFzc3dvcmRSZXNldFJlcXVlc3RJbnB1dCA9IHouaW5mZXI8dHlwZW9mIHBhc3N3b3JkUmVzZXRSZXF1ZXN0U2NoZW1hPjtcbmV4cG9ydCB0eXBlIFBhc3N3b3JkUmVzZXRJbnB1dCA9IHouaW5mZXI8dHlwZW9mIHBhc3N3b3JkUmVzZXRTY2hlbWE+O1xuZXhwb3J0IHR5cGUgQ2hhbmdlUGFzc3dvcmRJbnB1dCA9IHouaW5mZXI8dHlwZW9mIGNoYW5nZVBhc3N3b3JkU2NoZW1hPjtcbmV4cG9ydCB0eXBlIFVwZGF0ZVByb2ZpbGVJbnB1dCA9IHouaW5mZXI8dHlwZW9mIHVwZGF0ZVByb2ZpbGVTY2hlbWE+O1xuXG4vLyBWYWxpZGF0aW9uIGVycm9yIGZvcm1hdHRlclxuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdFZhbGlkYXRpb25FcnJvcnMoZXJyb3I6IHouWm9kRXJyb3IpOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+IHtcbiAgY29uc3QgZXJyb3JzOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+ID0ge307XG4gIFxuICBlcnJvci5pc3N1ZXMuZm9yRWFjaCgoaXNzdWUpID0+IHtcbiAgICBjb25zdCBwYXRoID0gaXNzdWUucGF0aC5qb2luKCcuJyk7XG4gICAgZXJyb3JzW3BhdGhdID0gaXNzdWUubWVzc2FnZTtcbiAgfSk7XG4gIFxuICByZXR1cm4gZXJyb3JzO1xufVxuXG4vLyBTYWZlIHZhbGlkYXRpb24gaGVscGVyXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVJbnB1dDxUPihcbiAgc2NoZW1hOiB6LlpvZFNjaGVtYTxUPixcbiAgaW5wdXQ6IHVua25vd25cbik6IHsgc3VjY2VzczogdHJ1ZTsgZGF0YTogVCB9IHwgeyBzdWNjZXNzOiBmYWxzZTsgZXJyb3JzOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+IH0ge1xuICB0cnkge1xuICAgIGNvbnN0IGRhdGEgPSBzY2hlbWEucGFyc2UoaW5wdXQpO1xuICAgIHJldHVybiB7IHN1Y2Nlc3M6IHRydWUsIGRhdGEgfTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiB6LlpvZEVycm9yKSB7XG4gICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgZXJyb3JzOiBmb3JtYXRWYWxpZGF0aW9uRXJyb3JzKGVycm9yKSB9O1xuICAgIH1cbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxufSJdLCJuYW1lcyI6WyJjaGFuZ2VQYXNzd29yZFNjaGVtYSIsImVtYWlsU2NoZW1hIiwiZm9ybWF0VmFsaWRhdGlvbkVycm9ycyIsIm5hbWVTY2hlbWEiLCJwYXNzd29yZFJlc2V0UmVxdWVzdFNjaGVtYSIsInBhc3N3b3JkUmVzZXRTY2hlbWEiLCJwYXNzd29yZFNjaGVtYSIsInNpZ25JblNjaGVtYSIsInNpZ25VcFNjaGVtYSIsInVwZGF0ZVByb2ZpbGVTY2hlbWEiLCJ2YWxpZGF0ZUlucHV0IiwieiIsInN0cmluZyIsIm1pbiIsIm1heCIsInJlZ2V4IiwiZW1haWwiLCJ0cmFuc2Zvcm0iLCJ0b0xvd2VyQ2FzZSIsIm5hbWUiLCJ0cmltIiwib2JqZWN0IiwicGFzc3dvcmQiLCJ0b2tlbiIsImN1cnJlbnRQYXNzd29yZCIsIm5ld1Bhc3N3b3JkIiwiZXJyb3IiLCJlcnJvcnMiLCJpc3N1ZXMiLCJmb3JFYWNoIiwiaXNzdWUiLCJwYXRoIiwiam9pbiIsIm1lc3NhZ2UiLCJzY2hlbWEiLCJpbnB1dCIsImRhdGEiLCJwYXJzZSIsInN1Y2Nlc3MiLCJab2RFcnJvciJdLCJtYXBwaW5n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