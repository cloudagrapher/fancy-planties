cde58e3c60333bc4885025ac350a043d
/**
 * @jest-environment jsdom
 */ "use strict";
jest.mock('next/navigation', ()=>({
        useRouter: ()=>({
                push: mockPush,
                refresh: mockRefresh
            })
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _userevent = /*#__PURE__*/ _interop_require_default(require("@testing-library/user-event"));
const _renderhelpers = require("../../../test-utils/helpers/render-helpers.js");
const _SignUpForm = /*#__PURE__*/ _interop_require_default(require("../../../components/auth/SignUpForm"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Mock Next.js navigation
const mockPush = jest.fn();
const mockRefresh = jest.fn();
describe('SignUpForm', ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
        // Mock successful sign-up by default
        (0, _renderhelpers.mockApiResponses)({
            '/api/auth/signup': {
                success: true,
                user: {
                    id: 1,
                    email: 'test@example.com'
                }
            }
        });
    });
    describe('Form Rendering', ()=>{
        it('renders all form fields', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_SignUpForm.default, {}));
            expect(_react1.screen.getByLabelText(/full name/i)).toBeInTheDocument();
            expect(_react1.screen.getByLabelText(/email address/i)).toBeInTheDocument();
            expect(_react1.screen.getByLabelText(/^password$/i)).toBeInTheDocument();
            expect(_react1.screen.getByRole('button', {
                name: /create account/i
            })).toBeInTheDocument();
        });
        it('has proper form attributes for accessibility', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_SignUpForm.default, {}));
            const form = _react1.screen.getByRole('form', {
                hidden: true
            });
            expect(form).toHaveAttribute('autoComplete', 'on');
            expect(form).toHaveAttribute('noValidate');
            const nameInput = _react1.screen.getByLabelText(/full name/i);
            expect(nameInput).toHaveAttribute('type', 'text');
            expect(nameInput).toHaveAttribute('autoComplete', 'name');
            expect(nameInput).toHaveAttribute('required');
            const emailInput = _react1.screen.getByLabelText(/email address/i);
            expect(emailInput).toHaveAttribute('type', 'email');
            expect(emailInput).toHaveAttribute('autoComplete', 'email');
            expect(emailInput).toHaveAttribute('required');
            const passwordInput = _react1.screen.getByLabelText(/^password$/i);
            expect(passwordInput).toHaveAttribute('type', 'password');
            expect(passwordInput).toHaveAttribute('autoComplete', 'new-password');
            expect(passwordInput).toHaveAttribute('data-new-password', 'true');
            expect(passwordInput).toHaveAttribute('required');
        });
        it('shows password requirements help text', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_SignUpForm.default, {}));
            expect(_react1.screen.getByText(/password must be at least 8 characters with uppercase, lowercase, and number/i)).toBeInTheDocument();
        });
        it('shows required field indicators', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_SignUpForm.default, {}));
            expect(_react1.screen.getByText(/full name/i)).toBeInTheDocument();
            expect(_react1.screen.getByText(/email address/i)).toBeInTheDocument();
            expect(_react1.screen.getByText(/^password$/i)).toBeInTheDocument();
            // Check for required indicators in labels
            const labels = _react1.screen.getAllByText(/\*/);
            expect(labels).toHaveLength(3); // Name, email, and password should be marked as required
        });
    });
    describe('Form Validation', ()=>{
        it('validates required fields on submission', async ()=>{
            const user = _userevent.default.setup();
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_SignUpForm.default, {}));
            const submitButton = _react1.screen.getByRole('button', {
                name: /create account/i
            });
            await user.click(submitButton);
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText(/name is required/i)).toBeInTheDocument();
                expect(_react1.screen.getByText(/email is required/i)).toBeInTheDocument();
                expect(_react1.screen.getByText(/password is required/i)).toBeInTheDocument();
            });
            // Should not make API call with invalid data
            expect(global.fetch).not.toHaveBeenCalled();
        });
        it('validates email format', async ()=>{
            const user = _userevent.default.setup();
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_SignUpForm.default, {}));
            const emailInput = _react1.screen.getByLabelText(/email address/i);
            await user.type(emailInput, 'invalid-email');
            const submitButton = _react1.screen.getByRole('button', {
                name: /create account/i
            });
            await user.click(submitButton);
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText(/invalid email format/i)).toBeInTheDocument();
            });
        });
        it('validates password strength requirements', async ()=>{
            const user = _userevent.default.setup();
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_SignUpForm.default, {}));
            const passwordInput = _react1.screen.getByLabelText(/^password$/i);
            // Test weak password
            await user.type(passwordInput, 'weak');
            const submitButton = _react1.screen.getByRole('button', {
                name: /create account/i
            });
            await user.click(submitButton);
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText(/password must be at least 8 characters/i)).toBeInTheDocument();
            });
        });
        it('validates password complexity', async ()=>{
            const user = _userevent.default.setup();
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_SignUpForm.default, {}));
            const passwordInput = _react1.screen.getByLabelText(/^password$/i);
            // Test password without uppercase
            await user.type(passwordInput, 'password123');
            const submitButton = _react1.screen.getByRole('button', {
                name: /create account/i
            });
            await user.click(submitButton);
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText(/password must contain.*uppercase/i)).toBeInTheDocument();
            });
        });
        it('validates name length', async ()=>{
            const user = _userevent.default.setup();
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_SignUpForm.default, {}));
            const nameInput = _react1.screen.getByLabelText(/full name/i);
            await user.type(nameInput, 'A'); // Too short
            const submitButton = _react1.screen.getByRole('button', {
                name: /create account/i
            });
            await user.click(submitButton);
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText(/name must be at least 2 characters/i)).toBeInTheDocument();
            });
        });
        it('clears field errors when user starts typing', async ()=>{
            const user = _userevent.default.setup();
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_SignUpForm.default, {}));
            // Trigger validation error
            const submitButton = _react1.screen.getByRole('button', {
                name: /create account/i
            });
            await user.click(submitButton);
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText(/name is required/i)).toBeInTheDocument();
            });
            // Start typing in name field
            const nameInput = _react1.screen.getByLabelText(/full name/i);
            await user.type(nameInput, 'John');
            // Error should be cleared
            expect(_react1.screen.queryByText(/name is required/i)).not.toBeInTheDocument();
        });
    });
    describe('Form Submission', ()=>{
        it('submits valid form data', async ()=>{
            const user = _userevent.default.setup();
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_SignUpForm.default, {}));
            // Fill form with valid data
            await user.type(_react1.screen.getByLabelText(/full name/i), 'John Doe');
            await user.type(_react1.screen.getByLabelText(/email address/i), 'john@example.com');
            await user.type(_react1.screen.getByLabelText(/^password$/i), 'Password123');
            // Submit form
            await user.click(_react1.screen.getByRole('button', {
                name: /create account/i
            }));
            await (0, _react1.waitFor)(()=>{
                expect(global.fetch).toHaveBeenCalledWith('/api/auth/signup', expect.objectContaining({
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        name: 'John Doe',
                        email: 'john@example.com',
                        password: 'Password123'
                    })
                }));
            });
        });
        it('redirects to dashboard on successful sign-up', async ()=>{
            const user = _userevent.default.setup();
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_SignUpForm.default, {}));
            await user.type(_react1.screen.getByLabelText(/full name/i), 'John Doe');
            await user.type(_react1.screen.getByLabelText(/email address/i), 'john@example.com');
            await user.type(_react1.screen.getByLabelText(/^password$/i), 'Password123');
            await user.click(_react1.screen.getByRole('button', {
                name: /create account/i
            }));
            await (0, _react1.waitFor)(()=>{
                expect(mockPush).toHaveBeenCalledWith('/dashboard');
                expect(mockRefresh).toHaveBeenCalled();
            });
        });
        it('shows loading state during submission', async ()=>{
            const user = _userevent.default.setup();
            // Mock delayed response
            global.fetch = jest.fn(()=>new Promise((resolve)=>setTimeout(()=>resolve({
                            ok: true,
                            json: ()=>Promise.resolve({
                                    success: true
                                })
                        }), 100)));
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_SignUpForm.default, {}));
            await user.type(_react1.screen.getByLabelText(/full name/i), 'John Doe');
            await user.type(_react1.screen.getByLabelText(/email address/i), 'john@example.com');
            await user.type(_react1.screen.getByLabelText(/^password$/i), 'Password123');
            const submitButton = _react1.screen.getByRole('button', {
                name: /create account/i
            });
            await user.click(submitButton);
            // Check loading state
            expect(submitButton).toBeDisabled();
            expect(_react1.screen.getByText(/creating account/i)).toBeInTheDocument();
            expect(_react1.screen.getByText(/please wait while we create your account/i)).toBeInTheDocument();
        });
    });
    describe('Error Handling', ()=>{
        it('displays server validation errors', async ()=>{
            const user = _userevent.default.setup();
            (0, _renderhelpers.mockApiError)('/api/auth/signup', 400, {
                errors: {
                    email: 'Email already exists',
                    password: 'Password too weak'
                }
            });
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_SignUpForm.default, {}));
            await user.type(_react1.screen.getByLabelText(/full name/i), 'John Doe');
            await user.type(_react1.screen.getByLabelText(/email address/i), 'existing@example.com');
            await user.type(_react1.screen.getByLabelText(/^password$/i), 'WeakPass');
            await user.click(_react1.screen.getByRole('button', {
                name: /create account/i
            }));
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText('Email already exists')).toBeInTheDocument();
                expect(_react1.screen.getByText('Password too weak')).toBeInTheDocument();
            });
        });
        it('displays general error message', async ()=>{
            const user = _userevent.default.setup();
            (0, _renderhelpers.mockApiError)('/api/auth/signup', 500, {
                error: 'Server error occurred'
            });
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_SignUpForm.default, {}));
            await user.type(_react1.screen.getByLabelText(/full name/i), 'John Doe');
            await user.type(_react1.screen.getByLabelText(/email address/i), 'john@example.com');
            await user.type(_react1.screen.getByLabelText(/^password$/i), 'Password123');
            await user.click(_react1.screen.getByRole('button', {
                name: /create account/i
            }));
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText('Account Creation Failed')).toBeInTheDocument();
                expect(_react1.screen.getByText('Server error occurred')).toBeInTheDocument();
            });
        });
        it('handles network errors gracefully', async ()=>{
            const user = _userevent.default.setup();
            // Mock network error
            global.fetch = jest.fn(()=>Promise.reject(new Error('Network error')));
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_SignUpForm.default, {}));
            await user.type(_react1.screen.getByLabelText(/full name/i), 'John Doe');
            await user.type(_react1.screen.getByLabelText(/email address/i), 'john@example.com');
            await user.type(_react1.screen.getByLabelText(/^password$/i), 'Password123');
            await user.click(_react1.screen.getByRole('button', {
                name: /create account/i
            }));
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText(/an unexpected error occurred/i)).toBeInTheDocument();
            });
        });
        it('clears errors when form is resubmitted', async ()=>{
            const user = _userevent.default.setup();
            (0, _renderhelpers.mockApiError)('/api/auth/signup', 400, {
                error: 'Email already exists'
            });
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_SignUpForm.default, {}));
            // First submission with error
            await user.type(_react1.screen.getByLabelText(/full name/i), 'John Doe');
            await user.type(_react1.screen.getByLabelText(/email address/i), 'existing@example.com');
            await user.type(_react1.screen.getByLabelText(/^password$/i), 'Password123');
            await user.click(_react1.screen.getByRole('button', {
                name: /create account/i
            }));
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText('Email already exists')).toBeInTheDocument();
            });
            // Mock successful response for retry
            (0, _renderhelpers.mockApiResponses)({
                '/api/auth/signup': {
                    success: true
                }
            });
            // Retry submission
            await user.clear(_react1.screen.getByLabelText(/email address/i));
            await user.type(_react1.screen.getByLabelText(/email address/i), 'newemail@example.com');
            await user.click(_react1.screen.getByRole('button', {
                name: /create account/i
            }));
            // Error should be cleared
            expect(_react1.screen.queryByText('Email already exists')).not.toBeInTheDocument();
        });
    });
    describe('Password Field Behavior', ()=>{
        it('shows password help text', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_SignUpForm.default, {}));
            const passwordHelp = _react1.screen.getByText(/password must be at least 8 characters with uppercase, lowercase, and number/i);
            expect(passwordHelp).toBeInTheDocument();
            expect(passwordHelp).toHaveAttribute('id', 'signup-password-help');
        });
        it('associates password field with help text', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_SignUpForm.default, {}));
            const passwordInput = _react1.screen.getByLabelText(/^password$/i);
            expect(passwordInput).toHaveAttribute('aria-describedby', 'signup-password-help');
        });
        it('associates password field with error message when validation fails', async ()=>{
            const user = _userevent.default.setup();
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_SignUpForm.default, {}));
            await user.type(_react1.screen.getByLabelText(/^password$/i), 'weak');
            await user.click(_react1.screen.getByRole('button', {
                name: /create account/i
            }));
            await (0, _react1.waitFor)(()=>{
                const passwordInput = _react1.screen.getByLabelText(/^password$/i);
                expect(passwordInput).toHaveAttribute('aria-describedby', 'signup-password-error signup-password-help');
            });
        });
    });
    describe('Accessibility', ()=>{
        it('has proper ARIA attributes', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_SignUpForm.default, {}));
            const nameInput = _react1.screen.getByLabelText(/full name/i);
            const emailInput = _react1.screen.getByLabelText(/email address/i);
            const passwordInput = _react1.screen.getByLabelText(/^password$/i);
            expect(nameInput).toHaveAttribute('id', 'signup-name');
            expect(emailInput).toHaveAttribute('id', 'signup-email');
            expect(passwordInput).toHaveAttribute('id', 'signup-password');
        });
        it('associates error messages with form fields', async ()=>{
            const user = _userevent.default.setup();
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_SignUpForm.default, {}));
            await user.click(_react1.screen.getByRole('button', {
                name: /create account/i
            }));
            await (0, _react1.waitFor)(()=>{
                const nameInput = _react1.screen.getByLabelText(/full name/i);
                const nameError = _react1.screen.getByText(/name is required/i);
                expect(nameInput).toHaveAttribute('aria-describedby', 'signup-name-error');
                expect(nameError).toHaveAttribute('id', 'signup-name-error');
                expect(nameError).toHaveAttribute('role', 'alert');
            });
        });
        it('provides screen reader feedback for loading state', async ()=>{
            const user = _userevent.default.setup();
            // Mock delayed response
            global.fetch = jest.fn(()=>new Promise((resolve)=>setTimeout(()=>resolve({
                            ok: true,
                            json: ()=>Promise.resolve({
                                    success: true
                                })
                        }), 100)));
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_SignUpForm.default, {}));
            await user.type(_react1.screen.getByLabelText(/full name/i), 'John Doe');
            await user.type(_react1.screen.getByLabelText(/email address/i), 'john@example.com');
            await user.type(_react1.screen.getByLabelText(/^password$/i), 'Password123');
            const submitButton = _react1.screen.getByRole('button', {
                name: /create account/i
            });
            await user.click(submitButton);
            expect(submitButton).toHaveAttribute('aria-describedby', 'signup-loading');
            expect(_react1.screen.getByText(/please wait while we create your account/i)).toHaveClass('sr-only');
        });
        it('has proper form validation summary', async ()=>{
            const user = _userevent.default.setup();
            (0, _renderhelpers.mockApiError)('/api/auth/signup', 400, {
                error: 'Account creation failed'
            });
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_SignUpForm.default, {}));
            await user.type(_react1.screen.getByLabelText(/full name/i), 'John Doe');
            await user.type(_react1.screen.getByLabelText(/email address/i), 'john@example.com');
            await user.type(_react1.screen.getByLabelText(/^password$/i), 'Password123');
            await user.click(_react1.screen.getByRole('button', {
                name: /create account/i
            }));
            await (0, _react1.waitFor)(()=>{
                const summary = _react1.screen.getByText('Account Creation Failed').closest('.form-validation-summary');
                expect(summary).toBeInTheDocument();
                expect(summary).toHaveClass('form-validation-summary');
            });
        });
    });
    describe('Form Interaction', ()=>{
        it('allows keyboard navigation', async ()=>{
            const user = _userevent.default.setup();
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_SignUpForm.default, {}));
            const nameInput = _react1.screen.getByLabelText(/full name/i);
            const emailInput = _react1.screen.getByLabelText(/email address/i);
            const passwordInput = _react1.screen.getByLabelText(/^password$/i);
            const submitButton = _react1.screen.getByRole('button', {
                name: /create account/i
            });
            // Tab through form elements
            await user.tab();
            expect(nameInput).toHaveFocus();
            await user.tab();
            expect(emailInput).toHaveFocus();
            await user.tab();
            expect(passwordInput).toHaveFocus();
            await user.tab();
            expect(submitButton).toHaveFocus();
        });
        it('submits form on Enter key in password field', async ()=>{
            const user = _userevent.default.setup();
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_SignUpForm.default, {}));
            await user.type(_react1.screen.getByLabelText(/full name/i), 'John Doe');
            await user.type(_react1.screen.getByLabelText(/email address/i), 'john@example.com');
            await user.type(_react1.screen.getByLabelText(/^password$/i), 'Password123');
            // Press Enter in password field
            await user.keyboard('{Enter}');
            await (0, _react1.waitFor)(()=>{
                expect(global.fetch).toHaveBeenCalledWith('/api/auth/signup', expect.any(Object));
            });
        });
        it('maintains form state during validation', async ()=>{
            const user = _userevent.default.setup();
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_SignUpForm.default, {}));
            const nameInput = _react1.screen.getByLabelText(/full name/i);
            const emailInput = _react1.screen.getByLabelText(/email address/i);
            const passwordInput = _react1.screen.getByLabelText(/^password$/i);
            await user.type(nameInput, 'John Doe');
            await user.type(emailInput, 'john@example.com');
            await user.type(passwordInput, 'weak'); // Invalid password
            await user.click(_react1.screen.getByRole('button', {
                name: /create account/i
            }));
            // Form values should be preserved even with validation errors
            expect(nameInput).toHaveValue('John Doe');
            expect(emailInput).toHaveValue('john@example.com');
            expect(passwordInput).toHaveValue('weak');
        });
    });
});

//# sourceMappingURL=data:application/json;base64,