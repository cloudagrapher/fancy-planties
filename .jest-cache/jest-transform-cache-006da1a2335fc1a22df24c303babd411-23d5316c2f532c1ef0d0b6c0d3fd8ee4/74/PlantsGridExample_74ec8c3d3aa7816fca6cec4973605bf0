7af15bbb49712759660a9bab4e906c49
'use client';
"use strict";

/* istanbul ignore next */
function cov_1jka2k68wf() {
  var path = "/Users/stefanbekker/projects/fancy-planties/src/components/plants/PlantsGridExample.tsx";
  var hash = "34d165a4193e0270896f905660571da916fcb44a";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/stefanbekker/projects/fancy-planties/src/components/plants/PlantsGridExample.tsx",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 5,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 11,
          column: 3
        }
      },
      "2": {
        start: {
          line: 9,
          column: 8
        },
        end: {
          line: 9,
          column: 33
        }
      },
      "3": {
        start: {
          line: 12,
          column: 20
        },
        end: {
          line: 12,
          column: 48
        }
      },
      "4": {
        start: {
          line: 13,
          column: 15
        },
        end: {
          line: 13,
          column: 31
        }
      },
      "5": {
        start: {
          line: 14,
          column: 22
        },
        end: {
          line: 14,
          column: 53
        }
      },
      "6": {
        start: {
          line: 15,
          column: 16
        },
        end: {
          line: 15,
          column: 28
        }
      },
      "7": {
        start: {
          line: 16,
          column: 27
        },
        end: {
          line: 16,
          column: 67
        }
      },
      "8": {
        start: {
          line: 18,
          column: 21
        },
        end: {
          line: 18,
          column: 49
        }
      },
      "9": {
        start: {
          line: 19,
          column: 44
        },
        end: {
          line: 19,
          column: 70
        }
      },
      "10": {
        start: {
          line: 20,
          column: 28
        },
        end: {
          line: 20,
          column: 64
        }
      },
      "11": {
        start: {
          line: 21,
          column: 34
        },
        end: {
          line: 21,
          column: 89
        }
      },
      "12": {
        start: {
          line: 22,
          column: 4
        },
        end: {
          line: 30,
          column: 5
        }
      },
      "13": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 29,
          column: 11
        }
      },
      "14": {
        start: {
          line: 32,
          column: 29
        },
        end: {
          line: 60,
          column: 5
        }
      },
      "15": {
        start: {
          line: 33,
          column: 8
        },
        end: {
          line: 57,
          column: 9
        }
      },
      "16": {
        start: {
          line: 34,
          column: 12
        },
        end: {
          line: 53,
          column: 13
        }
      },
      "17": {
        start: {
          line: 35,
          column: 16
        },
        end: {
          line: 41,
          column: 19
        }
      },
      "18": {
        start: {
          line: 42,
          column: 16
        },
        end: {
          line: 42,
          column: 69
        }
      },
      "19": {
        start: {
          line: 43,
          column: 19
        },
        end: {
          line: 53,
          column: 13
        }
      },
      "20": {
        start: {
          line: 44,
          column: 16
        },
        end: {
          line: 51,
          column: 19
        }
      },
      "21": {
        start: {
          line: 52,
          column: 16
        },
        end: {
          line: 52,
          column: 68
        }
      },
      "22": {
        start: {
          line: 55,
          column: 12
        },
        end: {
          line: 55,
          column: 63
        }
      },
      "23": {
        start: {
          line: 56,
          column: 12
        },
        end: {
          line: 56,
          column: 82
        }
      },
      "24": {
        start: {
          line: 59,
          column: 8
        },
        end: {
          line: 59,
          column: 52
        }
      },
      "25": {
        start: {
          line: 59,
          column: 23
        },
        end: {
          line: 59,
          column: 44
        }
      },
      "26": {
        start: {
          line: 62,
          column: 29
        },
        end: {
          line: 85,
          column: 5
        }
      },
      "27": {
        start: {
          line: 63,
          column: 8
        },
        end: {
          line: 82,
          column: 9
        }
      },
      "28": {
        start: {
          line: 64,
          column: 37
        },
        end: {
          line: 64,
          column: 66
        }
      },
      "29": {
        start: {
          line: 64,
          column: 57
        },
        end: {
          line: 64,
          column: 65
        }
      },
      "30": {
        start: {
          line: 65,
          column: 12
        },
        end: {
          line: 78,
          column: 13
        }
      },
      "31": {
        start: {
          line: 66,
          column: 16
        },
        end: {
          line: 70,
          column: 19
        }
      },
      "32": {
        start: {
          line: 71,
          column: 16
        },
        end: {
          line: 71,
          column: 72
        }
      },
      "33": {
        start: {
          line: 72,
          column: 19
        },
        end: {
          line: 78,
          column: 13
        }
      },
      "34": {
        start: {
          line: 73,
          column: 16
        },
        end: {
          line: 76,
          column: 19
        }
      },
      "35": {
        start: {
          line: 77,
          column: 16
        },
        end: {
          line: 77,
          column: 71
        }
      },
      "36": {
        start: {
          line: 80,
          column: 12
        },
        end: {
          line: 80,
          column: 67
        }
      },
      "37": {
        start: {
          line: 81,
          column: 12
        },
        end: {
          line: 81,
          column: 69
        }
      },
      "38": {
        start: {
          line: 84,
          column: 8
        },
        end: {
          line: 84,
          column: 52
        }
      },
      "39": {
        start: {
          line: 84,
          column: 23
        },
        end: {
          line: 84,
          column: 44
        }
      },
      "40": {
        start: {
          line: 86,
          column: 4
        },
        end: {
          line: 122,
          column: 7
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 8,
            column: 9
          },
          end: {
            line: 8,
            column: 10
          }
        },
        loc: {
          start: {
            line: 8,
            column: 20
          },
          end: {
            line: 10,
            column: 5
          }
        },
        line: 8
      },
      "1": {
        name: "PlantsGridExample",
        decl: {
          start: {
            line: 17,
            column: 9
          },
          end: {
            line: 17,
            column: 26
          }
        },
        loc: {
          start: {
            line: 17,
            column: 62
          },
          end: {
            line: 123,
            column: 1
          }
        },
        line: 17
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 32,
            column: 29
          },
          end: {
            line: 32,
            column: 30
          }
        },
        loc: {
          start: {
            line: 32,
            column: 52
          },
          end: {
            line: 60,
            column: 5
          }
        },
        line: 32
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 59,
            column: 19
          },
          end: {
            line: 59,
            column: 20
          }
        },
        loc: {
          start: {
            line: 59,
            column: 23
          },
          end: {
            line: 59,
            column: 44
          }
        },
        line: 59
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 62,
            column: 29
          },
          end: {
            line: 62,
            column: 30
          }
        },
        loc: {
          start: {
            line: 62,
            column: 53
          },
          end: {
            line: 85,
            column: 5
          }
        },
        line: 62
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 64,
            column: 48
          },
          end: {
            line: 64,
            column: 49
          }
        },
        loc: {
          start: {
            line: 64,
            column: 57
          },
          end: {
            line: 64,
            column: 65
          }
        },
        line: 64
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 84,
            column: 19
          },
          end: {
            line: 84,
            column: 20
          }
        },
        loc: {
          start: {
            line: 84,
            column: 23
          },
          end: {
            line: 84,
            column: 44
          }
        },
        line: 84
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 17,
            column: 44
          },
          end: {
            line: 17,
            column: 58
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 17,
            column: 56
          },
          end: {
            line: 17,
            column: 58
          }
        }],
        line: 17
      },
      "1": {
        loc: {
          start: {
            line: 22,
            column: 4
          },
          end: {
            line: 30,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 22,
            column: 4
          },
          end: {
            line: 30,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 22
      },
      "2": {
        loc: {
          start: {
            line: 34,
            column: 12
          },
          end: {
            line: 53,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 34,
            column: 12
          },
          end: {
            line: 53,
            column: 13
          }
        }, {
          start: {
            line: 43,
            column: 19
          },
          end: {
            line: 53,
            column: 13
          }
        }],
        line: 34
      },
      "3": {
        loc: {
          start: {
            line: 43,
            column: 19
          },
          end: {
            line: 53,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 43,
            column: 19
          },
          end: {
            line: 53,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 43
      },
      "4": {
        loc: {
          start: {
            line: 65,
            column: 12
          },
          end: {
            line: 78,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 65,
            column: 12
          },
          end: {
            line: 78,
            column: 13
          }
        }, {
          start: {
            line: 72,
            column: 19
          },
          end: {
            line: 78,
            column: 13
          }
        }],
        line: 65
      },
      "5": {
        loc: {
          start: {
            line: 72,
            column: 19
          },
          end: {
            line: 78,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 72,
            column: 19
          },
          end: {
            line: 78,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 72
      },
      "6": {
        loc: {
          start: {
            line: 89,
            column: 12
          },
          end: {
            line: 95,
            column: 14
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 89,
            column: 12
          },
          end: {
            line: 89,
            column: 24
          }
        }, {
          start: {
            line: 89,
            column: 42
          },
          end: {
            line: 95,
            column: 14
          }
        }],
        line: 89
      },
      "7": {
        loc: {
          start: {
            line: 106,
            column: 12
          },
          end: {
            line: 120,
            column: 14
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 106,
            column: 13
          },
          end: {
            line: 106,
            column: 38
          }
        }, {
          start: {
            line: 106,
            column: 42
          },
          end: {
            line: 106,
            column: 73
          }
        }, {
          start: {
            line: 106,
            column: 92
          },
          end: {
            line: 120,
            column: 14
          }
        }],
        line: 106
      },
      "8": {
        loc: {
          start: {
            line: 116,
            column: 38
          },
          end: {
            line: 116,
            column: 101
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 116,
            column: 66
          },
          end: {
            line: 116,
            column: 83
          }
        }, {
          start: {
            line: 116,
            column: 86
          },
          end: {
            line: 116,
            column: 101
          }
        }],
        line: 116
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0, 0],
      "8": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/stefanbekker/projects/fancy-planties/src/components/plants/PlantsGridExample.tsx"],
      sourcesContent: ["'use client';\n\nimport { useState } from 'react';\nimport { useUser } from '@/components/auth/UserProvider';\nimport { PlantsGrid } from '@/components/plants';\nimport { useLogCare, useBulkPlantInstanceOperation } from '@/hooks/usePlantInstances';\nimport type { EnhancedPlantInstance } from '@/lib/types/plant-instance-types';\n\ninterface PlantsGridExampleProps {\n  onPlantSelect?: (plant: EnhancedPlantInstance) => void;\n  className?: string;\n}\n\nexport default function PlantsGridExample({ \n  onPlantSelect,\n  className = '' \n}: PlantsGridExampleProps) {\n  const { user } = useUser();\n  const [notification, setNotification] = useState<string | null>(null);\n  \n  const logCareMutation = useLogCare();\n  const bulkOperationMutation = useBulkPlantInstanceOperation();\n\n  if (!user) {\n    return (\n      <div className=\"flex-center py-12\">\n        <p className=\"text-gray-600\">Please sign in to view your plants.</p>\n      </div>\n    );\n  }\n\n  // Handle care actions\n  const handleCareAction = async (plant: EnhancedPlantInstance, action: 'fertilize' | 'repot') => {\n    try {\n      if (action === 'fertilize') {\n        await logCareMutation.mutateAsync({\n          action: 'fertilize',\n          data: {\n            plantInstanceId: plant.id,\n            fertilizerDate: new Date(),\n          },\n        });\n        setNotification(`\u2705 Fertilized ${plant.displayName}`);\n      } else if (action === 'repot') {\n        await logCareMutation.mutateAsync({\n          action: 'repot',\n          data: {\n            plantInstanceId: plant.id,\n            repotDate: new Date(),\n            notes: 'Repotted via quick action',\n          },\n        });\n        setNotification(`\uD83E\uDEB4 Repotted ${plant.displayName}`);\n      }\n    } catch (error) {\n      console.error('Failed to log care action:', error);\n      setNotification(`\u274C Failed to log ${action} for ${plant.displayName}`);\n    }\n\n    // Clear notification after 3 seconds\n    setTimeout(() => setNotification(null), 3000);\n  };\n\n  // Handle bulk actions\n  const handleBulkAction = async (plants: EnhancedPlantInstance[], action: string) => {\n    try {\n      const plantInstanceIds = plants.map(plant => plant.id);\n      \n      if (action === 'fertilize') {\n        await bulkOperationMutation.mutateAsync({\n          plantInstanceIds,\n          operation: 'fertilize',\n          fertilizerDate: new Date(),\n        });\n        setNotification(`\u2705 Fertilized ${plants.length} plants`);\n      } else if (action === 'deactivate') {\n        await bulkOperationMutation.mutateAsync({\n          plantInstanceIds,\n          operation: 'deactivate',\n        });\n        setNotification(`\uD83D\uDCE6 Archived ${plants.length} plants`);\n      }\n    } catch (error) {\n      console.error('Failed to perform bulk action:', error);\n      setNotification(`\u274C Failed to ${action} selected plants`);\n    }\n\n    // Clear notification after 3 seconds\n    setTimeout(() => setNotification(null), 3000);\n  };\n\n  return (\n    <div className={`relative ${className}`}>\n      {/* Notification Toast */}\n      {notification && (\n        <div className=\"fixed top-4 right-4 z-50 bg-white border border-gray-200 rounded-lg shadow-lg p-3 max-w-sm\">\n          <p className=\"text-sm text-gray-900\">{notification}</p>\n        </div>\n      )}\n\n      {/* Plants Grid */}\n      <PlantsGrid\n        userId={user.id}\n        onPlantSelect={onPlantSelect}\n        onCareAction={handleCareAction}\n        onBulkAction={handleBulkAction}\n        showSearch={true}\n        showFilters={true}\n        cardSize=\"medium\"\n        className=\"h-full\"\n      />\n\n      {/* Loading overlay for mutations */}\n      {(logCareMutation.isPending || bulkOperationMutation.isPending) && (\n        <div className=\"loading-overlay z-40\">\n          <div className=\"bg-white rounded-lg shadow-lg p-4 flex items-center space-x-3\">\n            <div className=\"spinner spinner--primary\" />\n            <span className=\"text-sm text-gray-700\">\n              {logCareMutation.isPending ? 'Logging care...' : 'Processing...'}\n            </span>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}"],
      names: ["PlantsGridExample", "onPlantSelect", "className", "user", "useUser", "notification", "setNotification", "useState", "logCareMutation", "useLogCare", "bulkOperationMutation", "useBulkPlantInstanceOperation", "div", "p", "handleCareAction", "plant", "action", "mutateAsync", "data", "plantInstanceId", "id", "fertilizerDate", "Date", "displayName", "repotDate", "notes", "error", "console", "setTimeout", "handleBulkAction", "plants", "plantInstanceIds", "map", "operation", "length", "PlantsGrid", "userId", "onCareAction", "onBulkAction", "showSearch", "showFilters", "cardSize", "isPending", "span"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "34d165a4193e0270896f905660571da916fcb44a"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1jka2k68wf = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1jka2k68wf();
cov_1jka2k68wf().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1jka2k68wf().s[1]++;
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_1jka2k68wf().f[0]++;
    cov_1jka2k68wf().s[2]++;
    return PlantsGridExample;
  }
});
const _jsxruntime =
/* istanbul ignore next */
(cov_1jka2k68wf().s[3]++, require("react/jsx-runtime"));
const _react =
/* istanbul ignore next */
(cov_1jka2k68wf().s[4]++, require("react"));
const _UserProvider =
/* istanbul ignore next */
(cov_1jka2k68wf().s[5]++, require("../auth/UserProvider"));
const _plants =
/* istanbul ignore next */
(cov_1jka2k68wf().s[6]++, require("."));
const _usePlantInstances =
/* istanbul ignore next */
(cov_1jka2k68wf().s[7]++, require("../../hooks/usePlantInstances"));
function PlantsGridExample({
  onPlantSelect,
  className =
  /* istanbul ignore next */
  (cov_1jka2k68wf().b[0][0]++, '')
}) {
  /* istanbul ignore next */
  cov_1jka2k68wf().f[1]++;
  const {
    user
  } =
  /* istanbul ignore next */
  (cov_1jka2k68wf().s[8]++, (0, _UserProvider.useUser)());
  const [notification, setNotification] =
  /* istanbul ignore next */
  (cov_1jka2k68wf().s[9]++, (0, _react.useState)(null));
  const logCareMutation =
  /* istanbul ignore next */
  (cov_1jka2k68wf().s[10]++, (0, _usePlantInstances.useLogCare)());
  const bulkOperationMutation =
  /* istanbul ignore next */
  (cov_1jka2k68wf().s[11]++, (0, _usePlantInstances.useBulkPlantInstanceOperation)());
  /* istanbul ignore next */
  cov_1jka2k68wf().s[12]++;
  if (!user) {
    /* istanbul ignore next */
    cov_1jka2k68wf().b[1][0]++;
    cov_1jka2k68wf().s[13]++;
    return /*#__PURE__*/(0, _jsxruntime.jsx)("div", {
      className: "flex-center py-12",
      children: /*#__PURE__*/(0, _jsxruntime.jsx)("p", {
        className: "text-gray-600",
        children: "Please sign in to view your plants."
      })
    });
  } else
  /* istanbul ignore next */
  {
    cov_1jka2k68wf().b[1][1]++;
  }
  // Handle care actions
  cov_1jka2k68wf().s[14]++;
  const handleCareAction = async (plant, action) => {
    /* istanbul ignore next */
    cov_1jka2k68wf().f[2]++;
    cov_1jka2k68wf().s[15]++;
    try {
      /* istanbul ignore next */
      cov_1jka2k68wf().s[16]++;
      if (action === 'fertilize') {
        /* istanbul ignore next */
        cov_1jka2k68wf().b[2][0]++;
        cov_1jka2k68wf().s[17]++;
        await logCareMutation.mutateAsync({
          action: 'fertilize',
          data: {
            plantInstanceId: plant.id,
            fertilizerDate: new Date()
          }
        });
        /* istanbul ignore next */
        cov_1jka2k68wf().s[18]++;
        setNotification(`✅ Fertilized ${plant.displayName}`);
      } else {
        /* istanbul ignore next */
        cov_1jka2k68wf().b[2][1]++;
        cov_1jka2k68wf().s[19]++;
        if (action === 'repot') {
          /* istanbul ignore next */
          cov_1jka2k68wf().b[3][0]++;
          cov_1jka2k68wf().s[20]++;
          await logCareMutation.mutateAsync({
            action: 'repot',
            data: {
              plantInstanceId: plant.id,
              repotDate: new Date(),
              notes: 'Repotted via quick action'
            }
          });
          /* istanbul ignore next */
          cov_1jka2k68wf().s[21]++;
          setNotification(`🪴 Repotted ${plant.displayName}`);
        } else
        /* istanbul ignore next */
        {
          cov_1jka2k68wf().b[3][1]++;
        }
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_1jka2k68wf().s[22]++;
      console.error('Failed to log care action:', error);
      /* istanbul ignore next */
      cov_1jka2k68wf().s[23]++;
      setNotification(`❌ Failed to log ${action} for ${plant.displayName}`);
    }
    // Clear notification after 3 seconds
    /* istanbul ignore next */
    cov_1jka2k68wf().s[24]++;
    setTimeout(() => {
      /* istanbul ignore next */
      cov_1jka2k68wf().f[3]++;
      cov_1jka2k68wf().s[25]++;
      return setNotification(null);
    }, 3000);
  };
  // Handle bulk actions
  /* istanbul ignore next */
  cov_1jka2k68wf().s[26]++;
  const handleBulkAction = async (plants, action) => {
    /* istanbul ignore next */
    cov_1jka2k68wf().f[4]++;
    cov_1jka2k68wf().s[27]++;
    try {
      const plantInstanceIds =
      /* istanbul ignore next */
      (cov_1jka2k68wf().s[28]++, plants.map(plant => {
        /* istanbul ignore next */
        cov_1jka2k68wf().f[5]++;
        cov_1jka2k68wf().s[29]++;
        return plant.id;
      }));
      /* istanbul ignore next */
      cov_1jka2k68wf().s[30]++;
      if (action === 'fertilize') {
        /* istanbul ignore next */
        cov_1jka2k68wf().b[4][0]++;
        cov_1jka2k68wf().s[31]++;
        await bulkOperationMutation.mutateAsync({
          plantInstanceIds,
          operation: 'fertilize',
          fertilizerDate: new Date()
        });
        /* istanbul ignore next */
        cov_1jka2k68wf().s[32]++;
        setNotification(`✅ Fertilized ${plants.length} plants`);
      } else {
        /* istanbul ignore next */
        cov_1jka2k68wf().b[4][1]++;
        cov_1jka2k68wf().s[33]++;
        if (action === 'deactivate') {
          /* istanbul ignore next */
          cov_1jka2k68wf().b[5][0]++;
          cov_1jka2k68wf().s[34]++;
          await bulkOperationMutation.mutateAsync({
            plantInstanceIds,
            operation: 'deactivate'
          });
          /* istanbul ignore next */
          cov_1jka2k68wf().s[35]++;
          setNotification(`📦 Archived ${plants.length} plants`);
        } else
        /* istanbul ignore next */
        {
          cov_1jka2k68wf().b[5][1]++;
        }
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_1jka2k68wf().s[36]++;
      console.error('Failed to perform bulk action:', error);
      /* istanbul ignore next */
      cov_1jka2k68wf().s[37]++;
      setNotification(`❌ Failed to ${action} selected plants`);
    }
    // Clear notification after 3 seconds
    /* istanbul ignore next */
    cov_1jka2k68wf().s[38]++;
    setTimeout(() => {
      /* istanbul ignore next */
      cov_1jka2k68wf().f[6]++;
      cov_1jka2k68wf().s[39]++;
      return setNotification(null);
    }, 3000);
  };
  /* istanbul ignore next */
  cov_1jka2k68wf().s[40]++;
  return /*#__PURE__*/(0, _jsxruntime.jsxs)("div", {
    className: `relative ${className}`,
    children: [
    /* istanbul ignore next */
    (cov_1jka2k68wf().b[6][0]++, notification) &&
    /* istanbul ignore next */
    (cov_1jka2k68wf().b[6][1]++, /*#__PURE__*/(0, _jsxruntime.jsx)("div", {
      className: "fixed top-4 right-4 z-50 bg-white border border-gray-200 rounded-lg shadow-lg p-3 max-w-sm",
      children: /*#__PURE__*/(0, _jsxruntime.jsx)("p", {
        className: "text-sm text-gray-900",
        children: notification
      })
    })), /*#__PURE__*/(0, _jsxruntime.jsx)(_plants.PlantsGrid, {
      userId: user.id,
      onPlantSelect: onPlantSelect,
      onCareAction: handleCareAction,
      onBulkAction: handleBulkAction,
      showSearch: true,
      showFilters: true,
      cardSize: "medium",
      className: "h-full"
    }), (
    /* istanbul ignore next */
    (cov_1jka2k68wf().b[7][0]++, logCareMutation.isPending) ||
    /* istanbul ignore next */
    (cov_1jka2k68wf().b[7][1]++, bulkOperationMutation.isPending)) &&
    /* istanbul ignore next */
    (cov_1jka2k68wf().b[7][2]++, /*#__PURE__*/(0, _jsxruntime.jsx)("div", {
      className: "loading-overlay z-40",
      children: /*#__PURE__*/(0, _jsxruntime.jsxs)("div", {
        className: "bg-white rounded-lg shadow-lg p-4 flex items-center space-x-3",
        children: [/*#__PURE__*/(0, _jsxruntime.jsx)("div", {
          className: "spinner spinner--primary"
        }), /*#__PURE__*/(0, _jsxruntime.jsx)("span", {
          className: "text-sm text-gray-700",
          children: logCareMutation.isPending ?
          /* istanbul ignore next */
          (cov_1jka2k68wf().b[8][0]++, 'Logging care...') :
          /* istanbul ignore next */
          (cov_1jka2k68wf().b[8][1]++, 'Processing...')
        })]
      })
    }))]
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,