{"version":3,"sources":["/Users/stefanbekker/projects/fancy-planties/src/lib/types/plant-instance-types.ts"],"sourcesContent":["import type { PlantInstance, Plant } from '@/lib/db/schema';\nimport type { PlantInstanceData, PlantInstanceFilter } from '@/lib/validation/plant-schemas';\nimport type { CareStatus, CareUrgency } from './care-types';\n\n// Advanced search result interface\nexport interface AdvancedSearchResult extends PlantInstanceSearchResult {\n  // Search metadata\n  searchId: string;\n  searchType: 'basic' | 'advanced' | 'fuzzy' | 'preset';\n  suggestions: string[];\n  relatedSearches: string[];\n  \n  // Performance metrics\n  databaseTime: number;\n  processingTime: number;\n  \n  // Result enhancements\n  highlightedResults?: EnhancedPlantInstance[];\n  facets?: SearchFacets;\n}\n\n// Search facets for filtering\nexport interface SearchFacets {\n  locations: Array<{ value: string; count: number }>;\n  plantTypes: Array<{ value: string; count: number; plantId: number }>;\n  careStatus: Array<{ value: string; count: number }>;\n  dateRanges: Array<{ value: string; count: number; range: [Date, Date] }>;\n}\n\n// Enhanced PlantInstance interface with computed properties\nexport interface EnhancedPlantInstance extends PlantInstance {\n  // Joined plant taxonomy data\n  plant: Plant;\n  \n  // Computed care status\n  careStatus: CareStatus;\n  \n  // Days until next fertilizer due (negative if overdue)\n  daysUntilFertilizerDue: number | null;\n  \n  // Days since last fertilized\n  daysSinceLastFertilized: number | null;\n  \n  // Days since last repot\n  daysSinceLastRepot: number | null;\n  \n  // Display name (nickname or plant common name)\n  displayName: string;\n  \n  // Primary image (first image or plant default image)\n  primaryImage: string | null;\n  \n  // Care urgency level for sorting and display\n  careUrgency: CareUrgency;\n}\n\n// Plant instance with care statistics\nexport interface PlantInstanceWithStats extends EnhancedPlantInstance {\n  // Care history statistics\n  totalFertilizerApplications: number;\n  averageFertilizerInterval: number; // in days\n  lastCareDate: Date | null;\n  careConsistencyScore: number; // 0-100 based on schedule adherence\n  \n  // Growth tracking\n  daysSinceAcquired: number;\n  repotHistory: RepotEvent[];\n  \n  // Image history\n  imageCount: number;\n  hasRecentImages: boolean; // Images added in last 30 days\n}\n\n// Repot event interface\nexport interface RepotEvent {\n  date: Date;\n  notes?: string;\n  potSize?: string;\n  soilType?: string;\n}\n\n// Plant instance search result\nexport interface PlantInstanceSearchResult {\n  instances: EnhancedPlantInstance[];\n  totalCount: number;\n  hasMore: boolean;\n  searchTime: number;\n  filters: PlantInstanceFilter;\n}\n\n// Plant instance grid view options\nexport interface PlantInstanceGridOptions {\n  // Display options\n  showCareStatus: boolean;\n  showLocation: boolean;\n  showLastCare: boolean;\n  cardSize: 'small' | 'medium' | 'large';\n  \n  // Sorting options\n  sortBy: PlantInstanceSortField;\n  sortOrder: 'asc' | 'desc';\n  \n  // Filtering options\n  activeFilter: PlantInstanceFilter;\n  \n  // View state\n  selectedInstances: number[];\n  isSelectionMode: boolean;\n}\n\n// Sort field options\nexport type PlantInstanceSortField = \n  | 'nickname'\n  | 'location'\n  | 'created_at'\n  | 'last_fertilized'\n  | 'fertilizer_due'\n  | 'care_urgency'\n  | 'plant_name';\n\n// Care dashboard data\nexport interface CareDashboardData {\n  overdue: EnhancedPlantInstance[];\n  dueToday: EnhancedPlantInstance[];\n  dueSoon: EnhancedPlantInstance[];\n  recentlyCared: EnhancedPlantInstance[];\n  \n  statistics: {\n    totalActivePlants: number;\n    overdueCount: number;\n    dueTodayCount: number;\n    dueSoonCount: number;\n    careStreakDays: number;\n  };\n}\n\n// Quick care action types\nexport type QuickCareAction = \n  | 'fertilize'\n  | 'water'\n  | 'repot'\n  | 'prune'\n  | 'inspect';\n\n// Quick care log entry\nexport interface QuickCareLog {\n  plantInstanceId: number;\n  action: QuickCareAction;\n  date: Date;\n  notes?: string;\n}\n\n// Plant instance operation result\nexport interface PlantInstanceOperationResult {\n  success: boolean;\n  instance?: EnhancedPlantInstance;\n  error?: string;\n  warnings?: string[];\n}\n\n// Bulk operation result\nexport interface BulkOperationResult {\n  success: boolean;\n  successCount: number;\n  failureCount: number;\n  results: Array<{\n    plantInstanceId: number;\n    success: boolean;\n    error?: string;\n  }>;\n}\n\n// Plant instance form data\nexport interface PlantInstanceFormData extends Omit<PlantInstanceData, 'images'> {\n  // Handle images as File objects for upload\n  imageFiles?: File[];\n  // Keep existing images as base64 strings\n  existingImages?: string[];\n  // Primary image index\n  primaryImageIndex?: number;\n}\n\n// Plant instance validation context\nexport interface PlantInstanceValidationContext {\n  userId: number;\n  isUpdate: boolean;\n  existingInstance?: PlantInstance;\n  plantTaxonomy?: Plant;\n}\n\n// Helper functions for plant instance data manipulation\nexport const plantInstanceHelpers = {\n  // Calculate care status based on fertilizer due date\n  calculateCareStatus: (fertilizerDue: Date | null): CareStatus => {\n    if (!fertilizerDue) return 'unknown';\n    \n    const now = new Date();\n    const diffMs = fertilizerDue.getTime() - now.getTime();\n    const diffDays = Math.ceil(diffMs / (1000 * 60 * 60 * 24));\n    \n    if (diffDays < 0) return 'overdue';\n    if (diffDays === 0) return 'due_today';\n    if (diffDays <= 7) return 'due_soon';\n    return 'healthy';\n  },\n\n  // Calculate care urgency for prioritization\n  calculateCareUrgency: (fertilizerDue: Date | null): CareUrgency => {\n    if (!fertilizerDue) return 'none';\n    \n    const now = new Date();\n    const diffMs = fertilizerDue.getTime() - now.getTime();\n    const diffDays = Math.ceil(diffMs / (1000 * 60 * 60 * 24));\n    \n    if (diffDays < -7) return 'critical';\n    if (diffDays < 0) return 'high';\n    if (diffDays <= 1) return 'medium';\n    if (diffDays <= 7) return 'low';\n    return 'none';\n  },\n\n  // Calculate days until fertilizer due (negative if overdue)\n  calculateDaysUntilFertilizerDue: (fertilizerDue: Date | null): number | null => {\n    if (!fertilizerDue) return null;\n    \n    const now = new Date();\n    const diffMs = fertilizerDue.getTime() - now.getTime();\n    return Math.ceil(diffMs / (1000 * 60 * 60 * 24));\n  },\n\n  // Calculate days since last fertilized\n  calculateDaysSinceLastFertilized: (lastFertilized: Date | null): number | null => {\n    if (!lastFertilized) return null;\n    \n    const now = new Date();\n    const diffMs = now.getTime() - lastFertilized.getTime();\n    return Math.floor(diffMs / (1000 * 60 * 60 * 24));\n  },\n\n  // Calculate days since last repot\n  calculateDaysSinceLastRepot: (lastRepot: Date | null): number | null => {\n    if (!lastRepot) return null;\n    \n    const now = new Date();\n    const diffMs = now.getTime() - lastRepot.getTime();\n    return Math.floor(diffMs / (1000 * 60 * 60 * 24));\n  },\n\n  // Get display name (nickname or plant common name)\n  getDisplayName: (instance: PlantInstance, plant?: Plant): string => {\n    return instance.nickname || plant?.commonName || 'Unnamed Plant';\n  },\n\n  // Get primary image (first image or plant default image)\n  getPrimaryImage: (instance: PlantInstance, plant?: Plant): string | null => {\n    if (instance.images && instance.images.length > 0) {\n      return instance.images[0];\n    }\n    return plant?.defaultImage || null;\n  },\n\n  // Enhance plant instance with computed properties\n  enhancePlantInstance: (instance: PlantInstance, plant: Plant): EnhancedPlantInstance => {\n    const careStatus = plantInstanceHelpers.calculateCareStatus(instance.fertilizerDue);\n    const careUrgency = plantInstanceHelpers.calculateCareUrgency(instance.fertilizerDue);\n    const daysUntilFertilizerDue = plantInstanceHelpers.calculateDaysUntilFertilizerDue(instance.fertilizerDue);\n    const daysSinceLastFertilized = plantInstanceHelpers.calculateDaysSinceLastFertilized(instance.lastFertilized);\n    const daysSinceLastRepot = plantInstanceHelpers.calculateDaysSinceLastRepot(instance.lastRepot);\n    const displayName = plantInstanceHelpers.getDisplayName(instance, plant);\n    const primaryImage = plantInstanceHelpers.getPrimaryImage(instance, plant);\n\n    return {\n      ...instance,\n      plant,\n      careStatus,\n      careUrgency,\n      daysUntilFertilizerDue,\n      daysSinceLastFertilized,\n      daysSinceLastRepot,\n      displayName,\n      primaryImage,\n    };\n  },\n\n  // Sort plant instances by care urgency\n  sortByCareUrgency: (instances: EnhancedPlantInstance[]): EnhancedPlantInstance[] => {\n    const urgencyOrder: Record<CareUrgency, number> = {\n      critical: 0,\n      high: 1,\n      medium: 2,\n      low: 3,\n      none: 4,\n    };\n\n    return [...instances].sort((a, b) => {\n      const aOrder = urgencyOrder[a.careUrgency];\n      const bOrder = urgencyOrder[b.careUrgency];\n      \n      if (aOrder !== bOrder) {\n        return aOrder - bOrder;\n      }\n      \n      // If same urgency, sort by fertilizer due date\n      if (a.fertilizerDue && b.fertilizerDue) {\n        return a.fertilizerDue.getTime() - b.fertilizerDue.getTime();\n      }\n      \n      // If one has no due date, prioritize the one with a due date\n      if (a.fertilizerDue && !b.fertilizerDue) return -1;\n      if (!a.fertilizerDue && b.fertilizerDue) return 1;\n      \n      // If neither has a due date, sort by nickname\n      return a.displayName.localeCompare(b.displayName);\n    });\n  },\n\n  // Filter instances by care status\n  filterByCareStatus: (instances: EnhancedPlantInstance[], status: CareStatus): EnhancedPlantInstance[] => {\n    return instances.filter(instance => instance.careStatus === status);\n  },\n\n  // Get care status color for UI\n  getCareStatusColor: (status: CareStatus): string => {\n    switch (status) {\n      case 'overdue': return 'text-red-600 bg-red-50';\n      case 'due_today': return 'text-amber-600 bg-amber-50';\n      case 'due_soon': return 'text-yellow-600 bg-yellow-50';\n      case 'healthy': return 'text-green-600 bg-green-50';\n      case 'unknown': return 'text-gray-600 bg-gray-50';\n      default: return 'text-gray-600 bg-gray-50';\n    }\n  },\n\n  // Get care urgency color for UI\n  getCareUrgencyColor: (urgency: CareUrgency): string => {\n    switch (urgency) {\n      case 'critical': return 'bg-red-500';\n      case 'high': return 'bg-red-400';\n      case 'medium': return 'bg-amber-400';\n      case 'low': return 'bg-yellow-400';\n      case 'none': return 'bg-green-400';\n      default: return 'bg-gray-400';\n    }\n  },\n};"],"names":["plantInstanceHelpers","calculateCareStatus","fertilizerDue","now","Date","diffMs","getTime","diffDays","Math","ceil","calculateCareUrgency","calculateDaysUntilFertilizerDue","calculateDaysSinceLastFertilized","lastFertilized","floor","calculateDaysSinceLastRepot","lastRepot","getDisplayName","instance","plant","nickname","commonName","getPrimaryImage","images","length","defaultImage","enhancePlantInstance","careStatus","careUrgency","daysUntilFertilizerDue","daysSinceLastFertilized","daysSinceLastRepot","displayName","primaryImage","sortByCareUrgency","instances","urgencyOrder","critical","high","medium","low","none","sort","a","b","aOrder","bOrder","localeCompare","filterByCareStatus","status","filter","getCareStatusColor","getCareUrgencyColor","urgency"],"mappings":";;;;+BA+LaA;;;eAAAA;;;AAAN,MAAMA,uBAAuB;IAClC,qDAAqD;IACrDC,qBAAqB,CAACC;QACpB,IAAI,CAACA,eAAe,OAAO;QAE3B,MAAMC,MAAM,IAAIC;QAChB,MAAMC,SAASH,cAAcI,OAAO,KAAKH,IAAIG,OAAO;QACpD,MAAMC,WAAWC,KAAKC,IAAI,CAACJ,SAAU,CAAA,OAAO,KAAK,KAAK,EAAC;QAEvD,IAAIE,WAAW,GAAG,OAAO;QACzB,IAAIA,aAAa,GAAG,OAAO;QAC3B,IAAIA,YAAY,GAAG,OAAO;QAC1B,OAAO;IACT;IAEA,4CAA4C;IAC5CG,sBAAsB,CAACR;QACrB,IAAI,CAACA,eAAe,OAAO;QAE3B,MAAMC,MAAM,IAAIC;QAChB,MAAMC,SAASH,cAAcI,OAAO,KAAKH,IAAIG,OAAO;QACpD,MAAMC,WAAWC,KAAKC,IAAI,CAACJ,SAAU,CAAA,OAAO,KAAK,KAAK,EAAC;QAEvD,IAAIE,WAAW,CAAC,GAAG,OAAO;QAC1B,IAAIA,WAAW,GAAG,OAAO;QACzB,IAAIA,YAAY,GAAG,OAAO;QAC1B,IAAIA,YAAY,GAAG,OAAO;QAC1B,OAAO;IACT;IAEA,4DAA4D;IAC5DI,iCAAiC,CAACT;QAChC,IAAI,CAACA,eAAe,OAAO;QAE3B,MAAMC,MAAM,IAAIC;QAChB,MAAMC,SAASH,cAAcI,OAAO,KAAKH,IAAIG,OAAO;QACpD,OAAOE,KAAKC,IAAI,CAACJ,SAAU,CAAA,OAAO,KAAK,KAAK,EAAC;IAC/C;IAEA,uCAAuC;IACvCO,kCAAkC,CAACC;QACjC,IAAI,CAACA,gBAAgB,OAAO;QAE5B,MAAMV,MAAM,IAAIC;QAChB,MAAMC,SAASF,IAAIG,OAAO,KAAKO,eAAeP,OAAO;QACrD,OAAOE,KAAKM,KAAK,CAACT,SAAU,CAAA,OAAO,KAAK,KAAK,EAAC;IAChD;IAEA,kCAAkC;IAClCU,6BAA6B,CAACC;QAC5B,IAAI,CAACA,WAAW,OAAO;QAEvB,MAAMb,MAAM,IAAIC;QAChB,MAAMC,SAASF,IAAIG,OAAO,KAAKU,UAAUV,OAAO;QAChD,OAAOE,KAAKM,KAAK,CAACT,SAAU,CAAA,OAAO,KAAK,KAAK,EAAC;IAChD;IAEA,mDAAmD;IACnDY,gBAAgB,CAACC,UAAyBC;QACxC,OAAOD,SAASE,QAAQ,IAAID,OAAOE,cAAc;IACnD;IAEA,yDAAyD;IACzDC,iBAAiB,CAACJ,UAAyBC;QACzC,IAAID,SAASK,MAAM,IAAIL,SAASK,MAAM,CAACC,MAAM,GAAG,GAAG;YACjD,OAAON,SAASK,MAAM,CAAC,EAAE;QAC3B;QACA,OAAOJ,OAAOM,gBAAgB;IAChC;IAEA,kDAAkD;IAClDC,sBAAsB,CAACR,UAAyBC;QAC9C,MAAMQ,aAAa3B,qBAAqBC,mBAAmB,CAACiB,SAAShB,aAAa;QAClF,MAAM0B,cAAc5B,qBAAqBU,oBAAoB,CAACQ,SAAShB,aAAa;QACpF,MAAM2B,yBAAyB7B,qBAAqBW,+BAA+B,CAACO,SAAShB,aAAa;QAC1G,MAAM4B,0BAA0B9B,qBAAqBY,gCAAgC,CAACM,SAASL,cAAc;QAC7G,MAAMkB,qBAAqB/B,qBAAqBe,2BAA2B,CAACG,SAASF,SAAS;QAC9F,MAAMgB,cAAchC,qBAAqBiB,cAAc,CAACC,UAAUC;QAClE,MAAMc,eAAejC,qBAAqBsB,eAAe,CAACJ,UAAUC;QAEpE,OAAO;YACL,GAAGD,QAAQ;YACXC;YACAQ;YACAC;YACAC;YACAC;YACAC;YACAC;YACAC;QACF;IACF;IAEA,uCAAuC;IACvCC,mBAAmB,CAACC;QAClB,MAAMC,eAA4C;YAChDC,UAAU;YACVC,MAAM;YACNC,QAAQ;YACRC,KAAK;YACLC,MAAM;QACR;QAEA,OAAO;eAAIN;SAAU,CAACO,IAAI,CAAC,CAACC,GAAGC;YAC7B,MAAMC,SAAST,YAAY,CAACO,EAAEf,WAAW,CAAC;YAC1C,MAAMkB,SAASV,YAAY,CAACQ,EAAEhB,WAAW,CAAC;YAE1C,IAAIiB,WAAWC,QAAQ;gBACrB,OAAOD,SAASC;YAClB;YAEA,+CAA+C;YAC/C,IAAIH,EAAEzC,aAAa,IAAI0C,EAAE1C,aAAa,EAAE;gBACtC,OAAOyC,EAAEzC,aAAa,CAACI,OAAO,KAAKsC,EAAE1C,aAAa,CAACI,OAAO;YAC5D;YAEA,6DAA6D;YAC7D,IAAIqC,EAAEzC,aAAa,IAAI,CAAC0C,EAAE1C,aAAa,EAAE,OAAO,CAAC;YACjD,IAAI,CAACyC,EAAEzC,aAAa,IAAI0C,EAAE1C,aAAa,EAAE,OAAO;YAEhD,8CAA8C;YAC9C,OAAOyC,EAAEX,WAAW,CAACe,aAAa,CAACH,EAAEZ,WAAW;QAClD;IACF;IAEA,kCAAkC;IAClCgB,oBAAoB,CAACb,WAAoCc;QACvD,OAAOd,UAAUe,MAAM,CAAChC,CAAAA,WAAYA,SAASS,UAAU,KAAKsB;IAC9D;IAEA,+BAA+B;IAC/BE,oBAAoB,CAACF;QACnB,OAAQA;YACN,KAAK;gBAAW,OAAO;YACvB,KAAK;gBAAa,OAAO;YACzB,KAAK;gBAAY,OAAO;YACxB,KAAK;gBAAW,OAAO;YACvB,KAAK;gBAAW,OAAO;YACvB;gBAAS,OAAO;QAClB;IACF;IAEA,gCAAgC;IAChCG,qBAAqB,CAACC;QACpB,OAAQA;YACN,KAAK;gBAAY,OAAO;YACxB,KAAK;gBAAQ,OAAO;YACpB,KAAK;gBAAU,OAAO;YACtB,KAAK;gBAAO,OAAO;YACnB,KAAK;gBAAQ,OAAO;YACpB;gBAAS,OAAO;QAClB;IACF;AACF"}