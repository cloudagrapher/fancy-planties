{"version":3,"names":["cov_21mwhzxbko","actualCoverage","s","GET","request","f","startTime","Date","now","dbStart","_db","db","execute","dbDuration","_monitoring","monitoring","recordDatabaseQuery","metrics","getMetricsSummary","healthData","status","timestamp","toISOString","version","b","process","env","npm_package_version","environment","NODE_ENV","uptime","database","responseTime","memoryUsage","application","requestCount","errorCount","averageResponseTime","duration","recordApiRequest","_logger","logger","debug","_server","NextResponse","json","headers","error","Error","String","errorData","message"],"sources":["/Users/stefanbekker/projects/fancy-planties/src/app/api/health/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { db } from '@/lib/db';\nimport { monitoring } from '@/lib/utils/monitoring';\nimport { logger } from '@/lib/utils/logger';\nimport '@/lib/init'; // Initialize server services\n\nexport async function GET(request: NextRequest) {\n  const startTime = Date.now();\n  \n  try {\n    // Check database connectivity\n    const dbStart = Date.now();\n    await db.execute('SELECT 1');\n    const dbDuration = Date.now() - dbStart;\n    \n    // Record database performance\n    monitoring.recordDatabaseQuery('health_check', dbDuration, true);\n    \n    // Get metrics summary\n    const metrics = monitoring.getMetricsSummary();\n    \n    const healthData = {\n      status: 'healthy',\n      timestamp: new Date().toISOString(),\n      version: process.env.npm_package_version || '0.1.0',\n      environment: process.env.NODE_ENV || 'development',\n      uptime: process.uptime(),\n      database: {\n        status: 'connected',\n        responseTime: dbDuration\n      },\n      metrics: {\n        memoryUsage: metrics.application.memoryUsage,\n        requestCount: metrics.application.requestCount,\n        errorCount: metrics.application.errorCount,\n        averageResponseTime: metrics.application.averageResponseTime\n      }\n    };\n\n    const duration = Date.now() - startTime;\n    monitoring.recordApiRequest('GET', '/api/health', 200, duration);\n    \n    logger.debug('Health check completed', { duration, dbDuration });\n\n    return NextResponse.json(healthData, { \n      status: 200,\n      headers: {\n        'Cache-Control': 'no-cache, no-store, must-revalidate',\n        'Pragma': 'no-cache',\n        'Expires': '0'\n      }\n    });\n  } catch (error) {\n    const duration = Date.now() - startTime;\n    \n    // Record database error\n    monitoring.recordDatabaseQuery('health_check', duration, false);\n    monitoring.recordApiRequest('GET', '/api/health', 503, duration);\n    \n    logger.error('Health check failed', error instanceof Error ? error : new Error(String(error)));\n    \n    const errorData = {\n      status: 'unhealthy',\n      timestamp: new Date().toISOString(),\n      version: process.env.npm_package_version || '0.1.0',\n      environment: process.env.NODE_ENV || 'development',\n      uptime: process.uptime(),\n      database: {\n        status: 'disconnected',\n        error: error instanceof Error ? error.message : 'Unknown error'\n      }\n    };\n\n    return NextResponse.json(errorData, { \n      status: 503,\n      headers: {\n        'Cache-Control': 'no-cache, no-store, must-revalidate',\n        'Pragma': 'no-cache',\n        'Expires': '0'\n      }\n    });\n  }\n}"],"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","ignoreList":[]}