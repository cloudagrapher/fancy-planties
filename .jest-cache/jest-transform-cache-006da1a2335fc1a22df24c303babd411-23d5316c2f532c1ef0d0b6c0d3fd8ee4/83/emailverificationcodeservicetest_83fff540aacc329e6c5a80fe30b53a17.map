{"version":3,"sources":["/Users/stefanbekker/projects/fancy-planties/src/lib/services/__tests__/email-verification-code-service.test.ts"],"sourcesContent":["import { describe, it, expect, beforeEach, afterEach, jest } from '@jest/globals';\nimport { EmailVerificationCodeService, VerificationError, VerificationCodeError } from '../email-verification-code-service';\nimport { db } from '@/lib/db';\nimport { emailVerificationCodes, users } from '@/lib/db/schema';\nimport { eq, and } from 'drizzle-orm';\n\n// Mock the database\njest.mock('@/lib/db', () => ({\n  db: {\n    insert: jest.fn(),\n    select: jest.fn(),\n    update: jest.fn(),\n    delete: jest.fn(),\n    transaction: jest.fn(),\n  },\n}));\n\nconst mockDb = db as jest.Mocked<typeof db>;\n\ndescribe('EmailVerificationCodeService', () => {\n  let service: EmailVerificationCodeService;\n  const mockUserId = 1;\n  const mockEmail = 'test@example.com';\n  const mockCode = '123456';\n\n  beforeEach(() => {\n    service = new EmailVerificationCodeService();\n    jest.clearAllMocks();\n    \n    // Setup default mock implementations\n    mockDb.insert.mockReturnValue({\n      values: jest.fn().mockResolvedValue(undefined),\n    } as any);\n    \n    mockDb.select.mockReturnValue({\n      from: jest.fn().mockReturnValue({\n        where: jest.fn().mockReturnValue({\n          limit: jest.fn().mockResolvedValue([]),\n        }),\n      }),\n    } as any);\n    \n    mockDb.update.mockReturnValue({\n      set: jest.fn().mockReturnValue({\n        where: jest.fn().mockResolvedValue(undefined),\n      }),\n    } as any);\n    \n    mockDb.delete.mockReturnValue({\n      where: jest.fn().mockResolvedValue({ rowCount: 0 }),\n    } as any);\n  });\n\n  afterEach(() => {\n    jest.restoreAllMocks();\n  });\n\n  describe('generateCode', () => {\n    it('should generate a 6-digit code', async () => {\n      // Mock deleteUserCodes to resolve\n      const deleteUserCodesSpy = jest.spyOn(service, 'deleteUserCodes').mockResolvedValue();\n      \n      const code = await service.generateCode(mockUserId);\n      \n      expect(code).toMatch(/^\\d{6}$/);\n      expect(deleteUserCodesSpy).toHaveBeenCalledWith(mockUserId);\n      expect(mockDb.insert).toHaveBeenCalledWith(emailVerificationCodes);\n    });\n\n    it('should delete existing codes before generating new one', async () => {\n      const deleteUserCodesSpy = jest.spyOn(service, 'deleteUserCodes').mockResolvedValue();\n      \n      await service.generateCode(mockUserId);\n      \n      expect(deleteUserCodesSpy).toHaveBeenCalledWith(mockUserId);\n    });\n\n    it('should store code with correct expiration time', async () => {\n      jest.spyOn(service, 'deleteUserCodes').mockResolvedValue();\n      const mockInsertValues = jest.fn().mockResolvedValue(undefined);\n      mockDb.insert.mockReturnValue({ values: mockInsertValues } as any);\n      \n      const beforeTime = Date.now();\n      await service.generateCode(mockUserId);\n      const afterTime = Date.now();\n      \n      expect(mockInsertValues).toHaveBeenCalledWith(\n        expect.objectContaining({\n          userId: mockUserId,\n          code: expect.stringMatching(/^\\d{6}$/),\n          expiresAt: expect.any(Date),\n          attemptsUsed: 0,\n        })\n      );\n      \n      // Check that expiration is approximately 10 minutes from now\n      const callArgs = mockInsertValues.mock.calls[0][0];\n      const expirationTime = callArgs.expiresAt.getTime();\n      const expectedMin = beforeTime + 9.5 * 60 * 1000; // 9.5 minutes\n      const expectedMax = afterTime + 10.5 * 60 * 1000; // 10.5 minutes\n      \n      expect(expirationTime).toBeGreaterThan(expectedMin);\n      expect(expirationTime).toBeLessThan(expectedMax);\n    });\n  });\n\n  describe('validateCode', () => {\n    const mockUser = { id: mockUserId, isEmailVerified: false };\n    const mockVerificationCode = {\n      id: 1,\n      userId: mockUserId,\n      code: mockCode,\n      expiresAt: new Date(Date.now() + 5 * 60 * 1000), // 5 minutes from now\n      createdAt: new Date(),\n      attemptsUsed: 0,\n    };\n\n    beforeEach(() => {\n      // Mock user lookup\n      mockDb.select.mockReturnValueOnce({\n        from: jest.fn().mockReturnValue({\n          where: jest.fn().mockReturnValue({\n            limit: jest.fn().mockResolvedValue([mockUser]),\n          }),\n        }),\n      } as any);\n    });\n\n    it('should validate correct code successfully', async () => {\n      // Mock verification code lookup\n      mockDb.select.mockReturnValueOnce({\n        from: jest.fn().mockReturnValue({\n          where: jest.fn().mockReturnValue({\n            limit: jest.fn().mockResolvedValue([mockVerificationCode]),\n          }),\n        }),\n      } as any);\n\n      // Mock transaction\n      const mockTransaction = jest.fn().mockImplementation(async (callback) => {\n        const mockTx = {\n          update: jest.fn().mockReturnValue({\n            set: jest.fn().mockReturnValue({\n              where: jest.fn().mockResolvedValue(undefined),\n            }),\n          }),\n          delete: jest.fn().mockReturnValue({\n            where: jest.fn().mockResolvedValue(undefined),\n          }),\n        };\n        return callback(mockTx);\n      });\n      mockDb.transaction.mockImplementation(mockTransaction);\n\n      const result = await service.validateCode(mockEmail, mockCode);\n\n      expect(result).toBe(true);\n      expect(mockTransaction).toHaveBeenCalled();\n    });\n\n    it('should throw USER_NOT_FOUND when user does not exist', async () => {\n      // Override user lookup to return empty array\n      mockDb.select.mockReturnValueOnce({\n        from: jest.fn().mockReturnValue({\n          where: jest.fn().mockReturnValue({\n            limit: jest.fn().mockResolvedValue([]),\n          }),\n        }),\n      } as any);\n\n      await expect(service.validateCode(mockEmail, mockCode))\n        .rejects\n        .toThrow(new VerificationCodeError('User not found', VerificationError.USER_NOT_FOUND));\n    });\n\n    it('should throw ALREADY_VERIFIED when user is already verified', async () => {\n      // Override user lookup to return verified user\n      mockDb.select.mockReturnValueOnce({\n        from: jest.fn().mockReturnValue({\n          where: jest.fn().mockReturnValue({\n            limit: jest.fn().mockResolvedValue([{ ...mockUser, isEmailVerified: true }]),\n          }),\n        }),\n      } as any);\n\n      await expect(service.validateCode(mockEmail, mockCode))\n        .rejects\n        .toThrow(new VerificationCodeError('Email already verified', VerificationError.ALREADY_VERIFIED));\n    });\n\n    it('should throw CODE_INVALID when code does not exist', async () => {\n      // Mock verification code lookup to return empty array\n      mockDb.select.mockReturnValueOnce({\n        from: jest.fn().mockReturnValue({\n          where: jest.fn().mockReturnValue({\n            limit: jest.fn().mockResolvedValue([]),\n          }),\n        }),\n      } as any);\n\n      await expect(service.validateCode(mockEmail, mockCode))\n        .rejects\n        .toThrow(new VerificationCodeError('Invalid verification code', VerificationError.CODE_INVALID));\n    });\n\n    it('should throw CODE_EXPIRED when code has expired', async () => {\n      const expiredCode = {\n        ...mockVerificationCode,\n        expiresAt: new Date(Date.now() - 5 * 60 * 1000), // 5 minutes ago\n      };\n\n      // Mock verification code lookup\n      mockDb.select.mockReturnValueOnce({\n        from: jest.fn().mockReturnValue({\n          where: jest.fn().mockReturnValue({\n            limit: jest.fn().mockResolvedValue([expiredCode]),\n          }),\n        }),\n      } as any);\n\n      await expect(service.validateCode(mockEmail, mockCode))\n        .rejects\n        .toThrow(new VerificationCodeError('Verification code has expired', VerificationError.CODE_EXPIRED));\n\n      // Should delete expired code\n      expect(mockDb.delete).toHaveBeenCalledWith(emailVerificationCodes);\n    });\n\n    it('should throw TOO_MANY_ATTEMPTS when max attempts exceeded', async () => {\n      const maxAttemptsCode = {\n        ...mockVerificationCode,\n        attemptsUsed: 5, // Max attempts\n      };\n\n      // Mock verification code lookup\n      mockDb.select.mockReturnValueOnce({\n        from: jest.fn().mockReturnValue({\n          where: jest.fn().mockReturnValue({\n            limit: jest.fn().mockResolvedValue([maxAttemptsCode]),\n          }),\n        }),\n      } as any);\n\n      await expect(service.validateCode(mockEmail, mockCode))\n        .rejects\n        .toThrow(new VerificationCodeError('Too many verification attempts', VerificationError.TOO_MANY_ATTEMPTS));\n\n      // Should delete the code\n      expect(mockDb.delete).toHaveBeenCalledWith(emailVerificationCodes);\n    });\n  });\n\n  describe('incrementAttempts', () => {\n    const mockUser = { id: mockUserId };\n    const mockVerificationCode = { id: 1, attemptsUsed: 2 };\n\n    it('should increment attempts for valid code', async () => {\n      // Mock user lookup\n      mockDb.select.mockReturnValueOnce({\n        from: jest.fn().mockReturnValue({\n          where: jest.fn().mockReturnValue({\n            limit: jest.fn().mockResolvedValue([mockUser]),\n          }),\n        }),\n      } as any);\n\n      // Mock verification code lookup\n      mockDb.select.mockReturnValueOnce({\n        from: jest.fn().mockReturnValue({\n          where: jest.fn().mockReturnValue({\n            limit: jest.fn().mockResolvedValue([mockVerificationCode]),\n          }),\n        }),\n      } as any);\n\n      await service.incrementAttempts(mockEmail, mockCode);\n\n      expect(mockDb.update).toHaveBeenCalledWith(emailVerificationCodes);\n    });\n\n    it('should handle user not found gracefully', async () => {\n      // Mock user lookup to return empty array\n      mockDb.select.mockReturnValueOnce({\n        from: jest.fn().mockReturnValue({\n          where: jest.fn().mockReturnValue({\n            limit: jest.fn().mockResolvedValue([]),\n          }),\n        }),\n      } as any);\n\n      await expect(service.incrementAttempts(mockEmail, mockCode)).resolves.toBeUndefined();\n      expect(mockDb.update).not.toHaveBeenCalled();\n    });\n\n    it('should handle code not found gracefully', async () => {\n      // Mock user lookup\n      mockDb.select.mockReturnValueOnce({\n        from: jest.fn().mockReturnValue({\n          where: jest.fn().mockReturnValue({\n            limit: jest.fn().mockResolvedValue([mockUser]),\n          }),\n        }),\n      } as any);\n\n      // Mock verification code lookup to return empty array\n      mockDb.select.mockReturnValueOnce({\n        from: jest.fn().mockReturnValue({\n          where: jest.fn().mockReturnValue({\n            limit: jest.fn().mockResolvedValue([]),\n          }),\n        }),\n      } as any);\n\n      await expect(service.incrementAttempts(mockEmail, mockCode)).resolves.toBeUndefined();\n      expect(mockDb.update).not.toHaveBeenCalled();\n    });\n  });\n\n  describe('cleanupExpiredCodes', () => {\n    it('should delete expired codes and return count', async () => {\n      const mockDeleteResult = { rowCount: 5 };\n      mockDb.delete.mockReturnValue({\n        where: jest.fn().mockResolvedValue(mockDeleteResult),\n      } as any);\n\n      const result = await service.cleanupExpiredCodes();\n\n      expect(result).toBe(5);\n      expect(mockDb.delete).toHaveBeenCalledWith(emailVerificationCodes);\n    });\n\n    it('should handle missing rowCount gracefully', async () => {\n      const mockDeleteResult = {}; // No rowCount property\n      mockDb.delete.mockReturnValue({\n        where: jest.fn().mockResolvedValue(mockDeleteResult),\n      } as any);\n\n      const result = await service.cleanupExpiredCodes();\n\n      expect(result).toBe(0);\n    });\n  });\n\n  describe('deleteUserCodes', () => {\n    it('should delete all codes for a user', async () => {\n      await service.deleteUserCodes(mockUserId);\n\n      expect(mockDb.delete).toHaveBeenCalledWith(emailVerificationCodes);\n    });\n  });\n\n  describe('getUserActiveCode', () => {\n    it('should return active code for user', async () => {\n      const mockActiveCode = {\n        id: 1,\n        userId: mockUserId,\n        code: mockCode,\n        expiresAt: new Date(Date.now() + 5 * 60 * 1000),\n        createdAt: new Date(),\n        attemptsUsed: 0,\n      };\n\n      mockDb.select.mockReturnValue({\n        from: jest.fn().mockReturnValue({\n          where: jest.fn().mockReturnValue({\n            limit: jest.fn().mockResolvedValue([mockActiveCode]),\n          }),\n        }),\n      } as any);\n\n      const result = await service.getUserActiveCode(mockUserId);\n\n      expect(result).toEqual(mockActiveCode);\n    });\n\n    it('should return null when no active code exists', async () => {\n      mockDb.select.mockReturnValue({\n        from: jest.fn().mockReturnValue({\n          where: jest.fn().mockReturnValue({\n            limit: jest.fn().mockResolvedValue([]),\n          }),\n        }),\n      } as any);\n\n      const result = await service.getUserActiveCode(mockUserId);\n\n      expect(result).toBeNull();\n    });\n  });\n\n  describe('hasActiveCode', () => {\n    it('should return true when user has active code', async () => {\n      jest.spyOn(service, 'getUserActiveCode').mockResolvedValue({\n        id: 1,\n        userId: mockUserId,\n        code: mockCode,\n        expiresAt: new Date(),\n        createdAt: new Date(),\n        attemptsUsed: 0,\n      });\n\n      const result = await service.hasActiveCode(mockUserId);\n\n      expect(result).toBe(true);\n    });\n\n    it('should return false when user has no active code', async () => {\n      jest.spyOn(service, 'getUserActiveCode').mockResolvedValue(null);\n\n      const result = await service.hasActiveCode(mockUserId);\n\n      expect(result).toBe(false);\n    });\n  });\n\n  describe('getCodeStats', () => {\n    it('should return code statistics', async () => {\n      // Mock the three select queries for stats\n      mockDb.select\n        .mockReturnValueOnce({\n          from: jest.fn().mockReturnValue({\n            where: jest.fn().mockResolvedValue([1, 2, 3]), // 3 active codes\n          }),\n        } as any)\n        .mockReturnValueOnce({\n          from: jest.fn().mockReturnValue({\n            where: jest.fn().mockResolvedValue([1, 2]), // 2 expired codes\n          }),\n        } as any)\n        .mockReturnValueOnce({\n          from: jest.fn().mockReturnValue({\n            where: jest.fn().mockResolvedValue([1]), // 1 high attempt code\n          }),\n        } as any);\n\n      const result = await service.getCodeStats();\n\n      expect(result).toEqual({\n        totalActive: 3,\n        expiredCount: 2,\n        highAttemptCount: 1,\n      });\n    });\n  });\n\n  describe('code generation security', () => {\n    it('should generate unique codes', async () => {\n      jest.spyOn(service, 'deleteUserCodes').mockResolvedValue();\n      \n      const codes = new Set();\n      for (let i = 0; i < 100; i++) {\n        const code = await service.generateCode(mockUserId);\n        codes.add(code);\n      }\n      \n      // Should have generated 100 unique codes (very high probability)\n      expect(codes.size).toBeGreaterThan(95);\n    });\n\n    it('should always generate 6-digit codes', async () => {\n      jest.spyOn(service, 'deleteUserCodes').mockResolvedValue();\n      \n      for (let i = 0; i < 50; i++) {\n        const code = await service.generateCode(mockUserId);\n        expect(code).toMatch(/^\\d{6}$/);\n        expect(code.length).toBe(6);\n      }\n    });\n\n    it('should pad codes with leading zeros', async () => {\n      jest.spyOn(service, 'deleteUserCodes').mockResolvedValue();\n      \n      // Mock crypto.randomBytes to return a small number\n      const originalRandomBytes = require('crypto').randomBytes;\n      const mockRandomBytes = jest.fn().mockReturnValue(Buffer.from([0, 0, 0, 1])); // Very small number\n      require('crypto').randomBytes = mockRandomBytes;\n      \n      const code = await service.generateCode(mockUserId);\n      \n      expect(code).toMatch(/^\\d{6}$/);\n      expect(code.length).toBe(6);\n      \n      // Restore original function\n      require('crypto').randomBytes = originalRandomBytes;\n    });\n  });\n});"],"names":["jest","mock","db","insert","fn","select","update","delete","transaction","mockDb","describe","service","mockUserId","mockEmail","mockCode","beforeEach","EmailVerificationCodeService","clearAllMocks","mockReturnValue","values","mockResolvedValue","undefined","from","where","limit","set","rowCount","afterEach","restoreAllMocks","it","deleteUserCodesSpy","spyOn","code","generateCode","expect","toMatch","toHaveBeenCalledWith","emailVerificationCodes","mockInsertValues","beforeTime","Date","now","afterTime","objectContaining","userId","stringMatching","expiresAt","any","attemptsUsed","callArgs","calls","expirationTime","getTime","expectedMin","expectedMax","toBeGreaterThan","toBeLessThan","mockUser","id","isEmailVerified","mockVerificationCode","createdAt","mockReturnValueOnce","mockTransaction","mockImplementation","callback","mockTx","result","validateCode","toBe","toHaveBeenCalled","rejects","toThrow","VerificationCodeError","VerificationError","USER_NOT_FOUND","ALREADY_VERIFIED","CODE_INVALID","expiredCode","CODE_EXPIRED","maxAttemptsCode","TOO_MANY_ATTEMPTS","incrementAttempts","resolves","toBeUndefined","not","mockDeleteResult","cleanupExpiredCodes","deleteUserCodes","mockActiveCode","getUserActiveCode","toEqual","toBeNull","hasActiveCode","getCodeStats","totalActive","expiredCount","highAttemptCount","codes","Set","i","add","size","length","originalRandomBytes","require","randomBytes","mockRandomBytes","Buffer"],"mappings":"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"}