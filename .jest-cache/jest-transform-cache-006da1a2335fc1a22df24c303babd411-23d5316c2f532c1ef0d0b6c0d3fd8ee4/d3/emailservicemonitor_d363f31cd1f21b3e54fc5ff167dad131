a3dccfd2f7c4fda6cefeac71137e2cd2
"use strict";

/* istanbul ignore next */
function cov_jtvi6d6qq() {
  var path = "/Users/stefanbekker/projects/fancy-planties/src/lib/services/email-service-monitor.ts";
  var hash = "5bc4fe6119340df03e94ca90dd5a3ed0b7c46e17";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/stefanbekker/projects/fancy-planties/src/lib/services/email-service-monitor.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 18,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 35
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 35
        }
      },
      "6": {
        start: {
          line: 19,
          column: 0
        },
        end: {
          line: 19,
          column: 23
        }
      },
      "7": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 31
        }
      },
      "8": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 23,
          column: 30
        }
      },
      "9": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 24,
          column: 49
        }
      },
      "10": {
        start: {
          line: 25,
          column: 27
        },
        end: {
          line: 25,
          column: 47
        }
      },
      "11": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 35,
          column: 10
        }
      },
      "12": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 40,
          column: 31
        }
      },
      "13": {
        start: {
          line: 41,
          column: 8
        },
        end: {
          line: 43,
          column: 9
        }
      },
      "14": {
        start: {
          line: 42,
          column: 12
        },
        end: {
          line: 42,
          column: 35
        }
      },
      "15": {
        start: {
          line: 44,
          column: 22
        },
        end: {
          line: 48,
          column: 9
        }
      },
      "16": {
        start: {
          line: 49,
          column: 8
        },
        end: {
          line: 49,
          column: 29
        }
      },
      "17": {
        start: {
          line: 50,
          column: 8
        },
        end: {
          line: 50,
          column: 27
        }
      },
      "18": {
        start: {
          line: 52,
          column: 8
        },
        end: {
          line: 54,
          column: 9
        }
      },
      "19": {
        start: {
          line: 53,
          column: 12
        },
        end: {
          line: 53,
          column: 87
        }
      },
      "20": {
        start: {
          line: 59,
          column: 8
        },
        end: {
          line: 59,
          column: 33
        }
      },
      "21": {
        start: {
          line: 61,
          column: 8
        },
        end: {
          line: 61,
          column: 93
        }
      },
      "22": {
        start: {
          line: 63,
          column: 8
        },
        end: {
          line: 67,
          column: 10
        }
      },
      "23": {
        start: {
          line: 68,
          column: 22
        },
        end: {
          line: 73,
          column: 9
        }
      },
      "24": {
        start: {
          line: 74,
          column: 8
        },
        end: {
          line: 74,
          column: 29
        }
      },
      "25": {
        start: {
          line: 75,
          column: 8
        },
        end: {
          line: 75,
          column: 27
        }
      },
      "26": {
        start: {
          line: 77,
          column: 8
        },
        end: {
          line: 77,
          column: 113
        }
      },
      "27": {
        start: {
          line: 79,
          column: 8
        },
        end: {
          line: 81,
          column: 9
        }
      },
      "28": {
        start: {
          line: 80,
          column: 12
        },
        end: {
          line: 80,
          column: 39
        }
      },
      "29": {
        start: {
          line: 86,
          column: 8
        },
        end: {
          line: 86,
          column: 29
        }
      },
      "30": {
        start: {
          line: 87,
          column: 8
        },
        end: {
          line: 89,
          column: 10
        }
      },
      "31": {
        start: {
          line: 94,
          column: 8
        },
        end: {
          line: 94,
          column: 47
        }
      },
      "32": {
        start: {
          line: 99,
          column: 29
        },
        end: {
          line: 99,
          column: 97
        }
      },
      "33": {
        start: {
          line: 99,
          column: 63
        },
        end: {
          line: 99,
          column: 85
        }
      },
      "34": {
        start: {
          line: 100,
          column: 31
        },
        end: {
          line: 100,
          column: 141
        }
      },
      "35": {
        start: {
          line: 100,
          column: 65
        },
        end: {
          line: 100,
          column: 129
        }
      },
      "36": {
        start: {
          line: 101,
          column: 8
        },
        end: {
          line: 108,
          column: 10
        }
      },
      "37": {
        start: {
          line: 113,
          column: 8
        },
        end: {
          line: 113,
          column: 54
        }
      },
      "38": {
        start: {
          line: 113,
          column: 41
        },
        end: {
          line: 113,
          column: 54
        }
      },
      "39": {
        start: {
          line: 114,
          column: 8
        },
        end: {
          line: 114,
          column: 73
        }
      },
      "40": {
        start: {
          line: 119,
          column: 8
        },
        end: {
          line: 119,
          column: 50
        }
      },
      "41": {
        start: {
          line: 119,
          column: 41
        },
        end: {
          line: 119,
          column: 50
        }
      },
      "42": {
        start: {
          line: 120,
          column: 8
        },
        end: {
          line: 120,
          column: 78
        }
      },
      "43": {
        start: {
          line: 125,
          column: 8
        },
        end: {
          line: 125,
          column: 66
        }
      },
      "44": {
        start: {
          line: 126,
          column: 8
        },
        end: {
          line: 126,
          column: 33
        }
      },
      "45": {
        start: {
          line: 127,
          column: 8
        },
        end: {
          line: 127,
          column: 35
        }
      },
      "46": {
        start: {
          line: 128,
          column: 8
        },
        end: {
          line: 128,
          column: 33
        }
      },
      "47": {
        start: {
          line: 129,
          column: 8
        },
        end: {
          line: 129,
          column: 37
        }
      },
      "48": {
        start: {
          line: 130,
          column: 8
        },
        end: {
          line: 130,
          column: 46
        }
      },
      "49": {
        start: {
          line: 132,
          column: 8
        },
        end: {
          line: 132,
          column: 58
        }
      },
      "50": {
        start: {
          line: 133,
          column: 8
        },
        end: {
          line: 133,
          column: 27
        }
      },
      "51": {
        start: {
          line: 138,
          column: 8
        },
        end: {
          line: 138,
          column: 66
        }
      },
      "52": {
        start: {
          line: 139,
          column: 8
        },
        end: {
          line: 139,
          column: 31
        }
      },
      "53": {
        start: {
          line: 144,
          column: 23
        },
        end: {
          line: 144,
          column: 25
        }
      },
      "54": {
        start: {
          line: 145,
          column: 32
        },
        end: {
          line: 145,
          column: 34
        }
      },
      "55": {
        start: {
          line: 146,
          column: 21
        },
        end: {
          line: 146,
          column: 30
        }
      },
      "56": {
        start: {
          line: 148,
          column: 8
        },
        end: {
          line: 152,
          column: 9
        }
      },
      "57": {
        start: {
          line: 149,
          column: 12
        },
        end: {
          line: 149,
          column: 31
        }
      },
      "58": {
        start: {
          line: 150,
          column: 12
        },
        end: {
          line: 150,
          column: 83
        }
      },
      "59": {
        start: {
          line: 151,
          column: 12
        },
        end: {
          line: 151,
          column: 95
        }
      },
      "60": {
        start: {
          line: 153,
          column: 8
        },
        end: {
          line: 155,
          column: 9
        }
      },
      "61": {
        start: {
          line: 154,
          column: 12
        },
        end: {
          line: 154,
          column: 32
        }
      },
      "62": {
        start: {
          line: 157,
          column: 8
        },
        end: {
          line: 161,
          column: 9
        }
      },
      "63": {
        start: {
          line: 158,
          column: 12
        },
        end: {
          line: 158,
          column: 68
        }
      },
      "64": {
        start: {
          line: 159,
          column: 12
        },
        end: {
          line: 159,
          column: 80
        }
      },
      "65": {
        start: {
          line: 160,
          column: 12
        },
        end: {
          line: 160,
          column: 107
        }
      },
      "66": {
        start: {
          line: 162,
          column: 8
        },
        end: {
          line: 164,
          column: 9
        }
      },
      "67": {
        start: {
          line: 163,
          column: 12
        },
        end: {
          line: 163,
          column: 32
        }
      },
      "68": {
        start: {
          line: 166,
          column: 37
        },
        end: {
          line: 167,
          column: 9
        }
      },
      "69": {
        start: {
          line: 166,
          column: 71
        },
        end: {
          line: 166,
          column: 184
        }
      },
      "70": {
        start: {
          line: 168,
          column: 8
        },
        end: {
          line: 172,
          column: 9
        }
      },
      "71": {
        start: {
          line: 169,
          column: 12
        },
        end: {
          line: 169,
          column: 32
        }
      },
      "72": {
        start: {
          line: 170,
          column: 12
        },
        end: {
          line: 170,
          column: 66
        }
      },
      "73": {
        start: {
          line: 171,
          column: 12
        },
        end: {
          line: 171,
          column: 96
        }
      },
      "74": {
        start: {
          line: 174,
          column: 8
        },
        end: {
          line: 178,
          column: 9
        }
      },
      "75": {
        start: {
          line: 175,
          column: 12
        },
        end: {
          line: 175,
          column: 68
        }
      },
      "76": {
        start: {
          line: 176,
          column: 12
        },
        end: {
          line: 176,
          column: 83
        }
      },
      "77": {
        start: {
          line: 177,
          column: 12
        },
        end: {
          line: 177,
          column: 88
        }
      },
      "78": {
        start: {
          line: 179,
          column: 8
        },
        end: {
          line: 183,
          column: 10
        }
      },
      "79": {
        start: {
          line: 186,
          column: 8
        },
        end: {
          line: 186,
          column: 38
        }
      },
      "80": {
        start: {
          line: 188,
          column: 8
        },
        end: {
          line: 190,
          column: 9
        }
      },
      "81": {
        start: {
          line: 189,
          column: 12
        },
        end: {
          line: 189,
          column: 73
        }
      },
      "82": {
        start: {
          line: 193,
          column: 22
        },
        end: {
          line: 193,
          column: 67
        }
      },
      "83": {
        start: {
          line: 194,
          column: 8
        },
        end: {
          line: 194,
          column: 86
        }
      },
      "84": {
        start: {
          line: 196,
          column: 29
        },
        end: {
          line: 196,
          column: 58
        }
      },
      "85": {
        start: {
          line: 197,
          column: 8
        },
        end: {
          line: 200,
          column: 9
        }
      },
      "86": {
        start: {
          line: 198,
          column: 30
        },
        end: {
          line: 198,
          column: 92
        }
      },
      "87": {
        start: {
          line: 198,
          column: 64
        },
        end: {
          line: 198,
          column: 88
        }
      },
      "88": {
        start: {
          line: 199,
          column: 12
        },
        end: {
          line: 199,
          column: 89
        }
      },
      "89": {
        start: {
          line: 203,
          column: 20
        },
        end: {
          line: 203,
          column: 30
        }
      },
      "90": {
        start: {
          line: 204,
          column: 8
        },
        end: {
          line: 206,
          column: 9
        }
      },
      "91": {
        start: {
          line: 205,
          column: 12
        },
        end: {
          line: 205,
          column: 35
        }
      },
      "92": {
        start: {
          line: 211,
          column: 27
        },
        end: {
          line: 211,
          column: 79
        }
      },
      "93": {
        start: {
          line: 212,
          column: 8
        },
        end: {
          line: 212,
          column: 26
        }
      },
      "94": {
        start: {
          line: 215,
          column: 8
        },
        end: {
          line: 215,
          column: 73
        }
      },
      "95": {
        start: {
          line: 221,
          column: 8
        },
        end: {
          line: 224,
          column: 9
        }
      },
      "96": {
        start: {
          line: 223,
          column: 12
        },
        end: {
          line: 223,
          column: 112
        }
      },
      "97": {
        start: {
          line: 227,
          column: 28
        },
        end: {
          line: 227,
          column: 53
        }
      },
      "98": {
        start: {
          line: 229,
          column: 0
        },
        end: {
          line: 243,
          column: 1
        }
      },
      "99": {
        start: {
          line: 231,
          column: 16
        },
        end: {
          line: 231,
          column: 26
        }
      },
      "100": {
        start: {
          line: 232,
          column: 21
        },
        end: {
          line: 232,
          column: 34
        }
      },
      "101": {
        start: {
          line: 233,
          column: 4
        },
        end: {
          line: 233,
          column: 51
        }
      },
      "102": {
        start: {
          line: 234,
          column: 4
        },
        end: {
          line: 234,
          column: 37
        }
      },
      "103": {
        start: {
          line: 235,
          column: 28
        },
        end: {
          line: 235,
          column: 62
        }
      },
      "104": {
        start: {
          line: 236,
          column: 4
        },
        end: {
          line: 242,
          column: 24
        }
      },
      "105": {
        start: {
          line: 237,
          column: 8
        },
        end: {
          line: 237,
          column: 46
        }
      },
      "106": {
        start: {
          line: 239,
          column: 8
        },
        end: {
          line: 241,
          column: 32
        }
      },
      "107": {
        start: {
          line: 240,
          column: 12
        },
        end: {
          line: 240,
          column: 50
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        },
        loc: {
          start: {
            line: 12,
            column: 31
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 31
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 21,
            column: 4
          },
          end: {
            line: 21,
            column: 5
          }
        },
        loc: {
          start: {
            line: 21,
            column: 17
          },
          end: {
            line: 36,
            column: 5
          }
        },
        line: 21
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 39,
            column: 6
          },
          end: {
            line: 39,
            column: 7
          }
        },
        loc: {
          start: {
            line: 39,
            column: 34
          },
          end: {
            line: 55,
            column: 5
          }
        },
        line: 39
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 58,
            column: 6
          },
          end: {
            line: 58,
            column: 7
          }
        },
        loc: {
          start: {
            line: 58,
            column: 41
          },
          end: {
            line: 82,
            column: 5
          }
        },
        line: 58
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 85,
            column: 6
          },
          end: {
            line: 85,
            column: 7
          }
        },
        loc: {
          start: {
            line: 85,
            column: 17
          },
          end: {
            line: 90,
            column: 5
          }
        },
        line: 85
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 93,
            column: 6
          },
          end: {
            line: 93,
            column: 7
          }
        },
        loc: {
          start: {
            line: 93,
            column: 35
          },
          end: {
            line: 95,
            column: 5
          }
        },
        line: 93
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 98,
            column: 6
          },
          end: {
            line: 98,
            column: 7
          }
        },
        loc: {
          start: {
            line: 98,
            column: 24
          },
          end: {
            line: 109,
            column: 5
          }
        },
        line: 98
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 99,
            column: 54
          },
          end: {
            line: 99,
            column: 55
          }
        },
        loc: {
          start: {
            line: 99,
            column: 63
          },
          end: {
            line: 99,
            column: 85
          }
        },
        line: 99
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 100,
            column: 56
          },
          end: {
            line: 100,
            column: 57
          }
        },
        loc: {
          start: {
            line: 100,
            column: 65
          },
          end: {
            line: 100,
            column: 129
          }
        },
        line: 100
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 112,
            column: 6
          },
          end: {
            line: 112,
            column: 7
          }
        },
        loc: {
          start: {
            line: 112,
            column: 40
          },
          end: {
            line: 115,
            column: 5
          }
        },
        line: 112
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 118,
            column: 6
          },
          end: {
            line: 118,
            column: 7
          }
        },
        loc: {
          start: {
            line: 118,
            column: 32
          },
          end: {
            line: 121,
            column: 5
          }
        },
        line: 118
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 124,
            column: 6
          },
          end: {
            line: 124,
            column: 7
          }
        },
        loc: {
          start: {
            line: 124,
            column: 24
          },
          end: {
            line: 134,
            column: 5
          }
        },
        line: 124
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 137,
            column: 6
          },
          end: {
            line: 137,
            column: 7
          }
        },
        loc: {
          start: {
            line: 137,
            column: 19
          },
          end: {
            line: 140,
            column: 5
          }
        },
        line: 137
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 143,
            column: 6
          },
          end: {
            line: 143,
            column: 7
          }
        },
        loc: {
          start: {
            line: 143,
            column: 24
          },
          end: {
            line: 184,
            column: 5
          }
        },
        line: 143
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 166,
            column: 62
          },
          end: {
            line: 166,
            column: 63
          }
        },
        loc: {
          start: {
            line: 166,
            column: 71
          },
          end: {
            line: 166,
            column: 184
          }
        },
        line: 166
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 185,
            column: 4
          },
          end: {
            line: 185,
            column: 5
          }
        },
        loc: {
          start: {
            line: 185,
            column: 20
          },
          end: {
            line: 191,
            column: 5
          }
        },
        line: 185
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 192,
            column: 4
          },
          end: {
            line: 192,
            column: 5
          }
        },
        loc: {
          start: {
            line: 192,
            column: 18
          },
          end: {
            line: 201,
            column: 5
          }
        },
        line: 192
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 198,
            column: 50
          },
          end: {
            line: 198,
            column: 51
          }
        },
        loc: {
          start: {
            line: 198,
            column: 64
          },
          end: {
            line: 198,
            column: 88
          }
        },
        line: 198
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 202,
            column: 4
          },
          end: {
            line: 202,
            column: 5
          }
        },
        loc: {
          start: {
            line: 202,
            column: 20
          },
          end: {
            line: 207,
            column: 5
          }
        },
        line: 202
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 208,
            column: 4
          },
          end: {
            line: 208,
            column: 5
          }
        },
        loc: {
          start: {
            line: 208,
            column: 20
          },
          end: {
            line: 213,
            column: 5
          }
        },
        line: 208
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 214,
            column: 4
          },
          end: {
            line: 214,
            column: 5
          }
        },
        loc: {
          start: {
            line: 214,
            column: 26
          },
          end: {
            line: 225,
            column: 5
          }
        },
        line: 214
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 236,
            column: 15
          },
          end: {
            line: 236,
            column: 16
          }
        },
        loc: {
          start: {
            line: 236,
            column: 19
          },
          end: {
            line: 242,
            column: 5
          }
        },
        line: 236
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 239,
            column: 20
          },
          end: {
            line: 239,
            column: 21
          }
        },
        loc: {
          start: {
            line: 239,
            column: 24
          },
          end: {
            line: 241,
            column: 9
          }
        },
        line: 239
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 41,
            column: 8
          },
          end: {
            line: 43,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 41,
            column: 8
          },
          end: {
            line: 43,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 41
      },
      "1": {
        loc: {
          start: {
            line: 52,
            column: 8
          },
          end: {
            line: 54,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 52,
            column: 8
          },
          end: {
            line: 54,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 52
      },
      "2": {
        loc: {
          start: {
            line: 61,
            column: 47
          },
          end: {
            line: 61,
            column: 87
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 61,
            column: 47
          },
          end: {
            line: 61,
            column: 82
          }
        }, {
          start: {
            line: 61,
            column: 86
          },
          end: {
            line: 61,
            column: 87
          }
        }],
        line: 61
      },
      "3": {
        loc: {
          start: {
            line: 79,
            column: 8
          },
          end: {
            line: 81,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 79,
            column: 8
          },
          end: {
            line: 81,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 79
      },
      "4": {
        loc: {
          start: {
            line: 93,
            column: 22
          },
          end: {
            line: 93,
            column: 33
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 93,
            column: 30
          },
          end: {
            line: 93,
            column: 33
          }
        }],
        line: 93
      },
      "5": {
        loc: {
          start: {
            line: 100,
            column: 65
          },
          end: {
            line: 100,
            column: 129
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 100,
            column: 65
          },
          end: {
            line: 100,
            column: 87
          }
        }, {
          start: {
            line: 100,
            column: 91
          },
          end: {
            line: 100,
            column: 129
          }
        }],
        line: 100
      },
      "6": {
        loc: {
          start: {
            line: 112,
            column: 23
          },
          end: {
            line: 112,
            column: 38
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 112,
            column: 35
          },
          end: {
            line: 112,
            column: 38
          }
        }],
        line: 112
      },
      "7": {
        loc: {
          start: {
            line: 113,
            column: 8
          },
          end: {
            line: 113,
            column: 54
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 113,
            column: 8
          },
          end: {
            line: 113,
            column: 54
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 113
      },
      "8": {
        loc: {
          start: {
            line: 119,
            column: 8
          },
          end: {
            line: 119,
            column: 50
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 119,
            column: 8
          },
          end: {
            line: 119,
            column: 50
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 119
      },
      "9": {
        loc: {
          start: {
            line: 148,
            column: 8
          },
          end: {
            line: 152,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 148,
            column: 8
          },
          end: {
            line: 152,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 148
      },
      "10": {
        loc: {
          start: {
            line: 153,
            column: 8
          },
          end: {
            line: 155,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 153,
            column: 8
          },
          end: {
            line: 155,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 153
      },
      "11": {
        loc: {
          start: {
            line: 157,
            column: 8
          },
          end: {
            line: 161,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 157,
            column: 8
          },
          end: {
            line: 161,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 157
      },
      "12": {
        loc: {
          start: {
            line: 158,
            column: 21
          },
          end: {
            line: 158,
            column: 67
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 158,
            column: 45
          },
          end: {
            line: 158,
            column: 55
          }
        }, {
          start: {
            line: 158,
            column: 58
          },
          end: {
            line: 158,
            column: 67
          }
        }],
        line: 158
      },
      "13": {
        loc: {
          start: {
            line: 162,
            column: 8
          },
          end: {
            line: 164,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 162,
            column: 8
          },
          end: {
            line: 164,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 162
      },
      "14": {
        loc: {
          start: {
            line: 166,
            column: 71
          },
          end: {
            line: 166,
            column: 184
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 166,
            column: 71
          },
          end: {
            line: 166,
            column: 93
          }
        }, {
          start: {
            line: 166,
            column: 97
          },
          end: {
            line: 166,
            column: 135
          }
        }, {
          start: {
            line: 166,
            column: 139
          },
          end: {
            line: 166,
            column: 184
          }
        }],
        line: 166
      },
      "15": {
        loc: {
          start: {
            line: 168,
            column: 8
          },
          end: {
            line: 172,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 168,
            column: 8
          },
          end: {
            line: 172,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 168
      },
      "16": {
        loc: {
          start: {
            line: 174,
            column: 8
          },
          end: {
            line: 178,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 174,
            column: 8
          },
          end: {
            line: 178,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 174
      },
      "17": {
        loc: {
          start: {
            line: 175,
            column: 21
          },
          end: {
            line: 175,
            column: 67
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 175,
            column: 45
          },
          end: {
            line: 175,
            column: 55
          }
        }, {
          start: {
            line: 175,
            column: 58
          },
          end: {
            line: 175,
            column: 67
          }
        }],
        line: 175
      },
      "18": {
        loc: {
          start: {
            line: 188,
            column: 8
          },
          end: {
            line: 190,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 188,
            column: 8
          },
          end: {
            line: 190,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 188
      },
      "19": {
        loc: {
          start: {
            line: 194,
            column: 33
          },
          end: {
            line: 194,
            column: 85
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 194,
            column: 45
          },
          end: {
            line: 194,
            column: 79
          }
        }, {
          start: {
            line: 194,
            column: 82
          },
          end: {
            line: 194,
            column: 85
          }
        }],
        line: 194
      },
      "20": {
        loc: {
          start: {
            line: 197,
            column: 8
          },
          end: {
            line: 200,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 197,
            column: 8
          },
          end: {
            line: 200,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 197
      },
      "21": {
        loc: {
          start: {
            line: 204,
            column: 8
          },
          end: {
            line: 206,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 204,
            column: 8
          },
          end: {
            line: 206,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 204
      },
      "22": {
        loc: {
          start: {
            line: 211,
            column: 36
          },
          end: {
            line: 211,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 211,
            column: 36
          },
          end: {
            line: 211,
            column: 65
          }
        }, {
          start: {
            line: 211,
            column: 69
          },
          end: {
            line: 211,
            column: 74
          }
        }],
        line: 211
      },
      "23": {
        loc: {
          start: {
            line: 221,
            column: 8
          },
          end: {
            line: 224,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 221,
            column: 8
          },
          end: {
            line: 224,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 221
      },
      "24": {
        loc: {
          start: {
            line: 229,
            column: 0
          },
          end: {
            line: 243,
            column: 1
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 229,
            column: 0
          },
          end: {
            line: 243,
            column: 1
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 229
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0],
      "5": [0, 0],
      "6": [0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/stefanbekker/projects/fancy-planties/src/lib/services/email-service-monitor.ts"],
      sourcesContent: ["import 'server-only';\n\nexport interface EmailServiceStats {\n  totalSent: number;\n  totalFailed: number;\n  quotaUsed: number;\n  quotaLimit: number;\n  lastError?: {\n    message: string;\n    code: string;\n    timestamp: number;\n  };\n  errorsByType: Record<string, number>;\n  successRate: number;\n  averageResponseTime: number;\n  lastResetTime: number;\n}\n\nexport interface EmailServiceEvent {\n  type: 'success' | 'error';\n  timestamp: number;\n  responseTime: number;\n  error?: {\n    message: string;\n    code: string;\n  };\n}\n\nexport class EmailServiceMonitor {\n  private stats: EmailServiceStats;\n  private recentEvents: EmailServiceEvent[] = [];\n  private readonly maxEvents = 1000; // Keep last 1000 events\n  private readonly resetInterval = 24 * 60 * 60 * 1000; // 24 hours\n\n  constructor() {\n    const quotaLimit = this.getQuotaLimit();\n    this.stats = {\n      totalSent: 0,\n      totalFailed: 0,\n      quotaUsed: 0,\n      quotaLimit,\n      errorsByType: {},\n      successRate: 100,\n      averageResponseTime: 0,\n      lastResetTime: Date.now(),\n    };\n  }\n\n  /**\n   * Record a successful email send\n   */\n  recordSuccess(responseTime: number): void {\n    this.stats.totalSent++;\n    if (this.stats.quotaLimit > 0) {\n      this.stats.quotaUsed++;\n    }\n    \n    const event: EmailServiceEvent = {\n      type: 'success',\n      timestamp: Date.now(),\n      responseTime,\n    };\n    \n    this.addEvent(event);\n    this.updateStats();\n    \n    // Log success in development\n    if (process.env.NODE_ENV === 'development') {\n      console.log(`[EMAIL_MONITOR] Email sent successfully (${responseTime}ms)`);\n    }\n  }\n\n  /**\n   * Record a failed email send\n   */\n  recordFailure(error: { message: string; code: string }, responseTime: number): void {\n    this.stats.totalFailed++;\n    \n    // Update error counts by type\n    this.stats.errorsByType[error.code] = (this.stats.errorsByType[error.code] || 0) + 1;\n    \n    // Update last error\n    this.stats.lastError = {\n      message: error.message,\n      code: error.code,\n      timestamp: Date.now(),\n    };\n    \n    const event: EmailServiceEvent = {\n      type: 'error',\n      timestamp: Date.now(),\n      responseTime,\n      error,\n    };\n    \n    this.addEvent(event);\n    this.updateStats();\n    \n    // Log error\n    console.error(`[EMAIL_MONITOR] Email send failed: ${error.code} - ${error.message} (${responseTime}ms)`);\n    \n    // Check for quota issues\n    if (error.code === 'QUOTA_EXCEEDED') {\n      this.handleQuotaExceeded();\n    }\n  }\n\n  /**\n   * Get current statistics\n   */\n  getStats(): EmailServiceStats {\n    this.checkForReset();\n    return { ...this.stats };\n  }\n\n  /**\n   * Get recent events (last N events)\n   */\n  getRecentEvents(limit: number = 100): EmailServiceEvent[] {\n    return this.recentEvents.slice(-limit);\n  }\n\n  /**\n   * Get error summary\n   */\n  getErrorSummary(): {\n    totalErrors: number;\n    errorsByType: Record<string, number>;\n    recentErrors: EmailServiceEvent[];\n    criticalErrors: EmailServiceEvent[];\n  } {\n    const recentErrors = this.recentEvents\n      .filter(event => event.type === 'error')\n      .slice(-50);\n    \n    const criticalErrors = this.recentEvents\n      .filter(event => \n        event.type === 'error' && \n        event.error?.code === 'QUOTA_EXCEEDED'\n      )\n      .slice(-10);\n\n    return {\n      totalErrors: this.stats.totalFailed,\n      errorsByType: { ...this.stats.errorsByType },\n      recentErrors,\n      criticalErrors,\n    };\n  }\n\n  /**\n   * Check if quota is approaching limit\n   */\n  isQuotaNearLimit(threshold: number = 0.8): boolean {\n    if (this.stats.quotaLimit === 0) return false;\n    return (this.stats.quotaUsed / this.stats.quotaLimit) >= threshold;\n  }\n\n  /**\n   * Get quota usage percentage\n   */\n  getQuotaUsagePercentage(): number {\n    if (this.stats.quotaLimit === 0) return 0;\n    return Math.round((this.stats.quotaUsed / this.stats.quotaLimit) * 100);\n  }\n\n  /**\n   * Reset daily statistics (called automatically)\n   */\n  resetDailyStats(): void {\n    console.log('[EMAIL_MONITOR] Resetting daily statistics');\n    \n    this.stats.totalSent = 0;\n    this.stats.totalFailed = 0;\n    this.stats.quotaUsed = 0;\n    this.stats.errorsByType = {};\n    this.stats.lastResetTime = Date.now();\n    \n    // Keep only recent events (last 100)\n    this.recentEvents = this.recentEvents.slice(-100);\n    \n    this.updateStats();\n  }\n\n  /**\n   * Force reset statistics (for testing or manual reset)\n   */\n  forceReset(): void {\n    console.log('[EMAIL_MONITOR] Force resetting statistics');\n    this.resetDailyStats();\n  }\n\n  /**\n   * Get health status\n   */\n  getHealthStatus(): {\n    status: 'healthy' | 'warning' | 'critical';\n    issues: string[];\n    recommendations: string[];\n  } {\n    const issues: string[] = [];\n    const recommendations: string[] = [];\n    let status: 'healthy' | 'warning' | 'critical' = 'healthy';\n\n    // Check success rate\n    if (this.stats.successRate < 95) {\n      status = 'warning';\n      issues.push(`Low success rate: ${this.stats.successRate.toFixed(1)}%`);\n      recommendations.push('Check email service configuration and network connectivity');\n    }\n\n    if (this.stats.successRate < 80) {\n      status = 'critical';\n    }\n\n    // Check quota usage\n    if (this.isQuotaNearLimit(0.9)) {\n      status = status === 'critical' ? 'critical' : 'warning';\n      issues.push(`High quota usage: ${this.getQuotaUsagePercentage()}%`);\n      recommendations.push('Consider upgrading email service plan or implementing email throttling');\n    }\n\n    if (this.isQuotaNearLimit(0.95)) {\n      status = 'critical';\n    }\n\n    // Check for recent critical errors\n    const recentCriticalErrors = this.recentEvents\n      .filter(event => \n        event.type === 'error' && \n        event.error?.code === 'QUOTA_EXCEEDED' &&\n        Date.now() - event.timestamp < 60 * 60 * 1000 // Last hour\n      );\n\n    if (recentCriticalErrors.length > 0) {\n      status = 'critical';\n      issues.push('Quota exceeded errors in the last hour');\n      recommendations.push('Immediate attention required - email service quota exceeded');\n    }\n\n    // Check average response time\n    if (this.stats.averageResponseTime > 5000) {\n      status = status === 'critical' ? 'critical' : 'warning';\n      issues.push(`High response time: ${this.stats.averageResponseTime}ms`);\n      recommendations.push('Check email service performance and network latency');\n    }\n\n    return { status, issues, recommendations };\n  }\n\n  private addEvent(event: EmailServiceEvent): void {\n    this.recentEvents.push(event);\n    \n    // Keep only the most recent events\n    if (this.recentEvents.length > this.maxEvents) {\n      this.recentEvents = this.recentEvents.slice(-this.maxEvents);\n    }\n  }\n\n  private updateStats(): void {\n    const total = this.stats.totalSent + this.stats.totalFailed;\n    this.stats.successRate = total > 0 ? (this.stats.totalSent / total) * 100 : 100;\n    \n    // Calculate average response time from recent events\n    const recentEvents = this.recentEvents.slice(-100);\n    if (recentEvents.length > 0) {\n      const totalTime = recentEvents.reduce((sum, event) => sum + event.responseTime, 0);\n      this.stats.averageResponseTime = Math.round(totalTime / recentEvents.length);\n    }\n  }\n\n  private checkForReset(): void {\n    const now = Date.now();\n    if (now - this.stats.lastResetTime >= this.resetInterval) {\n      this.resetDailyStats();\n    }\n  }\n\n  private getQuotaLimit(): number {\n    // Default Resend free tier limits\n    // This could be made configurable via environment variables\n    const dailyLimit = parseInt(process.env.EMAIL_DAILY_QUOTA || '100', 10);\n    return dailyLimit;\n  }\n\n  private handleQuotaExceeded(): void {\n    console.error('[EMAIL_MONITOR] CRITICAL: Email quota exceeded!');\n    \n    // In a production system, you might want to:\n    // - Send alerts to administrators\n    // - Temporarily disable email sending\n    // - Switch to a backup email service\n    // - Log to external monitoring system\n    \n    if (process.env.NODE_ENV === 'production') {\n      // Log critical error for external monitoring\n      console.error('[EMAIL_MONITOR] ALERT: Email service quota exceeded - immediate attention required');\n    }\n  }\n}\n\n// Export singleton instance\nexport const emailServiceMonitor = new EmailServiceMonitor();\n\n// Schedule daily reset (but not during tests)\nif (process.env.NODE_ENV === 'production') {\n  // Reset at midnight UTC\n  const now = new Date();\n  const tomorrow = new Date(now);\n  tomorrow.setUTCDate(tomorrow.getUTCDate() + 1);\n  tomorrow.setUTCHours(0, 0, 0, 0);\n  \n  const msUntilMidnight = tomorrow.getTime() - now.getTime();\n  \n  setTimeout(() => {\n    emailServiceMonitor.resetDailyStats();\n    \n    // Then reset every 24 hours\n    setInterval(() => {\n      emailServiceMonitor.resetDailyStats();\n    }, 24 * 60 * 60 * 1000);\n  }, msUntilMidnight);\n}"],
      names: ["EmailServiceMonitor", "emailServiceMonitor", "recentEvents", "maxEvents", "resetInterval", "quotaLimit", "getQuotaLimit", "stats", "totalSent", "totalFailed", "quotaUsed", "errorsByType", "successRate", "averageResponseTime", "lastResetTime", "Date", "now", "recordSuccess", "responseTime", "event", "type", "timestamp", "addEvent", "updateStats", "process", "env", "NODE_ENV", "console", "log", "recordFailure", "error", "code", "lastError", "message", "handleQuotaExceeded", "getStats", "checkForReset", "getRecentEvents", "limit", "slice", "getErrorSummary", "recentErrors", "filter", "criticalErrors", "totalErrors", "isQuotaNearLimit", "threshold", "getQuotaUsagePercentage", "Math", "round", "resetDailyStats", "forceReset", "getHealthStatus", "issues", "recommendations", "status", "push", "toFixed", "recentCriticalErrors", "length", "total", "totalTime", "reduce", "sum", "dailyLimit", "parseInt", "EMAIL_DAILY_QUOTA", "tomorrow", "setUTCDate", "getUTCDate", "setUTCHours", "msUntilMidnight", "getTime", "setTimeout", "setInterval"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "5bc4fe6119340df03e94ca90dd5a3ed0b7c46e17"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_jtvi6d6qq = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_jtvi6d6qq();
cov_jtvi6d6qq().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_jtvi6d6qq().f[0]++;
  cov_jtvi6d6qq().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_jtvi6d6qq().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_jtvi6d6qq().s[3]++;
_export(exports, {
  get EmailServiceMonitor() {
    /* istanbul ignore next */
    cov_jtvi6d6qq().f[1]++;
    cov_jtvi6d6qq().s[4]++;
    return EmailServiceMonitor;
  },
  get emailServiceMonitor() {
    /* istanbul ignore next */
    cov_jtvi6d6qq().f[2]++;
    cov_jtvi6d6qq().s[5]++;
    return emailServiceMonitor;
  }
});
/* istanbul ignore next */
cov_jtvi6d6qq().s[6]++;
require("server-only");
class EmailServiceMonitor {
  constructor() {
    /* istanbul ignore next */
    cov_jtvi6d6qq().f[3]++;
    cov_jtvi6d6qq().s[7]++;
    this.recentEvents = [];
    /* istanbul ignore next */
    cov_jtvi6d6qq().s[8]++;
    this.maxEvents = 1000; // Keep last 1000 events
    /* istanbul ignore next */
    cov_jtvi6d6qq().s[9]++;
    this.resetInterval = 24 * 60 * 60 * 1000; // 24 hours
    const quotaLimit =
    /* istanbul ignore next */
    (cov_jtvi6d6qq().s[10]++, this.getQuotaLimit());
    /* istanbul ignore next */
    cov_jtvi6d6qq().s[11]++;
    this.stats = {
      totalSent: 0,
      totalFailed: 0,
      quotaUsed: 0,
      quotaLimit,
      errorsByType: {},
      successRate: 100,
      averageResponseTime: 0,
      lastResetTime: Date.now()
    };
  }
  /**
  * Record a successful email send
  */
  recordSuccess(responseTime) {
    /* istanbul ignore next */
    cov_jtvi6d6qq().f[4]++;
    cov_jtvi6d6qq().s[12]++;
    this.stats.totalSent++;
    /* istanbul ignore next */
    cov_jtvi6d6qq().s[13]++;
    if (this.stats.quotaLimit > 0) {
      /* istanbul ignore next */
      cov_jtvi6d6qq().b[0][0]++;
      cov_jtvi6d6qq().s[14]++;
      this.stats.quotaUsed++;
    } else
    /* istanbul ignore next */
    {
      cov_jtvi6d6qq().b[0][1]++;
    }
    const event =
    /* istanbul ignore next */
    (cov_jtvi6d6qq().s[15]++, {
      type: 'success',
      timestamp: Date.now(),
      responseTime
    });
    /* istanbul ignore next */
    cov_jtvi6d6qq().s[16]++;
    this.addEvent(event);
    /* istanbul ignore next */
    cov_jtvi6d6qq().s[17]++;
    this.updateStats();
    // Log success in development
    /* istanbul ignore next */
    cov_jtvi6d6qq().s[18]++;
    if (process.env.NODE_ENV === 'development') {
      /* istanbul ignore next */
      cov_jtvi6d6qq().b[1][0]++;
      cov_jtvi6d6qq().s[19]++;
      console.log(`[EMAIL_MONITOR] Email sent successfully (${responseTime}ms)`);
    } else
    /* istanbul ignore next */
    {
      cov_jtvi6d6qq().b[1][1]++;
    }
  }
  /**
  * Record a failed email send
  */
  recordFailure(error, responseTime) {
    /* istanbul ignore next */
    cov_jtvi6d6qq().f[5]++;
    cov_jtvi6d6qq().s[20]++;
    this.stats.totalFailed++;
    // Update error counts by type
    /* istanbul ignore next */
    cov_jtvi6d6qq().s[21]++;
    this.stats.errorsByType[error.code] = (
    /* istanbul ignore next */
    (cov_jtvi6d6qq().b[2][0]++, this.stats.errorsByType[error.code]) ||
    /* istanbul ignore next */
    (cov_jtvi6d6qq().b[2][1]++, 0)) + 1;
    // Update last error
    /* istanbul ignore next */
    cov_jtvi6d6qq().s[22]++;
    this.stats.lastError = {
      message: error.message,
      code: error.code,
      timestamp: Date.now()
    };
    const event =
    /* istanbul ignore next */
    (cov_jtvi6d6qq().s[23]++, {
      type: 'error',
      timestamp: Date.now(),
      responseTime,
      error
    });
    /* istanbul ignore next */
    cov_jtvi6d6qq().s[24]++;
    this.addEvent(event);
    /* istanbul ignore next */
    cov_jtvi6d6qq().s[25]++;
    this.updateStats();
    // Log error
    /* istanbul ignore next */
    cov_jtvi6d6qq().s[26]++;
    console.error(`[EMAIL_MONITOR] Email send failed: ${error.code} - ${error.message} (${responseTime}ms)`);
    // Check for quota issues
    /* istanbul ignore next */
    cov_jtvi6d6qq().s[27]++;
    if (error.code === 'QUOTA_EXCEEDED') {
      /* istanbul ignore next */
      cov_jtvi6d6qq().b[3][0]++;
      cov_jtvi6d6qq().s[28]++;
      this.handleQuotaExceeded();
    } else
    /* istanbul ignore next */
    {
      cov_jtvi6d6qq().b[3][1]++;
    }
  }
  /**
  * Get current statistics
  */
  getStats() {
    /* istanbul ignore next */
    cov_jtvi6d6qq().f[6]++;
    cov_jtvi6d6qq().s[29]++;
    this.checkForReset();
    /* istanbul ignore next */
    cov_jtvi6d6qq().s[30]++;
    return {
      ...this.stats
    };
  }
  /**
  * Get recent events (last N events)
  */
  getRecentEvents(limit =
  /* istanbul ignore next */
  (cov_jtvi6d6qq().b[4][0]++, 100)) {
    /* istanbul ignore next */
    cov_jtvi6d6qq().f[7]++;
    cov_jtvi6d6qq().s[31]++;
    return this.recentEvents.slice(-limit);
  }
  /**
  * Get error summary
  */
  getErrorSummary() {
    /* istanbul ignore next */
    cov_jtvi6d6qq().f[8]++;
    const recentErrors =
    /* istanbul ignore next */
    (cov_jtvi6d6qq().s[32]++, this.recentEvents.filter(event => {
      /* istanbul ignore next */
      cov_jtvi6d6qq().f[9]++;
      cov_jtvi6d6qq().s[33]++;
      return event.type === 'error';
    }).slice(-50));
    const criticalErrors =
    /* istanbul ignore next */
    (cov_jtvi6d6qq().s[34]++, this.recentEvents.filter(event => {
      /* istanbul ignore next */
      cov_jtvi6d6qq().f[10]++;
      cov_jtvi6d6qq().s[35]++;
      return /* istanbul ignore next */(cov_jtvi6d6qq().b[5][0]++, event.type === 'error') &&
      /* istanbul ignore next */
      (cov_jtvi6d6qq().b[5][1]++, event.error?.code === 'QUOTA_EXCEEDED');
    }).slice(-10));
    /* istanbul ignore next */
    cov_jtvi6d6qq().s[36]++;
    return {
      totalErrors: this.stats.totalFailed,
      errorsByType: {
        ...this.stats.errorsByType
      },
      recentErrors,
      criticalErrors
    };
  }
  /**
  * Check if quota is approaching limit
  */
  isQuotaNearLimit(threshold =
  /* istanbul ignore next */
  (cov_jtvi6d6qq().b[6][0]++, 0.8)) {
    /* istanbul ignore next */
    cov_jtvi6d6qq().f[11]++;
    cov_jtvi6d6qq().s[37]++;
    if (this.stats.quotaLimit === 0) {
      /* istanbul ignore next */
      cov_jtvi6d6qq().b[7][0]++;
      cov_jtvi6d6qq().s[38]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_jtvi6d6qq().b[7][1]++;
    }
    cov_jtvi6d6qq().s[39]++;
    return this.stats.quotaUsed / this.stats.quotaLimit >= threshold;
  }
  /**
  * Get quota usage percentage
  */
  getQuotaUsagePercentage() {
    /* istanbul ignore next */
    cov_jtvi6d6qq().f[12]++;
    cov_jtvi6d6qq().s[40]++;
    if (this.stats.quotaLimit === 0) {
      /* istanbul ignore next */
      cov_jtvi6d6qq().b[8][0]++;
      cov_jtvi6d6qq().s[41]++;
      return 0;
    } else
    /* istanbul ignore next */
    {
      cov_jtvi6d6qq().b[8][1]++;
    }
    cov_jtvi6d6qq().s[42]++;
    return Math.round(this.stats.quotaUsed / this.stats.quotaLimit * 100);
  }
  /**
  * Reset daily statistics (called automatically)
  */
  resetDailyStats() {
    /* istanbul ignore next */
    cov_jtvi6d6qq().f[13]++;
    cov_jtvi6d6qq().s[43]++;
    console.log('[EMAIL_MONITOR] Resetting daily statistics');
    /* istanbul ignore next */
    cov_jtvi6d6qq().s[44]++;
    this.stats.totalSent = 0;
    /* istanbul ignore next */
    cov_jtvi6d6qq().s[45]++;
    this.stats.totalFailed = 0;
    /* istanbul ignore next */
    cov_jtvi6d6qq().s[46]++;
    this.stats.quotaUsed = 0;
    /* istanbul ignore next */
    cov_jtvi6d6qq().s[47]++;
    this.stats.errorsByType = {};
    /* istanbul ignore next */
    cov_jtvi6d6qq().s[48]++;
    this.stats.lastResetTime = Date.now();
    // Keep only recent events (last 100)
    /* istanbul ignore next */
    cov_jtvi6d6qq().s[49]++;
    this.recentEvents = this.recentEvents.slice(-100);
    /* istanbul ignore next */
    cov_jtvi6d6qq().s[50]++;
    this.updateStats();
  }
  /**
  * Force reset statistics (for testing or manual reset)
  */
  forceReset() {
    /* istanbul ignore next */
    cov_jtvi6d6qq().f[14]++;
    cov_jtvi6d6qq().s[51]++;
    console.log('[EMAIL_MONITOR] Force resetting statistics');
    /* istanbul ignore next */
    cov_jtvi6d6qq().s[52]++;
    this.resetDailyStats();
  }
  /**
  * Get health status
  */
  getHealthStatus() {
    /* istanbul ignore next */
    cov_jtvi6d6qq().f[15]++;
    const issues =
    /* istanbul ignore next */
    (cov_jtvi6d6qq().s[53]++, []);
    const recommendations =
    /* istanbul ignore next */
    (cov_jtvi6d6qq().s[54]++, []);
    let status =
    /* istanbul ignore next */
    (cov_jtvi6d6qq().s[55]++, 'healthy');
    // Check success rate
    /* istanbul ignore next */
    cov_jtvi6d6qq().s[56]++;
    if (this.stats.successRate < 95) {
      /* istanbul ignore next */
      cov_jtvi6d6qq().b[9][0]++;
      cov_jtvi6d6qq().s[57]++;
      status = 'warning';
      /* istanbul ignore next */
      cov_jtvi6d6qq().s[58]++;
      issues.push(`Low success rate: ${this.stats.successRate.toFixed(1)}%`);
      /* istanbul ignore next */
      cov_jtvi6d6qq().s[59]++;
      recommendations.push('Check email service configuration and network connectivity');
    } else
    /* istanbul ignore next */
    {
      cov_jtvi6d6qq().b[9][1]++;
    }
    cov_jtvi6d6qq().s[60]++;
    if (this.stats.successRate < 80) {
      /* istanbul ignore next */
      cov_jtvi6d6qq().b[10][0]++;
      cov_jtvi6d6qq().s[61]++;
      status = 'critical';
    } else
    /* istanbul ignore next */
    {
      cov_jtvi6d6qq().b[10][1]++;
    }
    // Check quota usage
    cov_jtvi6d6qq().s[62]++;
    if (this.isQuotaNearLimit(0.9)) {
      /* istanbul ignore next */
      cov_jtvi6d6qq().b[11][0]++;
      cov_jtvi6d6qq().s[63]++;
      status = status === 'critical' ?
      /* istanbul ignore next */
      (cov_jtvi6d6qq().b[12][0]++, 'critical') :
      /* istanbul ignore next */
      (cov_jtvi6d6qq().b[12][1]++, 'warning');
      /* istanbul ignore next */
      cov_jtvi6d6qq().s[64]++;
      issues.push(`High quota usage: ${this.getQuotaUsagePercentage()}%`);
      /* istanbul ignore next */
      cov_jtvi6d6qq().s[65]++;
      recommendations.push('Consider upgrading email service plan or implementing email throttling');
    } else
    /* istanbul ignore next */
    {
      cov_jtvi6d6qq().b[11][1]++;
    }
    cov_jtvi6d6qq().s[66]++;
    if (this.isQuotaNearLimit(0.95)) {
      /* istanbul ignore next */
      cov_jtvi6d6qq().b[13][0]++;
      cov_jtvi6d6qq().s[67]++;
      status = 'critical';
    } else
    /* istanbul ignore next */
    {
      cov_jtvi6d6qq().b[13][1]++;
    }
    // Check for recent critical errors
    const recentCriticalErrors =
    /* istanbul ignore next */
    (cov_jtvi6d6qq().s[68]++, this.recentEvents.filter(event => {
      /* istanbul ignore next */
      cov_jtvi6d6qq().f[16]++;
      cov_jtvi6d6qq().s[69]++;
      return /* istanbul ignore next */(cov_jtvi6d6qq().b[14][0]++, event.type === 'error') &&
      /* istanbul ignore next */
      (cov_jtvi6d6qq().b[14][1]++, event.error?.code === 'QUOTA_EXCEEDED') &&
      /* istanbul ignore next */
      (cov_jtvi6d6qq().b[14][2]++, Date.now() - event.timestamp < 60 * 60 * 1000);
    } // Last hour
    ));
    /* istanbul ignore next */
    cov_jtvi6d6qq().s[70]++;
    if (recentCriticalErrors.length > 0) {
      /* istanbul ignore next */
      cov_jtvi6d6qq().b[15][0]++;
      cov_jtvi6d6qq().s[71]++;
      status = 'critical';
      /* istanbul ignore next */
      cov_jtvi6d6qq().s[72]++;
      issues.push('Quota exceeded errors in the last hour');
      /* istanbul ignore next */
      cov_jtvi6d6qq().s[73]++;
      recommendations.push('Immediate attention required - email service quota exceeded');
    } else
    /* istanbul ignore next */
    {
      cov_jtvi6d6qq().b[15][1]++;
    }
    // Check average response time
    cov_jtvi6d6qq().s[74]++;
    if (this.stats.averageResponseTime > 5000) {
      /* istanbul ignore next */
      cov_jtvi6d6qq().b[16][0]++;
      cov_jtvi6d6qq().s[75]++;
      status = status === 'critical' ?
      /* istanbul ignore next */
      (cov_jtvi6d6qq().b[17][0]++, 'critical') :
      /* istanbul ignore next */
      (cov_jtvi6d6qq().b[17][1]++, 'warning');
      /* istanbul ignore next */
      cov_jtvi6d6qq().s[76]++;
      issues.push(`High response time: ${this.stats.averageResponseTime}ms`);
      /* istanbul ignore next */
      cov_jtvi6d6qq().s[77]++;
      recommendations.push('Check email service performance and network latency');
    } else
    /* istanbul ignore next */
    {
      cov_jtvi6d6qq().b[16][1]++;
    }
    cov_jtvi6d6qq().s[78]++;
    return {
      status,
      issues,
      recommendations
    };
  }
  addEvent(event) {
    /* istanbul ignore next */
    cov_jtvi6d6qq().f[17]++;
    cov_jtvi6d6qq().s[79]++;
    this.recentEvents.push(event);
    // Keep only the most recent events
    /* istanbul ignore next */
    cov_jtvi6d6qq().s[80]++;
    if (this.recentEvents.length > this.maxEvents) {
      /* istanbul ignore next */
      cov_jtvi6d6qq().b[18][0]++;
      cov_jtvi6d6qq().s[81]++;
      this.recentEvents = this.recentEvents.slice(-this.maxEvents);
    } else
    /* istanbul ignore next */
    {
      cov_jtvi6d6qq().b[18][1]++;
    }
  }
  updateStats() {
    /* istanbul ignore next */
    cov_jtvi6d6qq().f[18]++;
    const total =
    /* istanbul ignore next */
    (cov_jtvi6d6qq().s[82]++, this.stats.totalSent + this.stats.totalFailed);
    /* istanbul ignore next */
    cov_jtvi6d6qq().s[83]++;
    this.stats.successRate = total > 0 ?
    /* istanbul ignore next */
    (cov_jtvi6d6qq().b[19][0]++, this.stats.totalSent / total * 100) :
    /* istanbul ignore next */
    (cov_jtvi6d6qq().b[19][1]++, 100);
    // Calculate average response time from recent events
    const recentEvents =
    /* istanbul ignore next */
    (cov_jtvi6d6qq().s[84]++, this.recentEvents.slice(-100));
    /* istanbul ignore next */
    cov_jtvi6d6qq().s[85]++;
    if (recentEvents.length > 0) {
      /* istanbul ignore next */
      cov_jtvi6d6qq().b[20][0]++;
      const totalTime =
      /* istanbul ignore next */
      (cov_jtvi6d6qq().s[86]++, recentEvents.reduce((sum, event) => {
        /* istanbul ignore next */
        cov_jtvi6d6qq().f[19]++;
        cov_jtvi6d6qq().s[87]++;
        return sum + event.responseTime;
      }, 0));
      /* istanbul ignore next */
      cov_jtvi6d6qq().s[88]++;
      this.stats.averageResponseTime = Math.round(totalTime / recentEvents.length);
    } else
    /* istanbul ignore next */
    {
      cov_jtvi6d6qq().b[20][1]++;
    }
  }
  checkForReset() {
    /* istanbul ignore next */
    cov_jtvi6d6qq().f[20]++;
    const now =
    /* istanbul ignore next */
    (cov_jtvi6d6qq().s[89]++, Date.now());
    /* istanbul ignore next */
    cov_jtvi6d6qq().s[90]++;
    if (now - this.stats.lastResetTime >= this.resetInterval) {
      /* istanbul ignore next */
      cov_jtvi6d6qq().b[21][0]++;
      cov_jtvi6d6qq().s[91]++;
      this.resetDailyStats();
    } else
    /* istanbul ignore next */
    {
      cov_jtvi6d6qq().b[21][1]++;
    }
  }
  getQuotaLimit() {
    /* istanbul ignore next */
    cov_jtvi6d6qq().f[21]++;
    // Default Resend free tier limits
    // This could be made configurable via environment variables
    const dailyLimit =
    /* istanbul ignore next */
    (cov_jtvi6d6qq().s[92]++, parseInt(
    /* istanbul ignore next */
    (cov_jtvi6d6qq().b[22][0]++, process.env.EMAIL_DAILY_QUOTA) ||
    /* istanbul ignore next */
    (cov_jtvi6d6qq().b[22][1]++, '100'), 10));
    /* istanbul ignore next */
    cov_jtvi6d6qq().s[93]++;
    return dailyLimit;
  }
  handleQuotaExceeded() {
    /* istanbul ignore next */
    cov_jtvi6d6qq().f[22]++;
    cov_jtvi6d6qq().s[94]++;
    console.error('[EMAIL_MONITOR] CRITICAL: Email quota exceeded!');
    // In a production system, you might want to:
    // - Send alerts to administrators
    // - Temporarily disable email sending
    // - Switch to a backup email service
    // - Log to external monitoring system
    /* istanbul ignore next */
    cov_jtvi6d6qq().s[95]++;
    if (process.env.NODE_ENV === 'production') {
      /* istanbul ignore next */
      cov_jtvi6d6qq().b[23][0]++;
      cov_jtvi6d6qq().s[96]++;
      // Log critical error for external monitoring
      console.error('[EMAIL_MONITOR] ALERT: Email service quota exceeded - immediate attention required');
    } else
    /* istanbul ignore next */
    {
      cov_jtvi6d6qq().b[23][1]++;
    }
  }
}
const emailServiceMonitor =
/* istanbul ignore next */
(cov_jtvi6d6qq().s[97]++, new EmailServiceMonitor());
// Schedule daily reset (but not during tests)
/* istanbul ignore next */
cov_jtvi6d6qq().s[98]++;
if (process.env.NODE_ENV === 'production') {
  /* istanbul ignore next */
  cov_jtvi6d6qq().b[24][0]++;
  // Reset at midnight UTC
  const now =
  /* istanbul ignore next */
  (cov_jtvi6d6qq().s[99]++, new Date());
  const tomorrow =
  /* istanbul ignore next */
  (cov_jtvi6d6qq().s[100]++, new Date(now));
  /* istanbul ignore next */
  cov_jtvi6d6qq().s[101]++;
  tomorrow.setUTCDate(tomorrow.getUTCDate() + 1);
  /* istanbul ignore next */
  cov_jtvi6d6qq().s[102]++;
  tomorrow.setUTCHours(0, 0, 0, 0);
  const msUntilMidnight =
  /* istanbul ignore next */
  (cov_jtvi6d6qq().s[103]++, tomorrow.getTime() - now.getTime());
  /* istanbul ignore next */
  cov_jtvi6d6qq().s[104]++;
  setTimeout(() => {
    /* istanbul ignore next */
    cov_jtvi6d6qq().f[23]++;
    cov_jtvi6d6qq().s[105]++;
    emailServiceMonitor.resetDailyStats();
    // Then reset every 24 hours
    /* istanbul ignore next */
    cov_jtvi6d6qq().s[106]++;
    setInterval(() => {
      /* istanbul ignore next */
      cov_jtvi6d6qq().f[24]++;
      cov_jtvi6d6qq().s[107]++;
      emailServiceMonitor.resetDailyStats();
    }, 24 * 60 * 60 * 1000);
  }, msUntilMidnight);
} else
/* istanbul ignore next */
{
  cov_jtvi6d6qq().b[24][1]++;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,