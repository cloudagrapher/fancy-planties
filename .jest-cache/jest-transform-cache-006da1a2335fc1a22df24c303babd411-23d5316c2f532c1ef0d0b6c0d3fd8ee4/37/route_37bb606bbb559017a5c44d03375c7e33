4e020de28ec93e95001d4accd7e2afbd
"use strict";

/* istanbul ignore next */
function cov_upksbujep() {
  var path = "/Users/stefanbekker/projects/fancy-planties/src/app/api/propagations/stats/route.ts";
  var hash = "2de08c95356f78eeca7561aeab3159004a8e2a65";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/stefanbekker/projects/fancy-planties/src/app/api/propagations/stats/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 19
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 11,
          column: 23
        }
      },
      "4": {
        start: {
          line: 12,
          column: 16
        },
        end: {
          line: 12,
          column: 38
        }
      },
      "5": {
        start: {
          line: 13,
          column: 17
        },
        end: {
          line: 13,
          column: 55
        }
      },
      "6": {
        start: {
          line: 14,
          column: 22
        },
        end: {
          line: 14,
          column: 72
        }
      },
      "7": {
        start: {
          line: 16,
          column: 4
        },
        end: {
          line: 34,
          column: 5
        }
      },
      "8": {
        start: {
          line: 17,
          column: 25
        },
        end: {
          line: 17,
          column: 62
        }
      },
      "9": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 24,
          column: 9
        }
      },
      "10": {
        start: {
          line: 19,
          column: 12
        },
        end: {
          line: 23,
          column: 15
        }
      },
      "11": {
        start: {
          line: 25,
          column: 22
        },
        end: {
          line: 25,
          column: 78
        }
      },
      "12": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 26,
          column: 48
        }
      },
      "13": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 66
        }
      },
      "14": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 33,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "GET",
        decl: {
          start: {
            line: 15,
            column: 15
          },
          end: {
            line: 15,
            column: 18
          }
        },
        loc: {
          start: {
            line: 15,
            column: 28
          },
          end: {
            line: 35,
            column: 1
          }
        },
        line: 15
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 18,
            column: 8
          },
          end: {
            line: 24,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 18,
            column: 8
          },
          end: {
            line: 24,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 18
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0
    },
    f: {
      "0": 0,
      "1": 0
    },
    b: {
      "0": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/stefanbekker/projects/fancy-planties/src/app/api/propagations/stats/route.ts"],
      sourcesContent: ["import 'server-only';\n\nimport { NextRequest, NextResponse } from 'next/server';\nimport { validateRequest } from '@/lib/auth/server';\nimport { PropagationQueries } from '@/lib/db/queries/propagations';\n\n// GET /api/propagations/stats - Get propagation statistics for the authenticated user\nexport async function GET(request: NextRequest) {\n  try {\n    const { user } = await validateRequest();\n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const stats = await PropagationQueries.getStats(user.id);\n\n    return NextResponse.json(stats);\n  } catch (error) {\n    console.error('Error fetching propagation stats:', error);\n    return NextResponse.json(\n      { error: 'Failed to fetch propagation statistics' },\n      { status: 500 }\n    );\n  }\n}"],
      names: ["GET", "request", "user", "validateRequest", "NextResponse", "json", "error", "status", "stats", "PropagationQueries", "getStats", "id", "console"],
      mappings: ";;;;+BAOsBA;;;eAAAA;;;QAPf;wBAEmC;yBACV;8BACG;AAG5B,eAAeA,IAAIC,OAAoB;IAC5C,IAAI;QACF,MAAM,EAAEC,IAAI,EAAE,GAAG,MAAMC,IAAAA,wBAAe;QACtC,IAAI,CAACD,MAAM;YACT,OAAOE,oBAAY,CAACC,IAAI,CAAC;gBAAEC,OAAO;YAAe,GAAG;gBAAEC,QAAQ;YAAI;QACpE;QAEA,MAAMC,QAAQ,MAAMC,gCAAkB,CAACC,QAAQ,CAACR,KAAKS,EAAE;QAEvD,OAAOP,oBAAY,CAACC,IAAI,CAACG;IAC3B,EAAE,OAAOF,OAAO;QACdM,QAAQN,KAAK,CAAC,qCAAqCA;QACnD,OAAOF,oBAAY,CAACC,IAAI,CACtB;YAAEC,OAAO;QAAyC,GAClD;YAAEC,QAAQ;QAAI;IAElB;AACF"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "2de08c95356f78eeca7561aeab3159004a8e2a65"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_upksbujep = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_upksbujep();
cov_upksbujep().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_upksbujep().s[1]++;
Object.defineProperty(exports, "GET", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_upksbujep().f[0]++;
    cov_upksbujep().s[2]++;
    return GET;
  }
});
/* istanbul ignore next */
cov_upksbujep().s[3]++;
require("server-only");
const _server =
/* istanbul ignore next */
(cov_upksbujep().s[4]++, require("next/server"));
const _server1 =
/* istanbul ignore next */
(cov_upksbujep().s[5]++, require("../../../../lib/auth/server"));
const _propagations =
/* istanbul ignore next */
(cov_upksbujep().s[6]++, require("../../../../lib/db/queries/propagations"));
async function GET(request) {
  /* istanbul ignore next */
  cov_upksbujep().f[1]++;
  cov_upksbujep().s[7]++;
  try {
    const {
      user
    } =
    /* istanbul ignore next */
    (cov_upksbujep().s[8]++, await (0, _server1.validateRequest)());
    /* istanbul ignore next */
    cov_upksbujep().s[9]++;
    if (!user) {
      /* istanbul ignore next */
      cov_upksbujep().b[0][0]++;
      cov_upksbujep().s[10]++;
      return _server.NextResponse.json({
        error: 'Unauthorized'
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_upksbujep().b[0][1]++;
    }
    const stats =
    /* istanbul ignore next */
    (cov_upksbujep().s[11]++, await _propagations.PropagationQueries.getStats(user.id));
    /* istanbul ignore next */
    cov_upksbujep().s[12]++;
    return _server.NextResponse.json(stats);
  } catch (error) {
    /* istanbul ignore next */
    cov_upksbujep().s[13]++;
    console.error('Error fetching propagation stats:', error);
    /* istanbul ignore next */
    cov_upksbujep().s[14]++;
    return _server.NextResponse.json({
      error: 'Failed to fetch propagation statistics'
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfdXBrc2J1amVwIiwiYWN0dWFsQ292ZXJhZ2UiLCJzIiwiR0VUIiwicmVxdWVzdCIsImYiLCJ1c2VyIiwiX3NlcnZlcjEiLCJ2YWxpZGF0ZVJlcXVlc3QiLCJiIiwiX3NlcnZlciIsIk5leHRSZXNwb25zZSIsImpzb24iLCJlcnJvciIsInN0YXR1cyIsInN0YXRzIiwiX3Byb3BhZ2F0aW9ucyIsIlByb3BhZ2F0aW9uUXVlcmllcyIsImdldFN0YXRzIiwiaWQiLCJjb25zb2xlIl0sInNvdXJjZXMiOlsiL1VzZXJzL3N0ZWZhbmJla2tlci9wcm9qZWN0cy9mYW5jeS1wbGFudGllcy9zcmMvYXBwL2FwaS9wcm9wYWdhdGlvbnMvc3RhdHMvcm91dGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICdzZXJ2ZXItb25seSc7XG5cbmltcG9ydCB7IE5leHRSZXF1ZXN0LCBOZXh0UmVzcG9uc2UgfSBmcm9tICduZXh0L3NlcnZlcic7XG5pbXBvcnQgeyB2YWxpZGF0ZVJlcXVlc3QgfSBmcm9tICdAL2xpYi9hdXRoL3NlcnZlcic7XG5pbXBvcnQgeyBQcm9wYWdhdGlvblF1ZXJpZXMgfSBmcm9tICdAL2xpYi9kYi9xdWVyaWVzL3Byb3BhZ2F0aW9ucyc7XG5cbi8vIEdFVCAvYXBpL3Byb3BhZ2F0aW9ucy9zdGF0cyAtIEdldCBwcm9wYWdhdGlvbiBzdGF0aXN0aWNzIGZvciB0aGUgYXV0aGVudGljYXRlZCB1c2VyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gR0VUKHJlcXVlc3Q6IE5leHRSZXF1ZXN0KSB7XG4gIHRyeSB7XG4gICAgY29uc3QgeyB1c2VyIH0gPSBhd2FpdCB2YWxpZGF0ZVJlcXVlc3QoKTtcbiAgICBpZiAoIXVzZXIpIHtcbiAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7IGVycm9yOiAnVW5hdXRob3JpemVkJyB9LCB7IHN0YXR1czogNDAxIH0pO1xuICAgIH1cblxuICAgIGNvbnN0IHN0YXRzID0gYXdhaXQgUHJvcGFnYXRpb25RdWVyaWVzLmdldFN0YXRzKHVzZXIuaWQpO1xuXG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHN0YXRzKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBmZXRjaGluZyBwcm9wYWdhdGlvbiBzdGF0czonLCBlcnJvcik7XG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxuICAgICAgeyBlcnJvcjogJ0ZhaWxlZCB0byBmZXRjaCBwcm9wYWdhdGlvbiBzdGF0aXN0aWNzJyB9LFxuICAgICAgeyBzdGF0dXM6IDUwMCB9XG4gICAgKTtcbiAgfVxufSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7SUFRTTtJQUFBQSxhQUFBLFlBQUFBLENBQUE7TUFBQSxPQUFBQyxjQUFBO0lBQUE7RUFBQTtFQUFBLE9BQUFBLGNBQUE7QUFBQTtBQUFBRCxhQUFBO0FBQUFBLGFBQUEsR0FBQUUsQ0FBQTs7Ozs7OytCQURnQjs7Ozs7O1dBQUFDLEdBQUE7Ozs7O1FBUGY7OztpQ0FFbUM7OztpQ0FDVjs7O2lDQUNHO0FBRzVCLGVBQWVBLElBQUlDLE9BQW9CO0VBQUE7RUFBQUosYUFBQSxHQUFBSyxDQUFBO0VBQUFMLGFBQUEsR0FBQUUsQ0FBQTtFQUM1QyxJQUFJO0lBQ0YsTUFBTTtNQUFFSTtJQUFJLENBQUU7SUFBQTtJQUFBLENBQUFOLGFBQUEsR0FBQUUsQ0FBQSxPQUFHLE1BQU0sSUFBQUssUUFBQSxDQUFBQyxlQUFlO0lBQUE7SUFBQVIsYUFBQSxHQUFBRSxDQUFBO0lBQ3RDLElBQUksQ0FBQ0ksSUFBQSxFQUFNO01BQUE7TUFBQU4sYUFBQSxHQUFBUyxDQUFBO01BQUFULGFBQUEsR0FBQUUsQ0FBQTtNQUNULE9BQU9RLE9BQUEsQ0FBQUMsWUFBWSxDQUFDQyxJQUFJLENBQUM7UUFBRUMsS0FBQSxFQUFPO01BQWUsR0FBRztRQUFFQyxNQUFBLEVBQVE7TUFBSTtJQUNwRTtJQUFBO0lBQUE7TUFBQWQsYUFBQSxHQUFBUyxDQUFBO0lBQUE7SUFFQSxNQUFNTSxLQUFBO0lBQUE7SUFBQSxDQUFBZixhQUFBLEdBQUFFLENBQUEsUUFBUSxNQUFNYyxhQUFBLENBQUFDLGtCQUFrQixDQUFDQyxRQUFRLENBQUNaLElBQUEsQ0FBS2EsRUFBRTtJQUFBO0lBQUFuQixhQUFBLEdBQUFFLENBQUE7SUFFdkQsT0FBT1EsT0FBQSxDQUFBQyxZQUFZLENBQUNDLElBQUksQ0FBQ0csS0FBQTtFQUMzQixFQUFFLE9BQU9GLEtBQUEsRUFBTztJQUFBO0lBQUFiLGFBQUEsR0FBQUUsQ0FBQTtJQUNka0IsT0FBQSxDQUFRUCxLQUFLLENBQUMscUNBQXFDQSxLQUFBO0lBQUE7SUFBQWIsYUFBQSxHQUFBRSxDQUFBO0lBQ25ELE9BQU9RLE9BQUEsQ0FBQUMsWUFBWSxDQUFDQyxJQUFJLENBQ3RCO01BQUVDLEtBQUEsRUFBTztJQUF5QyxHQUNsRDtNQUFFQyxNQUFBLEVBQVE7SUFBSTtFQUVsQjtBQUNGIiwiaWdub3JlTGlzdCI6W119