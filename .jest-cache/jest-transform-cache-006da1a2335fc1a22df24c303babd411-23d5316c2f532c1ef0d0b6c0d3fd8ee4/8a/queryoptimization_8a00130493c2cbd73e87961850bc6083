e708059e8ee0f82164c3a1f2dc816910
"use strict";

/* istanbul ignore next */
function cov_1l0tvsmjla() {
  var path = "/Users/stefanbekker/projects/fancy-planties/src/lib/db/query-optimization.ts";
  var hash = "e22e032acf6446d76cc39d1f852e6ebbc729ed17";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/stefanbekker/projects/fancy-planties/src/lib/db/query-optimization.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 30,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 28
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 36
        }
      },
      "6": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 37
        }
      },
      "7": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 43
        }
      },
      "8": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 40
        }
      },
      "9": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 32
        }
      },
      "10": {
        start: {
          line: 31,
          column: 0
        },
        end: {
          line: 31,
          column: 23
        }
      },
      "11": {
        start: {
          line: 32,
          column: 12
        },
        end: {
          line: 32,
          column: 24
        }
      },
      "12": {
        start: {
          line: 33,
          column: 16
        },
        end: {
          line: 33,
          column: 35
        }
      },
      "13": {
        start: {
          line: 34,
          column: 20
        },
        end: {
          line: 34,
          column: 42
        }
      },
      "14": {
        start: {
          line: 35,
          column: 21
        },
        end: {
          line: 35,
          column: 52
        }
      },
      "15": {
        start: {
          line: 37,
          column: 19
        },
        end: {
          line: 37,
          column: 81
        }
      },
      "16": {
        start: {
          line: 38,
          column: 30
        },
        end: {
          line: 136,
          column: 1
        }
      },
      "17": {
        start: {
          line: 41,
          column: 25
        },
        end: {
          line: 41,
          column: 74
        }
      },
      "18": {
        start: {
          line: 42,
          column: 23
        },
        end: {
          line: 42,
          column: 47
        }
      },
      "19": {
        start: {
          line: 43,
          column: 8
        },
        end: {
          line: 43,
          column: 34
        }
      },
      "20": {
        start: {
          line: 43,
          column: 20
        },
        end: {
          line: 43,
          column: 34
        }
      },
      "21": {
        start: {
          line: 44,
          column: 23
        },
        end: {
          line: 61,
          column: 377
        }
      },
      "22": {
        start: {
          line: 62,
          column: 8
        },
        end: {
          line: 62,
          column: 41
        }
      },
      "23": {
        start: {
          line: 63,
          column: 8
        },
        end: {
          line: 63,
          column: 22
        }
      },
      "24": {
        start: {
          line: 67,
          column: 25
        },
        end: {
          line: 67,
          column: 56
        }
      },
      "25": {
        start: {
          line: 68,
          column: 23
        },
        end: {
          line: 68,
          column: 47
        }
      },
      "26": {
        start: {
          line: 69,
          column: 8
        },
        end: {
          line: 69,
          column: 34
        }
      },
      "27": {
        start: {
          line: 69,
          column: 20
        },
        end: {
          line: 69,
          column: 34
        }
      },
      "28": {
        start: {
          line: 70,
          column: 20
        },
        end: {
          line: 70,
          column: 30
        }
      },
      "29": {
        start: {
          line: 71,
          column: 23
        },
        end: {
          line: 82,
          column: 501
        }
      },
      "30": {
        start: {
          line: 83,
          column: 8
        },
        end: {
          line: 83,
          column: 41
        }
      },
      "31": {
        start: {
          line: 84,
          column: 8
        },
        end: {
          line: 84,
          column: 22
        }
      },
      "32": {
        start: {
          line: 88,
          column: 25
        },
        end: {
          line: 88,
          column: 73
        }
      },
      "33": {
        start: {
          line: 89,
          column: 23
        },
        end: {
          line: 89,
          column: 47
        }
      },
      "34": {
        start: {
          line: 90,
          column: 8
        },
        end: {
          line: 90,
          column: 34
        }
      },
      "35": {
        start: {
          line: 90,
          column: 20
        },
        end: {
          line: 90,
          column: 34
        }
      },
      "36": {
        start: {
          line: 91,
          column: 30
        },
        end: {
          line: 91,
          column: 61
        }
      },
      "37": {
        start: {
          line: 92,
          column: 23
        },
        end: {
          line: 105,
          column: 778
        }
      },
      "38": {
        start: {
          line: 106,
          column: 8
        },
        end: {
          line: 106,
          column: 41
        }
      },
      "39": {
        start: {
          line: 107,
          column: 8
        },
        end: {
          line: 107,
          column: 22
        }
      },
      "40": {
        start: {
          line: 111,
          column: 25
        },
        end: {
          line: 111,
          column: 53
        }
      },
      "41": {
        start: {
          line: 112,
          column: 23
        },
        end: {
          line: 112,
          column: 47
        }
      },
      "42": {
        start: {
          line: 113,
          column: 8
        },
        end: {
          line: 113,
          column: 34
        }
      },
      "43": {
        start: {
          line: 113,
          column: 20
        },
        end: {
          line: 113,
          column: 34
        }
      },
      "44": {
        start: {
          line: 114,
          column: 63
        },
        end: {
          line: 127,
          column: 10
        }
      },
      "45": {
        start: {
          line: 128,
          column: 23
        },
        end: {
          line: 132,
          column: 9
        }
      },
      "46": {
        start: {
          line: 133,
          column: 8
        },
        end: {
          line: 133,
          column: 41
        }
      },
      "47": {
        start: {
          line: 134,
          column: 8
        },
        end: {
          line: 134,
          column: 22
        }
      },
      "48": {
        start: {
          line: 137,
          column: 36
        },
        end: {
          line: 186,
          column: 1
        }
      },
      "49": {
        start: {
          line: 140,
          column: 25
        },
        end: {
          line: 140,
          column: 73
        }
      },
      "50": {
        start: {
          line: 141,
          column: 23
        },
        end: {
          line: 141,
          column: 47
        }
      },
      "51": {
        start: {
          line: 142,
          column: 8
        },
        end: {
          line: 142,
          column: 34
        }
      },
      "52": {
        start: {
          line: 142,
          column: 20
        },
        end: {
          line: 142,
          column: 34
        }
      },
      "53": {
        start: {
          line: 143,
          column: 32
        },
        end: {
          line: 145,
          column: 9
        }
      },
      "54": {
        start: {
          line: 146,
          column: 8
        },
        end: {
          line: 148,
          column: 9
        }
      },
      "55": {
        start: {
          line: 147,
          column: 12
        },
        end: {
          line: 147,
          column: 91
        }
      },
      "56": {
        start: {
          line: 149,
          column: 23
        },
        end: {
          line: 169,
          column: 365
        }
      },
      "57": {
        start: {
          line: 170,
          column: 8
        },
        end: {
          line: 170,
          column: 41
        }
      },
      "58": {
        start: {
          line: 171,
          column: 8
        },
        end: {
          line: 171,
          column: 22
        }
      },
      "59": {
        start: {
          line: 175,
          column: 25
        },
        end: {
          line: 175,
          column: 59
        }
      },
      "60": {
        start: {
          line: 176,
          column: 23
        },
        end: {
          line: 176,
          column: 47
        }
      },
      "61": {
        start: {
          line: 177,
          column: 8
        },
        end: {
          line: 177,
          column: 34
        }
      },
      "62": {
        start: {
          line: 177,
          column: 20
        },
        end: {
          line: 177,
          column: 34
        }
      },
      "63": {
        start: {
          line: 178,
          column: 23
        },
        end: {
          line: 182,
          column: 171
        }
      },
      "64": {
        start: {
          line: 183,
          column: 8
        },
        end: {
          line: 183,
          column: 41
        }
      },
      "65": {
        start: {
          line: 184,
          column: 8
        },
        end: {
          line: 184,
          column: 22
        }
      },
      "66": {
        start: {
          line: 187,
          column: 29
        },
        end: {
          line: 220,
          column: 1
        }
      },
      "67": {
        start: {
          line: 190,
          column: 25
        },
        end: {
          line: 190,
          column: 73
        }
      },
      "68": {
        start: {
          line: 191,
          column: 23
        },
        end: {
          line: 191,
          column: 47
        }
      },
      "69": {
        start: {
          line: 192,
          column: 8
        },
        end: {
          line: 192,
          column: 34
        }
      },
      "70": {
        start: {
          line: 192,
          column: 20
        },
        end: {
          line: 192,
          column: 34
        }
      },
      "71": {
        start: {
          line: 193,
          column: 23
        },
        end: {
          line: 193,
          column: 225
        }
      },
      "72": {
        start: {
          line: 194,
          column: 8
        },
        end: {
          line: 194,
          column: 41
        }
      },
      "73": {
        start: {
          line: 195,
          column: 8
        },
        end: {
          line: 195,
          column: 22
        }
      },
      "74": {
        start: {
          line: 199,
          column: 25
        },
        end: {
          line: 199,
          column: 68
        }
      },
      "75": {
        start: {
          line: 200,
          column: 23
        },
        end: {
          line: 200,
          column: 47
        }
      },
      "76": {
        start: {
          line: 201,
          column: 8
        },
        end: {
          line: 201,
          column: 34
        }
      },
      "77": {
        start: {
          line: 201,
          column: 20
        },
        end: {
          line: 201,
          column: 34
        }
      },
      "78": {
        start: {
          line: 202,
          column: 23
        },
        end: {
          line: 216,
          column: 388
        }
      },
      "79": {
        start: {
          line: 217,
          column: 8
        },
        end: {
          line: 217,
          column: 41
        }
      },
      "80": {
        start: {
          line: 218,
          column: 8
        },
        end: {
          line: 218,
          column: 22
        }
      },
      "81": {
        start: {
          line: 221,
          column: 33
        },
        end: {
          line: 257,
          column: 1
        }
      },
      "82": {
        start: {
          line: 224,
          column: 25
        },
        end: {
          line: 224,
          column: 65
        }
      },
      "83": {
        start: {
          line: 225,
          column: 23
        },
        end: {
          line: 225,
          column: 47
        }
      },
      "84": {
        start: {
          line: 226,
          column: 8
        },
        end: {
          line: 226,
          column: 34
        }
      },
      "85": {
        start: {
          line: 226,
          column: 20
        },
        end: {
          line: 226,
          column: 34
        }
      },
      "86": {
        start: {
          line: 227,
          column: 30
        },
        end: {
          line: 227,
          column: 61
        }
      },
      "87": {
        start: {
          line: 228,
          column: 23
        },
        end: {
          line: 236,
          column: 494
        }
      },
      "88": {
        start: {
          line: 237,
          column: 8
        },
        end: {
          line: 237,
          column: 41
        }
      },
      "89": {
        start: {
          line: 238,
          column: 8
        },
        end: {
          line: 238,
          column: 22
        }
      },
      "90": {
        start: {
          line: 242,
          column: 25
        },
        end: {
          line: 242,
          column: 50
        }
      },
      "91": {
        start: {
          line: 243,
          column: 23
        },
        end: {
          line: 243,
          column: 47
        }
      },
      "92": {
        start: {
          line: 244,
          column: 8
        },
        end: {
          line: 244,
          column: 34
        }
      },
      "93": {
        start: {
          line: 244,
          column: 20
        },
        end: {
          line: 244,
          column: 34
        }
      },
      "94": {
        start: {
          line: 245,
          column: 23
        },
        end: {
          line: 253,
          column: 266
        }
      },
      "95": {
        start: {
          line: 254,
          column: 8
        },
        end: {
          line: 254,
          column: 41
        }
      },
      "96": {
        start: {
          line: 255,
          column: 8
        },
        end: {
          line: 255,
          column: 22
        }
      },
      "97": {
        start: {
          line: 258,
          column: 21
        },
        end: {
          line: 299,
          column: 1
        }
      },
      "98": {
        start: {
          line: 261,
          column: 25
        },
        end: {
          line: 261,
          column: 51
        }
      },
      "99": {
        start: {
          line: 262,
          column: 23
        },
        end: {
          line: 262,
          column: 47
        }
      },
      "100": {
        start: {
          line: 263,
          column: 8
        },
        end: {
          line: 263,
          column: 34
        }
      },
      "101": {
        start: {
          line: 263,
          column: 20
        },
        end: {
          line: 263,
          column: 34
        }
      },
      "102": {
        start: {
          line: 264,
          column: 108
        },
        end: {
          line: 270,
          column: 10
        }
      },
      "103": {
        start: {
          line: 265,
          column: 16
        },
        end: {
          line: 265,
          column: 64
        }
      },
      "104": {
        start: {
          line: 266,
          column: 16
        },
        end: {
          line: 266,
          column: 66
        }
      },
      "105": {
        start: {
          line: 267,
          column: 16
        },
        end: {
          line: 267,
          column: 72
        }
      },
      "106": {
        start: {
          line: 268,
          column: 16
        },
        end: {
          line: 268,
          column: 79
        }
      },
      "107": {
        start: {
          line: 269,
          column: 16
        },
        end: {
          line: 269,
          column: 76
        }
      },
      "108": {
        start: {
          line: 271,
          column: 23
        },
        end: {
          line: 277,
          column: 9
        }
      },
      "109": {
        start: {
          line: 278,
          column: 8
        },
        end: {
          line: 278,
          column: 41
        }
      },
      "110": {
        start: {
          line: 279,
          column: 8
        },
        end: {
          line: 279,
          column: 22
        }
      },
      "111": {
        start: {
          line: 283,
          column: 25
        },
        end: {
          line: 283,
          column: 73
        }
      },
      "112": {
        start: {
          line: 284,
          column: 23
        },
        end: {
          line: 284,
          column: 47
        }
      },
      "113": {
        start: {
          line: 285,
          column: 8
        },
        end: {
          line: 285,
          column: 34
        }
      },
      "114": {
        start: {
          line: 285,
          column: 20
        },
        end: {
          line: 285,
          column: 34
        }
      },
      "115": {
        start: {
          line: 286,
          column: 66
        },
        end: {
          line: 290,
          column: 10
        }
      },
      "116": {
        start: {
          line: 287,
          column: 16
        },
        end: {
          line: 287,
          column: 319
        }
      },
      "117": {
        start: {
          line: 288,
          column: 16
        },
        end: {
          line: 288,
          column: 73
        }
      },
      "118": {
        start: {
          line: 289,
          column: 16
        },
        end: {
          line: 289,
          column: 206
        }
      },
      "119": {
        start: {
          line: 291,
          column: 23
        },
        end: {
          line: 295,
          column: 9
        }
      },
      "120": {
        start: {
          line: 296,
          column: 8
        },
        end: {
          line: 296,
          column: 41
        }
      },
      "121": {
        start: {
          line: 297,
          column: 8
        },
        end: {
          line: 297,
          column: 22
        }
      },
      "122": {
        start: {
          line: 300,
          column: 25
        },
        end: {
          line: 318,
          column: 1
        }
      },
      "123": {
        start: {
          line: 303,
          column: 22
        },
        end: {
          line: 303,
          column: 39
        }
      },
      "124": {
        start: {
          line: 304,
          column: 23
        },
        end: {
          line: 304,
          column: 38
        }
      },
      "125": {
        start: {
          line: 305,
          column: 25
        },
        end: {
          line: 305,
          column: 50
        }
      },
      "126": {
        start: {
          line: 306,
          column: 8
        },
        end: {
          line: 308,
          column: 9
        }
      },
      "127": {
        start: {
          line: 307,
          column: 12
        },
        end: {
          line: 307,
          column: 92
        }
      },
      "128": {
        start: {
          line: 309,
          column: 8
        },
        end: {
          line: 311,
          column: 9
        }
      },
      "129": {
        start: {
          line: 310,
          column: 12
        },
        end: {
          line: 310,
          column: 72
        }
      },
      "130": {
        start: {
          line: 312,
          column: 8
        },
        end: {
          line: 312,
          column: 22
        }
      },
      "131": {
        start: {
          line: 316,
          column: 8
        },
        end: {
          line: 316,
          column: 27
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        },
        loc: {
          start: {
            line: 12,
            column: 24
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 32
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 18,
            column: 4
          },
          end: {
            line: 18,
            column: 5
          }
        },
        loc: {
          start: {
            line: 18,
            column: 33
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 18
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 21,
            column: 4
          },
          end: {
            line: 21,
            column: 5
          }
        },
        loc: {
          start: {
            line: 21,
            column: 39
          },
          end: {
            line: 23,
            column: 5
          }
        },
        line: 21
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 24,
            column: 4
          },
          end: {
            line: 24,
            column: 5
          }
        },
        loc: {
          start: {
            line: 24,
            column: 36
          },
          end: {
            line: 26,
            column: 5
          }
        },
        line: 24
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 27,
            column: 4
          },
          end: {
            line: 27,
            column: 5
          }
        },
        loc: {
          start: {
            line: 27,
            column: 28
          },
          end: {
            line: 29,
            column: 5
          }
        },
        line: 27
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 40,
            column: 25
          },
          end: {
            line: 40,
            column: 26
          }
        },
        loc: {
          start: {
            line: 40,
            column: 65
          },
          end: {
            line: 64,
            column: 5
          }
        },
        line: 40
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 66,
            column: 26
          },
          end: {
            line: 66,
            column: 27
          }
        },
        loc: {
          start: {
            line: 66,
            column: 42
          },
          end: {
            line: 85,
            column: 5
          }
        },
        line: 66
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 87,
            column: 18
          },
          end: {
            line: 87,
            column: 19
          }
        },
        loc: {
          start: {
            line: 87,
            column: 58
          },
          end: {
            line: 108,
            column: 5
          }
        },
        line: 87
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 110,
            column: 24
          },
          end: {
            line: 110,
            column: 25
          }
        },
        loc: {
          start: {
            line: 110,
            column: 40
          },
          end: {
            line: 135,
            column: 5
          }
        },
        line: 110
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 139,
            column: 33
          },
          end: {
            line: 139,
            column: 34
          }
        },
        loc: {
          start: {
            line: 139,
            column: 57
          },
          end: {
            line: 172,
            column: 5
          }
        },
        line: 139
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 174,
            column: 30
          },
          end: {
            line: 174,
            column: 31
          }
        },
        loc: {
          start: {
            line: 174,
            column: 46
          },
          end: {
            line: 185,
            column: 5
          }
        },
        line: 174
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 189,
            column: 25
          },
          end: {
            line: 189,
            column: 26
          }
        },
        loc: {
          start: {
            line: 189,
            column: 62
          },
          end: {
            line: 196,
            column: 5
          }
        },
        line: 189
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 198,
            column: 29
          },
          end: {
            line: 198,
            column: 30
          }
        },
        loc: {
          start: {
            line: 198,
            column: 57
          },
          end: {
            line: 219,
            column: 5
          }
        },
        line: 198
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 223,
            column: 25
          },
          end: {
            line: 223,
            column: 26
          }
        },
        loc: {
          start: {
            line: 223,
            column: 57
          },
          end: {
            line: 239,
            column: 5
          }
        },
        line: 223
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 241,
            column: 22
          },
          end: {
            line: 241,
            column: 23
          }
        },
        loc: {
          start: {
            line: 241,
            column: 42
          },
          end: {
            line: 256,
            column: 5
          }
        },
        line: 241
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 260,
            column: 22
          },
          end: {
            line: 260,
            column: 23
          }
        },
        loc: {
          start: {
            line: 260,
            column: 38
          },
          end: {
            line: 280,
            column: 5
          }
        },
        line: 260
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 265,
            column: 12
          },
          end: {
            line: 265,
            column: 13
          }
        },
        loc: {
          start: {
            line: 265,
            column: 16
          },
          end: {
            line: 265,
            column: 64
          }
        },
        line: 265
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 266,
            column: 12
          },
          end: {
            line: 266,
            column: 13
          }
        },
        loc: {
          start: {
            line: 266,
            column: 16
          },
          end: {
            line: 266,
            column: 66
          }
        },
        line: 266
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 267,
            column: 12
          },
          end: {
            line: 267,
            column: 13
          }
        },
        loc: {
          start: {
            line: 267,
            column: 16
          },
          end: {
            line: 267,
            column: 72
          }
        },
        line: 267
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 268,
            column: 12
          },
          end: {
            line: 268,
            column: 13
          }
        },
        loc: {
          start: {
            line: 268,
            column: 16
          },
          end: {
            line: 268,
            column: 79
          }
        },
        line: 268
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 269,
            column: 12
          },
          end: {
            line: 269,
            column: 13
          }
        },
        loc: {
          start: {
            line: 269,
            column: 16
          },
          end: {
            line: 269,
            column: 76
          }
        },
        line: 269
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 282,
            column: 24
          },
          end: {
            line: 282,
            column: 25
          }
        },
        loc: {
          start: {
            line: 282,
            column: 57
          },
          end: {
            line: 298,
            column: 5
          }
        },
        line: 282
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 287,
            column: 12
          },
          end: {
            line: 287,
            column: 13
          }
        },
        loc: {
          start: {
            line: 287,
            column: 16
          },
          end: {
            line: 287,
            column: 319
          }
        },
        line: 287
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 288,
            column: 12
          },
          end: {
            line: 288,
            column: 13
          }
        },
        loc: {
          start: {
            line: 288,
            column: 16
          },
          end: {
            line: 288,
            column: 73
          }
        },
        line: 288
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 289,
            column: 12
          },
          end: {
            line: 289,
            column: 13
          }
        },
        loc: {
          start: {
            line: 289,
            column: 16
          },
          end: {
            line: 289,
            column: 206
          }
        },
        line: 289
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 302,
            column: 18
          },
          end: {
            line: 302,
            column: 19
          }
        },
        loc: {
          start: {
            line: 302,
            column: 68
          },
          end: {
            line: 313,
            column: 5
          }
        },
        line: 302
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 315,
            column: 16
          },
          end: {
            line: 315,
            column: 17
          }
        },
        loc: {
          start: {
            line: 315,
            column: 20
          },
          end: {
            line: 317,
            column: 5
          }
        },
        line: 315
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 40,
            column: 40
          },
          end: {
            line: 40,
            column: 50
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 40,
            column: 48
          },
          end: {
            line: 40,
            column: 50
          }
        }],
        line: 40
      },
      "1": {
        loc: {
          start: {
            line: 40,
            column: 52
          },
          end: {
            line: 40,
            column: 62
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 40,
            column: 61
          },
          end: {
            line: 40,
            column: 62
          }
        }],
        line: 40
      },
      "2": {
        loc: {
          start: {
            line: 43,
            column: 8
          },
          end: {
            line: 43,
            column: 34
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 43,
            column: 8
          },
          end: {
            line: 43,
            column: 34
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 43
      },
      "3": {
        loc: {
          start: {
            line: 69,
            column: 8
          },
          end: {
            line: 69,
            column: 34
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 69,
            column: 8
          },
          end: {
            line: 69,
            column: 34
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 69
      },
      "4": {
        loc: {
          start: {
            line: 87,
            column: 45
          },
          end: {
            line: 87,
            column: 55
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 87,
            column: 53
          },
          end: {
            line: 87,
            column: 55
          }
        }],
        line: 87
      },
      "5": {
        loc: {
          start: {
            line: 90,
            column: 8
          },
          end: {
            line: 90,
            column: 34
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 90,
            column: 8
          },
          end: {
            line: 90,
            column: 34
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 90
      },
      "6": {
        loc: {
          start: {
            line: 113,
            column: 8
          },
          end: {
            line: 113,
            column: 34
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 113,
            column: 8
          },
          end: {
            line: 113,
            column: 34
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 113
      },
      "7": {
        loc: {
          start: {
            line: 129,
            column: 19
          },
          end: {
            line: 129,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 129,
            column: 19
          },
          end: {
            line: 129,
            column: 40
          }
        }, {
          start: {
            line: 129,
            column: 44
          },
          end: {
            line: 129,
            column: 45
          }
        }],
        line: 129
      },
      "8": {
        loc: {
          start: {
            line: 130,
            column: 20
          },
          end: {
            line: 130,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 130,
            column: 20
          },
          end: {
            line: 130,
            column: 42
          }
        }, {
          start: {
            line: 130,
            column: 46
          },
          end: {
            line: 130,
            column: 47
          }
        }],
        line: 130
      },
      "9": {
        loc: {
          start: {
            line: 131,
            column: 25
          },
          end: {
            line: 131,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 131,
            column: 25
          },
          end: {
            line: 131,
            column: 52
          }
        }, {
          start: {
            line: 131,
            column: 56
          },
          end: {
            line: 131,
            column: 57
          }
        }],
        line: 131
      },
      "10": {
        loc: {
          start: {
            line: 140,
            column: 56
          },
          end: {
            line: 140,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 140,
            column: 56
          },
          end: {
            line: 140,
            column: 62
          }
        }, {
          start: {
            line: 140,
            column: 66
          },
          end: {
            line: 140,
            column: 71
          }
        }],
        line: 140
      },
      "11": {
        loc: {
          start: {
            line: 142,
            column: 8
          },
          end: {
            line: 142,
            column: 34
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 142,
            column: 8
          },
          end: {
            line: 142,
            column: 34
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 142
      },
      "12": {
        loc: {
          start: {
            line: 146,
            column: 8
          },
          end: {
            line: 148,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 146,
            column: 8
          },
          end: {
            line: 148,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 146
      },
      "13": {
        loc: {
          start: {
            line: 177,
            column: 8
          },
          end: {
            line: 177,
            column: 34
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 177,
            column: 8
          },
          end: {
            line: 177,
            column: 34
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 177
      },
      "14": {
        loc: {
          start: {
            line: 189,
            column: 49
          },
          end: {
            line: 189,
            column: 59
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 189,
            column: 57
          },
          end: {
            line: 189,
            column: 59
          }
        }],
        line: 189
      },
      "15": {
        loc: {
          start: {
            line: 192,
            column: 8
          },
          end: {
            line: 192,
            column: 34
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 192,
            column: 8
          },
          end: {
            line: 192,
            column: 34
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 192
      },
      "16": {
        loc: {
          start: {
            line: 198,
            column: 44
          },
          end: {
            line: 198,
            column: 54
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 198,
            column: 52
          },
          end: {
            line: 198,
            column: 54
          }
        }],
        line: 198
      },
      "17": {
        loc: {
          start: {
            line: 201,
            column: 8
          },
          end: {
            line: 201,
            column: 34
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 201,
            column: 8
          },
          end: {
            line: 201,
            column: 34
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 201
      },
      "18": {
        loc: {
          start: {
            line: 223,
            column: 44
          },
          end: {
            line: 223,
            column: 54
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 223,
            column: 52
          },
          end: {
            line: 223,
            column: 54
          }
        }],
        line: 223
      },
      "19": {
        loc: {
          start: {
            line: 226,
            column: 8
          },
          end: {
            line: 226,
            column: 34
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 226,
            column: 8
          },
          end: {
            line: 226,
            column: 34
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 226
      },
      "20": {
        loc: {
          start: {
            line: 241,
            column: 29
          },
          end: {
            line: 241,
            column: 39
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 241,
            column: 37
          },
          end: {
            line: 241,
            column: 39
          }
        }],
        line: 241
      },
      "21": {
        loc: {
          start: {
            line: 244,
            column: 8
          },
          end: {
            line: 244,
            column: 34
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 244,
            column: 8
          },
          end: {
            line: 244,
            column: 34
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 244
      },
      "22": {
        loc: {
          start: {
            line: 263,
            column: 8
          },
          end: {
            line: 263,
            column: 34
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 263,
            column: 8
          },
          end: {
            line: 263,
            column: 34
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 263
      },
      "23": {
        loc: {
          start: {
            line: 285,
            column: 8
          },
          end: {
            line: 285,
            column: 34
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 285,
            column: 8
          },
          end: {
            line: 285,
            column: 34
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 285
      },
      "24": {
        loc: {
          start: {
            line: 292,
            column: 27
          },
          end: {
            line: 292,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 292,
            column: 27
          },
          end: {
            line: 292,
            column: 43
          }
        }, {
          start: {
            line: 292,
            column: 47
          },
          end: {
            line: 292,
            column: 51
          }
        }],
        line: 292
      },
      "25": {
        loc: {
          start: {
            line: 302,
            column: 45
          },
          end: {
            line: 302,
            column: 65
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 302,
            column: 61
          },
          end: {
            line: 302,
            column: 65
          }
        }],
        line: 302
      },
      "26": {
        loc: {
          start: {
            line: 306,
            column: 8
          },
          end: {
            line: 308,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 306,
            column: 8
          },
          end: {
            line: 308,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 306
      },
      "27": {
        loc: {
          start: {
            line: 309,
            column: 8
          },
          end: {
            line: 311,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 309,
            column: 8
          },
          end: {
            line: 311,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 309
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0
    },
    b: {
      "0": [0],
      "1": [0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0],
      "15": [0, 0],
      "16": [0],
      "17": [0, 0],
      "18": [0],
      "19": [0, 0],
      "20": [0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0],
      "26": [0, 0],
      "27": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/stefanbekker/projects/fancy-planties/src/lib/db/query-optimization.ts"],
      sourcesContent: ["import 'server-only';\n\nimport { db } from '@/lib/db';\nimport { \n  plantInstances, \n  plants, \n  propagations, \n  careHistory,\n  careGuides,\n  users \n} from '@/lib/db/schema';\nimport { eq, and, or, desc, asc, sql, inArray, isNull, isNotNull, gte, lte, like, ilike } from 'drizzle-orm';\nimport { queryOptimization } from '@/lib/utils/performance';\n\n// Create query cache instance\nconst queryCache = queryOptimization.createQueryCache<any>(5 * 60 * 1000); // 5 minutes TTL\n\n/**\n * Optimized plant instance queries with proper indexing\n */\nexport const optimizedPlantQueries = {\n  // Get user's active plants with plant taxonomy (uses user_active_idx)\n  getUserActivePlants: async (userId: number, limit: number = 50, offset: number = 0) => {\n    const cacheKey = `user_active_plants_${userId}_${limit}_${offset}`;\n    const cached = queryCache.get(cacheKey);\n    if (cached) return cached;\n\n    const result = await db\n      .select({\n        id: plantInstances.id,\n        nickname: plantInstances.nickname,\n        location: plantInstances.location,\n        lastFertilized: plantInstances.lastFertilized,\n        fertilizerDue: plantInstances.fertilizerDue,\n        lastRepot: plantInstances.lastRepot,\n        images: plantInstances.images,\n        createdAt: plantInstances.createdAt,\n        plant: {\n          id: plants.id,\n          family: plants.family,\n          genus: plants.genus,\n          species: plants.species,\n          cultivar: plants.cultivar,\n          commonName: plants.commonName,\n        }\n      })\n      .from(plantInstances)\n      .leftJoin(plants, eq(plantInstances.plantId, plants.id))\n      .where(and(\n        eq(plantInstances.userId, userId),\n        eq(plantInstances.isActive, true)\n      ))\n      .orderBy(desc(plantInstances.createdAt))\n      .limit(limit)\n      .offset(offset);\n\n    queryCache.set(cacheKey, result);\n    return result;\n  },\n\n  // Get plants needing care (uses fertilizer_due_idx)\n  getPlantsNeedingCare: async (userId: number) => {\n    const cacheKey = `plants_needing_care_${userId}`;\n    const cached = queryCache.get(cacheKey);\n    if (cached) return cached;\n\n    const now = new Date();\n    const result = await db\n      .select({\n        id: plantInstances.id,\n        nickname: plantInstances.nickname,\n        location: plantInstances.location,\n        fertilizerDue: plantInstances.fertilizerDue,\n        lastFertilized: plantInstances.lastFertilized,\n        plant: {\n          commonName: plants.commonName,\n          genus: plants.genus,\n          species: plants.species,\n        }\n      })\n      .from(plantInstances)\n      .leftJoin(plants, eq(plantInstances.plantId, plants.id))\n      .where(and(\n        eq(plantInstances.userId, userId),\n        eq(plantInstances.isActive, true),\n        or(\n          lte(plantInstances.fertilizerDue, now),\n          isNull(plantInstances.fertilizerDue)\n        )\n      ))\n      .orderBy(asc(plantInstances.fertilizerDue));\n\n    queryCache.set(cacheKey, result);\n    return result;\n  },\n\n  // Search plants with fuzzy matching (uses taxonomy indexes)\n  searchPlants: async (userId: number, searchTerm: string, limit: number = 20) => {\n    const cacheKey = `search_plants_${userId}_${searchTerm}_${limit}`;\n    const cached = queryCache.get(cacheKey);\n    if (cached) return cached;\n\n    const searchPattern = `%${searchTerm.toLowerCase()}%`;\n    \n    const result = await db\n      .select({\n        id: plantInstances.id,\n        nickname: plantInstances.nickname,\n        location: plantInstances.location,\n        images: plantInstances.images,\n        plant: {\n          id: plants.id,\n          family: plants.family,\n          genus: plants.genus,\n          species: plants.species,\n          cultivar: plants.cultivar,\n          commonName: plants.commonName,\n        }\n      })\n      .from(plantInstances)\n      .leftJoin(plants, eq(plantInstances.plantId, plants.id))\n      .where(and(\n        eq(plantInstances.userId, userId),\n        eq(plantInstances.isActive, true),\n        or(\n          ilike(plantInstances.nickname, searchPattern),\n          ilike(plantInstances.location, searchPattern),\n          ilike(plants.commonName, searchPattern),\n          ilike(plants.genus, searchPattern),\n          ilike(plants.species, searchPattern),\n          ilike(plants.cultivar, searchPattern),\n          ilike(plants.family, searchPattern)\n        )\n      ))\n      .limit(limit);\n\n    queryCache.set(cacheKey, result);\n    return result;\n  },\n\n  // Get plant statistics for dashboard\n  getPlantStatistics: async (userId: number) => {\n    const cacheKey = `plant_statistics_${userId}`;\n    const cached = queryCache.get(cacheKey);\n    if (cached) return cached;\n\n    const [totalPlants, activePlants, plantsNeedingCare] = await Promise.all([\n      // Total plants count\n      db\n        .select({ count: sql<number>`count(*)` })\n        .from(plantInstances)\n        .where(eq(plantInstances.userId, userId)),\n      \n      // Active plants count\n      db\n        .select({ count: sql<number>`count(*)` })\n        .from(plantInstances)\n        .where(and(\n          eq(plantInstances.userId, userId),\n          eq(plantInstances.isActive, true)\n        )),\n      \n      // Plants needing care count\n      db\n        .select({ count: sql<number>`count(*)` })\n        .from(plantInstances)\n        .where(and(\n          eq(plantInstances.userId, userId),\n          eq(plantInstances.isActive, true),\n          lte(plantInstances.fertilizerDue, new Date())\n        ))\n    ]);\n\n    const result = {\n      total: totalPlants[0]?.count || 0,\n      active: activePlants[0]?.count || 0,\n      needingCare: plantsNeedingCare[0]?.count || 0,\n    };\n\n    queryCache.set(cacheKey, result);\n    return result;\n  },\n};\n\n/**\n * Optimized propagation queries\n */\nexport const optimizedPropagationQueries = {\n  // Get user propagations by status (uses user_status_idx)\n  getUserPropagationsByStatus: async (userId: number, status?: 'started' | 'rooting' | 'planted' | 'established') => {\n    const cacheKey = `user_propagations_${userId}_${status || 'all'}`;\n    const cached = queryCache.get(cacheKey);\n    if (cached) return cached;\n\n    const whereConditions = [eq(propagations.userId, userId)];\n    if (status) {\n      whereConditions.push(eq(propagations.status, status));\n    }\n\n    const result = await db\n      .select({\n        id: propagations.id,\n        nickname: propagations.nickname,\n        location: propagations.location,\n        dateStarted: propagations.dateStarted,\n        status: propagations.status,\n        sourceType: propagations.sourceType,\n        externalSource: propagations.externalSource,\n        externalSourceDetails: propagations.externalSourceDetails,\n        images: propagations.images,\n        plant: {\n          commonName: plants.commonName,\n          genus: plants.genus,\n          species: plants.species,\n          cultivar: plants.cultivar,\n        },\n        parentInstance: {\n          id: plantInstances.id,\n          nickname: plantInstances.nickname,\n        }\n      })\n      .from(propagations)\n      .leftJoin(plants, eq(propagations.plantId, plants.id))\n      .leftJoin(plantInstances, eq(propagations.parentInstanceId, plantInstances.id))\n      .where(and(...whereConditions))\n      .orderBy(desc(propagations.dateStarted));\n\n    queryCache.set(cacheKey, result);\n    return result;\n  },\n\n  // Get propagation statistics by source type\n  getPropagationStatistics: async (userId: number) => {\n    const cacheKey = `propagation_statistics_${userId}`;\n    const cached = queryCache.get(cacheKey);\n    if (cached) return cached;\n\n    const result = await db\n      .select({\n        sourceType: propagations.sourceType,\n        status: propagations.status,\n        count: sql<number>`count(*)`\n      })\n      .from(propagations)\n      .where(eq(propagations.userId, userId))\n      .groupBy(propagations.sourceType, propagations.status);\n\n    queryCache.set(cacheKey, result);\n    return result;\n  },\n};\n\n/**\n * Optimized care history queries\n */\nexport const optimizedCareQueries = {\n  // Get care history for plant (uses plant_care_date_idx)\n  getPlantCareHistory: async (plantInstanceId: number, limit: number = 50) => {\n    const cacheKey = `plant_care_history_${plantInstanceId}_${limit}`;\n    const cached = queryCache.get(cacheKey);\n    if (cached) return cached;\n\n    const result = await db\n      .select()\n      .from(careHistory)\n      .where(eq(careHistory.plantInstanceId, plantInstanceId))\n      .orderBy(desc(careHistory.careDate))\n      .limit(limit);\n\n    queryCache.set(cacheKey, result);\n    return result;\n  },\n\n  // Get recent care activities for user (uses user_care_type_idx)\n  getRecentCareActivities: async (userId: number, limit: number = 20) => {\n    const cacheKey = `recent_care_activities_${userId}_${limit}`;\n    const cached = queryCache.get(cacheKey);\n    if (cached) return cached;\n\n    const result = await db\n      .select({\n        id: careHistory.id,\n        careType: careHistory.careType,\n        careDate: careHistory.careDate,\n        notes: careHistory.notes,\n        plantInstance: {\n          id: plantInstances.id,\n          nickname: plantInstances.nickname,\n        },\n        plant: {\n          commonName: plants.commonName,\n          genus: plants.genus,\n          species: plants.species,\n        }\n      })\n      .from(careHistory)\n      .leftJoin(plantInstances, eq(careHistory.plantInstanceId, plantInstances.id))\n      .leftJoin(plants, eq(plantInstances.plantId, plants.id))\n      .where(eq(careHistory.userId, userId))\n      .orderBy(desc(careHistory.careDate))\n      .limit(limit);\n\n    queryCache.set(cacheKey, result);\n    return result;\n  },\n};\n\n/**\n * Optimized taxonomy queries\n */\nexport const optimizedTaxonomyQueries = {\n  // Search plant taxonomy with autocomplete (uses taxonomy indexes)\n  searchPlantTaxonomy: async (searchTerm: string, limit: number = 10) => {\n    const cacheKey = `search_taxonomy_${searchTerm}_${limit}`;\n    const cached = queryCache.get(cacheKey);\n    if (cached) return cached;\n\n    const searchPattern = `%${searchTerm.toLowerCase()}%`;\n    \n    const result = await db\n      .select({\n        id: plants.id,\n        family: plants.family,\n        genus: plants.genus,\n        species: plants.species,\n        cultivar: plants.cultivar,\n        commonName: plants.commonName,\n        isVerified: plants.isVerified,\n      })\n      .from(plants)\n      .where(or(\n        ilike(plants.commonName, searchPattern),\n        ilike(plants.genus, searchPattern),\n        ilike(plants.species, searchPattern),\n        ilike(plants.cultivar, searchPattern),\n        ilike(plants.family, searchPattern)\n      ))\n      .orderBy(\n        desc(plants.isVerified), // Verified plants first\n        asc(plants.commonName)\n      )\n      .limit(limit);\n\n    queryCache.set(cacheKey, result);\n    return result;\n  },\n\n  // Get popular plants (most used in plant instances)\n  getPopularPlants: async (limit: number = 10) => {\n    const cacheKey = `popular_plants_${limit}`;\n    const cached = queryCache.get(cacheKey);\n    if (cached) return cached;\n\n    const result = await db\n      .select({\n        id: plants.id,\n        family: plants.family,\n        genus: plants.genus,\n        species: plants.species,\n        cultivar: plants.cultivar,\n        commonName: plants.commonName,\n        usageCount: sql<number>`count(${plantInstances.id})`\n      })\n      .from(plants)\n      .leftJoin(plantInstances, eq(plants.id, plantInstances.plantId))\n      .groupBy(plants.id)\n      .orderBy(desc(sql`count(${plantInstances.id})`))\n      .limit(limit);\n\n    queryCache.set(cacheKey, result);\n    return result;\n  },\n};\n\n/**\n * Batch query utilities for performance\n */\nexport const batchQueries = {\n  // Get dashboard data in a single batch\n  getDashboardData: async (userId: number) => {\n    const cacheKey = `dashboard_data_${userId}`;\n    const cached = queryCache.get(cacheKey);\n    if (cached) return cached;\n\n    const [\n      plantStats,\n      plantsNeedingCare,\n      recentCareActivities,\n      activePropagations,\n      propagationStats\n    ] = await queryOptimization.batchQueries([\n      () => optimizedPlantQueries.getPlantStatistics(userId),\n      () => optimizedPlantQueries.getPlantsNeedingCare(userId),\n      () => optimizedCareQueries.getRecentCareActivities(userId, 10),\n      () => optimizedPropagationQueries.getUserPropagationsByStatus(userId),\n      () => optimizedPropagationQueries.getPropagationStatistics(userId),\n    ]);\n\n    const result = {\n      plantStats,\n      plantsNeedingCare,\n      recentCareActivities,\n      activePropagations,\n      propagationStats,\n    };\n\n    queryCache.set(cacheKey, result);\n    return result;\n  },\n\n  // Get plant detail data in a single batch\n  getPlantDetailData: async (plantInstanceId: number, userId: number) => {\n    const cacheKey = `plant_detail_data_${plantInstanceId}_${userId}`;\n    const cached = queryCache.get(cacheKey);\n    if (cached) return cached;\n\n    const [plantInstance, careHistory, relatedPropagations] = await queryOptimization.batchQueries([\n      () => db\n        .select()\n        .from(plantInstances)\n        .leftJoin(plants, eq(plantInstances.plantId, plants.id))\n        .where(and(\n          eq(plantInstances.id, plantInstanceId),\n          eq(plantInstances.userId, userId)\n        ))\n        .limit(1),\n      \n      () => optimizedCareQueries.getPlantCareHistory(plantInstanceId),\n      \n      () => db\n        .select()\n        .from(propagations)\n        .where(eq(propagations.parentInstanceId, plantInstanceId))\n        .orderBy(desc(propagations.dateStarted))\n    ]);\n\n    const result = {\n      plantInstance: plantInstance[0] || null,\n      careHistory,\n      relatedPropagations,\n    };\n\n    queryCache.set(cacheKey, result);\n    return result;\n  },\n};\n\n/**\n * Query performance monitoring\n */\nexport const queryPerformance = {\n  // Monitor slow queries\n  monitorQuery: async <T>(\n    queryName: string,\n    queryFn: () => Promise<T>,\n    slowThreshold: number = 1000\n  ): Promise<T> => {\n    const start = performance.now();\n    const result = await queryFn();\n    const duration = performance.now() - start;\n\n    if (duration > slowThreshold) {\n      console.warn(`Slow query detected: ${queryName} took ${duration.toFixed(2)}ms`);\n    }\n\n    if (process.env.NODE_ENV === 'development') {\n      console.log(`Query ${queryName}: ${duration.toFixed(2)}ms`);\n    }\n\n    return result;\n  },\n\n  // Clear query cache\n  clearCache: () => {\n    queryCache.clear();\n  },\n};"],
      names: ["batchQueries", "optimizedCareQueries", "optimizedPlantQueries", "optimizedPropagationQueries", "optimizedTaxonomyQueries", "queryPerformance", "queryCache", "queryOptimization", "createQueryCache", "getUserActivePlants", "userId", "limit", "offset", "cacheKey", "cached", "get", "result", "db", "select", "id", "plantInstances", "nickname", "location", "lastFertilized", "fertilizerDue", "lastRepot", "images", "createdAt", "plant", "plants", "family", "genus", "species", "cultivar", "commonName", "from", "leftJoin", "eq", "plantId", "where", "and", "isActive", "orderBy", "desc", "set", "getPlantsNeedingCare", "now", "Date", "or", "lte", "isNull", "asc", "searchPlants", "searchTerm", "searchPattern", "toLowerCase", "ilike", "getPlantStatistics", "totalPlants", "activePlants", "plantsNeedingCare", "Promise", "all", "count", "sql", "total", "active", "needingCare", "getUserPropagationsByStatus", "status", "whereConditions", "propagations", "push", "dateStarted", "sourceType", "externalSource", "externalSourceDetails", "parentInstance", "parentInstanceId", "getPropagationStatistics", "groupBy", "getPlantCareHistory", "plantInstanceId", "careHistory", "careDate", "getRecentCareActivities", "careType", "notes", "plantInstance", "searchPlantTaxonomy", "isVerified", "getPopularPlants", "usageCount", "getDashboardData", "plantStats", "recentCareActivities", "activePropagations", "propagationStats", "getPlantDetailData", "relatedPropagations", "monitorQuery", "queryName", "queryFn", "slowThreshold", "start", "performance", "duration", "console", "warn", "toFixed", "process", "env", "NODE_ENV", "log", "clearCache", "clear"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "e22e032acf6446d76cc39d1f852e6ebbc729ed17"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1l0tvsmjla = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1l0tvsmjla();
cov_1l0tvsmjla().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_1l0tvsmjla().f[0]++;
  cov_1l0tvsmjla().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_1l0tvsmjla().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_1l0tvsmjla().s[3]++;
_export(exports, {
  get batchQueries() {
    /* istanbul ignore next */
    cov_1l0tvsmjla().f[1]++;
    cov_1l0tvsmjla().s[4]++;
    return batchQueries;
  },
  get optimizedCareQueries() {
    /* istanbul ignore next */
    cov_1l0tvsmjla().f[2]++;
    cov_1l0tvsmjla().s[5]++;
    return optimizedCareQueries;
  },
  get optimizedPlantQueries() {
    /* istanbul ignore next */
    cov_1l0tvsmjla().f[3]++;
    cov_1l0tvsmjla().s[6]++;
    return optimizedPlantQueries;
  },
  get optimizedPropagationQueries() {
    /* istanbul ignore next */
    cov_1l0tvsmjla().f[4]++;
    cov_1l0tvsmjla().s[7]++;
    return optimizedPropagationQueries;
  },
  get optimizedTaxonomyQueries() {
    /* istanbul ignore next */
    cov_1l0tvsmjla().f[5]++;
    cov_1l0tvsmjla().s[8]++;
    return optimizedTaxonomyQueries;
  },
  get queryPerformance() {
    /* istanbul ignore next */
    cov_1l0tvsmjla().f[6]++;
    cov_1l0tvsmjla().s[9]++;
    return queryPerformance;
  }
});
/* istanbul ignore next */
cov_1l0tvsmjla().s[10]++;
require("server-only");
const _db =
/* istanbul ignore next */
(cov_1l0tvsmjla().s[11]++, require("."));
const _schema =
/* istanbul ignore next */
(cov_1l0tvsmjla().s[12]++, require("./schema"));
const _drizzleorm =
/* istanbul ignore next */
(cov_1l0tvsmjla().s[13]++, require("drizzle-orm"));
const _performance =
/* istanbul ignore next */
(cov_1l0tvsmjla().s[14]++, require("../utils/performance"));
// Create query cache instance
const queryCache =
/* istanbul ignore next */
(cov_1l0tvsmjla().s[15]++, _performance.queryOptimization.createQueryCache(5 * 60 * 1000)); // 5 minutes TTL
const optimizedPlantQueries =
/* istanbul ignore next */
(cov_1l0tvsmjla().s[16]++, {
  // Get user's active plants with plant taxonomy (uses user_active_idx)
  getUserActivePlants: async (userId, limit =
  /* istanbul ignore next */
  (cov_1l0tvsmjla().b[0][0]++, 50), offset =
  /* istanbul ignore next */
  (cov_1l0tvsmjla().b[1][0]++, 0)) => {
    /* istanbul ignore next */
    cov_1l0tvsmjla().f[7]++;
    const cacheKey =
    /* istanbul ignore next */
    (cov_1l0tvsmjla().s[17]++, `user_active_plants_${userId}_${limit}_${offset}`);
    const cached =
    /* istanbul ignore next */
    (cov_1l0tvsmjla().s[18]++, queryCache.get(cacheKey));
    /* istanbul ignore next */
    cov_1l0tvsmjla().s[19]++;
    if (cached) {
      /* istanbul ignore next */
      cov_1l0tvsmjla().b[2][0]++;
      cov_1l0tvsmjla().s[20]++;
      return cached;
    } else
    /* istanbul ignore next */
    {
      cov_1l0tvsmjla().b[2][1]++;
    }
    const result =
    /* istanbul ignore next */
    (cov_1l0tvsmjla().s[21]++, await _db.db.select({
      id: _schema.plantInstances.id,
      nickname: _schema.plantInstances.nickname,
      location: _schema.plantInstances.location,
      lastFertilized: _schema.plantInstances.lastFertilized,
      fertilizerDue: _schema.plantInstances.fertilizerDue,
      lastRepot: _schema.plantInstances.lastRepot,
      images: _schema.plantInstances.images,
      createdAt: _schema.plantInstances.createdAt,
      plant: {
        id: _schema.plants.id,
        family: _schema.plants.family,
        genus: _schema.plants.genus,
        species: _schema.plants.species,
        cultivar: _schema.plants.cultivar,
        commonName: _schema.plants.commonName
      }
    }).from(_schema.plantInstances).leftJoin(_schema.plants, (0, _drizzleorm.eq)(_schema.plantInstances.plantId, _schema.plants.id)).where((0, _drizzleorm.and)((0, _drizzleorm.eq)(_schema.plantInstances.userId, userId), (0, _drizzleorm.eq)(_schema.plantInstances.isActive, true))).orderBy((0, _drizzleorm.desc)(_schema.plantInstances.createdAt)).limit(limit).offset(offset));
    /* istanbul ignore next */
    cov_1l0tvsmjla().s[22]++;
    queryCache.set(cacheKey, result);
    /* istanbul ignore next */
    cov_1l0tvsmjla().s[23]++;
    return result;
  },
  // Get plants needing care (uses fertilizer_due_idx)
  getPlantsNeedingCare: async userId => {
    /* istanbul ignore next */
    cov_1l0tvsmjla().f[8]++;
    const cacheKey =
    /* istanbul ignore next */
    (cov_1l0tvsmjla().s[24]++, `plants_needing_care_${userId}`);
    const cached =
    /* istanbul ignore next */
    (cov_1l0tvsmjla().s[25]++, queryCache.get(cacheKey));
    /* istanbul ignore next */
    cov_1l0tvsmjla().s[26]++;
    if (cached) {
      /* istanbul ignore next */
      cov_1l0tvsmjla().b[3][0]++;
      cov_1l0tvsmjla().s[27]++;
      return cached;
    } else
    /* istanbul ignore next */
    {
      cov_1l0tvsmjla().b[3][1]++;
    }
    const now =
    /* istanbul ignore next */
    (cov_1l0tvsmjla().s[28]++, new Date());
    const result =
    /* istanbul ignore next */
    (cov_1l0tvsmjla().s[29]++, await _db.db.select({
      id: _schema.plantInstances.id,
      nickname: _schema.plantInstances.nickname,
      location: _schema.plantInstances.location,
      fertilizerDue: _schema.plantInstances.fertilizerDue,
      lastFertilized: _schema.plantInstances.lastFertilized,
      plant: {
        commonName: _schema.plants.commonName,
        genus: _schema.plants.genus,
        species: _schema.plants.species
      }
    }).from(_schema.plantInstances).leftJoin(_schema.plants, (0, _drizzleorm.eq)(_schema.plantInstances.plantId, _schema.plants.id)).where((0, _drizzleorm.and)((0, _drizzleorm.eq)(_schema.plantInstances.userId, userId), (0, _drizzleorm.eq)(_schema.plantInstances.isActive, true), (0, _drizzleorm.or)((0, _drizzleorm.lte)(_schema.plantInstances.fertilizerDue, now), (0, _drizzleorm.isNull)(_schema.plantInstances.fertilizerDue)))).orderBy((0, _drizzleorm.asc)(_schema.plantInstances.fertilizerDue)));
    /* istanbul ignore next */
    cov_1l0tvsmjla().s[30]++;
    queryCache.set(cacheKey, result);
    /* istanbul ignore next */
    cov_1l0tvsmjla().s[31]++;
    return result;
  },
  // Search plants with fuzzy matching (uses taxonomy indexes)
  searchPlants: async (userId, searchTerm, limit =
  /* istanbul ignore next */
  (cov_1l0tvsmjla().b[4][0]++, 20)) => {
    /* istanbul ignore next */
    cov_1l0tvsmjla().f[9]++;
    const cacheKey =
    /* istanbul ignore next */
    (cov_1l0tvsmjla().s[32]++, `search_plants_${userId}_${searchTerm}_${limit}`);
    const cached =
    /* istanbul ignore next */
    (cov_1l0tvsmjla().s[33]++, queryCache.get(cacheKey));
    /* istanbul ignore next */
    cov_1l0tvsmjla().s[34]++;
    if (cached) {
      /* istanbul ignore next */
      cov_1l0tvsmjla().b[5][0]++;
      cov_1l0tvsmjla().s[35]++;
      return cached;
    } else
    /* istanbul ignore next */
    {
      cov_1l0tvsmjla().b[5][1]++;
    }
    const searchPattern =
    /* istanbul ignore next */
    (cov_1l0tvsmjla().s[36]++, `%${searchTerm.toLowerCase()}%`);
    const result =
    /* istanbul ignore next */
    (cov_1l0tvsmjla().s[37]++, await _db.db.select({
      id: _schema.plantInstances.id,
      nickname: _schema.plantInstances.nickname,
      location: _schema.plantInstances.location,
      images: _schema.plantInstances.images,
      plant: {
        id: _schema.plants.id,
        family: _schema.plants.family,
        genus: _schema.plants.genus,
        species: _schema.plants.species,
        cultivar: _schema.plants.cultivar,
        commonName: _schema.plants.commonName
      }
    }).from(_schema.plantInstances).leftJoin(_schema.plants, (0, _drizzleorm.eq)(_schema.plantInstances.plantId, _schema.plants.id)).where((0, _drizzleorm.and)((0, _drizzleorm.eq)(_schema.plantInstances.userId, userId), (0, _drizzleorm.eq)(_schema.plantInstances.isActive, true), (0, _drizzleorm.or)((0, _drizzleorm.ilike)(_schema.plantInstances.nickname, searchPattern), (0, _drizzleorm.ilike)(_schema.plantInstances.location, searchPattern), (0, _drizzleorm.ilike)(_schema.plants.commonName, searchPattern), (0, _drizzleorm.ilike)(_schema.plants.genus, searchPattern), (0, _drizzleorm.ilike)(_schema.plants.species, searchPattern), (0, _drizzleorm.ilike)(_schema.plants.cultivar, searchPattern), (0, _drizzleorm.ilike)(_schema.plants.family, searchPattern)))).limit(limit));
    /* istanbul ignore next */
    cov_1l0tvsmjla().s[38]++;
    queryCache.set(cacheKey, result);
    /* istanbul ignore next */
    cov_1l0tvsmjla().s[39]++;
    return result;
  },
  // Get plant statistics for dashboard
  getPlantStatistics: async userId => {
    /* istanbul ignore next */
    cov_1l0tvsmjla().f[10]++;
    const cacheKey =
    /* istanbul ignore next */
    (cov_1l0tvsmjla().s[40]++, `plant_statistics_${userId}`);
    const cached =
    /* istanbul ignore next */
    (cov_1l0tvsmjla().s[41]++, queryCache.get(cacheKey));
    /* istanbul ignore next */
    cov_1l0tvsmjla().s[42]++;
    if (cached) {
      /* istanbul ignore next */
      cov_1l0tvsmjla().b[6][0]++;
      cov_1l0tvsmjla().s[43]++;
      return cached;
    } else
    /* istanbul ignore next */
    {
      cov_1l0tvsmjla().b[6][1]++;
    }
    const [totalPlants, activePlants, plantsNeedingCare] =
    /* istanbul ignore next */
    (cov_1l0tvsmjla().s[44]++, await Promise.all([
    // Total plants count
    _db.db.select({
      count: (0, _drizzleorm.sql)`count(*)`
    }).from(_schema.plantInstances).where((0, _drizzleorm.eq)(_schema.plantInstances.userId, userId)),
    // Active plants count
    _db.db.select({
      count: (0, _drizzleorm.sql)`count(*)`
    }).from(_schema.plantInstances).where((0, _drizzleorm.and)((0, _drizzleorm.eq)(_schema.plantInstances.userId, userId), (0, _drizzleorm.eq)(_schema.plantInstances.isActive, true))),
    // Plants needing care count
    _db.db.select({
      count: (0, _drizzleorm.sql)`count(*)`
    }).from(_schema.plantInstances).where((0, _drizzleorm.and)((0, _drizzleorm.eq)(_schema.plantInstances.userId, userId), (0, _drizzleorm.eq)(_schema.plantInstances.isActive, true), (0, _drizzleorm.lte)(_schema.plantInstances.fertilizerDue, new Date())))]));
    const result =
    /* istanbul ignore next */
    (cov_1l0tvsmjla().s[45]++, {
      total:
      /* istanbul ignore next */
      (cov_1l0tvsmjla().b[7][0]++, totalPlants[0]?.count) ||
      /* istanbul ignore next */
      (cov_1l0tvsmjla().b[7][1]++, 0),
      active:
      /* istanbul ignore next */
      (cov_1l0tvsmjla().b[8][0]++, activePlants[0]?.count) ||
      /* istanbul ignore next */
      (cov_1l0tvsmjla().b[8][1]++, 0),
      needingCare:
      /* istanbul ignore next */
      (cov_1l0tvsmjla().b[9][0]++, plantsNeedingCare[0]?.count) ||
      /* istanbul ignore next */
      (cov_1l0tvsmjla().b[9][1]++, 0)
    });
    /* istanbul ignore next */
    cov_1l0tvsmjla().s[46]++;
    queryCache.set(cacheKey, result);
    /* istanbul ignore next */
    cov_1l0tvsmjla().s[47]++;
    return result;
  }
});
const optimizedPropagationQueries =
/* istanbul ignore next */
(cov_1l0tvsmjla().s[48]++, {
  // Get user propagations by status (uses user_status_idx)
  getUserPropagationsByStatus: async (userId, status) => {
    /* istanbul ignore next */
    cov_1l0tvsmjla().f[11]++;
    const cacheKey =
    /* istanbul ignore next */
    (cov_1l0tvsmjla().s[49]++, `user_propagations_${userId}_${
    /* istanbul ignore next */
    (cov_1l0tvsmjla().b[10][0]++, status) ||
    /* istanbul ignore next */
    (cov_1l0tvsmjla().b[10][1]++, 'all')}`);
    const cached =
    /* istanbul ignore next */
    (cov_1l0tvsmjla().s[50]++, queryCache.get(cacheKey));
    /* istanbul ignore next */
    cov_1l0tvsmjla().s[51]++;
    if (cached) {
      /* istanbul ignore next */
      cov_1l0tvsmjla().b[11][0]++;
      cov_1l0tvsmjla().s[52]++;
      return cached;
    } else
    /* istanbul ignore next */
    {
      cov_1l0tvsmjla().b[11][1]++;
    }
    const whereConditions =
    /* istanbul ignore next */
    (cov_1l0tvsmjla().s[53]++, [(0, _drizzleorm.eq)(_schema.propagations.userId, userId)]);
    /* istanbul ignore next */
    cov_1l0tvsmjla().s[54]++;
    if (status) {
      /* istanbul ignore next */
      cov_1l0tvsmjla().b[12][0]++;
      cov_1l0tvsmjla().s[55]++;
      whereConditions.push((0, _drizzleorm.eq)(_schema.propagations.status, status));
    } else
    /* istanbul ignore next */
    {
      cov_1l0tvsmjla().b[12][1]++;
    }
    const result =
    /* istanbul ignore next */
    (cov_1l0tvsmjla().s[56]++, await _db.db.select({
      id: _schema.propagations.id,
      nickname: _schema.propagations.nickname,
      location: _schema.propagations.location,
      dateStarted: _schema.propagations.dateStarted,
      status: _schema.propagations.status,
      sourceType: _schema.propagations.sourceType,
      externalSource: _schema.propagations.externalSource,
      externalSourceDetails: _schema.propagations.externalSourceDetails,
      images: _schema.propagations.images,
      plant: {
        commonName: _schema.plants.commonName,
        genus: _schema.plants.genus,
        species: _schema.plants.species,
        cultivar: _schema.plants.cultivar
      },
      parentInstance: {
        id: _schema.plantInstances.id,
        nickname: _schema.plantInstances.nickname
      }
    }).from(_schema.propagations).leftJoin(_schema.plants, (0, _drizzleorm.eq)(_schema.propagations.plantId, _schema.plants.id)).leftJoin(_schema.plantInstances, (0, _drizzleorm.eq)(_schema.propagations.parentInstanceId, _schema.plantInstances.id)).where((0, _drizzleorm.and)(...whereConditions)).orderBy((0, _drizzleorm.desc)(_schema.propagations.dateStarted)));
    /* istanbul ignore next */
    cov_1l0tvsmjla().s[57]++;
    queryCache.set(cacheKey, result);
    /* istanbul ignore next */
    cov_1l0tvsmjla().s[58]++;
    return result;
  },
  // Get propagation statistics by source type
  getPropagationStatistics: async userId => {
    /* istanbul ignore next */
    cov_1l0tvsmjla().f[12]++;
    const cacheKey =
    /* istanbul ignore next */
    (cov_1l0tvsmjla().s[59]++, `propagation_statistics_${userId}`);
    const cached =
    /* istanbul ignore next */
    (cov_1l0tvsmjla().s[60]++, queryCache.get(cacheKey));
    /* istanbul ignore next */
    cov_1l0tvsmjla().s[61]++;
    if (cached) {
      /* istanbul ignore next */
      cov_1l0tvsmjla().b[13][0]++;
      cov_1l0tvsmjla().s[62]++;
      return cached;
    } else
    /* istanbul ignore next */
    {
      cov_1l0tvsmjla().b[13][1]++;
    }
    const result =
    /* istanbul ignore next */
    (cov_1l0tvsmjla().s[63]++, await _db.db.select({
      sourceType: _schema.propagations.sourceType,
      status: _schema.propagations.status,
      count: (0, _drizzleorm.sql)`count(*)`
    }).from(_schema.propagations).where((0, _drizzleorm.eq)(_schema.propagations.userId, userId)).groupBy(_schema.propagations.sourceType, _schema.propagations.status));
    /* istanbul ignore next */
    cov_1l0tvsmjla().s[64]++;
    queryCache.set(cacheKey, result);
    /* istanbul ignore next */
    cov_1l0tvsmjla().s[65]++;
    return result;
  }
});
const optimizedCareQueries =
/* istanbul ignore next */
(cov_1l0tvsmjla().s[66]++, {
  // Get care history for plant (uses plant_care_date_idx)
  getPlantCareHistory: async (plantInstanceId, limit =
  /* istanbul ignore next */
  (cov_1l0tvsmjla().b[14][0]++, 50)) => {
    /* istanbul ignore next */
    cov_1l0tvsmjla().f[13]++;
    const cacheKey =
    /* istanbul ignore next */
    (cov_1l0tvsmjla().s[67]++, `plant_care_history_${plantInstanceId}_${limit}`);
    const cached =
    /* istanbul ignore next */
    (cov_1l0tvsmjla().s[68]++, queryCache.get(cacheKey));
    /* istanbul ignore next */
    cov_1l0tvsmjla().s[69]++;
    if (cached) {
      /* istanbul ignore next */
      cov_1l0tvsmjla().b[15][0]++;
      cov_1l0tvsmjla().s[70]++;
      return cached;
    } else
    /* istanbul ignore next */
    {
      cov_1l0tvsmjla().b[15][1]++;
    }
    const result =
    /* istanbul ignore next */
    (cov_1l0tvsmjla().s[71]++, await _db.db.select().from(_schema.careHistory).where((0, _drizzleorm.eq)(_schema.careHistory.plantInstanceId, plantInstanceId)).orderBy((0, _drizzleorm.desc)(_schema.careHistory.careDate)).limit(limit));
    /* istanbul ignore next */
    cov_1l0tvsmjla().s[72]++;
    queryCache.set(cacheKey, result);
    /* istanbul ignore next */
    cov_1l0tvsmjla().s[73]++;
    return result;
  },
  // Get recent care activities for user (uses user_care_type_idx)
  getRecentCareActivities: async (userId, limit =
  /* istanbul ignore next */
  (cov_1l0tvsmjla().b[16][0]++, 20)) => {
    /* istanbul ignore next */
    cov_1l0tvsmjla().f[14]++;
    const cacheKey =
    /* istanbul ignore next */
    (cov_1l0tvsmjla().s[74]++, `recent_care_activities_${userId}_${limit}`);
    const cached =
    /* istanbul ignore next */
    (cov_1l0tvsmjla().s[75]++, queryCache.get(cacheKey));
    /* istanbul ignore next */
    cov_1l0tvsmjla().s[76]++;
    if (cached) {
      /* istanbul ignore next */
      cov_1l0tvsmjla().b[17][0]++;
      cov_1l0tvsmjla().s[77]++;
      return cached;
    } else
    /* istanbul ignore next */
    {
      cov_1l0tvsmjla().b[17][1]++;
    }
    const result =
    /* istanbul ignore next */
    (cov_1l0tvsmjla().s[78]++, await _db.db.select({
      id: _schema.careHistory.id,
      careType: _schema.careHistory.careType,
      careDate: _schema.careHistory.careDate,
      notes: _schema.careHistory.notes,
      plantInstance: {
        id: _schema.plantInstances.id,
        nickname: _schema.plantInstances.nickname
      },
      plant: {
        commonName: _schema.plants.commonName,
        genus: _schema.plants.genus,
        species: _schema.plants.species
      }
    }).from(_schema.careHistory).leftJoin(_schema.plantInstances, (0, _drizzleorm.eq)(_schema.careHistory.plantInstanceId, _schema.plantInstances.id)).leftJoin(_schema.plants, (0, _drizzleorm.eq)(_schema.plantInstances.plantId, _schema.plants.id)).where((0, _drizzleorm.eq)(_schema.careHistory.userId, userId)).orderBy((0, _drizzleorm.desc)(_schema.careHistory.careDate)).limit(limit));
    /* istanbul ignore next */
    cov_1l0tvsmjla().s[79]++;
    queryCache.set(cacheKey, result);
    /* istanbul ignore next */
    cov_1l0tvsmjla().s[80]++;
    return result;
  }
});
const optimizedTaxonomyQueries =
/* istanbul ignore next */
(cov_1l0tvsmjla().s[81]++, {
  // Search plant taxonomy with autocomplete (uses taxonomy indexes)
  searchPlantTaxonomy: async (searchTerm, limit =
  /* istanbul ignore next */
  (cov_1l0tvsmjla().b[18][0]++, 10)) => {
    /* istanbul ignore next */
    cov_1l0tvsmjla().f[15]++;
    const cacheKey =
    /* istanbul ignore next */
    (cov_1l0tvsmjla().s[82]++, `search_taxonomy_${searchTerm}_${limit}`);
    const cached =
    /* istanbul ignore next */
    (cov_1l0tvsmjla().s[83]++, queryCache.get(cacheKey));
    /* istanbul ignore next */
    cov_1l0tvsmjla().s[84]++;
    if (cached) {
      /* istanbul ignore next */
      cov_1l0tvsmjla().b[19][0]++;
      cov_1l0tvsmjla().s[85]++;
      return cached;
    } else
    /* istanbul ignore next */
    {
      cov_1l0tvsmjla().b[19][1]++;
    }
    const searchPattern =
    /* istanbul ignore next */
    (cov_1l0tvsmjla().s[86]++, `%${searchTerm.toLowerCase()}%`);
    const result =
    /* istanbul ignore next */
    (cov_1l0tvsmjla().s[87]++, await _db.db.select({
      id: _schema.plants.id,
      family: _schema.plants.family,
      genus: _schema.plants.genus,
      species: _schema.plants.species,
      cultivar: _schema.plants.cultivar,
      commonName: _schema.plants.commonName,
      isVerified: _schema.plants.isVerified
    }).from(_schema.plants).where((0, _drizzleorm.or)((0, _drizzleorm.ilike)(_schema.plants.commonName, searchPattern), (0, _drizzleorm.ilike)(_schema.plants.genus, searchPattern), (0, _drizzleorm.ilike)(_schema.plants.species, searchPattern), (0, _drizzleorm.ilike)(_schema.plants.cultivar, searchPattern), (0, _drizzleorm.ilike)(_schema.plants.family, searchPattern))).orderBy((0, _drizzleorm.desc)(_schema.plants.isVerified), (0, _drizzleorm.asc)(_schema.plants.commonName)).limit(limit));
    /* istanbul ignore next */
    cov_1l0tvsmjla().s[88]++;
    queryCache.set(cacheKey, result);
    /* istanbul ignore next */
    cov_1l0tvsmjla().s[89]++;
    return result;
  },
  // Get popular plants (most used in plant instances)
  getPopularPlants: async (limit =
  /* istanbul ignore next */
  (cov_1l0tvsmjla().b[20][0]++, 10)) => {
    /* istanbul ignore next */
    cov_1l0tvsmjla().f[16]++;
    const cacheKey =
    /* istanbul ignore next */
    (cov_1l0tvsmjla().s[90]++, `popular_plants_${limit}`);
    const cached =
    /* istanbul ignore next */
    (cov_1l0tvsmjla().s[91]++, queryCache.get(cacheKey));
    /* istanbul ignore next */
    cov_1l0tvsmjla().s[92]++;
    if (cached) {
      /* istanbul ignore next */
      cov_1l0tvsmjla().b[21][0]++;
      cov_1l0tvsmjla().s[93]++;
      return cached;
    } else
    /* istanbul ignore next */
    {
      cov_1l0tvsmjla().b[21][1]++;
    }
    const result =
    /* istanbul ignore next */
    (cov_1l0tvsmjla().s[94]++, await _db.db.select({
      id: _schema.plants.id,
      family: _schema.plants.family,
      genus: _schema.plants.genus,
      species: _schema.plants.species,
      cultivar: _schema.plants.cultivar,
      commonName: _schema.plants.commonName,
      usageCount: (0, _drizzleorm.sql)`count(${_schema.plantInstances.id})`
    }).from(_schema.plants).leftJoin(_schema.plantInstances, (0, _drizzleorm.eq)(_schema.plants.id, _schema.plantInstances.plantId)).groupBy(_schema.plants.id).orderBy((0, _drizzleorm.desc)((0, _drizzleorm.sql)`count(${_schema.plantInstances.id})`)).limit(limit));
    /* istanbul ignore next */
    cov_1l0tvsmjla().s[95]++;
    queryCache.set(cacheKey, result);
    /* istanbul ignore next */
    cov_1l0tvsmjla().s[96]++;
    return result;
  }
});
const batchQueries =
/* istanbul ignore next */
(cov_1l0tvsmjla().s[97]++, {
  // Get dashboard data in a single batch
  getDashboardData: async userId => {
    /* istanbul ignore next */
    cov_1l0tvsmjla().f[17]++;
    const cacheKey =
    /* istanbul ignore next */
    (cov_1l0tvsmjla().s[98]++, `dashboard_data_${userId}`);
    const cached =
    /* istanbul ignore next */
    (cov_1l0tvsmjla().s[99]++, queryCache.get(cacheKey));
    /* istanbul ignore next */
    cov_1l0tvsmjla().s[100]++;
    if (cached) {
      /* istanbul ignore next */
      cov_1l0tvsmjla().b[22][0]++;
      cov_1l0tvsmjla().s[101]++;
      return cached;
    } else
    /* istanbul ignore next */
    {
      cov_1l0tvsmjla().b[22][1]++;
    }
    const [plantStats, plantsNeedingCare, recentCareActivities, activePropagations, propagationStats] =
    /* istanbul ignore next */
    (cov_1l0tvsmjla().s[102]++, await _performance.queryOptimization.batchQueries([() => {
      /* istanbul ignore next */
      cov_1l0tvsmjla().f[18]++;
      cov_1l0tvsmjla().s[103]++;
      return optimizedPlantQueries.getPlantStatistics(userId);
    }, () => {
      /* istanbul ignore next */
      cov_1l0tvsmjla().f[19]++;
      cov_1l0tvsmjla().s[104]++;
      return optimizedPlantQueries.getPlantsNeedingCare(userId);
    }, () => {
      /* istanbul ignore next */
      cov_1l0tvsmjla().f[20]++;
      cov_1l0tvsmjla().s[105]++;
      return optimizedCareQueries.getRecentCareActivities(userId, 10);
    }, () => {
      /* istanbul ignore next */
      cov_1l0tvsmjla().f[21]++;
      cov_1l0tvsmjla().s[106]++;
      return optimizedPropagationQueries.getUserPropagationsByStatus(userId);
    }, () => {
      /* istanbul ignore next */
      cov_1l0tvsmjla().f[22]++;
      cov_1l0tvsmjla().s[107]++;
      return optimizedPropagationQueries.getPropagationStatistics(userId);
    }]));
    const result =
    /* istanbul ignore next */
    (cov_1l0tvsmjla().s[108]++, {
      plantStats,
      plantsNeedingCare,
      recentCareActivities,
      activePropagations,
      propagationStats
    });
    /* istanbul ignore next */
    cov_1l0tvsmjla().s[109]++;
    queryCache.set(cacheKey, result);
    /* istanbul ignore next */
    cov_1l0tvsmjla().s[110]++;
    return result;
  },
  // Get plant detail data in a single batch
  getPlantDetailData: async (plantInstanceId, userId) => {
    /* istanbul ignore next */
    cov_1l0tvsmjla().f[23]++;
    const cacheKey =
    /* istanbul ignore next */
    (cov_1l0tvsmjla().s[111]++, `plant_detail_data_${plantInstanceId}_${userId}`);
    const cached =
    /* istanbul ignore next */
    (cov_1l0tvsmjla().s[112]++, queryCache.get(cacheKey));
    /* istanbul ignore next */
    cov_1l0tvsmjla().s[113]++;
    if (cached) {
      /* istanbul ignore next */
      cov_1l0tvsmjla().b[23][0]++;
      cov_1l0tvsmjla().s[114]++;
      return cached;
    } else
    /* istanbul ignore next */
    {
      cov_1l0tvsmjla().b[23][1]++;
    }
    const [plantInstance, careHistory, relatedPropagations] =
    /* istanbul ignore next */
    (cov_1l0tvsmjla().s[115]++, await _performance.queryOptimization.batchQueries([() => {
      /* istanbul ignore next */
      cov_1l0tvsmjla().f[24]++;
      cov_1l0tvsmjla().s[116]++;
      return _db.db.select().from(_schema.plantInstances).leftJoin(_schema.plants, (0, _drizzleorm.eq)(_schema.plantInstances.plantId, _schema.plants.id)).where((0, _drizzleorm.and)((0, _drizzleorm.eq)(_schema.plantInstances.id, plantInstanceId), (0, _drizzleorm.eq)(_schema.plantInstances.userId, userId))).limit(1);
    }, () => {
      /* istanbul ignore next */
      cov_1l0tvsmjla().f[25]++;
      cov_1l0tvsmjla().s[117]++;
      return optimizedCareQueries.getPlantCareHistory(plantInstanceId);
    }, () => {
      /* istanbul ignore next */
      cov_1l0tvsmjla().f[26]++;
      cov_1l0tvsmjla().s[118]++;
      return _db.db.select().from(_schema.propagations).where((0, _drizzleorm.eq)(_schema.propagations.parentInstanceId, plantInstanceId)).orderBy((0, _drizzleorm.desc)(_schema.propagations.dateStarted));
    }]));
    const result =
    /* istanbul ignore next */
    (cov_1l0tvsmjla().s[119]++, {
      plantInstance:
      /* istanbul ignore next */
      (cov_1l0tvsmjla().b[24][0]++, plantInstance[0]) ||
      /* istanbul ignore next */
      (cov_1l0tvsmjla().b[24][1]++, null),
      careHistory,
      relatedPropagations
    });
    /* istanbul ignore next */
    cov_1l0tvsmjla().s[120]++;
    queryCache.set(cacheKey, result);
    /* istanbul ignore next */
    cov_1l0tvsmjla().s[121]++;
    return result;
  }
});
const queryPerformance =
/* istanbul ignore next */
(cov_1l0tvsmjla().s[122]++, {
  // Monitor slow queries
  monitorQuery: async (queryName, queryFn, slowThreshold =
  /* istanbul ignore next */
  (cov_1l0tvsmjla().b[25][0]++, 1000)) => {
    /* istanbul ignore next */
    cov_1l0tvsmjla().f[27]++;
    const start =
    /* istanbul ignore next */
    (cov_1l0tvsmjla().s[123]++, performance.now());
    const result =
    /* istanbul ignore next */
    (cov_1l0tvsmjla().s[124]++, await queryFn());
    const duration =
    /* istanbul ignore next */
    (cov_1l0tvsmjla().s[125]++, performance.now() - start);
    /* istanbul ignore next */
    cov_1l0tvsmjla().s[126]++;
    if (duration > slowThreshold) {
      /* istanbul ignore next */
      cov_1l0tvsmjla().b[26][0]++;
      cov_1l0tvsmjla().s[127]++;
      console.warn(`Slow query detected: ${queryName} took ${duration.toFixed(2)}ms`);
    } else
    /* istanbul ignore next */
    {
      cov_1l0tvsmjla().b[26][1]++;
    }
    cov_1l0tvsmjla().s[128]++;
    if (process.env.NODE_ENV === 'development') {
      /* istanbul ignore next */
      cov_1l0tvsmjla().b[27][0]++;
      cov_1l0tvsmjla().s[129]++;
      console.log(`Query ${queryName}: ${duration.toFixed(2)}ms`);
    } else
    /* istanbul ignore next */
    {
      cov_1l0tvsmjla().b[27][1]++;
    }
    cov_1l0tvsmjla().s[130]++;
    return result;
  },
  // Clear query cache
  clearCache: () => {
    /* istanbul ignore next */
    cov_1l0tvsmjla().f[28]++;
    cov_1l0tvsmjla().s[131]++;
    queryCache.clear();
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,