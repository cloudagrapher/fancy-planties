{"version":3,"sources":["/Users/stefanbekker/projects/fancy-planties/src/lib/services/email.ts"],"sourcesContent":["import 'server-only';\n\nimport { Resend } from 'resend';\n\nexport interface EmailService {\n  sendVerificationEmail(email: string, code: string, name: string): Promise<boolean>;\n}\n\nexport interface EmailConfig {\n  apiKey: string;\n  fromEmail: string;\n  fromName: string;\n}\n\nexport class EmailServiceError extends Error {\n  constructor(\n    message: string,\n    public code: 'QUOTA_EXCEEDED' | 'API_ERROR' | 'NETWORK_ERROR' | 'INVALID_EMAIL'\n  ) {\n    super(message);\n    this.name = 'EmailServiceError';\n  }\n}\n\nexport class ResendEmailService implements EmailService {\n  private resend: Resend;\n  private config: EmailConfig;\n\n  constructor(config: EmailConfig) {\n    this.resend = new Resend(config.apiKey);\n    this.config = config;\n  }\n\n  async sendVerificationEmail(email: string, code: string, name: string): Promise<boolean> {\n    return await this.sendEmailWithRetry(email, code, name, 3);\n  }\n\n  private async sendEmailWithRetry(\n    email: string,\n    code: string,\n    name: string,\n    maxRetries: number\n  ): Promise<boolean> {\n    let lastError: Error | null = null;\n\n    for (let attempt = 1; attempt <= maxRetries; attempt++) {\n      try {\n        const { data, error } = await this.resend.emails.send({\n          from: `${this.config.fromName} <${this.config.fromEmail}>`,\n          to: [email],\n          subject: 'Verify your email address',\n          html: this.generateVerificationEmailTemplate(code, name),\n        });\n\n        if (error) {\n          throw new EmailServiceError(\n            `Resend API error: ${error.message}`,\n            this.mapResendErrorCode(error)\n          );\n        }\n\n        if (data?.id) {\n          // Log success in development\n          if (process.env.NODE_ENV === 'development') {\n            console.log(`‚úÖ Verification email sent to ${email} with code: ${code}`);\n          }\n          return true;\n        }\n\n        throw new EmailServiceError('No email ID returned from Resend', 'API_ERROR');\n\n      } catch (error) {\n        lastError = error instanceof Error ? error : new Error(String(error));\n        \n        // Log attempt in development\n        if (process.env.NODE_ENV === 'development') {\n          console.log(`‚ùå Email send attempt ${attempt}/${maxRetries} failed:`, lastError.message);\n        }\n\n        // Don't retry on certain errors\n        if (error instanceof EmailServiceError && \n            (error.code === 'INVALID_EMAIL' || error.code === 'QUOTA_EXCEEDED')) {\n          throw error;\n        }\n\n        // Wait before retry with exponential backoff\n        if (attempt < maxRetries) {\n          const delay = Math.pow(2, attempt - 1) * 1000; // 1s, 2s, 4s\n          await new Promise(resolve => setTimeout(resolve, delay));\n        }\n      }\n    }\n\n    throw lastError || new EmailServiceError('All retry attempts failed', 'API_ERROR');\n  }\n\n  private mapResendErrorCode(error: any): EmailServiceError['code'] {\n    const message = error.message?.toLowerCase() || '';\n    \n    if (message.includes('quota') || message.includes('limit')) {\n      return 'QUOTA_EXCEEDED';\n    }\n    if (message.includes('invalid') && message.includes('email')) {\n      return 'INVALID_EMAIL';\n    }\n    if (message.includes('network') || message.includes('timeout')) {\n      return 'NETWORK_ERROR';\n    }\n    \n    return 'API_ERROR';\n  }\n\n  private generateVerificationEmailTemplate(code: string, name: string): string {\n    return `\n      <!DOCTYPE html>\n      <html lang=\"en\">\n      <head>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>Verify Your Email</title>\n        <style>\n          body {\n            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n            line-height: 1.6;\n            color: #333;\n            max-width: 600px;\n            margin: 0 auto;\n            padding: 20px;\n            background-color: #f9f9f9;\n          }\n          .container {\n            background: white;\n            padding: 40px;\n            border-radius: 8px;\n            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n          }\n          .header {\n            text-align: center;\n            margin-bottom: 30px;\n          }\n          .logo {\n            font-size: 24px;\n            font-weight: bold;\n            color: #22c55e;\n            margin-bottom: 10px;\n          }\n          .code-container {\n            background: #f8f9fa;\n            border: 2px dashed #22c55e;\n            border-radius: 8px;\n            padding: 20px;\n            text-align: center;\n            margin: 30px 0;\n          }\n          .verification-code {\n            font-size: 32px;\n            font-weight: bold;\n            letter-spacing: 8px;\n            color: #22c55e;\n            font-family: 'Courier New', monospace;\n          }\n          .instructions {\n            background: #e7f3ff;\n            border-left: 4px solid #2196f3;\n            padding: 15px;\n            margin: 20px 0;\n          }\n          .footer {\n            text-align: center;\n            margin-top: 30px;\n            padding-top: 20px;\n            border-top: 1px solid #eee;\n            color: #666;\n            font-size: 14px;\n          }\n          .warning {\n            background: #fff3cd;\n            border: 1px solid #ffeaa7;\n            border-radius: 4px;\n            padding: 12px;\n            margin: 20px 0;\n            color: #856404;\n          }\n        </style>\n      </head>\n      <body>\n        <div class=\"container\">\n          <div class=\"header\">\n            <div class=\"logo\">üå± Fancy Planties</div>\n            <h1>Verify Your Email Address</h1>\n          </div>\n          \n          <p>Hi ${name},</p>\n          \n          <p>Welcome to Fancy Planties! To complete your account setup and start tracking your plants, please verify your email address using the code below:</p>\n          \n          <div class=\"code-container\">\n            <div class=\"verification-code\">${code}</div>\n          </div>\n          \n          <div class=\"instructions\">\n            <strong>How to verify:</strong>\n            <ol>\n              <li>Return to the Fancy Planties verification page</li>\n              <li>Enter the 6-digit code above</li>\n              <li>Click \"Verify Email\" to complete your registration</li>\n            </ol>\n          </div>\n          \n          <div class=\"warning\">\n            <strong>‚è∞ Important:</strong> This verification code will expire in 10 minutes for security reasons. If you need a new code, you can request one on the verification page.\n          </div>\n          \n          <p>If you didn't create an account with Fancy Planties, you can safely ignore this email.</p>\n          \n          <div class=\"footer\">\n            <p>Happy planting! üåø</p>\n            <p><strong>The Fancy Planties Team</strong></p>\n            <hr style=\"margin: 20px 0; border: none; border-top: 1px solid #eee;\">\n            <p style=\"font-size: 12px; color: #999;\">\n              This is an automated message. Please do not reply to this email.<br>\n              If you have questions, visit our support page or contact us through the app.\n            </p>\n          </div>\n        </div>\n      </body>\n      </html>\n    `;\n  }\n}\n\n// Factory function to create email service instance\nexport function createEmailService(): EmailService {\n  const config: EmailConfig = {\n    apiKey: process.env.RESEND_API_KEY!,\n    fromEmail: process.env.FROM_EMAIL || 'send.mail.fancy-planties.cloudagrapher.com',\n    fromName: process.env.FROM_NAME || 'Fancy Planties',\n  };\n\n  if (!config.apiKey) {\n    throw new Error('RESEND_API_KEY environment variable is required');\n  }\n\n  return new ResendEmailService(config);\n}"],"names":["EmailServiceError","ResendEmailService","createEmailService","Error","message","code","name","config","resend","Resend","apiKey","sendVerificationEmail","email","sendEmailWithRetry","maxRetries","lastError","attempt","data","error","emails","send","from","fromName","fromEmail","to","subject","html","generateVerificationEmailTemplate","mapResendErrorCode","id","process","env","NODE_ENV","console","log","String","delay","Math","pow","Promise","resolve","setTimeout","toLowerCase","includes","RESEND_API_KEY","FROM_EMAIL","FROM_NAME"],"mappings":";;;;;;;;;;;QAcaA;eAAAA;;QAUAC;eAAAA;;QAgNGC;eAAAA;;;QAxOT;wBAEgB;AAYhB,MAAMF,0BAA0BG;IACrC,YACEC,OAAe,EACf,AAAOC,IAAwE,CAC/E;QACA,KAAK,CAACD,eAFCC,OAAAA;QAGP,IAAI,CAACC,IAAI,GAAG;IACd;AACF;AAEO,MAAML;IAIX,YAAYM,MAAmB,CAAE;QAC/B,IAAI,CAACC,MAAM,GAAG,IAAIC,cAAM,CAACF,OAAOG,MAAM;QACtC,IAAI,CAACH,MAAM,GAAGA;IAChB;IAEA,MAAMI,sBAAsBC,KAAa,EAAEP,IAAY,EAAEC,IAAY,EAAoB;QACvF,OAAO,MAAM,IAAI,CAACO,kBAAkB,CAACD,OAAOP,MAAMC,MAAM;IAC1D;IAEA,MAAcO,mBACZD,KAAa,EACbP,IAAY,EACZC,IAAY,EACZQ,UAAkB,EACA;QAClB,IAAIC,YAA0B;QAE9B,IAAK,IAAIC,UAAU,GAAGA,WAAWF,YAAYE,UAAW;YACtD,IAAI;gBACF,MAAM,EAAEC,IAAI,EAAEC,KAAK,EAAE,GAAG,MAAM,IAAI,CAACV,MAAM,CAACW,MAAM,CAACC,IAAI,CAAC;oBACpDC,MAAM,GAAG,IAAI,CAACd,MAAM,CAACe,QAAQ,CAAC,EAAE,EAAE,IAAI,CAACf,MAAM,CAACgB,SAAS,CAAC,CAAC,CAAC;oBAC1DC,IAAI;wBAACZ;qBAAM;oBACXa,SAAS;oBACTC,MAAM,IAAI,CAACC,iCAAiC,CAACtB,MAAMC;gBACrD;gBAEA,IAAIY,OAAO;oBACT,MAAM,IAAIlB,kBACR,CAAC,kBAAkB,EAAEkB,MAAMd,OAAO,EAAE,EACpC,IAAI,CAACwB,kBAAkB,CAACV;gBAE5B;gBAEA,IAAID,MAAMY,IAAI;oBACZ,6BAA6B;oBAC7B,IAAIC,QAAQC,GAAG,CAACC,QAAQ,KAAK,eAAe;wBAC1CC,QAAQC,GAAG,CAAC,CAAC,6BAA6B,EAAEtB,MAAM,YAAY,EAAEP,MAAM;oBACxE;oBACA,OAAO;gBACT;gBAEA,MAAM,IAAIL,kBAAkB,oCAAoC;YAElE,EAAE,OAAOkB,OAAO;gBACdH,YAAYG,iBAAiBf,QAAQe,QAAQ,IAAIf,MAAMgC,OAAOjB;gBAE9D,6BAA6B;gBAC7B,IAAIY,QAAQC,GAAG,CAACC,QAAQ,KAAK,eAAe;oBAC1CC,QAAQC,GAAG,CAAC,CAAC,qBAAqB,EAAElB,QAAQ,CAAC,EAAEF,WAAW,QAAQ,CAAC,EAAEC,UAAUX,OAAO;gBACxF;gBAEA,gCAAgC;gBAChC,IAAIc,iBAAiBlB,qBAChBkB,CAAAA,MAAMb,IAAI,KAAK,mBAAmBa,MAAMb,IAAI,KAAK,gBAAe,GAAI;oBACvE,MAAMa;gBACR;gBAEA,6CAA6C;gBAC7C,IAAIF,UAAUF,YAAY;oBACxB,MAAMsB,QAAQC,KAAKC,GAAG,CAAC,GAAGtB,UAAU,KAAK,MAAM,aAAa;oBAC5D,MAAM,IAAIuB,QAAQC,CAAAA,UAAWC,WAAWD,SAASJ;gBACnD;YACF;QACF;QAEA,MAAMrB,aAAa,IAAIf,kBAAkB,6BAA6B;IACxE;IAEQ4B,mBAAmBV,KAAU,EAA6B;QAChE,MAAMd,UAAUc,MAAMd,OAAO,EAAEsC,iBAAiB;QAEhD,IAAItC,QAAQuC,QAAQ,CAAC,YAAYvC,QAAQuC,QAAQ,CAAC,UAAU;YAC1D,OAAO;QACT;QACA,IAAIvC,QAAQuC,QAAQ,CAAC,cAAcvC,QAAQuC,QAAQ,CAAC,UAAU;YAC5D,OAAO;QACT;QACA,IAAIvC,QAAQuC,QAAQ,CAAC,cAAcvC,QAAQuC,QAAQ,CAAC,YAAY;YAC9D,OAAO;QACT;QAEA,OAAO;IACT;IAEQhB,kCAAkCtB,IAAY,EAAEC,IAAY,EAAU;QAC5E,OAAO,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gBA+EI,EAAEA,KAAK;;;;;2CAKoB,EAAED,KAAK;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA8B9C,CAAC;IACH;AACF;AAGO,SAASH;IACd,MAAMK,SAAsB;QAC1BG,QAAQoB,QAAQC,GAAG,CAACa,cAAc;QAClCrB,WAAWO,QAAQC,GAAG,CAACc,UAAU,IAAI;QACrCvB,UAAUQ,QAAQC,GAAG,CAACe,SAAS,IAAI;IACrC;IAEA,IAAI,CAACvC,OAAOG,MAAM,EAAE;QAClB,MAAM,IAAIP,MAAM;IAClB;IAEA,OAAO,IAAIF,mBAAmBM;AAChC"}