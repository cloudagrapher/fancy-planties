{"version":3,"sources":["/Users/stefanbekker/projects/fancy-planties/src/lib/utils/__tests__/email-errors.test.ts"],"sourcesContent":["import { EmailServiceError } from '@/lib/services/email';\nimport { getEmailErrorMessage, shouldRetryEmailOperation } from '../email-errors';\n\ndescribe('Email Error Utilities', () => {\n  describe('getEmailErrorMessage', () => {\n    it('should return specific message for quota exceeded error', () => {\n      const error = new EmailServiceError('Quota exceeded', 'QUOTA_EXCEEDED');\n      const message = getEmailErrorMessage(error);\n      \n      expect(message).toContain('temporarily unavailable');\n    });\n\n    it('should return specific message for invalid email error', () => {\n      const error = new EmailServiceError('Invalid email', 'INVALID_EMAIL');\n      const message = getEmailErrorMessage(error);\n      \n      expect(message).toContain('email address appears to be invalid');\n    });\n\n    it('should return specific message for network error', () => {\n      const error = new EmailServiceError('Network timeout', 'NETWORK_ERROR');\n      const message = getEmailErrorMessage(error);\n      \n      expect(message).toContain('Network error occurred');\n    });\n\n    it('should return generic message for API error', () => {\n      const error = new EmailServiceError('API error', 'API_ERROR');\n      const message = getEmailErrorMessage(error);\n      \n      expect(message).toContain('Unable to send verification email');\n    });\n\n    it('should return generic message for regular Error', () => {\n      const error = new Error('Some error');\n      const message = getEmailErrorMessage(error);\n      \n      expect(message).toContain('Unable to send verification email');\n    });\n\n    it('should return generic message for unknown error', () => {\n      const message = getEmailErrorMessage('string error');\n      \n      expect(message).toContain('An unexpected error occurred');\n    });\n  });\n\n  describe('shouldRetryEmailOperation', () => {\n    it('should not retry for invalid email error', () => {\n      const error = new EmailServiceError('Invalid email', 'INVALID_EMAIL');\n      \n      expect(shouldRetryEmailOperation(error)).toBe(false);\n    });\n\n    it('should not retry for quota exceeded error', () => {\n      const error = new EmailServiceError('Quota exceeded', 'QUOTA_EXCEEDED');\n      \n      expect(shouldRetryEmailOperation(error)).toBe(false);\n    });\n\n    it('should retry for network error', () => {\n      const error = new EmailServiceError('Network error', 'NETWORK_ERROR');\n      \n      expect(shouldRetryEmailOperation(error)).toBe(true);\n    });\n\n    it('should retry for API error', () => {\n      const error = new EmailServiceError('API error', 'API_ERROR');\n      \n      expect(shouldRetryEmailOperation(error)).toBe(true);\n    });\n\n    it('should retry for regular Error', () => {\n      const error = new Error('Some error');\n      \n      expect(shouldRetryEmailOperation(error)).toBe(true);\n    });\n  });\n});"],"names":["describe","it","error","EmailServiceError","message","getEmailErrorMessage","expect","toContain","Error","shouldRetryEmailOperation","toBe"],"mappings":";;;;uBAAkC;6BAC8B;AAEhEA,SAAS,yBAAyB;IAChCA,SAAS,wBAAwB;QAC/BC,GAAG,2DAA2D;YAC5D,MAAMC,QAAQ,IAAIC,wBAAiB,CAAC,kBAAkB;YACtD,MAAMC,UAAUC,IAAAA,iCAAoB,EAACH;YAErCI,OAAOF,SAASG,SAAS,CAAC;QAC5B;QAEAN,GAAG,0DAA0D;YAC3D,MAAMC,QAAQ,IAAIC,wBAAiB,CAAC,iBAAiB;YACrD,MAAMC,UAAUC,IAAAA,iCAAoB,EAACH;YAErCI,OAAOF,SAASG,SAAS,CAAC;QAC5B;QAEAN,GAAG,oDAAoD;YACrD,MAAMC,QAAQ,IAAIC,wBAAiB,CAAC,mBAAmB;YACvD,MAAMC,UAAUC,IAAAA,iCAAoB,EAACH;YAErCI,OAAOF,SAASG,SAAS,CAAC;QAC5B;QAEAN,GAAG,+CAA+C;YAChD,MAAMC,QAAQ,IAAIC,wBAAiB,CAAC,aAAa;YACjD,MAAMC,UAAUC,IAAAA,iCAAoB,EAACH;YAErCI,OAAOF,SAASG,SAAS,CAAC;QAC5B;QAEAN,GAAG,mDAAmD;YACpD,MAAMC,QAAQ,IAAIM,MAAM;YACxB,MAAMJ,UAAUC,IAAAA,iCAAoB,EAACH;YAErCI,OAAOF,SAASG,SAAS,CAAC;QAC5B;QAEAN,GAAG,mDAAmD;YACpD,MAAMG,UAAUC,IAAAA,iCAAoB,EAAC;YAErCC,OAAOF,SAASG,SAAS,CAAC;QAC5B;IACF;IAEAP,SAAS,6BAA6B;QACpCC,GAAG,4CAA4C;YAC7C,MAAMC,QAAQ,IAAIC,wBAAiB,CAAC,iBAAiB;YAErDG,OAAOG,IAAAA,sCAAyB,EAACP,QAAQQ,IAAI,CAAC;QAChD;QAEAT,GAAG,6CAA6C;YAC9C,MAAMC,QAAQ,IAAIC,wBAAiB,CAAC,kBAAkB;YAEtDG,OAAOG,IAAAA,sCAAyB,EAACP,QAAQQ,IAAI,CAAC;QAChD;QAEAT,GAAG,kCAAkC;YACnC,MAAMC,QAAQ,IAAIC,wBAAiB,CAAC,iBAAiB;YAErDG,OAAOG,IAAAA,sCAAyB,EAACP,QAAQQ,IAAI,CAAC;QAChD;QAEAT,GAAG,8BAA8B;YAC/B,MAAMC,QAAQ,IAAIC,wBAAiB,CAAC,aAAa;YAEjDG,OAAOG,IAAAA,sCAAyB,EAACP,QAAQQ,IAAI,CAAC;QAChD;QAEAT,GAAG,kCAAkC;YACnC,MAAMC,QAAQ,IAAIM,MAAM;YAExBF,OAAOG,IAAAA,sCAAyB,EAACP,QAAQQ,IAAI,CAAC;QAChD;IACF;AACF"}