{"version":3,"names":["cov_p551prev4","actualCoverage","s","POST","request","f","user","_server1","validateRequest","b","_server","NextResponse","json","error","status","body","validatedData","_plantschemas","bulkPlantInstanceOperationSchema","parse","plantInstances","Promise","all","plantInstanceIds","map","id","_plantinstances","PlantInstanceQueries","getEnhancedById","unauthorizedIds","notFoundIds","forEach","instance","index","push","userId","length","join","result","bulkOperation","console","Error","message","includes","details"],"sources":["/Users/stefanbekker/projects/fancy-planties/src/app/api/plant-instances/bulk/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { PlantInstanceQueries } from '@/lib/db/queries/plant-instances';\nimport { bulkPlantInstanceOperationSchema } from '@/lib/validation/plant-schemas';\nimport { validateRequest } from '@/lib/auth/server';\n\n// POST /api/plant-instances/bulk - Perform bulk operations on plant instances\nexport async function POST(request: NextRequest) {\n  try {\n    const { user } = await validateRequest();\n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const body = await request.json();\n    \n    // Validate bulk operation data\n    const validatedData = bulkPlantInstanceOperationSchema.parse(body);\n    \n    // Verify that all plant instances belong to the current user\n    const plantInstances = await Promise.all(\n      validatedData.plantInstanceIds.map(id => PlantInstanceQueries.getEnhancedById(id))\n    );\n\n    // Check for non-existent or unauthorized plant instances\n    const unauthorizedIds: number[] = [];\n    const notFoundIds: number[] = [];\n\n    plantInstances.forEach((instance, index) => {\n      const id = validatedData.plantInstanceIds[index];\n      if (!instance) {\n        notFoundIds.push(id);\n      } else if (instance.userId !== user.id) {\n        unauthorizedIds.push(id);\n      }\n    });\n\n    if (notFoundIds.length > 0) {\n      return NextResponse.json(\n        { error: `Plant instances not found: ${notFoundIds.join(', ')}` },\n        { status: 404 }\n      );\n    }\n\n    if (unauthorizedIds.length > 0) {\n      return NextResponse.json(\n        { error: `Unauthorized access to plant instances: ${unauthorizedIds.join(', ')}` },\n        { status: 403 }\n      );\n    }\n\n    // Perform bulk operation\n    const result = await PlantInstanceQueries.bulkOperation(validatedData);\n    \n    return NextResponse.json(result);\n  } catch (error) {\n    console.error('Failed to perform bulk operation:', error);\n    \n    if (error instanceof Error && error.message.includes('validation')) {\n      return NextResponse.json(\n        { error: 'Invalid bulk operation data', details: error.message },\n        { status: 400 }\n      );\n    }\n    \n    return NextResponse.json(\n      { error: 'Failed to perform bulk operation' },\n      { status: 500 }\n    );\n  }\n}"],"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","ignoreList":[]}