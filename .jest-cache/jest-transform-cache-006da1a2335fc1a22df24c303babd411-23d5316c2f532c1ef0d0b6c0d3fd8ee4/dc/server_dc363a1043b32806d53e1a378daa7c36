b7d5937e4cdce7182977076c53bf30a9
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get cleanupExpiredSessions () {
        return cleanupExpiredSessions;
    },
    get clearSessionCookie () {
        return clearSessionCookie;
    },
    get getAuthSession () {
        return getAuthSession;
    },
    get isAuthenticated () {
        return isAuthenticated;
    },
    get isEmailVerified () {
        return isEmailVerified;
    },
    get redirectIfAuthenticated () {
        return redirectIfAuthenticated;
    },
    get requireAuthSession () {
        return requireAuthSession;
    },
    get requireVerifiedSession () {
        return requireVerifiedSession;
    },
    get setSessionCookie () {
        return setSessionCookie;
    },
    get validateRequest () {
        return validateRequest;
    },
    get validateVerifiedRequest () {
        return validateVerifiedRequest;
    }
});
require("server-only");
const _headers = require("next/headers");
const _navigation = require("next/navigation");
const _lucia = require("./lucia");
const _react = require("react");
const _index = require("./index");
async function setSessionCookie(sessionId) {
    const sessionCookie = _lucia.lucia.createSessionCookie(sessionId);
    (await (0, _headers.cookies)()).set(sessionCookie.name, sessionCookie.value, sessionCookie.attributes);
}
async function clearSessionCookie() {
    const sessionCookie = _lucia.lucia.createBlankSessionCookie();
    (await (0, _headers.cookies)()).set(sessionCookie.name, sessionCookie.value, sessionCookie.attributes);
}
const validateRequest = (0, _react.cache)(async ()=>{
    const sessionId = (await (0, _headers.cookies)()).get(_lucia.lucia.sessionCookieName)?.value ?? null;
    if (!sessionId) {
        return {
            user: null,
            session: null
        };
    }
    const result = await _lucia.lucia.validateSession(sessionId);
    // Next.js throws when you attempt to set cookie when rendering page
    try {
        if (result.session && result.session.fresh) {
            const sessionCookie = _lucia.lucia.createSessionCookie(result.session.id);
            (await (0, _headers.cookies)()).set(sessionCookie.name, sessionCookie.value, sessionCookie.attributes);
        }
        if (!result.session) {
            const sessionCookie = _lucia.lucia.createBlankSessionCookie();
            (await (0, _headers.cookies)()).set(sessionCookie.name, sessionCookie.value, sessionCookie.attributes);
        }
    } catch  {
    // Ignore cookie setting errors in server components
    }
    // Convert Lucia result to our expected format
    if (result.user && result.session) {
        // Get full user data from database
        const fullUser = await (0, _index.getUserById)(parseInt(result.user.id));
        if (!fullUser) {
            return {
                user: null,
                session: null
            };
        }
        return {
            user: fullUser,
            session: {
                id: result.session.id,
                userId: parseInt(result.user.id),
                expiresAt: result.session.expiresAt
            }
        };
    }
    return {
        user: null,
        session: null
    };
});
async function getAuthSession() {
    return await validateRequest();
}
async function requireAuthSession(redirectTo = '/auth/signin') {
    const { user, session } = await validateRequest();
    if (!user || !session) {
        (0, _navigation.redirect)(redirectTo);
    }
    return {
        user,
        session
    };
}
async function requireVerifiedSession(redirectTo = '/auth/signin') {
    const { user, session } = await validateRequest();
    if (!user || !session) {
        (0, _navigation.redirect)(redirectTo);
    }
    if (!user.isEmailVerified) {
        (0, _navigation.redirect)('/auth/verify-email');
    }
    return {
        user,
        session
    };
}
async function isEmailVerified() {
    const { user } = await validateRequest();
    return !!(user && user.isEmailVerified);
}
async function isAuthenticated() {
    const { user, session } = await validateRequest();
    return !!(user && session);
}
async function validateVerifiedRequest() {
    const { user, session } = await validateRequest();
    if (!user || !session) {
        return {
            user: null,
            session: null,
            error: 'Unauthorized'
        };
    }
    if (!user.isEmailVerified) {
        return {
            user: null,
            session: null,
            error: 'Email verification required'
        };
    }
    return {
        user,
        session
    };
}
async function redirectIfAuthenticated(redirectTo = '/dashboard') {
    const { user, session } = await validateRequest();
    if (user && session) {
        (0, _navigation.redirect)(redirectTo);
    }
}
async function cleanupExpiredSessions() {
    try {
        // This would typically be run as a background job
        // For now, we'll rely on Lucia's built-in cleanup
        console.log('Session cleanup would run here');
    } catch (error) {
        console.error('Session cleanup error:', error);
    }
}

//# sourceMappingURL=data:application/json;base64,