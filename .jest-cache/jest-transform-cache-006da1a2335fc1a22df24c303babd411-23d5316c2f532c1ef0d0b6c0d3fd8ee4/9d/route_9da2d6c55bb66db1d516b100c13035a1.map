{"version":3,"sources":["/Users/stefanbekker/projects/fancy-planties/src/app/api/admin/email-verification-monitor/route.ts"],"sourcesContent":["import 'server-only';\nimport { NextRequest, NextResponse } from 'next/server';\nimport { emailVerificationCleanupService } from '@/lib/services/email-verification-cleanup';\nimport { emailServiceMonitor } from '@/lib/services/email-service-monitor';\nimport { requireAuth } from '@/lib/auth/middleware';\n\n/**\n * GET /api/admin/email-verification-monitor\n * \n * Get comprehensive monitoring data for the email verification system.\n * This endpoint provides detailed statistics about:\n * - Email service performance and quota usage\n * - Verification code statistics\n * - Rate limiting status\n * - System health indicators\n * \n * This endpoint should be protected and only accessible to administrators.\n */\nexport async function GET(request: NextRequest) {\n  try {\n    // Require authentication (in a real app, you'd also check for admin role)\n    const authResult = await requireAuth();\n    if (!authResult) {\n      return NextResponse.json(\n        { error: 'Authentication required' },\n        { status: 401 }\n      );\n    }\n    const { user } = authResult;\n    \n    // Get comprehensive system status\n    const systemStatus = await emailVerificationCleanupService.getSystemStatus();\n    \n    // Get detailed email service statistics\n    const emailStats = emailServiceMonitor.getStats();\n    const emailHealth = emailServiceMonitor.getHealthStatus();\n    const recentEvents = emailServiceMonitor.getRecentEvents(50);\n    const errorSummary = emailServiceMonitor.getErrorSummary();\n    \n    // Get cleanup statistics\n    const cleanupStats = emailVerificationCleanupService.getCleanupStats();\n    \n    const monitoringData = {\n      timestamp: Date.now(),\n      systemStatus,\n      emailService: {\n        stats: emailStats,\n        health: emailHealth,\n        recentEvents,\n        errorSummary,\n        quotaWarning: emailServiceMonitor.isQuotaNearLimit(0.8),\n        quotaCritical: emailServiceMonitor.isQuotaNearLimit(0.95),\n      },\n      cleanup: cleanupStats,\n      alerts: generateAlerts(systemStatus, emailHealth),\n    };\n    \n    return NextResponse.json(monitoringData);\n    \n  } catch (error) {\n    console.error('Error fetching email verification monitoring data:', error);\n    \n    return NextResponse.json(\n      { \n        error: 'Failed to fetch monitoring data',\n        details: error instanceof Error ? error.message : 'Unknown error'\n      },\n      { status: 500 }\n    );\n  }\n}\n\n/**\n * POST /api/admin/email-verification-monitor\n * \n * Perform administrative actions on the email verification system:\n * - Force cleanup\n * - Reset email service statistics\n * - Get detailed error reports\n */\nexport async function POST(request: NextRequest) {\n  try {\n    // Require authentication (in a real app, you'd also check for admin role)\n    const authResult = await requireAuth();\n    if (!authResult) {\n      return NextResponse.json(\n        { error: 'Authentication required' },\n        { status: 401 }\n      );\n    }\n    const { user } = authResult;\n    \n    const body = await request.json();\n    const { action } = body;\n    \n    switch (action) {\n      case 'force-cleanup':\n        const cleanupResult = await emailVerificationCleanupService.forceCleanup();\n        return NextResponse.json({\n          success: true,\n          message: 'Cleanup completed successfully',\n          result: cleanupResult,\n        });\n        \n      case 'reset-email-stats':\n        emailServiceMonitor.forceReset();\n        return NextResponse.json({\n          success: true,\n          message: 'Email service statistics reset successfully',\n        });\n        \n      case 'get-error-details':\n        const errorDetails = emailServiceMonitor.getErrorSummary();\n        const recentEvents = emailServiceMonitor.getRecentEvents(200);\n        return NextResponse.json({\n          success: true,\n          errorDetails,\n          recentEvents,\n        });\n        \n      default:\n        return NextResponse.json(\n          { error: 'Invalid action specified' },\n          { status: 400 }\n        );\n    }\n    \n  } catch (error) {\n    console.error('Error performing admin action:', error);\n    \n    return NextResponse.json(\n      { \n        error: 'Failed to perform admin action',\n        details: error instanceof Error ? error.message : 'Unknown error'\n      },\n      { status: 500 }\n    );\n  }\n}\n\n/**\n * Generate alerts based on system status\n */\nfunction generateAlerts(\n  systemStatus: any,\n  emailHealth: { status: string; issues: string[]; recommendations: string[] }\n): Array<{\n  level: 'info' | 'warning' | 'critical';\n  message: string;\n  recommendation?: string;\n  timestamp: number;\n}> {\n  const alerts = [];\n  const now = Date.now();\n  \n  // Email service alerts\n  if (emailHealth.status === 'critical') {\n    alerts.push({\n      level: 'critical' as const,\n      message: 'Email service is in critical state',\n      recommendation: emailHealth.recommendations[0],\n      timestamp: now,\n    });\n  } else if (emailHealth.status === 'warning') {\n    alerts.push({\n      level: 'warning' as const,\n      message: 'Email service requires attention',\n      recommendation: emailHealth.recommendations[0],\n      timestamp: now,\n    });\n  }\n  \n  // Quota alerts\n  if (systemStatus.emailService.quotaUsage >= 95) {\n    alerts.push({\n      level: 'critical' as const,\n      message: `Email quota critically high: ${systemStatus.emailService.quotaUsage}%`,\n      recommendation: 'Immediate action required - consider upgrading plan or implementing throttling',\n      timestamp: now,\n    });\n  } else if (systemStatus.emailService.quotaUsage >= 80) {\n    alerts.push({\n      level: 'warning' as const,\n      message: `Email quota usage high: ${systemStatus.emailService.quotaUsage}%`,\n      recommendation: 'Monitor usage closely and consider upgrading plan',\n      timestamp: now,\n    });\n  }\n  \n  // Success rate alerts\n  if (systemStatus.emailService.successRate < 80) {\n    alerts.push({\n      level: 'critical' as const,\n      message: `Email success rate critically low: ${systemStatus.emailService.successRate.toFixed(1)}%`,\n      recommendation: 'Check email service configuration and network connectivity',\n      timestamp: now,\n    });\n  } else if (systemStatus.emailService.successRate < 95) {\n    alerts.push({\n      level: 'warning' as const,\n      message: `Email success rate below optimal: ${systemStatus.emailService.successRate.toFixed(1)}%`,\n      recommendation: 'Monitor email delivery and check for configuration issues',\n      timestamp: now,\n    });\n  }\n  \n  // Cleanup alerts\n  const timeSinceLastCleanup = now - systemStatus.cleanup.lastCleanup;\n  const hoursWithoutCleanup = timeSinceLastCleanup / (60 * 60 * 1000);\n  \n  if (hoursWithoutCleanup > 25) { // More than 25 hours\n    alerts.push({\n      level: 'warning' as const,\n      message: `Cleanup hasn't run for ${Math.round(hoursWithoutCleanup)} hours`,\n      recommendation: 'Check cleanup service status and logs',\n      timestamp: now,\n    });\n  }\n  \n  // Rate limiting alerts\n  if (systemStatus.rateLimits.securityEvents > 10) {\n    alerts.push({\n      level: 'warning' as const,\n      message: `High number of security events: ${systemStatus.rateLimits.securityEvents}`,\n      recommendation: 'Review security logs for potential abuse',\n      timestamp: now,\n    });\n  }\n  \n  return alerts;\n}"],"names":["GET","POST","request","authResult","requireAuth","NextResponse","json","error","status","user","systemStatus","emailVerificationCleanupService","getSystemStatus","emailStats","emailServiceMonitor","getStats","emailHealth","getHealthStatus","recentEvents","getRecentEvents","errorSummary","getErrorSummary","cleanupStats","getCleanupStats","monitoringData","timestamp","Date","now","emailService","stats","health","quotaWarning","isQuotaNearLimit","quotaCritical","cleanup","alerts","generateAlerts","console","details","Error","message","body","action","cleanupResult","forceCleanup","success","result","forceReset","errorDetails","push","level","recommendation","recommendations","quotaUsage","successRate","toFixed","timeSinceLastCleanup","lastCleanup","hoursWithoutCleanup","Math","round","rateLimits","securityEvents"],"mappings":"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"}