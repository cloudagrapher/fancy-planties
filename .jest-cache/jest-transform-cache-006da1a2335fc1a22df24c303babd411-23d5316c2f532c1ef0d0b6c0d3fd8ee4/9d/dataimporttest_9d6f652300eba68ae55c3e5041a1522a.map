{"version":3,"sources":["/Users/stefanbekker/projects/fancy-planties/src/__tests__/integration/data-import.test.js"],"sourcesContent":["// Data Import Integration Tests\n// Tests complete CSV file upload, parsing, validation, and import workflows\n\nimport { screen, waitFor } from '@testing-library/react';\nimport { renderWithProviders, userInteractions } from '@/test-utils';\nimport { mockApiResponse, mockApiError, resetApiMocks } from '@/test-utils/helpers/api-helpers';\nimport { createAuthenticatedTestUser } from '@/test-utils/factories/user-factory';\nimport CSVImportModal from '@/components/import/CSVImportModal';\nimport DataImport from '@/components/import/DataImport';\n\n// Mock file reading\nglobal.FileReader = class {\n  constructor() {\n    this.onload = null;\n    this.onerror = null;\n  }\n  \n  readAsText(file) {\n    setTimeout(() => {\n      if (this.onload) {\n        this.onload({ target: { result: file.content || 'Family,Genus,Species,Common Name\\nAraceae,Monstera,deliciosa,Monstera Deliciosa' } });\n      }\n    }, 0);\n  }\n};\n\ndescribe('Data Import Integration Tests', () => {\n  let testUser;\n  let testSession;\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    resetApiMocks();\n\n    // Create authenticated test user\n    const authData = createAuthenticatedTestUser();\n    testUser = authData.user;\n    testSession = authData.session;\n  });\n\n  afterEach(() => {\n    resetApiMocks();\n  });\n\n  describe('CSV File Upload and Parsing Workflow', () => {\n    it('should complete CSV upload and parsing workflow', async () => {\n      // Arrange\n      const validationResult = {\n        isValid: true,\n        errors: [],\n        preview: [\n          {\n            Family: 'Araceae',\n            Genus: 'Monstera',\n            Species: 'deliciosa',\n            'Common Name': 'Monstera Deliciosa',\n          },\n        ],\n      };\n\n      mockApiResponse({\n        'POST /api/import/csv/validate': {\n          status: 200,\n          data: validationResult,\n        },\n      });\n\n      const { user } = renderWithProviders(\n        <CSVImportModal\n          isOpen={true}\n          onClose={jest.fn()}\n        />\n      );\n\n      // Act - Select import type\n      const plantTaxonomyButton = screen.getByRole('button', { name: /plant taxonomy/i });\n      await user.click(plantTaxonomyButton);\n\n      // Upload file\n      const fileInput = screen.getByLabelText(/upload|file/i);\n      const csvFile = new File(['Family,Genus,Species,Common Name\\nAraceae,Monstera,deliciosa,Monstera Deliciosa'], 'plants.csv', {\n        type: 'text/csv',\n      });\n      csvFile.content = 'Family,Genus,Species,Common Name\\nAraceae,Monstera,deliciosa,Monstera Deliciosa';\n\n      await user.upload(fileInput, csvFile);\n\n      // Assert - Verify validation API was called\n      await waitFor(() => {\n        expect(global.fetch).toHaveBeenCalledWith(\n          '/api/import/csv/validate',\n          expect.objectContaining({\n            method: 'POST',\n            body: expect.stringContaining('plant_taxonomy'),\n          })\n        );\n      });\n\n      // Assert - Verify preview is shown\n      await waitFor(() => {\n        expect(screen.getByText('Review your data')).toBeInTheDocument();\n        expect(screen.getByText('Monstera Deliciosa')).toBeInTheDocument();\n      });\n    });\n\n    it('should handle CSV parsing validation errors', async () => {\n      // Arrange\n      const validationResult = {\n        isValid: false,\n        errors: [\n          'Missing required column: Family',\n          'Row 2: Invalid genus format',\n        ],\n        preview: [],\n      };\n\n      mockApiResponse({\n        'POST /api/import/csv/validate': {\n          status: 200,\n          data: validationResult,\n        },\n      });\n\n      const { user } = renderWithProviders(\n        <CSVImportModal\n          isOpen={true}\n          onClose={jest.fn()}\n        />\n      );\n\n      // Act - Select type and upload invalid file\n      const plantTaxonomyButton = screen.getByRole('button', { name: /plant taxonomy/i });\n      await user.click(plantTaxonomyButton);\n\n      const fileInput = screen.getByLabelText(/upload|file/i);\n      const invalidCsvFile = new File(['Invalid,Headers\\nBad,Data'], 'invalid.csv', {\n        type: 'text/csv',\n      });\n      invalidCsvFile.content = 'Invalid,Headers\\nBad,Data';\n\n      await user.upload(fileInput, invalidCsvFile);\n\n      // Assert - Verify validation errors are displayed\n      await waitFor(() => {\n        expect(screen.getByText(/missing required column: family/i)).toBeInTheDocument();\n        expect(screen.getByText(/invalid genus format/i)).toBeInTheDocument();\n      });\n    });\n\n    it('should handle different CSV import types', async () => {\n      // Arrange\n      const plantInstanceValidation = {\n        isValid: true,\n        errors: [],\n        preview: [\n          {\n            'Common Name': 'Monstera Deliciosa',\n            Location: 'Living Room',\n            'Fertilizer Schedule': 'every 4 weeks',\n          },\n        ],\n      };\n\n      mockApiResponse({\n        'POST /api/import/csv/validate': {\n          status: 200,\n          data: plantInstanceValidation,\n        },\n      });\n\n      const { user } = renderWithProviders(\n        <CSVImportModal\n          isOpen={true}\n          onClose={jest.fn()}\n        />\n      );\n\n      // Act - Select plant instances import type\n      const plantInstancesButton = screen.getByRole('button', { name: /plant instances|plant collection/i });\n      await user.click(plantInstancesButton);\n\n      const fileInput = screen.getByLabelText(/upload|file/i);\n      const csvFile = new File(['Common Name,Location,Fertilizer Schedule\\nMonstera Deliciosa,Living Room,every 4 weeks'], 'collection.csv', {\n        type: 'text/csv',\n      });\n      csvFile.content = 'Common Name,Location,Fertilizer Schedule\\nMonstera Deliciosa,Living Room,every 4 weeks';\n\n      await user.upload(fileInput, csvFile);\n\n      // Assert - Verify correct import type was sent\n      await waitFor(() => {\n        expect(global.fetch).toHaveBeenCalledWith(\n          '/api/import/csv/validate',\n          expect.objectContaining({\n            body: expect.stringContaining('plant_instances'),\n          })\n        );\n      });\n\n      // Assert - Verify plant instance data is shown\n      await waitFor(() => {\n        expect(screen.getByText('Living Room')).toBeInTheDocument();\n        expect(screen.getByText('every 4 weeks')).toBeInTheDocument();\n      });\n    });\n\n    it('should handle file reading errors gracefully', async () => {\n      // Arrange - Mock FileReader to fail\n      global.FileReader = class {\n        constructor() {\n          this.onerror = null;\n        }\n        \n        readAsText() {\n          setTimeout(() => {\n            if (this.onerror) {\n              this.onerror(new Error('Failed to read file'));\n            }\n          }, 0);\n        }\n      };\n\n      const { user } = renderWithProviders(\n        <CSVImportModal\n          isOpen={true}\n          onClose={jest.fn()}\n        />\n      );\n\n      // Act - Try to upload file\n      const plantTaxonomyButton = screen.getByRole('button', { name: /plant taxonomy/i });\n      await user.click(plantTaxonomyButton);\n\n      const fileInput = screen.getByLabelText(/upload|file/i);\n      const csvFile = new File(['test'], 'test.csv', { type: 'text/csv' });\n      await user.upload(fileInput, csvFile);\n\n      // Assert - Verify error is displayed\n      await waitFor(() => {\n        expect(screen.getByText(/failed to read file/i)).toBeInTheDocument();\n      });\n    });\n  }); \n describe('Data Validation and Error Handling During Import', () => {\n    it('should handle validation API errors', async () => {\n      // Arrange\n      mockApiError('/api/import/csv/validate', 500, { error: 'Validation service unavailable' }, 'POST');\n\n      const { user } = renderWithProviders(\n        <CSVImportModal\n          isOpen={true}\n          onClose={jest.fn()}\n        />\n      );\n\n      // Act - Upload file\n      const plantTaxonomyButton = screen.getByRole('button', { name: /plant taxonomy/i });\n      await user.click(plantTaxonomyButton);\n\n      const fileInput = screen.getByLabelText(/upload|file/i);\n      const csvFile = new File(['test'], 'test.csv', { type: 'text/csv' });\n      await user.upload(fileInput, csvFile);\n\n      // Assert - Verify error is displayed\n      await waitFor(() => {\n        expect(screen.getByText(/failed to validate csv/i)).toBeInTheDocument();\n      });\n    });\n\n    it('should validate required fields for different import types', async () => {\n      // Arrange\n      const propagationValidation = {\n        isValid: false,\n        errors: [\n          'Row 2: Missing required field \"Date Started\"',\n          'Row 3: Invalid date format in \"Date Started\"',\n        ],\n        preview: [\n          {\n            'Common Name': 'Monstera Deliciosa',\n            Location: 'Propagation Station',\n            'Date Started': '', // Missing\n          },\n        ],\n      };\n\n      mockApiResponse({\n        'POST /api/import/csv/validate': {\n          status: 200,\n          data: propagationValidation,\n        },\n      });\n\n      const { user } = renderWithProviders(\n        <CSVImportModal\n          isOpen={true}\n          onClose={jest.fn()}\n        />\n      );\n\n      // Act - Select propagations import\n      const propagationsButton = screen.getByRole('button', { name: /propagations/i });\n      await user.click(propagationsButton);\n\n      const fileInput = screen.getByLabelText(/upload|file/i);\n      const csvFile = new File(['Common Name,Location,Date Started\\nMonstera Deliciosa,Propagation Station,'], 'propagations.csv', {\n        type: 'text/csv',\n      });\n      csvFile.content = 'Common Name,Location,Date Started\\nMonstera Deliciosa,Propagation Station,';\n\n      await user.upload(fileInput, csvFile);\n\n      // Assert - Verify field-specific validation errors\n      await waitFor(() => {\n        expect(screen.getByText(/missing required field \"date started\"/i)).toBeInTheDocument();\n        expect(screen.getByText(/invalid date format/i)).toBeInTheDocument();\n      });\n    });\n\n    it('should handle duplicate data validation', async () => {\n      // Arrange\n      const validationWithDuplicates = {\n        isValid: true,\n        errors: [],\n        warnings: [\n          'Row 2: Duplicate plant found - Monstera deliciosa already exists',\n          'Row 4: Similar plant found - Monstera adansonii (90% match)',\n        ],\n        preview: [\n          {\n            Family: 'Araceae',\n            Genus: 'Monstera',\n            Species: 'deliciosa',\n            'Common Name': 'Monstera Deliciosa',\n          },\n        ],\n      };\n\n      mockApiResponse({\n        'POST /api/import/csv/validate': {\n          status: 200,\n          data: validationWithDuplicates,\n        },\n      });\n\n      const { user } = renderWithProviders(\n        <CSVImportModal\n          isOpen={true}\n          onClose={jest.fn()}\n        />\n      );\n\n      // Act - Upload file with duplicates\n      const plantTaxonomyButton = screen.getByRole('button', { name: /plant taxonomy/i });\n      await user.click(plantTaxonomyButton);\n\n      const fileInput = screen.getByLabelText(/upload|file/i);\n      const csvFile = new File(['test'], 'duplicates.csv', { type: 'text/csv' });\n      await user.upload(fileInput, csvFile);\n\n      // Assert - Verify duplicate warnings are shown\n      await waitFor(() => {\n        expect(screen.getByText(/duplicate plant found/i)).toBeInTheDocument();\n        expect(screen.getByText(/similar plant found/i)).toBeInTheDocument();\n      });\n    });\n\n    it('should validate data format requirements', async () => {\n      // Arrange\n      const formatValidation = {\n        isValid: false,\n        errors: [\n          'Row 2: \"Fertilizer Schedule\" must be one of: weekly, biweekly, monthly, etc.',\n          'Row 3: \"Last Fertilized\" must be a valid date (YYYY-MM-DD)',\n          'Row 4: \"Location\" cannot be empty',\n        ],\n        preview: [],\n      };\n\n      mockApiResponse({\n        'POST /api/import/csv/validate': {\n          status: 200,\n          data: formatValidation,\n        },\n      });\n\n      const { user } = renderWithProviders(\n        <CSVImportModal\n          isOpen={true}\n          onClose={jest.fn()}\n        />\n      );\n\n      // Act - Upload file with format errors\n      const plantInstancesButton = screen.getByRole('button', { name: /plant instances/i });\n      await user.click(plantInstancesButton);\n\n      const fileInput = screen.getByLabelText(/upload|file/i);\n      const csvFile = new File(['test'], 'format-errors.csv', { type: 'text/csv' });\n      await user.upload(fileInput, csvFile);\n\n      // Assert - Verify format validation errors\n      await waitFor(() => {\n        expect(screen.getByText(/fertilizer schedule.*must be one of/i)).toBeInTheDocument();\n        expect(screen.getByText(/must be a valid date/i)).toBeInTheDocument();\n        expect(screen.getByText(/location.*cannot be empty/i)).toBeInTheDocument();\n      });\n    });\n  });\n\n  describe('Successful Import Completion and Data Persistence', () => {\n    it('should complete successful import workflow with progress tracking', async () => {\n      // Arrange\n      const validationResult = {\n        isValid: true,\n        errors: [],\n        preview: [\n          { Family: 'Araceae', Genus: 'Monstera', Species: 'deliciosa', 'Common Name': 'Monstera Deliciosa' },\n        ],\n      };\n\n      const importResult = {\n        importId: 'import-123',\n        status: 'started',\n      };\n\n      mockApiResponse({\n        'POST /api/import/csv/validate': {\n          status: 200,\n          data: validationResult,\n        },\n        'POST /api/import/csv': {\n          status: 200,\n          data: importResult,\n        },\n      });\n\n      // Mock import progress polling\n      let progressCallCount = 0;\n      global.fetch = jest.fn((url, options) => {\n        if (url.includes('/api/import/csv/validate')) {\n          return Promise.resolve({\n            ok: true,\n            json: () => Promise.resolve(validationResult),\n          });\n        }\n        if (url.includes('/api/import/csv') && options?.method === 'POST') {\n          return Promise.resolve({\n            ok: true,\n            json: () => Promise.resolve(importResult),\n          });\n        }\n        if (url.includes('/api/import/progress/import-123')) {\n          progressCallCount++;\n          const progress = progressCallCount >= 3 ? {\n            status: 'completed',\n            progress: 100,\n            summary: {\n              totalRows: 1,\n              successfulRows: 1,\n              failedRows: 0,\n              created: 1,\n              updated: 0,\n              skipped: 0,\n            },\n          } : {\n            status: 'processing',\n            progress: progressCallCount * 30,\n            currentRow: progressCallCount,\n            totalRows: 1,\n          };\n          \n          return Promise.resolve({\n            ok: true,\n            json: () => Promise.resolve(progress),\n          });\n        }\n        return Promise.reject(new Error('Unexpected API call'));\n      });\n\n      const mockOnImportComplete = jest.fn();\n      const { user } = renderWithProviders(\n        <CSVImportModal\n          isOpen={true}\n          onClose={jest.fn()}\n          onImportComplete={mockOnImportComplete}\n        />\n      );\n\n      // Act - Complete full import workflow\n      // Step 1: Select type\n      const plantTaxonomyButton = screen.getByRole('button', { name: /plant taxonomy/i });\n      await user.click(plantTaxonomyButton);\n\n      // Step 2: Upload file\n      const fileInput = screen.getByLabelText(/upload|file/i);\n      const csvFile = new File(['test'], 'test.csv', { type: 'text/csv' });\n      await user.upload(fileInput, csvFile);\n\n      // Step 3: Start import\n      await waitFor(() => {\n        expect(screen.getByText('Review your data')).toBeInTheDocument();\n      });\n\n      const startImportButton = screen.getByRole('button', { name: /start import/i });\n      await user.click(startImportButton);\n\n      // Assert - Verify import was started\n      await waitFor(() => {\n        expect(screen.getByText(/importing data/i)).toBeInTheDocument();\n      });\n\n      // Assert - Verify import completion\n      await waitFor(() => {\n        expect(screen.getByText(/import completed successfully/i)).toBeInTheDocument();\n      }, { timeout: 10000 });\n\n      // Assert - Verify completion callback was called\n      expect(mockOnImportComplete).toHaveBeenCalledWith(\n        expect.objectContaining({\n          totalRows: 1,\n          successfulRows: 1,\n          created: 1,\n        })\n      );\n    });\n\n    it('should handle import server errors during processing', async () => {\n      // Arrange\n      const validationResult = {\n        isValid: true,\n        errors: [],\n        preview: [{ 'Common Name': 'Test Plant' }],\n      };\n\n      mockApiResponse({\n        'POST /api/import/csv/validate': {\n          status: 200,\n          data: validationResult,\n        },\n      });\n\n      mockApiError('/api/import/csv', 500, { error: 'Database connection failed' }, 'POST');\n\n      const { user } = renderWithProviders(\n        <CSVImportModal\n          isOpen={true}\n          onClose={jest.fn()}\n        />\n      );\n\n      // Act - Try to start import\n      const plantTaxonomyButton = screen.getByRole('button', { name: /plant taxonomy/i });\n      await user.click(plantTaxonomyButton);\n\n      const fileInput = screen.getByLabelText(/upload|file/i);\n      const csvFile = new File(['test'], 'test.csv', { type: 'text/csv' });\n      await user.upload(fileInput, csvFile);\n\n      await waitFor(() => {\n        expect(screen.getByRole('button', { name: /start import/i })).toBeInTheDocument();\n      });\n\n      const startImportButton = screen.getByRole('button', { name: /start import/i });\n      await user.click(startImportButton);\n\n      // Assert - Verify error is displayed\n      await waitFor(() => {\n        expect(screen.getByText(/failed to start import/i)).toBeInTheDocument();\n      });\n    });\n\n    it('should handle partial import success with error reporting', async () => {\n      // Arrange\n      const validationResult = {\n        isValid: true,\n        errors: [],\n        preview: [\n          { 'Common Name': 'Plant 1' },\n          { 'Common Name': 'Plant 2' },\n        ],\n      };\n\n      const importResult = { importId: 'import-456' };\n\n      mockApiResponse({\n        'POST /api/import/csv/validate': {\n          status: 200,\n          data: validationResult,\n        },\n        'POST /api/import/csv': {\n          status: 200,\n          data: importResult,\n        },\n      });\n\n      // Mock progress with partial success\n      global.fetch = jest.fn((url, options) => {\n        if (url.includes('validate') || (url.includes('/api/import/csv') && options?.method === 'POST')) {\n          return Promise.resolve({\n            ok: true,\n            json: () => Promise.resolve(url.includes('validate') ? validationResult : importResult),\n          });\n        }\n        if (url.includes('/api/import/progress/import-456')) {\n          return Promise.resolve({\n            ok: true,\n            json: () => Promise.resolve({\n              status: 'completed',\n              progress: 100,\n              summary: {\n                totalRows: 2,\n                successfulRows: 1,\n                failedRows: 1,\n                created: 1,\n                updated: 0,\n                skipped: 0,\n                errors: [\n                  { row: 2, error: 'Duplicate plant name' },\n                ],\n              },\n            }),\n          });\n        }\n        return Promise.reject(new Error('Unexpected API call'));\n      });\n\n      const { user } = renderWithProviders(\n        <CSVImportModal\n          isOpen={true}\n          onClose={jest.fn()}\n        />\n      );\n\n      // Act - Complete import with partial success\n      const plantTaxonomyButton = screen.getByRole('button', { name: /plant taxonomy/i });\n      await user.click(plantTaxonomyButton);\n\n      const fileInput = screen.getByLabelText(/upload|file/i);\n      const csvFile = new File(['test'], 'test.csv', { type: 'text/csv' });\n      await user.upload(fileInput, csvFile);\n\n      await waitFor(() => {\n        expect(screen.getByRole('button', { name: /start import/i })).toBeInTheDocument();\n      });\n\n      const startImportButton = screen.getByRole('button', { name: /start import/i });\n      await user.click(startImportButton);\n\n      // Assert - Verify partial success is reported\n      await waitFor(() => {\n        expect(screen.getByText(/import completed/i)).toBeInTheDocument();\n      }, { timeout: 10000 });\n\n      // Note: The actual error display would depend on the ImportProgress component implementation\n    });\n  }); \n describe('Template Download and Import Workflow Integration', () => {\n    it('should provide CSV template downloads for different import types', async () => {\n      // Arrange\n      const originalCreateElement = document.createElement;\n      const mockLink = {\n        setAttribute: jest.fn(),\n        click: jest.fn(),\n        style: {},\n      };\n      \n      document.createElement = jest.fn((tagName) => {\n        if (tagName === 'a') {\n          return mockLink;\n        }\n        return originalCreateElement.call(document, tagName);\n      });\n\n      const originalCreateObjectURL = URL.createObjectURL;\n      URL.createObjectURL = jest.fn(() => 'blob:mock-url');\n\n      const originalAppendChild = document.body.appendChild;\n      const originalRemoveChild = document.body.removeChild;\n      document.body.appendChild = jest.fn();\n      document.body.removeChild = jest.fn();\n\n      const { user } = renderWithProviders(<DataImport />);\n\n      // Act - Download plant taxonomy template\n      const taxonomyTemplateButton = screen.getByRole('button', { name: /plant taxonomy template/i });\n      await user.click(taxonomyTemplateButton);\n\n      // Assert - Verify template download was triggered\n      expect(mockLink.setAttribute).toHaveBeenCalledWith('href', 'blob:mock-url');\n      expect(mockLink.setAttribute).toHaveBeenCalledWith('download', 'plant_taxonomy_template.csv');\n      expect(mockLink.click).toHaveBeenCalled();\n\n      // Cleanup\n      document.createElement = originalCreateElement;\n      URL.createObjectURL = originalCreateObjectURL;\n      document.body.appendChild = originalAppendChild;\n      document.body.removeChild = originalRemoveChild;\n    });\n\n    it('should show import history and status tracking', async () => {\n      // Arrange\n      const importHistory = [\n        {\n          id: 'import-123',\n          type: 'plant_taxonomy',\n          filename: 'plants.csv',\n          status: 'completed',\n          createdAt: '2024-01-15T10:00:00Z',\n          summary: {\n            totalRows: 10,\n            successfulRows: 9,\n            failedRows: 1,\n            created: 9,\n          },\n        },\n        {\n          id: 'import-124',\n          type: 'plant_instances',\n          filename: 'collection.csv',\n          status: 'processing',\n          createdAt: '2024-01-16T14:30:00Z',\n          progress: 75,\n        },\n      ];\n\n      mockApiResponse({\n        'GET /api/import/csv': {\n          status: 200,\n          data: { imports: importHistory },\n        },\n      });\n\n      const { user } = renderWithProviders(<DataImport />);\n\n      // Act - Switch to history tab\n      const historyTab = screen.getByRole('button', { name: /import history/i });\n      await user.click(historyTab);\n\n      // Assert - Verify import history is displayed\n      await waitFor(() => {\n        expect(global.fetch).toHaveBeenCalledWith('/api/import/csv');\n      });\n\n      // Note: The actual history display would depend on the ImportHistory component implementation\n    });\n\n    it('should handle end-to-end import workflow from template to completion', async () => {\n      // This test would simulate:\n      // 1. Download template\n      // 2. Upload filled template\n      // 3. Validate data\n      // 4. Complete import\n      // 5. View in history\n\n      // Arrange\n      const validationResult = {\n        isValid: true,\n        errors: [],\n        preview: [\n          { Family: 'Araceae', Genus: 'Monstera', Species: 'deliciosa', 'Common Name': 'Monstera Deliciosa' },\n        ],\n      };\n\n      const importResult = { importId: 'import-789' };\n\n      mockApiResponse({\n        'POST /api/import/csv/validate': {\n          status: 200,\n          data: validationResult,\n        },\n        'POST /api/import/csv': {\n          status: 200,\n          data: importResult,\n        },\n        'GET /api/import/csv': {\n          status: 200,\n          data: {\n            imports: [{\n              id: 'import-789',\n              type: 'plant_taxonomy',\n              status: 'completed',\n              summary: { totalRows: 1, successfulRows: 1, created: 1 },\n            }],\n          },\n        },\n      });\n\n      // Mock progress completion\n      global.fetch = jest.fn((url, options) => {\n        if (url.includes('validate')) {\n          return Promise.resolve({\n            ok: true,\n            json: () => Promise.resolve(validationResult),\n          });\n        }\n        if (url.includes('/api/import/csv') && options?.method === 'POST') {\n          return Promise.resolve({\n            ok: true,\n            json: () => Promise.resolve(importResult),\n          });\n        }\n        if (url.includes('/api/import/progress/import-789')) {\n          return Promise.resolve({\n            ok: true,\n            json: () => Promise.resolve({\n              status: 'completed',\n              progress: 100,\n              summary: { totalRows: 1, successfulRows: 1, created: 1 },\n            }),\n          });\n        }\n        if (url.includes('/api/import/csv') && options?.method === 'GET') {\n          return Promise.resolve({\n            ok: true,\n            json: () => Promise.resolve({\n              imports: [{\n                id: 'import-789',\n                type: 'plant_taxonomy',\n                status: 'completed',\n                summary: { totalRows: 1, successfulRows: 1, created: 1 },\n              }],\n            }),\n          });\n        }\n        return Promise.reject(new Error('Unexpected API call'));\n      });\n\n      const { user, rerender } = renderWithProviders(<DataImport />);\n\n      // Step 1: Start CSV import\n      const startImportButton = screen.getByRole('button', { name: /start csv import/i });\n      await user.click(startImportButton);\n\n      // Step 2: Complete import workflow (simplified)\n      await waitFor(() => {\n        expect(screen.getByText(/import csv data/i)).toBeInTheDocument();\n      });\n\n      // Step 3: Check history after import\n      rerender(<DataImport />);\n      \n      const historyTab = screen.getByRole('button', { name: /import history/i });\n      await user.click(historyTab);\n\n      // Assert - Verify completed import appears in history\n      await waitFor(() => {\n        expect(global.fetch).toHaveBeenCalledWith('/api/import/csv');\n      });\n    });\n  });\n\n  describe('Error Recovery and User Experience', () => {\n    it('should allow users to retry failed imports', async () => {\n      // Arrange\n      const validationResult = {\n        isValid: true,\n        errors: [],\n        preview: [{ 'Common Name': 'Test Plant' }],\n      };\n\n      // First attempt fails, second succeeds\n      let attemptCount = 0;\n      global.fetch = jest.fn((url, options) => {\n        if (url.includes('validate')) {\n          return Promise.resolve({\n            ok: true,\n            json: () => Promise.resolve(validationResult),\n          });\n        }\n        if (url.includes('/api/import/csv') && options?.method === 'POST') {\n          attemptCount++;\n          if (attemptCount === 1) {\n            return Promise.resolve({\n              ok: false,\n              json: () => Promise.resolve({ error: 'Temporary server error' }),\n            });\n          } else {\n            return Promise.resolve({\n              ok: true,\n              json: () => Promise.resolve({ importId: 'import-retry-123' }),\n            });\n          }\n        }\n        return Promise.reject(new Error('Unexpected API call'));\n      });\n\n      const { user } = renderWithProviders(\n        <CSVImportModal\n          isOpen={true}\n          onClose={jest.fn()}\n        />\n      );\n\n      // Act - First attempt (fails)\n      const plantTaxonomyButton = screen.getByRole('button', { name: /plant taxonomy/i });\n      await user.click(plantTaxonomyButton);\n\n      const fileInput = screen.getByLabelText(/upload|file/i);\n      const csvFile = new File(['test'], 'test.csv', { type: 'text/csv' });\n      await user.upload(fileInput, csvFile);\n\n      await waitFor(() => {\n        expect(screen.getByRole('button', { name: /start import/i })).toBeInTheDocument();\n      });\n\n      const startImportButton = screen.getByRole('button', { name: /start import/i });\n      await user.click(startImportButton);\n\n      // Assert - First attempt fails\n      await waitFor(() => {\n        expect(screen.getByText(/failed to start import/i)).toBeInTheDocument();\n      });\n\n      // Act - Retry import\n      await user.click(startImportButton);\n\n      // Assert - Second attempt should succeed\n      await waitFor(() => {\n        expect(attemptCount).toBe(2);\n      });\n    });\n\n    it('should provide clear error messages for common issues', async () => {\n      // Arrange\n      const commonErrors = [\n        { error: 'File too large', expectedMessage: /file.*too large/i },\n        { error: 'Invalid file format', expectedMessage: /invalid.*format/i },\n        { error: 'Missing required columns', expectedMessage: /missing.*columns/i },\n        { error: 'Network timeout', expectedMessage: /network.*timeout|connection/i },\n      ];\n\n      for (const { error, expectedMessage } of commonErrors) {\n        mockApiError('/api/import/csv/validate', 400, { error }, 'POST');\n\n        const { user } = renderWithProviders(\n          <CSVImportModal\n            isOpen={true}\n            onClose={jest.fn()}\n          />\n        );\n\n        // Act - Trigger error\n        const plantTaxonomyButton = screen.getByRole('button', { name: /plant taxonomy/i });\n        await user.click(plantTaxonomyButton);\n\n        const fileInput = screen.getByLabelText(/upload|file/i);\n        const csvFile = new File(['test'], 'test.csv', { type: 'text/csv' });\n        await user.upload(fileInput, csvFile);\n\n        // Assert - Verify appropriate error message\n        await waitFor(() => {\n          expect(screen.getByText(expectedMessage)).toBeInTheDocument();\n        });\n      }\n    });\n\n    it('should handle modal state management correctly', async () => {\n      // Arrange\n      const mockOnClose = jest.fn();\n      const { user } = renderWithProviders(\n        <CSVImportModal\n          isOpen={true}\n          onClose={mockOnClose}\n        />\n      );\n\n      // Act - Close modal during different steps\n      const closeButton = screen.getByRole('button', { name: /close/i });\n      await user.click(closeButton);\n\n      // Assert - Verify close callback was called\n      expect(mockOnClose).toHaveBeenCalled();\n\n      // Act - Test escape key\n      const { rerender } = renderWithProviders(\n        <CSVImportModal\n          isOpen={true}\n          onClose={mockOnClose}\n        />\n      );\n\n      await user.keyboard('{Escape}');\n\n      // Assert - Modal should close on escape\n      // Note: This would depend on the actual escape key handling implementation\n    });\n  });\n});"],"names":["global","FileReader","onload","onerror","readAsText","file","setTimeout","target","result","content","describe","testUser","testSession","beforeEach","jest","clearAllMocks","resetApiMocks","authData","createAuthenticatedTestUser","user","session","afterEach","it","validationResult","isValid","errors","preview","Family","Genus","Species","mockApiResponse","status","data","renderWithProviders","CSVImportModal","isOpen","onClose","fn","plantTaxonomyButton","screen","getByRole","name","click","fileInput","getByLabelText","csvFile","File","type","upload","waitFor","expect","fetch","toHaveBeenCalledWith","objectContaining","method","body","stringContaining","getByText","toBeInTheDocument","invalidCsvFile","plantInstanceValidation","Location","plantInstancesButton","Error","mockApiError","error","propagationValidation","propagationsButton","validationWithDuplicates","warnings","formatValidation","importResult","importId","progressCallCount","url","options","includes","Promise","resolve","ok","json","progress","summary","totalRows","successfulRows","failedRows","created","updated","skipped","currentRow","reject","mockOnImportComplete","onImportComplete","startImportButton","timeout","row","originalCreateElement","document","createElement","mockLink","setAttribute","style","tagName","call","originalCreateObjectURL","URL","createObjectURL","originalAppendChild","appendChild","originalRemoveChild","removeChild","DataImport","taxonomyTemplateButton","toHaveBeenCalled","importHistory","id","filename","createdAt","imports","historyTab","rerender","attemptCount","toBe","commonErrors","expectedMessage","mockOnClose","closeButton","keyboard"],"mappings":"AAAA,gCAAgC;AAChC,4EAA4E;;;;;;uBAE5C;2BACsB;4BACO;6BACjB;uEACjB;mEACJ;;;;;;AAEvB,oBAAoB;AACpBA,OAAOC,UAAU,GAAG;IAClB,aAAc;QACZ,IAAI,CAACC,MAAM,GAAG;QACd,IAAI,CAACC,OAAO,GAAG;IACjB;IAEAC,WAAWC,IAAI,EAAE;QACfC,WAAW;YACT,IAAI,IAAI,CAACJ,MAAM,EAAE;gBACf,IAAI,CAACA,MAAM,CAAC;oBAAEK,QAAQ;wBAAEC,QAAQH,KAAKI,OAAO,IAAI;oBAAkF;gBAAE;YACtI;QACF,GAAG;IACL;AACF;AAEAC,SAAS,iCAAiC;IACxC,IAAIC;IACJ,IAAIC;IAEJC,WAAW;QACTC,KAAKC,aAAa;QAClBC,IAAAA,yBAAa;QAEb,iCAAiC;QACjC,MAAMC,WAAWC,IAAAA,wCAA2B;QAC5CP,WAAWM,SAASE,IAAI;QACxBP,cAAcK,SAASG,OAAO;IAChC;IAEAC,UAAU;QACRL,IAAAA,yBAAa;IACf;IAEAN,SAAS,wCAAwC;QAC/CY,GAAG,mDAAmD;YACpD,UAAU;YACV,MAAMC,mBAAmB;gBACvBC,SAAS;gBACTC,QAAQ,EAAE;gBACVC,SAAS;oBACP;wBACEC,QAAQ;wBACRC,OAAO;wBACPC,SAAS;wBACT,eAAe;oBACjB;iBACD;YACH;YAEAC,IAAAA,2BAAe,EAAC;gBACd,iCAAiC;oBAC/BC,QAAQ;oBACRC,MAAMT;gBACR;YACF;YAEA,MAAM,EAAEJ,IAAI,EAAE,GAAGc,IAAAA,8BAAmB,gBAClC,qBAACC,uBAAc;gBACbC,QAAQ;gBACRC,SAAStB,KAAKuB,EAAE;;YAIpB,2BAA2B;YAC3B,MAAMC,sBAAsBC,aAAM,CAACC,SAAS,CAAC,UAAU;gBAAEC,MAAM;YAAkB;YACjF,MAAMtB,KAAKuB,KAAK,CAACJ;YAEjB,cAAc;YACd,MAAMK,YAAYJ,aAAM,CAACK,cAAc,CAAC;YACxC,MAAMC,UAAU,IAAIC,KAAK;gBAAC;aAAkF,EAAE,cAAc;gBAC1HC,MAAM;YACR;YACAF,QAAQpC,OAAO,GAAG;YAElB,MAAMU,KAAK6B,MAAM,CAACL,WAAWE;YAE7B,4CAA4C;YAC5C,MAAMI,IAAAA,cAAO,EAAC;gBACZC,OAAOlD,OAAOmD,KAAK,EAAEC,oBAAoB,CACvC,4BACAF,OAAOG,gBAAgB,CAAC;oBACtBC,QAAQ;oBACRC,MAAML,OAAOM,gBAAgB,CAAC;gBAChC;YAEJ;YAEA,mCAAmC;YACnC,MAAMP,IAAAA,cAAO,EAAC;gBACZC,OAAOX,aAAM,CAACkB,SAAS,CAAC,qBAAqBC,iBAAiB;gBAC9DR,OAAOX,aAAM,CAACkB,SAAS,CAAC,uBAAuBC,iBAAiB;YAClE;QACF;QAEApC,GAAG,+CAA+C;YAChD,UAAU;YACV,MAAMC,mBAAmB;gBACvBC,SAAS;gBACTC,QAAQ;oBACN;oBACA;iBACD;gBACDC,SAAS,EAAE;YACb;YAEAI,IAAAA,2BAAe,EAAC;gBACd,iCAAiC;oBAC/BC,QAAQ;oBACRC,MAAMT;gBACR;YACF;YAEA,MAAM,EAAEJ,IAAI,EAAE,GAAGc,IAAAA,8BAAmB,gBAClC,qBAACC,uBAAc;gBACbC,QAAQ;gBACRC,SAAStB,KAAKuB,EAAE;;YAIpB,4CAA4C;YAC5C,MAAMC,sBAAsBC,aAAM,CAACC,SAAS,CAAC,UAAU;gBAAEC,MAAM;YAAkB;YACjF,MAAMtB,KAAKuB,KAAK,CAACJ;YAEjB,MAAMK,YAAYJ,aAAM,CAACK,cAAc,CAAC;YACxC,MAAMe,iBAAiB,IAAIb,KAAK;gBAAC;aAA4B,EAAE,eAAe;gBAC5EC,MAAM;YACR;YACAY,eAAelD,OAAO,GAAG;YAEzB,MAAMU,KAAK6B,MAAM,CAACL,WAAWgB;YAE7B,kDAAkD;YAClD,MAAMV,IAAAA,cAAO,EAAC;gBACZC,OAAOX,aAAM,CAACkB,SAAS,CAAC,qCAAqCC,iBAAiB;gBAC9ER,OAAOX,aAAM,CAACkB,SAAS,CAAC,0BAA0BC,iBAAiB;YACrE;QACF;QAEApC,GAAG,4CAA4C;YAC7C,UAAU;YACV,MAAMsC,0BAA0B;gBAC9BpC,SAAS;gBACTC,QAAQ,EAAE;gBACVC,SAAS;oBACP;wBACE,eAAe;wBACfmC,UAAU;wBACV,uBAAuB;oBACzB;iBACD;YACH;YAEA/B,IAAAA,2BAAe,EAAC;gBACd,iCAAiC;oBAC/BC,QAAQ;oBACRC,MAAM4B;gBACR;YACF;YAEA,MAAM,EAAEzC,IAAI,EAAE,GAAGc,IAAAA,8BAAmB,gBAClC,qBAACC,uBAAc;gBACbC,QAAQ;gBACRC,SAAStB,KAAKuB,EAAE;;YAIpB,2CAA2C;YAC3C,MAAMyB,uBAAuBvB,aAAM,CAACC,SAAS,CAAC,UAAU;gBAAEC,MAAM;YAAoC;YACpG,MAAMtB,KAAKuB,KAAK,CAACoB;YAEjB,MAAMnB,YAAYJ,aAAM,CAACK,cAAc,CAAC;YACxC,MAAMC,UAAU,IAAIC,KAAK;gBAAC;aAAyF,EAAE,kBAAkB;gBACrIC,MAAM;YACR;YACAF,QAAQpC,OAAO,GAAG;YAElB,MAAMU,KAAK6B,MAAM,CAACL,WAAWE;YAE7B,+CAA+C;YAC/C,MAAMI,IAAAA,cAAO,EAAC;gBACZC,OAAOlD,OAAOmD,KAAK,EAAEC,oBAAoB,CACvC,4BACAF,OAAOG,gBAAgB,CAAC;oBACtBE,MAAML,OAAOM,gBAAgB,CAAC;gBAChC;YAEJ;YAEA,+CAA+C;YAC/C,MAAMP,IAAAA,cAAO,EAAC;gBACZC,OAAOX,aAAM,CAACkB,SAAS,CAAC,gBAAgBC,iBAAiB;gBACzDR,OAAOX,aAAM,CAACkB,SAAS,CAAC,kBAAkBC,iBAAiB;YAC7D;QACF;QAEApC,GAAG,gDAAgD;YACjD,oCAAoC;YACpCtB,OAAOC,UAAU,GAAG;gBAClB,aAAc;oBACZ,IAAI,CAACE,OAAO,GAAG;gBACjB;gBAEAC,aAAa;oBACXE,WAAW;wBACT,IAAI,IAAI,CAACH,OAAO,EAAE;4BAChB,IAAI,CAACA,OAAO,CAAC,IAAI4D,MAAM;wBACzB;oBACF,GAAG;gBACL;YACF;YAEA,MAAM,EAAE5C,IAAI,EAAE,GAAGc,IAAAA,8BAAmB,gBAClC,qBAACC,uBAAc;gBACbC,QAAQ;gBACRC,SAAStB,KAAKuB,EAAE;;YAIpB,2BAA2B;YAC3B,MAAMC,sBAAsBC,aAAM,CAACC,SAAS,CAAC,UAAU;gBAAEC,MAAM;YAAkB;YACjF,MAAMtB,KAAKuB,KAAK,CAACJ;YAEjB,MAAMK,YAAYJ,aAAM,CAACK,cAAc,CAAC;YACxC,MAAMC,UAAU,IAAIC,KAAK;gBAAC;aAAO,EAAE,YAAY;gBAAEC,MAAM;YAAW;YAClE,MAAM5B,KAAK6B,MAAM,CAACL,WAAWE;YAE7B,qCAAqC;YACrC,MAAMI,IAAAA,cAAO,EAAC;gBACZC,OAAOX,aAAM,CAACkB,SAAS,CAAC,yBAAyBC,iBAAiB;YACpE;QACF;IACF;IACDhD,SAAS,oDAAoD;QAC1DY,GAAG,uCAAuC;YACxC,UAAU;YACV0C,IAAAA,wBAAY,EAAC,4BAA4B,KAAK;gBAAEC,OAAO;YAAiC,GAAG;YAE3F,MAAM,EAAE9C,IAAI,EAAE,GAAGc,IAAAA,8BAAmB,gBAClC,qBAACC,uBAAc;gBACbC,QAAQ;gBACRC,SAAStB,KAAKuB,EAAE;;YAIpB,oBAAoB;YACpB,MAAMC,sBAAsBC,aAAM,CAACC,SAAS,CAAC,UAAU;gBAAEC,MAAM;YAAkB;YACjF,MAAMtB,KAAKuB,KAAK,CAACJ;YAEjB,MAAMK,YAAYJ,aAAM,CAACK,cAAc,CAAC;YACxC,MAAMC,UAAU,IAAIC,KAAK;gBAAC;aAAO,EAAE,YAAY;gBAAEC,MAAM;YAAW;YAClE,MAAM5B,KAAK6B,MAAM,CAACL,WAAWE;YAE7B,qCAAqC;YACrC,MAAMI,IAAAA,cAAO,EAAC;gBACZC,OAAOX,aAAM,CAACkB,SAAS,CAAC,4BAA4BC,iBAAiB;YACvE;QACF;QAEApC,GAAG,8DAA8D;YAC/D,UAAU;YACV,MAAM4C,wBAAwB;gBAC5B1C,SAAS;gBACTC,QAAQ;oBACN;oBACA;iBACD;gBACDC,SAAS;oBACP;wBACE,eAAe;wBACfmC,UAAU;wBACV,gBAAgB;oBAClB;iBACD;YACH;YAEA/B,IAAAA,2BAAe,EAAC;gBACd,iCAAiC;oBAC/BC,QAAQ;oBACRC,MAAMkC;gBACR;YACF;YAEA,MAAM,EAAE/C,IAAI,EAAE,GAAGc,IAAAA,8BAAmB,gBAClC,qBAACC,uBAAc;gBACbC,QAAQ;gBACRC,SAAStB,KAAKuB,EAAE;;YAIpB,mCAAmC;YACnC,MAAM8B,qBAAqB5B,aAAM,CAACC,SAAS,CAAC,UAAU;gBAAEC,MAAM;YAAgB;YAC9E,MAAMtB,KAAKuB,KAAK,CAACyB;YAEjB,MAAMxB,YAAYJ,aAAM,CAACK,cAAc,CAAC;YACxC,MAAMC,UAAU,IAAIC,KAAK;gBAAC;aAA6E,EAAE,oBAAoB;gBAC3HC,MAAM;YACR;YACAF,QAAQpC,OAAO,GAAG;YAElB,MAAMU,KAAK6B,MAAM,CAACL,WAAWE;YAE7B,mDAAmD;YACnD,MAAMI,IAAAA,cAAO,EAAC;gBACZC,OAAOX,aAAM,CAACkB,SAAS,CAAC,2CAA2CC,iBAAiB;gBACpFR,OAAOX,aAAM,CAACkB,SAAS,CAAC,yBAAyBC,iBAAiB;YACpE;QACF;QAEApC,GAAG,2CAA2C;YAC5C,UAAU;YACV,MAAM8C,2BAA2B;gBAC/B5C,SAAS;gBACTC,QAAQ,EAAE;gBACV4C,UAAU;oBACR;oBACA;iBACD;gBACD3C,SAAS;oBACP;wBACEC,QAAQ;wBACRC,OAAO;wBACPC,SAAS;wBACT,eAAe;oBACjB;iBACD;YACH;YAEAC,IAAAA,2BAAe,EAAC;gBACd,iCAAiC;oBAC/BC,QAAQ;oBACRC,MAAMoC;gBACR;YACF;YAEA,MAAM,EAAEjD,IAAI,EAAE,GAAGc,IAAAA,8BAAmB,gBAClC,qBAACC,uBAAc;gBACbC,QAAQ;gBACRC,SAAStB,KAAKuB,EAAE;;YAIpB,oCAAoC;YACpC,MAAMC,sBAAsBC,aAAM,CAACC,SAAS,CAAC,UAAU;gBAAEC,MAAM;YAAkB;YACjF,MAAMtB,KAAKuB,KAAK,CAACJ;YAEjB,MAAMK,YAAYJ,aAAM,CAACK,cAAc,CAAC;YACxC,MAAMC,UAAU,IAAIC,KAAK;gBAAC;aAAO,EAAE,kBAAkB;gBAAEC,MAAM;YAAW;YACxE,MAAM5B,KAAK6B,MAAM,CAACL,WAAWE;YAE7B,+CAA+C;YAC/C,MAAMI,IAAAA,cAAO,EAAC;gBACZC,OAAOX,aAAM,CAACkB,SAAS,CAAC,2BAA2BC,iBAAiB;gBACpER,OAAOX,aAAM,CAACkB,SAAS,CAAC,yBAAyBC,iBAAiB;YACpE;QACF;QAEApC,GAAG,4CAA4C;YAC7C,UAAU;YACV,MAAMgD,mBAAmB;gBACvB9C,SAAS;gBACTC,QAAQ;oBACN;oBACA;oBACA;iBACD;gBACDC,SAAS,EAAE;YACb;YAEAI,IAAAA,2BAAe,EAAC;gBACd,iCAAiC;oBAC/BC,QAAQ;oBACRC,MAAMsC;gBACR;YACF;YAEA,MAAM,EAAEnD,IAAI,EAAE,GAAGc,IAAAA,8BAAmB,gBAClC,qBAACC,uBAAc;gBACbC,QAAQ;gBACRC,SAAStB,KAAKuB,EAAE;;YAIpB,uCAAuC;YACvC,MAAMyB,uBAAuBvB,aAAM,CAACC,SAAS,CAAC,UAAU;gBAAEC,MAAM;YAAmB;YACnF,MAAMtB,KAAKuB,KAAK,CAACoB;YAEjB,MAAMnB,YAAYJ,aAAM,CAACK,cAAc,CAAC;YACxC,MAAMC,UAAU,IAAIC,KAAK;gBAAC;aAAO,EAAE,qBAAqB;gBAAEC,MAAM;YAAW;YAC3E,MAAM5B,KAAK6B,MAAM,CAACL,WAAWE;YAE7B,2CAA2C;YAC3C,MAAMI,IAAAA,cAAO,EAAC;gBACZC,OAAOX,aAAM,CAACkB,SAAS,CAAC,yCAAyCC,iBAAiB;gBAClFR,OAAOX,aAAM,CAACkB,SAAS,CAAC,0BAA0BC,iBAAiB;gBACnER,OAAOX,aAAM,CAACkB,SAAS,CAAC,+BAA+BC,iBAAiB;YAC1E;QACF;IACF;IAEAhD,SAAS,qDAAqD;QAC5DY,GAAG,qEAAqE;YACtE,UAAU;YACV,MAAMC,mBAAmB;gBACvBC,SAAS;gBACTC,QAAQ,EAAE;gBACVC,SAAS;oBACP;wBAAEC,QAAQ;wBAAWC,OAAO;wBAAYC,SAAS;wBAAa,eAAe;oBAAqB;iBACnG;YACH;YAEA,MAAM0C,eAAe;gBACnBC,UAAU;gBACVzC,QAAQ;YACV;YAEAD,IAAAA,2BAAe,EAAC;gBACd,iCAAiC;oBAC/BC,QAAQ;oBACRC,MAAMT;gBACR;gBACA,wBAAwB;oBACtBQ,QAAQ;oBACRC,MAAMuC;gBACR;YACF;YAEA,+BAA+B;YAC/B,IAAIE,oBAAoB;YACxBzE,OAAOmD,KAAK,GAAGrC,KAAKuB,EAAE,CAAC,CAACqC,KAAKC;gBAC3B,IAAID,IAAIE,QAAQ,CAAC,6BAA6B;oBAC5C,OAAOC,QAAQC,OAAO,CAAC;wBACrBC,IAAI;wBACJC,MAAM,IAAMH,QAAQC,OAAO,CAACvD;oBAC9B;gBACF;gBACA,IAAImD,IAAIE,QAAQ,CAAC,sBAAsBD,SAASrB,WAAW,QAAQ;oBACjE,OAAOuB,QAAQC,OAAO,CAAC;wBACrBC,IAAI;wBACJC,MAAM,IAAMH,QAAQC,OAAO,CAACP;oBAC9B;gBACF;gBACA,IAAIG,IAAIE,QAAQ,CAAC,oCAAoC;oBACnDH;oBACA,MAAMQ,WAAWR,qBAAqB,IAAI;wBACxC1C,QAAQ;wBACRkD,UAAU;wBACVC,SAAS;4BACPC,WAAW;4BACXC,gBAAgB;4BAChBC,YAAY;4BACZC,SAAS;4BACTC,SAAS;4BACTC,SAAS;wBACX;oBACF,IAAI;wBACFzD,QAAQ;wBACRkD,UAAUR,oBAAoB;wBAC9BgB,YAAYhB;wBACZU,WAAW;oBACb;oBAEA,OAAON,QAAQC,OAAO,CAAC;wBACrBC,IAAI;wBACJC,MAAM,IAAMH,QAAQC,OAAO,CAACG;oBAC9B;gBACF;gBACA,OAAOJ,QAAQa,MAAM,CAAC,IAAI3B,MAAM;YAClC;YAEA,MAAM4B,uBAAuB7E,KAAKuB,EAAE;YACpC,MAAM,EAAElB,IAAI,EAAE,GAAGc,IAAAA,8BAAmB,gBAClC,qBAACC,uBAAc;gBACbC,QAAQ;gBACRC,SAAStB,KAAKuB,EAAE;gBAChBuD,kBAAkBD;;YAItB,sCAAsC;YACtC,sBAAsB;YACtB,MAAMrD,sBAAsBC,aAAM,CAACC,SAAS,CAAC,UAAU;gBAAEC,MAAM;YAAkB;YACjF,MAAMtB,KAAKuB,KAAK,CAACJ;YAEjB,sBAAsB;YACtB,MAAMK,YAAYJ,aAAM,CAACK,cAAc,CAAC;YACxC,MAAMC,UAAU,IAAIC,KAAK;gBAAC;aAAO,EAAE,YAAY;gBAAEC,MAAM;YAAW;YAClE,MAAM5B,KAAK6B,MAAM,CAACL,WAAWE;YAE7B,uBAAuB;YACvB,MAAMI,IAAAA,cAAO,EAAC;gBACZC,OAAOX,aAAM,CAACkB,SAAS,CAAC,qBAAqBC,iBAAiB;YAChE;YAEA,MAAMmC,oBAAoBtD,aAAM,CAACC,SAAS,CAAC,UAAU;gBAAEC,MAAM;YAAgB;YAC7E,MAAMtB,KAAKuB,KAAK,CAACmD;YAEjB,qCAAqC;YACrC,MAAM5C,IAAAA,cAAO,EAAC;gBACZC,OAAOX,aAAM,CAACkB,SAAS,CAAC,oBAAoBC,iBAAiB;YAC/D;YAEA,oCAAoC;YACpC,MAAMT,IAAAA,cAAO,EAAC;gBACZC,OAAOX,aAAM,CAACkB,SAAS,CAAC,mCAAmCC,iBAAiB;YAC9E,GAAG;gBAAEoC,SAAS;YAAM;YAEpB,iDAAiD;YACjD5C,OAAOyC,sBAAsBvC,oBAAoB,CAC/CF,OAAOG,gBAAgB,CAAC;gBACtB8B,WAAW;gBACXC,gBAAgB;gBAChBE,SAAS;YACX;QAEJ;QAEAhE,GAAG,wDAAwD;YACzD,UAAU;YACV,MAAMC,mBAAmB;gBACvBC,SAAS;gBACTC,QAAQ,EAAE;gBACVC,SAAS;oBAAC;wBAAE,eAAe;oBAAa;iBAAE;YAC5C;YAEAI,IAAAA,2BAAe,EAAC;gBACd,iCAAiC;oBAC/BC,QAAQ;oBACRC,MAAMT;gBACR;YACF;YAEAyC,IAAAA,wBAAY,EAAC,mBAAmB,KAAK;gBAAEC,OAAO;YAA6B,GAAG;YAE9E,MAAM,EAAE9C,IAAI,EAAE,GAAGc,IAAAA,8BAAmB,gBAClC,qBAACC,uBAAc;gBACbC,QAAQ;gBACRC,SAAStB,KAAKuB,EAAE;;YAIpB,4BAA4B;YAC5B,MAAMC,sBAAsBC,aAAM,CAACC,SAAS,CAAC,UAAU;gBAAEC,MAAM;YAAkB;YACjF,MAAMtB,KAAKuB,KAAK,CAACJ;YAEjB,MAAMK,YAAYJ,aAAM,CAACK,cAAc,CAAC;YACxC,MAAMC,UAAU,IAAIC,KAAK;gBAAC;aAAO,EAAE,YAAY;gBAAEC,MAAM;YAAW;YAClE,MAAM5B,KAAK6B,MAAM,CAACL,WAAWE;YAE7B,MAAMI,IAAAA,cAAO,EAAC;gBACZC,OAAOX,aAAM,CAACC,SAAS,CAAC,UAAU;oBAAEC,MAAM;gBAAgB,IAAIiB,iBAAiB;YACjF;YAEA,MAAMmC,oBAAoBtD,aAAM,CAACC,SAAS,CAAC,UAAU;gBAAEC,MAAM;YAAgB;YAC7E,MAAMtB,KAAKuB,KAAK,CAACmD;YAEjB,qCAAqC;YACrC,MAAM5C,IAAAA,cAAO,EAAC;gBACZC,OAAOX,aAAM,CAACkB,SAAS,CAAC,4BAA4BC,iBAAiB;YACvE;QACF;QAEApC,GAAG,6DAA6D;YAC9D,UAAU;YACV,MAAMC,mBAAmB;gBACvBC,SAAS;gBACTC,QAAQ,EAAE;gBACVC,SAAS;oBACP;wBAAE,eAAe;oBAAU;oBAC3B;wBAAE,eAAe;oBAAU;iBAC5B;YACH;YAEA,MAAM6C,eAAe;gBAAEC,UAAU;YAAa;YAE9C1C,IAAAA,2BAAe,EAAC;gBACd,iCAAiC;oBAC/BC,QAAQ;oBACRC,MAAMT;gBACR;gBACA,wBAAwB;oBACtBQ,QAAQ;oBACRC,MAAMuC;gBACR;YACF;YAEA,qCAAqC;YACrCvE,OAAOmD,KAAK,GAAGrC,KAAKuB,EAAE,CAAC,CAACqC,KAAKC;gBAC3B,IAAID,IAAIE,QAAQ,CAAC,eAAgBF,IAAIE,QAAQ,CAAC,sBAAsBD,SAASrB,WAAW,QAAS;oBAC/F,OAAOuB,QAAQC,OAAO,CAAC;wBACrBC,IAAI;wBACJC,MAAM,IAAMH,QAAQC,OAAO,CAACJ,IAAIE,QAAQ,CAAC,cAAcrD,mBAAmBgD;oBAC5E;gBACF;gBACA,IAAIG,IAAIE,QAAQ,CAAC,oCAAoC;oBACnD,OAAOC,QAAQC,OAAO,CAAC;wBACrBC,IAAI;wBACJC,MAAM,IAAMH,QAAQC,OAAO,CAAC;gCAC1B/C,QAAQ;gCACRkD,UAAU;gCACVC,SAAS;oCACPC,WAAW;oCACXC,gBAAgB;oCAChBC,YAAY;oCACZC,SAAS;oCACTC,SAAS;oCACTC,SAAS;oCACT/D,QAAQ;wCACN;4CAAEsE,KAAK;4CAAG9B,OAAO;wCAAuB;qCACzC;gCACH;4BACF;oBACF;gBACF;gBACA,OAAOY,QAAQa,MAAM,CAAC,IAAI3B,MAAM;YAClC;YAEA,MAAM,EAAE5C,IAAI,EAAE,GAAGc,IAAAA,8BAAmB,gBAClC,qBAACC,uBAAc;gBACbC,QAAQ;gBACRC,SAAStB,KAAKuB,EAAE;;YAIpB,6CAA6C;YAC7C,MAAMC,sBAAsBC,aAAM,CAACC,SAAS,CAAC,UAAU;gBAAEC,MAAM;YAAkB;YACjF,MAAMtB,KAAKuB,KAAK,CAACJ;YAEjB,MAAMK,YAAYJ,aAAM,CAACK,cAAc,CAAC;YACxC,MAAMC,UAAU,IAAIC,KAAK;gBAAC;aAAO,EAAE,YAAY;gBAAEC,MAAM;YAAW;YAClE,MAAM5B,KAAK6B,MAAM,CAACL,WAAWE;YAE7B,MAAMI,IAAAA,cAAO,EAAC;gBACZC,OAAOX,aAAM,CAACC,SAAS,CAAC,UAAU;oBAAEC,MAAM;gBAAgB,IAAIiB,iBAAiB;YACjF;YAEA,MAAMmC,oBAAoBtD,aAAM,CAACC,SAAS,CAAC,UAAU;gBAAEC,MAAM;YAAgB;YAC7E,MAAMtB,KAAKuB,KAAK,CAACmD;YAEjB,8CAA8C;YAC9C,MAAM5C,IAAAA,cAAO,EAAC;gBACZC,OAAOX,aAAM,CAACkB,SAAS,CAAC,sBAAsBC,iBAAiB;YACjE,GAAG;gBAAEoC,SAAS;YAAM;QAEpB,6FAA6F;QAC/F;IACF;IACDpF,SAAS,qDAAqD;QAC3DY,GAAG,oEAAoE;YACrE,UAAU;YACV,MAAM0E,wBAAwBC,SAASC,aAAa;YACpD,MAAMC,WAAW;gBACfC,cAActF,KAAKuB,EAAE;gBACrBK,OAAO5B,KAAKuB,EAAE;gBACdgE,OAAO,CAAC;YACV;YAEAJ,SAASC,aAAa,GAAGpF,KAAKuB,EAAE,CAAC,CAACiE;gBAChC,IAAIA,YAAY,KAAK;oBACnB,OAAOH;gBACT;gBACA,OAAOH,sBAAsBO,IAAI,CAACN,UAAUK;YAC9C;YAEA,MAAME,0BAA0BC,IAAIC,eAAe;YACnDD,IAAIC,eAAe,GAAG5F,KAAKuB,EAAE,CAAC,IAAM;YAEpC,MAAMsE,sBAAsBV,SAAS1C,IAAI,CAACqD,WAAW;YACrD,MAAMC,sBAAsBZ,SAAS1C,IAAI,CAACuD,WAAW;YACrDb,SAAS1C,IAAI,CAACqD,WAAW,GAAG9F,KAAKuB,EAAE;YACnC4D,SAAS1C,IAAI,CAACuD,WAAW,GAAGhG,KAAKuB,EAAE;YAEnC,MAAM,EAAElB,IAAI,EAAE,GAAGc,IAAAA,8BAAmB,gBAAC,qBAAC8E,mBAAU;YAEhD,yCAAyC;YACzC,MAAMC,yBAAyBzE,aAAM,CAACC,SAAS,CAAC,UAAU;gBAAEC,MAAM;YAA2B;YAC7F,MAAMtB,KAAKuB,KAAK,CAACsE;YAEjB,kDAAkD;YAClD9D,OAAOiD,SAASC,YAAY,EAAEhD,oBAAoB,CAAC,QAAQ;YAC3DF,OAAOiD,SAASC,YAAY,EAAEhD,oBAAoB,CAAC,YAAY;YAC/DF,OAAOiD,SAASzD,KAAK,EAAEuE,gBAAgB;YAEvC,UAAU;YACVhB,SAASC,aAAa,GAAGF;YACzBS,IAAIC,eAAe,GAAGF;YACtBP,SAAS1C,IAAI,CAACqD,WAAW,GAAGD;YAC5BV,SAAS1C,IAAI,CAACuD,WAAW,GAAGD;QAC9B;QAEAvF,GAAG,kDAAkD;YACnD,UAAU;YACV,MAAM4F,gBAAgB;gBACpB;oBACEC,IAAI;oBACJpE,MAAM;oBACNqE,UAAU;oBACVrF,QAAQ;oBACRsF,WAAW;oBACXnC,SAAS;wBACPC,WAAW;wBACXC,gBAAgB;wBAChBC,YAAY;wBACZC,SAAS;oBACX;gBACF;gBACA;oBACE6B,IAAI;oBACJpE,MAAM;oBACNqE,UAAU;oBACVrF,QAAQ;oBACRsF,WAAW;oBACXpC,UAAU;gBACZ;aACD;YAEDnD,IAAAA,2BAAe,EAAC;gBACd,uBAAuB;oBACrBC,QAAQ;oBACRC,MAAM;wBAAEsF,SAASJ;oBAAc;gBACjC;YACF;YAEA,MAAM,EAAE/F,IAAI,EAAE,GAAGc,IAAAA,8BAAmB,gBAAC,qBAAC8E,mBAAU;YAEhD,8BAA8B;YAC9B,MAAMQ,aAAahF,aAAM,CAACC,SAAS,CAAC,UAAU;gBAAEC,MAAM;YAAkB;YACxE,MAAMtB,KAAKuB,KAAK,CAAC6E;YAEjB,8CAA8C;YAC9C,MAAMtE,IAAAA,cAAO,EAAC;gBACZC,OAAOlD,OAAOmD,KAAK,EAAEC,oBAAoB,CAAC;YAC5C;QAEA,8FAA8F;QAChG;QAEA9B,GAAG,wEAAwE;YACzE,4BAA4B;YAC5B,uBAAuB;YACvB,4BAA4B;YAC5B,mBAAmB;YACnB,qBAAqB;YACrB,qBAAqB;YAErB,UAAU;YACV,MAAMC,mBAAmB;gBACvBC,SAAS;gBACTC,QAAQ,EAAE;gBACVC,SAAS;oBACP;wBAAEC,QAAQ;wBAAWC,OAAO;wBAAYC,SAAS;wBAAa,eAAe;oBAAqB;iBACnG;YACH;YAEA,MAAM0C,eAAe;gBAAEC,UAAU;YAAa;YAE9C1C,IAAAA,2BAAe,EAAC;gBACd,iCAAiC;oBAC/BC,QAAQ;oBACRC,MAAMT;gBACR;gBACA,wBAAwB;oBACtBQ,QAAQ;oBACRC,MAAMuC;gBACR;gBACA,uBAAuB;oBACrBxC,QAAQ;oBACRC,MAAM;wBACJsF,SAAS;4BAAC;gCACRH,IAAI;gCACJpE,MAAM;gCACNhB,QAAQ;gCACRmD,SAAS;oCAAEC,WAAW;oCAAGC,gBAAgB;oCAAGE,SAAS;gCAAE;4BACzD;yBAAE;oBACJ;gBACF;YACF;YAEA,2BAA2B;YAC3BtF,OAAOmD,KAAK,GAAGrC,KAAKuB,EAAE,CAAC,CAACqC,KAAKC;gBAC3B,IAAID,IAAIE,QAAQ,CAAC,aAAa;oBAC5B,OAAOC,QAAQC,OAAO,CAAC;wBACrBC,IAAI;wBACJC,MAAM,IAAMH,QAAQC,OAAO,CAACvD;oBAC9B;gBACF;gBACA,IAAImD,IAAIE,QAAQ,CAAC,sBAAsBD,SAASrB,WAAW,QAAQ;oBACjE,OAAOuB,QAAQC,OAAO,CAAC;wBACrBC,IAAI;wBACJC,MAAM,IAAMH,QAAQC,OAAO,CAACP;oBAC9B;gBACF;gBACA,IAAIG,IAAIE,QAAQ,CAAC,oCAAoC;oBACnD,OAAOC,QAAQC,OAAO,CAAC;wBACrBC,IAAI;wBACJC,MAAM,IAAMH,QAAQC,OAAO,CAAC;gCAC1B/C,QAAQ;gCACRkD,UAAU;gCACVC,SAAS;oCAAEC,WAAW;oCAAGC,gBAAgB;oCAAGE,SAAS;gCAAE;4BACzD;oBACF;gBACF;gBACA,IAAIZ,IAAIE,QAAQ,CAAC,sBAAsBD,SAASrB,WAAW,OAAO;oBAChE,OAAOuB,QAAQC,OAAO,CAAC;wBACrBC,IAAI;wBACJC,MAAM,IAAMH,QAAQC,OAAO,CAAC;gCAC1BwC,SAAS;oCAAC;wCACRH,IAAI;wCACJpE,MAAM;wCACNhB,QAAQ;wCACRmD,SAAS;4CAAEC,WAAW;4CAAGC,gBAAgB;4CAAGE,SAAS;wCAAE;oCACzD;iCAAE;4BACJ;oBACF;gBACF;gBACA,OAAOT,QAAQa,MAAM,CAAC,IAAI3B,MAAM;YAClC;YAEA,MAAM,EAAE5C,IAAI,EAAEqG,QAAQ,EAAE,GAAGvF,IAAAA,8BAAmB,gBAAC,qBAAC8E,mBAAU;YAE1D,2BAA2B;YAC3B,MAAMlB,oBAAoBtD,aAAM,CAACC,SAAS,CAAC,UAAU;gBAAEC,MAAM;YAAoB;YACjF,MAAMtB,KAAKuB,KAAK,CAACmD;YAEjB,gDAAgD;YAChD,MAAM5C,IAAAA,cAAO,EAAC;gBACZC,OAAOX,aAAM,CAACkB,SAAS,CAAC,qBAAqBC,iBAAiB;YAChE;YAEA,qCAAqC;YACrC8D,uBAAS,qBAACT,mBAAU;YAEpB,MAAMQ,aAAahF,aAAM,CAACC,SAAS,CAAC,UAAU;gBAAEC,MAAM;YAAkB;YACxE,MAAMtB,KAAKuB,KAAK,CAAC6E;YAEjB,sDAAsD;YACtD,MAAMtE,IAAAA,cAAO,EAAC;gBACZC,OAAOlD,OAAOmD,KAAK,EAAEC,oBAAoB,CAAC;YAC5C;QACF;IACF;IAEA1C,SAAS,sCAAsC;QAC7CY,GAAG,8CAA8C;YAC/C,UAAU;YACV,MAAMC,mBAAmB;gBACvBC,SAAS;gBACTC,QAAQ,EAAE;gBACVC,SAAS;oBAAC;wBAAE,eAAe;oBAAa;iBAAE;YAC5C;YAEA,uCAAuC;YACvC,IAAI+F,eAAe;YACnBzH,OAAOmD,KAAK,GAAGrC,KAAKuB,EAAE,CAAC,CAACqC,KAAKC;gBAC3B,IAAID,IAAIE,QAAQ,CAAC,aAAa;oBAC5B,OAAOC,QAAQC,OAAO,CAAC;wBACrBC,IAAI;wBACJC,MAAM,IAAMH,QAAQC,OAAO,CAACvD;oBAC9B;gBACF;gBACA,IAAImD,IAAIE,QAAQ,CAAC,sBAAsBD,SAASrB,WAAW,QAAQ;oBACjEmE;oBACA,IAAIA,iBAAiB,GAAG;wBACtB,OAAO5C,QAAQC,OAAO,CAAC;4BACrBC,IAAI;4BACJC,MAAM,IAAMH,QAAQC,OAAO,CAAC;oCAAEb,OAAO;gCAAyB;wBAChE;oBACF,OAAO;wBACL,OAAOY,QAAQC,OAAO,CAAC;4BACrBC,IAAI;4BACJC,MAAM,IAAMH,QAAQC,OAAO,CAAC;oCAAEN,UAAU;gCAAmB;wBAC7D;oBACF;gBACF;gBACA,OAAOK,QAAQa,MAAM,CAAC,IAAI3B,MAAM;YAClC;YAEA,MAAM,EAAE5C,IAAI,EAAE,GAAGc,IAAAA,8BAAmB,gBAClC,qBAACC,uBAAc;gBACbC,QAAQ;gBACRC,SAAStB,KAAKuB,EAAE;;YAIpB,8BAA8B;YAC9B,MAAMC,sBAAsBC,aAAM,CAACC,SAAS,CAAC,UAAU;gBAAEC,MAAM;YAAkB;YACjF,MAAMtB,KAAKuB,KAAK,CAACJ;YAEjB,MAAMK,YAAYJ,aAAM,CAACK,cAAc,CAAC;YACxC,MAAMC,UAAU,IAAIC,KAAK;gBAAC;aAAO,EAAE,YAAY;gBAAEC,MAAM;YAAW;YAClE,MAAM5B,KAAK6B,MAAM,CAACL,WAAWE;YAE7B,MAAMI,IAAAA,cAAO,EAAC;gBACZC,OAAOX,aAAM,CAACC,SAAS,CAAC,UAAU;oBAAEC,MAAM;gBAAgB,IAAIiB,iBAAiB;YACjF;YAEA,MAAMmC,oBAAoBtD,aAAM,CAACC,SAAS,CAAC,UAAU;gBAAEC,MAAM;YAAgB;YAC7E,MAAMtB,KAAKuB,KAAK,CAACmD;YAEjB,+BAA+B;YAC/B,MAAM5C,IAAAA,cAAO,EAAC;gBACZC,OAAOX,aAAM,CAACkB,SAAS,CAAC,4BAA4BC,iBAAiB;YACvE;YAEA,qBAAqB;YACrB,MAAMvC,KAAKuB,KAAK,CAACmD;YAEjB,yCAAyC;YACzC,MAAM5C,IAAAA,cAAO,EAAC;gBACZC,OAAOuE,cAAcC,IAAI,CAAC;YAC5B;QACF;QAEApG,GAAG,yDAAyD;YAC1D,UAAU;YACV,MAAMqG,eAAe;gBACnB;oBAAE1D,OAAO;oBAAkB2D,iBAAiB;gBAAmB;gBAC/D;oBAAE3D,OAAO;oBAAuB2D,iBAAiB;gBAAmB;gBACpE;oBAAE3D,OAAO;oBAA4B2D,iBAAiB;gBAAoB;gBAC1E;oBAAE3D,OAAO;oBAAmB2D,iBAAiB;gBAA+B;aAC7E;YAED,KAAK,MAAM,EAAE3D,KAAK,EAAE2D,eAAe,EAAE,IAAID,aAAc;gBACrD3D,IAAAA,wBAAY,EAAC,4BAA4B,KAAK;oBAAEC;gBAAM,GAAG;gBAEzD,MAAM,EAAE9C,IAAI,EAAE,GAAGc,IAAAA,8BAAmB,gBAClC,qBAACC,uBAAc;oBACbC,QAAQ;oBACRC,SAAStB,KAAKuB,EAAE;;gBAIpB,sBAAsB;gBACtB,MAAMC,sBAAsBC,aAAM,CAACC,SAAS,CAAC,UAAU;oBAAEC,MAAM;gBAAkB;gBACjF,MAAMtB,KAAKuB,KAAK,CAACJ;gBAEjB,MAAMK,YAAYJ,aAAM,CAACK,cAAc,CAAC;gBACxC,MAAMC,UAAU,IAAIC,KAAK;oBAAC;iBAAO,EAAE,YAAY;oBAAEC,MAAM;gBAAW;gBAClE,MAAM5B,KAAK6B,MAAM,CAACL,WAAWE;gBAE7B,4CAA4C;gBAC5C,MAAMI,IAAAA,cAAO,EAAC;oBACZC,OAAOX,aAAM,CAACkB,SAAS,CAACmE,kBAAkBlE,iBAAiB;gBAC7D;YACF;QACF;QAEApC,GAAG,kDAAkD;YACnD,UAAU;YACV,MAAMuG,cAAc/G,KAAKuB,EAAE;YAC3B,MAAM,EAAElB,IAAI,EAAE,GAAGc,IAAAA,8BAAmB,gBAClC,qBAACC,uBAAc;gBACbC,QAAQ;gBACRC,SAASyF;;YAIb,2CAA2C;YAC3C,MAAMC,cAAcvF,aAAM,CAACC,SAAS,CAAC,UAAU;gBAAEC,MAAM;YAAS;YAChE,MAAMtB,KAAKuB,KAAK,CAACoF;YAEjB,4CAA4C;YAC5C5E,OAAO2E,aAAaZ,gBAAgB;YAEpC,wBAAwB;YACxB,MAAM,EAAEO,QAAQ,EAAE,GAAGvF,IAAAA,8BAAmB,gBACtC,qBAACC,uBAAc;gBACbC,QAAQ;gBACRC,SAASyF;;YAIb,MAAM1G,KAAK4G,QAAQ,CAAC;QAEpB,wCAAwC;QACxC,2EAA2E;QAC7E;IACF;AACF"}