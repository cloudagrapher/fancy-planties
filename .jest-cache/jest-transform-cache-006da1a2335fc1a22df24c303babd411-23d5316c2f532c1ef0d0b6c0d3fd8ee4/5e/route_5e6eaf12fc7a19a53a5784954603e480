af0a510aa73842315b815a9e95e1f343
"use strict";

/* istanbul ignore next */
function cov_1mb5wohhoe() {
  var path = "/Users/stefanbekker/projects/fancy-planties/src/app/api/propagations/route.ts";
  var hash = "8b452d9c34d30169475cd73dcdb0c11b24e3a909";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/stefanbekker/projects/fancy-planties/src/app/api/propagations/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 18,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 19
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 20
        }
      },
      "6": {
        start: {
          line: 19,
          column: 0
        },
        end: {
          line: 19,
          column: 23
        }
      },
      "7": {
        start: {
          line: 20,
          column: 16
        },
        end: {
          line: 20,
          column: 38
        }
      },
      "8": {
        start: {
          line: 21,
          column: 17
        },
        end: {
          line: 21,
          column: 52
        }
      },
      "9": {
        start: {
          line: 22,
          column: 22
        },
        end: {
          line: 22,
          column: 69
        }
      },
      "10": {
        start: {
          line: 23,
          column: 13
        },
        end: {
          line: 23,
          column: 27
        }
      },
      "11": {
        start: {
          line: 25,
          column: 32
        },
        end: {
          line: 39,
          column: 2
        }
      },
      "12": {
        start: {
          line: 30,
          column: 61
        },
        end: {
          line: 30,
          column: 74
        }
      },
      "13": {
        start: {
          line: 41,
          column: 4
        },
        end: {
          line: 72,
          column: 5
        }
      },
      "14": {
        start: {
          line: 42,
          column: 25
        },
        end: {
          line: 42,
          column: 62
        }
      },
      "15": {
        start: {
          line: 43,
          column: 8
        },
        end: {
          line: 49,
          column: 9
        }
      },
      "16": {
        start: {
          line: 44,
          column: 12
        },
        end: {
          line: 48,
          column: 15
        }
      },
      "17": {
        start: {
          line: 50,
          column: 33
        },
        end: {
          line: 50,
          column: 53
        }
      },
      "18": {
        start: {
          line: 51,
          column: 23
        },
        end: {
          line: 51,
          column: 49
        }
      },
      "19": {
        start: {
          line: 52,
          column: 33
        },
        end: {
          line: 52,
          column: 69
        }
      },
      "20": {
        start: {
          line: 54,
          column: 8
        },
        end: {
          line: 63,
          column: 9
        }
      },
      "21": {
        start: {
          line: 56,
          column: 12
        },
        end: {
          line: 56,
          column: 95
        }
      },
      "22": {
        start: {
          line: 57,
          column: 15
        },
        end: {
          line: 63,
          column: 9
        }
      },
      "23": {
        start: {
          line: 59,
          column: 12
        },
        end: {
          line: 59,
          column: 118
        }
      },
      "24": {
        start: {
          line: 62,
          column: 12
        },
        end: {
          line: 62,
          column: 87
        }
      },
      "25": {
        start: {
          line: 64,
          column: 8
        },
        end: {
          line: 64,
          column: 55
        }
      },
      "26": {
        start: {
          line: 66,
          column: 8
        },
        end: {
          line: 66,
          column: 61
        }
      },
      "27": {
        start: {
          line: 67,
          column: 8
        },
        end: {
          line: 71,
          column: 11
        }
      },
      "28": {
        start: {
          line: 75,
          column: 4
        },
        end: {
          line: 115,
          column: 5
        }
      },
      "29": {
        start: {
          line: 76,
          column: 25
        },
        end: {
          line: 76,
          column: 62
        }
      },
      "30": {
        start: {
          line: 77,
          column: 8
        },
        end: {
          line: 83,
          column: 9
        }
      },
      "31": {
        start: {
          line: 78,
          column: 12
        },
        end: {
          line: 82,
          column: 15
        }
      },
      "32": {
        start: {
          line: 84,
          column: 21
        },
        end: {
          line: 84,
          column: 41
        }
      },
      "33": {
        start: {
          line: 85,
          column: 30
        },
        end: {
          line: 85,
          column: 65
        }
      },
      "34": {
        start: {
          line: 86,
          column: 28
        },
        end: {
          line: 96,
          column: 10
        }
      },
      "35": {
        start: {
          line: 97,
          column: 8
        },
        end: {
          line: 99,
          column: 11
        }
      },
      "36": {
        start: {
          line: 101,
          column: 8
        },
        end: {
          line: 101,
          column: 60
        }
      },
      "37": {
        start: {
          line: 102,
          column: 8
        },
        end: {
          line: 109,
          column: 9
        }
      },
      "38": {
        start: {
          line: 103,
          column: 12
        },
        end: {
          line: 108,
          column: 15
        }
      },
      "39": {
        start: {
          line: 110,
          column: 8
        },
        end: {
          line: 114,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        },
        loc: {
          start: {
            line: 12,
            column: 15
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 16
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 30,
            column: 54
          },
          end: {
            line: 30,
            column: 55
          }
        },
        loc: {
          start: {
            line: 30,
            column: 61
          },
          end: {
            line: 30,
            column: 74
          }
        },
        line: 30
      },
      "4": {
        name: "GET",
        decl: {
          start: {
            line: 40,
            column: 15
          },
          end: {
            line: 40,
            column: 18
          }
        },
        loc: {
          start: {
            line: 40,
            column: 28
          },
          end: {
            line: 73,
            column: 1
          }
        },
        line: 40
      },
      "5": {
        name: "POST",
        decl: {
          start: {
            line: 74,
            column: 15
          },
          end: {
            line: 74,
            column: 19
          }
        },
        loc: {
          start: {
            line: 74,
            column: 29
          },
          end: {
            line: 116,
            column: 1
          }
        },
        line: 74
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 43,
            column: 8
          },
          end: {
            line: 49,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 43,
            column: 8
          },
          end: {
            line: 49,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 43
      },
      "1": {
        loc: {
          start: {
            line: 54,
            column: 8
          },
          end: {
            line: 63,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 54,
            column: 8
          },
          end: {
            line: 63,
            column: 9
          }
        }, {
          start: {
            line: 57,
            column: 15
          },
          end: {
            line: 63,
            column: 9
          }
        }],
        line: 54
      },
      "2": {
        loc: {
          start: {
            line: 57,
            column: 15
          },
          end: {
            line: 63,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 57,
            column: 15
          },
          end: {
            line: 63,
            column: 9
          }
        }, {
          start: {
            line: 60,
            column: 15
          },
          end: {
            line: 63,
            column: 9
          }
        }],
        line: 57
      },
      "3": {
        loc: {
          start: {
            line: 77,
            column: 8
          },
          end: {
            line: 83,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 77,
            column: 8
          },
          end: {
            line: 83,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 77
      },
      "4": {
        loc: {
          start: {
            line: 102,
            column: 8
          },
          end: {
            line: 109,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 102,
            column: 8
          },
          end: {
            line: 109,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 102
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/stefanbekker/projects/fancy-planties/src/app/api/propagations/route.ts"],
      sourcesContent: ["import 'server-only';\n\nimport { NextRequest, NextResponse } from 'next/server';\nimport { validateRequest } from '@/lib/auth/server';\nimport { PropagationQueries } from '@/lib/db/queries/propagations';\nimport { z } from 'zod';\n\n// Validation schema for creating propagations\nconst createPropagationSchema = z.object({\n  plantId: z.number().int().positive(),\n  parentInstanceId: z.number().int().positive().optional().nullable(),\n  nickname: z.string().min(1).max(100),\n  location: z.string().min(1).max(100),\n  dateStarted: z.string().datetime().transform(str => new Date(str)),\n  status: z.enum(['started', 'rooting', 'planted', 'established']).default('started'),\n  notes: z.string().max(2000).optional().nullable(),\n  images: z.array(z.string()).max(10).default([]),\n});\n\n// GET /api/propagations - Get all propagations for the authenticated user\nexport async function GET(request: NextRequest) {\n  try {\n    const { user } = await validateRequest();\n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const { searchParams } = new URL(request.url);\n    const status = searchParams.get('status');\n    const parentInstanceId = searchParams.get('parentInstanceId');\n\n    let propagations;\n\n    if (status) {\n      // Get propagations by status\n      propagations = await PropagationQueries.getByStatus(\n        user.id, \n        status as 'started' | 'rooting' | 'planted' | 'established'\n      );\n    } else if (parentInstanceId) {\n      // Get propagations from a specific parent plant\n      propagations = await PropagationQueries.getByParentInstance(parseInt(parentInstanceId, 10));\n    } else {\n      // Get all propagations for user\n      propagations = await PropagationQueries.getByUserId(user.id);\n    }\n\n    return NextResponse.json(propagations);\n  } catch (error) {\n    console.error('Error fetching propagations:', error);\n    return NextResponse.json(\n      { error: 'Failed to fetch propagations' },\n      { status: 500 }\n    );\n  }\n}\n\n// POST /api/propagations - Create a new propagation\nexport async function POST(request: NextRequest) {\n  try {\n    const { user } = await validateRequest();\n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const body = await request.json();\n    const validatedData = createPropagationSchema.parse(body);\n\n    const propagation = await PropagationQueries.create({\n      userId: user.id,\n      plantId: validatedData.plantId,\n      parentInstanceId: validatedData.parentInstanceId,\n      nickname: validatedData.nickname,\n      location: validatedData.location,\n      dateStarted: validatedData.dateStarted,\n      status: validatedData.status,\n      notes: validatedData.notes,\n      images: validatedData.images,\n    });\n\n    return NextResponse.json(propagation, { status: 201 });\n  } catch (error) {\n    console.error('Error creating propagation:', error);\n    \n    if (error instanceof z.ZodError) {\n      return NextResponse.json(\n        { error: 'Invalid data', details: error.issues },\n        { status: 400 }\n      );\n    }\n\n    return NextResponse.json(\n      { error: 'Failed to create propagation' },\n      { status: 500 }\n    );\n  }\n}"],
      names: ["GET", "POST", "createPropagationSchema", "z", "object", "plantId", "number", "int", "positive", "parentInstanceId", "optional", "nullable", "nickname", "string", "min", "max", "location", "dateStarted", "datetime", "transform", "str", "Date", "status", "enum", "default", "notes", "images", "array", "request", "user", "validateRequest", "NextResponse", "json", "error", "searchParams", "URL", "url", "get", "propagations", "PropagationQueries", "getByStatus", "id", "getByParentInstance", "parseInt", "getByUserId", "console", "body", "validatedData", "parse", "propagation", "create", "userId", "ZodError", "details", "issues"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "8b452d9c34d30169475cd73dcdb0c11b24e3a909"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1mb5wohhoe = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1mb5wohhoe();
cov_1mb5wohhoe().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_1mb5wohhoe().f[0]++;
  cov_1mb5wohhoe().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_1mb5wohhoe().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_1mb5wohhoe().s[3]++;
_export(exports, {
  get GET() {
    /* istanbul ignore next */
    cov_1mb5wohhoe().f[1]++;
    cov_1mb5wohhoe().s[4]++;
    return GET;
  },
  get POST() {
    /* istanbul ignore next */
    cov_1mb5wohhoe().f[2]++;
    cov_1mb5wohhoe().s[5]++;
    return POST;
  }
});
/* istanbul ignore next */
cov_1mb5wohhoe().s[6]++;
require("server-only");
const _server =
/* istanbul ignore next */
(cov_1mb5wohhoe().s[7]++, require("next/server"));
const _server1 =
/* istanbul ignore next */
(cov_1mb5wohhoe().s[8]++, require("../../../lib/auth/server"));
const _propagations =
/* istanbul ignore next */
(cov_1mb5wohhoe().s[9]++, require("../../../lib/db/queries/propagations"));
const _zod =
/* istanbul ignore next */
(cov_1mb5wohhoe().s[10]++, require("zod"));
// Validation schema for creating propagations
const createPropagationSchema =
/* istanbul ignore next */
(cov_1mb5wohhoe().s[11]++, _zod.z.object({
  plantId: _zod.z.number().int().positive(),
  parentInstanceId: _zod.z.number().int().positive().optional().nullable(),
  nickname: _zod.z.string().min(1).max(100),
  location: _zod.z.string().min(1).max(100),
  dateStarted: _zod.z.string().datetime().transform(str => {
    /* istanbul ignore next */
    cov_1mb5wohhoe().f[3]++;
    cov_1mb5wohhoe().s[12]++;
    return new Date(str);
  }),
  status: _zod.z.enum(['started', 'rooting', 'planted', 'established']).default('started'),
  notes: _zod.z.string().max(2000).optional().nullable(),
  images: _zod.z.array(_zod.z.string()).max(10).default([])
}));
async function GET(request) {
  /* istanbul ignore next */
  cov_1mb5wohhoe().f[4]++;
  cov_1mb5wohhoe().s[13]++;
  try {
    const {
      user
    } =
    /* istanbul ignore next */
    (cov_1mb5wohhoe().s[14]++, await (0, _server1.validateRequest)());
    /* istanbul ignore next */
    cov_1mb5wohhoe().s[15]++;
    if (!user) {
      /* istanbul ignore next */
      cov_1mb5wohhoe().b[0][0]++;
      cov_1mb5wohhoe().s[16]++;
      return _server.NextResponse.json({
        error: 'Unauthorized'
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_1mb5wohhoe().b[0][1]++;
    }
    const {
      searchParams
    } =
    /* istanbul ignore next */
    (cov_1mb5wohhoe().s[17]++, new URL(request.url));
    const status =
    /* istanbul ignore next */
    (cov_1mb5wohhoe().s[18]++, searchParams.get('status'));
    const parentInstanceId =
    /* istanbul ignore next */
    (cov_1mb5wohhoe().s[19]++, searchParams.get('parentInstanceId'));
    let propagations;
    /* istanbul ignore next */
    cov_1mb5wohhoe().s[20]++;
    if (status) {
      /* istanbul ignore next */
      cov_1mb5wohhoe().b[1][0]++;
      cov_1mb5wohhoe().s[21]++;
      // Get propagations by status
      propagations = await _propagations.PropagationQueries.getByStatus(user.id, status);
    } else {
      /* istanbul ignore next */
      cov_1mb5wohhoe().b[1][1]++;
      cov_1mb5wohhoe().s[22]++;
      if (parentInstanceId) {
        /* istanbul ignore next */
        cov_1mb5wohhoe().b[2][0]++;
        cov_1mb5wohhoe().s[23]++;
        // Get propagations from a specific parent plant
        propagations = await _propagations.PropagationQueries.getByParentInstance(parseInt(parentInstanceId, 10));
      } else {
        /* istanbul ignore next */
        cov_1mb5wohhoe().b[2][1]++;
        cov_1mb5wohhoe().s[24]++;
        // Get all propagations for user
        propagations = await _propagations.PropagationQueries.getByUserId(user.id);
      }
    }
    /* istanbul ignore next */
    cov_1mb5wohhoe().s[25]++;
    return _server.NextResponse.json(propagations);
  } catch (error) {
    /* istanbul ignore next */
    cov_1mb5wohhoe().s[26]++;
    console.error('Error fetching propagations:', error);
    /* istanbul ignore next */
    cov_1mb5wohhoe().s[27]++;
    return _server.NextResponse.json({
      error: 'Failed to fetch propagations'
    }, {
      status: 500
    });
  }
}
async function POST(request) {
  /* istanbul ignore next */
  cov_1mb5wohhoe().f[5]++;
  cov_1mb5wohhoe().s[28]++;
  try {
    const {
      user
    } =
    /* istanbul ignore next */
    (cov_1mb5wohhoe().s[29]++, await (0, _server1.validateRequest)());
    /* istanbul ignore next */
    cov_1mb5wohhoe().s[30]++;
    if (!user) {
      /* istanbul ignore next */
      cov_1mb5wohhoe().b[3][0]++;
      cov_1mb5wohhoe().s[31]++;
      return _server.NextResponse.json({
        error: 'Unauthorized'
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_1mb5wohhoe().b[3][1]++;
    }
    const body =
    /* istanbul ignore next */
    (cov_1mb5wohhoe().s[32]++, await request.json());
    const validatedData =
    /* istanbul ignore next */
    (cov_1mb5wohhoe().s[33]++, createPropagationSchema.parse(body));
    const propagation =
    /* istanbul ignore next */
    (cov_1mb5wohhoe().s[34]++, await _propagations.PropagationQueries.create({
      userId: user.id,
      plantId: validatedData.plantId,
      parentInstanceId: validatedData.parentInstanceId,
      nickname: validatedData.nickname,
      location: validatedData.location,
      dateStarted: validatedData.dateStarted,
      status: validatedData.status,
      notes: validatedData.notes,
      images: validatedData.images
    }));
    /* istanbul ignore next */
    cov_1mb5wohhoe().s[35]++;
    return _server.NextResponse.json(propagation, {
      status: 201
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1mb5wohhoe().s[36]++;
    console.error('Error creating propagation:', error);
    /* istanbul ignore next */
    cov_1mb5wohhoe().s[37]++;
    if (error instanceof _zod.z.ZodError) {
      /* istanbul ignore next */
      cov_1mb5wohhoe().b[4][0]++;
      cov_1mb5wohhoe().s[38]++;
      return _server.NextResponse.json({
        error: 'Invalid data',
        details: error.issues
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1mb5wohhoe().b[4][1]++;
    }
    cov_1mb5wohhoe().s[39]++;
    return _server.NextResponse.json({
      error: 'Failed to create propagation'
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,