{"version":3,"names":["cov_1fquel92zb","actualCoverage","s","POST","verifyEmailSchema","_zod","z","object","email","string","code","length","regex","request","f","_emailverificationmiddleware","withVerificationRateLimit","req","body","b","_parsedBody","json","validation","safeParse","success","_server","NextResponse","error","details","issues","map","issue","field","path","join","message","status","data","isValid","_emailverificationcodeservice","emailVerificationCodeService","validateCode","console","log","redirectTo","VerificationCodeError","VerificationError","CODE_INVALID","incrementAttempts","incrementError","errorMessage","statusCode","CODE_EXPIRED","TOO_MANY_ATTEMPTS","USER_NOT_FOUND","ALREADY_VERIFIED"],"sources":["/Users/stefanbekker/projects/fancy-planties/src/app/api/auth/verify-email/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { z } from 'zod';\nimport { emailVerificationCodeService, VerificationCodeError, VerificationError } from '@/lib/services/email-verification-code-service';\nimport { withVerificationRateLimit } from '@/lib/auth/email-verification-middleware';\n\n// Validation schema for email verification request\nconst verifyEmailSchema = z.object({\n  email: z.string().email('Invalid email address'),\n  code: z.string().length(6, 'Verification code must be 6 digits').regex(/^\\d{6}$/, 'Verification code must contain only digits'),\n});\n\n// Note: Rate limiting is handled by the withVerificationRateLimit middleware with enhanced email verification limits\n\nexport async function POST(request: NextRequest) {\n  return withVerificationRateLimit(request, async (req) => {\n    // Extract parsed body from middleware\n    const body = (req as any)._parsedBody || await req.json();\n    try {\n      // Validate input\n      const validation = verifyEmailSchema.safeParse(body);\n      if (!validation.success) {\n        return NextResponse.json(\n          { \n            error: 'Validation failed', \n            details: validation.error.issues.map(issue => ({\n              field: issue.path.join('.'),\n              message: issue.message\n            }))\n          },\n          { status: 400 }\n        );\n      }\n      \n      const { email, code } = validation.data;\n      \n      try {\n        // Validate the verification code\n        const isValid = await emailVerificationCodeService.validateCode(email, code);\n        \n        if (isValid) {\n          console.log(`Email verification successful for ${email}`);\n          \n          return NextResponse.json({\n            success: true,\n            message: 'Email verified successfully! You can now access your account.',\n            redirectTo: '/dashboard'\n          });\n        }\n        \n        // This shouldn't happen if validateCode works correctly, but just in case\n        return NextResponse.json(\n          { error: 'Verification failed' },\n          { status: 400 }\n        );\n        \n      } catch (error) {\n        if (error instanceof VerificationCodeError) {\n          // Increment attempts for invalid codes (but not for other errors)\n          if (error.code === VerificationError.CODE_INVALID) {\n            try {\n              await emailVerificationCodeService.incrementAttempts(email, code);\n            } catch (incrementError) {\n              console.error('Failed to increment verification attempts:', incrementError);\n            }\n          }\n          \n          // Map verification errors to user-friendly messages\n          let errorMessage: string;\n          let statusCode = 400;\n          \n          switch (error.code) {\n            case VerificationError.CODE_EXPIRED:\n              errorMessage = 'Verification code has expired. Please request a new one.';\n              break;\n            case VerificationError.CODE_INVALID:\n              errorMessage = 'Invalid verification code. Please check and try again.';\n              break;\n            case VerificationError.TOO_MANY_ATTEMPTS:\n              errorMessage = 'Too many verification attempts. Please request a new code.';\n              statusCode = 429;\n              break;\n            case VerificationError.USER_NOT_FOUND:\n              errorMessage = 'User not found. Please sign up first.';\n              statusCode = 404;\n              break;\n            case VerificationError.ALREADY_VERIFIED:\n              errorMessage = 'Email is already verified. You can sign in to your account.';\n              return NextResponse.json({\n                success: true,\n                message: errorMessage,\n                redirectTo: '/auth/signin'\n              });\n            default:\n              errorMessage = 'Verification failed. Please try again.';\n          }\n          \n          console.log(`Email verification failed for ${email}: ${error.code} - ${errorMessage}`);\n          \n          return NextResponse.json(\n            { \n              error: errorMessage,\n              code: error.code\n            },\n            { status: statusCode }\n          );\n        }\n        \n        // Log unexpected errors\n        console.error('Unexpected error during email verification:', error);\n        \n        return NextResponse.json(\n          { error: 'Internal server error' },\n          { status: 500 }\n        );\n      }\n      \n    } catch (error) {\n      console.error('Email verification endpoint error:', error);\n      \n      return NextResponse.json(\n        { error: 'Internal server error' },\n        { status: 500 }\n      );\n    }\n  });\n}"],"mappings":"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","ignoreList":[]}