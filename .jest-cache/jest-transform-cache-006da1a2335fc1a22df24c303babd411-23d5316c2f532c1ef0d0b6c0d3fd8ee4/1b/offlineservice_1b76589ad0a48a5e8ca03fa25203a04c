642e492a98fd2c61b99f9e67fa1f4b66
"use strict";

/* istanbul ignore next */
function cov_1ny8jjfzgv() {
  var path = "/Users/stefanbekker/projects/fancy-planties/src/lib/services/offline-service.ts";
  var hash = "94af169c29b679421588e074ad9d26d4c1a16d35";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/stefanbekker/projects/fancy-planties/src/lib/services/offline-service.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 30
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 11,
          column: 23
        }
      },
      "4": {
        start: {
          line: 12,
          column: 12
        },
        end: {
          line: 12,
          column: 28
        }
      },
      "5": {
        start: {
          line: 13,
          column: 16
        },
        end: {
          line: 13,
          column: 39
        }
      },
      "6": {
        start: {
          line: 14,
          column: 20
        },
        end: {
          line: 14,
          column: 42
        }
      },
      "7": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 75,
          column: 9
        }
      },
      "8": {
        start: {
          line: 21,
          column: 31
        },
        end: {
          line: 42,
          column: 288
        }
      },
      "9": {
        start: {
          line: 44,
          column: 37
        },
        end: {
          line: 61,
          column: 200
        }
      },
      "10": {
        start: {
          line: 63,
          column: 34
        },
        end: {
          line: 63,
          column: 44
        }
      },
      "11": {
        start: {
          line: 64,
          column: 12
        },
        end: {
          line: 64,
          column: 64
        }
      },
      "12": {
        start: {
          line: 65,
          column: 38
        },
        end: {
          line: 65,
          column: 243
        }
      },
      "13": {
        start: {
          line: 66,
          column: 12
        },
        end: {
          line: 71,
          column: 14
        }
      },
      "14": {
        start: {
          line: 73,
          column: 12
        },
        end: {
          line: 73,
          column: 64
        }
      },
      "15": {
        start: {
          line: 74,
          column: 12
        },
        end: {
          line: 74,
          column: 62
        }
      },
      "16": {
        start: {
          line: 80,
          column: 24
        },
        end: {
          line: 80,
          column: 26
        }
      },
      "17": {
        start: {
          line: 81,
          column: 8
        },
        end: {
          line: 104,
          column: 9
        }
      },
      "18": {
        start: {
          line: 82,
          column: 12
        },
        end: {
          line: 103,
          column: 13
        }
      },
      "19": {
        start: {
          line: 84,
          column: 31
        },
        end: {
          line: 90,
          column: 30
        }
      },
      "20": {
        start: {
          line: 91,
          column: 16
        },
        end: {
          line: 95,
          column: 19
        }
      },
      "21": {
        start: {
          line: 97,
          column: 16
        },
        end: {
          line: 97,
          column: 77
        }
      },
      "22": {
        start: {
          line: 98,
          column: 16
        },
        end: {
          line: 102,
          column: 19
        }
      },
      "23": {
        start: {
          line: 105,
          column: 8
        },
        end: {
          line: 105,
          column: 23
        }
      },
      "24": {
        start: {
          line: 110,
          column: 25
        },
        end: {
          line: 110,
          column: 43
        }
      },
      "25": {
        start: {
          line: 111,
          column: 8
        },
        end: {
          line: 127,
          column: 9
        }
      },
      "26": {
        start: {
          line: 113,
          column: 34
        },
        end: {
          line: 113,
          column: 269
        }
      },
      "27": {
        start: {
          line: 115,
          column: 40
        },
        end: {
          line: 115,
          column: 269
        }
      },
      "28": {
        start: {
          line: 117,
          column: 35
        },
        end: {
          line: 117,
          column: 167
        }
      },
      "29": {
        start: {
          line: 118,
          column: 12
        },
        end: {
          line: 123,
          column: 14
        }
      },
      "30": {
        start: {
          line: 125,
          column: 12
        },
        end: {
          line: 125,
          column: 72
        }
      },
      "31": {
        start: {
          line: 126,
          column: 12
        },
        end: {
          line: 126,
          column: 58
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 18,
            column: 6
          },
          end: {
            line: 18,
            column: 7
          }
        },
        loc: {
          start: {
            line: 18,
            column: 42
          },
          end: {
            line: 76,
            column: 5
          }
        },
        line: 18
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 79,
            column: 6
          },
          end: {
            line: 79,
            column: 7
          }
        },
        loc: {
          start: {
            line: 79,
            column: 69
          },
          end: {
            line: 106,
            column: 5
          }
        },
        line: 79
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 109,
            column: 6
          },
          end: {
            line: 109,
            column: 7
          }
        },
        loc: {
          start: {
            line: 109,
            column: 50
          },
          end: {
            line: 128,
            column: 5
          }
        },
        line: 109
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 101,
            column: 27
          },
          end: {
            line: 101,
            column: 83
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 101,
            column: 52
          },
          end: {
            line: 101,
            column: 65
          }
        }, {
          start: {
            line: 101,
            column: 68
          },
          end: {
            line: 101,
            column: 83
          }
        }],
        line: 101
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0
    },
    b: {
      "0": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/stefanbekker/projects/fancy-planties/src/lib/services/offline-service.ts"],
      sourcesContent: ["import 'server-only';\n\nimport { db } from '@/lib/db';\nimport { plantInstances, plants, propagations, careHistory } from '@/lib/db/schema';\nimport { eq, and, desc } from 'drizzle-orm';\n\n/**\n * Offline Service - Server-side utilities for offline data preparation\n * Prepares data for offline caching and handles sync operations\n */\nexport class OfflineService {\n  /**\n   * Get essential plant data for offline caching\n   */\n  static async getOfflineData(userId: number) {\n    try {\n      // Get user's active plant instances with plant taxonomy\n      const userPlants = await db\n        .select({\n          id: plantInstances.id,\n          nickname: plantInstances.nickname,\n          location: plantInstances.location,\n          lastFertilized: plantInstances.lastFertilized,\n          fertilizerSchedule: plantInstances.fertilizerSchedule,\n          fertilizerDue: plantInstances.fertilizerDue,\n          lastRepot: plantInstances.lastRepot,\n          notes: plantInstances.notes,\n          images: plantInstances.images,\n          isActive: plantInstances.isActive,\n          createdAt: plantInstances.createdAt,\n          updatedAt: plantInstances.updatedAt,\n          plant: {\n            id: plants.id,\n            family: plants.family,\n            genus: plants.genus,\n            species: plants.species,\n            commonName: plants.commonName,\n            careInstructions: plants.careInstructions,\n          }\n        })\n        .from(plantInstances)\n        .leftJoin(plants, eq(plantInstances.plantId, plants.id))\n        .where(and(\n          eq(plantInstances.userId, userId),\n          eq(plantInstances.isActive, true)\n        ));\n\n      // Get user's active propagations\n      const userPropagations = await db\n        .select({\n          id: propagations.id,\n          nickname: propagations.nickname,\n          location: propagations.location,\n          dateStarted: propagations.dateStarted,\n          status: propagations.status,\n          notes: propagations.notes,\n          images: propagations.images,\n          createdAt: propagations.createdAt,\n          updatedAt: propagations.updatedAt,\n          plant: {\n            id: plants.id,\n            family: plants.family,\n            genus: plants.genus,\n            species: plants.species,\n            commonName: plants.commonName,\n          }\n        })\n        .from(propagations)\n        .leftJoin(plants, eq(propagations.plantId, plants.id))\n        .where(eq(propagations.userId, userId));\n\n      // Get recent care history (last 30 days)\n      const thirtyDaysAgo = new Date();\n      thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n\n      const recentCareHistory = await db\n        .select()\n        .from(careHistory)\n        .where(and(\n          eq(careHistory.userId, userId),\n          // Add date filter when we have a date column\n        ))\n        .orderBy(desc(careHistory.createdAt))\n        .limit(100);\n\n      return {\n        plants: userPlants,\n        propagations: userPropagations,\n        careHistory: recentCareHistory,\n        lastSync: new Date().toISOString(),\n      };\n    } catch (error) {\n      console.error('Error getting offline data:', error);\n      throw new Error('Failed to prepare offline data');\n    }\n  }\n\n  /**\n   * Process offline care log entries when back online\n   */\n  static async processPendingCareEntries(userId: number, pendingEntries: any[]) {\n    const results = [];\n    \n    for (const entry of pendingEntries) {\n      try {\n        // Process each pending care entry\n        const result = await db\n          .insert(careHistory)\n          .values({\n            userId,\n            plantInstanceId: entry.plantInstanceId,\n            careType: entry.careType,\n            careDate: new Date(entry.timestamp),\n            notes: entry.notes,\n          })\n          .returning();\n\n        results.push({ success: true, entry, result: result[0] });\n      } catch (error) {\n        console.error('Error processing pending care entry:', error);\n        results.push({ \n          success: false, \n          entry, \n          error: error instanceof Error ? error.message : 'Unknown error'\n        });\n      }\n    }\n\n    return results;\n  }\n\n  /**\n   * Get data that has changed since last sync\n   */\n  static async getDataSince(userId: number, lastSync: string) {\n    const syncDate = new Date(lastSync);\n\n    try {\n      // Get plants updated since last sync\n      const updatedPlants = await db\n        .select()\n        .from(plantInstances)\n        .leftJoin(plants, eq(plantInstances.plantId, plants.id))\n        .where(and(\n          eq(plantInstances.userId, userId),\n          // Add updatedAt filter when available\n        ));\n\n      // Get propagations updated since last sync\n      const updatedPropagations = await db\n        .select()\n        .from(propagations)\n        .leftJoin(plants, eq(propagations.plantId, plants.id))\n        .where(and(\n          eq(propagations.userId, userId),\n          // Add updatedAt filter when available\n        ));\n\n      // Get new care history since last sync\n      const newCareHistory = await db\n        .select()\n        .from(careHistory)\n        .where(and(\n          eq(careHistory.userId, userId),\n          // Add createdAt filter when available\n        ));\n\n      return {\n        plants: updatedPlants,\n        propagations: updatedPropagations,\n        careHistory: newCareHistory,\n        syncTimestamp: new Date().toISOString(),\n      };\n    } catch (error) {\n      console.error('Error getting data since last sync:', error);\n      throw new Error('Failed to get updated data');\n    }\n  }\n}"],
      names: ["OfflineService", "getOfflineData", "userId", "userPlants", "db", "select", "id", "plantInstances", "nickname", "location", "lastFertilized", "fertilizerSchedule", "fertilizerDue", "lastRepot", "notes", "images", "isActive", "createdAt", "updatedAt", "plant", "plants", "family", "genus", "species", "commonName", "careInstructions", "from", "leftJoin", "eq", "plantId", "where", "and", "userPropagations", "propagations", "dateStarted", "status", "thirtyDaysAgo", "Date", "setDate", "getDate", "recentCareHistory", "careHistory", "orderBy", "desc", "limit", "lastSync", "toISOString", "error", "console", "Error", "processPendingCareEntries", "pendingEntries", "results", "entry", "result", "insert", "values", "plantInstanceId", "careType", "careDate", "timestamp", "returning", "push", "success", "message", "getDataSince", "syncDate", "updatedPlants", "updatedPropagations", "newCareHistory", "syncTimestamp"],
      mappings: ";;;;+BAUaA;;;eAAAA;;;QAVN;oBAEY;wBAC+C;4BACpC;AAMvB,MAAMA;IACX;;GAEC,GACD,aAAaC,eAAeC,MAAc,EAAE;QAC1C,IAAI;YACF,wDAAwD;YACxD,MAAMC,aAAa,MAAMC,MAAE,CACxBC,MAAM,CAAC;gBACNC,IAAIC,sBAAc,CAACD,EAAE;gBACrBE,UAAUD,sBAAc,CAACC,QAAQ;gBACjCC,UAAUF,sBAAc,CAACE,QAAQ;gBACjCC,gBAAgBH,sBAAc,CAACG,cAAc;gBAC7CC,oBAAoBJ,sBAAc,CAACI,kBAAkB;gBACrDC,eAAeL,sBAAc,CAACK,aAAa;gBAC3CC,WAAWN,sBAAc,CAACM,SAAS;gBACnCC,OAAOP,sBAAc,CAACO,KAAK;gBAC3BC,QAAQR,sBAAc,CAACQ,MAAM;gBAC7BC,UAAUT,sBAAc,CAACS,QAAQ;gBACjCC,WAAWV,sBAAc,CAACU,SAAS;gBACnCC,WAAWX,sBAAc,CAACW,SAAS;gBACnCC,OAAO;oBACLb,IAAIc,cAAM,CAACd,EAAE;oBACbe,QAAQD,cAAM,CAACC,MAAM;oBACrBC,OAAOF,cAAM,CAACE,KAAK;oBACnBC,SAASH,cAAM,CAACG,OAAO;oBACvBC,YAAYJ,cAAM,CAACI,UAAU;oBAC7BC,kBAAkBL,cAAM,CAACK,gBAAgB;gBAC3C;YACF,GACCC,IAAI,CAACnB,sBAAc,EACnBoB,QAAQ,CAACP,cAAM,EAAEQ,IAAAA,cAAE,EAACrB,sBAAc,CAACsB,OAAO,EAAET,cAAM,CAACd,EAAE,GACrDwB,KAAK,CAACC,IAAAA,eAAG,EACRH,IAAAA,cAAE,EAACrB,sBAAc,CAACL,MAAM,EAAEA,SAC1B0B,IAAAA,cAAE,EAACrB,sBAAc,CAACS,QAAQ,EAAE;YAGhC,iCAAiC;YACjC,MAAMgB,mBAAmB,MAAM5B,MAAE,CAC9BC,MAAM,CAAC;gBACNC,IAAI2B,oBAAY,CAAC3B,EAAE;gBACnBE,UAAUyB,oBAAY,CAACzB,QAAQ;gBAC/BC,UAAUwB,oBAAY,CAACxB,QAAQ;gBAC/ByB,aAAaD,oBAAY,CAACC,WAAW;gBACrCC,QAAQF,oBAAY,CAACE,MAAM;gBAC3BrB,OAAOmB,oBAAY,CAACnB,KAAK;gBACzBC,QAAQkB,oBAAY,CAAClB,MAAM;gBAC3BE,WAAWgB,oBAAY,CAAChB,SAAS;gBACjCC,WAAWe,oBAAY,CAACf,SAAS;gBACjCC,OAAO;oBACLb,IAAIc,cAAM,CAACd,EAAE;oBACbe,QAAQD,cAAM,CAACC,MAAM;oBACrBC,OAAOF,cAAM,CAACE,KAAK;oBACnBC,SAASH,cAAM,CAACG,OAAO;oBACvBC,YAAYJ,cAAM,CAACI,UAAU;gBAC/B;YACF,GACCE,IAAI,CAACO,oBAAY,EACjBN,QAAQ,CAACP,cAAM,EAAEQ,IAAAA,cAAE,EAACK,oBAAY,CAACJ,OAAO,EAAET,cAAM,CAACd,EAAE,GACnDwB,KAAK,CAACF,IAAAA,cAAE,EAACK,oBAAY,CAAC/B,MAAM,EAAEA;YAEjC,yCAAyC;YACzC,MAAMkC,gBAAgB,IAAIC;YAC1BD,cAAcE,OAAO,CAACF,cAAcG,OAAO,KAAK;YAEhD,MAAMC,oBAAoB,MAAMpC,MAAE,CAC/BC,MAAM,GACNqB,IAAI,CAACe,mBAAW,EAChBX,KAAK,CAACC,IAAAA,eAAG,EACRH,IAAAA,cAAE,EAACa,mBAAW,CAACvC,MAAM,EAAEA,UAGxBwC,OAAO,CAACC,IAAAA,gBAAI,EAACF,mBAAW,CAACxB,SAAS,GAClC2B,KAAK,CAAC;YAET,OAAO;gBACLxB,QAAQjB;gBACR8B,cAAcD;gBACdS,aAAaD;gBACbK,UAAU,IAAIR,OAAOS,WAAW;YAClC;QACF,EAAE,OAAOC,OAAO;YACdC,QAAQD,KAAK,CAAC,+BAA+BA;YAC7C,MAAM,IAAIE,MAAM;QAClB;IACF;IAEA;;GAEC,GACD,aAAaC,0BAA0BhD,MAAc,EAAEiD,cAAqB,EAAE;QAC5E,MAAMC,UAAU,EAAE;QAElB,KAAK,MAAMC,SAASF,eAAgB;YAClC,IAAI;gBACF,kCAAkC;gBAClC,MAAMG,SAAS,MAAMlD,MAAE,CACpBmD,MAAM,CAACd,mBAAW,EAClBe,MAAM,CAAC;oBACNtD;oBACAuD,iBAAiBJ,MAAMI,eAAe;oBACtCC,UAAUL,MAAMK,QAAQ;oBACxBC,UAAU,IAAItB,KAAKgB,MAAMO,SAAS;oBAClC9C,OAAOuC,MAAMvC,KAAK;gBACpB,GACC+C,SAAS;gBAEZT,QAAQU,IAAI,CAAC;oBAAEC,SAAS;oBAAMV;oBAAOC,QAAQA,MAAM,CAAC,EAAE;gBAAC;YACzD,EAAE,OAAOP,OAAO;gBACdC,QAAQD,KAAK,CAAC,wCAAwCA;gBACtDK,QAAQU,IAAI,CAAC;oBACXC,SAAS;oBACTV;oBACAN,OAAOA,iBAAiBE,QAAQF,MAAMiB,OAAO,GAAG;gBAClD;YACF;QACF;QAEA,OAAOZ;IACT;IAEA;;GAEC,GACD,aAAaa,aAAa/D,MAAc,EAAE2C,QAAgB,EAAE;QAC1D,MAAMqB,WAAW,IAAI7B,KAAKQ;QAE1B,IAAI;YACF,qCAAqC;YACrC,MAAMsB,gBAAgB,MAAM/D,MAAE,CAC3BC,MAAM,GACNqB,IAAI,CAACnB,sBAAc,EACnBoB,QAAQ,CAACP,cAAM,EAAEQ,IAAAA,cAAE,EAACrB,sBAAc,CAACsB,OAAO,EAAET,cAAM,CAACd,EAAE,GACrDwB,KAAK,CAACC,IAAAA,eAAG,EACRH,IAAAA,cAAE,EAACrB,sBAAc,CAACL,MAAM,EAAEA;YAI9B,2CAA2C;YAC3C,MAAMkE,sBAAsB,MAAMhE,MAAE,CACjCC,MAAM,GACNqB,IAAI,CAACO,oBAAY,EACjBN,QAAQ,CAACP,cAAM,EAAEQ,IAAAA,cAAE,EAACK,oBAAY,CAACJ,OAAO,EAAET,cAAM,CAACd,EAAE,GACnDwB,KAAK,CAACC,IAAAA,eAAG,EACRH,IAAAA,cAAE,EAACK,oBAAY,CAAC/B,MAAM,EAAEA;YAI5B,uCAAuC;YACvC,MAAMmE,iBAAiB,MAAMjE,MAAE,CAC5BC,MAAM,GACNqB,IAAI,CAACe,mBAAW,EAChBX,KAAK,CAACC,IAAAA,eAAG,EACRH,IAAAA,cAAE,EAACa,mBAAW,CAACvC,MAAM,EAAEA;YAI3B,OAAO;gBACLkB,QAAQ+C;gBACRlC,cAAcmC;gBACd3B,aAAa4B;gBACbC,eAAe,IAAIjC,OAAOS,WAAW;YACvC;QACF,EAAE,OAAOC,OAAO;YACdC,QAAQD,KAAK,CAAC,uCAAuCA;YACrD,MAAM,IAAIE,MAAM;QAClB;IACF;AACF"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "94af169c29b679421588e074ad9d26d4c1a16d35"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1ny8jjfzgv = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1ny8jjfzgv();
cov_1ny8jjfzgv().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1ny8jjfzgv().s[1]++;
Object.defineProperty(exports, "OfflineService", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_1ny8jjfzgv().f[0]++;
    cov_1ny8jjfzgv().s[2]++;
    return OfflineService;
  }
});
/* istanbul ignore next */
cov_1ny8jjfzgv().s[3]++;
require("server-only");
const _db =
/* istanbul ignore next */
(cov_1ny8jjfzgv().s[4]++, require("../db"));
const _schema =
/* istanbul ignore next */
(cov_1ny8jjfzgv().s[5]++, require("../db/schema"));
const _drizzleorm =
/* istanbul ignore next */
(cov_1ny8jjfzgv().s[6]++, require("drizzle-orm"));
class OfflineService {
  /**
  * Get essential plant data for offline caching
  */
  static async getOfflineData(userId) {
    /* istanbul ignore next */
    cov_1ny8jjfzgv().f[1]++;
    cov_1ny8jjfzgv().s[7]++;
    try {
      // Get user's active plant instances with plant taxonomy
      const userPlants =
      /* istanbul ignore next */
      (cov_1ny8jjfzgv().s[8]++, await _db.db.select({
        id: _schema.plantInstances.id,
        nickname: _schema.plantInstances.nickname,
        location: _schema.plantInstances.location,
        lastFertilized: _schema.plantInstances.lastFertilized,
        fertilizerSchedule: _schema.plantInstances.fertilizerSchedule,
        fertilizerDue: _schema.plantInstances.fertilizerDue,
        lastRepot: _schema.plantInstances.lastRepot,
        notes: _schema.plantInstances.notes,
        images: _schema.plantInstances.images,
        isActive: _schema.plantInstances.isActive,
        createdAt: _schema.plantInstances.createdAt,
        updatedAt: _schema.plantInstances.updatedAt,
        plant: {
          id: _schema.plants.id,
          family: _schema.plants.family,
          genus: _schema.plants.genus,
          species: _schema.plants.species,
          commonName: _schema.plants.commonName,
          careInstructions: _schema.plants.careInstructions
        }
      }).from(_schema.plantInstances).leftJoin(_schema.plants, (0, _drizzleorm.eq)(_schema.plantInstances.plantId, _schema.plants.id)).where((0, _drizzleorm.and)((0, _drizzleorm.eq)(_schema.plantInstances.userId, userId), (0, _drizzleorm.eq)(_schema.plantInstances.isActive, true))));
      // Get user's active propagations
      const userPropagations =
      /* istanbul ignore next */
      (cov_1ny8jjfzgv().s[9]++, await _db.db.select({
        id: _schema.propagations.id,
        nickname: _schema.propagations.nickname,
        location: _schema.propagations.location,
        dateStarted: _schema.propagations.dateStarted,
        status: _schema.propagations.status,
        notes: _schema.propagations.notes,
        images: _schema.propagations.images,
        createdAt: _schema.propagations.createdAt,
        updatedAt: _schema.propagations.updatedAt,
        plant: {
          id: _schema.plants.id,
          family: _schema.plants.family,
          genus: _schema.plants.genus,
          species: _schema.plants.species,
          commonName: _schema.plants.commonName
        }
      }).from(_schema.propagations).leftJoin(_schema.plants, (0, _drizzleorm.eq)(_schema.propagations.plantId, _schema.plants.id)).where((0, _drizzleorm.eq)(_schema.propagations.userId, userId)));
      // Get recent care history (last 30 days)
      const thirtyDaysAgo =
      /* istanbul ignore next */
      (cov_1ny8jjfzgv().s[10]++, new Date());
      /* istanbul ignore next */
      cov_1ny8jjfzgv().s[11]++;
      thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
      const recentCareHistory =
      /* istanbul ignore next */
      (cov_1ny8jjfzgv().s[12]++, await _db.db.select().from(_schema.careHistory).where((0, _drizzleorm.and)((0, _drizzleorm.eq)(_schema.careHistory.userId, userId))).orderBy((0, _drizzleorm.desc)(_schema.careHistory.createdAt)).limit(100));
      /* istanbul ignore next */
      cov_1ny8jjfzgv().s[13]++;
      return {
        plants: userPlants,
        propagations: userPropagations,
        careHistory: recentCareHistory,
        lastSync: new Date().toISOString()
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1ny8jjfzgv().s[14]++;
      console.error('Error getting offline data:', error);
      /* istanbul ignore next */
      cov_1ny8jjfzgv().s[15]++;
      throw new Error('Failed to prepare offline data');
    }
  }
  /**
  * Process offline care log entries when back online
  */
  static async processPendingCareEntries(userId, pendingEntries) {
    /* istanbul ignore next */
    cov_1ny8jjfzgv().f[2]++;
    const results =
    /* istanbul ignore next */
    (cov_1ny8jjfzgv().s[16]++, []);
    /* istanbul ignore next */
    cov_1ny8jjfzgv().s[17]++;
    for (const entry of pendingEntries) {
      /* istanbul ignore next */
      cov_1ny8jjfzgv().s[18]++;
      try {
        // Process each pending care entry
        const result =
        /* istanbul ignore next */
        (cov_1ny8jjfzgv().s[19]++, await _db.db.insert(_schema.careHistory).values({
          userId,
          plantInstanceId: entry.plantInstanceId,
          careType: entry.careType,
          careDate: new Date(entry.timestamp),
          notes: entry.notes
        }).returning());
        /* istanbul ignore next */
        cov_1ny8jjfzgv().s[20]++;
        results.push({
          success: true,
          entry,
          result: result[0]
        });
      } catch (error) {
        /* istanbul ignore next */
        cov_1ny8jjfzgv().s[21]++;
        console.error('Error processing pending care entry:', error);
        /* istanbul ignore next */
        cov_1ny8jjfzgv().s[22]++;
        results.push({
          success: false,
          entry,
          error: error instanceof Error ?
          /* istanbul ignore next */
          (cov_1ny8jjfzgv().b[0][0]++, error.message) :
          /* istanbul ignore next */
          (cov_1ny8jjfzgv().b[0][1]++, 'Unknown error')
        });
      }
    }
    /* istanbul ignore next */
    cov_1ny8jjfzgv().s[23]++;
    return results;
  }
  /**
  * Get data that has changed since last sync
  */
  static async getDataSince(userId, lastSync) {
    /* istanbul ignore next */
    cov_1ny8jjfzgv().f[3]++;
    const syncDate =
    /* istanbul ignore next */
    (cov_1ny8jjfzgv().s[24]++, new Date(lastSync));
    /* istanbul ignore next */
    cov_1ny8jjfzgv().s[25]++;
    try {
      // Get plants updated since last sync
      const updatedPlants =
      /* istanbul ignore next */
      (cov_1ny8jjfzgv().s[26]++, await _db.db.select().from(_schema.plantInstances).leftJoin(_schema.plants, (0, _drizzleorm.eq)(_schema.plantInstances.plantId, _schema.plants.id)).where((0, _drizzleorm.and)((0, _drizzleorm.eq)(_schema.plantInstances.userId, userId))));
      // Get propagations updated since last sync
      const updatedPropagations =
      /* istanbul ignore next */
      (cov_1ny8jjfzgv().s[27]++, await _db.db.select().from(_schema.propagations).leftJoin(_schema.plants, (0, _drizzleorm.eq)(_schema.propagations.plantId, _schema.plants.id)).where((0, _drizzleorm.and)((0, _drizzleorm.eq)(_schema.propagations.userId, userId))));
      // Get new care history since last sync
      const newCareHistory =
      /* istanbul ignore next */
      (cov_1ny8jjfzgv().s[28]++, await _db.db.select().from(_schema.careHistory).where((0, _drizzleorm.and)((0, _drizzleorm.eq)(_schema.careHistory.userId, userId))));
      /* istanbul ignore next */
      cov_1ny8jjfzgv().s[29]++;
      return {
        plants: updatedPlants,
        propagations: updatedPropagations,
        careHistory: newCareHistory,
        syncTimestamp: new Date().toISOString()
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1ny8jjfzgv().s[30]++;
      console.error('Error getting data since last sync:', error);
      /* istanbul ignore next */
      cov_1ny8jjfzgv().s[31]++;
      throw new Error('Failed to get updated data');
    }
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,