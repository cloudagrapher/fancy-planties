05c043c6254c6bebe8c53ecc24e43a28
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get EmailVerificationCodeService () {
        return EmailVerificationCodeService;
    },
    get VerificationCodeError () {
        return VerificationCodeError;
    },
    get VerificationError () {
        return VerificationError;
    },
    get emailVerificationCodeService () {
        return emailVerificationCodeService;
    }
});
require("server-only");
const _db = require("../db");
const _schema = require("../db/schema");
const _drizzleorm = require("drizzle-orm");
const _crypto = require("crypto");
var VerificationError = /*#__PURE__*/ function(VerificationError) {
    VerificationError["CODE_EXPIRED"] = "CODE_EXPIRED";
    VerificationError["CODE_INVALID"] = "CODE_INVALID";
    VerificationError["TOO_MANY_ATTEMPTS"] = "TOO_MANY_ATTEMPTS";
    VerificationError["USER_NOT_FOUND"] = "USER_NOT_FOUND";
    VerificationError["ALREADY_VERIFIED"] = "ALREADY_VERIFIED";
    return VerificationError;
}({});
class VerificationCodeError extends Error {
    constructor(message, code){
        super(message), this.code = code;
        this.name = 'VerificationCodeError';
    }
}
class EmailVerificationCodeService {
    static{
        this.CODE_LENGTH = 6;
    }
    static{
        this.EXPIRY_MINUTES = 10;
    }
    static{
        this.MAX_ATTEMPTS = 5;
    }
    /**
   * Generate a cryptographically secure 6-digit verification code
   */ generateSecureCode() {
        // Generate random bytes and convert to 6-digit number
        const buffer = (0, _crypto.randomBytes)(4);
        const randomNumber = buffer.readUInt32BE(0);
        // Ensure it's always 6 digits by using modulo and padding
        const code = (randomNumber % 1000000).toString().padStart(6, '0');
        return code;
    }
    /**
   * Generate and store a new verification code for a user
   * Invalidates any existing codes for the user
   */ async generateCode(userId) {
        // First, delete any existing codes for this user
        await this.deleteUserCodes(userId);
        // Generate new code
        const code = this.generateSecureCode();
        const expiresAt = new Date(Date.now() + EmailVerificationCodeService.EXPIRY_MINUTES * 60 * 1000);
        // Store in database
        await _db.db.insert(_schema.emailVerificationCodes).values({
            userId,
            code,
            expiresAt,
            attemptsUsed: 0
        });
        return code;
    }
    /**
   * Validate a verification code for a user
   * Returns true if valid, throws VerificationCodeError if invalid
   */ async validateCode(email, code) {
        // Find user by email
        const userResult = await _db.db.select({
            id: _schema.users.id,
            isEmailVerified: _schema.users.isEmailVerified
        }).from(_schema.users).where((0, _drizzleorm.eq)(_schema.users.email, email)).limit(1);
        if (userResult.length === 0) {
            throw new VerificationCodeError('User not found', "USER_NOT_FOUND");
        }
        const user = userResult[0];
        // Check if user is already verified
        if (user.isEmailVerified) {
            throw new VerificationCodeError('Email already verified', "ALREADY_VERIFIED");
        }
        // Find the verification code
        const codeResult = await _db.db.select().from(_schema.emailVerificationCodes).where((0, _drizzleorm.and)((0, _drizzleorm.eq)(_schema.emailVerificationCodes.userId, user.id), (0, _drizzleorm.eq)(_schema.emailVerificationCodes.code, code))).limit(1);
        if (codeResult.length === 0) {
            throw new VerificationCodeError('Invalid verification code', "CODE_INVALID");
        }
        const verificationCode = codeResult[0];
        // Check if code has expired
        if (new Date() > verificationCode.expiresAt) {
            // Clean up expired code
            await _db.db.delete(_schema.emailVerificationCodes).where((0, _drizzleorm.eq)(_schema.emailVerificationCodes.id, verificationCode.id));
            throw new VerificationCodeError('Verification code has expired', "CODE_EXPIRED");
        }
        // Check if too many attempts have been made
        if (verificationCode.attemptsUsed >= EmailVerificationCodeService.MAX_ATTEMPTS) {
            // Invalidate the code
            await _db.db.delete(_schema.emailVerificationCodes).where((0, _drizzleorm.eq)(_schema.emailVerificationCodes.id, verificationCode.id));
            throw new VerificationCodeError('Too many verification attempts', "TOO_MANY_ATTEMPTS");
        }
        // Code is valid - mark user as verified and delete the code
        await _db.db.transaction(async (tx)=>{
            // Update user verification status
            await tx.update(_schema.users).set({
                isEmailVerified: true
            }).where((0, _drizzleorm.eq)(_schema.users.id, user.id));
            // Delete the verification code
            await tx.delete(_schema.emailVerificationCodes).where((0, _drizzleorm.eq)(_schema.emailVerificationCodes.id, verificationCode.id));
        });
        return true;
    }
    /**
   * Increment the attempt count for a verification code
   * Used when validation fails but we want to track attempts
   */ async incrementAttempts(email, code) {
        // Find user by email
        const userResult = await _db.db.select({
            id: _schema.users.id
        }).from(_schema.users).where((0, _drizzleorm.eq)(_schema.users.email, email)).limit(1);
        if (userResult.length === 0) {
            return; // User not found, nothing to increment
        }
        const user = userResult[0];
        // Find and increment attempts for the code
        const codeResult = await _db.db.select({
            id: _schema.emailVerificationCodes.id,
            attemptsUsed: _schema.emailVerificationCodes.attemptsUsed
        }).from(_schema.emailVerificationCodes).where((0, _drizzleorm.and)((0, _drizzleorm.eq)(_schema.emailVerificationCodes.userId, user.id), (0, _drizzleorm.eq)(_schema.emailVerificationCodes.code, code))).limit(1);
        if (codeResult.length > 0) {
            const verificationCode = codeResult[0];
            await _db.db.update(_schema.emailVerificationCodes).set({
                attemptsUsed: verificationCode.attemptsUsed + 1
            }).where((0, _drizzleorm.eq)(_schema.emailVerificationCodes.id, verificationCode.id));
        }
    }
    /**
   * Clean up expired verification codes
   * Should be called periodically by a cleanup job
   */ async cleanupExpiredCodes() {
        const now = new Date();
        const result = await _db.db.delete(_schema.emailVerificationCodes).where((0, _drizzleorm.lt)(_schema.emailVerificationCodes.expiresAt, now));
        // Return count of deleted codes (if supported by the database driver)
        return result.rowCount || 0;
    }
    /**
   * Delete all verification codes for a specific user
   * Used when generating new codes or when user is deleted
   */ async deleteUserCodes(userId) {
        await _db.db.delete(_schema.emailVerificationCodes).where((0, _drizzleorm.eq)(_schema.emailVerificationCodes.userId, userId));
    }
    /**
   * Get active verification code for a user (for testing/debugging)
   */ async getUserActiveCode(userId) {
        const result = await _db.db.select().from(_schema.emailVerificationCodes).where((0, _drizzleorm.and)((0, _drizzleorm.eq)(_schema.emailVerificationCodes.userId, userId), (0, _drizzleorm.lt)(new Date(), _schema.emailVerificationCodes.expiresAt) // Not expired
        )).limit(1);
        return result.length > 0 ? result[0] : null;
    }
    /**
   * Check if a user has any active verification codes
   */ async hasActiveCode(userId) {
        const code = await this.getUserActiveCode(userId);
        return code !== null;
    }
    /**
   * Get verification code statistics for monitoring
   */ async getCodeStats() {
        const now = new Date();
        // Count active codes
        const activeResult = await _db.db.select({
            count: _schema.emailVerificationCodes.id
        }).from(_schema.emailVerificationCodes).where((0, _drizzleorm.lt)(now, _schema.emailVerificationCodes.expiresAt));
        // Count expired codes
        const expiredResult = await _db.db.select({
            count: _schema.emailVerificationCodes.id
        }).from(_schema.emailVerificationCodes).where((0, _drizzleorm.lt)(_schema.emailVerificationCodes.expiresAt, now));
        // Count codes with high attempts (4 or more)
        const highAttemptResult = await _db.db.select({
            count: _schema.emailVerificationCodes.id
        }).from(_schema.emailVerificationCodes).where((0, _drizzleorm.and)((0, _drizzleorm.lt)(now, _schema.emailVerificationCodes.expiresAt), (0, _drizzleorm.eq)(_schema.emailVerificationCodes.attemptsUsed, 4) // Close to max attempts
        ));
        return {
            totalActive: activeResult.length,
            expiredCount: expiredResult.length,
            highAttemptCount: highAttemptResult.length
        };
    }
}
const emailVerificationCodeService = new EmailVerificationCodeService();

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9zdGVmYW5iZWtrZXIvcHJvamVjdHMvZmFuY3ktcGxhbnRpZXMvc3JjL2xpYi9zZXJ2aWNlcy9lbWFpbC12ZXJpZmljYXRpb24tY29kZS1zZXJ2aWNlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAnc2VydmVyLW9ubHknO1xuaW1wb3J0IHsgZGIgfSBmcm9tICdAL2xpYi9kYic7XG5pbXBvcnQgeyBlbWFpbFZlcmlmaWNhdGlvbkNvZGVzLCB1c2VycyB9IGZyb20gJ0AvbGliL2RiL3NjaGVtYSc7XG5pbXBvcnQgeyBlcSwgYW5kLCBsdCB9IGZyb20gJ2RyaXp6bGUtb3JtJztcbmltcG9ydCB7IHJhbmRvbUJ5dGVzIH0gZnJvbSAnY3J5cHRvJztcblxuZXhwb3J0IGludGVyZmFjZSBFbWFpbFZlcmlmaWNhdGlvbkNvZGUge1xuICBpZDogbnVtYmVyO1xuICB1c2VySWQ6IG51bWJlcjtcbiAgY29kZTogc3RyaW5nO1xuICBleHBpcmVzQXQ6IERhdGU7XG4gIGNyZWF0ZWRBdDogRGF0ZTtcbiAgYXR0ZW1wdHNVc2VkOiBudW1iZXI7XG59XG5cbmV4cG9ydCBlbnVtIFZlcmlmaWNhdGlvbkVycm9yIHtcbiAgQ09ERV9FWFBJUkVEID0gJ0NPREVfRVhQSVJFRCcsXG4gIENPREVfSU5WQUxJRCA9ICdDT0RFX0lOVkFMSUQnLFxuICBUT09fTUFOWV9BVFRFTVBUUyA9ICdUT09fTUFOWV9BVFRFTVBUUycsXG4gIFVTRVJfTk9UX0ZPVU5EID0gJ1VTRVJfTk9UX0ZPVU5EJyxcbiAgQUxSRUFEWV9WRVJJRklFRCA9ICdBTFJFQURZX1ZFUklGSUVEJ1xufVxuXG5leHBvcnQgY2xhc3MgVmVyaWZpY2F0aW9uQ29kZUVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICBjb25zdHJ1Y3RvcihcbiAgICBtZXNzYWdlOiBzdHJpbmcsXG4gICAgcHVibGljIGNvZGU6IFZlcmlmaWNhdGlvbkVycm9yXG4gICkge1xuICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgIHRoaXMubmFtZSA9ICdWZXJpZmljYXRpb25Db2RlRXJyb3InO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBFbWFpbFZlcmlmaWNhdGlvbkNvZGVTZXJ2aWNlIHtcbiAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgQ09ERV9MRU5HVEggPSA2O1xuICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBFWFBJUllfTUlOVVRFUyA9IDEwO1xuICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBNQVhfQVRURU1QVFMgPSA1O1xuXG4gIC8qKlxuICAgKiBHZW5lcmF0ZSBhIGNyeXB0b2dyYXBoaWNhbGx5IHNlY3VyZSA2LWRpZ2l0IHZlcmlmaWNhdGlvbiBjb2RlXG4gICAqL1xuICBwcml2YXRlIGdlbmVyYXRlU2VjdXJlQ29kZSgpOiBzdHJpbmcge1xuICAgIC8vIEdlbmVyYXRlIHJhbmRvbSBieXRlcyBhbmQgY29udmVydCB0byA2LWRpZ2l0IG51bWJlclxuICAgIGNvbnN0IGJ1ZmZlciA9IHJhbmRvbUJ5dGVzKDQpO1xuICAgIGNvbnN0IHJhbmRvbU51bWJlciA9IGJ1ZmZlci5yZWFkVUludDMyQkUoMCk7XG4gICAgLy8gRW5zdXJlIGl0J3MgYWx3YXlzIDYgZGlnaXRzIGJ5IHVzaW5nIG1vZHVsbyBhbmQgcGFkZGluZ1xuICAgIGNvbnN0IGNvZGUgPSAocmFuZG9tTnVtYmVyICUgMTAwMDAwMCkudG9TdHJpbmcoKS5wYWRTdGFydCg2LCAnMCcpO1xuICAgIHJldHVybiBjb2RlO1xuICB9XG5cbiAgLyoqXG4gICAqIEdlbmVyYXRlIGFuZCBzdG9yZSBhIG5ldyB2ZXJpZmljYXRpb24gY29kZSBmb3IgYSB1c2VyXG4gICAqIEludmFsaWRhdGVzIGFueSBleGlzdGluZyBjb2RlcyBmb3IgdGhlIHVzZXJcbiAgICovXG4gIGFzeW5jIGdlbmVyYXRlQ29kZSh1c2VySWQ6IG51bWJlcik6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgLy8gRmlyc3QsIGRlbGV0ZSBhbnkgZXhpc3RpbmcgY29kZXMgZm9yIHRoaXMgdXNlclxuICAgIGF3YWl0IHRoaXMuZGVsZXRlVXNlckNvZGVzKHVzZXJJZCk7XG5cbiAgICAvLyBHZW5lcmF0ZSBuZXcgY29kZVxuICAgIGNvbnN0IGNvZGUgPSB0aGlzLmdlbmVyYXRlU2VjdXJlQ29kZSgpO1xuICAgIGNvbnN0IGV4cGlyZXNBdCA9IG5ldyBEYXRlKERhdGUubm93KCkgKyBFbWFpbFZlcmlmaWNhdGlvbkNvZGVTZXJ2aWNlLkVYUElSWV9NSU5VVEVTICogNjAgKiAxMDAwKTtcblxuICAgIC8vIFN0b3JlIGluIGRhdGFiYXNlXG4gICAgYXdhaXQgZGIuaW5zZXJ0KGVtYWlsVmVyaWZpY2F0aW9uQ29kZXMpLnZhbHVlcyh7XG4gICAgICB1c2VySWQsXG4gICAgICBjb2RlLFxuICAgICAgZXhwaXJlc0F0LFxuICAgICAgYXR0ZW1wdHNVc2VkOiAwLFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGNvZGU7XG4gIH1cblxuICAvKipcbiAgICogVmFsaWRhdGUgYSB2ZXJpZmljYXRpb24gY29kZSBmb3IgYSB1c2VyXG4gICAqIFJldHVybnMgdHJ1ZSBpZiB2YWxpZCwgdGhyb3dzIFZlcmlmaWNhdGlvbkNvZGVFcnJvciBpZiBpbnZhbGlkXG4gICAqL1xuICBhc3luYyB2YWxpZGF0ZUNvZGUoZW1haWw6IHN0cmluZywgY29kZTogc3RyaW5nKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgLy8gRmluZCB1c2VyIGJ5IGVtYWlsXG4gICAgY29uc3QgdXNlclJlc3VsdCA9IGF3YWl0IGRiXG4gICAgICAuc2VsZWN0KHsgaWQ6IHVzZXJzLmlkLCBpc0VtYWlsVmVyaWZpZWQ6IHVzZXJzLmlzRW1haWxWZXJpZmllZCB9KVxuICAgICAgLmZyb20odXNlcnMpXG4gICAgICAud2hlcmUoZXEodXNlcnMuZW1haWwsIGVtYWlsKSlcbiAgICAgIC5saW1pdCgxKTtcblxuICAgIGlmICh1c2VyUmVzdWx0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhyb3cgbmV3IFZlcmlmaWNhdGlvbkNvZGVFcnJvcignVXNlciBub3QgZm91bmQnLCBWZXJpZmljYXRpb25FcnJvci5VU0VSX05PVF9GT1VORCk7XG4gICAgfVxuXG4gICAgY29uc3QgdXNlciA9IHVzZXJSZXN1bHRbMF07XG5cbiAgICAvLyBDaGVjayBpZiB1c2VyIGlzIGFscmVhZHkgdmVyaWZpZWRcbiAgICBpZiAodXNlci5pc0VtYWlsVmVyaWZpZWQpIHtcbiAgICAgIHRocm93IG5ldyBWZXJpZmljYXRpb25Db2RlRXJyb3IoJ0VtYWlsIGFscmVhZHkgdmVyaWZpZWQnLCBWZXJpZmljYXRpb25FcnJvci5BTFJFQURZX1ZFUklGSUVEKTtcbiAgICB9XG5cbiAgICAvLyBGaW5kIHRoZSB2ZXJpZmljYXRpb24gY29kZVxuICAgIGNvbnN0IGNvZGVSZXN1bHQgPSBhd2FpdCBkYlxuICAgICAgLnNlbGVjdCgpXG4gICAgICAuZnJvbShlbWFpbFZlcmlmaWNhdGlvbkNvZGVzKVxuICAgICAgLndoZXJlKFxuICAgICAgICBhbmQoXG4gICAgICAgICAgZXEoZW1haWxWZXJpZmljYXRpb25Db2Rlcy51c2VySWQsIHVzZXIuaWQpLFxuICAgICAgICAgIGVxKGVtYWlsVmVyaWZpY2F0aW9uQ29kZXMuY29kZSwgY29kZSlcbiAgICAgICAgKVxuICAgICAgKVxuICAgICAgLmxpbWl0KDEpO1xuXG4gICAgaWYgKGNvZGVSZXN1bHQubGVuZ3RoID09PSAwKSB7XG4gICAgICB0aHJvdyBuZXcgVmVyaWZpY2F0aW9uQ29kZUVycm9yKCdJbnZhbGlkIHZlcmlmaWNhdGlvbiBjb2RlJywgVmVyaWZpY2F0aW9uRXJyb3IuQ09ERV9JTlZBTElEKTtcbiAgICB9XG5cbiAgICBjb25zdCB2ZXJpZmljYXRpb25Db2RlID0gY29kZVJlc3VsdFswXTtcblxuICAgIC8vIENoZWNrIGlmIGNvZGUgaGFzIGV4cGlyZWRcbiAgICBpZiAobmV3IERhdGUoKSA+IHZlcmlmaWNhdGlvbkNvZGUuZXhwaXJlc0F0KSB7XG4gICAgICAvLyBDbGVhbiB1cCBleHBpcmVkIGNvZGVcbiAgICAgIGF3YWl0IGRiXG4gICAgICAgIC5kZWxldGUoZW1haWxWZXJpZmljYXRpb25Db2RlcylcbiAgICAgICAgLndoZXJlKGVxKGVtYWlsVmVyaWZpY2F0aW9uQ29kZXMuaWQsIHZlcmlmaWNhdGlvbkNvZGUuaWQpKTtcbiAgICAgIFxuICAgICAgdGhyb3cgbmV3IFZlcmlmaWNhdGlvbkNvZGVFcnJvcignVmVyaWZpY2F0aW9uIGNvZGUgaGFzIGV4cGlyZWQnLCBWZXJpZmljYXRpb25FcnJvci5DT0RFX0VYUElSRUQpO1xuICAgIH1cblxuICAgIC8vIENoZWNrIGlmIHRvbyBtYW55IGF0dGVtcHRzIGhhdmUgYmVlbiBtYWRlXG4gICAgaWYgKHZlcmlmaWNhdGlvbkNvZGUuYXR0ZW1wdHNVc2VkID49IEVtYWlsVmVyaWZpY2F0aW9uQ29kZVNlcnZpY2UuTUFYX0FUVEVNUFRTKSB7XG4gICAgICAvLyBJbnZhbGlkYXRlIHRoZSBjb2RlXG4gICAgICBhd2FpdCBkYlxuICAgICAgICAuZGVsZXRlKGVtYWlsVmVyaWZpY2F0aW9uQ29kZXMpXG4gICAgICAgIC53aGVyZShlcShlbWFpbFZlcmlmaWNhdGlvbkNvZGVzLmlkLCB2ZXJpZmljYXRpb25Db2RlLmlkKSk7XG4gICAgICBcbiAgICAgIHRocm93IG5ldyBWZXJpZmljYXRpb25Db2RlRXJyb3IoJ1RvbyBtYW55IHZlcmlmaWNhdGlvbiBhdHRlbXB0cycsIFZlcmlmaWNhdGlvbkVycm9yLlRPT19NQU5ZX0FUVEVNUFRTKTtcbiAgICB9XG5cbiAgICAvLyBDb2RlIGlzIHZhbGlkIC0gbWFyayB1c2VyIGFzIHZlcmlmaWVkIGFuZCBkZWxldGUgdGhlIGNvZGVcbiAgICBhd2FpdCBkYi50cmFuc2FjdGlvbihhc3luYyAodHgpID0+IHtcbiAgICAgIC8vIFVwZGF0ZSB1c2VyIHZlcmlmaWNhdGlvbiBzdGF0dXNcbiAgICAgIGF3YWl0IHR4XG4gICAgICAgIC51cGRhdGUodXNlcnMpXG4gICAgICAgIC5zZXQoeyBpc0VtYWlsVmVyaWZpZWQ6IHRydWUgfSlcbiAgICAgICAgLndoZXJlKGVxKHVzZXJzLmlkLCB1c2VyLmlkKSk7XG5cbiAgICAgIC8vIERlbGV0ZSB0aGUgdmVyaWZpY2F0aW9uIGNvZGVcbiAgICAgIGF3YWl0IHR4XG4gICAgICAgIC5kZWxldGUoZW1haWxWZXJpZmljYXRpb25Db2RlcylcbiAgICAgICAgLndoZXJlKGVxKGVtYWlsVmVyaWZpY2F0aW9uQ29kZXMuaWQsIHZlcmlmaWNhdGlvbkNvZGUuaWQpKTtcbiAgICB9KTtcblxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIEluY3JlbWVudCB0aGUgYXR0ZW1wdCBjb3VudCBmb3IgYSB2ZXJpZmljYXRpb24gY29kZVxuICAgKiBVc2VkIHdoZW4gdmFsaWRhdGlvbiBmYWlscyBidXQgd2Ugd2FudCB0byB0cmFjayBhdHRlbXB0c1xuICAgKi9cbiAgYXN5bmMgaW5jcmVtZW50QXR0ZW1wdHMoZW1haWw6IHN0cmluZywgY29kZTogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgLy8gRmluZCB1c2VyIGJ5IGVtYWlsXG4gICAgY29uc3QgdXNlclJlc3VsdCA9IGF3YWl0IGRiXG4gICAgICAuc2VsZWN0KHsgaWQ6IHVzZXJzLmlkIH0pXG4gICAgICAuZnJvbSh1c2VycylcbiAgICAgIC53aGVyZShlcSh1c2Vycy5lbWFpbCwgZW1haWwpKVxuICAgICAgLmxpbWl0KDEpO1xuXG4gICAgaWYgKHVzZXJSZXN1bHQubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm47IC8vIFVzZXIgbm90IGZvdW5kLCBub3RoaW5nIHRvIGluY3JlbWVudFxuICAgIH1cblxuICAgIGNvbnN0IHVzZXIgPSB1c2VyUmVzdWx0WzBdO1xuXG4gICAgLy8gRmluZCBhbmQgaW5jcmVtZW50IGF0dGVtcHRzIGZvciB0aGUgY29kZVxuICAgIGNvbnN0IGNvZGVSZXN1bHQgPSBhd2FpdCBkYlxuICAgICAgLnNlbGVjdCh7IGlkOiBlbWFpbFZlcmlmaWNhdGlvbkNvZGVzLmlkLCBhdHRlbXB0c1VzZWQ6IGVtYWlsVmVyaWZpY2F0aW9uQ29kZXMuYXR0ZW1wdHNVc2VkIH0pXG4gICAgICAuZnJvbShlbWFpbFZlcmlmaWNhdGlvbkNvZGVzKVxuICAgICAgLndoZXJlKFxuICAgICAgICBhbmQoXG4gICAgICAgICAgZXEoZW1haWxWZXJpZmljYXRpb25Db2Rlcy51c2VySWQsIHVzZXIuaWQpLFxuICAgICAgICAgIGVxKGVtYWlsVmVyaWZpY2F0aW9uQ29kZXMuY29kZSwgY29kZSlcbiAgICAgICAgKVxuICAgICAgKVxuICAgICAgLmxpbWl0KDEpO1xuXG4gICAgaWYgKGNvZGVSZXN1bHQubGVuZ3RoID4gMCkge1xuICAgICAgY29uc3QgdmVyaWZpY2F0aW9uQ29kZSA9IGNvZGVSZXN1bHRbMF07XG4gICAgICBhd2FpdCBkYlxuICAgICAgICAudXBkYXRlKGVtYWlsVmVyaWZpY2F0aW9uQ29kZXMpXG4gICAgICAgIC5zZXQoeyBhdHRlbXB0c1VzZWQ6IHZlcmlmaWNhdGlvbkNvZGUuYXR0ZW1wdHNVc2VkICsgMSB9KVxuICAgICAgICAud2hlcmUoZXEoZW1haWxWZXJpZmljYXRpb25Db2Rlcy5pZCwgdmVyaWZpY2F0aW9uQ29kZS5pZCkpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDbGVhbiB1cCBleHBpcmVkIHZlcmlmaWNhdGlvbiBjb2Rlc1xuICAgKiBTaG91bGQgYmUgY2FsbGVkIHBlcmlvZGljYWxseSBieSBhIGNsZWFudXAgam9iXG4gICAqL1xuICBhc3luYyBjbGVhbnVwRXhwaXJlZENvZGVzKCk6IFByb21pc2U8bnVtYmVyPiB7XG4gICAgY29uc3Qgbm93ID0gbmV3IERhdGUoKTtcbiAgICBcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBkYlxuICAgICAgLmRlbGV0ZShlbWFpbFZlcmlmaWNhdGlvbkNvZGVzKVxuICAgICAgLndoZXJlKGx0KGVtYWlsVmVyaWZpY2F0aW9uQ29kZXMuZXhwaXJlc0F0LCBub3cpKTtcblxuICAgIC8vIFJldHVybiBjb3VudCBvZiBkZWxldGVkIGNvZGVzIChpZiBzdXBwb3J0ZWQgYnkgdGhlIGRhdGFiYXNlIGRyaXZlcilcbiAgICByZXR1cm4gcmVzdWx0LnJvd0NvdW50IHx8IDA7XG4gIH1cblxuICAvKipcbiAgICogRGVsZXRlIGFsbCB2ZXJpZmljYXRpb24gY29kZXMgZm9yIGEgc3BlY2lmaWMgdXNlclxuICAgKiBVc2VkIHdoZW4gZ2VuZXJhdGluZyBuZXcgY29kZXMgb3Igd2hlbiB1c2VyIGlzIGRlbGV0ZWRcbiAgICovXG4gIGFzeW5jIGRlbGV0ZVVzZXJDb2Rlcyh1c2VySWQ6IG51bWJlcik6IFByb21pc2U8dm9pZD4ge1xuICAgIGF3YWl0IGRiXG4gICAgICAuZGVsZXRlKGVtYWlsVmVyaWZpY2F0aW9uQ29kZXMpXG4gICAgICAud2hlcmUoZXEoZW1haWxWZXJpZmljYXRpb25Db2Rlcy51c2VySWQsIHVzZXJJZCkpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBhY3RpdmUgdmVyaWZpY2F0aW9uIGNvZGUgZm9yIGEgdXNlciAoZm9yIHRlc3RpbmcvZGVidWdnaW5nKVxuICAgKi9cbiAgYXN5bmMgZ2V0VXNlckFjdGl2ZUNvZGUodXNlcklkOiBudW1iZXIpOiBQcm9taXNlPEVtYWlsVmVyaWZpY2F0aW9uQ29kZSB8IG51bGw+IHtcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBkYlxuICAgICAgLnNlbGVjdCgpXG4gICAgICAuZnJvbShlbWFpbFZlcmlmaWNhdGlvbkNvZGVzKVxuICAgICAgLndoZXJlKFxuICAgICAgICBhbmQoXG4gICAgICAgICAgZXEoZW1haWxWZXJpZmljYXRpb25Db2Rlcy51c2VySWQsIHVzZXJJZCksXG4gICAgICAgICAgbHQobmV3IERhdGUoKSwgZW1haWxWZXJpZmljYXRpb25Db2Rlcy5leHBpcmVzQXQpIC8vIE5vdCBleHBpcmVkXG4gICAgICAgIClcbiAgICAgIClcbiAgICAgIC5saW1pdCgxKTtcblxuICAgIHJldHVybiByZXN1bHQubGVuZ3RoID4gMCA/IHJlc3VsdFswXSA6IG51bGw7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2sgaWYgYSB1c2VyIGhhcyBhbnkgYWN0aXZlIHZlcmlmaWNhdGlvbiBjb2Rlc1xuICAgKi9cbiAgYXN5bmMgaGFzQWN0aXZlQ29kZSh1c2VySWQ6IG51bWJlcik6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIGNvbnN0IGNvZGUgPSBhd2FpdCB0aGlzLmdldFVzZXJBY3RpdmVDb2RlKHVzZXJJZCk7XG4gICAgcmV0dXJuIGNvZGUgIT09IG51bGw7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHZlcmlmaWNhdGlvbiBjb2RlIHN0YXRpc3RpY3MgZm9yIG1vbml0b3JpbmdcbiAgICovXG4gIGFzeW5jIGdldENvZGVTdGF0cygpOiBQcm9taXNlPHtcbiAgICB0b3RhbEFjdGl2ZTogbnVtYmVyO1xuICAgIGV4cGlyZWRDb3VudDogbnVtYmVyO1xuICAgIGhpZ2hBdHRlbXB0Q291bnQ6IG51bWJlcjtcbiAgfT4ge1xuICAgIGNvbnN0IG5vdyA9IG5ldyBEYXRlKCk7XG4gICAgXG4gICAgLy8gQ291bnQgYWN0aXZlIGNvZGVzXG4gICAgY29uc3QgYWN0aXZlUmVzdWx0ID0gYXdhaXQgZGJcbiAgICAgIC5zZWxlY3QoeyBjb3VudDogZW1haWxWZXJpZmljYXRpb25Db2Rlcy5pZCB9KVxuICAgICAgLmZyb20oZW1haWxWZXJpZmljYXRpb25Db2RlcylcbiAgICAgIC53aGVyZShsdChub3csIGVtYWlsVmVyaWZpY2F0aW9uQ29kZXMuZXhwaXJlc0F0KSk7XG5cbiAgICAvLyBDb3VudCBleHBpcmVkIGNvZGVzXG4gICAgY29uc3QgZXhwaXJlZFJlc3VsdCA9IGF3YWl0IGRiXG4gICAgICAuc2VsZWN0KHsgY291bnQ6IGVtYWlsVmVyaWZpY2F0aW9uQ29kZXMuaWQgfSlcbiAgICAgIC5mcm9tKGVtYWlsVmVyaWZpY2F0aW9uQ29kZXMpXG4gICAgICAud2hlcmUobHQoZW1haWxWZXJpZmljYXRpb25Db2Rlcy5leHBpcmVzQXQsIG5vdykpO1xuXG4gICAgLy8gQ291bnQgY29kZXMgd2l0aCBoaWdoIGF0dGVtcHRzICg0IG9yIG1vcmUpXG4gICAgY29uc3QgaGlnaEF0dGVtcHRSZXN1bHQgPSBhd2FpdCBkYlxuICAgICAgLnNlbGVjdCh7IGNvdW50OiBlbWFpbFZlcmlmaWNhdGlvbkNvZGVzLmlkIH0pXG4gICAgICAuZnJvbShlbWFpbFZlcmlmaWNhdGlvbkNvZGVzKVxuICAgICAgLndoZXJlKFxuICAgICAgICBhbmQoXG4gICAgICAgICAgbHQobm93LCBlbWFpbFZlcmlmaWNhdGlvbkNvZGVzLmV4cGlyZXNBdCksXG4gICAgICAgICAgZXEoZW1haWxWZXJpZmljYXRpb25Db2Rlcy5hdHRlbXB0c1VzZWQsIDQpIC8vIENsb3NlIHRvIG1heCBhdHRlbXB0c1xuICAgICAgICApXG4gICAgICApO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHRvdGFsQWN0aXZlOiBhY3RpdmVSZXN1bHQubGVuZ3RoLFxuICAgICAgZXhwaXJlZENvdW50OiBleHBpcmVkUmVzdWx0Lmxlbmd0aCxcbiAgICAgIGhpZ2hBdHRlbXB0Q291bnQ6IGhpZ2hBdHRlbXB0UmVzdWx0Lmxlbmd0aCxcbiAgICB9O1xuICB9XG59XG5cbi8vIEV4cG9ydCBzaW5nbGV0b24gaW5zdGFuY2VcbmV4cG9ydCBjb25zdCBlbWFpbFZlcmlmaWNhdGlvbkNvZGVTZXJ2aWNlID0gbmV3IEVtYWlsVmVyaWZpY2F0aW9uQ29kZVNlcnZpY2UoKTsiXSwibmFtZXMiOlsiRW1haWxWZXJpZmljYXRpb25Db2RlU2VydmljZSIsIlZlcmlmaWNhdGlvbkNvZGVFcnJvciIsIlZlcmlmaWNhdGlvbkVycm9yIiwiZW1haWxWZXJpZmljYXRpb25Db2RlU2VydmljZSIsIkVycm9yIiwibWVzc2FnZSIsImNvZGUiLCJuYW1lIiwiQ09ERV9MRU5HVEgiLCJFWFBJUllfTUlOVVRFUyIsIk1BWF9BVFRFTVBUUyIsImdlbmVyYXRlU2VjdXJlQ29kZSIsImJ1ZmZlciIsInJhbmRvbUJ5dGVzIiwicmFuZG9tTnVtYmVyIiwicmVhZFVJbnQzMkJFIiwidG9TdHJpbmciLCJwYWRTdGFydCIsImdlbmVyYXRlQ29kZSIsInVzZXJJZCIsImRlbGV0ZVVzZXJDb2RlcyIsImV4cGlyZXNBdCIsIkRhdGUiLCJub3ciLCJkYiIsImluc2VydCIsImVtYWlsVmVyaWZpY2F0aW9uQ29kZXMiLCJ2YWx1ZXMiLCJhdHRlbXB0c1VzZWQiLCJ2YWxpZGF0ZUNvZGUiLCJlbWFpbCIsInVzZXJSZXN1bHQiLCJzZWxlY3QiLCJpZCIsInVzZXJzIiwiaXNFbWFpbFZlcmlmaWVkIiwiZnJvbSIsIndoZXJlIiwiZXEiLCJsaW1pdCIsImxlbmd0aCIsInVzZXIiLCJjb2RlUmVzdWx0IiwiYW5kIiwidmVyaWZpY2F0aW9uQ29kZSIsImRlbGV0ZSIsInRyYW5zYWN0aW9uIiwidHgiLCJ1cGRhdGUiLCJzZXQiLCJpbmNyZW1lbnRBdHRlbXB0cyIsImNsZWFudXBFeHBpcmVkQ29kZXMiLCJyZXN1bHQiLCJsdCIsInJvd0NvdW50IiwiZ2V0VXNlckFjdGl2ZUNvZGUiLCJoYXNBY3RpdmVDb2RlIiwiZ2V0Q29kZVN0YXRzIiwiYWN0aXZlUmVzdWx0IiwiY291bnQiLCJleHBpcmVkUmVzdWx0IiwiaGlnaEF0dGVtcHRSZXN1bHQiLCJ0b3RhbEFjdGl2ZSIsImV4cGlyZWRDb3VudCIsImhpZ2hBdHRlbXB0Q291bnQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O1FBaUNhQTtlQUFBQTs7UUFWQUM7ZUFBQUE7O1FBUkRDO2VBQUFBOztRQTRRQ0M7ZUFBQUE7OztRQTNSTjtvQkFDWTt3QkFDMkI7NEJBQ2xCO3dCQUNBO0FBV3JCLElBQUEsQUFBS0QsMkNBQUFBOzs7Ozs7V0FBQUE7O0FBUUwsTUFBTUQsOEJBQThCRztJQUN6QyxZQUNFQyxPQUFlLEVBQ2YsQUFBT0MsSUFBdUIsQ0FDOUI7UUFDQSxLQUFLLENBQUNELGVBRkNDLE9BQUFBO1FBR1AsSUFBSSxDQUFDQyxJQUFJLEdBQUc7SUFDZDtBQUNGO0FBRU8sTUFBTVA7O2FBQ2FRLGNBQWM7OzthQUNkQyxpQkFBaUI7OzthQUNqQkMsZUFBZTs7SUFFdkM7O0dBRUMsR0FDRCxBQUFRQyxxQkFBNkI7UUFDbkMsc0RBQXNEO1FB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