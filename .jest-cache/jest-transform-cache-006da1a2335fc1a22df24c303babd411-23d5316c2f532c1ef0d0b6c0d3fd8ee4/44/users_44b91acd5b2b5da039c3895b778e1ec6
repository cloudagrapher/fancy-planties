43a164fce99a1e14929957aecc018cad
"use strict";

/* istanbul ignore next */
function cov_2458ipowlu() {
  var path = "/Users/stefanbekker/projects/fancy-planties/src/lib/db/queries/users.ts";
  var hash = "6a81e13fefdee57a2ad6e0983a504db3be7e73d7";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/stefanbekker/projects/fancy-planties/src/lib/db/queries/users.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 27
        }
      },
      "3": {
        start: {
          line: 11,
          column: 20
        },
        end: {
          line: 11,
          column: 42
        }
      },
      "4": {
        start: {
          line: 12,
          column: 15
        },
        end: {
          line: 12,
          column: 34
        }
      },
      "5": {
        start: {
          line: 13,
          column: 16
        },
        end: {
          line: 13,
          column: 36
        }
      },
      "6": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 23,
          column: 9
        }
      },
      "7": {
        start: {
          line: 18,
          column: 27
        },
        end: {
          line: 18,
          column: 93
        }
      },
      "8": {
        start: {
          line: 19,
          column: 12
        },
        end: {
          line: 19,
          column: 24
        }
      },
      "9": {
        start: {
          line: 21,
          column: 12
        },
        end: {
          line: 21,
          column: 59
        }
      },
      "10": {
        start: {
          line: 22,
          column: 12
        },
        end: {
          line: 22,
          column: 53
        }
      },
      "11": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 33,
          column: 9
        }
      },
      "12": {
        start: {
          line: 28,
          column: 27
        },
        end: {
          line: 28,
          column: 120
        }
      },
      "13": {
        start: {
          line: 29,
          column: 12
        },
        end: {
          line: 29,
          column: 32
        }
      },
      "14": {
        start: {
          line: 31,
          column: 12
        },
        end: {
          line: 31,
          column: 62
        }
      },
      "15": {
        start: {
          line: 32,
          column: 12
        },
        end: {
          line: 32,
          column: 50
        }
      },
      "16": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 43,
          column: 9
        }
      },
      "17": {
        start: {
          line: 38,
          column: 27
        },
        end: {
          line: 38,
          column: 126
        }
      },
      "18": {
        start: {
          line: 39,
          column: 12
        },
        end: {
          line: 39,
          column: 32
        }
      },
      "19": {
        start: {
          line: 41,
          column: 12
        },
        end: {
          line: 41,
          column: 65
        }
      },
      "20": {
        start: {
          line: 42,
          column: 12
        },
        end: {
          line: 42,
          column: 50
        }
      },
      "21": {
        start: {
          line: 47,
          column: 8
        },
        end: {
          line: 59,
          column: 9
        }
      },
      "22": {
        start: {
          line: 48,
          column: 27
        },
        end: {
          line: 51,
          column: 75
        }
      },
      "23": {
        start: {
          line: 52,
          column: 12
        },
        end: {
          line: 54,
          column: 13
        }
      },
      "24": {
        start: {
          line: 53,
          column: 16
        },
        end: {
          line: 53,
          column: 50
        }
      },
      "25": {
        start: {
          line: 55,
          column: 12
        },
        end: {
          line: 55,
          column: 24
        }
      },
      "26": {
        start: {
          line: 57,
          column: 12
        },
        end: {
          line: 57,
          column: 59
        }
      },
      "27": {
        start: {
          line: 58,
          column: 12
        },
        end: {
          line: 58,
          column: 53
        }
      },
      "28": {
        start: {
          line: 63,
          column: 8
        },
        end: {
          line: 69,
          column: 9
        }
      },
      "29": {
        start: {
          line: 64,
          column: 27
        },
        end: {
          line: 64,
          column: 113
        }
      },
      "30": {
        start: {
          line: 65,
          column: 12
        },
        end: {
          line: 65,
          column: 37
        }
      },
      "31": {
        start: {
          line: 67,
          column: 12
        },
        end: {
          line: 67,
          column: 59
        }
      },
      "32": {
        start: {
          line: 68,
          column: 12
        },
        end: {
          line: 68,
          column: 53
        }
      },
      "33": {
        start: {
          line: 73,
          column: 8
        },
        end: {
          line: 81,
          column: 9
        }
      },
      "34": {
        start: {
          line: 74,
          column: 27
        },
        end: {
          line: 76,
          column: 89
        }
      },
      "35": {
        start: {
          line: 77,
          column: 12
        },
        end: {
          line: 77,
          column: 26
        }
      },
      "36": {
        start: {
          line: 79,
          column: 12
        },
        end: {
          line: 79,
          column: 69
        }
      },
      "37": {
        start: {
          line: 80,
          column: 12
        },
        end: {
          line: 80,
          column: 53
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 16,
            column: 4
          },
          end: {
            line: 16,
            column: 5
          }
        },
        loc: {
          start: {
            line: 16,
            column: 34
          },
          end: {
            line: 24,
            column: 5
          }
        },
        line: 16
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 26,
            column: 4
          },
          end: {
            line: 26,
            column: 5
          }
        },
        loc: {
          start: {
            line: 26,
            column: 29
          },
          end: {
            line: 34,
            column: 5
          }
        },
        line: 26
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 36,
            column: 4
          },
          end: {
            line: 36,
            column: 5
          }
        },
        loc: {
          start: {
            line: 36,
            column: 35
          },
          end: {
            line: 44,
            column: 5
          }
        },
        line: 36
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 46,
            column: 4
          },
          end: {
            line: 46,
            column: 5
          }
        },
        loc: {
          start: {
            line: 46,
            column: 38
          },
          end: {
            line: 60,
            column: 5
          }
        },
        line: 46
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 62,
            column: 4
          },
          end: {
            line: 62,
            column: 5
          }
        },
        loc: {
          start: {
            line: 62,
            column: 28
          },
          end: {
            line: 70,
            column: 5
          }
        },
        line: 62
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 72,
            column: 4
          },
          end: {
            line: 72,
            column: 5
          }
        },
        loc: {
          start: {
            line: 72,
            column: 36
          },
          end: {
            line: 82,
            column: 5
          }
        },
        line: 72
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 29,
            column: 19
          },
          end: {
            line: 29,
            column: 31
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 29,
            column: 19
          },
          end: {
            line: 29,
            column: 23
          }
        }, {
          start: {
            line: 29,
            column: 27
          },
          end: {
            line: 29,
            column: 31
          }
        }],
        line: 29
      },
      "1": {
        loc: {
          start: {
            line: 39,
            column: 19
          },
          end: {
            line: 39,
            column: 31
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 39,
            column: 19
          },
          end: {
            line: 39,
            column: 23
          }
        }, {
          start: {
            line: 39,
            column: 27
          },
          end: {
            line: 39,
            column: 31
          }
        }],
        line: 39
      },
      "2": {
        loc: {
          start: {
            line: 52,
            column: 12
          },
          end: {
            line: 54,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 52,
            column: 12
          },
          end: {
            line: 54,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 52
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/stefanbekker/projects/fancy-planties/src/lib/db/queries/users.ts"],
      sourcesContent: ["import { eq } from 'drizzle-orm';\nimport { db } from '../index';\nimport { users, type User, type NewUser } from '../schema';\n\n// User CRUD operations\nexport class UserQueries {\n  // Create a new user\n  static async create(userData: NewUser): Promise<User> {\n    try {\n      const [user] = await db.insert(users).values(userData).returning();\n      return user;\n    } catch (error) {\n      console.error('Failed to create user:', error);\n      throw new Error('Failed to create user');\n    }\n  }\n\n  // Get user by ID\n  static async getById(id: number): Promise<User | null> {\n    try {\n      const [user] = await db.select().from(users).where(eq(users.id, id));\n      return user || null;\n    } catch (error) {\n      console.error('Failed to get user by ID:', error);\n      throw new Error('Failed to get user');\n    }\n  }\n\n  // Get user by email\n  static async getByEmail(email: string): Promise<User | null> {\n    try {\n      const [user] = await db.select().from(users).where(eq(users.email, email));\n      return user || null;\n    } catch (error) {\n      console.error('Failed to get user by email:', error);\n      throw new Error('Failed to get user');\n    }\n  }\n\n  // Update user\n  static async update(id: number, userData: Partial<NewUser>): Promise<User> {\n    try {\n      const [user] = await db\n        .update(users)\n        .set({ ...userData, updatedAt: new Date() })\n        .where(eq(users.id, id))\n        .returning();\n      \n      if (!user) {\n        throw new Error('User not found');\n      }\n      \n      return user;\n    } catch (error) {\n      console.error('Failed to update user:', error);\n      throw new Error('Failed to update user');\n    }\n  }\n\n  // Delete user (soft delete by deactivating)\n  static async delete(id: number): Promise<boolean> {\n    try {\n      const result = await db.delete(users).where(eq(users.id, id));\n      return result.length > 0;\n    } catch (error) {\n      console.error('Failed to delete user:', error);\n      throw new Error('Failed to delete user');\n    }\n  }\n\n  // Check if email exists\n  static async emailExists(email: string): Promise<boolean> {\n    try {\n      const [user] = await db\n        .select({ id: users.id })\n        .from(users)\n        .where(eq(users.email, email));\n      return !!user;\n    } catch (error) {\n      console.error('Failed to check email existence:', error);\n      throw new Error('Failed to check email');\n    }\n  }\n}"],
      names: ["UserQueries", "create", "userData", "user", "db", "insert", "users", "values", "returning", "error", "console", "Error", "getById", "id", "select", "from", "where", "eq", "getByEmail", "email", "update", "set", "updatedAt", "Date", "delete", "result", "length", "emailExists"],
      mappings: ";;;;+BAKaA;;;eAAAA;;;4BALM;uBACA;wBAC4B;AAGxC,MAAMA;IACX,oBAAoB;IACpB,aAAaC,OAAOC,QAAiB,EAAiB;QACpD,IAAI;YACF,MAAM,CAACC,KAAK,GAAG,MAAMC,SAAE,CAACC,MAAM,CAACC,aAAK,EAAEC,MAAM,CAACL,UAAUM,SAAS;YAChE,OAAOL;QACT,EAAE,OAAOM,OAAO;YACdC,QAAQD,KAAK,CAAC,0BAA0BA;YACxC,MAAM,IAAIE,MAAM;QAClB;IACF;IAEA,iBAAiB;IACjB,aAAaC,QAAQC,EAAU,EAAwB;QACrD,IAAI;YACF,MAAM,CAACV,KAAK,GAAG,MAAMC,SAAE,CAACU,MAAM,GAAGC,IAAI,CAACT,aAAK,EAAEU,KAAK,CAACC,IAAAA,cAAE,EAACX,aAAK,CAACO,EAAE,EAAEA;YAChE,OAAOV,QAAQ;QACjB,EAAE,OAAOM,OAAO;YACdC,QAAQD,KAAK,CAAC,6BAA6BA;YAC3C,MAAM,IAAIE,MAAM;QAClB;IACF;IAEA,oBAAoB;IACpB,aAAaO,WAAWC,KAAa,EAAwB;QAC3D,IAAI;YACF,MAAM,CAAChB,KAAK,GAAG,MAAMC,SAAE,CAACU,MAAM,GAAGC,IAAI,CAACT,aAAK,EAAEU,KAAK,CAACC,IAAAA,cAAE,EAACX,aAAK,CAACa,KAAK,EAAEA;YACnE,OAAOhB,QAAQ;QACjB,EAAE,OAAOM,OAAO;YACdC,QAAQD,KAAK,CAAC,gCAAgCA;YAC9C,MAAM,IAAIE,MAAM;QAClB;IACF;IAEA,cAAc;IACd,aAAaS,OAAOP,EAAU,EAAEX,QAA0B,EAAiB;QACzE,IAAI;YACF,MAAM,CAACC,KAAK,GAAG,MAAMC,SAAE,CACpBgB,MAAM,CAACd,aAAK,EACZe,GAAG,CAAC;gBAAE,GAAGnB,QAAQ;gBAAEoB,WAAW,IAAIC;YAAO,GACzCP,KAAK,CAACC,IAAAA,cAAE,EAACX,aAAK,CAACO,EAAE,EAAEA,KACnBL,SAAS;YAEZ,IAAI,CAACL,MAAM;gBACT,MAAM,IAAIQ,MAAM;YAClB;YAEA,OAAOR;QACT,EAAE,OAAOM,OAAO;YACdC,QAAQD,KAAK,CAAC,0BAA0BA;YACxC,MAAM,IAAIE,MAAM;QAClB;IACF;IAEA,4CAA4C;IAC5C,aAAaa,OAAOX,EAAU,EAAoB;QAChD,IAAI;YACF,MAAMY,SAAS,MAAMrB,SAAE,CAACoB,MAAM,CAAClB,aAAK,EAAEU,KAAK,CAACC,IAAAA,cAAE,EAACX,aAAK,CAACO,EAAE,EAAEA;YACzD,OAAOY,OAAOC,MAAM,GAAG;QACzB,EAAE,OAAOjB,OAAO;YACdC,QAAQD,KAAK,CAAC,0BAA0BA;YACxC,MAAM,IAAIE,MAAM;QAClB;IACF;IAEA,wBAAwB;IACxB,aAAagB,YAAYR,KAAa,EAAoB;QACxD,IAAI;YACF,MAAM,CAAChB,KAAK,GAAG,MAAMC,SAAE,CACpBU,MAAM,CAAC;gBAAED,IAAIP,aAAK,CAACO,EAAE;YAAC,GACtBE,IAAI,CAACT,aAAK,EACVU,KAAK,CAACC,IAAAA,cAAE,EAACX,aAAK,CAACa,KAAK,EAAEA;YACzB,OAAO,CAAC,CAAChB;QACX,EAAE,OAAOM,OAAO;YACdC,QAAQD,KAAK,CAAC,oCAAoCA;YAClD,MAAM,IAAIE,MAAM;QAClB;IACF;AACF"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "6a81e13fefdee57a2ad6e0983a504db3be7e73d7"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2458ipowlu = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2458ipowlu();
cov_2458ipowlu().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_2458ipowlu().s[1]++;
Object.defineProperty(exports, "UserQueries", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_2458ipowlu().f[0]++;
    cov_2458ipowlu().s[2]++;
    return UserQueries;
  }
});
const _drizzleorm =
/* istanbul ignore next */
(cov_2458ipowlu().s[3]++, require("drizzle-orm"));
const _index =
/* istanbul ignore next */
(cov_2458ipowlu().s[4]++, require("../index"));
const _schema =
/* istanbul ignore next */
(cov_2458ipowlu().s[5]++, require("../schema"));
class UserQueries {
  // Create a new user
  static async create(userData) {
    /* istanbul ignore next */
    cov_2458ipowlu().f[1]++;
    cov_2458ipowlu().s[6]++;
    try {
      const [user] =
      /* istanbul ignore next */
      (cov_2458ipowlu().s[7]++, await _index.db.insert(_schema.users).values(userData).returning());
      /* istanbul ignore next */
      cov_2458ipowlu().s[8]++;
      return user;
    } catch (error) {
      /* istanbul ignore next */
      cov_2458ipowlu().s[9]++;
      console.error('Failed to create user:', error);
      /* istanbul ignore next */
      cov_2458ipowlu().s[10]++;
      throw new Error('Failed to create user');
    }
  }
  // Get user by ID
  static async getById(id) {
    /* istanbul ignore next */
    cov_2458ipowlu().f[2]++;
    cov_2458ipowlu().s[11]++;
    try {
      const [user] =
      /* istanbul ignore next */
      (cov_2458ipowlu().s[12]++, await _index.db.select().from(_schema.users).where((0, _drizzleorm.eq)(_schema.users.id, id)));
      /* istanbul ignore next */
      cov_2458ipowlu().s[13]++;
      return /* istanbul ignore next */(cov_2458ipowlu().b[0][0]++, user) ||
      /* istanbul ignore next */
      (cov_2458ipowlu().b[0][1]++, null);
    } catch (error) {
      /* istanbul ignore next */
      cov_2458ipowlu().s[14]++;
      console.error('Failed to get user by ID:', error);
      /* istanbul ignore next */
      cov_2458ipowlu().s[15]++;
      throw new Error('Failed to get user');
    }
  }
  // Get user by email
  static async getByEmail(email) {
    /* istanbul ignore next */
    cov_2458ipowlu().f[3]++;
    cov_2458ipowlu().s[16]++;
    try {
      const [user] =
      /* istanbul ignore next */
      (cov_2458ipowlu().s[17]++, await _index.db.select().from(_schema.users).where((0, _drizzleorm.eq)(_schema.users.email, email)));
      /* istanbul ignore next */
      cov_2458ipowlu().s[18]++;
      return /* istanbul ignore next */(cov_2458ipowlu().b[1][0]++, user) ||
      /* istanbul ignore next */
      (cov_2458ipowlu().b[1][1]++, null);
    } catch (error) {
      /* istanbul ignore next */
      cov_2458ipowlu().s[19]++;
      console.error('Failed to get user by email:', error);
      /* istanbul ignore next */
      cov_2458ipowlu().s[20]++;
      throw new Error('Failed to get user');
    }
  }
  // Update user
  static async update(id, userData) {
    /* istanbul ignore next */
    cov_2458ipowlu().f[4]++;
    cov_2458ipowlu().s[21]++;
    try {
      const [user] =
      /* istanbul ignore next */
      (cov_2458ipowlu().s[22]++, await _index.db.update(_schema.users).set({
        ...userData,
        updatedAt: new Date()
      }).where((0, _drizzleorm.eq)(_schema.users.id, id)).returning());
      /* istanbul ignore next */
      cov_2458ipowlu().s[23]++;
      if (!user) {
        /* istanbul ignore next */
        cov_2458ipowlu().b[2][0]++;
        cov_2458ipowlu().s[24]++;
        throw new Error('User not found');
      } else
      /* istanbul ignore next */
      {
        cov_2458ipowlu().b[2][1]++;
      }
      cov_2458ipowlu().s[25]++;
      return user;
    } catch (error) {
      /* istanbul ignore next */
      cov_2458ipowlu().s[26]++;
      console.error('Failed to update user:', error);
      /* istanbul ignore next */
      cov_2458ipowlu().s[27]++;
      throw new Error('Failed to update user');
    }
  }
  // Delete user (soft delete by deactivating)
  static async delete(id) {
    /* istanbul ignore next */
    cov_2458ipowlu().f[5]++;
    cov_2458ipowlu().s[28]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_2458ipowlu().s[29]++, await _index.db.delete(_schema.users).where((0, _drizzleorm.eq)(_schema.users.id, id)));
      /* istanbul ignore next */
      cov_2458ipowlu().s[30]++;
      return result.length > 0;
    } catch (error) {
      /* istanbul ignore next */
      cov_2458ipowlu().s[31]++;
      console.error('Failed to delete user:', error);
      /* istanbul ignore next */
      cov_2458ipowlu().s[32]++;
      throw new Error('Failed to delete user');
    }
  }
  // Check if email exists
  static async emailExists(email) {
    /* istanbul ignore next */
    cov_2458ipowlu().f[6]++;
    cov_2458ipowlu().s[33]++;
    try {
      const [user] =
      /* istanbul ignore next */
      (cov_2458ipowlu().s[34]++, await _index.db.select({
        id: _schema.users.id
      }).from(_schema.users).where((0, _drizzleorm.eq)(_schema.users.email, email)));
      /* istanbul ignore next */
      cov_2458ipowlu().s[35]++;
      return !!user;
    } catch (error) {
      /* istanbul ignore next */
      cov_2458ipowlu().s[36]++;
      console.error('Failed to check email existence:', error);
      /* istanbul ignore next */
      cov_2458ipowlu().s[37]++;
      throw new Error('Failed to check email');
    }
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,