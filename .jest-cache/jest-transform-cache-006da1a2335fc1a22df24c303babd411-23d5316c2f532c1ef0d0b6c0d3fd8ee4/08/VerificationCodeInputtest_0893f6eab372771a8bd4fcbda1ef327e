ebf2c37de0f233231b25a38f2b44482e
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("@testing-library/react");
const _userevent = /*#__PURE__*/ _interop_require_default(require("@testing-library/user-event"));
const _VerificationCodeInput = /*#__PURE__*/ _interop_require_default(require("../VerificationCodeInput"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
describe('VerificationCodeInput', ()=>{
    const mockOnChange = jest.fn();
    beforeEach(()=>{
        mockOnChange.mockClear();
    });
    it('renders 6 input fields by default', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_VerificationCodeInput.default, {
            value: "",
            onChange: mockOnChange
        }));
        const inputs = _react.screen.getAllByRole('textbox');
        expect(inputs).toHaveLength(6);
    });
    it('renders custom number of input fields', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_VerificationCodeInput.default, {
            value: "",
            onChange: mockOnChange,
            length: 4
        }));
        const inputs = _react.screen.getAllByRole('textbox');
        expect(inputs).toHaveLength(4);
    });
    it('displays the current value correctly', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_VerificationCodeInput.default, {
            value: "123",
            onChange: mockOnChange
        }));
        const inputs = _react.screen.getAllByRole('textbox');
        expect(inputs[0].value).toBe('1');
        expect(inputs[1].value).toBe('2');
        expect(inputs[2].value).toBe('3');
        expect(inputs[3].value).toBe('');
    });
    it('calls onChange when typing a digit', async ()=>{
        const user = _userevent.default.setup();
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_VerificationCodeInput.default, {
            value: "",
            onChange: mockOnChange
        }));
        const firstInput = _react.screen.getAllByRole('textbox')[0];
        await user.type(firstInput, '5');
        expect(mockOnChange).toHaveBeenCalledWith('5');
    });
    it('moves focus to next input after entering a digit', async ()=>{
        const user = _userevent.default.setup();
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_VerificationCodeInput.default, {
            value: "",
            onChange: mockOnChange
        }));
        const inputs = _react.screen.getAllByRole('textbox');
        await user.type(inputs[0], '1');
        await (0, _react.waitFor)(()=>{
            expect(inputs[1]).toHaveFocus();
        });
    });
    it('only allows numeric input', async ()=>{
        const user = _userevent.default.setup();
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_VerificationCodeInput.default, {
            value: "",
            onChange: mockOnChange
        }));
        const firstInput = _react.screen.getAllByRole('textbox')[0];
        // Try typing a letter - should not call onChange with the letter
        await (0, _react.act)(async ()=>{
            await user.type(firstInput, 'a');
        });
        expect(mockOnChange).not.toHaveBeenCalled();
        // Try typing a number - should call onChange
        await (0, _react.act)(async ()=>{
            await user.type(firstInput, '5');
        });
        expect(mockOnChange).toHaveBeenCalledWith('5');
    });
    it('handles backspace correctly', async ()=>{
        const user = _userevent.default.setup();
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_VerificationCodeInput.default, {
            value: "123",
            onChange: mockOnChange
        }));
        const thirdInput = _react.screen.getAllByRole('textbox')[2];
        await (0, _react.act)(async ()=>{
            thirdInput.focus();
            await user.keyboard('{Backspace}');
        });
        expect(mockOnChange).toHaveBeenCalledWith('12');
    });
    it('moves to previous input on backspace when current is empty', async ()=>{
        const user = _userevent.default.setup();
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_VerificationCodeInput.default, {
            value: "12",
            onChange: mockOnChange
        }));
        const thirdInput = _react.screen.getAllByRole('textbox')[2];
        thirdInput.focus();
        await user.keyboard('{Backspace}');
        const secondInput = _react.screen.getAllByRole('textbox')[1];
        await (0, _react.waitFor)(()=>{
            expect(secondInput).toHaveFocus();
        });
        expect(mockOnChange).toHaveBeenCalledWith('1');
    });
    it('handles arrow key navigation', async ()=>{
        const user = _userevent.default.setup();
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_VerificationCodeInput.default, {
            value: "123",
            onChange: mockOnChange
        }));
        const secondInput = _react.screen.getAllByRole('textbox')[1];
        secondInput.focus();
        await user.keyboard('{ArrowRight}');
        const thirdInput = _react.screen.getAllByRole('textbox')[2];
        await (0, _react.waitFor)(()=>{
            expect(thirdInput).toHaveFocus();
        });
        await user.keyboard('{ArrowLeft}');
        await (0, _react.waitFor)(()=>{
            expect(secondInput).toHaveFocus();
        });
    });
    it('handles paste functionality', async ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_VerificationCodeInput.default, {
            value: "",
            onChange: mockOnChange
        }));
        const firstInput = _react.screen.getAllByRole('textbox')[0];
        firstInput.focus();
        // Simulate paste event
        const pasteEvent = new Event('paste', {
            bubbles: true
        });
        Object.defineProperty(pasteEvent, 'clipboardData', {
            value: {
                getData: ()=>'123456'
            }
        });
        (0, _react.fireEvent)(firstInput, pasteEvent);
        expect(mockOnChange).toHaveBeenCalledWith('123456');
    });
    it('filters non-numeric characters from paste', async ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_VerificationCodeInput.default, {
            value: "",
            onChange: mockOnChange
        }));
        const firstInput = _react.screen.getAllByRole('textbox')[0];
        firstInput.focus();
        const pasteEvent = new Event('paste', {
            bubbles: true
        });
        Object.defineProperty(pasteEvent, 'clipboardData', {
            value: {
                getData: ()=>'a1b2c3d4e5f6'
            }
        });
        (0, _react.fireEvent)(firstInput, pasteEvent);
        expect(mockOnChange).toHaveBeenCalledWith('123456');
    });
    it('limits paste to input length', async ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_VerificationCodeInput.default, {
            value: "",
            onChange: mockOnChange,
            length: 4
        }));
        const firstInput = _react.screen.getAllByRole('textbox')[0];
        firstInput.focus();
        const pasteEvent = new Event('paste', {
            bubbles: true
        });
        Object.defineProperty(pasteEvent, 'clipboardData', {
            value: {
                getData: ()=>'123456789'
            }
        });
        (0, _react.fireEvent)(firstInput, pasteEvent);
        expect(mockOnChange).toHaveBeenCalledWith('1234');
    });
    it('shows error state correctly', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_VerificationCodeInput.default, {
            value: "123",
            onChange: mockOnChange,
            error: "Invalid code"
        }));
        const errorMessage = _react.screen.getByRole('alert');
        expect(errorMessage).toHaveTextContent('Invalid code');
        const inputs = _react.screen.getAllByRole('textbox');
        inputs.forEach((input)=>{
            expect(input).toHaveClass('border-red-300');
        });
    });
    it('disables inputs when disabled prop is true', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_VerificationCodeInput.default, {
            value: "123",
            onChange: mockOnChange,
            disabled: true
        }));
        const inputs = _react.screen.getAllByRole('textbox');
        inputs.forEach((input)=>{
            expect(input).toBeDisabled();
            expect(input).toHaveClass('opacity-50', 'cursor-not-allowed');
        });
    });
    it('does not call onChange when disabled', async ()=>{
        const user = _userevent.default.setup();
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_VerificationCodeInput.default, {
            value: "",
            onChange: mockOnChange,
            disabled: true
        }));
        const firstInput = _react.screen.getAllByRole('textbox')[0];
        await user.type(firstInput, '1');
        expect(mockOnChange).not.toHaveBeenCalled();
    });
    it('focuses first empty input on click', async ()=>{
        const user = _userevent.default.setup();
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_VerificationCodeInput.default, {
            value: "12",
            onChange: mockOnChange
        }));
        const fifthInput = _react.screen.getAllByRole('textbox')[4];
        await user.click(fifthInput);
        const thirdInput = _react.screen.getAllByRole('textbox')[2];
        await (0, _react.waitFor)(()=>{
            expect(thirdInput).toHaveFocus();
        });
    });
    it('has proper accessibility attributes', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_VerificationCodeInput.default, {
            value: "123",
            onChange: mockOnChange,
            error: "Invalid code"
        }));
        const inputs = _react.screen.getAllByRole('textbox');
        inputs.forEach((input, index)=>{
            expect(input).toHaveAttribute('aria-label', `Verification code digit ${index + 1}`);
            expect(input).toHaveAttribute('aria-describedby', 'verification-code-error');
            expect(input).toHaveAttribute('inputMode', 'numeric');
            expect(input).toHaveAttribute('pattern', '[0-9]*');
        });
    });
});

//# sourceMappingURL=data:application/json;base64,