82b623198d55ed4d20351081b94a7112
/**
 * @jest-environment jsdom
 */ "use strict";
// Mock createPortal to render in the same container for testing
jest.mock('react-dom', ()=>({
        ...jest.requireActual('react-dom'),
        createPortal: (node)=>node
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _userevent = /*#__PURE__*/ _interop_require_default(require("@testing-library/user-event"));
const _renderhelpers = require("../../../test-utils/helpers/render-helpers.js");
const _Modal = /*#__PURE__*/ _interop_require_wildcard(require("../../../components/shared/Modal"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
describe('Modal', ()=>{
    const defaultProps = {
        isOpen: true,
        onClose: jest.fn(),
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
            "data-testid": "modal-content",
            children: "Modal Content"
        })
    };
    beforeEach(()=>{
        jest.clearAllMocks();
        // Reset body overflow style
        document.body.style.overflow = 'unset';
    });
    describe('Basic Modal Rendering', ()=>{
        it('renders modal when isOpen is true', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Modal.default, {
                ...defaultProps
            }));
            expect(_react1.screen.getByTestId('modal-content')).toBeInTheDocument();
            expect(_react1.screen.getByRole('dialog', {
                hidden: true
            })).toBeInTheDocument();
        });
        it('does not render modal when isOpen is false', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Modal.default, {
                ...defaultProps,
                isOpen: false
            }));
            expect(_react1.screen.queryByTestId('modal-content')).not.toBeInTheDocument();
        });
        it('renders modal with title', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Modal.default, {
                ...defaultProps,
                title: "Test Modal"
            }));
            expect(_react1.screen.getByText('Test Modal')).toBeInTheDocument();
            expect(_react1.screen.getByRole('heading', {
                level: 2
            })).toHaveTextContent('Test Modal');
        });
        it('renders modal without title', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Modal.default, {
                ...defaultProps
            }));
            expect(_react1.screen.queryByRole('heading')).not.toBeInTheDocument();
        });
        it('renders modal with footer', ()=>{
            const footer = /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "modal-footer",
                children: "Footer Content"
            });
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Modal.default, {
                ...defaultProps,
                footer: footer
            }));
            expect(_react1.screen.getByTestId('modal-footer')).toBeInTheDocument();
        });
    });
    describe('Modal Sizes', ()=>{
        it('renders default size modal', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Modal.default, {
                ...defaultProps
            }));
            const modalContent = document.querySelector('.modal-content');
            expect(modalContent).not.toHaveClass('modal-content--large');
        });
        it('renders large size modal', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Modal.default, {
                ...defaultProps,
                size: "large"
            }));
            const modalContent = document.querySelector('.modal-content');
            expect(modalContent).toHaveClass('modal-content--large');
        });
    });
    describe('Close Button', ()=>{
        it('shows close button by default', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Modal.default, {
                ...defaultProps,
                title: "Test Modal"
            }));
            expect(_react1.screen.getByLabelText(/close modal/i)).toBeInTheDocument();
        });
        it('hides close button when showCloseButton is false', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Modal.default, {
                ...defaultProps,
                title: "Test Modal",
                showCloseButton: false
            }));
            expect(_react1.screen.queryByLabelText(/close modal/i)).not.toBeInTheDocument();
        });
        it('calls onClose when close button is clicked', async ()=>{
            const user = _userevent.default.setup();
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Modal.default, {
                ...defaultProps,
                title: "Test Modal"
            }));
            await user.click(_react1.screen.getByLabelText(/close modal/i));
            expect(defaultProps.onClose).toHaveBeenCalled();
        });
    });
    describe('Backdrop Interaction', ()=>{
        it('closes modal when backdrop is clicked by default', async ()=>{
            const user = _userevent.default.setup();
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Modal.default, {
                ...defaultProps
            }));
            const overlay = document.querySelector('.modal-overlay');
            await user.click(overlay);
            expect(defaultProps.onClose).toHaveBeenCalled();
        });
        it('does not close modal when backdrop is clicked and closeOnBackdropClick is false', async ()=>{
            const user = _userevent.default.setup();
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Modal.default, {
                ...defaultProps,
                closeOnBackdropClick: false
            }));
            const overlay = document.querySelector('.modal-overlay');
            await user.click(overlay);
            expect(defaultProps.onClose).not.toHaveBeenCalled();
        });
        it('does not close modal when clicking on modal content', async ()=>{
            const user = _userevent.default.setup();
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Modal.default, {
                ...defaultProps
            }));
            await user.click(_react1.screen.getByTestId('modal-content'));
            expect(defaultProps.onClose).not.toHaveBeenCalled();
        });
    });
    describe('Keyboard Interaction', ()=>{
        it('closes modal on Escape key by default', async ()=>{
            const user = _userevent.default.setup();
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Modal.default, {
                ...defaultProps
            }));
            await user.keyboard('{Escape}');
            expect(defaultProps.onClose).toHaveBeenCalled();
        });
        it('does not close modal on Escape key when closeOnEscape is false', async ()=>{
            const user = _userevent.default.setup();
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Modal.default, {
                ...defaultProps,
                closeOnEscape: false
            }));
            await user.keyboard('{Escape}');
            expect(defaultProps.onClose).not.toHaveBeenCalled();
        });
        it('ignores other keys', async ()=>{
            const user = _userevent.default.setup();
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Modal.default, {
                ...defaultProps
            }));
            await user.keyboard('{Enter}');
            await user.keyboard('{Space}');
            await user.keyboard('a');
            expect(defaultProps.onClose).not.toHaveBeenCalled();
        });
    });
    describe('Body Scroll Management', ()=>{
        it('prevents body scroll when modal is open', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Modal.default, {
                ...defaultProps
            }));
            expect(document.body.style.overflow).toBe('hidden');
        });
        it('restores body scroll when modal is closed', ()=>{
            const { rerender } = (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Modal.default, {
                ...defaultProps
            }));
            expect(document.body.style.overflow).toBe('hidden');
            rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Modal.default, {
                ...defaultProps,
                isOpen: false
            }));
            expect(document.body.style.overflow).toBe('unset');
        });
        it('restores body scroll on unmount', ()=>{
            const { unmount } = (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Modal.default, {
                ...defaultProps
            }));
            expect(document.body.style.overflow).toBe('hidden');
            unmount();
            expect(document.body.style.overflow).toBe('unset');
        });
    });
    describe('Accessibility', ()=>{
        it('has proper modal structure', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Modal.default, {
                ...defaultProps,
                title: "Test Modal"
            }));
            const modal = _react1.screen.getByRole('dialog', {
                hidden: true
            });
            expect(modal).toBeInTheDocument();
        });
        it('has accessible close button', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Modal.default, {
                ...defaultProps,
                title: "Test Modal"
            }));
            const closeButton = _react1.screen.getByLabelText(/close modal/i);
            expect(closeButton).toBeInTheDocument();
            expect(closeButton).toHaveAttribute('aria-label', 'Close modal');
        });
        it('focuses management works correctly', async ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Modal.default, {
                ...defaultProps,
                title: "Test Modal"
            }));
            // Modal should be focusable
            const modal = _react1.screen.getByRole('dialog', {
                hidden: true
            });
            expect(modal).toBeInTheDocument();
        });
    });
});
describe('ModalWithTabs', ()=>{
    const tabs = [
        {
            id: 'tab1',
            label: 'Tab 1',
            icon: '📝',
            content: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "tab1-content",
                children: "Tab 1 Content"
            })
        },
        {
            id: 'tab2',
            label: 'Tab 2',
            icon: '📊',
            content: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "tab2-content",
                children: "Tab 2 Content"
            })
        },
        {
            id: 'tab3',
            label: 'Tab 3',
            content: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "tab3-content",
                children: "Tab 3 Content"
            })
        }
    ];
    const defaultProps = {
        isOpen: true,
        onClose: jest.fn(),
        title: 'Tabbed Modal',
        tabs,
        activeTab: 'tab1',
        onTabChange: jest.fn()
    };
    beforeEach(()=>{
        jest.clearAllMocks();
    });
    describe('Tab Rendering', ()=>{
        it('renders all tabs', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Modal.ModalWithTabs, {
                ...defaultProps
            }));
            expect(_react1.screen.getByText('Tab 1')).toBeInTheDocument();
            expect(_react1.screen.getByText('Tab 2')).toBeInTheDocument();
            expect(_react1.screen.getByText('Tab 3')).toBeInTheDocument();
        });
        it('renders tab icons when provided', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Modal.ModalWithTabs, {
                ...defaultProps
            }));
            expect(_react1.screen.getByText('📝')).toBeInTheDocument();
            expect(_react1.screen.getByText('📊')).toBeInTheDocument();
        });
        it('shows active tab content', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Modal.ModalWithTabs, {
                ...defaultProps
            }));
            expect(_react1.screen.getByTestId('tab1-content')).toBeInTheDocument();
            expect(_react1.screen.queryByTestId('tab2-content')).not.toBeInTheDocument();
            expect(_react1.screen.queryByTestId('tab3-content')).not.toBeInTheDocument();
        });
        it('marks active tab with active class', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Modal.ModalWithTabs, {
                ...defaultProps
            }));
            const tab1Button = _react1.screen.getByText('Tab 1').closest('button');
            const tab2Button = _react1.screen.getByText('Tab 2').closest('button');
            expect(tab1Button).toHaveClass('tab--active');
            expect(tab2Button).not.toHaveClass('tab--active');
        });
    });
    describe('Tab Interaction', ()=>{
        it('calls onTabChange when tab is clicked', async ()=>{
            const user = _userevent.default.setup();
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Modal.ModalWithTabs, {
                ...defaultProps
            }));
            await user.click(_react1.screen.getByText('Tab 2'));
            expect(defaultProps.onTabChange).toHaveBeenCalledWith('tab2');
        });
        it('switches tab content when activeTab changes', ()=>{
            const { rerender } = (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Modal.ModalWithTabs, {
                ...defaultProps
            }));
            expect(_react1.screen.getByTestId('tab1-content')).toBeInTheDocument();
            rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Modal.ModalWithTabs, {
                ...defaultProps,
                activeTab: "tab2"
            }));
            expect(_react1.screen.queryByTestId('tab1-content')).not.toBeInTheDocument();
            expect(_react1.screen.getByTestId('tab2-content')).toBeInTheDocument();
        });
        it('handles keyboard navigation between tabs', async ()=>{
            const user = _userevent.default.setup();
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Modal.ModalWithTabs, {
                ...defaultProps
            }));
            const tab1 = _react1.screen.getByText('Tab 1');
            const tab2 = _react1.screen.getByText('Tab 2');
            tab1.focus();
            await user.tab();
            expect(tab2).toHaveFocus();
        });
    });
    describe('Modal Integration', ()=>{
        it('includes modal title', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Modal.ModalWithTabs, {
                ...defaultProps
            }));
            expect(_react1.screen.getByText('Tabbed Modal')).toBeInTheDocument();
        });
        it('has close button', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Modal.ModalWithTabs, {
                ...defaultProps
            }));
            expect(_react1.screen.getByLabelText(/close modal/i)).toBeInTheDocument();
        });
        it('calls onClose when close button is clicked', async ()=>{
            const user = _userevent.default.setup();
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Modal.ModalWithTabs, {
                ...defaultProps
            }));
            await user.click(_react1.screen.getByLabelText(/close modal/i));
            expect(defaultProps.onClose).toHaveBeenCalled();
        });
    });
});
describe('ConfirmationModal', ()=>{
    const defaultProps = {
        isOpen: true,
        onClose: jest.fn(),
        onConfirm: jest.fn(),
        title: 'Confirm Action',
        message: 'Are you sure you want to proceed?'
    };
    beforeEach(()=>{
        jest.clearAllMocks();
    });
    describe('Confirmation Modal Rendering', ()=>{
        it('renders confirmation modal with title and message', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Modal.ConfirmationModal, {
                ...defaultProps
            }));
            expect(_react1.screen.getByText('Confirm Action')).toBeInTheDocument();
            expect(_react1.screen.getByText('Are you sure you want to proceed?')).toBeInTheDocument();
        });
        it('renders default button text', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Modal.ConfirmationModal, {
                ...defaultProps
            }));
            expect(_react1.screen.getByRole('button', {
                name: /confirm/i
            })).toBeInTheDocument();
            expect(_react1.screen.getByRole('button', {
                name: /cancel/i
            })).toBeInTheDocument();
        });
        it('renders custom button text', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Modal.ConfirmationModal, {
                ...defaultProps,
                confirmText: "Delete",
                cancelText: "Keep"
            }));
            expect(_react1.screen.getByRole('button', {
                name: /delete/i
            })).toBeInTheDocument();
            expect(_react1.screen.getByRole('button', {
                name: /keep/i
            })).toBeInTheDocument();
        });
        it('renders danger variant styling', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Modal.ConfirmationModal, {
                ...defaultProps,
                variant: "danger"
            }));
            const confirmButton = _react1.screen.getByRole('button', {
                name: /confirm/i
            });
            expect(confirmButton).toHaveClass('btn--danger');
        });
        it('renders default variant styling', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Modal.ConfirmationModal, {
                ...defaultProps,
                variant: "default"
            }));
            const confirmButton = _react1.screen.getByRole('button', {
                name: /confirm/i
            });
            expect(confirmButton).toHaveClass('btn--primary');
        });
    });
    describe('Confirmation Modal Interaction', ()=>{
        it('calls onConfirm when confirm button is clicked', async ()=>{
            const user = _userevent.default.setup();
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Modal.ConfirmationModal, {
                ...defaultProps
            }));
            await user.click(_react1.screen.getByRole('button', {
                name: /confirm/i
            }));
            expect(defaultProps.onConfirm).toHaveBeenCalled();
        });
        it('calls onClose when cancel button is clicked', async ()=>{
            const user = _userevent.default.setup();
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Modal.ConfirmationModal, {
                ...defaultProps
            }));
            await user.click(_react1.screen.getByRole('button', {
                name: /cancel/i
            }));
            expect(defaultProps.onClose).toHaveBeenCalled();
        });
        it('calls onClose when modal is closed via backdrop', async ()=>{
            const user = _userevent.default.setup();
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Modal.ConfirmationModal, {
                ...defaultProps
            }));
            const overlay = document.querySelector('.modal-overlay');
            await user.click(overlay);
            expect(defaultProps.onClose).toHaveBeenCalled();
        });
        it('calls onClose when Escape key is pressed', async ()=>{
            const user = _userevent.default.setup();
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Modal.ConfirmationModal, {
                ...defaultProps
            }));
            await user.keyboard('{Escape}');
            expect(defaultProps.onClose).toHaveBeenCalled();
        });
    });
    describe('Loading State', ()=>{
        it('disables buttons when loading', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Modal.ConfirmationModal, {
                ...defaultProps,
                isLoading: true
            }));
            expect(_react1.screen.getByRole('button', {
                name: /confirm/i
            })).toBeDisabled();
            expect(_react1.screen.getByRole('button', {
                name: /cancel/i
            })).toBeDisabled();
        });
        it('shows loading class on confirm button', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Modal.ConfirmationModal, {
                ...defaultProps,
                isLoading: true
            }));
            const confirmButton = _react1.screen.getByRole('button', {
                name: /confirm/i
            });
            expect(confirmButton).toHaveClass('btn--loading');
        });
        it('prevents modal close when loading', async ()=>{
            const user = _userevent.default.setup();
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Modal.ConfirmationModal, {
                ...defaultProps,
                isLoading: true
            }));
            // Try to close via backdrop
            const overlay = document.querySelector('.modal-overlay');
            await user.click(overlay);
            expect(defaultProps.onClose).not.toHaveBeenCalled();
            // Try to close via Escape
            await user.keyboard('{Escape}');
            expect(defaultProps.onClose).not.toHaveBeenCalled();
        });
    });
    describe('Accessibility', ()=>{
        it('has proper button roles and labels', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Modal.ConfirmationModal, {
                ...defaultProps
            }));
            const confirmButton = _react1.screen.getByRole('button', {
                name: /confirm/i
            });
            const cancelButton = _react1.screen.getByRole('button', {
                name: /cancel/i
            });
            expect(confirmButton).toBeInTheDocument();
            expect(cancelButton).toBeInTheDocument();
        });
        it('focuses confirm button by default', async ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Modal.ConfirmationModal, {
                ...defaultProps
            }));
            await (0, _react1.waitFor)(()=>{
                const confirmButton = _react1.screen.getByRole('button', {
                    name: /confirm/i
                });
                expect(confirmButton).toHaveFocus();
            });
        });
        it('allows keyboard navigation between buttons', async ()=>{
            const user = _userevent.default.setup();
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Modal.ConfirmationModal, {
                ...defaultProps
            }));
            const confirmButton = _react1.screen.getByRole('button', {
                name: /confirm/i
            });
            const cancelButton = _react1.screen.getByRole('button', {
                name: /cancel/i
            });
            confirmButton.focus();
            await user.tab();
            expect(cancelButton).toHaveFocus();
            await user.tab({
                shift: true
            });
            expect(confirmButton).toHaveFocus();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,