1df064e156184d9213b5cce16f2e9e0d
"use strict";

/* istanbul ignore next */
function cov_pvwubrdm2() {
  var path = "/Users/stefanbekker/projects/fancy-planties/src/app/api/plant-instances/care/route.ts";
  var hash = "dfa882cf7771d237c928acb5d1c54367302c69f7";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/stefanbekker/projects/fancy-planties/src/app/api/plant-instances/care/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 20
        }
      },
      "3": {
        start: {
          line: 11,
          column: 16
        },
        end: {
          line: 11,
          column: 38
        }
      },
      "4": {
        start: {
          line: 12,
          column: 24
        },
        end: {
          line: 12,
          column: 77
        }
      },
      "5": {
        start: {
          line: 13,
          column: 22
        },
        end: {
          line: 13,
          column: 73
        }
      },
      "6": {
        start: {
          line: 14,
          column: 17
        },
        end: {
          line: 14,
          column: 55
        }
      },
      "7": {
        start: {
          line: 16,
          column: 4
        },
        end: {
          line: 117,
          column: 5
        }
      },
      "8": {
        start: {
          line: 17,
          column: 25
        },
        end: {
          line: 17,
          column: 62
        }
      },
      "9": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 24,
          column: 9
        }
      },
      "10": {
        start: {
          line: 19,
          column: 12
        },
        end: {
          line: 23,
          column: 15
        }
      },
      "11": {
        start: {
          line: 25,
          column: 21
        },
        end: {
          line: 25,
          column: 41
        }
      },
      "12": {
        start: {
          line: 26,
          column: 36
        },
        end: {
          line: 26,
          column: 40
        }
      },
      "13": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 33,
          column: 9
        }
      },
      "14": {
        start: {
          line: 28,
          column: 12
        },
        end: {
          line: 32,
          column: 15
        }
      },
      "15": {
        start: {
          line: 35,
          column: 8
        },
        end: {
          line: 94,
          column: 9
        }
      },
      "16": {
        start: {
          line: 38,
          column: 42
        },
        end: {
          line: 38,
          column: 87
        }
      },
      "17": {
        start: {
          line: 40,
          column: 42
        },
        end: {
          line: 40,
          column: 131
        }
      },
      "18": {
        start: {
          line: 41,
          column: 20
        },
        end: {
          line: 47,
          column: 21
        }
      },
      "19": {
        start: {
          line: 42,
          column: 24
        },
        end: {
          line: 46,
          column: 27
        }
      },
      "20": {
        start: {
          line: 48,
          column: 20
        },
        end: {
          line: 54,
          column: 21
        }
      },
      "21": {
        start: {
          line: 49,
          column: 24
        },
        end: {
          line: 53,
          column: 27
        }
      },
      "22": {
        start: {
          line: 55,
          column: 20
        },
        end: {
          line: 55,
          column: 147
        }
      },
      "23": {
        start: {
          line: 56,
          column: 20
        },
        end: {
          line: 56,
          column: 26
        }
      },
      "24": {
        start: {
          line: 60,
          column: 42
        },
        end: {
          line: 60,
          column: 82
        }
      },
      "25": {
        start: {
          line: 62,
          column: 42
        },
        end: {
          line: 62,
          column: 131
        }
      },
      "26": {
        start: {
          line: 63,
          column: 20
        },
        end: {
          line: 69,
          column: 21
        }
      },
      "27": {
        start: {
          line: 64,
          column: 24
        },
        end: {
          line: 68,
          column: 27
        }
      },
      "28": {
        start: {
          line: 70,
          column: 20
        },
        end: {
          line: 76,
          column: 21
        }
      },
      "29": {
        start: {
          line: 71,
          column: 24
        },
        end: {
          line: 75,
          column: 27
        }
      },
      "30": {
        start: {
          line: 78,
          column: 40
        },
        end: {
          line: 78,
          column: 65
        }
      },
      "31": {
        start: {
          line: 79,
          column: 20
        },
        end: {
          line: 81,
          column: 21
        }
      },
      "32": {
        start: {
          line: 80,
          column: 24
        },
        end: {
          line: 80,
          column: 99
        }
      },
      "33": {
        start: {
          line: 82,
          column: 20
        },
        end: {
          line: 84,
          column: 21
        }
      },
      "34": {
        start: {
          line: 83,
          column: 24
        },
        end: {
          line: 83,
          column: 101
        }
      },
      "35": {
        start: {
          line: 85,
          column: 20
        },
        end: {
          line: 85,
          column: 165
        }
      },
      "36": {
        start: {
          line: 86,
          column: 20
        },
        end: {
          line: 86,
          column: 26
        }
      },
      "37": {
        start: {
          line: 89,
          column: 16
        },
        end: {
          line: 93,
          column: 19
        }
      },
      "38": {
        start: {
          line: 96,
          column: 33
        },
        end: {
          line: 96,
          column: 102
        }
      },
      "39": {
        start: {
          line: 97,
          column: 8
        },
        end: {
          line: 101,
          column: 11
        }
      },
      "40": {
        start: {
          line: 103,
          column: 8
        },
        end: {
          line: 103,
          column: 61
        }
      },
      "41": {
        start: {
          line: 104,
          column: 8
        },
        end: {
          line: 111,
          column: 9
        }
      },
      "42": {
        start: {
          line: 105,
          column: 12
        },
        end: {
          line: 110,
          column: 15
        }
      },
      "43": {
        start: {
          line: 112,
          column: 8
        },
        end: {
          line: 116,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "POST",
        decl: {
          start: {
            line: 15,
            column: 15
          },
          end: {
            line: 15,
            column: 19
          }
        },
        loc: {
          start: {
            line: 15,
            column: 29
          },
          end: {
            line: 118,
            column: 1
          }
        },
        line: 15
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 18,
            column: 8
          },
          end: {
            line: 24,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 18,
            column: 8
          },
          end: {
            line: 24,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 18
      },
      "1": {
        loc: {
          start: {
            line: 27,
            column: 8
          },
          end: {
            line: 33,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 27,
            column: 8
          },
          end: {
            line: 33,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 27
      },
      "2": {
        loc: {
          start: {
            line: 35,
            column: 8
          },
          end: {
            line: 94,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 36,
            column: 12
          },
          end: {
            line: 57,
            column: 17
          }
        }, {
          start: {
            line: 58,
            column: 12
          },
          end: {
            line: 87,
            column: 17
          }
        }, {
          start: {
            line: 88,
            column: 12
          },
          end: {
            line: 93,
            column: 19
          }
        }],
        line: 35
      },
      "3": {
        loc: {
          start: {
            line: 41,
            column: 20
          },
          end: {
            line: 47,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 41,
            column: 20
          },
          end: {
            line: 47,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 41
      },
      "4": {
        loc: {
          start: {
            line: 48,
            column: 20
          },
          end: {
            line: 54,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 48,
            column: 20
          },
          end: {
            line: 54,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 48
      },
      "5": {
        loc: {
          start: {
            line: 63,
            column: 20
          },
          end: {
            line: 69,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 63,
            column: 20
          },
          end: {
            line: 69,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 63
      },
      "6": {
        loc: {
          start: {
            line: 70,
            column: 20
          },
          end: {
            line: 76,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 70,
            column: 20
          },
          end: {
            line: 76,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 70
      },
      "7": {
        loc: {
          start: {
            line: 78,
            column: 40
          },
          end: {
            line: 78,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 78,
            column: 40
          },
          end: {
            line: 78,
            column: 59
          }
        }, {
          start: {
            line: 78,
            column: 63
          },
          end: {
            line: 78,
            column: 65
          }
        }],
        line: 78
      },
      "8": {
        loc: {
          start: {
            line: 79,
            column: 20
          },
          end: {
            line: 81,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 79,
            column: 20
          },
          end: {
            line: 81,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 79
      },
      "9": {
        loc: {
          start: {
            line: 80,
            column: 42
          },
          end: {
            line: 80,
            column: 67
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 80,
            column: 58
          },
          end: {
            line: 80,
            column: 62
          }
        }, {
          start: {
            line: 80,
            column: 65
          },
          end: {
            line: 80,
            column: 67
          }
        }],
        line: 80
      },
      "10": {
        loc: {
          start: {
            line: 82,
            column: 20
          },
          end: {
            line: 84,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 82,
            column: 20
          },
          end: {
            line: 84,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 82
      },
      "11": {
        loc: {
          start: {
            line: 83,
            column: 42
          },
          end: {
            line: 83,
            column: 67
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 83,
            column: 58
          },
          end: {
            line: 83,
            column: 62
          }
        }, {
          start: {
            line: 83,
            column: 65
          },
          end: {
            line: 83,
            column: 67
          }
        }],
        line: 83
      },
      "12": {
        loc: {
          start: {
            line: 85,
            column: 137
          },
          end: {
            line: 85,
            column: 163
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 85,
            column: 137
          },
          end: {
            line: 85,
            column: 150
          }
        }, {
          start: {
            line: 85,
            column: 154
          },
          end: {
            line: 85,
            column: 163
          }
        }],
        line: 85
      },
      "13": {
        loc: {
          start: {
            line: 104,
            column: 8
          },
          end: {
            line: 111,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 104,
            column: 8
          },
          end: {
            line: 111,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 104
      },
      "14": {
        loc: {
          start: {
            line: 104,
            column: 12
          },
          end: {
            line: 104,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 104,
            column: 12
          },
          end: {
            line: 104,
            column: 34
          }
        }, {
          start: {
            line: 104,
            column: 38
          },
          end: {
            line: 104,
            column: 74
          }
        }],
        line: 104
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0
    },
    f: {
      "0": 0,
      "1": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/stefanbekker/projects/fancy-planties/src/app/api/plant-instances/care/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport { PlantInstanceQueries } from '@/lib/db/queries/plant-instances';\nimport { logFertilizerSchema, logRepotSchema } from '@/lib/validation/plant-schemas';\nimport { validateRequest } from '@/lib/auth/server';\n\n// POST /api/plant-instances/care - Log care activities (fertilizer, repot)\nexport async function POST(request: NextRequest) {\n  try {\n    const { user } = await validateRequest();\n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const body = await request.json();\n    const { action, ...data } = body;\n\n    if (!action) {\n      return NextResponse.json({ error: 'Care action is required' }, { status: 400 });\n    }\n\n    let result;\n\n    switch (action) {\n      case 'fertilize': {\n        const validatedData = logFertilizerSchema.parse(data);\n        \n        // Check if the plant instance belongs to the user\n        const plantInstance = await PlantInstanceQueries.getEnhancedById(validatedData.plantInstanceId);\n        if (!plantInstance) {\n          return NextResponse.json({ error: 'Plant instance not found' }, { status: 404 });\n        }\n        if (plantInstance.userId !== user.id) {\n          return NextResponse.json({ error: 'Forbidden' }, { status: 403 });\n        }\n\n        result = await PlantInstanceQueries.logFertilizer(\n          validatedData.plantInstanceId,\n          validatedData.fertilizerDate\n        );\n        break;\n      }\n\n      case 'repot': {\n        const validatedData = logRepotSchema.parse(data);\n        \n        // Check if the plant instance belongs to the user\n        const plantInstance = await PlantInstanceQueries.getEnhancedById(validatedData.plantInstanceId);\n        if (!plantInstance) {\n          return NextResponse.json({ error: 'Plant instance not found' }, { status: 404 });\n        }\n        if (plantInstance.userId !== user.id) {\n          return NextResponse.json({ error: 'Forbidden' }, { status: 403 });\n        }\n\n        // Combine notes with pot size and soil type if provided\n        let combinedNotes = validatedData.notes || '';\n        if (data.potSize) {\n          combinedNotes += (combinedNotes ? '\\n' : '') + `Pot size: ${data.potSize}`;\n        }\n        if (data.soilType) {\n          combinedNotes += (combinedNotes ? '\\n' : '') + `Soil type: ${data.soilType}`;\n        }\n\n        result = await PlantInstanceQueries.logRepot(\n          validatedData.plantInstanceId,\n          validatedData.repotDate,\n          combinedNotes || undefined\n        );\n        break;\n      }\n\n      default:\n        return NextResponse.json({ error: 'Invalid care action' }, { status: 400 });\n    }\n\n    // Get the enhanced plant instance with updated data\n    const enhancedInstance = await PlantInstanceQueries.getEnhancedById(result.id);\n    \n    return NextResponse.json({\n      success: true,\n      message: `${action.charAt(0).toUpperCase() + action.slice(1)} logged successfully`,\n      plantInstance: enhancedInstance,\n    });\n  } catch (error) {\n    console.error('Failed to log care activity:', error);\n    \n    if (error instanceof Error && error.message.includes('validation')) {\n      return NextResponse.json(\n        { error: 'Invalid care data', details: error.message },\n        { status: 400 }\n      );\n    }\n    \n    return NextResponse.json(\n      { error: 'Failed to log care activity' },\n      { status: 500 }\n    );\n  }\n}"],
      names: ["POST", "request", "user", "validateRequest", "NextResponse", "json", "error", "status", "body", "action", "data", "result", "validatedData", "logFertilizerSchema", "parse", "plantInstance", "PlantInstanceQueries", "getEnhancedById", "plantInstanceId", "userId", "id", "logFertilizer", "fertilizerDate", "logRepotSchema", "combinedNotes", "notes", "potSize", "soilType", "logRepot", "repotDate", "undefined", "enhancedInstance", "success", "message", "charAt", "toUpperCase", "slice", "console", "Error", "includes", "details"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "dfa882cf7771d237c928acb5d1c54367302c69f7"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_pvwubrdm2 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_pvwubrdm2();
cov_pvwubrdm2().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_pvwubrdm2().s[1]++;
Object.defineProperty(exports, "POST", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_pvwubrdm2().f[0]++;
    cov_pvwubrdm2().s[2]++;
    return POST;
  }
});
const _server =
/* istanbul ignore next */
(cov_pvwubrdm2().s[3]++, require("next/server"));
const _plantinstances =
/* istanbul ignore next */
(cov_pvwubrdm2().s[4]++, require("../../../../lib/db/queries/plant-instances"));
const _plantschemas =
/* istanbul ignore next */
(cov_pvwubrdm2().s[5]++, require("../../../../lib/validation/plant-schemas"));
const _server1 =
/* istanbul ignore next */
(cov_pvwubrdm2().s[6]++, require("../../../../lib/auth/server"));
async function POST(request) {
  /* istanbul ignore next */
  cov_pvwubrdm2().f[1]++;
  cov_pvwubrdm2().s[7]++;
  try {
    const {
      user
    } =
    /* istanbul ignore next */
    (cov_pvwubrdm2().s[8]++, await (0, _server1.validateRequest)());
    /* istanbul ignore next */
    cov_pvwubrdm2().s[9]++;
    if (!user) {
      /* istanbul ignore next */
      cov_pvwubrdm2().b[0][0]++;
      cov_pvwubrdm2().s[10]++;
      return _server.NextResponse.json({
        error: 'Unauthorized'
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_pvwubrdm2().b[0][1]++;
    }
    const body =
    /* istanbul ignore next */
    (cov_pvwubrdm2().s[11]++, await request.json());
    const {
      action,
      ...data
    } =
    /* istanbul ignore next */
    (cov_pvwubrdm2().s[12]++, body);
    /* istanbul ignore next */
    cov_pvwubrdm2().s[13]++;
    if (!action) {
      /* istanbul ignore next */
      cov_pvwubrdm2().b[1][0]++;
      cov_pvwubrdm2().s[14]++;
      return _server.NextResponse.json({
        error: 'Care action is required'
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_pvwubrdm2().b[1][1]++;
    }
    let result;
    /* istanbul ignore next */
    cov_pvwubrdm2().s[15]++;
    switch (action) {
      case 'fertilize':
        /* istanbul ignore next */
        cov_pvwubrdm2().b[2][0]++;
        {
          const validatedData =
          /* istanbul ignore next */
          (cov_pvwubrdm2().s[16]++, _plantschemas.logFertilizerSchema.parse(data));
          // Check if the plant instance belongs to the user
          const plantInstance =
          /* istanbul ignore next */
          (cov_pvwubrdm2().s[17]++, await _plantinstances.PlantInstanceQueries.getEnhancedById(validatedData.plantInstanceId));
          /* istanbul ignore next */
          cov_pvwubrdm2().s[18]++;
          if (!plantInstance) {
            /* istanbul ignore next */
            cov_pvwubrdm2().b[3][0]++;
            cov_pvwubrdm2().s[19]++;
            return _server.NextResponse.json({
              error: 'Plant instance not found'
            }, {
              status: 404
            });
          } else
          /* istanbul ignore next */
          {
            cov_pvwubrdm2().b[3][1]++;
          }
          cov_pvwubrdm2().s[20]++;
          if (plantInstance.userId !== user.id) {
            /* istanbul ignore next */
            cov_pvwubrdm2().b[4][0]++;
            cov_pvwubrdm2().s[21]++;
            return _server.NextResponse.json({
              error: 'Forbidden'
            }, {
              status: 403
            });
          } else
          /* istanbul ignore next */
          {
            cov_pvwubrdm2().b[4][1]++;
          }
          cov_pvwubrdm2().s[22]++;
          result = await _plantinstances.PlantInstanceQueries.logFertilizer(validatedData.plantInstanceId, validatedData.fertilizerDate);
          /* istanbul ignore next */
          cov_pvwubrdm2().s[23]++;
          break;
        }
      case 'repot':
        /* istanbul ignore next */
        cov_pvwubrdm2().b[2][1]++;
        {
          const validatedData =
          /* istanbul ignore next */
          (cov_pvwubrdm2().s[24]++, _plantschemas.logRepotSchema.parse(data));
          // Check if the plant instance belongs to the user
          const plantInstance =
          /* istanbul ignore next */
          (cov_pvwubrdm2().s[25]++, await _plantinstances.PlantInstanceQueries.getEnhancedById(validatedData.plantInstanceId));
          /* istanbul ignore next */
          cov_pvwubrdm2().s[26]++;
          if (!plantInstance) {
            /* istanbul ignore next */
            cov_pvwubrdm2().b[5][0]++;
            cov_pvwubrdm2().s[27]++;
            return _server.NextResponse.json({
              error: 'Plant instance not found'
            }, {
              status: 404
            });
          } else
          /* istanbul ignore next */
          {
            cov_pvwubrdm2().b[5][1]++;
          }
          cov_pvwubrdm2().s[28]++;
          if (plantInstance.userId !== user.id) {
            /* istanbul ignore next */
            cov_pvwubrdm2().b[6][0]++;
            cov_pvwubrdm2().s[29]++;
            return _server.NextResponse.json({
              error: 'Forbidden'
            }, {
              status: 403
            });
          } else
          /* istanbul ignore next */
          {
            cov_pvwubrdm2().b[6][1]++;
          }
          // Combine notes with pot size and soil type if provided
          let combinedNotes =
          /* istanbul ignore next */
          (cov_pvwubrdm2().s[30]++,
          /* istanbul ignore next */
          (cov_pvwubrdm2().b[7][0]++, validatedData.notes) ||
          /* istanbul ignore next */
          (cov_pvwubrdm2().b[7][1]++, ''));
          /* istanbul ignore next */
          cov_pvwubrdm2().s[31]++;
          if (data.potSize) {
            /* istanbul ignore next */
            cov_pvwubrdm2().b[8][0]++;
            cov_pvwubrdm2().s[32]++;
            combinedNotes += (combinedNotes ?
            /* istanbul ignore next */
            (cov_pvwubrdm2().b[9][0]++, '\n') :
            /* istanbul ignore next */
            (cov_pvwubrdm2().b[9][1]++, '')) + `Pot size: ${data.potSize}`;
          } else
          /* istanbul ignore next */
          {
            cov_pvwubrdm2().b[8][1]++;
          }
          cov_pvwubrdm2().s[33]++;
          if (data.soilType) {
            /* istanbul ignore next */
            cov_pvwubrdm2().b[10][0]++;
            cov_pvwubrdm2().s[34]++;
            combinedNotes += (combinedNotes ?
            /* istanbul ignore next */
            (cov_pvwubrdm2().b[11][0]++, '\n') :
            /* istanbul ignore next */
            (cov_pvwubrdm2().b[11][1]++, '')) + `Soil type: ${data.soilType}`;
          } else
          /* istanbul ignore next */
          {
            cov_pvwubrdm2().b[10][1]++;
          }
          cov_pvwubrdm2().s[35]++;
          result = await _plantinstances.PlantInstanceQueries.logRepot(validatedData.plantInstanceId, validatedData.repotDate,
          /* istanbul ignore next */
          (cov_pvwubrdm2().b[12][0]++, combinedNotes) ||
          /* istanbul ignore next */
          (cov_pvwubrdm2().b[12][1]++, undefined));
          /* istanbul ignore next */
          cov_pvwubrdm2().s[36]++;
          break;
        }
      default:
        /* istanbul ignore next */
        cov_pvwubrdm2().b[2][2]++;
        cov_pvwubrdm2().s[37]++;
        return _server.NextResponse.json({
          error: 'Invalid care action'
        }, {
          status: 400
        });
    }
    // Get the enhanced plant instance with updated data
    const enhancedInstance =
    /* istanbul ignore next */
    (cov_pvwubrdm2().s[38]++, await _plantinstances.PlantInstanceQueries.getEnhancedById(result.id));
    /* istanbul ignore next */
    cov_pvwubrdm2().s[39]++;
    return _server.NextResponse.json({
      success: true,
      message: `${action.charAt(0).toUpperCase() + action.slice(1)} logged successfully`,
      plantInstance: enhancedInstance
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_pvwubrdm2().s[40]++;
    console.error('Failed to log care activity:', error);
    /* istanbul ignore next */
    cov_pvwubrdm2().s[41]++;
    if (
    /* istanbul ignore next */
    (cov_pvwubrdm2().b[14][0]++, error instanceof Error) &&
    /* istanbul ignore next */
    (cov_pvwubrdm2().b[14][1]++, error.message.includes('validation'))) {
      /* istanbul ignore next */
      cov_pvwubrdm2().b[13][0]++;
      cov_pvwubrdm2().s[42]++;
      return _server.NextResponse.json({
        error: 'Invalid care data',
        details: error.message
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_pvwubrdm2().b[13][1]++;
    }
    cov_pvwubrdm2().s[43]++;
    return _server.NextResponse.json({
      error: 'Failed to log care activity'
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,