{"version":3,"sources":["/Users/stefanbekker/projects/fancy-planties/src/__tests__/components/shared/ErrorDisplay.test.js"],"sourcesContent":["/**\n * @jest-environment jsdom\n */\n\nimport React from 'react';\nimport { screen } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport { renderWithProviders } from '@/test-utils/helpers/render-helpers';\nimport ErrorDisplay, { InlineErrorDisplay, ErrorToast } from '@/components/shared/ErrorDisplay';\n\ndescribe('ErrorDisplay', () => {\n  const defaultError = {\n    message: 'Something went wrong',\n    retryable: true,\n  };\n\n  const mockOnRetry = jest.fn();\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('Basic Rendering', () => {\n    it('renders error message', () => {\n      renderWithProviders(\n        <ErrorDisplay error={defaultError} onRetry={mockOnRetry} />\n      );\n\n      expect(screen.getByText('Error')).toBeInTheDocument();\n      expect(screen.getByText('Something went wrong')).toBeInTheDocument();\n    });\n\n    it('does not render when error is null', () => {\n      renderWithProviders(\n        <ErrorDisplay error={null} onRetry={mockOnRetry} />\n      );\n\n      expect(screen.queryByText('Error')).not.toBeInTheDocument();\n    });\n\n    it('does not render when error is undefined', () => {\n      renderWithProviders(\n        <ErrorDisplay error={undefined} onRetry={mockOnRetry} />\n      );\n\n      expect(screen.queryByText('Error')).not.toBeInTheDocument();\n    });\n\n    it('applies custom className', () => {\n      renderWithProviders(\n        <ErrorDisplay \n          error={defaultError} \n          className=\"custom-error-class\"\n          onRetry={mockOnRetry} \n        />\n      );\n\n      const errorContainer = screen.getByText('Error').closest('div');\n      expect(errorContainer).toHaveClass('custom-error-class');\n    });\n  });\n\n  describe('Error Details', () => {\n    it('shows error details when showDetails is true and details exist', () => {\n      const errorWithDetails = {\n        message: 'API Error',\n        details: { status: 500, endpoint: '/api/plants' },\n      };\n\n      renderWithProviders(\n        <ErrorDisplay \n          error={errorWithDetails} \n          showDetails={true}\n          onRetry={mockOnRetry} \n        />\n      );\n\n      expect(screen.getByText('Show technical details')).toBeInTheDocument();\n    });\n\n    it('does not show details section when showDetails is false', () => {\n      const errorWithDetails = {\n        message: 'API Error',\n        details: { status: 500, endpoint: '/api/plants' },\n      };\n\n      renderWithProviders(\n        <ErrorDisplay \n          error={errorWithDetails} \n          showDetails={false}\n          onRetry={mockOnRetry} \n        />\n      );\n\n      expect(screen.queryByText('Show technical details')).not.toBeInTheDocument();\n    });\n\n    it('does not show details section when no details exist', () => {\n      renderWithProviders(\n        <ErrorDisplay \n          error={defaultError} \n          showDetails={true}\n          onRetry={mockOnRetry} \n        />\n      );\n\n      expect(screen.queryByText('Show technical details')).not.toBeInTheDocument();\n    });\n\n    it('expands details when clicked', async () => {\n      const user = userEvent.setup();\n      const errorWithDetails = {\n        message: 'API Error',\n        details: { status: 500, endpoint: '/api/plants' },\n      };\n\n      renderWithProviders(\n        <ErrorDisplay \n          error={errorWithDetails} \n          showDetails={true}\n          onRetry={mockOnRetry} \n        />\n      );\n\n      await user.click(screen.getByText('Show technical details'));\n\n      expect(screen.getByText(/\"status\": 500/)).toBeInTheDocument();\n      expect(screen.getByText(/\"endpoint\": \"\\/api\\/plants\"/)).toBeInTheDocument();\n    });\n  });\n\n  describe('Retry Functionality', () => {\n    it('shows retry button when error is retryable and onRetry is provided', () => {\n      renderWithProviders(\n        <ErrorDisplay error={defaultError} onRetry={mockOnRetry} />\n      );\n\n      expect(screen.getByRole('button', { name: /try again/i })).toBeInTheDocument();\n    });\n\n    it('does not show retry button when error is not retryable', () => {\n      const nonRetryableError = {\n        message: 'Permanent error',\n        retryable: false,\n      };\n\n      renderWithProviders(\n        <ErrorDisplay error={nonRetryableError} onRetry={mockOnRetry} />\n      );\n\n      expect(screen.queryByRole('button', { name: /try again/i })).not.toBeInTheDocument();\n    });\n\n    it('does not show retry button when onRetry is not provided', () => {\n      renderWithProviders(\n        <ErrorDisplay error={defaultError} />\n      );\n\n      expect(screen.queryByRole('button', { name: /try again/i })).not.toBeInTheDocument();\n    });\n\n    it('calls onRetry when retry button is clicked', async () => {\n      const user = userEvent.setup();\n      renderWithProviders(\n        <ErrorDisplay error={defaultError} onRetry={mockOnRetry} />\n      );\n\n      await user.click(screen.getByRole('button', { name: /try again/i }));\n\n      expect(mockOnRetry).toHaveBeenCalled();\n    });\n\n    it('retry button has proper styling and icon', () => {\n      renderWithProviders(\n        <ErrorDisplay error={defaultError} onRetry={mockOnRetry} />\n      );\n\n      const retryButton = screen.getByRole('button', { name: /try again/i });\n      expect(retryButton).toHaveClass('bg-red-100', 'border-red-300', 'text-red-800');\n    });\n  });\n\n  describe('Accessibility', () => {\n    it('has proper ARIA attributes', () => {\n      renderWithProviders(\n        <ErrorDisplay error={defaultError} onRetry={mockOnRetry} />\n      );\n\n      const errorMessage = screen.getByText('Something went wrong');\n      expect(errorMessage).toHaveAttribute('role', 'alert');\n      expect(errorMessage).toHaveAttribute('aria-live', 'polite');\n    });\n\n    it('has proper alert icon with aria-hidden', () => {\n      renderWithProviders(\n        <ErrorDisplay error={defaultError} onRetry={mockOnRetry} />\n      );\n\n      const alertIcon = document.querySelector('[aria-hidden=\"true\"]');\n      expect(alertIcon).toBeInTheDocument();\n    });\n\n    it('retry button is keyboard accessible', async () => {\n      const user = userEvent.setup();\n      renderWithProviders(\n        <ErrorDisplay error={defaultError} onRetry={mockOnRetry} />\n      );\n\n      const retryButton = screen.getByRole('button', { name: /try again/i });\n      retryButton.focus();\n      \n      await user.keyboard('{Enter}');\n      expect(mockOnRetry).toHaveBeenCalled();\n    });\n  });\n\n  describe('Visual Structure', () => {\n    it('has proper error styling classes', () => {\n      renderWithProviders(\n        <ErrorDisplay error={defaultError} onRetry={mockOnRetry} />\n      );\n\n      const container = screen.getByText('Error').closest('div');\n      expect(container).toHaveClass('border-red-200', 'bg-red-50');\n    });\n\n    it('has proper icon and text layout', () => {\n      renderWithProviders(\n        <ErrorDisplay error={defaultError} onRetry={mockOnRetry} />\n      );\n\n      const container = screen.getByText('Error').closest('div');\n      expect(container.querySelector('.flex')).toBeInTheDocument();\n    });\n  });\n});\n\ndescribe('InlineErrorDisplay', () => {\n  describe('Basic Rendering', () => {\n    it('renders error message', () => {\n      renderWithProviders(\n        <InlineErrorDisplay error=\"Field is required\" />\n      );\n\n      expect(screen.getByText('Field is required')).toBeInTheDocument();\n    });\n\n    it('does not render when error is null', () => {\n      renderWithProviders(\n        <InlineErrorDisplay error={null} />\n      );\n\n      expect(screen.queryByRole('alert')).not.toBeInTheDocument();\n    });\n\n    it('does not render when error is empty string', () => {\n      renderWithProviders(\n        <InlineErrorDisplay error=\"\" />\n      );\n\n      expect(screen.queryByRole('alert')).not.toBeInTheDocument();\n    });\n\n    it('applies custom className', () => {\n      renderWithProviders(\n        <InlineErrorDisplay error=\"Error message\" className=\"custom-inline-error\" />\n      );\n\n      const errorElement = screen.getByRole('alert');\n      expect(errorElement).toHaveClass('custom-inline-error');\n    });\n  });\n\n  describe('Accessibility', () => {\n    it('has proper role attribute', () => {\n      renderWithProviders(\n        <InlineErrorDisplay error=\"Validation error\" />\n      );\n\n      expect(screen.getByRole('alert')).toBeInTheDocument();\n    });\n\n    it('has error icon with aria-hidden', () => {\n      renderWithProviders(\n        <InlineErrorDisplay error=\"Error message\" />\n      );\n\n      const icon = document.querySelector('[aria-hidden=\"true\"]');\n      expect(icon).toBeInTheDocument();\n    });\n  });\n\n  describe('Visual Structure', () => {\n    it('has proper styling classes', () => {\n      renderWithProviders(\n        <InlineErrorDisplay error=\"Error message\" />\n      );\n\n      const errorElement = screen.getByRole('alert');\n      expect(errorElement).toHaveClass('text-red-600', 'text-sm');\n    });\n\n    it('displays error icon', () => {\n      renderWithProviders(\n        <InlineErrorDisplay error=\"Error message\" />\n      );\n\n      const errorElement = screen.getByRole('alert');\n      expect(errorElement.querySelector('svg')).toBeInTheDocument();\n    });\n  });\n\n  describe('Form Integration', () => {\n    it('works correctly in form context', () => {\n      const FormWithError = ({ hasError }) => (\n        <div>\n          <input type=\"text\" />\n          <InlineErrorDisplay error={hasError ? 'This field is required' : null} />\n        </div>\n      );\n\n      const { rerender } = renderWithProviders(<FormWithError hasError={false} />);\n      expect(screen.queryByRole('alert')).not.toBeInTheDocument();\n\n      rerender(<FormWithError hasError={true} />);\n      expect(screen.getByRole('alert')).toBeInTheDocument();\n      expect(screen.getByText('This field is required')).toBeInTheDocument();\n    });\n  });\n});\n\ndescribe('ErrorToast', () => {\n  const mockOnDismiss = jest.fn();\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('Basic Rendering', () => {\n    it('renders error toast with message', () => {\n      renderWithProviders(\n        <ErrorToast error=\"Network connection failed\" onDismiss={mockOnDismiss} />\n      );\n\n      expect(screen.getByText('Error')).toBeInTheDocument();\n      expect(screen.getByText('Network connection failed')).toBeInTheDocument();\n    });\n\n    it('applies custom className', () => {\n      renderWithProviders(\n        <ErrorToast \n          error=\"Error message\" \n          onDismiss={mockOnDismiss}\n          className=\"custom-toast-class\"\n        />\n      );\n\n      const toastContainer = screen.getByText('Error').closest('div');\n      expect(toastContainer).toHaveClass('custom-toast-class');\n    });\n  });\n\n  describe('Dismiss Functionality', () => {\n    it('shows dismiss button', () => {\n      renderWithProviders(\n        <ErrorToast error=\"Error message\" onDismiss={mockOnDismiss} />\n      );\n\n      expect(screen.getByRole('button', { name: /dismiss/i })).toBeInTheDocument();\n    });\n\n    it('calls onDismiss when dismiss button is clicked', async () => {\n      const user = userEvent.setup();\n      renderWithProviders(\n        <ErrorToast error=\"Error message\" onDismiss={mockOnDismiss} />\n      );\n\n      await user.click(screen.getByRole('button', { name: /dismiss/i }));\n\n      expect(mockOnDismiss).toHaveBeenCalled();\n    });\n\n    it('dismiss button is keyboard accessible', async () => {\n      const user = userEvent.setup();\n      renderWithProviders(\n        <ErrorToast error=\"Error message\" onDismiss={mockOnDismiss} />\n      );\n\n      const dismissButton = screen.getByRole('button', { name: /dismiss/i });\n      dismissButton.focus();\n      \n      await user.keyboard('{Enter}');\n      expect(mockOnDismiss).toHaveBeenCalled();\n    });\n  });\n\n  describe('Accessibility', () => {\n    it('has proper screen reader text for dismiss button', () => {\n      renderWithProviders(\n        <ErrorToast error=\"Error message\" onDismiss={mockOnDismiss} />\n      );\n\n      const dismissButton = screen.getByRole('button', { name: /dismiss/i });\n      expect(dismissButton.querySelector('.sr-only')).toHaveTextContent('Dismiss');\n    });\n\n    it('has proper focus management', () => {\n      renderWithProviders(\n        <ErrorToast error=\"Error message\" onDismiss={mockOnDismiss} />\n      );\n\n      const dismissButton = screen.getByRole('button', { name: /dismiss/i });\n      expect(dismissButton).toHaveClass('focus:ring-2', 'focus:ring-red-500');\n    });\n  });\n\n  describe('Visual Structure', () => {\n    it('has proper toast positioning classes', () => {\n      renderWithProviders(\n        <ErrorToast error=\"Error message\" onDismiss={mockOnDismiss} />\n      );\n\n      const toastContainer = screen.getByText('Error').closest('div');\n      expect(toastContainer).toHaveClass('fixed', 'top-4', 'right-4', 'z-50');\n    });\n\n    it('has proper error styling', () => {\n      renderWithProviders(\n        <ErrorToast error=\"Error message\" onDismiss={mockOnDismiss} />\n      );\n\n      const toastContainer = screen.getByText('Error').closest('div');\n      expect(toastContainer).toHaveClass('bg-red-50', 'border-red-200', 'shadow-lg');\n    });\n\n    it('displays error icon', () => {\n      renderWithProviders(\n        <ErrorToast error=\"Error message\" onDismiss={mockOnDismiss} />\n      );\n\n      const icon = document.querySelector('svg');\n      expect(icon).toBeInTheDocument();\n    });\n  });\n\n  describe('Toast Behavior', () => {\n    it('renders as fixed positioned element', () => {\n      renderWithProviders(\n        <ErrorToast error=\"Error message\" onDismiss={mockOnDismiss} />\n      );\n\n      const toastContainer = screen.getByText('Error').closest('div');\n      expect(toastContainer).toHaveClass('fixed');\n    });\n\n    it('has proper z-index for overlay', () => {\n      renderWithProviders(\n        <ErrorToast error=\"Error message\" onDismiss={mockOnDismiss} />\n      );\n\n      const toastContainer = screen.getByText('Error').closest('div');\n      expect(toastContainer).toHaveClass('z-50');\n    });\n\n    it('has responsive width classes', () => {\n      renderWithProviders(\n        <ErrorToast error=\"Error message\" onDismiss={mockOnDismiss} />\n      );\n\n      const toastContainer = screen.getByText('Error').closest('div');\n      expect(toastContainer).toHaveClass('max-w-sm', 'w-full');\n    });\n  });\n});"],"names":["describe","defaultError","message","retryable","mockOnRetry","jest","fn","beforeEach","clearAllMocks","it","renderWithProviders","ErrorDisplay","error","onRetry","expect","screen","getByText","toBeInTheDocument","queryByText","not","undefined","className","errorContainer","closest","toHaveClass","errorWithDetails","details","status","endpoint","showDetails","user","userEvent","setup","click","getByRole","name","nonRetryableError","queryByRole","toHaveBeenCalled","retryButton","errorMessage","toHaveAttribute","alertIcon","document","querySelector","focus","keyboard","container","InlineErrorDisplay","errorElement","icon","FormWithError","hasError","div","input","type","rerender","mockOnDismiss","ErrorToast","onDismiss","toastContainer","dismissButton","toHaveTextContent"],"mappings":"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"}