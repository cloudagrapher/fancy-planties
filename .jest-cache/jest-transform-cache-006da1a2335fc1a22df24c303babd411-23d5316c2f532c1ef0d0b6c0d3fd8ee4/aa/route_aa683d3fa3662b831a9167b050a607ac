f8e5005f0c3d4a1707630764405a1a69
"use strict";

/* istanbul ignore next */
function cov_1magveakh7() {
  var path = "/Users/stefanbekker/projects/fancy-planties/src/app/api/propagations/[id]/status/route.ts";
  var hash = "ac3300c84c51b1132a11c3f8aa549a7a44fc6001";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/stefanbekker/projects/fancy-planties/src/app/api/propagations/[id]/status/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 21
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 11,
          column: 23
        }
      },
      "4": {
        start: {
          line: 12,
          column: 16
        },
        end: {
          line: 12,
          column: 38
        }
      },
      "5": {
        start: {
          line: 13,
          column: 17
        },
        end: {
          line: 13,
          column: 58
        }
      },
      "6": {
        start: {
          line: 14,
          column: 22
        },
        end: {
          line: 14,
          column: 75
        }
      },
      "7": {
        start: {
          line: 15,
          column: 13
        },
        end: {
          line: 15,
          column: 27
        }
      },
      "8": {
        start: {
          line: 17,
          column: 27
        },
        end: {
          line: 25,
          column: 2
        }
      },
      "9": {
        start: {
          line: 27,
          column: 4
        },
        end: {
          line: 80,
          column: 5
        }
      },
      "10": {
        start: {
          line: 28,
          column: 25
        },
        end: {
          line: 28,
          column: 62
        }
      },
      "11": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 35,
          column: 9
        }
      },
      "12": {
        start: {
          line: 30,
          column: 12
        },
        end: {
          line: 34,
          column: 15
        }
      },
      "13": {
        start: {
          line: 36,
          column: 23
        },
        end: {
          line: 36,
          column: 35
        }
      },
      "14": {
        start: {
          line: 37,
          column: 30
        },
        end: {
          line: 37,
          column: 46
        }
      },
      "15": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 44,
          column: 9
        }
      },
      "16": {
        start: {
          line: 39,
          column: 12
        },
        end: {
          line: 43,
          column: 15
        }
      },
      "17": {
        start: {
          line: 46,
          column: 36
        },
        end: {
          line: 46,
          column: 97
        }
      },
      "18": {
        start: {
          line: 47,
          column: 8
        },
        end: {
          line: 53,
          column: 9
        }
      },
      "19": {
        start: {
          line: 48,
          column: 12
        },
        end: {
          line: 52,
          column: 15
        }
      },
      "20": {
        start: {
          line: 54,
          column: 8
        },
        end: {
          line: 60,
          column: 9
        }
      },
      "21": {
        start: {
          line: 55,
          column: 12
        },
        end: {
          line: 59,
          column: 15
        }
      },
      "22": {
        start: {
          line: 61,
          column: 21
        },
        end: {
          line: 61,
          column: 41
        }
      },
      "23": {
        start: {
          line: 62,
          column: 34
        },
        end: {
          line: 62,
          column: 64
        }
      },
      "24": {
        start: {
          line: 63,
          column: 35
        },
        end: {
          line: 63,
          column: 116
        }
      },
      "25": {
        start: {
          line: 64,
          column: 8
        },
        end: {
          line: 64,
          column: 61
        }
      },
      "26": {
        start: {
          line: 66,
          column: 8
        },
        end: {
          line: 66,
          column: 67
        }
      },
      "27": {
        start: {
          line: 67,
          column: 8
        },
        end: {
          line: 74,
          column: 9
        }
      },
      "28": {
        start: {
          line: 68,
          column: 12
        },
        end: {
          line: 73,
          column: 15
        }
      },
      "29": {
        start: {
          line: 75,
          column: 8
        },
        end: {
          line: 79,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "PATCH",
        decl: {
          start: {
            line: 26,
            column: 15
          },
          end: {
            line: 26,
            column: 20
          }
        },
        loc: {
          start: {
            line: 26,
            column: 42
          },
          end: {
            line: 81,
            column: 1
          }
        },
        line: 26
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 29,
            column: 8
          },
          end: {
            line: 35,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 29,
            column: 8
          },
          end: {
            line: 35,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 29
      },
      "1": {
        loc: {
          start: {
            line: 38,
            column: 8
          },
          end: {
            line: 44,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 38,
            column: 8
          },
          end: {
            line: 44,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 38
      },
      "2": {
        loc: {
          start: {
            line: 47,
            column: 8
          },
          end: {
            line: 53,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 47,
            column: 8
          },
          end: {
            line: 53,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 47
      },
      "3": {
        loc: {
          start: {
            line: 54,
            column: 8
          },
          end: {
            line: 60,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 54,
            column: 8
          },
          end: {
            line: 60,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 54
      },
      "4": {
        loc: {
          start: {
            line: 67,
            column: 8
          },
          end: {
            line: 74,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 67,
            column: 8
          },
          end: {
            line: 74,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 67
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0
    },
    f: {
      "0": 0,
      "1": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/stefanbekker/projects/fancy-planties/src/app/api/propagations/[id]/status/route.ts"],
      sourcesContent: ["import 'server-only';\n\nimport { NextRequest, NextResponse } from 'next/server';\nimport { validateRequest } from '@/lib/auth/server';\nimport { PropagationQueries } from '@/lib/db/queries/propagations';\nimport { z } from 'zod';\n\n// Validation schema for status updates\nconst updateStatusSchema = z.object({\n  status: z.enum(['started', 'rooting', 'planted', 'established']),\n  notes: z.string().max(500).optional(),\n});\n\n// PATCH /api/propagations/[id]/status - Update propagation status\nexport async function PATCH(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { user } = await validateRequest();\n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const { id } = await params;\n    const propagationId = parseInt(id, 10);\n    if (isNaN(propagationId)) {\n      return NextResponse.json({ error: 'Invalid propagation ID' }, { status: 400 });\n    }\n\n    // Check if propagation exists and belongs to user\n    const existingPropagation = await PropagationQueries.getById(propagationId);\n    if (!existingPropagation) {\n      return NextResponse.json({ error: 'Propagation not found' }, { status: 404 });\n    }\n\n    if (existingPropagation.userId !== user.id) {\n      return NextResponse.json({ error: 'Forbidden' }, { status: 403 });\n    }\n\n    const body = await request.json();\n    const { status, notes } = updateStatusSchema.parse(body);\n\n    const updatedPropagation = await PropagationQueries.updateStatus(\n      propagationId,\n      status,\n      notes\n    );\n\n    return NextResponse.json(updatedPropagation);\n  } catch (error) {\n    console.error('Error updating propagation status:', error);\n    \n    if (error instanceof z.ZodError) {\n      return NextResponse.json(\n        { error: 'Invalid data', details: error.issues },\n        { status: 400 }\n      );\n    }\n\n    return NextResponse.json(\n      { error: 'Failed to update propagation status' },\n      { status: 500 }\n    );\n  }\n}"],
      names: ["PATCH", "updateStatusSchema", "z", "object", "status", "enum", "notes", "string", "max", "optional", "request", "params", "user", "validateRequest", "NextResponse", "json", "error", "id", "propagationId", "parseInt", "isNaN", "existingPropagation", "PropagationQueries", "getById", "userId", "body", "parse", "updatedPropagation", "updateStatus", "console", "ZodError", "details", "issues"],
      mappings: ";;;;+BAcsBA;;;eAAAA;;;QAdf;wBAEmC;yBACV;8BACG;qBACjB;AAElB,uCAAuC;AACvC,MAAMC,qBAAqBC,MAAC,CAACC,MAAM,CAAC;IAClCC,QAAQF,MAAC,CAACG,IAAI,CAAC;QAAC;QAAW;QAAW;QAAW;KAAc;IAC/DC,OAAOJ,MAAC,CAACK,MAAM,GAAGC,GAAG,CAAC,KAAKC,QAAQ;AACrC;AAGO,eAAeT,MACpBU,OAAoB,EACpB,EAAEC,MAAM,EAAuC;IAE/C,IAAI;QACF,MAAM,EAAEC,IAAI,EAAE,GAAG,MAAMC,IAAAA,wBAAe;QACtC,IAAI,CAACD,MAAM;YACT,OAAOE,oBAAY,CAACC,IAAI,CAAC;gBAAEC,OAAO;YAAe,GAAG;gBAAEZ,QAAQ;YAAI;QACpE;QAEA,MAAM,EAAEa,EAAE,EAAE,GAAG,MAAMN;QACrB,MAAMO,gBAAgBC,SAASF,IAAI;QACnC,IAAIG,MAAMF,gBAAgB;YACxB,OAAOJ,oBAAY,CAACC,IAAI,CAAC;gBAAEC,OAAO;YAAyB,GAAG;gBAAEZ,QAAQ;YAAI;QAC9E;QAEA,kDAAkD;QAClD,MAAMiB,sBAAsB,MAAMC,gCAAkB,CAACC,OAAO,CAACL;QAC7D,IAAI,CAACG,qBAAqB;YACxB,OAAOP,oBAAY,CAACC,IAAI,CAAC;gBAAEC,OAAO;YAAwB,GAAG;gBAAEZ,QAAQ;YAAI;QAC7E;QAEA,IAAIiB,oBAAoBG,MAAM,KAAKZ,KAAKK,EAAE,EAAE;YAC1C,OAAOH,oBAAY,CAACC,IAAI,CAAC;gBAAEC,OAAO;YAAY,GAAG;gBAAEZ,QAAQ;YAAI;QACjE;QAEA,MAAMqB,OAAO,MAAMf,QAAQK,IAAI;QAC/B,MAAM,EAAEX,MAAM,EAAEE,KAAK,EAAE,GAAGL,mBAAmByB,KAAK,CAACD;QAEnD,MAAME,qBAAqB,MAAML,gCAAkB,CAACM,YAAY,CAC9DV,eACAd,QACAE;QAGF,OAAOQ,oBAAY,CAACC,IAAI,CAACY;IAC3B,EAAE,OAAOX,OAAO;QACda,QAAQb,KAAK,CAAC,sCAAsCA;QAEpD,IAAIA,iBAAiBd,MAAC,CAAC4B,QAAQ,EAAE;YAC/B,OAAOhB,oBAAY,CAACC,IAAI,CACtB;gBAAEC,OAAO;gBAAgBe,SAASf,MAAMgB,MAAM;YAAC,GAC/C;gBAAE5B,QAAQ;YAAI;QAElB;QAEA,OAAOU,oBAAY,CAACC,IAAI,CACtB;YAAEC,OAAO;QAAsC,GAC/C;YAAEZ,QAAQ;QAAI;IAElB;AACF"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "ac3300c84c51b1132a11c3f8aa549a7a44fc6001"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1magveakh7 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1magveakh7();
cov_1magveakh7().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1magveakh7().s[1]++;
Object.defineProperty(exports, "PATCH", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_1magveakh7().f[0]++;
    cov_1magveakh7().s[2]++;
    return PATCH;
  }
});
/* istanbul ignore next */
cov_1magveakh7().s[3]++;
require("server-only");
const _server =
/* istanbul ignore next */
(cov_1magveakh7().s[4]++, require("next/server"));
const _server1 =
/* istanbul ignore next */
(cov_1magveakh7().s[5]++, require("../../../../../lib/auth/server"));
const _propagations =
/* istanbul ignore next */
(cov_1magveakh7().s[6]++, require("../../../../../lib/db/queries/propagations"));
const _zod =
/* istanbul ignore next */
(cov_1magveakh7().s[7]++, require("zod"));
// Validation schema for status updates
const updateStatusSchema =
/* istanbul ignore next */
(cov_1magveakh7().s[8]++, _zod.z.object({
  status: _zod.z.enum(['started', 'rooting', 'planted', 'established']),
  notes: _zod.z.string().max(500).optional()
}));
async function PATCH(request, {
  params
}) {
  /* istanbul ignore next */
  cov_1magveakh7().f[1]++;
  cov_1magveakh7().s[9]++;
  try {
    const {
      user
    } =
    /* istanbul ignore next */
    (cov_1magveakh7().s[10]++, await (0, _server1.validateRequest)());
    /* istanbul ignore next */
    cov_1magveakh7().s[11]++;
    if (!user) {
      /* istanbul ignore next */
      cov_1magveakh7().b[0][0]++;
      cov_1magveakh7().s[12]++;
      return _server.NextResponse.json({
        error: 'Unauthorized'
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_1magveakh7().b[0][1]++;
    }
    const {
      id
    } =
    /* istanbul ignore next */
    (cov_1magveakh7().s[13]++, await params);
    const propagationId =
    /* istanbul ignore next */
    (cov_1magveakh7().s[14]++, parseInt(id, 10));
    /* istanbul ignore next */
    cov_1magveakh7().s[15]++;
    if (isNaN(propagationId)) {
      /* istanbul ignore next */
      cov_1magveakh7().b[1][0]++;
      cov_1magveakh7().s[16]++;
      return _server.NextResponse.json({
        error: 'Invalid propagation ID'
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1magveakh7().b[1][1]++;
    }
    // Check if propagation exists and belongs to user
    const existingPropagation =
    /* istanbul ignore next */
    (cov_1magveakh7().s[17]++, await _propagations.PropagationQueries.getById(propagationId));
    /* istanbul ignore next */
    cov_1magveakh7().s[18]++;
    if (!existingPropagation) {
      /* istanbul ignore next */
      cov_1magveakh7().b[2][0]++;
      cov_1magveakh7().s[19]++;
      return _server.NextResponse.json({
        error: 'Propagation not found'
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_1magveakh7().b[2][1]++;
    }
    cov_1magveakh7().s[20]++;
    if (existingPropagation.userId !== user.id) {
      /* istanbul ignore next */
      cov_1magveakh7().b[3][0]++;
      cov_1magveakh7().s[21]++;
      return _server.NextResponse.json({
        error: 'Forbidden'
      }, {
        status: 403
      });
    } else
    /* istanbul ignore next */
    {
      cov_1magveakh7().b[3][1]++;
    }
    const body =
    /* istanbul ignore next */
    (cov_1magveakh7().s[22]++, await request.json());
    const {
      status,
      notes
    } =
    /* istanbul ignore next */
    (cov_1magveakh7().s[23]++, updateStatusSchema.parse(body));
    const updatedPropagation =
    /* istanbul ignore next */
    (cov_1magveakh7().s[24]++, await _propagations.PropagationQueries.updateStatus(propagationId, status, notes));
    /* istanbul ignore next */
    cov_1magveakh7().s[25]++;
    return _server.NextResponse.json(updatedPropagation);
  } catch (error) {
    /* istanbul ignore next */
    cov_1magveakh7().s[26]++;
    console.error('Error updating propagation status:', error);
    /* istanbul ignore next */
    cov_1magveakh7().s[27]++;
    if (error instanceof _zod.z.ZodError) {
      /* istanbul ignore next */
      cov_1magveakh7().b[4][0]++;
      cov_1magveakh7().s[28]++;
      return _server.NextResponse.json({
        error: 'Invalid data',
        details: error.issues
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1magveakh7().b[4][1]++;
    }
    cov_1magveakh7().s[29]++;
    return _server.NextResponse.json({
      error: 'Failed to update propagation status'
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,