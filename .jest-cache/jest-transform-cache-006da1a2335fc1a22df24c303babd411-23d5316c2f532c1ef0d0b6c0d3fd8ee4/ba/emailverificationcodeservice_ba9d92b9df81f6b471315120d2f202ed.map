{"version":3,"sources":["/Users/stefanbekker/projects/fancy-planties/src/lib/services/email-verification-code-service.ts"],"sourcesContent":["import 'server-only';\nimport { db } from '@/lib/db';\nimport { emailVerificationCodes, users } from '@/lib/db/schema';\nimport { eq, and, lt } from 'drizzle-orm';\nimport { randomBytes } from 'crypto';\n\nexport interface EmailVerificationCode {\n  id: number;\n  userId: number;\n  code: string;\n  expiresAt: Date;\n  createdAt: Date;\n  attemptsUsed: number;\n}\n\nexport enum VerificationError {\n  CODE_EXPIRED = 'CODE_EXPIRED',\n  CODE_INVALID = 'CODE_INVALID',\n  TOO_MANY_ATTEMPTS = 'TOO_MANY_ATTEMPTS',\n  USER_NOT_FOUND = 'USER_NOT_FOUND',\n  ALREADY_VERIFIED = 'ALREADY_VERIFIED'\n}\n\nexport class VerificationCodeError extends Error {\n  constructor(\n    message: string,\n    public code: VerificationError\n  ) {\n    super(message);\n    this.name = 'VerificationCodeError';\n  }\n}\n\nexport class EmailVerificationCodeService {\n  private static readonly CODE_LENGTH = 6;\n  private static readonly EXPIRY_MINUTES = 10;\n  private static readonly MAX_ATTEMPTS = 5;\n\n  /**\n   * Generate a cryptographically secure 6-digit verification code\n   */\n  private generateSecureCode(): string {\n    // Generate random bytes and convert to 6-digit number\n    const buffer = randomBytes(4);\n    const randomNumber = buffer.readUInt32BE(0);\n    // Ensure it's always 6 digits by using modulo and padding\n    const code = (randomNumber % 1000000).toString().padStart(6, '0');\n    return code;\n  }\n\n  /**\n   * Generate and store a new verification code for a user\n   * Invalidates any existing codes for the user\n   */\n  async generateCode(userId: number): Promise<string> {\n    // First, delete any existing codes for this user\n    await this.deleteUserCodes(userId);\n\n    // Generate new code\n    const code = this.generateSecureCode();\n    const expiresAt = new Date(Date.now() + EmailVerificationCodeService.EXPIRY_MINUTES * 60 * 1000);\n\n    // Store in database\n    await db.insert(emailVerificationCodes).values({\n      userId,\n      code,\n      expiresAt,\n      attemptsUsed: 0,\n    });\n\n    return code;\n  }\n\n  /**\n   * Validate a verification code for a user\n   * Returns true if valid, throws VerificationCodeError if invalid\n   */\n  async validateCode(email: string, code: string): Promise<boolean> {\n    // Find user by email\n    const userResult = await db\n      .select({ id: users.id, isEmailVerified: users.isEmailVerified })\n      .from(users)\n      .where(eq(users.email, email))\n      .limit(1);\n\n    if (userResult.length === 0) {\n      throw new VerificationCodeError('User not found', VerificationError.USER_NOT_FOUND);\n    }\n\n    const user = userResult[0];\n\n    // Check if user is already verified\n    if (user.isEmailVerified) {\n      throw new VerificationCodeError('Email already verified', VerificationError.ALREADY_VERIFIED);\n    }\n\n    // Find the verification code\n    const codeResult = await db\n      .select()\n      .from(emailVerificationCodes)\n      .where(\n        and(\n          eq(emailVerificationCodes.userId, user.id),\n          eq(emailVerificationCodes.code, code)\n        )\n      )\n      .limit(1);\n\n    if (codeResult.length === 0) {\n      throw new VerificationCodeError('Invalid verification code', VerificationError.CODE_INVALID);\n    }\n\n    const verificationCode = codeResult[0];\n\n    // Check if code has expired\n    if (new Date() > verificationCode.expiresAt) {\n      // Clean up expired code\n      await db\n        .delete(emailVerificationCodes)\n        .where(eq(emailVerificationCodes.id, verificationCode.id));\n      \n      throw new VerificationCodeError('Verification code has expired', VerificationError.CODE_EXPIRED);\n    }\n\n    // Check if too many attempts have been made\n    if (verificationCode.attemptsUsed >= EmailVerificationCodeService.MAX_ATTEMPTS) {\n      // Invalidate the code\n      await db\n        .delete(emailVerificationCodes)\n        .where(eq(emailVerificationCodes.id, verificationCode.id));\n      \n      throw new VerificationCodeError('Too many verification attempts', VerificationError.TOO_MANY_ATTEMPTS);\n    }\n\n    // Code is valid - mark user as verified and delete the code\n    await db.transaction(async (tx) => {\n      // Update user verification status\n      await tx\n        .update(users)\n        .set({ isEmailVerified: true })\n        .where(eq(users.id, user.id));\n\n      // Delete the verification code\n      await tx\n        .delete(emailVerificationCodes)\n        .where(eq(emailVerificationCodes.id, verificationCode.id));\n    });\n\n    return true;\n  }\n\n  /**\n   * Increment the attempt count for a verification code\n   * Used when validation fails but we want to track attempts\n   */\n  async incrementAttempts(email: string, code: string): Promise<void> {\n    // Find user by email\n    const userResult = await db\n      .select({ id: users.id })\n      .from(users)\n      .where(eq(users.email, email))\n      .limit(1);\n\n    if (userResult.length === 0) {\n      return; // User not found, nothing to increment\n    }\n\n    const user = userResult[0];\n\n    // Find and increment attempts for the code\n    const codeResult = await db\n      .select({ id: emailVerificationCodes.id, attemptsUsed: emailVerificationCodes.attemptsUsed })\n      .from(emailVerificationCodes)\n      .where(\n        and(\n          eq(emailVerificationCodes.userId, user.id),\n          eq(emailVerificationCodes.code, code)\n        )\n      )\n      .limit(1);\n\n    if (codeResult.length > 0) {\n      const verificationCode = codeResult[0];\n      await db\n        .update(emailVerificationCodes)\n        .set({ attemptsUsed: verificationCode.attemptsUsed + 1 })\n        .where(eq(emailVerificationCodes.id, verificationCode.id));\n    }\n  }\n\n  /**\n   * Clean up expired verification codes\n   * Should be called periodically by a cleanup job\n   */\n  async cleanupExpiredCodes(): Promise<number> {\n    const now = new Date();\n    \n    const result = await db\n      .delete(emailVerificationCodes)\n      .where(lt(emailVerificationCodes.expiresAt, now));\n\n    // Return count of deleted codes (if supported by the database driver)\n    return result.rowCount || 0;\n  }\n\n  /**\n   * Delete all verification codes for a specific user\n   * Used when generating new codes or when user is deleted\n   */\n  async deleteUserCodes(userId: number): Promise<void> {\n    await db\n      .delete(emailVerificationCodes)\n      .where(eq(emailVerificationCodes.userId, userId));\n  }\n\n  /**\n   * Get active verification code for a user (for testing/debugging)\n   */\n  async getUserActiveCode(userId: number): Promise<EmailVerificationCode | null> {\n    const result = await db\n      .select()\n      .from(emailVerificationCodes)\n      .where(\n        and(\n          eq(emailVerificationCodes.userId, userId),\n          lt(new Date(), emailVerificationCodes.expiresAt) // Not expired\n        )\n      )\n      .limit(1);\n\n    return result.length > 0 ? result[0] : null;\n  }\n\n  /**\n   * Check if a user has any active verification codes\n   */\n  async hasActiveCode(userId: number): Promise<boolean> {\n    const code = await this.getUserActiveCode(userId);\n    return code !== null;\n  }\n\n  /**\n   * Get verification code statistics for monitoring\n   */\n  async getCodeStats(): Promise<{\n    totalActive: number;\n    expiredCount: number;\n    highAttemptCount: number;\n  }> {\n    const now = new Date();\n    \n    // Count active codes\n    const activeResult = await db\n      .select({ count: emailVerificationCodes.id })\n      .from(emailVerificationCodes)\n      .where(lt(now, emailVerificationCodes.expiresAt));\n\n    // Count expired codes\n    const expiredResult = await db\n      .select({ count: emailVerificationCodes.id })\n      .from(emailVerificationCodes)\n      .where(lt(emailVerificationCodes.expiresAt, now));\n\n    // Count codes with high attempts (4 or more)\n    const highAttemptResult = await db\n      .select({ count: emailVerificationCodes.id })\n      .from(emailVerificationCodes)\n      .where(\n        and(\n          lt(now, emailVerificationCodes.expiresAt),\n          eq(emailVerificationCodes.attemptsUsed, 4) // Close to max attempts\n        )\n      );\n\n    return {\n      totalActive: activeResult.length,\n      expiredCount: expiredResult.length,\n      highAttemptCount: highAttemptResult.length,\n    };\n  }\n}\n\n// Export singleton instance\nexport const emailVerificationCodeService = new EmailVerificationCodeService();"],"names":["EmailVerificationCodeService","VerificationCodeError","VerificationError","emailVerificationCodeService","Error","message","code","name","CODE_LENGTH","EXPIRY_MINUTES","MAX_ATTEMPTS","generateSecureCode","buffer","randomBytes","randomNumber","readUInt32BE","toString","padStart","generateCode","userId","deleteUserCodes","expiresAt","Date","now","db","insert","emailVerificationCodes","values","attemptsUsed","validateCode","email","userResult","select","id","users","isEmailVerified","from","where","eq","limit","length","user","codeResult","and","verificationCode","delete","transaction","tx","update","set","incrementAttempts","cleanupExpiredCodes","result","lt","rowCount","getUserActiveCode","hasActiveCode","getCodeStats","activeResult","count","expiredResult","highAttemptResult","totalActive","expiredCount","highAttemptCount"],"mappings":";;;;;;;;;;;QAiCaA;eAAAA;;QAVAC;eAAAA;;QARDC;eAAAA;;QA4QCC;eAAAA;;;QA3RN;oBACY;wBAC2B;4BAClB;wBACA;AAWrB,IAAA,AAAKD,2CAAAA;;;;;;WAAAA;;AAQL,MAAMD,8BAA8BG;IACzC,YACEC,OAAe,EACf,AAAOC,IAAuB,CAC9B;QACA,KAAK,CAACD,eAFCC,OAAAA;QAGP,IAAI,CAACC,IAAI,GAAG;IACd;AACF;AAEO,MAAMP;;aACaQ,cAAc;;;aACdC,iBAAiB;;;aACjBC,eAAe;;IAEvC;;GAEC,GACD,AAAQC,qBAA6B;QACnC,sDAAsD;QACtD,MAAMC,SAASC,IAAAA,mBAAW,EAAC;QAC3B,MAAMC,eAAeF,OAAOG,YAAY,CAAC;QACzC,0DAA0D;QAC1D,MAAMT,OAAO,AAACQ,CAAAA,eAAe,OAAM,EAAGE,QAAQ,GAAGC,QAAQ,CAAC,GAAG;QAC7D,OAAOX;IACT;IAEA;;;GAGC,GACD,MAAMY,aAAaC,MAAc,EAAmB;QAClD,iDAAiD;QACjD,MAAM,IAAI,CAACC,eAAe,CAACD;QAE3B,oBAAoB;QACpB,MAAMb,OAAO,IAAI,CAACK,kBAAkB;QACpC,MAAMU,YAAY,IAAIC,KAAKA,KAAKC,GAAG,KAAKvB,6BAA6BS,cAAc,GAAG,KAAK;QAE3F,oBAAoB;QACpB,MAAMe,MAAE,CAACC,MAAM,CAACC,8BAAsB,EAAEC,MAAM,CAAC;YAC7CR;YACAb;YACAe;YACAO,cAAc;QAChB;QAEA,OAAOtB;IACT;IAEA;;;GAGC,GACD,MAAMuB,aAAaC,KAAa,EAAExB,IAAY,EAAoB;QAChE,qBAAqB;QACrB,MAAMyB,aAAa,MAAMP,MAAE,CACxBQ,MAAM,CAAC;YAAEC,IAAIC,aAAK,CAACD,EAAE;YAAEE,iBAAiBD,aAAK,CAACC,eAAe;QAAC,GAC9DC,IAAI,CAACF,aAAK,EACVG,KAAK,CAACC,IAAAA,cAAE,EAACJ,aAAK,CAACJ,KAAK,EAAEA,QACtBS,KAAK,CAAC;QAET,IAAIR,WAAWS,MAAM,KAAK,GAAG;YAC3B,MAAM,IAAIvC,sBAAsB;QAClC;QAEA,MAAMwC,OAAOV,UAAU,CAAC,EAAE;QAE1B,oCAAoC;QACpC,IAAIU,KAAKN,eAAe,EAAE;YACxB,MAAM,IAAIlC,sBAAsB;QAClC;QAEA,6BAA6B;QAC7B,MAAMyC,aAAa,MAAMlB,MAAE,CACxBQ,MAAM,GACNI,IAAI,CAACV,8BAAsB,EAC3BW,KAAK,CACJM,IAAAA,eAAG,EACDL,IAAAA,cAAE,EAACZ,8BAAsB,CAACP,MAAM,EAAEsB,KAAKR,EAAE,GACzCK,IAAAA,cAAE,EAACZ,8BAAsB,CAACpB,IAAI,EAAEA,QAGnCiC,KAAK,CAAC;QAET,IAAIG,WAAWF,MAAM,KAAK,GAAG;YAC3B,MAAM,IAAIvC,sBAAsB;QAClC;QAEA,MAAM2C,mBAAmBF,UAAU,CAAC,EAAE;QAEtC,4BAA4B;QAC5B,IAAI,IAAIpB,SAASsB,iBAAiBvB,SAAS,EAAE;YAC3C,wBAAwB;YACxB,MAAMG,MAAE,CACLqB,MAAM,CAACnB,8BAAsB,EAC7BW,KAAK,CAACC,IAAAA,cAAE,EAACZ,8BAAsB,CAACO,EAAE,EAAEW,iBAAiBX,EAAE;YAE1D,MAAM,IAAIhC,sBAAsB;QAClC;QAEA,4CAA4C;QAC5C,IAAI2C,iBAAiBhB,YAAY,IAAI5B,6BAA6BU,YAAY,EAAE;YAC9E,sBAAsB;YACtB,MAAMc,MAAE,CACLqB,MAAM,CAACnB,8BAAsB,EAC7BW,KAAK,CAACC,IAAAA,cAAE,EAACZ,8BAAsB,CAACO,EAAE,EAAEW,iBAAiBX,EAAE;YAE1D,MAAM,IAAIhC,sBAAsB;QAClC;QAEA,4DAA4D;QAC5D,MAAMuB,MAAE,CAACsB,WAAW,CAAC,OAAOC;YAC1B,kCAAkC;YAClC,MAAMA,GACHC,MAAM,CAACd,aAAK,EACZe,GAAG,CAAC;gBAAEd,iBAAiB;YAAK,GAC5BE,KAAK,CAACC,IAAAA,cAAE,EAACJ,aAAK,CAACD,EAAE,EAAEQ,KAAKR,EAAE;YAE7B,+BAA+B;YAC/B,MAAMc,GACHF,MAAM,CAACnB,8BAAsB,EAC7BW,KAAK,CAACC,IAAAA,cAAE,EAACZ,8BAAsB,CAACO,EAAE,EAAEW,iBAAiBX,EAAE;QAC5D;QAEA,OAAO;IACT;IAEA;;;GAGC,GACD,MAAMiB,kBAAkBpB,KAAa,EAAExB,IAAY,EAAiB;QAClE,qBAAqB;QACrB,MAAMyB,aAAa,MAAMP,MAAE,CACxBQ,MAAM,CAAC;YAAEC,IAAIC,aAAK,CAACD,EAAE;QAAC,GACtBG,IAAI,CAACF,aAAK,EACVG,KAAK,CAACC,IAAAA,cAAE,EAACJ,aAAK,CAACJ,KAAK,EAAEA,QACtBS,KAAK,CAAC;QAET,IAAIR,WAAWS,MAAM,KAAK,GAAG;YAC3B,QAAQ,uCAAuC;QACjD;QAEA,MAAMC,OAAOV,UAAU,CAAC,EAAE;QAE1B,2CAA2C;QAC3C,MAAMW,aAAa,MAAMlB,MAAE,CACxBQ,MAAM,CAAC;YAAEC,IAAIP,8BAAsB,CAACO,EAAE;YAAEL,cAAcF,8BAAsB,CAACE,YAAY;QAAC,GAC1FQ,IAAI,CAACV,8BAAsB,EAC3BW,KAAK,CACJM,IAAAA,eAAG,EACDL,IAAAA,cAAE,EAACZ,8BAAsB,CAACP,MAAM,EAAEsB,KAAKR,EAAE,GACzCK,IAAAA,cAAE,EAACZ,8BAAsB,CAACpB,IAAI,EAAEA,QAGnCiC,KAAK,CAAC;QAET,IAAIG,WAAWF,MAAM,GAAG,GAAG;YACzB,MAAMI,mBAAmBF,UAAU,CAAC,EAAE;YACtC,MAAMlB,MAAE,CACLwB,MAAM,CAACtB,8BAAsB,EAC7BuB,GAAG,CAAC;gBAAErB,cAAcgB,iBAAiBhB,YAAY,GAAG;YAAE,GACtDS,KAAK,CAACC,IAAAA,cAAE,EAACZ,8BAAsB,CAACO,EAAE,EAAEW,iBAAiBX,EAAE;QAC5D;IACF;IAEA;;;GAGC,GACD,MAAMkB,sBAAuC;QAC3C,MAAM5B,MAAM,IAAID;QAEhB,MAAM8B,SAAS,MAAM5B,MAAE,CACpBqB,MAAM,CAACnB,8BAAsB,EAC7BW,KAAK,CAACgB,IAAAA,cAAE,EAAC3B,8BAAsB,CAACL,SAAS,EAAEE;QAE9C,sEAAsE;QACtE,OAAO6B,OAAOE,QAAQ,IAAI;IAC5B;IAEA;;;GAGC,GACD,MAAMlC,gBAAgBD,MAAc,EAAiB;QACnD,MAAMK,MAAE,CACLqB,MAAM,CAACnB,8BAAsB,EAC7BW,KAAK,CAACC,IAAAA,cAAE,EAACZ,8BAAsB,CAACP,MAAM,EAAEA;IAC7C;IAEA;;GAEC,GACD,MAAMoC,kBAAkBpC,MAAc,EAAyC;QAC7E,MAAMiC,SAAS,MAAM5B,MAAE,CACpBQ,MAAM,GACNI,IAAI,CAACV,8BAAsB,EAC3BW,KAAK,CACJM,IAAAA,eAAG,EACDL,IAAAA,cAAE,EAACZ,8BAAsB,CAACP,MAAM,EAAEA,SAClCkC,IAAAA,cAAE,EAAC,IAAI/B,QAAQI,8BAAsB,CAACL,SAAS,EAAE,cAAc;WAGlEkB,KAAK,CAAC;QAET,OAAOa,OAAOZ,MAAM,GAAG,IAAIY,MAAM,CAAC,EAAE,GAAG;IACzC;IAEA;;GAEC,GACD,MAAMI,cAAcrC,MAAc,EAAoB;QACpD,MAAMb,OAAO,MAAM,IAAI,CAACiD,iBAAiB,CAACpC;QAC1C,OAAOb,SAAS;IAClB;IAEA;;GAEC,GACD,MAAMmD,eAIH;QACD,MAAMlC,MAAM,IAAID;QAEhB,qBAAqB;QACrB,MAAMoC,eAAe,MAAMlC,MAAE,CAC1BQ,MAAM,CAAC;YAAE2B,OAAOjC,8BAAsB,CAACO,EAAE;QAAC,GAC1CG,IAAI,CAACV,8BAAsB,EAC3BW,KAAK,CAACgB,IAAAA,cAAE,EAAC9B,KAAKG,8BAAsB,CAACL,SAAS;QAEjD,sBAAsB;QACtB,MAAMuC,gBAAgB,MAAMpC,MAAE,CAC3BQ,MAAM,CAAC;YAAE2B,OAAOjC,8BAAsB,CAACO,EAAE;QAAC,GAC1CG,IAAI,CAACV,8BAAsB,EAC3BW,KAAK,CAACgB,IAAAA,cAAE,EAAC3B,8BAAsB,CAACL,SAAS,EAAEE;QAE9C,6CAA6C;QAC7C,MAAMsC,oBAAoB,MAAMrC,MAAE,CAC/BQ,MAAM,CAAC;YAAE2B,OAAOjC,8BAAsB,CAACO,EAAE;QAAC,GAC1CG,IAAI,CAACV,8BAAsB,EAC3BW,KAAK,CACJM,IAAAA,eAAG,EACDU,IAAAA,cAAE,EAAC9B,KAAKG,8BAAsB,CAACL,SAAS,GACxCiB,IAAAA,cAAE,EAACZ,8BAAsB,CAACE,YAAY,EAAE,GAAG,wBAAwB;;QAIzE,OAAO;YACLkC,aAAaJ,aAAalB,MAAM;YAChCuB,cAAcH,cAAcpB,MAAM;YAClCwB,kBAAkBH,kBAAkBrB,MAAM;QAC5C;IACF;AACF;AAGO,MAAMrC,+BAA+B,IAAIH"}