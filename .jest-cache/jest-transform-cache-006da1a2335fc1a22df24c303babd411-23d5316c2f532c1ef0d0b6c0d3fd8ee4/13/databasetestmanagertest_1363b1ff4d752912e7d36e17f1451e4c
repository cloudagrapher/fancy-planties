bc6052b1f044f5492abfe870be9b016e
/**
 * @jest-environment node
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _globals = require("@jest/globals");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
(0, _globals.describe)('DatabaseTestManager', ()=>{
    let DatabaseTestManager;
    let createDatabaseTestManager;
    let globalDatabaseTestManager;
    let mockDb;
    let mockUsers;
    let mockSessions;
    let mockEmailVerificationCodes;
    let mockEq;
    beforeAll(async ()=>{
        // Mock the database module
        mockDb = {
            insert: _globals.jest.fn(),
            select: _globals.jest.fn(),
            update: _globals.jest.fn(),
            delete: _globals.jest.fn()
        };
        // Mock the schema
        mockUsers = {
            id: 'users.id',
            email: 'users.email'
        };
        mockSessions = {
            id: 'sessions.id',
            userId: 'sessions.userId'
        };
        mockEmailVerificationCodes = {
            id: 'emailVerificationCodes.id',
            userId: 'emailVerificationCodes.userId'
        };
        // Mock drizzle-orm
        mockEq = _globals.jest.fn((field, value)=>({
                field,
                value,
                type: 'eq'
            }));
        // Set up module mocks
        _globals.jest.doMock('../../../lib/db', ()=>({
                db: mockDb
            }));
        _globals.jest.doMock('../../../lib/db/schema', ()=>({
                users: mockUsers,
                sessions: mockSessions,
                emailVerificationCodes: mockEmailVerificationCodes
            }));
        _globals.jest.doMock('drizzle-orm', ()=>({
                eq: mockEq
            }));
        // Import the module after mocking
        const module = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../database-test-manager.js")));
        DatabaseTestManager = module.default;
        createDatabaseTestManager = module.createDatabaseTestManager;
        globalDatabaseTestManager = module.globalDatabaseTestManager;
    });
    let manager;
    (0, _globals.beforeEach)(()=>{
        // Reset all mocks
        _globals.jest.clearAllMocks();
        mockEq.mockClear();
        // Create fresh manager instance
        manager = new DatabaseTestManager();
        // Setup mock database responses with proper chaining
        mockDb.insert.mockReturnValue({
            values: _globals.jest.fn().mockReturnValue({
                returning: _globals.jest.fn()
            })
        });
        mockDb.select.mockReturnValue({
            from: _globals.jest.fn().mockReturnValue({
                where: _globals.jest.fn(),
                limit: _globals.jest.fn()
            })
        });
        mockDb.update.mockReturnValue({
            set: _globals.jest.fn().mockReturnValue({
                where: _globals.jest.fn().mockReturnValue({
                    returning: _globals.jest.fn()
                })
            })
        });
        mockDb.delete.mockReturnValue({
            where: _globals.jest.fn()
        });
    });
    (0, _globals.afterEach)(async ()=>{
        // Clean up any test data
        if (manager) {
            // Mock the cleanup to avoid actual database calls
            manager.createdUsers = [];
            manager.createdSessions = [];
            manager.createdEmailCodes = [];
        }
    });
    (0, _globals.describe)('Constructor', ()=>{
        (0, _globals.it)('should initialize with empty tracking arrays', ()=>{
            const newManager = new DatabaseTestManager();
            (0, _globals.expect)(newManager.createdUsers).toEqual([]);
            (0, _globals.expect)(newManager.createdSessions).toEqual([]);
            (0, _globals.expect)(newManager.createdEmailCodes).toEqual([]);
        });
    });
    (0, _globals.describe)('createTestUser', ()=>{
        (0, _globals.it)('should create a user and track the ID', async ()=>{
            const userData = {
                email: 'test@example.com',
                name: 'Test User'
            };
            const mockUser = {
                id: 1,
                ...userData
            };
            // Setup mock chain
            const mockReturning = _globals.jest.fn().mockResolvedValue([
                mockUser
            ]);
            const mockValues = _globals.jest.fn().mockReturnValue({
                returning: mockReturning
            });
            mockDb.insert.mockReturnValue({
                values: mockValues
            });
            const result = await manager.createTestUser(userData);
            (0, _globals.expect)(mockDb.insert).toHaveBeenCalledWith(mockUsers);
            (0, _globals.expect)(mockValues).toHaveBeenCalledWith(userData);
            (0, _globals.expect)(mockReturning).toHaveBeenCalled();
            (0, _globals.expect)(result).toEqual(mockUser);
            (0, _globals.expect)(manager.createdUsers).toContain(1);
        });
        (0, _globals.it)('should handle database errors gracefully', async ()=>{
            const userData = {
                email: 'test@example.com',
                name: 'Test User'
            };
            const mockError = new Error('Database connection failed');
            mockDb.insert.mockReturnValue({
                values: _globals.jest.fn().mockReturnValue({
                    returning: _globals.jest.fn().mockRejectedValue(mockError)
                })
            });
            await (0, _globals.expect)(manager.createTestUser(userData)).rejects.toThrow('Database connection failed');
            (0, _globals.expect)(manager.createdUsers).toEqual([]);
        });
    });
    (0, _globals.describe)('createTestSession', ()=>{
        (0, _globals.it)('should create a session and track the ID', async ()=>{
            const sessionData = {
                userId: 1,
                expiresAt: new Date()
            };
            const mockSession = {
                id: 'session-123',
                ...sessionData
            };
            const mockReturning = _globals.jest.fn().mockResolvedValue([
                mockSession
            ]);
            mockDb.insert.mockReturnValue({
                values: _globals.jest.fn().mockReturnValue({
                    returning: mockReturning
                })
            });
            const result = await manager.createTestSession(sessionData);
            (0, _globals.expect)(mockDb.insert).toHaveBeenCalledWith(mockSessions);
            (0, _globals.expect)(result).toEqual(mockSession);
            (0, _globals.expect)(manager.createdSessions).toContain('session-123');
        });
    });
    (0, _globals.describe)('createTestEmailCode', ()=>{
        (0, _globals.it)('should create an email verification code and track the ID', async ()=>{
            const codeData = {
                userId: 1,
                code: '123456',
                expiresAt: new Date()
            };
            const mockCode = {
                id: 1,
                ...codeData
            };
            const mockReturning = _globals.jest.fn().mockResolvedValue([
                mockCode
            ]);
            mockDb.insert.mockReturnValue({
                values: _globals.jest.fn().mockReturnValue({
                    returning: mockReturning
                })
            });
            const result = await manager.createTestEmailCode(codeData);
            (0, _globals.expect)(mockDb.insert).toHaveBeenCalledWith(mockEmailVerificationCodes);
            (0, _globals.expect)(result).toEqual(mockCode);
            (0, _globals.expect)(manager.createdEmailCodes).toContain(1);
        });
    });
    (0, _globals.describe)('getUserById', ()=>{
        (0, _globals.it)('should retrieve a user by ID', async ()=>{
            const mockUser = {
                id: 1,
                email: 'test@example.com'
            };
            const mockWhere = _globals.jest.fn().mockResolvedValue([
                mockUser
            ]);
            mockDb.select.mockReturnValue({
                from: _globals.jest.fn().mockReturnValue({
                    where: mockWhere
                })
            });
            const result = await manager.getUserById(1);
            (0, _globals.expect)(mockDb.select).toHaveBeenCalled();
            (0, _globals.expect)(result).toEqual(mockUser);
        });
        (0, _globals.it)('should return null when user not found', async ()=>{
            const mockWhere = _globals.jest.fn().mockResolvedValue([]);
            mockDb.select.mockReturnValue({
                from: _globals.jest.fn().mockReturnValue({
                    where: mockWhere
                })
            });
            const result = await manager.getUserById(999);
            (0, _globals.expect)(result).toBeNull();
        });
    });
    (0, _globals.describe)('getUserByEmail', ()=>{
        (0, _globals.it)('should retrieve a user by email', async ()=>{
            const mockUser = {
                id: 1,
                email: 'test@example.com'
            };
            const mockWhere = _globals.jest.fn().mockResolvedValue([
                mockUser
            ]);
            mockDb.select.mockReturnValue({
                from: _globals.jest.fn().mockReturnValue({
                    where: mockWhere
                })
            });
            const result = await manager.getUserByEmail('TEST@EXAMPLE.COM');
            (0, _globals.expect)(result).toEqual(mockUser);
        });
        (0, _globals.it)('should return null when user not found', async ()=>{
            const mockWhere = _globals.jest.fn().mockResolvedValue([]);
            mockDb.select.mockReturnValue({
                from: _globals.jest.fn().mockReturnValue({
                    where: mockWhere
                })
            });
            const result = await manager.getUserByEmail('nonexistent@example.com');
            (0, _globals.expect)(result).toBeNull();
        });
    });
    (0, _globals.describe)('updateUser', ()=>{
        (0, _globals.it)('should update a user and return the updated record', async ()=>{
            const updates = {
                email: 'newemail@example.com'
            };
            const mockUpdatedUser = {
                id: 1,
                ...updates,
                updatedAt: _globals.expect.any(Date)
            };
            const mockReturning = _globals.jest.fn().mockResolvedValue([
                mockUpdatedUser
            ]);
            const mockWhere = _globals.jest.fn().mockReturnValue({
                returning: mockReturning
            });
            const mockSet = _globals.jest.fn().mockReturnValue({
                where: mockWhere
            });
            mockDb.update.mockReturnValue({
                set: mockSet
            });
            const result = await manager.updateUser(1, updates);
            (0, _globals.expect)(mockDb.update).toHaveBeenCalledWith(mockUsers);
            (0, _globals.expect)(mockSet).toHaveBeenCalledWith({
                ...updates,
                updatedAt: _globals.expect.any(Date)
            });
            (0, _globals.expect)(result).toEqual(mockUpdatedUser);
        });
    });
    (0, _globals.describe)('deleteUser', ()=>{
        (0, _globals.it)('should delete a user and remove from tracking', async ()=>{
            // Add user to tracking first
            manager.createdUsers.push(1);
            const mockWhere = _globals.jest.fn().mockResolvedValue();
            mockDb.delete.mockReturnValue({
                where: mockWhere
            });
            await manager.deleteUser(1);
            (0, _globals.expect)(mockDb.delete).toHaveBeenCalledWith(mockUsers);
            (0, _globals.expect)(manager.createdUsers).not.toContain(1);
        });
    });
    (0, _globals.describe)('deleteSession', ()=>{
        (0, _globals.it)('should delete a session and remove from tracking', async ()=>{
            // Add session to tracking first
            manager.createdSessions.push('session-123');
            const mockWhere = _globals.jest.fn().mockResolvedValue();
            mockDb.delete.mockReturnValue({
                where: mockWhere
            });
            await manager.deleteSession('session-123');
            (0, _globals.expect)(mockDb.delete).toHaveBeenCalledWith(mockSessions);
            (0, _globals.expect)(manager.createdSessions).not.toContain('session-123');
        });
    });
    (0, _globals.describe)('deleteEmailCode', ()=>{
        (0, _globals.it)('should delete an email code and remove from tracking', async ()=>{
            // Add code to tracking first
            manager.createdEmailCodes.push(1);
            const mockWhere = _globals.jest.fn().mockResolvedValue();
            mockDb.delete.mockReturnValue({
                where: mockWhere
            });
            await manager.deleteEmailCode(1);
            (0, _globals.expect)(mockDb.delete).toHaveBeenCalledWith(mockEmailVerificationCodes);
            (0, _globals.expect)(manager.createdEmailCodes).not.toContain(1);
        });
    });
    (0, _globals.describe)('cleanup', ()=>{
        (0, _globals.it)('should reset tracking arrays when cleanup is called', async ()=>{
            // Setup tracking data
            manager.createdUsers = [
                1,
                2
            ];
            manager.createdSessions = [
                'session-1',
                'session-2'
            ];
            manager.createdEmailCodes = [
                1,
                2
            ];
            const mockWhere = _globals.jest.fn().mockResolvedValue();
            mockDb.delete.mockReturnValue({
                where: mockWhere
            });
            await manager.cleanup();
            // Verify arrays are reset
            (0, _globals.expect)(manager.createdUsers).toEqual([]);
            (0, _globals.expect)(manager.createdSessions).toEqual([]);
            (0, _globals.expect)(manager.createdEmailCodes).toEqual([]);
        });
        (0, _globals.it)('should reset tracking arrays even if cleanup fails', async ()=>{
            // Setup tracking data
            manager.createdUsers = [
                1
            ];
            manager.createdSessions = [
                'session-1'
            ];
            manager.createdEmailCodes = [
                1
            ];
            // Mock database error
            mockDb.delete.mockReturnValue({
                where: _globals.jest.fn().mockRejectedValue(new Error('Database error'))
            });
            // Spy on console.error to verify error logging
            const consoleSpy = _globals.jest.spyOn(console, 'error').mockImplementation();
            await manager.cleanup();
            // Verify arrays are reset despite error
            (0, _globals.expect)(manager.createdUsers).toEqual([]);
            (0, _globals.expect)(manager.createdSessions).toEqual([]);
            (0, _globals.expect)(manager.createdEmailCodes).toEqual([]);
            (0, _globals.expect)(consoleSpy).toHaveBeenCalledWith('Database cleanup error:', _globals.expect.any(Error));
            consoleSpy.mockRestore();
        });
    });
    (0, _globals.describe)('isConnected', ()=>{
        (0, _globals.it)('should return true when database connection works', async ()=>{
            const mockLimit = _globals.jest.fn().mockResolvedValue([]);
            mockDb.select.mockReturnValue({
                from: _globals.jest.fn().mockReturnValue({
                    limit: mockLimit
                })
            });
            const result = await manager.isConnected();
            (0, _globals.expect)(mockDb.select).toHaveBeenCalled();
            (0, _globals.expect)(mockLimit).toHaveBeenCalledWith(1);
            (0, _globals.expect)(result).toBe(true);
        });
        (0, _globals.it)('should return false when database connection fails', async ()=>{
            mockDb.select.mockReturnValue({
                from: _globals.jest.fn().mockReturnValue({
                    limit: _globals.jest.fn().mockRejectedValue(new Error('Connection failed'))
                })
            });
            // Spy on console.error to verify error logging
            const consoleSpy = _globals.jest.spyOn(console, 'error').mockImplementation();
            const result = await manager.isConnected();
            (0, _globals.expect)(result).toBe(false);
            (0, _globals.expect)(consoleSpy).toHaveBeenCalledWith('Database connection test failed:', _globals.expect.any(Error));
            consoleSpy.mockRestore();
        });
    });
    (0, _globals.describe)('Factory Functions', ()=>{
        (0, _globals.describe)('createDatabaseTestManager', ()=>{
            (0, _globals.it)('should create a new DatabaseTestManager instance', ()=>{
                const manager1 = createDatabaseTestManager();
                const manager2 = createDatabaseTestManager();
                (0, _globals.expect)(manager1).toBeInstanceOf(DatabaseTestManager);
                (0, _globals.expect)(manager2).toBeInstanceOf(DatabaseTestManager);
                (0, _globals.expect)(manager1).not.toBe(manager2); // Different instances
            });
        });
        (0, _globals.describe)('globalDatabaseTestManager', ()=>{
            (0, _globals.it)('should provide a singleton instance', ()=>{
                (0, _globals.expect)(globalDatabaseTestManager).toBeInstanceOf(DatabaseTestManager);
            });
        });
    });
    (0, _globals.describe)('Tracking Functionality', ()=>{
        (0, _globals.it)('should properly track multiple operations', async ()=>{
            const userData1 = {
                email: 'test1@example.com',
                name: 'Test User 1'
            };
            const userData2 = {
                email: 'test2@example.com',
                name: 'Test User 2'
            };
            const mockUser1 = {
                id: 1,
                ...userData1
            };
            const mockUser2 = {
                id: 2,
                ...userData2
            };
            // Mock user creation
            let callCount = 0;
            const mockReturning = _globals.jest.fn().mockImplementation(()=>{
                callCount++;
                return Promise.resolve(callCount === 1 ? [
                    mockUser1
                ] : [
                    mockUser2
                ]);
            });
            mockDb.insert.mockReturnValue({
                values: _globals.jest.fn().mockReturnValue({
                    returning: mockReturning
                })
            });
            // Create users
            await manager.createTestUser(userData1);
            await manager.createTestUser(userData2);
            (0, _globals.expect)(manager.createdUsers).toEqual(_globals.expect.arrayContaining([
                1,
                2
            ]));
            (0, _globals.expect)(manager.createdUsers).toHaveLength(2);
        });
        (0, _globals.it)('should handle session management for user', async ()=>{
            const sessionData1 = {
                userId: 1,
                expiresAt: new Date()
            };
            const sessionData2 = {
                userId: 1,
                expiresAt: new Date()
            };
            const mockSession1 = {
                id: 'session-1',
                ...sessionData1
            };
            const mockSession2 = {
                id: 'session-2',
                ...sessionData2
            };
            // Mock session creation
            let callCount = 0;
            const mockReturning = _globals.jest.fn().mockImplementation(()=>{
                callCount++;
                return Promise.resolve(callCount === 1 ? [
                    mockSession1
                ] : [
                    mockSession2
                ]);
            });
            mockDb.insert.mockReturnValue({
                values: _globals.jest.fn().mockReturnValue({
                    returning: mockReturning
                })
            });
            // Create sessions
            await manager.createTestSession(sessionData1);
            await manager.createTestSession(sessionData2);
            (0, _globals.expect)(manager.createdSessions).toEqual([
                'session-1',
                'session-2'
            ]);
        });
    });
    (0, _globals.describe)('Error Handling', ()=>{
        (0, _globals.it)('should maintain data integrity during partial failures', async ()=>{
            // Setup: create some successful records first
            manager.createdUsers = [
                1
            ];
            manager.createdSessions = [
                'session-1'
            ];
            manager.createdEmailCodes = [
                1
            ];
            // Mock partial failure during cleanup
            let callCount = 0;
            mockDb.delete.mockReturnValue({
                where: _globals.jest.fn().mockImplementation(()=>{
                    callCount++;
                    if (callCount === 2) {
                        throw new Error('Session cleanup failed');
                    }
                    return Promise.resolve();
                })
            });
            const consoleSpy = _globals.jest.spyOn(console, 'error').mockImplementation();
            await manager.cleanup();
            // Verify arrays are still reset despite partial failure
            (0, _globals.expect)(manager.createdUsers).toEqual([]);
            (0, _globals.expect)(manager.createdSessions).toEqual([]);
            (0, _globals.expect)(manager.createdEmailCodes).toEqual([]);
            consoleSpy.mockRestore();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,