{"version":3,"sources":["/Users/stefanbekker/projects/fancy-planties/src/__tests__/integration/email-verification-error-scenarios.test.ts"],"sourcesContent":["/**\n * Email Verification Error Scenario Tests\n * Tests email service failure handling, retry logic, expired code scenarios, \n * cleanup processes, and concurrent verification attempts\n * Requirements: 1.4, 3.1, 7.3, 7.4\n */\n\nimport { createDatabaseTestManager } from '@/test-utils/setup/database-test-manager';\nimport { emailVerificationCodeService } from '@/lib/services/email-verification-code-service';\nimport { createEmailService } from '@/lib/services/resend-email-service';\nimport { EmailServiceError } from '@/lib/services/email-service';\n\n// Mock email service and related modules\njest.mock('@/lib/services/resend-email-service');\njest.mock('@/lib/services/email-service');\n\nconst mockEmailService = {\n  sendVerificationEmail: jest.fn(),\n};\n\nconst mockCreateEmailService = createEmailService as jest.MockedFunction<typeof createEmailService>;\nconst mockSendEmailWithRetry = require('@/lib/services/email-service').sendEmailWithRetry as jest.MockedFunction<any>;\n\n// Mock environment variables\nconst originalEnv = process.env;\n\nbeforeAll(() => {\n  process.env = {\n    ...originalEnv,\n    RESEND_API_KEY: 'test-api-key',\n    FROM_EMAIL: 'test@example.com',\n    FROM_NAME: 'Test App',\n    VERIFICATION_CODE_EXPIRY_MINUTES: '10',\n    MAX_VERIFICATION_ATTEMPTS: '5',\n    RESEND_COOLDOWN_SECONDS: '60',\n    MAX_RESEND_PER_HOUR: '5',\n    NODE_ENV: 'test',\n  };\n});\n\nafterAll(() => {\n  process.env = originalEnv;\n});\n\ndescribe('Email Verification Error Scenario Tests', () => {\n  let dbManager: any;\n\n  beforeEach(async () => {\n    jest.clearAllMocks();\n    dbManager = createDatabaseTestManager();\n    \n    // Default to successful email service\n    mockCreateEmailService.mockReturnValue(mockEmailService);\n    mockSendEmailWithRetry.mockResolvedValue(true);\n    mockEmailService.sendVerificationEmail.mockResolvedValue(true);\n  });\n\n  afterEach(async () => {\n    await dbManager.cleanup();\n  });\n\n  describe('Email Service Failure Handling and Retry Logic', () => {\n    it('should handle email service errors during code generation', async () => {\n      // Mock email service to fail\n      mockSendEmailWithRetry.mockRejectedValue(new EmailServiceError('Quota exceeded', 'QUOTA_EXCEEDED'));\n\n      // Create user\n      const user = await dbManager.createTestUser({\n        email: 'test@example.com',\n        name: 'Test User',\n        passwordHash: 'hashed_password',\n        isEmailVerified: false,\n      });\n\n      // Generate verification code (should work even if email fails)\n      const verificationCode = await emailVerificationCodeService.generateCode(user.id);\n      expect(verificationCode).toMatch(/^\\d{6}$/);\n\n      // Verify code was stored in database\n      const emailCodes = await dbManager.getEmailCodesByUserId(user.id);\n      expect(emailCodes).toHaveLength(1);\n      expect(emailCodes[0].code).toBe(verificationCode);\n\n      // User should still be unverified\n      const unverifiedUser = await dbManager.getUserById(user.id);\n      expect(unverifiedUser.isEmailVerified).toBe(false);\n    });\n\n    it('should handle different types of email service errors', async () => {\n      const user = await dbManager.createTestUser({\n        email: 'test@example.com',\n        name: 'Test User',\n        passwordHash: 'hashed_password',\n        isEmailVerified: false,\n      });\n\n      // Test API error\n      mockSendEmailWithRetry.mockRejectedValue(new EmailServiceError('API error', 'API_ERROR'));\n      const code1 = await emailVerificationCodeService.generateCode(user.id);\n      expect(code1).toMatch(/^\\d{6}$/);\n\n      // Test network error\n      mockSendEmailWithRetry.mockRejectedValue(new EmailServiceError('Network timeout', 'NETWORK_ERROR'));\n      const code2 = await emailVerificationCodeService.generateCode(user.id);\n      expect(code2).toMatch(/^\\d{6}$/);\n      expect(code2).not.toBe(code1); // Should be different code\n\n      // Verify only latest code exists\n      const emailCodes = await dbManager.getEmailCodesByUserId(user.id);\n      expect(emailCodes).toHaveLength(1);\n      expect(emailCodes[0].code).toBe(code2);\n    });\n\n    it('should handle network error with appropriate user message', async () => {\n      // Mock network error\n      const networkError = new EmailServiceError('Network timeout', 'NETWORK_ERROR');\n      mockSendEmailWithRetry.mockRejectedValue(networkError);\n\n      const user = await dbManager.createTestUser({\n        email: 'test@example.com',\n        name: 'Test User',\n        passwordHash: 'hashed_password',\n        isEmailVerified: false,\n      });\n\n      const resendRequest = new NextRequest('http://localhost/api/auth/resend-verification', {\n        method: 'POST',\n        body: JSON.stringify({\n          email: 'test@example.com',\n        }),\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      const resendResponse = await resendVerificationHandler(resendRequest);\n      const resendData = await resendResponse.json();\n\n      // Assert network error response\n      expect(resendResponse.status).toBe(500);\n      expect(resendData.error).toContain('Network error');\n      expect(resendData.error).toContain('check your connection');\n    });\n\n    it('should handle invalid email error from service', async () => {\n      // Mock invalid email error\n      const invalidEmailError = new EmailServiceError('Invalid email', 'INVALID_EMAIL');\n      mockSendEmailWithRetry.mockRejectedValue(invalidEmailError);\n\n      const user = await dbManager.createTestUser({\n        email: 'test@example.com',\n        name: 'Test User',\n        passwordHash: 'hashed_password',\n        isEmailVerified: false,\n      });\n\n      const resendRequest = new NextRequest('http://localhost/api/auth/resend-verification', {\n        method: 'POST',\n        body: JSON.stringify({\n          email: 'test@example.com',\n        }),\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      const resendResponse = await resendVerificationHandler(resendRequest);\n      const resendData = await resendResponse.json();\n\n      // Assert invalid email error response\n      expect(resendResponse.status).toBe(400);\n      expect(resendData.error).toContain('Invalid email address');\n    });\n\n    it('should handle unknown email service errors gracefully', async () => {\n      // Mock unknown error (not EmailServiceError)\n      mockSendEmailWithRetry.mockRejectedValue(new Error('Unknown error'));\n\n      const signupRequest = new NextRequest('http://localhost/api/auth/signup', {\n        method: 'POST',\n        body: JSON.stringify({\n          email: 'test@example.com',\n          password: 'SecurePass123!',\n          name: 'Test User',\n        }),\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      const signupResponse = await signupHandler(signupRequest);\n      const signupData = await signupResponse.json();\n\n      // Assert graceful handling of unknown error\n      expect(signupResponse.status).toBe(200);\n      expect(signupData.success).toBe(true);\n      expect(signupData.emailError).toContain('Failed to send verification email');\n      expect(signupData.emailError).toContain('try resending');\n    });\n\n    it('should handle service unavailable scenario during resend', async () => {\n      // Mock quota exceeded error during resend\n      const quotaError = new EmailServiceError('Service quota exceeded', 'QUOTA_EXCEEDED');\n      mockSendEmailWithRetry.mockRejectedValue(quotaError);\n\n      const user = await dbManager.createTestUser({\n        email: 'test@example.com',\n        name: 'Test User',\n        passwordHash: 'hashed_password',\n        isEmailVerified: false,\n      });\n\n      const resendRequest = new NextRequest('http://localhost/api/auth/resend-verification', {\n        method: 'POST',\n        body: JSON.stringify({\n          email: 'test@example.com',\n        }),\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      const resendResponse = await resendVerificationHandler(resendRequest);\n      const resendData = await resendResponse.json();\n\n      // Assert service unavailable response\n      expect(resendResponse.status).toBe(503);\n      expect(resendData.error).toContain('Email service quota exceeded');\n      expect(resendData.error).toContain('try again later');\n    });\n  });\n\n  describe('Expired Code Scenarios and Cleanup Processes', () => {\n    it('should handle expired verification codes properly', async () => {\n      // Create user with expired verification code\n      const user = await dbManager.createTestUser({\n        email: 'test@example.com',\n        name: 'Test User',\n        passwordHash: 'hashed_password',\n        isEmailVerified: false,\n      });\n\n      const expiredCode = await dbManager.createTestEmailCode({\n        userId: user.id,\n        code: '123456',\n        expiresAt: new Date(Date.now() - 60000), // Expired 1 minute ago\n        attemptsUsed: 0,\n      });\n\n      // Try to verify with expired code\n      const verifyRequest = new NextRequest('http://localhost/api/auth/verify-email', {\n        method: 'POST',\n        body: JSON.stringify({\n          email: 'test@example.com',\n          code: '123456',\n        }),\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      const verifyResponse = await verifyEmailHandler(verifyRequest);\n      const verifyData = await verifyResponse.json();\n\n      // Assert expired code error\n      expect(verifyResponse.status).toBe(400);\n      expect(verifyData.error).toContain('Verification code has expired');\n      expect(verifyData.error).toContain('request a new one');\n\n      // Verify user is still not verified\n      const unverifiedUser = await dbManager.getUserById(user.id);\n      expect(unverifiedUser.isEmailVerified).toBe(false);\n    });\n\n    it('should clean up expired codes during verification service operations', async () => {\n      // Create user with multiple codes, some expired\n      const user = await dbManager.createTestUser({\n        email: 'test@example.com',\n        name: 'Test User',\n        passwordHash: 'hashed_password',\n        isEmailVerified: false,\n      });\n\n      // Create expired code\n      await dbManager.createTestEmailCode({\n        userId: user.id,\n        code: '111111',\n        expiresAt: new Date(Date.now() - 60000), // Expired\n        attemptsUsed: 0,\n      });\n\n      // Create valid code\n      await dbManager.createTestEmailCode({\n        userId: user.id,\n        code: '222222',\n        expiresAt: new Date(Date.now() + 600000), // Valid for 10 minutes\n        attemptsUsed: 0,\n      });\n\n      // Trigger cleanup by calling the service method\n      await emailVerificationCodeService.cleanupExpiredCodes();\n\n      // Verify expired code was cleaned up\n      const remainingCodes = await dbManager.getEmailCodesByUserId(user.id);\n      expect(remainingCodes).toHaveLength(1);\n      expect(remainingCodes[0].code).toBe('222222');\n    });\n\n    it('should handle cleanup when user is deleted', async () => {\n      // Create user with verification codes\n      const user = await dbManager.createTestUser({\n        email: 'test@example.com',\n        name: 'Test User',\n        passwordHash: 'hashed_password',\n        isEmailVerified: false,\n      });\n\n      await dbManager.createTestEmailCode({\n        userId: user.id,\n        code: '123456',\n        expiresAt: new Date(Date.now() + 600000),\n        attemptsUsed: 0,\n      });\n\n      // Verify code exists\n      let emailCodes = await dbManager.getEmailCodesByUserId(user.id);\n      expect(emailCodes).toHaveLength(1);\n\n      // Delete user (should cascade delete codes due to foreign key constraint)\n      await dbManager.deleteUser(user.id);\n\n      // Verify codes were cleaned up\n      emailCodes = await dbManager.getEmailCodesByUserId(user.id);\n      expect(emailCodes).toHaveLength(0);\n    });\n\n    it('should handle multiple expired codes for same user', async () => {\n      // Create user with multiple expired codes\n      const user = await dbManager.createTestUser({\n        email: 'test@example.com',\n        name: 'Test User',\n        passwordHash: 'hashed_password',\n        isEmailVerified: false,\n      });\n\n      // Create multiple expired codes\n      await dbManager.createTestEmailCode({\n        userId: user.id,\n        code: '111111',\n        expiresAt: new Date(Date.now() - 120000), // Expired 2 minutes ago\n        attemptsUsed: 0,\n      });\n\n      await dbManager.createTestEmailCode({\n        userId: user.id,\n        code: '222222',\n        expiresAt: new Date(Date.now() - 60000), // Expired 1 minute ago\n        attemptsUsed: 0,\n      });\n\n      // Try to verify with one of the expired codes\n      const verifyRequest = new NextRequest('http://localhost/api/auth/verify-email', {\n        method: 'POST',\n        body: JSON.stringify({\n          email: 'test@example.com',\n          code: '111111',\n        }),\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      const verifyResponse = await verifyEmailHandler(verifyRequest);\n      const verifyData = await verifyResponse.json();\n\n      // Assert expired code error\n      expect(verifyResponse.status).toBe(400);\n      expect(verifyData.error).toContain('Verification code has expired');\n\n      // Cleanup expired codes\n      await emailVerificationCodeService.cleanupExpiredCodes();\n\n      // Verify all expired codes were cleaned up\n      const remainingCodes = await dbManager.getEmailCodesByUserId(user.id);\n      expect(remainingCodes).toHaveLength(0);\n    });\n  });\n\n  describe('Concurrent Verification Attempts and Race Conditions', () => {\n    it('should handle concurrent verification attempts safely', async () => {\n      // Create user with verification code\n      const user = await dbManager.createTestUser({\n        email: 'test@example.com',\n        name: 'Test User',\n        passwordHash: 'hashed_password',\n        isEmailVerified: false,\n      });\n\n      await dbManager.createTestEmailCode({\n        userId: user.id,\n        code: '123456',\n        expiresAt: new Date(Date.now() + 600000),\n        attemptsUsed: 0,\n      });\n\n      // Create multiple concurrent verification requests\n      const verifyRequest1 = new NextRequest('http://localhost/api/auth/verify-email', {\n        method: 'POST',\n        body: JSON.stringify({\n          email: 'test@example.com',\n          code: '123456',\n        }),\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      const verifyRequest2 = new NextRequest('http://localhost/api/auth/verify-email', {\n        method: 'POST',\n        body: JSON.stringify({\n          email: 'test@example.com',\n          code: '123456',\n        }),\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      // Execute concurrent requests\n      const [response1, response2] = await Promise.all([\n        verifyEmailHandler(verifyRequest1),\n        verifyEmailHandler(verifyRequest2),\n      ]);\n\n      const data1 = await response1.json();\n      const data2 = await response2.json();\n\n      // One should succeed, one should fail (code already used)\n      const responses = [\n        { status: response1.status, data: data1 },\n        { status: response2.status, data: data2 },\n      ];\n\n      const successResponses = responses.filter(r => r.status === 200);\n      const failureResponses = responses.filter(r => r.status !== 200);\n\n      expect(successResponses).toHaveLength(1);\n      expect(failureResponses).toHaveLength(1);\n\n      // Verify user is verified only once\n      const verifiedUser = await dbManager.getUserById(user.id);\n      expect(verifiedUser.isEmailVerified).toBe(true);\n\n      // Verify code was deleted\n      const remainingCodes = await dbManager.getEmailCodesByUserId(user.id);\n      expect(remainingCodes).toHaveLength(0);\n    });\n\n    it('should handle concurrent resend requests safely', async () => {\n      // Create user\n      const user = await dbManager.createTestUser({\n        email: 'test@example.com',\n        name: 'Test User',\n        passwordHash: 'hashed_password',\n        isEmailVerified: false,\n      });\n\n      // Create multiple concurrent resend requests\n      const resendRequest1 = new NextRequest('http://localhost/api/auth/resend-verification', {\n        method: 'POST',\n        body: JSON.stringify({\n          email: 'test@example.com',\n        }),\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      const resendRequest2 = new NextRequest('http://localhost/api/auth/resend-verification', {\n        method: 'POST',\n        body: JSON.stringify({\n          email: 'test@example.com',\n        }),\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      // Execute concurrent requests\n      const [response1, response2] = await Promise.all([\n        resendVerificationHandler(resendRequest1),\n        resendVerificationHandler(resendRequest2),\n      ]);\n\n      // Both should succeed (rate limiting is handled by middleware)\n      expect(response1.status).toBe(200);\n      expect(response2.status).toBe(200);\n\n      // Verify only one code exists (latest one)\n      const emailCodes = await dbManager.getEmailCodesByUserId(user.id);\n      expect(emailCodes).toHaveLength(1);\n\n      // Verify email service was called (possibly multiple times due to concurrency)\n      expect(mockSendEmailWithRetry).toHaveBeenCalled();\n    });\n\n    it('should handle race condition between verification and code expiration', async () => {\n      // Create user with code that expires very soon\n      const user = await dbManager.createTestUser({\n        email: 'test@example.com',\n        name: 'Test User',\n        passwordHash: 'hashed_password',\n        isEmailVerified: false,\n      });\n\n      await dbManager.createTestEmailCode({\n        userId: user.id,\n        code: '123456',\n        expiresAt: new Date(Date.now() + 100), // Expires in 100ms\n        attemptsUsed: 0,\n      });\n\n      // Wait for code to expire\n      await new Promise(resolve => setTimeout(resolve, 150));\n\n      // Try to verify with expired code\n      const verifyRequest = new NextRequest('http://localhost/api/auth/verify-email', {\n        method: 'POST',\n        body: JSON.stringify({\n          email: 'test@example.com',\n          code: '123456',\n        }),\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      const verifyResponse = await verifyEmailHandler(verifyRequest);\n      const verifyData = await verifyResponse.json();\n\n      // Should handle expired code gracefully\n      expect(verifyResponse.status).toBe(400);\n      expect(verifyData.error).toContain('expired');\n\n      // User should remain unverified\n      const unverifiedUser = await dbManager.getUserById(user.id);\n      expect(unverifiedUser.isEmailVerified).toBe(false);\n    });\n\n    it('should handle concurrent signup attempts with same email', async () => {\n      // Create concurrent signup requests with same email\n      const signupRequest1 = new NextRequest('http://localhost/api/auth/signup', {\n        method: 'POST',\n        body: JSON.stringify({\n          email: 'test@example.com',\n          password: 'SecurePass123!',\n          name: 'Test User 1',\n        }),\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      const signupRequest2 = new NextRequest('http://localhost/api/auth/signup', {\n        method: 'POST',\n        body: JSON.stringify({\n          email: 'test@example.com',\n          password: 'AnotherPass123!',\n          name: 'Test User 2',\n        }),\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      // Execute concurrent requests\n      const [response1, response2] = await Promise.all([\n        signupHandler(signupRequest1),\n        signupHandler(signupRequest2),\n      ]);\n\n      const data1 = await response1.json();\n      const data2 = await response2.json();\n\n      // One should succeed, one should fail with duplicate email error\n      const responses = [\n        { status: response1.status, data: data1 },\n        { status: response2.status, data: data2 },\n      ];\n\n      const successResponses = responses.filter(r => r.status === 200);\n      const conflictResponses = responses.filter(r => r.status === 409);\n\n      expect(successResponses).toHaveLength(1);\n      expect(conflictResponses).toHaveLength(1);\n\n      // Verify only one user was created\n      const user = await dbManager.getUserByEmail('test@example.com');\n      expect(user).toBeTruthy();\n\n      // Verify only one set of verification codes exists\n      const emailCodes = await dbManager.getEmailCodesByUserId(user.id);\n      expect(emailCodes).toHaveLength(1);\n    });\n  });\n\n  describe('Database Error Scenarios', () => {\n    it('should handle database connection failures gracefully', async () => {\n      // Mock database connection failure\n      const originalDb = require('@/lib/db').db;\n      \n      // Mock database to throw connection error\n      jest.doMock('@/lib/db', () => ({\n        db: {\n          select: jest.fn().mockRejectedValue(new Error('Database connection failed')),\n          insert: jest.fn().mockRejectedValue(new Error('Database connection failed')),\n          update: jest.fn().mockRejectedValue(new Error('Database connection failed')),\n          delete: jest.fn().mockRejectedValue(new Error('Database connection failed')),\n        },\n      }));\n\n      const verifyRequest = new NextRequest('http://localhost/api/auth/verify-email', {\n        method: 'POST',\n        body: JSON.stringify({\n          email: 'test@example.com',\n          code: '123456',\n        }),\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      const verifyResponse = await verifyEmailHandler(verifyRequest);\n      const verifyData = await verifyResponse.json();\n\n      // Should handle database error gracefully\n      expect(verifyResponse.status).toBe(500);\n      expect(verifyData.error).toBe('Internal server error');\n\n      // Restore original database\n      jest.doMock('@/lib/db', () => ({ db: originalDb }));\n    });\n\n    it('should handle transaction rollback scenarios', async () => {\n      // This test would require more complex database transaction mocking\n      // For now, we'll test that the service handles errors during code validation\n      \n      const user = await dbManager.createTestUser({\n        email: 'test@example.com',\n        name: 'Test User',\n        passwordHash: 'hashed_password',\n        isEmailVerified: false,\n      });\n\n      // Create code with maximum attempts reached\n      await dbManager.createTestEmailCode({\n        userId: user.id,\n        code: '123456',\n        expiresAt: new Date(Date.now() + 600000),\n        attemptsUsed: 5, // Maximum attempts reached\n      });\n\n      const verifyRequest = new NextRequest('http://localhost/api/auth/verify-email', {\n        method: 'POST',\n        body: JSON.stringify({\n          email: 'test@example.com',\n          code: '123456',\n        }),\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      const verifyResponse = await verifyEmailHandler(verifyRequest);\n      const verifyData = await verifyResponse.json();\n\n      // Should handle too many attempts error\n      expect(verifyResponse.status).toBe(429);\n      expect(verifyData.error).toContain('Too many verification attempts');\n\n      // User should remain unverified\n      const unverifiedUser = await dbManager.getUserById(user.id);\n      expect(unverifiedUser.isEmailVerified).toBe(false);\n    });\n  });\n});"],"names":["jest","mock","mockEmailService","sendVerificationEmail","fn","mockCreateEmailService","createEmailService","mockSendEmailWithRetry","require","sendEmailWithRetry","originalEnv","process","env","beforeAll","RESEND_API_KEY","FROM_EMAIL","FROM_NAME","VERIFICATION_CODE_EXPIRY_MINUTES","MAX_VERIFICATION_ATTEMPTS","RESEND_COOLDOWN_SECONDS","MAX_RESEND_PER_HOUR","NODE_ENV","afterAll","describe","dbManager","beforeEach","clearAllMocks","createDatabaseTestManager","mockReturnValue","mockResolvedValue","afterEach","cleanup","it","mockRejectedValue","EmailServiceError","user","createTestUser","email","name","passwordHash","isEmailVerified","verificationCode","emailVerificationCodeService","generateCode","id","expect","toMatch","emailCodes","getEmailCodesByUserId","toHaveLength","code","toBe","unverifiedUser","getUserById","code1","code2","not","networkError","resendRequest","NextRequest","method","body","JSON","stringify","headers","resendResponse","resendVerificationHandler","resendData","json","status","error","toContain","invalidEmailError","Error","signupRequest","password","signupResponse","signupHandler","signupData","success","emailError","quotaError","expiredCode","createTestEmailCode","userId","expiresAt","Date","now","attemptsUsed","verifyRequest","verifyResponse","verifyEmailHandler","verifyData","cleanupExpiredCodes","remainingCodes","deleteUser","verifyRequest1","verifyRequest2","response1","response2","Promise","all","data1","data2","responses","data","successResponses","filter","r","failureResponses","verifiedUser","resendRequest1","resendRequest2","toHaveBeenCalled","resolve","setTimeout","signupRequest1","signupRequest2","conflictResponses","getUserByEmail","toBeTruthy","originalDb","db","doMock","select","insert","update","delete"],"mappings":"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"}