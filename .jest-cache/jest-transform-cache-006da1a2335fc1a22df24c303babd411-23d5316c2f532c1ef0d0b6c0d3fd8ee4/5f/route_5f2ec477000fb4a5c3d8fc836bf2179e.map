{"version":3,"names":["cov_108dws563y","actualCoverage","s","POST","request","f","user","_server1","validateRequest","b","_server","NextResponse","json","error","status","body","validatedData","_plantschemas","plantTaxonomySchema","parse","validation","_planttaxonomy","validatePlantTaxonomy","success","data","metadata","operation","timestamp","Date","userId","id","console","_zod","ZodError","details","issues"],"sources":["/Users/stefanbekker/projects/fancy-planties/src/app/api/plants/validate/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { validateRequest } from '@/lib/auth/server';\nimport { validatePlantTaxonomy } from '@/lib/db/queries/plant-taxonomy';\nimport { plantTaxonomySchema } from '@/lib/validation/plant-schemas';\nimport { ZodError } from 'zod';\n\n// POST /api/plants/validate - Validate plant taxonomy for duplicates and conflicts\nexport async function POST(request: NextRequest) {\n  try {\n    const { user } = await validateRequest();\n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const body = await request.json();\n    const validatedData = plantTaxonomySchema.parse(body);\n\n    const validation = await validatePlantTaxonomy(validatedData);\n\n    return NextResponse.json({\n      success: true,\n      data: validation,\n      metadata: {\n        operation: 'validate',\n        timestamp: new Date(),\n        userId: user.id,\n      },\n    });\n  } catch (error) {\n    console.error('Error validating plant taxonomy:', error);\n    \n    if (error instanceof ZodError) {\n      return NextResponse.json(\n        { \n          error: 'Invalid taxonomy data', \n          details: error.issues \n        }, \n        { status: 400 }\n      );\n    }\n\n    return NextResponse.json(\n      { error: 'Internal server error' }, \n      { status: 500 }\n    );\n  }\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAOO;IAAAA,cAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,cAAA;AAAAA,cAAA,GAAAE,CAAA;;;;;;+BAAe;;;;;;WAAAC,IAAA;;;;;kCAPoB;;;kCACV;;;kCACM;;;kCACF;;;kCACX;AAGlB,eAAeA,KAAKC,OAAoB;EAAA;EAAAJ,cAAA,GAAAK,CAAA;EAAAL,cAAA,GAAAE,CAAA;EAC7C,IAAI;IACF,MAAM;MAAEI;IAAI,CAAE;IAAA;IAAA,CAAAN,cAAA,GAAAE,CAAA,OAAG,MAAM,IAAAK,QAAA,CAAAC,eAAe;IAAA;IAAAR,cAAA,GAAAE,CAAA;IACtC,IAAI,CAACI,IAAA,EAAM;MAAA;MAAAN,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAE,CAAA;MACT,OAAOQ,OAAA,CAAAC,YAAY,CAACC,IAAI,CAAC;QAAEC,KAAA,EAAO;MAAe,GAAG;QAAEC,MAAA,EAAQ;MAAI;IACpE;IAAA;IAAA;MAAAd,cAAA,GAAAS,CAAA;IAAA;IAEA,MAAMM,IAAA;IAAA;IAAA,CAAAf,cAAA,GAAAE,CAAA,QAAO,MAAME,OAAA,CAAQQ,IAAI;IAC/B,MAAMI,aAAA;IAAA;IAAA,CAAAhB,cAAA,GAAAE,CAAA,QAAgBe,aAAA,CAAAC,mBAAmB,CAACC,KAAK,CAACJ,IAAA;IAEhD,MAAMK,UAAA;IAAA;IAAA,CAAApB,cAAA,GAAAE,CAAA,QAAa,MAAM,IAAAmB,cAAA,CAAAC,qBAAqB,EAACN,aAAA;IAAA;IAAAhB,cAAA,GAAAE,CAAA;IAE/C,OAAOQ,OAAA,CAAAC,YAAY,CAACC,IAAI,CAAC;MACvBW,OAAA,EAAS;MACTC,IAAA,EAAMJ,UAAA;MACNK,QAAA,EAAU;QACRC,SAAA,EAAW;QACXC,SAAA,EAAW,IAAIC,IAAA;QACfC,MAAA,EAAQvB,IAAA,CAAKwB;MACf;IACF;EACF,EAAE,OAAOjB,KAAA,EAAO;IAAA;IAAAb,cAAA,GAAAE,CAAA;IACd6B,OAAA,CAAQlB,KAAK,CAAC,oCAAoCA,KAAA;IAAA;IAAAb,cAAA,GAAAE,CAAA;IAElD,IAAIW,KAAA,YAAiBmB,IAAA,CAAAC,QAAQ,EAAE;MAAA;MAAAjC,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAE,CAAA;MAC7B,OAAOQ,OAAA,CAAAC,YAAY,CAACC,IAAI,CACtB;QACEC,KAAA,EAAO;QACPqB,OAAA,EAASrB,KAAA,CAAMsB;MACjB,GACA;QAAErB,MAAA,EAAQ;MAAI;IAElB;IAAA;IAAA;MAAAd,cAAA,GAAAS,CAAA;IAAA;IAAAT,cAAA,GAAAE,CAAA;IAEA,OAAOQ,OAAA,CAAAC,YAAY,CAACC,IAAI,CACtB;MAAEC,KAAA,EAAO;IAAwB,GACjC;MAAEC,MAAA,EAAQ;IAAI;EAElB;AACF","ignoreList":[]}