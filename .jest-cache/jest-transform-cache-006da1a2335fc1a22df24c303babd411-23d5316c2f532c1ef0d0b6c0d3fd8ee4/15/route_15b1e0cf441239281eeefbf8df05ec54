7ac503aeb75b77b215daa3bae1da7646
"use strict";

/* istanbul ignore next */
function cov_6c4accwem() {
  var path = "/Users/stefanbekker/projects/fancy-planties/src/app/api/plants/[id]/route.ts";
  var hash = "dfe3ade37be90f83fc320b28a70d689ed11c5935";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/stefanbekker/projects/fancy-planties/src/app/api/plants/[id]/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 21,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 22
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 19
        }
      },
      "6": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 19
        }
      },
      "7": {
        start: {
          line: 22,
          column: 16
        },
        end: {
          line: 22,
          column: 38
        }
      },
      "8": {
        start: {
          line: 23,
          column: 17
        },
        end: {
          line: 23,
          column: 55
        }
      },
      "9": {
        start: {
          line: 24,
          column: 23
        },
        end: {
          line: 24,
          column: 75
        }
      },
      "10": {
        start: {
          line: 25,
          column: 22
        },
        end: {
          line: 25,
          column: 73
        }
      },
      "11": {
        start: {
          line: 26,
          column: 13
        },
        end: {
          line: 26,
          column: 27
        }
      },
      "12": {
        start: {
          line: 28,
          column: 4
        },
        end: {
          line: 70,
          column: 5
        }
      },
      "13": {
        start: {
          line: 29,
          column: 25
        },
        end: {
          line: 29,
          column: 62
        }
      },
      "14": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 36,
          column: 9
        }
      },
      "15": {
        start: {
          line: 31,
          column: 12
        },
        end: {
          line: 35,
          column: 15
        }
      },
      "16": {
        start: {
          line: 37,
          column: 23
        },
        end: {
          line: 37,
          column: 35
        }
      },
      "17": {
        start: {
          line: 38,
          column: 24
        },
        end: {
          line: 38,
          column: 40
        }
      },
      "18": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 45,
          column: 9
        }
      },
      "19": {
        start: {
          line: 40,
          column: 12
        },
        end: {
          line: 44,
          column: 15
        }
      },
      "20": {
        start: {
          line: 46,
          column: 22
        },
        end: {
          line: 46,
          column: 69
        }
      },
      "21": {
        start: {
          line: 47,
          column: 8
        },
        end: {
          line: 53,
          column: 9
        }
      },
      "22": {
        start: {
          line: 48,
          column: 12
        },
        end: {
          line: 52,
          column: 15
        }
      },
      "23": {
        start: {
          line: 54,
          column: 8
        },
        end: {
          line: 62,
          column: 11
        }
      },
      "24": {
        start: {
          line: 64,
          column: 8
        },
        end: {
          line: 64,
          column: 54
        }
      },
      "25": {
        start: {
          line: 65,
          column: 8
        },
        end: {
          line: 69,
          column: 11
        }
      },
      "26": {
        start: {
          line: 73,
          column: 4
        },
        end: {
          line: 128,
          column: 5
        }
      },
      "27": {
        start: {
          line: 74,
          column: 25
        },
        end: {
          line: 74,
          column: 62
        }
      },
      "28": {
        start: {
          line: 75,
          column: 8
        },
        end: {
          line: 81,
          column: 9
        }
      },
      "29": {
        start: {
          line: 76,
          column: 12
        },
        end: {
          line: 80,
          column: 15
        }
      },
      "30": {
        start: {
          line: 82,
          column: 23
        },
        end: {
          line: 82,
          column: 35
        }
      },
      "31": {
        start: {
          line: 83,
          column: 24
        },
        end: {
          line: 83,
          column: 40
        }
      },
      "32": {
        start: {
          line: 84,
          column: 8
        },
        end: {
          line: 90,
          column: 9
        }
      },
      "33": {
        start: {
          line: 85,
          column: 12
        },
        end: {
          line: 89,
          column: 15
        }
      },
      "34": {
        start: {
          line: 91,
          column: 21
        },
        end: {
          line: 91,
          column: 41
        }
      },
      "35": {
        start: {
          line: 92,
          column: 30
        },
        end: {
          line: 95,
          column: 10
        }
      },
      "36": {
        start: {
          line: 96,
          column: 29
        },
        end: {
          line: 96,
          column: 81
        }
      },
      "37": {
        start: {
          line: 97,
          column: 8
        },
        end: {
          line: 103,
          column: 9
        }
      },
      "38": {
        start: {
          line: 98,
          column: 12
        },
        end: {
          line: 102,
          column: 15
        }
      },
      "39": {
        start: {
          line: 104,
          column: 8
        },
        end: {
          line: 112,
          column: 11
        }
      },
      "40": {
        start: {
          line: 114,
          column: 8
        },
        end: {
          line: 114,
          column: 54
        }
      },
      "41": {
        start: {
          line: 115,
          column: 8
        },
        end: {
          line: 122,
          column: 9
        }
      },
      "42": {
        start: {
          line: 116,
          column: 12
        },
        end: {
          line: 121,
          column: 15
        }
      },
      "43": {
        start: {
          line: 123,
          column: 8
        },
        end: {
          line: 127,
          column: 11
        }
      },
      "44": {
        start: {
          line: 131,
          column: 4
        },
        end: {
          line: 183,
          column: 5
        }
      },
      "45": {
        start: {
          line: 132,
          column: 25
        },
        end: {
          line: 132,
          column: 62
        }
      },
      "46": {
        start: {
          line: 133,
          column: 8
        },
        end: {
          line: 139,
          column: 9
        }
      },
      "47": {
        start: {
          line: 134,
          column: 12
        },
        end: {
          line: 138,
          column: 15
        }
      },
      "48": {
        start: {
          line: 140,
          column: 23
        },
        end: {
          line: 140,
          column: 35
        }
      },
      "49": {
        start: {
          line: 141,
          column: 24
        },
        end: {
          line: 141,
          column: 40
        }
      },
      "50": {
        start: {
          line: 142,
          column: 8
        },
        end: {
          line: 148,
          column: 9
        }
      },
      "51": {
        start: {
          line: 143,
          column: 12
        },
        end: {
          line: 147,
          column: 15
        }
      },
      "52": {
        start: {
          line: 149,
          column: 24
        },
        end: {
          line: 149,
          column: 79
        }
      },
      "53": {
        start: {
          line: 150,
          column: 8
        },
        end: {
          line: 156,
          column: 9
        }
      },
      "54": {
        start: {
          line: 151,
          column: 12
        },
        end: {
          line: 155,
          column: 15
        }
      },
      "55": {
        start: {
          line: 157,
          column: 8
        },
        end: {
          line: 168,
          column: 11
        }
      },
      "56": {
        start: {
          line: 170,
          column: 8
        },
        end: {
          line: 170,
          column: 54
        }
      },
      "57": {
        start: {
          line: 171,
          column: 8
        },
        end: {
          line: 177,
          column: 9
        }
      },
      "58": {
        start: {
          line: 172,
          column: 12
        },
        end: {
          line: 176,
          column: 15
        }
      },
      "59": {
        start: {
          line: 178,
          column: 8
        },
        end: {
          line: 182,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        },
        loc: {
          start: {
            line: 12,
            column: 18
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 15
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 18,
            column: 4
          },
          end: {
            line: 18,
            column: 5
          }
        },
        loc: {
          start: {
            line: 18,
            column: 15
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 18
      },
      "4": {
        name: "GET",
        decl: {
          start: {
            line: 27,
            column: 15
          },
          end: {
            line: 27,
            column: 18
          }
        },
        loc: {
          start: {
            line: 27,
            column: 40
          },
          end: {
            line: 71,
            column: 1
          }
        },
        line: 27
      },
      "5": {
        name: "PUT",
        decl: {
          start: {
            line: 72,
            column: 15
          },
          end: {
            line: 72,
            column: 18
          }
        },
        loc: {
          start: {
            line: 72,
            column: 40
          },
          end: {
            line: 129,
            column: 1
          }
        },
        line: 72
      },
      "6": {
        name: "DELETE",
        decl: {
          start: {
            line: 130,
            column: 15
          },
          end: {
            line: 130,
            column: 21
          }
        },
        loc: {
          start: {
            line: 130,
            column: 43
          },
          end: {
            line: 184,
            column: 1
          }
        },
        line: 130
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 36,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 36,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 30
      },
      "1": {
        loc: {
          start: {
            line: 39,
            column: 8
          },
          end: {
            line: 45,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 39,
            column: 8
          },
          end: {
            line: 45,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 39
      },
      "2": {
        loc: {
          start: {
            line: 47,
            column: 8
          },
          end: {
            line: 53,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 47,
            column: 8
          },
          end: {
            line: 53,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 47
      },
      "3": {
        loc: {
          start: {
            line: 75,
            column: 8
          },
          end: {
            line: 81,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 75,
            column: 8
          },
          end: {
            line: 81,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 75
      },
      "4": {
        loc: {
          start: {
            line: 84,
            column: 8
          },
          end: {
            line: 90,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 84,
            column: 8
          },
          end: {
            line: 90,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 84
      },
      "5": {
        loc: {
          start: {
            line: 97,
            column: 8
          },
          end: {
            line: 103,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 97,
            column: 8
          },
          end: {
            line: 103,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 97
      },
      "6": {
        loc: {
          start: {
            line: 115,
            column: 8
          },
          end: {
            line: 122,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 115,
            column: 8
          },
          end: {
            line: 122,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 115
      },
      "7": {
        loc: {
          start: {
            line: 133,
            column: 8
          },
          end: {
            line: 139,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 133,
            column: 8
          },
          end: {
            line: 139,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 133
      },
      "8": {
        loc: {
          start: {
            line: 142,
            column: 8
          },
          end: {
            line: 148,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 142,
            column: 8
          },
          end: {
            line: 148,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 142
      },
      "9": {
        loc: {
          start: {
            line: 150,
            column: 8
          },
          end: {
            line: 156,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 150,
            column: 8
          },
          end: {
            line: 156,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 150
      },
      "10": {
        loc: {
          start: {
            line: 171,
            column: 8
          },
          end: {
            line: 177,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 171,
            column: 8
          },
          end: {
            line: 177,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 171
      },
      "11": {
        loc: {
          start: {
            line: 171,
            column: 12
          },
          end: {
            line: 171,
            column: 84
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 171,
            column: 12
          },
          end: {
            line: 171,
            column: 34
          }
        }, {
          start: {
            line: 171,
            column: 38
          },
          end: {
            line: 171,
            column: 84
          }
        }],
        line: 171
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/stefanbekker/projects/fancy-planties/src/app/api/plants/[id]/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport { validateRequest } from '@/lib/auth/server';\nimport { \n  getPlantById, \n  updatePlant, \n  deletePlant \n} from '@/lib/db/queries/plant-taxonomy';\nimport { updatePlantSchema } from '@/lib/validation/plant-schemas';\nimport { ZodError } from 'zod';\n\n// GET /api/plants/[id] - Get plant by ID\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { user } = await validateRequest();\n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const { id } = await params;\n    const plantId = parseInt(id, 10);\n    if (isNaN(plantId)) {\n      return NextResponse.json({ error: 'Invalid plant ID' }, { status: 400 });\n    }\n\n    const plant = await getPlantById(plantId);\n    if (!plant) {\n      return NextResponse.json({ error: 'Plant not found' }, { status: 404 });\n    }\n\n    return NextResponse.json({\n      success: true,\n      data: plant,\n      metadata: {\n        operation: 'get',\n        timestamp: new Date(),\n        userId: user.id,\n      },\n    });\n  } catch (error) {\n    console.error('Error fetching plant:', error);\n    \n    return NextResponse.json(\n      { error: 'Internal server error' }, \n      { status: 500 }\n    );\n  }\n}\n\n// PUT /api/plants/[id] - Update plant\nexport async function PUT(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { user } = await validateRequest();\n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const { id } = await params;\n    const plantId = parseInt(id, 10);\n    if (isNaN(plantId)) {\n      return NextResponse.json({ error: 'Invalid plant ID' }, { status: 400 });\n    }\n\n    const body = await request.json();\n    const validatedData = updatePlantSchema.parse({\n      ...body,\n      id: plantId,\n    });\n\n    const updatedPlant = await updatePlant(validatedData);\n    if (!updatedPlant) {\n      return NextResponse.json({ error: 'Plant not found' }, { status: 404 });\n    }\n\n    return NextResponse.json({\n      success: true,\n      data: updatedPlant,\n      metadata: {\n        operation: 'update',\n        timestamp: new Date(),\n        userId: user.id,\n      },\n    });\n  } catch (error) {\n    console.error('Error updating plant:', error);\n    \n    if (error instanceof ZodError) {\n      return NextResponse.json(\n        { \n          error: 'Invalid plant data', \n          details: error.issues \n        }, \n        { status: 400 }\n      );\n    }\n\n    return NextResponse.json(\n      { error: 'Internal server error' }, \n      { status: 500 }\n    );\n  }\n}\n\n// DELETE /api/plants/[id] - Delete plant (only if no instances exist)\nexport async function DELETE(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { user } = await validateRequest();\n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const { id } = await params;\n    const plantId = parseInt(id, 10);\n    if (isNaN(plantId)) {\n      return NextResponse.json({ error: 'Invalid plant ID' }, { status: 400 });\n    }\n\n    const deleted = await deletePlant(plantId, user.id);\n    if (!deleted) {\n      return NextResponse.json(\n        { error: 'Plant not found or cannot be deleted' }, \n        { status: 404 }\n      );\n    }\n\n    return NextResponse.json({\n      success: true,\n      data: { id: plantId, deleted: true },\n      metadata: {\n        operation: 'delete',\n        timestamp: new Date(),\n        userId: user.id,\n      },\n    });\n  } catch (error) {\n    console.error('Error deleting plant:', error);\n    \n    if (error instanceof Error && error.message?.includes('Cannot delete plant')) {\n      return NextResponse.json(\n        { error: error.message }, \n        { status: 409 }\n      );\n    }\n\n    return NextResponse.json(\n      { error: 'Internal server error' }, \n      { status: 500 }\n    );\n  }\n}"],
      names: ["DELETE", "GET", "PUT", "request", "params", "user", "validateRequest", "NextResponse", "json", "error", "status", "id", "plantId", "parseInt", "isNaN", "plant", "getPlantById", "success", "data", "metadata", "operation", "timestamp", "Date", "userId", "console", "body", "validatedData", "updatePlantSchema", "parse", "updatedPlant", "updatePlant", "ZodError", "details", "issues", "deleted", "deletePlant", "Error", "message", "includes"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "dfe3ade37be90f83fc320b28a70d689ed11c5935"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_6c4accwem = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_6c4accwem();
cov_6c4accwem().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_6c4accwem().f[0]++;
  cov_6c4accwem().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_6c4accwem().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_6c4accwem().s[3]++;
_export(exports, {
  get DELETE() {
    /* istanbul ignore next */
    cov_6c4accwem().f[1]++;
    cov_6c4accwem().s[4]++;
    return DELETE;
  },
  get GET() {
    /* istanbul ignore next */
    cov_6c4accwem().f[2]++;
    cov_6c4accwem().s[5]++;
    return GET;
  },
  get PUT() {
    /* istanbul ignore next */
    cov_6c4accwem().f[3]++;
    cov_6c4accwem().s[6]++;
    return PUT;
  }
});
const _server =
/* istanbul ignore next */
(cov_6c4accwem().s[7]++, require("next/server"));
const _server1 =
/* istanbul ignore next */
(cov_6c4accwem().s[8]++, require("../../../../lib/auth/server"));
const _planttaxonomy =
/* istanbul ignore next */
(cov_6c4accwem().s[9]++, require("../../../../lib/db/queries/plant-taxonomy"));
const _plantschemas =
/* istanbul ignore next */
(cov_6c4accwem().s[10]++, require("../../../../lib/validation/plant-schemas"));
const _zod =
/* istanbul ignore next */
(cov_6c4accwem().s[11]++, require("zod"));
async function GET(request, {
  params
}) {
  /* istanbul ignore next */
  cov_6c4accwem().f[4]++;
  cov_6c4accwem().s[12]++;
  try {
    const {
      user
    } =
    /* istanbul ignore next */
    (cov_6c4accwem().s[13]++, await (0, _server1.validateRequest)());
    /* istanbul ignore next */
    cov_6c4accwem().s[14]++;
    if (!user) {
      /* istanbul ignore next */
      cov_6c4accwem().b[0][0]++;
      cov_6c4accwem().s[15]++;
      return _server.NextResponse.json({
        error: 'Unauthorized'
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_6c4accwem().b[0][1]++;
    }
    const {
      id
    } =
    /* istanbul ignore next */
    (cov_6c4accwem().s[16]++, await params);
    const plantId =
    /* istanbul ignore next */
    (cov_6c4accwem().s[17]++, parseInt(id, 10));
    /* istanbul ignore next */
    cov_6c4accwem().s[18]++;
    if (isNaN(plantId)) {
      /* istanbul ignore next */
      cov_6c4accwem().b[1][0]++;
      cov_6c4accwem().s[19]++;
      return _server.NextResponse.json({
        error: 'Invalid plant ID'
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_6c4accwem().b[1][1]++;
    }
    const plant =
    /* istanbul ignore next */
    (cov_6c4accwem().s[20]++, await (0, _planttaxonomy.getPlantById)(plantId));
    /* istanbul ignore next */
    cov_6c4accwem().s[21]++;
    if (!plant) {
      /* istanbul ignore next */
      cov_6c4accwem().b[2][0]++;
      cov_6c4accwem().s[22]++;
      return _server.NextResponse.json({
        error: 'Plant not found'
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_6c4accwem().b[2][1]++;
    }
    cov_6c4accwem().s[23]++;
    return _server.NextResponse.json({
      success: true,
      data: plant,
      metadata: {
        operation: 'get',
        timestamp: new Date(),
        userId: user.id
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_6c4accwem().s[24]++;
    console.error('Error fetching plant:', error);
    /* istanbul ignore next */
    cov_6c4accwem().s[25]++;
    return _server.NextResponse.json({
      error: 'Internal server error'
    }, {
      status: 500
    });
  }
}
async function PUT(request, {
  params
}) {
  /* istanbul ignore next */
  cov_6c4accwem().f[5]++;
  cov_6c4accwem().s[26]++;
  try {
    const {
      user
    } =
    /* istanbul ignore next */
    (cov_6c4accwem().s[27]++, await (0, _server1.validateRequest)());
    /* istanbul ignore next */
    cov_6c4accwem().s[28]++;
    if (!user) {
      /* istanbul ignore next */
      cov_6c4accwem().b[3][0]++;
      cov_6c4accwem().s[29]++;
      return _server.NextResponse.json({
        error: 'Unauthorized'
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_6c4accwem().b[3][1]++;
    }
    const {
      id
    } =
    /* istanbul ignore next */
    (cov_6c4accwem().s[30]++, await params);
    const plantId =
    /* istanbul ignore next */
    (cov_6c4accwem().s[31]++, parseInt(id, 10));
    /* istanbul ignore next */
    cov_6c4accwem().s[32]++;
    if (isNaN(plantId)) {
      /* istanbul ignore next */
      cov_6c4accwem().b[4][0]++;
      cov_6c4accwem().s[33]++;
      return _server.NextResponse.json({
        error: 'Invalid plant ID'
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_6c4accwem().b[4][1]++;
    }
    const body =
    /* istanbul ignore next */
    (cov_6c4accwem().s[34]++, await request.json());
    const validatedData =
    /* istanbul ignore next */
    (cov_6c4accwem().s[35]++, _plantschemas.updatePlantSchema.parse({
      ...body,
      id: plantId
    }));
    const updatedPlant =
    /* istanbul ignore next */
    (cov_6c4accwem().s[36]++, await (0, _planttaxonomy.updatePlant)(validatedData));
    /* istanbul ignore next */
    cov_6c4accwem().s[37]++;
    if (!updatedPlant) {
      /* istanbul ignore next */
      cov_6c4accwem().b[5][0]++;
      cov_6c4accwem().s[38]++;
      return _server.NextResponse.json({
        error: 'Plant not found'
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_6c4accwem().b[5][1]++;
    }
    cov_6c4accwem().s[39]++;
    return _server.NextResponse.json({
      success: true,
      data: updatedPlant,
      metadata: {
        operation: 'update',
        timestamp: new Date(),
        userId: user.id
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_6c4accwem().s[40]++;
    console.error('Error updating plant:', error);
    /* istanbul ignore next */
    cov_6c4accwem().s[41]++;
    if (error instanceof _zod.ZodError) {
      /* istanbul ignore next */
      cov_6c4accwem().b[6][0]++;
      cov_6c4accwem().s[42]++;
      return _server.NextResponse.json({
        error: 'Invalid plant data',
        details: error.issues
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_6c4accwem().b[6][1]++;
    }
    cov_6c4accwem().s[43]++;
    return _server.NextResponse.json({
      error: 'Internal server error'
    }, {
      status: 500
    });
  }
}
async function DELETE(request, {
  params
}) {
  /* istanbul ignore next */
  cov_6c4accwem().f[6]++;
  cov_6c4accwem().s[44]++;
  try {
    const {
      user
    } =
    /* istanbul ignore next */
    (cov_6c4accwem().s[45]++, await (0, _server1.validateRequest)());
    /* istanbul ignore next */
    cov_6c4accwem().s[46]++;
    if (!user) {
      /* istanbul ignore next */
      cov_6c4accwem().b[7][0]++;
      cov_6c4accwem().s[47]++;
      return _server.NextResponse.json({
        error: 'Unauthorized'
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_6c4accwem().b[7][1]++;
    }
    const {
      id
    } =
    /* istanbul ignore next */
    (cov_6c4accwem().s[48]++, await params);
    const plantId =
    /* istanbul ignore next */
    (cov_6c4accwem().s[49]++, parseInt(id, 10));
    /* istanbul ignore next */
    cov_6c4accwem().s[50]++;
    if (isNaN(plantId)) {
      /* istanbul ignore next */
      cov_6c4accwem().b[8][0]++;
      cov_6c4accwem().s[51]++;
      return _server.NextResponse.json({
        error: 'Invalid plant ID'
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_6c4accwem().b[8][1]++;
    }
    const deleted =
    /* istanbul ignore next */
    (cov_6c4accwem().s[52]++, await (0, _planttaxonomy.deletePlant)(plantId, user.id));
    /* istanbul ignore next */
    cov_6c4accwem().s[53]++;
    if (!deleted) {
      /* istanbul ignore next */
      cov_6c4accwem().b[9][0]++;
      cov_6c4accwem().s[54]++;
      return _server.NextResponse.json({
        error: 'Plant not found or cannot be deleted'
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_6c4accwem().b[9][1]++;
    }
    cov_6c4accwem().s[55]++;
    return _server.NextResponse.json({
      success: true,
      data: {
        id: plantId,
        deleted: true
      },
      metadata: {
        operation: 'delete',
        timestamp: new Date(),
        userId: user.id
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_6c4accwem().s[56]++;
    console.error('Error deleting plant:', error);
    /* istanbul ignore next */
    cov_6c4accwem().s[57]++;
    if (
    /* istanbul ignore next */
    (cov_6c4accwem().b[11][0]++, error instanceof Error) &&
    /* istanbul ignore next */
    (cov_6c4accwem().b[11][1]++, error.message?.includes('Cannot delete plant'))) {
      /* istanbul ignore next */
      cov_6c4accwem().b[10][0]++;
      cov_6c4accwem().s[58]++;
      return _server.NextResponse.json({
        error: error.message
      }, {
        status: 409
      });
    } else
    /* istanbul ignore next */
    {
      cov_6c4accwem().b[10][1]++;
    }
    cov_6c4accwem().s[59]++;
    return _server.NextResponse.json({
      error: 'Internal server error'
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJERUxFVEUiLCJjb3ZfNmM0YWNjd2VtIiwiZiIsInMiLCJHRVQiLCJQVVQiLCJyZXF1ZXN0IiwicGFyYW1zIiwidXNlciIsIl9zZXJ2ZXIxIiwidmFsaWRhdGVSZXF1ZXN0IiwiYiIsIl9zZXJ2ZXIiLCJOZXh0UmVzcG9uc2UiLCJqc29uIiwiZXJyb3IiLCJzdGF0dXMiLCJpZCIsInBsYW50SWQiLCJwYXJzZUludCIsImlzTmFOIiwicGxhbnQiLCJfcGxhbnR0YXhvbm9teSIsImdldFBsYW50QnlJZCIsInN1Y2Nlc3MiLCJkYXRhIiwibWV0YWRhdGEiLCJvcGVyYXRpb24iLCJ0aW1lc3RhbXAiLCJEYXRlIiwidXNlcklkIiwiY29uc29sZSIsImJvZHkiLCJ2YWxpZGF0ZWREYXRhIiwiX3BsYW50c2NoZW1hcyIsInVwZGF0ZVBsYW50U2NoZW1hIiwicGFyc2UiLCJ1cGRhdGVkUGxhbnQiLCJ1cGRhdGVQbGFudCIsIl96b2QiLCJab2RFcnJvciIsImRldGFpbHMiLCJpc3N1ZXMiLCJkZWxldGVkIiwiZGVsZXRlUGxhbnQiLCJFcnJvciIsIm1lc3NhZ2UiLCJpbmNsdWRlcyJdLCJzb3VyY2VzIjpbIi9Vc2Vycy9zdGVmYW5iZWtrZXIvcHJvamVjdHMvZmFuY3ktcGxhbnRpZXMvc3JjL2FwcC9hcGkvcGxhbnRzL1tpZF0vcm91dGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmV4dFJlcXVlc3QsIE5leHRSZXNwb25zZSB9IGZyb20gJ25leHQvc2VydmVyJztcbmltcG9ydCB7IHZhbGlkYXRlUmVxdWVzdCB9IGZyb20gJ0AvbGliL2F1dGgvc2VydmVyJztcbmltcG9ydCB7IFxuICBnZXRQbGFudEJ5SWQsIFxuICB1cGRhdGVQbGFudCwgXG4gIGRlbGV0ZVBsYW50IFxufSBmcm9tICdAL2xpYi9kYi9xdWVyaWVzL3BsYW50LXRheG9ub215JztcbmltcG9ydCB7IHVwZGF0ZVBsYW50U2NoZW1hIH0gZnJvbSAnQC9saWIvdmFsaWRhdGlvbi9wbGFudC1zY2hlbWFzJztcbmltcG9ydCB7IFpvZEVycm9yIH0gZnJvbSAnem9kJztcblxuLy8gR0VUIC9hcGkvcGxhbnRzL1tpZF0gLSBHZXQgcGxhbnQgYnkgSURcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBHRVQoXG4gIHJlcXVlc3Q6IE5leHRSZXF1ZXN0LFxuICB7IHBhcmFtcyB9OiB7IHBhcmFtczogUHJvbWlzZTx7IGlkOiBzdHJpbmcgfT4gfVxuKSB7XG4gIHRyeSB7XG4gICAgY29uc3QgeyB1c2VyIH0gPSBhd2FpdCB2YWxpZGF0ZVJlcXVlc3QoKTtcbiAgICBpZiAoIXVzZXIpIHtcbiAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7IGVycm9yOiAnVW5hdXRob3JpemVkJyB9LCB7IHN0YXR1czogNDAxIH0pO1xuICAgIH1cblxuICAgIGNvbnN0IHsgaWQgfSA9IGF3YWl0IHBhcmFtcztcbiAgICBjb25zdCBwbGFudElkID0gcGFyc2VJbnQoaWQsIDEwKTtcbiAgICBpZiAoaXNOYU4ocGxhbnRJZCkpIHtcbiAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7IGVycm9yOiAnSW52YWxpZCBwbGFudCBJRCcgfSwgeyBzdGF0dXM6IDQwMCB9KTtcbiAgICB9XG5cbiAgICBjb25zdCBwbGFudCA9IGF3YWl0IGdldFBsYW50QnlJZChwbGFudElkKTtcbiAgICBpZiAoIXBsYW50KSB7XG4gICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oeyBlcnJvcjogJ1BsYW50IG5vdCBmb3VuZCcgfSwgeyBzdGF0dXM6IDQwNCB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oe1xuICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgIGRhdGE6IHBsYW50LFxuICAgICAgbWV0YWRhdGE6IHtcbiAgICAgICAgb3BlcmF0aW9uOiAnZ2V0JyxcbiAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLFxuICAgICAgICB1c2VySWQ6IHVzZXIuaWQsXG4gICAgICB9LFxuICAgIH0pO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGZldGNoaW5nIHBsYW50OicsIGVycm9yKTtcbiAgICBcbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXG4gICAgICB7IGVycm9yOiAnSW50ZXJuYWwgc2VydmVyIGVycm9yJyB9LCBcbiAgICAgIHsgc3RhdHVzOiA1MDAgfVxuICAgICk7XG4gIH1cbn1cblxuLy8gUFVUIC9hcGkvcGxhbnRzL1tpZF0gLSBVcGRhdGUgcGxhbnRcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBQVVQoXG4gIHJlcXVlc3Q6IE5leHRSZXF1ZXN0LFxuICB7IHBhcmFtcyB9OiB7IHBhcmFtczogUHJvbWlzZTx7IGlkOiBzdHJpbmcgfT4gfVxuKSB7XG4gIHRyeSB7XG4gICAgY29uc3QgeyB1c2VyIH0gPSBhd2FpdCB2YWxpZGF0ZVJlcXVlc3QoKTtcbiAgICBpZiAoIXVzZXIpIHtcbiAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7IGVycm9yOiAnVW5hdXRob3JpemVkJyB9LCB7IHN0YXR1czogNDAxIH0pO1xuICAgIH1cblxuICAgIGNvbnN0IHsgaWQgfSA9IGF3YWl0IHBhcmFtcztcbiAgICBjb25zdCBwbGFudElkID0gcGFyc2VJbnQoaWQsIDEwKTtcbiAgICBpZiAoaXNOYU4ocGxhbnRJZCkpIHtcbiAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7IGVycm9yOiAnSW52YWxpZCBwbGFudCBJRCcgfSwgeyBzdGF0dXM6IDQwMCB9KTtcbiAgICB9XG5cbiAgICBjb25zdCBib2R5ID0gYXdhaXQgcmVxdWVzdC5qc29uKCk7XG4gICAgY29uc3QgdmFsaWRhdGVkRGF0YSA9IHVwZGF0ZVBsYW50U2NoZW1hLnBhcnNlKHtcbiAgICAgIC4uLmJvZHksXG4gICAgICBpZDogcGxhbnRJZCxcbiAgICB9KTtcblxuICAgIGNvbnN0IHVwZGF0ZWRQbGFudCA9IGF3YWl0IHVwZGF0ZVBsYW50KHZhbGlkYXRlZERhdGEpO1xuICAgIGlmICghdXBkYXRlZFBsYW50KSB7XG4gICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oeyBlcnJvcjogJ1BsYW50IG5vdCBmb3VuZCcgfSwgeyBzdGF0dXM6IDQwNCB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oe1xuICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgIGRhdGE6IHVwZGF0ZWRQbGFudCxcbiAgICAgIG1ldGFkYXRhOiB7XG4gICAgICAgIG9wZXJhdGlvbjogJ3VwZGF0ZScsXG4gICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKSxcbiAgICAgICAgdXNlcklkOiB1c2VyLmlkLFxuICAgICAgfSxcbiAgICB9KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciB1cGRhdGluZyBwbGFudDonLCBlcnJvcik7XG4gICAgXG4gICAgaWYgKGVycm9yIGluc3RhbmNlb2YgWm9kRXJyb3IpIHtcbiAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcbiAgICAgICAgeyBcbiAgICAgICAgICBlcnJvcjogJ0ludmFsaWQgcGxhbnQgZGF0YScsIFxuICAgICAgICAgIGRldGFpbHM6IGVycm9yLmlzc3VlcyBcbiAgICAgICAgfSwgXG4gICAgICAgIHsgc3RhdHVzOiA0MDAgfVxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXG4gICAgICB7IGVycm9yOiAnSW50ZXJuYWwgc2VydmVyIGVycm9yJyB9LCBcbiAgICAgIHsgc3RhdHVzOiA1MDAgfVxuICAgICk7XG4gIH1cbn1cblxuLy8gREVMRVRFIC9hcGkvcGxhbnRzL1tpZF0gLSBEZWxldGUgcGxhbnQgKG9ubHkgaWYgbm8gaW5zdGFuY2VzIGV4aXN0KVxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIERFTEVURShcbiAgcmVxdWVzdDogTmV4dFJlcXVlc3QsXG4gIHsgcGFyYW1zIH06IHsgcGFyYW1zOiBQcm9taXNlPHsgaWQ6IHN0cmluZyB9PiB9XG4pIHtcbiAgdHJ5IHtcbiAgICBjb25zdCB7IHVzZXIgfSA9IGF3YWl0IHZhbGlkYXRlUmVxdWVzdCgpO1xuICAgIGlmICghdXNlcikge1xuICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHsgZXJyb3I6ICdVbmF1dGhvcml6ZWQnIH0sIHsgc3RhdHVzOiA0MDEgfSk7XG4gICAgfVxuXG4gICAgY29uc3QgeyBpZCB9ID0gYXdhaXQgcGFyYW1zO1xuICAgIGNvbnN0IHBsYW50SWQgPSBwYXJzZUludChpZCwgMTApO1xuICAgIGlmIChpc05hTihwbGFudElkKSkge1xuICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHsgZXJyb3I6ICdJbnZhbGlkIHBsYW50IElEJyB9LCB7IHN0YXR1czogNDAwIH0pO1xuICAgIH1cblxuICAgIGNvbnN0IGRlbGV0ZWQgPSBhd2FpdCBkZWxldGVQbGFudChwbGFudElkLCB1c2VyLmlkKTtcbiAgICBpZiAoIWRlbGV0ZWQpIHtcbiAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcbiAgICAgICAgeyBlcnJvcjogJ1BsYW50IG5vdCBmb3VuZCBvciBjYW5ub3QgYmUgZGVsZXRlZCcgfSwgXG4gICAgICAgIHsgc3RhdHVzOiA0MDQgfVxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oe1xuICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgIGRhdGE6IHsgaWQ6IHBsYW50SWQsIGRlbGV0ZWQ6IHRydWUgfSxcbiAgICAgIG1ldGFkYXRhOiB7XG4gICAgICAgIG9wZXJhdGlvbjogJ2RlbGV0ZScsXG4gICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKSxcbiAgICAgICAgdXNlcklkOiB1c2VyLmlkLFxuICAgICAgfSxcbiAgICB9KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBkZWxldGluZyBwbGFudDonLCBlcnJvcik7XG4gICAgXG4gICAgaWYgKGVycm9yIGluc3RhbmNlb2YgRXJyb3IgJiYgZXJyb3IubWVzc2FnZT8uaW5jbHVkZXMoJ0Nhbm5vdCBkZWxldGUgcGxhbnQnKSkge1xuICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxuICAgICAgICB7IGVycm9yOiBlcnJvci5tZXNzYWdlIH0sIFxuICAgICAgICB7IHN0YXR1czogNDA5IH1cbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxuICAgICAgeyBlcnJvcjogJ0ludGVybmFsIHNlcnZlciBlcnJvcicgfSwgXG4gICAgICB7IHN0YXR1czogNTAwIH1cbiAgICApO1xuICB9XG59Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O01BNkdzQkEsT0FBQTtJQUFBO0lBQUFDLGFBQUEsR0FBQUMsQ0FBQTtJQUFBRCxhQUFBLEdBQUFFLENBQUE7V0FBQUgsTUFBQTs7TUFsR0FJLElBQUE7SUFBQTtJQUFBSCxhQUFBLEdBQUFDLENBQUE7SUFBQUQsYUFBQSxHQUFBRSxDQUFBO1dBQUFDLEdBQUE7O01BeUNBQyxJQUFBO0lBQUE7SUFBQUosYUFBQSxHQUFBQyxDQUFB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