5feab1f74a7cc7c30e3d2d244bf13568
"use strict";

/* istanbul ignore next */
function cov_p551prev4() {
  var path = "/Users/stefanbekker/projects/fancy-planties/src/app/api/plant-instances/bulk/route.ts";
  var hash = "b0e1560e944a1c5aaed05172bc8cfc3d7e57343c";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/stefanbekker/projects/fancy-planties/src/app/api/plant-instances/bulk/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 20
        }
      },
      "3": {
        start: {
          line: 11,
          column: 16
        },
        end: {
          line: 11,
          column: 38
        }
      },
      "4": {
        start: {
          line: 12,
          column: 24
        },
        end: {
          line: 12,
          column: 77
        }
      },
      "5": {
        start: {
          line: 13,
          column: 22
        },
        end: {
          line: 13,
          column: 73
        }
      },
      "6": {
        start: {
          line: 14,
          column: 17
        },
        end: {
          line: 14,
          column: 55
        }
      },
      "7": {
        start: {
          line: 16,
          column: 4
        },
        end: {
          line: 73,
          column: 5
        }
      },
      "8": {
        start: {
          line: 17,
          column: 25
        },
        end: {
          line: 17,
          column: 62
        }
      },
      "9": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 24,
          column: 9
        }
      },
      "10": {
        start: {
          line: 19,
          column: 12
        },
        end: {
          line: 23,
          column: 15
        }
      },
      "11": {
        start: {
          line: 25,
          column: 21
        },
        end: {
          line: 25,
          column: 41
        }
      },
      "12": {
        start: {
          line: 27,
          column: 30
        },
        end: {
          line: 27,
          column: 88
        }
      },
      "13": {
        start: {
          line: 29,
          column: 31
        },
        end: {
          line: 29,
          column: 148
        }
      },
      "14": {
        start: {
          line: 29,
          column: 90
        },
        end: {
          line: 29,
          column: 146
        }
      },
      "15": {
        start: {
          line: 31,
          column: 32
        },
        end: {
          line: 31,
          column: 34
        }
      },
      "16": {
        start: {
          line: 32,
          column: 28
        },
        end: {
          line: 32,
          column: 30
        }
      },
      "17": {
        start: {
          line: 33,
          column: 8
        },
        end: {
          line: 40,
          column: 11
        }
      },
      "18": {
        start: {
          line: 34,
          column: 23
        },
        end: {
          line: 34,
          column: 60
        }
      },
      "19": {
        start: {
          line: 35,
          column: 12
        },
        end: {
          line: 39,
          column: 13
        }
      },
      "20": {
        start: {
          line: 36,
          column: 16
        },
        end: {
          line: 36,
          column: 37
        }
      },
      "21": {
        start: {
          line: 37,
          column: 19
        },
        end: {
          line: 39,
          column: 13
        }
      },
      "22": {
        start: {
          line: 38,
          column: 16
        },
        end: {
          line: 38,
          column: 41
        }
      },
      "23": {
        start: {
          line: 41,
          column: 8
        },
        end: {
          line: 47,
          column: 9
        }
      },
      "24": {
        start: {
          line: 42,
          column: 12
        },
        end: {
          line: 46,
          column: 15
        }
      },
      "25": {
        start: {
          line: 48,
          column: 8
        },
        end: {
          line: 54,
          column: 9
        }
      },
      "26": {
        start: {
          line: 49,
          column: 12
        },
        end: {
          line: 53,
          column: 15
        }
      },
      "27": {
        start: {
          line: 56,
          column: 23
        },
        end: {
          line: 56,
          column: 94
        }
      },
      "28": {
        start: {
          line: 57,
          column: 8
        },
        end: {
          line: 57,
          column: 49
        }
      },
      "29": {
        start: {
          line: 59,
          column: 8
        },
        end: {
          line: 59,
          column: 66
        }
      },
      "30": {
        start: {
          line: 60,
          column: 8
        },
        end: {
          line: 67,
          column: 9
        }
      },
      "31": {
        start: {
          line: 61,
          column: 12
        },
        end: {
          line: 66,
          column: 15
        }
      },
      "32": {
        start: {
          line: 68,
          column: 8
        },
        end: {
          line: 72,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "POST",
        decl: {
          start: {
            line: 15,
            column: 15
          },
          end: {
            line: 15,
            column: 19
          }
        },
        loc: {
          start: {
            line: 15,
            column: 29
          },
          end: {
            line: 74,
            column: 1
          }
        },
        line: 15
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 29,
            column: 84
          },
          end: {
            line: 29,
            column: 85
          }
        },
        loc: {
          start: {
            line: 29,
            column: 90
          },
          end: {
            line: 29,
            column: 146
          }
        },
        line: 29
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 33,
            column: 31
          },
          end: {
            line: 33,
            column: 32
          }
        },
        loc: {
          start: {
            line: 33,
            column: 50
          },
          end: {
            line: 40,
            column: 9
          }
        },
        line: 33
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 18,
            column: 8
          },
          end: {
            line: 24,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 18,
            column: 8
          },
          end: {
            line: 24,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 18
      },
      "1": {
        loc: {
          start: {
            line: 35,
            column: 12
          },
          end: {
            line: 39,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 35,
            column: 12
          },
          end: {
            line: 39,
            column: 13
          }
        }, {
          start: {
            line: 37,
            column: 19
          },
          end: {
            line: 39,
            column: 13
          }
        }],
        line: 35
      },
      "2": {
        loc: {
          start: {
            line: 37,
            column: 19
          },
          end: {
            line: 39,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 37,
            column: 19
          },
          end: {
            line: 39,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 37
      },
      "3": {
        loc: {
          start: {
            line: 41,
            column: 8
          },
          end: {
            line: 47,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 41,
            column: 8
          },
          end: {
            line: 47,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 41
      },
      "4": {
        loc: {
          start: {
            line: 48,
            column: 8
          },
          end: {
            line: 54,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 48,
            column: 8
          },
          end: {
            line: 54,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 48
      },
      "5": {
        loc: {
          start: {
            line: 60,
            column: 8
          },
          end: {
            line: 67,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 60,
            column: 8
          },
          end: {
            line: 67,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 60
      },
      "6": {
        loc: {
          start: {
            line: 60,
            column: 12
          },
          end: {
            line: 60,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 60,
            column: 12
          },
          end: {
            line: 60,
            column: 34
          }
        }, {
          start: {
            line: 60,
            column: 38
          },
          end: {
            line: 60,
            column: 74
          }
        }],
        line: 60
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/stefanbekker/projects/fancy-planties/src/app/api/plant-instances/bulk/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport { PlantInstanceQueries } from '@/lib/db/queries/plant-instances';\nimport { bulkPlantInstanceOperationSchema } from '@/lib/validation/plant-schemas';\nimport { validateRequest } from '@/lib/auth/server';\n\n// POST /api/plant-instances/bulk - Perform bulk operations on plant instances\nexport async function POST(request: NextRequest) {\n  try {\n    const { user } = await validateRequest();\n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const body = await request.json();\n    \n    // Validate bulk operation data\n    const validatedData = bulkPlantInstanceOperationSchema.parse(body);\n    \n    // Verify that all plant instances belong to the current user\n    const plantInstances = await Promise.all(\n      validatedData.plantInstanceIds.map(id => PlantInstanceQueries.getEnhancedById(id))\n    );\n\n    // Check for non-existent or unauthorized plant instances\n    const unauthorizedIds: number[] = [];\n    const notFoundIds: number[] = [];\n\n    plantInstances.forEach((instance, index) => {\n      const id = validatedData.plantInstanceIds[index];\n      if (!instance) {\n        notFoundIds.push(id);\n      } else if (instance.userId !== user.id) {\n        unauthorizedIds.push(id);\n      }\n    });\n\n    if (notFoundIds.length > 0) {\n      return NextResponse.json(\n        { error: `Plant instances not found: ${notFoundIds.join(', ')}` },\n        { status: 404 }\n      );\n    }\n\n    if (unauthorizedIds.length > 0) {\n      return NextResponse.json(\n        { error: `Unauthorized access to plant instances: ${unauthorizedIds.join(', ')}` },\n        { status: 403 }\n      );\n    }\n\n    // Perform bulk operation\n    const result = await PlantInstanceQueries.bulkOperation(validatedData);\n    \n    return NextResponse.json(result);\n  } catch (error) {\n    console.error('Failed to perform bulk operation:', error);\n    \n    if (error instanceof Error && error.message.includes('validation')) {\n      return NextResponse.json(\n        { error: 'Invalid bulk operation data', details: error.message },\n        { status: 400 }\n      );\n    }\n    \n    return NextResponse.json(\n      { error: 'Failed to perform bulk operation' },\n      { status: 500 }\n    );\n  }\n}"],
      names: ["POST", "request", "user", "validateRequest", "NextResponse", "json", "error", "status", "body", "validatedData", "bulkPlantInstanceOperationSchema", "parse", "plantInstances", "Promise", "all", "plantInstanceIds", "map", "id", "PlantInstanceQueries", "getEnhancedById", "unauthorizedIds", "notFoundIds", "forEach", "instance", "index", "push", "userId", "length", "join", "result", "bulkOperation", "console", "Error", "message", "includes", "details"],
      mappings: ";;;;+BAMsBA;;;eAAAA;;;wBANoB;gCACL;8BACY;yBACjB;AAGzB,eAAeA,KAAKC,OAAoB;IAC7C,IAAI;QACF,MAAM,EAAEC,IAAI,EAAE,GAAG,MAAMC,IAAAA,wBAAe;QACtC,IAAI,CAACD,MAAM;YACT,OAAOE,oBAAY,CAACC,IAAI,CAAC;gBAAEC,OAAO;YAAe,GAAG;gBAAEC,QAAQ;YAAI;QACpE;QAEA,MAAMC,OAAO,MAAMP,QAAQI,IAAI;QAE/B,+BAA+B;QAC/B,MAAMI,gBAAgBC,8CAAgC,CAACC,KAAK,CAACH;QAE7D,6DAA6D;QAC7D,MAAMI,iBAAiB,MAAMC,QAAQC,GAAG,CACtCL,cAAcM,gBAAgB,CAACC,GAAG,CAACC,CAAAA,KAAMC,oCAAoB,CAACC,eAAe,CAACF;QAGhF,yDAAyD;QACzD,MAAMG,kBAA4B,EAAE;QACpC,MAAMC,cAAwB,EAAE;QAEhCT,eAAeU,OAAO,CAAC,CAACC,UAAUC;YAChC,MAAMP,KAAKR,cAAcM,gBAAgB,CAACS,MAAM;YAChD,IAAI,CAACD,UAAU;gBACbF,YAAYI,IAAI,CAACR;YACnB,OAAO,IAAIM,SAASG,MAAM,KAAKxB,KAAKe,EAAE,EAAE;gBACtCG,gBAAgBK,IAAI,CAACR;YACvB;QACF;QAEA,IAAII,YAAYM,MAAM,GAAG,GAAG;YAC1B,OAAOvB,oBAAY,CAACC,IAAI,CACtB;gBAAEC,OAAO,CAAC,2BAA2B,EAAEe,YAAYO,IAAI,CAAC,OAAO;YAAC,GAChE;gBAAErB,QAAQ;YAAI;QAElB;QAEA,IAAIa,gBAAgBO,MAAM,GAAG,GAAG;YAC9B,OAAOvB,oBAAY,CAACC,IAAI,CACtB;gBAAEC,OAAO,CAAC,wCAAwC,EAAEc,gBAAgBQ,IAAI,CAAC,OAAO;YAAC,GACjF;gBAAErB,QAAQ;YAAI;QAElB;QAEA,yBAAyB;QACzB,MAAMsB,SAAS,MAAMX,oCAAoB,CAACY,aAAa,CAACrB;QAExD,OAAOL,oBAAY,CAACC,IAAI,CAACwB;IAC3B,EAAE,OAAOvB,OAAO;QACdyB,QAAQzB,KAAK,CAAC,qCAAqCA;QAEnD,IAAIA,iBAAiB0B,SAAS1B,MAAM2B,OAAO,CAACC,QAAQ,CAAC,eAAe;YAClE,OAAO9B,oBAAY,CAACC,IAAI,CACtB;gBAAEC,OAAO;gBAA+B6B,SAAS7B,MAAM2B,OAAO;YAAC,GAC/D;gBAAE1B,QAAQ;YAAI;QAElB;QAEA,OAAOH,oBAAY,CAACC,IAAI,CACtB;YAAEC,OAAO;QAAmC,GAC5C;YAAEC,QAAQ;QAAI;IAElB;AACF"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "b0e1560e944a1c5aaed05172bc8cfc3d7e57343c"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_p551prev4 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_p551prev4();
cov_p551prev4().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_p551prev4().s[1]++;
Object.defineProperty(exports, "POST", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_p551prev4().f[0]++;
    cov_p551prev4().s[2]++;
    return POST;
  }
});
const _server =
/* istanbul ignore next */
(cov_p551prev4().s[3]++, require("next/server"));
const _plantinstances =
/* istanbul ignore next */
(cov_p551prev4().s[4]++, require("../../../../lib/db/queries/plant-instances"));
const _plantschemas =
/* istanbul ignore next */
(cov_p551prev4().s[5]++, require("../../../../lib/validation/plant-schemas"));
const _server1 =
/* istanbul ignore next */
(cov_p551prev4().s[6]++, require("../../../../lib/auth/server"));
async function POST(request) {
  /* istanbul ignore next */
  cov_p551prev4().f[1]++;
  cov_p551prev4().s[7]++;
  try {
    const {
      user
    } =
    /* istanbul ignore next */
    (cov_p551prev4().s[8]++, await (0, _server1.validateRequest)());
    /* istanbul ignore next */
    cov_p551prev4().s[9]++;
    if (!user) {
      /* istanbul ignore next */
      cov_p551prev4().b[0][0]++;
      cov_p551prev4().s[10]++;
      return _server.NextResponse.json({
        error: 'Unauthorized'
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_p551prev4().b[0][1]++;
    }
    const body =
    /* istanbul ignore next */
    (cov_p551prev4().s[11]++, await request.json());
    // Validate bulk operation data
    const validatedData =
    /* istanbul ignore next */
    (cov_p551prev4().s[12]++, _plantschemas.bulkPlantInstanceOperationSchema.parse(body));
    // Verify that all plant instances belong to the current user
    const plantInstances =
    /* istanbul ignore next */
    (cov_p551prev4().s[13]++, await Promise.all(validatedData.plantInstanceIds.map(id => {
      /* istanbul ignore next */
      cov_p551prev4().f[2]++;
      cov_p551prev4().s[14]++;
      return _plantinstances.PlantInstanceQueries.getEnhancedById(id);
    })));
    // Check for non-existent or unauthorized plant instances
    const unauthorizedIds =
    /* istanbul ignore next */
    (cov_p551prev4().s[15]++, []);
    const notFoundIds =
    /* istanbul ignore next */
    (cov_p551prev4().s[16]++, []);
    /* istanbul ignore next */
    cov_p551prev4().s[17]++;
    plantInstances.forEach((instance, index) => {
      /* istanbul ignore next */
      cov_p551prev4().f[3]++;
      const id =
      /* istanbul ignore next */
      (cov_p551prev4().s[18]++, validatedData.plantInstanceIds[index]);
      /* istanbul ignore next */
      cov_p551prev4().s[19]++;
      if (!instance) {
        /* istanbul ignore next */
        cov_p551prev4().b[1][0]++;
        cov_p551prev4().s[20]++;
        notFoundIds.push(id);
      } else {
        /* istanbul ignore next */
        cov_p551prev4().b[1][1]++;
        cov_p551prev4().s[21]++;
        if (instance.userId !== user.id) {
          /* istanbul ignore next */
          cov_p551prev4().b[2][0]++;
          cov_p551prev4().s[22]++;
          unauthorizedIds.push(id);
        } else
        /* istanbul ignore next */
        {
          cov_p551prev4().b[2][1]++;
        }
      }
    });
    /* istanbul ignore next */
    cov_p551prev4().s[23]++;
    if (notFoundIds.length > 0) {
      /* istanbul ignore next */
      cov_p551prev4().b[3][0]++;
      cov_p551prev4().s[24]++;
      return _server.NextResponse.json({
        error: `Plant instances not found: ${notFoundIds.join(', ')}`
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_p551prev4().b[3][1]++;
    }
    cov_p551prev4().s[25]++;
    if (unauthorizedIds.length > 0) {
      /* istanbul ignore next */
      cov_p551prev4().b[4][0]++;
      cov_p551prev4().s[26]++;
      return _server.NextResponse.json({
        error: `Unauthorized access to plant instances: ${unauthorizedIds.join(', ')}`
      }, {
        status: 403
      });
    } else
    /* istanbul ignore next */
    {
      cov_p551prev4().b[4][1]++;
    }
    // Perform bulk operation
    const result =
    /* istanbul ignore next */
    (cov_p551prev4().s[27]++, await _plantinstances.PlantInstanceQueries.bulkOperation(validatedData));
    /* istanbul ignore next */
    cov_p551prev4().s[28]++;
    return _server.NextResponse.json(result);
  } catch (error) {
    /* istanbul ignore next */
    cov_p551prev4().s[29]++;
    console.error('Failed to perform bulk operation:', error);
    /* istanbul ignore next */
    cov_p551prev4().s[30]++;
    if (
    /* istanbul ignore next */
    (cov_p551prev4().b[6][0]++, error instanceof Error) &&
    /* istanbul ignore next */
    (cov_p551prev4().b[6][1]++, error.message.includes('validation'))) {
      /* istanbul ignore next */
      cov_p551prev4().b[5][0]++;
      cov_p551prev4().s[31]++;
      return _server.NextResponse.json({
        error: 'Invalid bulk operation data',
        details: error.message
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_p551prev4().b[5][1]++;
    }
    cov_p551prev4().s[32]++;
    return _server.NextResponse.json({
      error: 'Failed to perform bulk operation'
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,