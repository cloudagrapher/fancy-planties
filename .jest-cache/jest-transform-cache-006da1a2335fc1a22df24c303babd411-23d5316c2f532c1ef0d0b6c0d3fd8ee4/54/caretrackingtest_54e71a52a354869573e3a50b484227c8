b580fe5fe21c107cd5071b94a98933ce
// Care Tracking Integration Tests
// Tests complete care record creation, history viewing, and statistics workflows
"use strict";
// Mock hooks
jest.mock('@/hooks/useOffline', ()=>({
        useOffline: ()=>({
                isOnline: true,
                addPendingCareEntry: jest.fn()
            })
    }));
jest.mock('@/lib/utils/service-worker', ()=>({
        useServiceWorker: ()=>({
                registerBackgroundSync: jest.fn()
            })
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("@testing-library/react");
const _testutils = require("../../test-utils");
const _apihelpers = require("../../test-utils/helpers/api-helpers.js");
const _userfactory = require("../../test-utils/factories/user-factory.js");
const _plantfactory = require("../../test-utils/factories/plant-factory.js");
const _carefactory = require("../../test-utils/factories/care-factory.js");
const _QuickCareForm = /*#__PURE__*/ _interop_require_default(require("../../components/care/QuickCareForm"));
const _CareHistoryTimeline = /*#__PURE__*/ _interop_require_default(require("../../components/care/CareHistoryTimeline"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
describe('Care Tracking Integration Tests', ()=>{
    let testUser;
    let testSession;
    let testPlantInstance;
    beforeEach(()=>{
        jest.clearAllMocks();
        (0, _apihelpers.resetApiMocks)();
        // Create authenticated test user
        const authData = (0, _userfactory.createAuthenticatedTestUser)();
        testUser = authData.user;
        testSession = authData.session;
        // Create test plant instance
        testPlantInstance = (0, _plantfactory.createTestPlantInstance)({
            id: 1,
            userId: testUser.id,
            nickname: 'Test Plant'
        });
    });
    afterEach(()=>{
        (0, _apihelpers.resetApiMocks)();
    });
    describe('Care Record Creation and Logging Workflow', ()=>{
        it('should complete care logging workflow from form to database', async ()=>{
            // Arrange
            const newCareRecord = (0, _carefactory.createTestCareRecord)({
                id: 1,
                plantInstanceId: testPlantInstance.id,
                careType: 'fertilizer',
                careDate: new Date(),
                notes: 'Applied liquid fertilizer',
                userId: testUser.id
            });
            (0, _apihelpers.mockApiResponse)({
                'POST /api/care/log': {
                    status: 200,
                    data: newCareRecord
                }
            });
            const mockOnSuccess = jest.fn();
            const { user } = (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_QuickCareForm.default, {
                plantInstanceId: testPlantInstance.id,
                onSuccess: mockOnSuccess,
                defaultCareType: "fertilizer"
            }));
            // Act - Fill out care form
            const notesField = _react.screen.getByLabelText(/notes/i);
            await user.type(notesField, 'Applied liquid fertilizer');
            // Select fertilizer care type (should be default)
            const fertilizerButton = _react.screen.getByRole('button', {
                name: /fertilizer/i
            });
            await user.click(fertilizerButton);
            // Submit form
            const submitButton = _react.screen.getByRole('button', {
                name: /log care/i
            });
            await user.click(submitButton);
            // Assert - Verify API call was made with correct data
            await (0, _react.waitFor)(()=>{
                expect(global.fetch).toHaveBeenCalledWith('/api/care/log', expect.objectContaining({
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: expect.stringContaining('fertilizer')
                }));
            });
            // Assert - Verify success callback was called
            await (0, _react.waitFor)(()=>{
                expect(mockOnSuccess).toHaveBeenCalled();
            });
        });
        it('should handle care logging validation errors', async ()=>{
            // Arrange
            (0, _apihelpers.mockApiResponse)({
                'POST /api/care/log': {
                    status: 400,
                    data: {
                        error: 'Care date cannot be in the future'
                    }
                }
            });
            const { user } = (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_QuickCareForm.default, {
                plantInstanceId: testPlantInstance.id
            }));
            // Act - Set future date
            const dateField = _react.screen.getByLabelText(/care date/i);
            const futureDate = new Date();
            futureDate.setDate(futureDate.getDate() + 1);
            const futureDateString = futureDate.toISOString().split('T')[0];
            await user.clear(dateField);
            await user.type(dateField, futureDateString);
            // Submit form
            const submitButton = _react.screen.getByRole('button', {
                name: /log care/i
            });
            await user.click(submitButton);
            // Assert - Verify error message is displayed
            await (0, _react.waitFor)(()=>{
                expect(_react.screen.getByText(/care date cannot be in the future/i)).toBeInTheDocument();
            });
        });
        it('should handle different care types with specific fields', async ()=>{
            // Arrange
            const repotCareRecord = (0, _carefactory.createTestCareRecord)({
                careType: 'repot',
                potSize: '6 inch',
                soilType: 'Potting mix'
            });
            (0, _apihelpers.mockApiResponse)({
                'POST /api/care/log': {
                    status: 200,
                    data: repotCareRecord
                }
            });
            const { user } = (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_QuickCareForm.default, {
                plantInstanceId: testPlantInstance.id
            }));
            // Act - Select repot care type
            const repotButton = _react.screen.getByRole('button', {
                name: /repot/i
            });
            await user.click(repotButton);
            // Fill repot-specific fields
            await (0, _react.waitFor)(()=>{
                expect(_react.screen.getByLabelText(/pot size/i)).toBeInTheDocument();
            });
            const potSizeField = _react.screen.getByLabelText(/pot size/i);
            await user.type(potSizeField, '6 inch');
            const soilTypeField = _react.screen.getByLabelText(/soil type/i);
            await user.type(soilTypeField, 'Potting mix');
            // Submit form
            const submitButton = _react.screen.getByRole('button', {
                name: /log care/i
            });
            await user.click(submitButton);
            // Assert - Verify API call includes repot-specific data
            await (0, _react.waitFor)(()=>{
                expect(global.fetch).toHaveBeenCalledWith('/api/care/log', expect.objectContaining({
                    body: expect.stringContaining('repot')
                }));
            });
        });
        it('should handle offline care logging with queue', async ()=>{
            // Arrange - Mock offline state
            const mockAddPendingCareEntry = jest.fn(()=>'pending-123');
            const mockRegisterBackgroundSync = jest.fn();
            jest.doMock('@/hooks/useOffline', ()=>({
                    useOffline: ()=>({
                            isOnline: false,
                            addPendingCareEntry: mockAddPendingCareEntry
                        })
                }));
            jest.doMock('@/lib/utils/service-worker', ()=>({
                    useServiceWorker: ()=>({
                            registerBackgroundSync: mockRegisterBackgroundSync
                        })
                }));
            const { user } = (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_QuickCareForm.default, {
                plantInstanceId: testPlantInstance.id
            }));
            // Assert - Verify offline indicator is shown
            expect(_react.screen.getByText(/offline mode/i)).toBeInTheDocument();
            // Act - Submit care form while offline
            const submitButton = _react.screen.getByRole('button', {
                name: /queue for sync/i
            });
            await user.click(submitButton);
            // Assert - Verify offline handling
            await (0, _react.waitFor)(()=>{
                expect(mockAddPendingCareEntry).toHaveBeenCalled();
                expect(mockRegisterBackgroundSync).toHaveBeenCalled();
            });
            // Assert - Verify no API call was made
            expect(global.fetch).not.toHaveBeenCalled();
        });
        it('should handle care logging server errors gracefully', async ()=>{
            // Arrange
            (0, _apihelpers.mockApiError)('/api/care/log', 500, {
                error: 'Database connection failed'
            }, 'POST');
            const { user } = (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_QuickCareForm.default, {
                plantInstanceId: testPlantInstance.id
            }));
            // Act - Submit form
            const submitButton = _react.screen.getByRole('button', {
                name: /log care/i
            });
            await user.click(submitButton);
            // Assert - Verify error message is displayed
            await (0, _react.waitFor)(()=>{
                expect(_react.screen.getByText(/database connection failed/i)).toBeInTheDocument();
            });
        });
    });
    describe('Care History Viewing and Filtering', ()=>{
        it('should display care history timeline with proper formatting', async ()=>{
            // Arrange
            const careHistory = [
                (0, _carefactory.createTestCareRecord)({
                    id: 1,
                    careType: 'fertilizer',
                    careDate: new Date('2024-01-15'),
                    notes: 'Applied liquid fertilizer',
                    formattedDate: 'Jan 15, 2024',
                    daysSinceCare: 5
                }),
                (0, _carefactory.createTestCareRecord)({
                    id: 2,
                    careType: 'water',
                    careDate: new Date('2024-01-10'),
                    notes: 'Watered thoroughly',
                    formattedDate: 'Jan 10, 2024',
                    daysSinceCare: 10
                }),
                (0, _carefactory.createTestCareRecord)({
                    id: 3,
                    careType: 'repot',
                    careDate: new Date('2024-01-01'),
                    potSize: '6 inch',
                    soilType: 'Potting mix',
                    formattedDate: 'Jan 1, 2024',
                    daysSinceCare: 19
                })
            ];
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CareHistoryTimeline.default, {
                careHistory: careHistory,
                plantInstance: testPlantInstance
            }));
            // Assert - Verify care history is displayed
            expect(_react.screen.getByText('Care History')).toBeInTheDocument();
            expect(_react.screen.getByText('Applied liquid fertilizer')).toBeInTheDocument();
            expect(_react.screen.getByText('Watered thoroughly')).toBeInTheDocument();
            expect(_react.screen.getByText('Jan 15, 2024')).toBeInTheDocument();
            expect(_react.screen.getByText('Jan 10, 2024')).toBeInTheDocument();
            // Assert - Verify repot-specific details are shown
            expect(_react.screen.getByText('Pot Size:')).toBeInTheDocument();
            expect(_react.screen.getByText('6 inch')).toBeInTheDocument();
            expect(_react.screen.getByText('Soil Type:')).toBeInTheDocument();
            expect(_react.screen.getByText('Potting mix')).toBeInTheDocument();
        });
        it('should handle empty care history gracefully', async ()=>{
            // Arrange
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CareHistoryTimeline.default, {
                careHistory: [],
                plantInstance: testPlantInstance
            }));
            // Assert - Verify empty state is displayed
            expect(_react.screen.getByText('No Care History')).toBeInTheDocument();
            expect(_react.screen.getByText(/start logging care activities/i)).toBeInTheDocument();
        });
        it('should fetch and display care history from API', async ()=>{
            // Arrange
            const careHistory = [
                (0, _carefactory.createTestCareRecord)({
                    id: 1,
                    careType: 'fertilizer',
                    formattedDate: 'Today',
                    daysSinceCare: 0
                })
            ];
            (0, _apihelpers.mockApiResponse)({
                'GET /api/care/history/1': {
                    status: 200,
                    data: careHistory
                }
            });
            // Mock a component that fetches care history
            const CareHistoryContainer = ()=>{
                const [history, setHistory] = React.useState([]);
                const [loading, setLoading] = React.useState(true);
                React.useEffect(()=>{
                    const fetchHistory = async ()=>{
                        try {
                            const response = await fetch(`/api/care/history/${testPlantInstance.id}`);
                            const data = await response.json();
                            setHistory(data);
                        } catch (error) {
                            console.error('Failed to fetch care history:', error);
                        } finally{
                            setLoading(false);
                        }
                    };
                    fetchHistory();
                }, []);
                if (loading) return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    children: "Loading..."
                });
                return /*#__PURE__*/ (0, _jsxruntime.jsx)(_CareHistoryTimeline.default, {
                    careHistory: history,
                    plantInstance: testPlantInstance
                });
            };
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(CareHistoryContainer, {}));
            // Assert - Verify API call was made
            await (0, _react.waitFor)(()=>{
                expect(global.fetch).toHaveBeenCalledWith(`/api/care/history/${testPlantInstance.id}`);
            });
            // Assert - Verify care history is displayed
            await (0, _react.waitFor)(()=>{
                expect(_react.screen.getByText('Care History')).toBeInTheDocument();
            });
        });
        it('should handle care history API errors', async ()=>{
            // Arrange
            (0, _apihelpers.mockApiError)('/api/care/history/1', 500, {
                error: 'Failed to fetch care history'
            });
            const CareHistoryContainer = ()=>{
                const [history, setHistory] = React.useState([]);
                const [error, setError] = React.useState(null);
                React.useEffect(()=>{
                    const fetchHistory = async ()=>{
                        try {
                            const response = await fetch(`/api/care/history/${testPlantInstance.id}`);
                            if (!response.ok) {
                                const errorData = await response.json();
                                throw new Error(errorData.error);
                            }
                            const data = await response.json();
                            setHistory(data);
                        } catch (err) {
                            setError(err.message);
                        }
                    };
                    fetchHistory();
                }, []);
                if (error) return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    children: [
                        "Error: ",
                        error
                    ]
                });
                return /*#__PURE__*/ (0, _jsxruntime.jsx)(_CareHistoryTimeline.default, {
                    careHistory: history,
                    plantInstance: testPlantInstance
                });
            };
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(CareHistoryContainer, {}));
            // Assert - Verify error is displayed
            await (0, _react.waitFor)(()=>{
                expect(_react.screen.getByText(/failed to fetch care history/i)).toBeInTheDocument();
            });
        });
        it('should limit displayed care history when limit is specified', async ()=>{
            // Arrange
            const careHistory = Array.from({
                length: 15
            }, (_, index)=>(0, _carefactory.createTestCareRecord)({
                    id: index + 1,
                    careType: 'water',
                    formattedDate: `Day ${index + 1}`,
                    daysSinceCare: index + 1
                }));
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CareHistoryTimeline.default, {
                careHistory: careHistory,
                plantInstance: testPlantInstance,
                limit: 5
            }));
            // Assert - Verify only limited items are shown
            expect(_react.screen.getByText('Day 1')).toBeInTheDocument();
            expect(_react.screen.getByText('Day 5')).toBeInTheDocument();
            expect(_react.screen.queryByText('Day 6')).not.toBeInTheDocument();
            // Assert - Verify limit indicator is shown
            expect(_react.screen.getByText(/showing 5 of 15 care events/i)).toBeInTheDocument();
        });
    });
    describe('Care Statistics Calculation and Display', ()=>{
        it('should fetch and display care dashboard statistics', async ()=>{
            // Arrange
            const dashboardData = {
                totalPlants: 5,
                plantsNeedingCare: 2,
                overduePlants: 1,
                recentCareActivities: 8,
                careStats: {
                    fertilizer: {
                        count: 15,
                        lastDate: '2024-01-15'
                    },
                    water: {
                        count: 25,
                        lastDate: '2024-01-18'
                    },
                    repot: {
                        count: 3,
                        lastDate: '2024-01-01'
                    }
                },
                upcomingCare: [
                    {
                        plantInstanceId: 1,
                        nickname: 'Test Plant',
                        careType: 'fertilizer',
                        dueDate: '2024-01-20',
                        daysUntilDue: 2
                    }
                ]
            };
            (0, _apihelpers.mockApiResponse)({
                'GET /api/care/dashboard': {
                    status: 200,
                    data: dashboardData
                }
            });
            // Mock a dashboard component
            const CareDashboard = ()=>{
                const [dashboard, setDashboard] = React.useState(null);
                const [loading, setLoading] = React.useState(true);
                React.useEffect(()=>{
                    const fetchDashboard = async ()=>{
                        try {
                            const response = await fetch('/api/care/dashboard');
                            const data = await response.json();
                            setDashboard(data);
                        } catch (error) {
                            console.error('Failed to fetch dashboard:', error);
                        } finally{
                            setLoading(false);
                        }
                    };
                    fetchDashboard();
                }, []);
                if (loading) return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    children: "Loading dashboard..."
                });
                if (!dashboard) return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    children: "No data"
                });
                return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("h2", {
                            children: "Care Dashboard"
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                            children: [
                                "Total Plants: ",
                                dashboard.totalPlants
                            ]
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                            children: [
                                "Plants Needing Care: ",
                                dashboard.plantsNeedingCare
                            ]
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                            children: [
                                "Overdue Plants: ",
                                dashboard.overduePlants
                            ]
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                            children: [
                                "Recent Activities: ",
                                dashboard.recentCareActivities
                            ]
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                            children: [
                                /*#__PURE__*/ (0, _jsxruntime.jsx)("h3", {
                                    children: "Care Statistics"
                                }),
                                /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                    children: [
                                        "Fertilizer: ",
                                        dashboard.careStats.fertilizer.count,
                                        " times"
                                    ]
                                }),
                                /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                    children: [
                                        "Water: ",
                                        dashboard.careStats.water.count,
                                        " times"
                                    ]
                                }),
                                /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                    children: [
                                        "Repot: ",
                                        dashboard.careStats.repot.count,
                                        " times"
                                    ]
                                })
                            ]
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                            children: [
                                /*#__PURE__*/ (0, _jsxruntime.jsx)("h3", {
                                    children: "Upcoming Care"
                                }),
                                dashboard.upcomingCare.map((care)=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                        children: [
                                            care.nickname,
                                            " needs ",
                                            care.careType,
                                            " in ",
                                            care.daysUntilDue,
                                            " days"
                                        ]
                                    }, care.plantInstanceId))
                            ]
                        })
                    ]
                });
            };
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(CareDashboard, {}));
            // Assert - Verify API call was made
            await (0, _react.waitFor)(()=>{
                expect(global.fetch).toHaveBeenCalledWith('/api/care/dashboard');
            });
            // Assert - Verify dashboard data is displayed
            await (0, _react.waitFor)(()=>{
                expect(_react.screen.getByText('Care Dashboard')).toBeInTheDocument();
                expect(_react.screen.getByText('Total Plants: 5')).toBeInTheDocument();
                expect(_react.screen.getByText('Plants Needing Care: 2')).toBeInTheDocument();
                expect(_react.screen.getByText('Overdue Plants: 1')).toBeInTheDocument();
                expect(_react.screen.getByText('Recent Activities: 8')).toBeInTheDocument();
            });
            // Assert - Verify care statistics are displayed
            await (0, _react.waitFor)(()=>{
                expect(_react.screen.getByText('Fertilizer: 15 times')).toBeInTheDocument();
                expect(_react.screen.getByText('Water: 25 times')).toBeInTheDocument();
                expect(_react.screen.getByText('Repot: 3 times')).toBeInTheDocument();
            });
            // Assert - Verify upcoming care is displayed
            await (0, _react.waitFor)(()=>{
                expect(_react.screen.getByText(/test plant needs fertilizer in 2 days/i)).toBeInTheDocument();
            });
        });
        it('should handle care dashboard API errors', async ()=>{
            // Arrange
            (0, _apihelpers.mockApiError)('/api/care/dashboard', 500, {
                error: 'Failed to calculate statistics'
            });
            const CareDashboard = ()=>{
                const [error, setError] = React.useState(null);
                React.useEffect(()=>{
                    const fetchDashboard = async ()=>{
                        try {
                            const response = await fetch('/api/care/dashboard');
                            if (!response.ok) {
                                const errorData = await response.json();
                                throw new Error(errorData.error);
                            }
                        } catch (err) {
                            setError(err.message);
                        }
                    };
                    fetchDashboard();
                }, []);
                if (error) return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    children: [
                        "Dashboard Error: ",
                        error
                    ]
                });
                return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    children: "Loading..."
                });
            };
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(CareDashboard, {}));
            // Assert - Verify error is displayed
            await (0, _react.waitFor)(()=>{
                expect(_react.screen.getByText(/failed to calculate statistics/i)).toBeInTheDocument();
            });
        });
        it('should calculate care frequency statistics correctly', async ()=>{
            // Arrange
            const careHistory = [
                (0, _carefactory.createTestCareRecord)({
                    careType: 'fertilizer',
                    careDate: new Date('2024-01-01')
                }),
                (0, _carefactory.createTestCareRecord)({
                    careType: 'fertilizer',
                    careDate: new Date('2024-01-15')
                }),
                (0, _carefactory.createTestCareRecord)({
                    careType: 'water',
                    careDate: new Date('2024-01-05')
                }),
                (0, _carefactory.createTestCareRecord)({
                    careType: 'water',
                    careDate: new Date('2024-01-10')
                }),
                (0, _carefactory.createTestCareRecord)({
                    careType: 'water',
                    careDate: new Date('2024-01-15')
                })
            ];
            // Mock a statistics calculator component
            const CareStatistics = ({ careHistory })=>{
                const calculateStats = (history)=>{
                    const stats = {};
                    history.forEach((care)=>{
                        if (!stats[care.careType]) {
                            stats[care.careType] = {
                                count: 0,
                                dates: []
                            };
                        }
                        stats[care.careType].count++;
                        stats[care.careType].dates.push(care.careDate);
                    });
                    return stats;
                };
                const stats = calculateStats(careHistory);
                return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("h3", {
                            children: "Care Statistics"
                        }),
                        Object.entries(stats).map(([careType, data])=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                children: [
                                    careType,
                                    ": ",
                                    data.count,
                                    " times"
                                ]
                            }, careType))
                    ]
                });
            };
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(CareStatistics, {
                careHistory: careHistory
            }));
            // Assert - Verify statistics are calculated correctly
            expect(_react.screen.getByText('fertilizer: 2 times')).toBeInTheDocument();
            expect(_react.screen.getByText('water: 3 times')).toBeInTheDocument();
        });
    });
    describe('End-to-End Care Tracking Flow', ()=>{
        it('should complete full care tracking cycle: log -> view history -> check statistics', async ()=>{
            // Step 1: Log care
            const newCareRecord = (0, _carefactory.createTestCareRecord)({
                id: 1,
                plantInstanceId: testPlantInstance.id,
                careType: 'fertilizer'
            });
            (0, _apihelpers.mockApiResponse)({
                'POST /api/care/log': {
                    status: 200,
                    data: newCareRecord
                }
            });
            const { user, rerender } = (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_QuickCareForm.default, {
                plantInstanceId: testPlantInstance.id
            }));
            // Log care
            const submitButton = _react.screen.getByRole('button', {
                name: /log care/i
            });
            await user.click(submitButton);
            await (0, _react.waitFor)(()=>{
                expect(global.fetch).toHaveBeenCalledWith('/api/care/log', expect.objectContaining({
                    method: 'POST'
                }));
            });
            // Reset mocks for history step
            jest.clearAllMocks();
            // Step 2: View care history
            (0, _apihelpers.mockApiResponse)({
                'GET /api/care/history/1': {
                    status: 200,
                    data: [
                        newCareRecord
                    ]
                }
            });
            const CareHistoryContainer = ()=>{
                const [history, setHistory] = React.useState([]);
                React.useEffect(()=>{
                    const fetchHistory = async ()=>{
                        const response = await fetch(`/api/care/history/${testPlantInstance.id}`);
                        const data = await response.json();
                        setHistory(data);
                    };
                    fetchHistory();
                }, []);
                return /*#__PURE__*/ (0, _jsxruntime.jsx)(_CareHistoryTimeline.default, {
                    careHistory: history,
                    plantInstance: testPlantInstance
                });
            };
            rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(CareHistoryContainer, {}));
            await (0, _react.waitFor)(()=>{
                expect(global.fetch).toHaveBeenCalledWith(`/api/care/history/${testPlantInstance.id}`);
            });
            // Reset mocks for dashboard step
            jest.clearAllMocks();
            // Step 3: Check dashboard statistics
            (0, _apihelpers.mockApiResponse)({
                'GET /api/care/dashboard': {
                    status: 200,
                    data: {
                        totalPlants: 1,
                        recentCareActivities: 1,
                        careStats: {
                            fertilizer: {
                                count: 1,
                                lastDate: newCareRecord.careDate
                            }
                        }
                    }
                }
            });
            const CareDashboard = ()=>{
                const [dashboard, setDashboard] = React.useState(null);
                React.useEffect(()=>{
                    const fetchDashboard = async ()=>{
                        const response = await fetch('/api/care/dashboard');
                        const data = await response.json();
                        setDashboard(data);
                    };
                    fetchDashboard();
                }, []);
                if (!dashboard) return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    children: "Loading..."
                });
                return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                            children: [
                                "Recent Activities: ",
                                dashboard.recentCareActivities
                            ]
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                            children: [
                                "Fertilizer Count: ",
                                dashboard.careStats.fertilizer.count
                            ]
                        })
                    ]
                });
            };
            rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(CareDashboard, {}));
            await (0, _react.waitFor)(()=>{
                expect(global.fetch).toHaveBeenCalledWith('/api/care/dashboard');
            });
            await (0, _react.waitFor)(()=>{
                expect(_react.screen.getByText('Recent Activities: 1')).toBeInTheDocument();
                expect(_react.screen.getByText('Fertilizer Count: 1')).toBeInTheDocument();
            });
        });
        it('should handle care tracking with multiple plants and care types', async ()=>{
            // Arrange
            const multiPlantCareHistory = [
                (0, _carefactory.createTestCareRecord)({
                    id: 1,
                    plantInstanceId: 1,
                    careType: 'fertilizer',
                    plantInstance: {
                        nickname: 'Plant 1'
                    }
                }),
                (0, _carefactory.createTestCareRecord)({
                    id: 2,
                    plantInstanceId: 2,
                    careType: 'water',
                    plantInstance: {
                        nickname: 'Plant 2'
                    }
                })
            ];
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CareHistoryTimeline.default, {
                careHistory: multiPlantCareHistory,
                plantInstance: testPlantInstance,
                showPlantName: true
            }));
            // Assert - Verify multiple plants are shown
            expect(_react.screen.getByText(/plant 1/i)).toBeInTheDocument();
            expect(_react.screen.getByText(/plant 2/i)).toBeInTheDocument();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,