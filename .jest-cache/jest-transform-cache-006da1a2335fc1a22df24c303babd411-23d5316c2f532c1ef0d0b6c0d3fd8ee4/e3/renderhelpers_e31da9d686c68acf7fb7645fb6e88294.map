{"version":3,"sources":["/Users/stefanbekker/projects/fancy-planties/src/test-utils/helpers/render-helpers.js"],"sourcesContent":["// Component render test helpers\n\nimport React from 'react';\nimport { render, screen, waitFor } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { UserProvider } from '@/components/auth/UserProvider';\nimport { createTestUser, createAuthenticatedTestUser } from '../factories/user-factory';\n\n// Mock Next.js router\nconst mockRouter = {\n  push: jest.fn(),\n  replace: jest.fn(),\n  back: jest.fn(),\n  forward: jest.fn(),\n  refresh: jest.fn(),\n  prefetch: jest.fn(),\n  pathname: '/',\n  route: '/',\n  query: {},\n  asPath: '/',\n  basePath: '',\n  isLocaleDomain: true,\n  isReady: true,\n  isPreview: false,\n};\n\n// Mock useRouter hook\njest.mock('next/navigation', () => ({\n  useRouter: () => mockRouter,\n  usePathname: () => '/',\n  useSearchParams: () => new URLSearchParams(),\n}));\n\n/**\n * Creates a test QueryClient with optimized settings for testing\n * @returns {QueryClient} Configured QueryClient for testing\n */\nexport const createTestQueryClient = () => {\n  return new QueryClient({\n    defaultOptions: {\n      queries: {\n        retry: false,\n        gcTime: 0,\n        staleTime: 0,\n      },\n      mutations: {\n        retry: false,\n      },\n    },\n    logger: {\n      log: () => {},\n      warn: () => {},\n      error: () => {},\n    },\n  });\n};\n\n/**\n * Wrapper component that provides all necessary providers for testing\n * @param {Object} props - Wrapper props\n * @param {React.ReactNode} props.children - Child components\n * @param {Object} props.user - User object for UserProvider\n * @param {QueryClient} props.queryClient - QueryClient instance\n * @returns {JSX.Element} Wrapped component\n */\nexport const TestProviders = ({ \n  children, \n  user = null, \n  queryClient = createTestQueryClient() \n}) => {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <UserProvider user={user}>\n        {children}\n      </UserProvider>\n    </QueryClientProvider>\n  );\n};\n\n/**\n * Enhanced render function with all providers and utilities\n * @param {React.ReactElement} ui - Component to render\n * @param {Object} options - Render options\n * @param {Object} options.user - User object for authentication context\n * @param {QueryClient} options.queryClient - Custom QueryClient\n * @param {string} options.route - Initial route for router mock\n * @param {Object} options.routerMock - Custom router mock overrides\n * @param {Object} options.renderOptions - Additional render options\n * @returns {Object} Render result with additional utilities\n */\nexport const renderWithProviders = (ui, options = {}) => {\n  const {\n    user = null,\n    queryClient = createTestQueryClient(),\n    route = '/',\n    routerMock = {},\n    ...renderOptions\n  } = options;\n\n  // Update router mock with custom values\n  Object.assign(mockRouter, {\n    pathname: route,\n    asPath: route,\n    route: route,\n    ...routerMock,\n  });\n\n  // Create wrapper with providers\n  const Wrapper = ({ children }) => (\n    <TestProviders user={user} queryClient={queryClient}>\n      {children}\n    </TestProviders>\n  );\n\n  // Render component\n  const renderResult = render(ui, { wrapper: Wrapper, ...renderOptions });\n\n  // Return enhanced result with utilities\n  return {\n    ...renderResult,\n    user: userEvent.setup(),\n    queryClient,\n    router: mockRouter,\n  };\n};\n\n/**\n * Render component with authenticated user context\n * @param {React.ReactElement} ui - Component to render\n * @param {Object} options - Render options\n * @param {Object} options.userOverrides - User object overrides\n * @param {Object} options.sessionOverrides - Session object overrides\n * @returns {Object} Render result with user and session data\n */\nexport const renderWithAuthenticatedUser = (ui, options = {}) => {\n  const { userOverrides = {}, sessionOverrides = {}, ...renderOptions } = options;\n  \n  const { user, session } = createAuthenticatedTestUser(userOverrides, sessionOverrides);\n  \n  const result = renderWithProviders(ui, {\n    user,\n    ...renderOptions,\n  });\n\n  return {\n    ...result,\n    testUser: user,\n    testSession: session,\n  };\n};\n\n/**\n * Render component with curator/admin user context\n * @param {React.ReactElement} ui - Component to render\n * @param {Object} options - Render options\n * @returns {Object} Render result with curator user data\n */\nexport const renderWithCuratorUser = (ui, options = {}) => {\n  return renderWithAuthenticatedUser(ui, {\n    userOverrides: { isCurator: true },\n    ...options,\n  });\n};\n\n/**\n * Render component and wait for loading states to complete\n * @param {React.ReactElement} ui - Component to render\n * @param {Object} options - Render options\n * @returns {Object} Render result after loading completion\n */\nexport const renderAndWaitForLoading = async (ui, options = {}) => {\n  const result = renderWithProviders(ui, options);\n  \n  // Wait for any loading indicators to disappear\n  await waitFor(() => {\n    expect(screen.queryByText(/loading/i)).not.toBeInTheDocument();\n    expect(screen.queryByRole('progressbar')).not.toBeInTheDocument();\n  }, { timeout: 5000 });\n  \n  return result;\n};\n\n/**\n * Mock API responses for testing\n * @param {Object} responses - Object mapping endpoints to response data\n */\nexport const mockApiResponses = (responses) => {\n  global.fetch = jest.fn((url) => {\n    const endpoint = url.toString();\n    \n    for (const [pattern, response] of Object.entries(responses)) {\n      if (endpoint.includes(pattern)) {\n        return Promise.resolve({\n          ok: true,\n          status: 200,\n          json: () => Promise.resolve(response),\n          text: () => Promise.resolve(JSON.stringify(response)),\n        });\n      }\n    }\n    \n    // Default response for unmatched endpoints\n    return Promise.resolve({\n      ok: false,\n      status: 404,\n      json: () => Promise.resolve({ error: 'Not found' }),\n    });\n  });\n};\n\n/**\n * Mock API error responses for testing error handling\n * @param {string} endpoint - Endpoint pattern to mock\n * @param {number} status - HTTP status code\n * @param {Object} error - Error response data\n */\nexport const mockApiError = (endpoint, status = 500, error = { error: 'Internal server error' }) => {\n  global.fetch = jest.fn((url) => {\n    if (url.toString().includes(endpoint)) {\n      return Promise.resolve({\n        ok: false,\n        status,\n        json: () => Promise.resolve(error),\n        text: () => Promise.resolve(JSON.stringify(error)),\n      });\n    }\n    \n    // Call original fetch for other endpoints\n    return jest.requireActual('node-fetch')(url);\n  });\n};\n\n/**\n * Wait for element to appear with custom timeout\n * @param {Function} query - Query function (e.g., () => screen.getByText('text'))\n * @param {Object} options - Wait options\n * @returns {Promise} Promise that resolves when element appears\n */\nexport const waitForElement = async (query, options = {}) => {\n  const { timeout = 5000, interval = 50 } = options;\n  \n  return waitFor(query, { timeout, interval });\n};\n\n/**\n * Simulate user interactions with common patterns\n */\nexport const userInteractions = {\n  /**\n   * Fill out a form with provided data\n   * @param {Object} formData - Object with field names and values\n   * @param {Object} user - userEvent instance\n   */\n  fillForm: async (formData, user) => {\n    for (const [fieldName, value] of Object.entries(formData)) {\n      const field = screen.getByLabelText(new RegExp(fieldName, 'i')) || \n                   screen.getByPlaceholderText(new RegExp(fieldName, 'i')) ||\n                   screen.getByRole('textbox', { name: new RegExp(fieldName, 'i') });\n      \n      if (field) {\n        await user.clear(field);\n        await user.type(field, value);\n      }\n    }\n  },\n\n  /**\n   * Submit a form by clicking submit button\n   * @param {Object} user - userEvent instance\n   * @param {string} buttonText - Submit button text (default: 'submit')\n   */\n  submitForm: async (user, buttonText = 'submit') => {\n    const submitButton = screen.getByRole('button', { name: new RegExp(buttonText, 'i') });\n    await user.click(submitButton);\n  },\n\n  /**\n   * Navigate using router mock\n   * @param {string} path - Path to navigate to\n   */\n  navigate: (path) => {\n    mockRouter.push(path);\n  },\n\n  /**\n   * Select option from dropdown/select\n   * @param {string} selectLabel - Label of the select element\n   * @param {string} optionText - Text of the option to select\n   * @param {Object} user - userEvent instance\n   */\n  selectOption: async (selectLabel, optionText, user) => {\n    const select = screen.getByLabelText(new RegExp(selectLabel, 'i'));\n    await user.selectOptions(select, optionText);\n  },\n\n  /**\n   * Upload file to file input\n   * @param {string} inputLabel - Label of the file input\n   * @param {File} file - File object to upload\n   * @param {Object} user - userEvent instance\n   */\n  uploadFile: async (inputLabel, file, user) => {\n    const fileInput = screen.getByLabelText(new RegExp(inputLabel, 'i'));\n    await user.upload(fileInput, file);\n  },\n};\n\n/**\n * Common test utilities for assertions\n */\nexport const testUtils = {\n  /**\n   * Assert that an element has specific text content\n   * @param {string} text - Text to search for\n   * @param {Object} options - Query options\n   */\n  expectTextToBeInDocument: (text, options = {}) => {\n    expect(screen.getByText(text, options)).toBeInTheDocument();\n  },\n\n  /**\n   * Assert that an element is not in the document\n   * @param {string} text - Text to search for\n   */\n  expectTextNotToBeInDocument: (text) => {\n    expect(screen.queryByText(text)).not.toBeInTheDocument();\n  },\n\n  /**\n   * Assert that a form field has specific value\n   * @param {string} fieldName - Field label or placeholder\n   * @param {string} expectedValue - Expected field value\n   */\n  expectFieldValue: (fieldName, expectedValue) => {\n    const field = screen.getByLabelText(new RegExp(fieldName, 'i')) || \n                 screen.getByPlaceholderText(new RegExp(fieldName, 'i'));\n    expect(field).toHaveValue(expectedValue);\n  },\n\n  /**\n   * Assert that an API call was made with specific parameters\n   * @param {string} endpoint - Endpoint pattern\n   * @param {Object} expectedData - Expected request data\n   */\n  expectApiCall: (endpoint, expectedData = null) => {\n    expect(global.fetch).toHaveBeenCalledWith(\n      expect.stringContaining(endpoint),\n      expectedData ? expect.objectContaining({\n        body: JSON.stringify(expectedData)\n      }) : expect.any(Object)\n    );\n  },\n};\n\n/**\n * Reset all mocks and test state\n */\nexport const resetTestState = () => {\n  jest.clearAllMocks();\n  mockRouter.push.mockClear();\n  mockRouter.replace.mockClear();\n  \n  // Reset fetch mock\n  if (global.fetch && global.fetch.mockRestore) {\n    global.fetch.mockRestore();\n  }\n};"],"names":["jest","mock","useRouter","mockRouter","usePathname","useSearchParams","URLSearchParams","TestProviders","createTestQueryClient","mockApiError","mockApiResponses","renderAndWaitForLoading","renderWithAuthenticatedUser","renderWithCuratorUser","renderWithProviders","resetTestState","testUtils","userInteractions","waitForElement","push","fn","replace","back","forward","refresh","prefetch","pathname","route","query","asPath","basePath","isLocaleDomain","isReady","isPreview","QueryClient","defaultOptions","queries","retry","gcTime","staleTime","mutations","logger","log","warn","error","children","user","queryClient","QueryClientProvider","client","UserProvider","ui","options","routerMock","renderOptions","Object","assign","Wrapper","renderResult","render","wrapper","userEvent","setup","router","userOverrides","sessionOverrides","session","createAuthenticatedTestUser","result","testUser","testSession","isCurator","waitFor","expect","screen","queryByText","not","toBeInTheDocument","queryByRole","timeout","responses","global","fetch","url","endpoint","toString","pattern","response","entries","includes","Promise","resolve","ok","status","json","text","JSON","stringify","requireActual","interval","fillForm","formData","fieldName","value","field","getByLabelText","RegExp","getByPlaceholderText","getByRole","name","clear","type","submitForm","buttonText","submitButton","click","navigate","path","selectOption","selectLabel","optionText","select","selectOptions","uploadFile","inputLabel","file","fileInput","upload","expectTextToBeInDocument","getByText","expectTextNotToBeInDocument","expectFieldValue","expectedValue","toHaveValue","expectApiCall","expectedData","toHaveBeenCalledWith","stringContaining","objectContaining","body","any","clearAllMocks","mockClear","mockRestore"],"mappings":"AAAA,gCAAgC;;AA2BhC,sBAAsB;AACtBA,KAAKC,IAAI,CAAC,mBAAmB,IAAO,CAAA;QAClCC,WAAW,IAAMC;QACjBC,aAAa,IAAM;QACnBC,iBAAiB,IAAM,IAAIC;IAC7B,CAAA;;;;;;;;;;;QAkCaC;eAAAA;;QA5BAC;eAAAA;;QAmLAC;eAAAA;;QA9BAC;eAAAA;;QAhBAC;eAAAA;;QApCAC;eAAAA;;QAuBAC;eAAAA;;QAnEAC;eAAAA;;QA2QAC;eAAAA;;QA/CAC;eAAAA;;QA/DAC;eAAAA;;QATAC;eAAAA;;;;8DA7OK;wBACsB;kEAClB;4BAC2B;8BACpB;6BAC+B;;;;;;AAE5D,sBAAsB;AACtB,MAAMf,aAAa;IACjBgB,MAAMnB,KAAKoB,EAAE;IACbC,SAASrB,KAAKoB,EAAE;IAChBE,MAAMtB,KAAKoB,EAAE;IACbG,SAASvB,KAAKoB,EAAE;IAChBI,SAASxB,KAAKoB,EAAE;IAChBK,UAAUzB,KAAKoB,EAAE;IACjBM,UAAU;IACVC,OAAO;IACPC,OAAO,CAAC;IACRC,QAAQ;IACRC,UAAU;IACVC,gBAAgB;IAChBC,SAAS;IACTC,WAAW;AACb;AAaO,MAAMzB,wBAAwB;IACnC,OAAO,IAAI0B,uBAAW,CAAC;QACrBC,gBAAgB;YACdC,SAAS;gBACPC,OAAO;gBACPC,QAAQ;gBACRC,WAAW;YACb;YACAC,WAAW;gBACTH,OAAO;YACT;QACF;QACAI,QAAQ;YACNC,KAAK,KAAO;YACZC,MAAM,KAAO;YACbC,OAAO,KAAO;QAChB;IACF;AACF;AAUO,MAAMrC,gBAAgB,CAAC,EAC5BsC,QAAQ,EACRC,OAAO,IAAI,EACXC,cAAcvC,uBAAuB,EACtC;IACC,qBACE,qBAACwC,+BAAmB;QAACC,QAAQF;kBAC3B,cAAA,qBAACG,0BAAY;YAACJ,MAAMA;sBACjBD;;;AAIT;AAaO,MAAM/B,sBAAsB,CAACqC,IAAIC,UAAU,CAAC,CAAC;IAClD,MAAM,EACJN,OAAO,IAAI,EACXC,cAAcvC,uBAAuB,EACrCmB,QAAQ,GAAG,EACX0B,aAAa,CAAC,CAAC,EACf,GAAGC,eACJ,GAAGF;IAEJ,wCAAwC;IACxCG,OAAOC,MAAM,CAACrD,YAAY;QACxBuB,UAAUC;QACVE,QAAQF;QACRA,OAAOA;QACP,GAAG0B,UAAU;IACf;IAEA,gCAAgC;IAChC,MAAMI,UAAU,CAAC,EAAEZ,QAAQ,EAAE,iBAC3B,qBAACtC;YAAcuC,MAAMA;YAAMC,aAAaA;sBACrCF;;IAIL,mBAAmB;IACnB,MAAMa,eAAeC,IAAAA,cAAM,EAACR,IAAI;QAAES,SAASH;QAAS,GAAGH,aAAa;IAAC;IAErE,wCAAwC;IACxC,OAAO;QACL,GAAGI,YAAY;QACfZ,MAAMe,kBAAS,CAACC,KAAK;QACrBf;QACAgB,QAAQ5D;IACV;AACF;AAUO,MAAMS,8BAA8B,CAACuC,IAAIC,UAAU,CAAC,CAAC;IAC1D,MAAM,EAAEY,gBAAgB,CAAC,CAAC,EAAEC,mBAAmB,CAAC,CAAC,EAAE,GAAGX,eAAe,GAAGF;IAExE,MAAM,EAAEN,IAAI,EAAEoB,OAAO,EAAE,GAAGC,IAAAA,wCAA2B,EAACH,eAAeC;IAErE,MAAMG,SAAStD,oBAAoBqC,IAAI;QACrCL;QACA,GAAGQ,aAAa;IAClB;IAEA,OAAO;QACL,GAAGc,MAAM;QACTC,UAAUvB;QACVwB,aAAaJ;IACf;AACF;AAQO,MAAMrD,wBAAwB,CAACsC,IAAIC,UAAU,CAAC,CAAC;IACpD,OAAOxC,4BAA4BuC,IAAI;QACrCa,eAAe;YAAEO,WAAW;QAAK;QACjC,GAAGnB,OAAO;IACZ;AACF;AAQO,MAAMzC,0BAA0B,OAAOwC,IAAIC,UAAU,CAAC,CAAC;IAC5D,MAAMgB,SAAStD,oBAAoBqC,IAAIC;IAEvC,+CAA+C;IAC/C,MAAMoB,IAAAA,eAAO,EAAC;QACZC,OAAOC,cAAM,CAACC,WAAW,CAAC,aAAaC,GAAG,CAACC,iBAAiB;QAC5DJ,OAAOC,cAAM,CAACI,WAAW,CAAC,gBAAgBF,GAAG,CAACC,iBAAiB;IACjE,GAAG;QAAEE,SAAS;IAAK;IAEnB,OAAOX;AACT;AAMO,MAAM1D,mBAAmB,CAACsE;IAC/BC,OAAOC,KAAK,GAAGlF,KAAKoB,EAAE,CAAC,CAAC+D;QACtB,MAAMC,WAAWD,IAAIE,QAAQ;QAE7B,KAAK,MAAM,CAACC,SAASC,SAAS,IAAIhC,OAAOiC,OAAO,CAACR,WAAY;YAC3D,IAAII,SAASK,QAAQ,CAACH,UAAU;gBAC9B,OAAOI,QAAQC,OAAO,CAAC;oBACrBC,IAAI;oBACJC,QAAQ;oBACRC,MAAM,IAAMJ,QAAQC,OAAO,CAACJ;oBAC5BQ,MAAM,IAAML,QAAQC,OAAO,CAACK,KAAKC,SAAS,CAACV;gBAC7C;YACF;QACF;QAEA,2CAA2C;QAC3C,OAAOG,QAAQC,OAAO,CAAC;YACrBC,IAAI;YACJC,QAAQ;YACRC,MAAM,IAAMJ,QAAQC,OAAO,CAAC;oBAAE/C,OAAO;gBAAY;QACnD;IACF;AACF;AAQO,MAAMnC,eAAe,CAAC2E,UAAUS,SAAS,GAAG,EAAEjD,QAAQ;IAAEA,OAAO;AAAwB,CAAC;IAC7FqC,OAAOC,KAAK,GAAGlF,KAAKoB,EAAE,CAAC,CAAC+D;QACtB,IAAIA,IAAIE,QAAQ,GAAGI,QAAQ,CAACL,WAAW;YACrC,OAAOM,QAAQC,OAAO,CAAC;gBACrBC,IAAI;gBACJC;gBACAC,MAAM,IAAMJ,QAAQC,OAAO,CAAC/C;gBAC5BmD,MAAM,IAAML,QAAQC,OAAO,CAACK,KAAKC,SAAS,CAACrD;YAC7C;QACF;QAEA,0CAA0C;QAC1C,OAAO5C,KAAKkG,aAAa,CAAC,cAAcf;IAC1C;AACF;AAQO,MAAMjE,iBAAiB,OAAOU,OAAOwB,UAAU,CAAC,CAAC;IACtD,MAAM,EAAE2B,UAAU,IAAI,EAAEoB,WAAW,EAAE,EAAE,GAAG/C;IAE1C,OAAOoB,IAAAA,eAAO,EAAC5C,OAAO;QAAEmD;QAASoB;IAAS;AAC5C;AAKO,MAAMlF,mBAAmB;IAC9B;;;;GAIC,GACDmF,UAAU,OAAOC,UAAUvD;QACzB,KAAK,MAAM,CAACwD,WAAWC,MAAM,IAAIhD,OAAOiC,OAAO,CAACa,UAAW;YACzD,MAAMG,QAAQ9B,cAAM,CAAC+B,cAAc,CAAC,IAAIC,OAAOJ,WAAW,SAC7C5B,cAAM,CAACiC,oBAAoB,CAAC,IAAID,OAAOJ,WAAW,SAClD5B,cAAM,CAACkC,SAAS,CAAC,WAAW;gBAAEC,MAAM,IAAIH,OAAOJ,WAAW;YAAK;YAE5E,IAAIE,OAAO;gBACT,MAAM1D,KAAKgE,KAAK,CAACN;gBACjB,MAAM1D,KAAKiE,IAAI,CAACP,OAAOD;YACzB;QACF;IACF;IAEA;;;;GAIC,GACDS,YAAY,OAAOlE,MAAMmE,aAAa,QAAQ;QAC5C,MAAMC,eAAexC,cAAM,CAACkC,SAAS,CAAC,UAAU;YAAEC,MAAM,IAAIH,OAAOO,YAAY;QAAK;QACpF,MAAMnE,KAAKqE,KAAK,CAACD;IACnB;IAEA;;;GAGC,GACDE,UAAU,CAACC;QACTlH,WAAWgB,IAAI,CAACkG;IAClB;IAEA;;;;;GAKC,GACDC,cAAc,OAAOC,aAAaC,YAAY1E;QAC5C,MAAM2E,SAAS/C,cAAM,CAAC+B,cAAc,CAAC,IAAIC,OAAOa,aAAa;QAC7D,MAAMzE,KAAK4E,aAAa,CAACD,QAAQD;IACnC;IAEA;;;;;GAKC,GACDG,YAAY,OAAOC,YAAYC,MAAM/E;QACnC,MAAMgF,YAAYpD,cAAM,CAAC+B,cAAc,CAAC,IAAIC,OAAOkB,YAAY;QAC/D,MAAM9E,KAAKiF,MAAM,CAACD,WAAWD;IAC/B;AACF;AAKO,MAAM7G,YAAY;IACvB;;;;GAIC,GACDgH,0BAA0B,CAACjC,MAAM3C,UAAU,CAAC,CAAC;QAC3CqB,OAAOC,cAAM,CAACuD,SAAS,CAAClC,MAAM3C,UAAUyB,iBAAiB;IAC3D;IAEA;;;GAGC,GACDqD,6BAA6B,CAACnC;QAC5BtB,OAAOC,cAAM,CAACC,WAAW,CAACoB,OAAOnB,GAAG,CAACC,iBAAiB;IACxD;IAEA;;;;GAIC,GACDsD,kBAAkB,CAAC7B,WAAW8B;QAC5B,MAAM5B,QAAQ9B,cAAM,CAAC+B,cAAc,CAAC,IAAIC,OAAOJ,WAAW,SAC7C5B,cAAM,CAACiC,oBAAoB,CAAC,IAAID,OAAOJ,WAAW;QAC/D7B,OAAO+B,OAAO6B,WAAW,CAACD;IAC5B;IAEA;;;;GAIC,GACDE,eAAe,CAAClD,UAAUmD,eAAe,IAAI;QAC3C9D,OAAOQ,OAAOC,KAAK,EAAEsD,oBAAoB,CACvC/D,OAAOgE,gBAAgB,CAACrD,WACxBmD,eAAe9D,OAAOiE,gBAAgB,CAAC;YACrCC,MAAM3C,KAAKC,SAAS,CAACsC;QACvB,KAAK9D,OAAOmE,GAAG,CAACrF;IAEpB;AACF;AAKO,MAAMxC,iBAAiB;IAC5Bf,KAAK6I,aAAa;IAClB1I,WAAWgB,IAAI,CAAC2H,SAAS;IACzB3I,WAAWkB,OAAO,CAACyH,SAAS;IAE5B,mBAAmB;IACnB,IAAI7D,OAAOC,KAAK,IAAID,OAAOC,KAAK,CAAC6D,WAAW,EAAE;QAC5C9D,OAAOC,KAAK,CAAC6D,WAAW;IAC1B;AACF"}