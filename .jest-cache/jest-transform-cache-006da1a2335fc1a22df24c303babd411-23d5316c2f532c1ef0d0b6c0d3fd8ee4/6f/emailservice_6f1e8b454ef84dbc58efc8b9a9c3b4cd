5128333782788eaffda71aaff43afd0c
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get EmailServiceError () {
        return EmailServiceError;
    },
    get sendEmailWithRetry () {
        return sendEmailWithRetry;
    }
});
require("server-only");
class EmailServiceError extends Error {
    constructor(message, code){
        super(message), this.code = code;
        this.name = 'EmailServiceError';
    }
}
async function sendEmailWithRetry(emailService, email, code, name, maxRetries = 3) {
    let lastError = null;
    for(let attempt = 1; attempt <= maxRetries; attempt++){
        try {
            const success = await emailService.sendVerificationEmail(email, code, name);
            if (success) {
                return true;
            }
            throw new Error('Email service returned false');
        } catch (error) {
            lastError = error;
            // Don't retry on certain errors
            if (error instanceof EmailServiceError && (error.code === 'INVALID_EMAIL' || error.code === 'QUOTA_EXCEEDED')) {
                throw error;
            }
            // Exponential backoff: 1s, 2s, 4s
            if (attempt < maxRetries) {
                const delay = Math.pow(2, attempt - 1) * 1000;
                await new Promise((resolve)=>setTimeout(resolve, delay));
            }
        }
    }
    throw lastError || new Error('All retry attempts failed');
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9zdGVmYW5iZWtrZXIvcHJvamVjdHMvZmFuY3ktcGxhbnRpZXMvc3JjL2xpYi9zZXJ2aWNlcy9lbWFpbC1zZXJ2aWNlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAnc2VydmVyLW9ubHknO1xuXG5leHBvcnQgaW50ZXJmYWNlIEVtYWlsU2VydmljZSB7XG4gIHNlbmRWZXJpZmljYXRpb25FbWFpbChlbWFpbDogc3RyaW5nLCBjb2RlOiBzdHJpbmcsIG5hbWU6IHN0cmluZyk6IFByb21pc2U8Ym9vbGVhbj47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRW1haWxDb25maWcge1xuICBhcGlLZXk6IHN0cmluZztcbiAgZnJvbUVtYWlsOiBzdHJpbmc7XG4gIGZyb21OYW1lOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBjbGFzcyBFbWFpbFNlcnZpY2VFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgY29uc3RydWN0b3IoXG4gICAgbWVzc2FnZTogc3RyaW5nLFxuICAgIHB1YmxpYyBjb2RlOiAnUVVPVEFfRVhDRUVERUQnIHwgJ0FQSV9FUlJPUicgfCAnTkVUV09SS19FUlJPUicgfCAnSU5WQUxJRF9FTUFJTCdcbiAgKSB7XG4gICAgc3VwZXIobWVzc2FnZSk7XG4gICAgdGhpcy5uYW1lID0gJ0VtYWlsU2VydmljZUVycm9yJztcbiAgfVxufVxuXG4vKipcbiAqIFNlbmQgZW1haWwgd2l0aCByZXRyeSBsb2dpYyBhbmQgZXhwb25lbnRpYWwgYmFja29mZlxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2VuZEVtYWlsV2l0aFJldHJ5KFxuICBlbWFpbFNlcnZpY2U6IEVtYWlsU2VydmljZSxcbiAgZW1haWw6IHN0cmluZyxcbiAgY29kZTogc3RyaW5nLFxuICBuYW1lOiBzdHJpbmcsXG4gIG1heFJldHJpZXMgPSAzXG4pOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgbGV0IGxhc3RFcnJvcjogRXJyb3IgfCBudWxsID0gbnVsbDtcbiAgXG4gIGZvciAobGV0IGF0dGVtcHQgPSAxOyBhdHRlbXB0IDw9IG1heFJldHJpZXM7IGF0dGVtcHQrKykge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBzdWNjZXNzID0gYXdhaXQgZW1haWxTZXJ2aWNlLnNlbmRWZXJpZmljYXRpb25FbWFpbChlbWFpbCwgY29kZSwgbmFtZSk7XG4gICAgICBpZiAoc3VjY2Vzcykge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHRocm93IG5ldyBFcnJvcignRW1haWwgc2VydmljZSByZXR1cm5lZCBmYWxzZScpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBsYXN0RXJyb3IgPSBlcnJvciBhcyBFcnJvcjtcbiAgICAgIFxuICAgICAgLy8gRG9uJ3QgcmV0cnkgb24gY2VydGFpbiBlcnJvcnNcbiAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVtYWlsU2VydmljZUVycm9yICYmIFxuICAgICAgICAgIChlcnJvci5jb2RlID09PSAnSU5WQUxJRF9FTUFJTCcgfHwgZXJyb3IuY29kZSA9PT0gJ1FVT1RBX0VYQ0VFREVEJykpIHtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICB9XG4gICAgICBcbiAgICAgIC8vIEV4cG9uZW50aWFsIGJhY2tvZmY6IDFzLCAycywgNHNcbiAgICAgIGlmIChhdHRlbXB0IDwgbWF4UmV0cmllcykge1xuICAgICAgICBjb25zdCBkZWxheSA9IE1hdGgucG93KDIsIGF0dGVtcHQgLSAxKSAqIDEwMDA7XG4gICAgICAgIGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCBkZWxheSkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBcbiAgdGhyb3cgbGFzdEVycm9yIHx8IG5ldyBFcnJvcignQWxsIHJldHJ5IGF0dGVtcHRzIGZhaWxlZCcpO1xufSJdLCJuYW1lcyI6WyJFbWFpbFNlcnZpY2VFcnJvciIsInNlbmRFbWFpbFdpdGhSZXRyeSIsIkVycm9yIiwibWVzc2FnZSIsImNvZGUiLCJuYW1lIiwiZW1haWxTZXJ2aWNlIiwiZW1haWwiLCJtYXhSZXRyaWVzIiwibGFzdEVycm9yIiwiYXR0ZW1wdCIsInN1Y2Nlc3MiLCJzZW5kVmVyaWZpY2F0aW9uRW1haWwiLCJlcnJvciIsImRlbGF5IiwiTWF0aCIsInBvdyIsIlByb21pc2UiLCJyZXNvbHZlIiwic2V0VGltZW91dCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7UUFZYUE7ZUFBQUE7O1FBYVNDO2VBQUFBOzs7UUF6QmY7QUFZQSxNQUFNRCwwQkFBMEJFO0lBQ3JDLFlBQ0VDLE9BQWUsRUFDZixBQUFPQyxJQUF3RSxDQUMvRTtRQUNBLEtBQUssQ0FBQ0QsZUFGQ0MsT0FBQUE7UUFHUCxJQUFJLENBQUNDLElBQUksR0FBRztJQUNkO0FBQ0Y7QUFLTyxlQUFlSixtQkFDcEJLLFlBQTBCLEVBQzFCQyxLQUFhLEVBQ2JILElBQVksRUFDWkMsSUFBWSxFQUNaRyxhQUFhLENBQUM7SUFFZCxJQUFJQyxZQUEwQjtJQUU5QixJQUFLLElBQUlDLFVBQVUsR0FBR0EsV0FBV0YsWUFBWUUsVUFBVztRQUN0RCxJQUFJO1lBQ0YsTUFBTUMsVUFBVSxNQUFNTCxhQUFhTSxxQkFBcUIsQ0FBQ0wsT0FBT0gsTUFBTUM7WUFDdEUsSUFBSU0sU0FBUztnQkFDWCxPQUFPO1lBQ1Q7WUFDQSxNQUFNLElBQUlULE1BQU07UUFDbEIsRUFBRSxPQUFPVyxPQUFPO1lBQ2RKLFlBQVlJO1lBRVosZ0NBQWdDO1lBQ2hDLElBQUlBLGlCQUFpQmIscUJBQ2hCYSxDQUFBQSxNQUFNVCxJQUFJLEtBQUssbUJBQW1CUyxNQUFNVCxJQUFJLEtBQUssZ0JBQWUsR0FBSTtnQkFDdkUsTUFBTVM7WUFDUjtZQUVBLGtDQUFrQztZQUNsQyxJQUFJSCxVQUFVRixZQUFZO2dCQUN4QixNQUFNTSxRQUFRQyxLQUFLQyxHQUFHLENBQUMsR0FBR04sVUFBVSxLQUFLO2dCQUN6QyxNQUFNLElBQUlPLFFBQVFDLENBQUFBLFVBQVdDLFdBQVdELFNBQVNKO1lBQ25EO1FBQ0Y7SUFDRjtJQUVBLE1BQU1MLGFBQWEsSUFBSVAsTUFBTTtBQUMvQiJ9