097464403de9fbeb8f1208a768fc6f46
"use strict";

/* istanbul ignore next */
function cov_1jdjf1p941() {
  var path = "/Users/stefanbekker/projects/fancy-planties/src/app/api/plant-instances/[id]/route-previous.ts";
  var hash = "0b1c65ababb0e22076a00e323c0ee6fa99865759";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/stefanbekker/projects/fancy-planties/src/app/api/plant-instances/[id]/route-previous.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 21,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 22
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 19
        }
      },
      "6": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 19
        }
      },
      "7": {
        start: {
          line: 22,
          column: 16
        },
        end: {
          line: 22,
          column: 38
        }
      },
      "8": {
        start: {
          line: 23,
          column: 24
        },
        end: {
          line: 23,
          column: 77
        }
      },
      "9": {
        start: {
          line: 24,
          column: 22
        },
        end: {
          line: 24,
          column: 73
        }
      },
      "10": {
        start: {
          line: 25,
          column: 17
        },
        end: {
          line: 25,
          column: 55
        }
      },
      "11": {
        start: {
          line: 27,
          column: 4
        },
        end: {
          line: 69,
          column: 5
        }
      },
      "12": {
        start: {
          line: 28,
          column: 25
        },
        end: {
          line: 28,
          column: 62
        }
      },
      "13": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 35,
          column: 9
        }
      },
      "14": {
        start: {
          line: 30,
          column: 12
        },
        end: {
          line: 34,
          column: 15
        }
      },
      "15": {
        start: {
          line: 36,
          column: 31
        },
        end: {
          line: 36,
          column: 43
        }
      },
      "16": {
        start: {
          line: 37,
          column: 19
        },
        end: {
          line: 37,
          column: 50
        }
      },
      "17": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 44,
          column: 9
        }
      },
      "18": {
        start: {
          line: 39,
          column: 12
        },
        end: {
          line: 43,
          column: 15
        }
      },
      "19": {
        start: {
          line: 45,
          column: 30
        },
        end: {
          line: 45,
          column: 92
        }
      },
      "20": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 52,
          column: 9
        }
      },
      "21": {
        start: {
          line: 47,
          column: 12
        },
        end: {
          line: 51,
          column: 15
        }
      },
      "22": {
        start: {
          line: 54,
          column: 8
        },
        end: {
          line: 60,
          column: 9
        }
      },
      "23": {
        start: {
          line: 55,
          column: 12
        },
        end: {
          line: 59,
          column: 15
        }
      },
      "24": {
        start: {
          line: 61,
          column: 8
        },
        end: {
          line: 61,
          column: 56
        }
      },
      "25": {
        start: {
          line: 63,
          column: 8
        },
        end: {
          line: 63,
          column: 62
        }
      },
      "26": {
        start: {
          line: 64,
          column: 8
        },
        end: {
          line: 68,
          column: 11
        }
      },
      "27": {
        start: {
          line: 72,
          column: 4
        },
        end: {
          line: 179,
          column: 5
        }
      },
      "28": {
        start: {
          line: 73,
          column: 25
        },
        end: {
          line: 73,
          column: 62
        }
      },
      "29": {
        start: {
          line: 74,
          column: 8
        },
        end: {
          line: 80,
          column: 9
        }
      },
      "30": {
        start: {
          line: 75,
          column: 12
        },
        end: {
          line: 79,
          column: 15
        }
      },
      "31": {
        start: {
          line: 81,
          column: 31
        },
        end: {
          line: 81,
          column: 43
        }
      },
      "32": {
        start: {
          line: 82,
          column: 19
        },
        end: {
          line: 82,
          column: 50
        }
      },
      "33": {
        start: {
          line: 83,
          column: 8
        },
        end: {
          line: 89,
          column: 9
        }
      },
      "34": {
        start: {
          line: 84,
          column: 12
        },
        end: {
          line: 88,
          column: 15
        }
      },
      "35": {
        start: {
          line: 91,
          column: 33
        },
        end: {
          line: 91,
          column: 95
        }
      },
      "36": {
        start: {
          line: 92,
          column: 8
        },
        end: {
          line: 98,
          column: 9
        }
      },
      "37": {
        start: {
          line: 93,
          column: 12
        },
        end: {
          line: 97,
          column: 15
        }
      },
      "38": {
        start: {
          line: 99,
          column: 8
        },
        end: {
          line: 105,
          column: 9
        }
      },
      "39": {
        start: {
          line: 100,
          column: 12
        },
        end: {
          line: 104,
          column: 15
        }
      },
      "40": {
        start: {
          line: 107,
          column: 25
        },
        end: {
          line: 107,
          column: 49
        }
      },
      "41": {
        start: {
          line: 109,
          column: 29
        },
        end: {
          line: 114,
          column: 9
        }
      },
      "42": {
        start: {
          line: 110,
          column: 26
        },
        end: {
          line: 110,
          column: 50
        }
      },
      "43": {
        start: {
          line: 111,
          column: 27
        },
        end: {
          line: 111,
          column: 45
        }
      },
      "44": {
        start: {
          line: 112,
          column: 27
        },
        end: {
          line: 112,
          column: 52
        }
      },
      "45": {
        start: {
          line: 113,
          column: 12
        },
        end: {
          line: 113,
          column: 56
        }
      },
      "46": {
        start: {
          line: 116,
          column: 21
        },
        end: {
          line: 116,
          column: 23
        }
      },
      "47": {
        start: {
          line: 117,
          column: 27
        },
        end: {
          line: 117,
          column: 29
        }
      },
      "48": {
        start: {
          line: 118,
          column: 8
        },
        end: {
          line: 132,
          column: 9
        }
      },
      "49": {
        start: {
          line: 119,
          column: 12
        },
        end: {
          line: 131,
          column: 13
        }
      },
      "50": {
        start: {
          line: 121,
          column: 16
        },
        end: {
          line: 121,
          column: 67
        }
      },
      "51": {
        start: {
          line: 121,
          column: 42
        },
        end: {
          line: 121,
          column: 67
        }
      },
      "52": {
        start: {
          line: 122,
          column: 16
        },
        end: {
          line: 122,
          column: 48
        }
      },
      "53": {
        start: {
          line: 123,
          column: 19
        },
        end: {
          line: 131,
          column: 13
        }
      },
      "54": {
        start: {
          line: 125,
          column: 16
        },
        end: {
          line: 127,
          column: 17
        }
      },
      "55": {
        start: {
          line: 126,
          column: 20
        },
        end: {
          line: 126,
          column: 43
        }
      },
      "56": {
        start: {
          line: 130,
          column: 16
        },
        end: {
          line: 130,
          column: 34
        }
      },
      "57": {
        start: {
          line: 134,
          column: 32
        },
        end: {
          line: 134,
          column: 93
        }
      },
      "58": {
        start: {
          line: 134,
          column: 73
        },
        end: {
          line: 134,
          column: 91
        }
      },
      "59": {
        start: {
          line: 136,
          column: 26
        },
        end: {
          line: 139,
          column: 9
        }
      },
      "60": {
        start: {
          line: 141,
          column: 8
        },
        end: {
          line: 141,
          column: 68
        }
      },
      "61": {
        start: {
          line: 141,
          column: 26
        },
        end: {
          line: 141,
          column: 68
        }
      },
      "62": {
        start: {
          line: 142,
          column: 8
        },
        end: {
          line: 142,
          column: 68
        }
      },
      "63": {
        start: {
          line: 142,
          column: 27
        },
        end: {
          line: 142,
          column: 68
        }
      },
      "64": {
        start: {
          line: 144,
          column: 8
        },
        end: {
          line: 144,
          column: 32
        }
      },
      "65": {
        start: {
          line: 146,
          column: 30
        },
        end: {
          line: 150,
          column: 9
        }
      },
      "66": {
        start: {
          line: 152,
          column: 27
        },
        end: {
          line: 156,
          column: 10
        }
      },
      "67": {
        start: {
          line: 158,
          column: 55
        },
        end: {
          line: 158,
          column: 65
        }
      },
      "68": {
        start: {
          line: 160,
          column: 32
        },
        end: {
          line: 160,
          column: 99
        }
      },
      "69": {
        start: {
          line: 162,
          column: 33
        },
        end: {
          line: 162,
          column: 111
        }
      },
      "70": {
        start: {
          line: 163,
          column: 8
        },
        end: {
          line: 163,
          column: 59
        }
      },
      "71": {
        start: {
          line: 165,
          column: 8
        },
        end: {
          line: 165,
          column: 65
        }
      },
      "72": {
        start: {
          line: 166,
          column: 8
        },
        end: {
          line: 173,
          column: 9
        }
      },
      "73": {
        start: {
          line: 167,
          column: 12
        },
        end: {
          line: 172,
          column: 15
        }
      },
      "74": {
        start: {
          line: 174,
          column: 8
        },
        end: {
          line: 178,
          column: 11
        }
      },
      "75": {
        start: {
          line: 182,
          column: 4
        },
        end: {
          line: 236,
          column: 5
        }
      },
      "76": {
        start: {
          line: 183,
          column: 25
        },
        end: {
          line: 183,
          column: 62
        }
      },
      "77": {
        start: {
          line: 184,
          column: 8
        },
        end: {
          line: 190,
          column: 9
        }
      },
      "78": {
        start: {
          line: 185,
          column: 12
        },
        end: {
          line: 189,
          column: 15
        }
      },
      "79": {
        start: {
          line: 191,
          column: 31
        },
        end: {
          line: 191,
          column: 43
        }
      },
      "80": {
        start: {
          line: 192,
          column: 19
        },
        end: {
          line: 192,
          column: 50
        }
      },
      "81": {
        start: {
          line: 193,
          column: 8
        },
        end: {
          line: 199,
          column: 9
        }
      },
      "82": {
        start: {
          line: 194,
          column: 12
        },
        end: {
          line: 198,
          column: 15
        }
      },
      "83": {
        start: {
          line: 201,
          column: 33
        },
        end: {
          line: 201,
          column: 95
        }
      },
      "84": {
        start: {
          line: 202,
          column: 8
        },
        end: {
          line: 208,
          column: 9
        }
      },
      "85": {
        start: {
          line: 203,
          column: 12
        },
        end: {
          line: 207,
          column: 15
        }
      },
      "86": {
        start: {
          line: 209,
          column: 8
        },
        end: {
          line: 215,
          column: 9
        }
      },
      "87": {
        start: {
          line: 210,
          column: 12
        },
        end: {
          line: 214,
          column: 15
        }
      },
      "88": {
        start: {
          line: 217,
          column: 24
        },
        end: {
          line: 217,
          column: 77
        }
      },
      "89": {
        start: {
          line: 218,
          column: 8
        },
        end: {
          line: 224,
          column: 9
        }
      },
      "90": {
        start: {
          line: 219,
          column: 12
        },
        end: {
          line: 223,
          column: 15
        }
      },
      "91": {
        start: {
          line: 225,
          column: 8
        },
        end: {
          line: 228,
          column: 11
        }
      },
      "92": {
        start: {
          line: 230,
          column: 8
        },
        end: {
          line: 230,
          column: 65
        }
      },
      "93": {
        start: {
          line: 231,
          column: 8
        },
        end: {
          line: 235,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        },
        loc: {
          start: {
            line: 12,
            column: 18
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 15
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 18,
            column: 4
          },
          end: {
            line: 18,
            column: 5
          }
        },
        loc: {
          start: {
            line: 18,
            column: 15
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 18
      },
      "4": {
        name: "GET",
        decl: {
          start: {
            line: 26,
            column: 15
          },
          end: {
            line: 26,
            column: 18
          }
        },
        loc: {
          start: {
            line: 26,
            column: 40
          },
          end: {
            line: 70,
            column: 1
          }
        },
        line: 26
      },
      "5": {
        name: "PUT",
        decl: {
          start: {
            line: 71,
            column: 15
          },
          end: {
            line: 71,
            column: 18
          }
        },
        loc: {
          start: {
            line: 71,
            column: 40
          },
          end: {
            line: 180,
            column: 1
          }
        },
        line: 71
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 109,
            column: 29
          },
          end: {
            line: 109,
            column: 30
          }
        },
        loc: {
          start: {
            line: 109,
            column: 43
          },
          end: {
            line: 114,
            column: 9
          }
        },
        line: 109
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 134,
            column: 65
          },
          end: {
            line: 134,
            column: 66
          }
        },
        loc: {
          start: {
            line: 134,
            column: 73
          },
          end: {
            line: 134,
            column: 91
          }
        },
        line: 134
      },
      "8": {
        name: "DELETE",
        decl: {
          start: {
            line: 181,
            column: 15
          },
          end: {
            line: 181,
            column: 21
          }
        },
        loc: {
          start: {
            line: 181,
            column: 43
          },
          end: {
            line: 237,
            column: 1
          }
        },
        line: 181
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 29,
            column: 8
          },
          end: {
            line: 35,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 29,
            column: 8
          },
          end: {
            line: 35,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 29
      },
      "1": {
        loc: {
          start: {
            line: 38,
            column: 8
          },
          end: {
            line: 44,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 38,
            column: 8
          },
          end: {
            line: 44,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 38
      },
      "2": {
        loc: {
          start: {
            line: 46,
            column: 8
          },
          end: {
            line: 52,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 46,
            column: 8
          },
          end: {
            line: 52,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 46
      },
      "3": {
        loc: {
          start: {
            line: 54,
            column: 8
          },
          end: {
            line: 60,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 54,
            column: 8
          },
          end: {
            line: 60,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 54
      },
      "4": {
        loc: {
          start: {
            line: 74,
            column: 8
          },
          end: {
            line: 80,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 74,
            column: 8
          },
          end: {
            line: 80,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 74
      },
      "5": {
        loc: {
          start: {
            line: 83,
            column: 8
          },
          end: {
            line: 89,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 83,
            column: 8
          },
          end: {
            line: 89,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 83
      },
      "6": {
        loc: {
          start: {
            line: 92,
            column: 8
          },
          end: {
            line: 98,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 92,
            column: 8
          },
          end: {
            line: 98,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 92
      },
      "7": {
        loc: {
          start: {
            line: 99,
            column: 8
          },
          end: {
            line: 105,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 99,
            column: 8
          },
          end: {
            line: 105,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 99
      },
      "8": {
        loc: {
          start: {
            line: 119,
            column: 12
          },
          end: {
            line: 131,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 119,
            column: 12
          },
          end: {
            line: 131,
            column: 13
          }
        }, {
          start: {
            line: 123,
            column: 19
          },
          end: {
            line: 131,
            column: 13
          }
        }],
        line: 119
      },
      "9": {
        loc: {
          start: {
            line: 121,
            column: 16
          },
          end: {
            line: 121,
            column: 67
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 121,
            column: 16
          },
          end: {
            line: 121,
            column: 67
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 121
      },
      "10": {
        loc: {
          start: {
            line: 123,
            column: 19
          },
          end: {
            line: 131,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 123,
            column: 19
          },
          end: {
            line: 131,
            column: 13
          }
        }, {
          start: {
            line: 128,
            column: 19
          },
          end: {
            line: 131,
            column: 13
          }
        }],
        line: 123
      },
      "11": {
        loc: {
          start: {
            line: 125,
            column: 16
          },
          end: {
            line: 127,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 125,
            column: 16
          },
          end: {
            line: 127,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 125
      },
      "12": {
        loc: {
          start: {
            line: 137,
            column: 15
          },
          end: {
            line: 137,
            column: 40
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 137,
            column: 15
          },
          end: {
            line: 137,
            column: 34
          }
        }, {
          start: {
            line: 137,
            column: 38
          },
          end: {
            line: 137,
            column: 40
          }
        }],
        line: 137
      },
      "13": {
        loc: {
          start: {
            line: 141,
            column: 8
          },
          end: {
            line: 141,
            column: 68
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 141,
            column: 8
          },
          end: {
            line: 141,
            column: 68
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 141
      },
      "14": {
        loc: {
          start: {
            line: 142,
            column: 8
          },
          end: {
            line: 142,
            column: 68
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 142,
            column: 8
          },
          end: {
            line: 142,
            column: 68
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 142
      },
      "15": {
        loc: {
          start: {
            line: 148,
            column: 28
          },
          end: {
            line: 148,
            column: 116
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 148,
            column: 80
          },
          end: {
            line: 148,
            column: 109
          }
        }, {
          start: {
            line: 148,
            column: 112
          },
          end: {
            line: 148,
            column: 116
          }
        }],
        line: 148
      },
      "16": {
        loc: {
          start: {
            line: 148,
            column: 28
          },
          end: {
            line: 148,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 148,
            column: 28
          },
          end: {
            line: 148,
            column: 47
          }
        }, {
          start: {
            line: 148,
            column: 51
          },
          end: {
            line: 148,
            column: 77
          }
        }],
        line: 148
      },
      "17": {
        loc: {
          start: {
            line: 149,
            column: 23
          },
          end: {
            line: 149,
            column: 96
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 149,
            column: 65
          },
          end: {
            line: 149,
            column: 89
          }
        }, {
          start: {
            line: 149,
            column: 92
          },
          end: {
            line: 149,
            column: 96
          }
        }],
        line: 149
      },
      "18": {
        loc: {
          start: {
            line: 149,
            column: 23
          },
          end: {
            line: 149,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 149,
            column: 23
          },
          end: {
            line: 149,
            column: 37
          }
        }, {
          start: {
            line: 149,
            column: 41
          },
          end: {
            line: 149,
            column: 62
          }
        }],
        line: 149
      },
      "19": {
        loc: {
          start: {
            line: 166,
            column: 8
          },
          end: {
            line: 173,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 166,
            column: 8
          },
          end: {
            line: 173,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 166
      },
      "20": {
        loc: {
          start: {
            line: 166,
            column: 12
          },
          end: {
            line: 166,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 166,
            column: 12
          },
          end: {
            line: 166,
            column: 34
          }
        }, {
          start: {
            line: 166,
            column: 38
          },
          end: {
            line: 166,
            column: 74
          }
        }],
        line: 166
      },
      "21": {
        loc: {
          start: {
            line: 184,
            column: 8
          },
          end: {
            line: 190,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 184,
            column: 8
          },
          end: {
            line: 190,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 184
      },
      "22": {
        loc: {
          start: {
            line: 193,
            column: 8
          },
          end: {
            line: 199,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 193,
            column: 8
          },
          end: {
            line: 199,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 193
      },
      "23": {
        loc: {
          start: {
            line: 202,
            column: 8
          },
          end: {
            line: 208,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 202,
            column: 8
          },
          end: {
            line: 208,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 202
      },
      "24": {
        loc: {
          start: {
            line: 209,
            column: 8
          },
          end: {
            line: 215,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 209,
            column: 8
          },
          end: {
            line: 215,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 209
      },
      "25": {
        loc: {
          start: {
            line: 218,
            column: 8
          },
          end: {
            line: 224,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 218,
            column: 8
          },
          end: {
            line: 224,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 218
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/stefanbekker/projects/fancy-planties/src/app/api/plant-instances/[id]/route-previous.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport { PlantInstanceQueries } from '@/lib/db/queries/plant-instances';\nimport { updatePlantInstanceSchema } from '@/lib/validation/plant-schemas';\nimport { validateRequest } from '@/lib/auth/server';\n\n// GET /api/plant-instances/[id] - Get a specific plant instance\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { user } = await validateRequest();\n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const resolvedParams = await params;\n    const id = parseInt(resolvedParams.id, 10);\n    if (isNaN(id)) {\n      return NextResponse.json({ error: 'Invalid plant instance ID' }, { status: 400 });\n    }\n\n    const plantInstance = await PlantInstanceQueries.getEnhancedById(id);\n    \n    if (!plantInstance) {\n      return NextResponse.json({ error: 'Plant instance not found' }, { status: 404 });\n    }\n\n    // Check if the plant instance belongs to the current user\n    if (plantInstance.userId !== user.id) {\n      return NextResponse.json({ error: 'Forbidden' }, { status: 403 });\n    }\n\n    return NextResponse.json(plantInstance);\n  } catch (error) {\n    console.error('Failed to get plant instance:', error);\n    return NextResponse.json(\n      { error: 'Failed to get plant instance' },\n      { status: 500 }\n    );\n  }\n}\n\n// PUT /api/plant-instances/[id] - Update a plant instance\nexport async function PUT(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { user } = await validateRequest();\n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const resolvedParams = await params;\n    const id = parseInt(resolvedParams.id, 10);\n    if (isNaN(id)) {\n      return NextResponse.json({ error: 'Invalid plant instance ID' }, { status: 400 });\n    }\n\n    // Check if the plant instance exists and belongs to the user\n    const existingInstance = await PlantInstanceQueries.getEnhancedById(id);\n    if (!existingInstance) {\n      return NextResponse.json({ error: 'Plant instance not found' }, { status: 404 });\n    }\n\n    if (existingInstance.userId !== user.id) {\n      return NextResponse.json({ error: 'Forbidden' }, { status: 403 });\n    }\n\n    // Handle FormData for file uploads\n    const formData = await request.formData();\n    \n    // Helper function to convert file to base64\n    const fileToBase64 = async (file: File): Promise<string> => {\n      const bytes = await file.arrayBuffer();\n      const buffer = Buffer.from(bytes);\n      const base64 = buffer.toString('base64');\n      return `data:${file.type};base64,${base64}`;\n    };\n\n    // Extract form fields\n    const body: any = {};\n    const imageFiles: File[] = [];\n    \n    for (const [key, value] of formData.entries()) {\n      if (key.startsWith('existingImages[')) {\n        // Handle existing images array\n        if (!body.existingImages) body.existingImages = [];\n        body.existingImages.push(value);\n      } else if (key.startsWith('imageFiles[')) {\n        // Handle new image files\n        if (value instanceof File) {\n          imageFiles.push(value);\n        }\n      } else {\n        // Handle regular form fields\n        body[key] = value;\n      }\n    }\n\n    // Convert new image files to base64\n    const newImageBase64s = await Promise.all(\n      imageFiles.map(file => fileToBase64(file))\n    );\n\n    // Combine existing images with new images\n    const allImages = [...(body.existingImages || []), ...newImageBase64s];\n    \n    // Convert string values to appropriate types\n    if (body.plantId) body.plantId = parseInt(body.plantId, 10);\n    if (body.isActive) body.isActive = body.isActive === 'true';\n    \n    // Set the combined images array\n    body.images = allImages;\n    \n    // Convert date strings to Date objects if they exist and are not empty\n    const processedBody = {\n      ...body,\n      lastFertilized: body.lastFertilized && body.lastFertilized !== '' ? new Date(body.lastFertilized) : null,\n      lastRepot: body.lastRepot && body.lastRepot !== '' ? new Date(body.lastRepot) : null,\n    };\n    \n    // Validate the update data\n    const updateData = updatePlantInstanceSchema.parse({\n      ...processedBody,\n      id,\n      userId: user.id,\n    });\n\n    // Remove id and userId from update data as they shouldn't be updated\n    const { id: _, userId: __, ...dataToUpdate } = updateData;\n\n    // Update the plant instance\n    const updatedInstance = await PlantInstanceQueries.update(id, dataToUpdate);\n    \n    // Get the enhanced plant instance with plant data\n    const enhancedInstance = await PlantInstanceQueries.getEnhancedById(updatedInstance.id);\n    \n    return NextResponse.json(enhancedInstance);\n  } catch (error) {\n    console.error('Failed to update plant instance:', error);\n    \n    if (error instanceof Error && error.message.includes('validation')) {\n      return NextResponse.json(\n        { error: 'Invalid plant instance data', details: error.message },\n        { status: 400 }\n      );\n    }\n    \n    return NextResponse.json(\n      { error: 'Failed to update plant instance' },\n      { status: 500 }\n    );\n  }\n}\n\n// DELETE /api/plant-instances/[id] - Delete a plant instance\nexport async function DELETE(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { user } = await validateRequest();\n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const resolvedParams = await params;\n    const id = parseInt(resolvedParams.id, 10);\n    if (isNaN(id)) {\n      return NextResponse.json({ error: 'Invalid plant instance ID' }, { status: 400 });\n    }\n\n    // Check if the plant instance exists and belongs to the user\n    const existingInstance = await PlantInstanceQueries.getEnhancedById(id);\n    if (!existingInstance) {\n      return NextResponse.json({ error: 'Plant instance not found' }, { status: 404 });\n    }\n\n    if (existingInstance.userId !== user.id) {\n      return NextResponse.json({ error: 'Forbidden' }, { status: 403 });\n    }\n\n    // Delete the plant instance\n    const deleted = await PlantInstanceQueries.delete(id);\n    \n    if (!deleted) {\n      return NextResponse.json({ error: 'Failed to delete plant instance' }, { status: 500 });\n    }\n\n    return NextResponse.json({ success: true, message: 'Plant instance deleted successfully' });\n  } catch (error) {\n    console.error('Failed to delete plant instance:', error);\n    return NextResponse.json(\n      { error: 'Failed to delete plant instance' },\n      { status: 500 }\n    );\n  }\n}"],
      names: ["DELETE", "GET", "PUT", "request", "params", "user", "validateRequest", "NextResponse", "json", "error", "status", "resolvedParams", "id", "parseInt", "isNaN", "plantInstance", "PlantInstanceQueries", "getEnhancedById", "userId", "console", "existingInstance", "formData", "fileToBase64", "file", "bytes", "arrayBuffer", "buffer", "Buffer", "from", "base64", "toString", "type", "body", "imageFiles", "key", "value", "entries", "startsWith", "existingImages", "push", "File", "newImageBase64s", "Promise", "all", "map", "allImages", "plantId", "isActive", "images", "processedBody", "lastFertilized", "Date", "lastRepot", "updateData", "updatePlantInstanceSchema", "parse", "_", "__", "dataToUpdate", "updatedInstance", "update", "enhancedInstance", "Error", "message", "includes", "details", "deleted", "delete", "success"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "0b1c65ababb0e22076a00e323c0ee6fa99865759"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1jdjf1p941 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1jdjf1p941();
cov_1jdjf1p941().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_1jdjf1p941().f[0]++;
  cov_1jdjf1p941().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_1jdjf1p941().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_1jdjf1p941().s[3]++;
_export(exports, {
  get DELETE() {
    /* istanbul ignore next */
    cov_1jdjf1p941().f[1]++;
    cov_1jdjf1p941().s[4]++;
    return DELETE;
  },
  get GET() {
    /* istanbul ignore next */
    cov_1jdjf1p941().f[2]++;
    cov_1jdjf1p941().s[5]++;
    return GET;
  },
  get PUT() {
    /* istanbul ignore next */
    cov_1jdjf1p941().f[3]++;
    cov_1jdjf1p941().s[6]++;
    return PUT;
  }
});
const _server =
/* istanbul ignore next */
(cov_1jdjf1p941().s[7]++, require("next/server"));
const _plantinstances =
/* istanbul ignore next */
(cov_1jdjf1p941().s[8]++, require("../../../../lib/db/queries/plant-instances"));
const _plantschemas =
/* istanbul ignore next */
(cov_1jdjf1p941().s[9]++, require("../../../../lib/validation/plant-schemas"));
const _server1 =
/* istanbul ignore next */
(cov_1jdjf1p941().s[10]++, require("../../../../lib/auth/server"));
async function GET(request, {
  params
}) {
  /* istanbul ignore next */
  cov_1jdjf1p941().f[4]++;
  cov_1jdjf1p941().s[11]++;
  try {
    const {
      user
    } =
    /* istanbul ignore next */
    (cov_1jdjf1p941().s[12]++, await (0, _server1.validateRequest)());
    /* istanbul ignore next */
    cov_1jdjf1p941().s[13]++;
    if (!user) {
      /* istanbul ignore next */
      cov_1jdjf1p941().b[0][0]++;
      cov_1jdjf1p941().s[14]++;
      return _server.NextResponse.json({
        error: 'Unauthorized'
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_1jdjf1p941().b[0][1]++;
    }
    const resolvedParams =
    /* istanbul ignore next */
    (cov_1jdjf1p941().s[15]++, await params);
    const id =
    /* istanbul ignore next */
    (cov_1jdjf1p941().s[16]++, parseInt(resolvedParams.id, 10));
    /* istanbul ignore next */
    cov_1jdjf1p941().s[17]++;
    if (isNaN(id)) {
      /* istanbul ignore next */
      cov_1jdjf1p941().b[1][0]++;
      cov_1jdjf1p941().s[18]++;
      return _server.NextResponse.json({
        error: 'Invalid plant instance ID'
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1jdjf1p941().b[1][1]++;
    }
    const plantInstance =
    /* istanbul ignore next */
    (cov_1jdjf1p941().s[19]++, await _plantinstances.PlantInstanceQueries.getEnhancedById(id));
    /* istanbul ignore next */
    cov_1jdjf1p941().s[20]++;
    if (!plantInstance) {
      /* istanbul ignore next */
      cov_1jdjf1p941().b[2][0]++;
      cov_1jdjf1p941().s[21]++;
      return _server.NextResponse.json({
        error: 'Plant instance not found'
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_1jdjf1p941().b[2][1]++;
    }
    // Check if the plant instance belongs to the current user
    cov_1jdjf1p941().s[22]++;
    if (plantInstance.userId !== user.id) {
      /* istanbul ignore next */
      cov_1jdjf1p941().b[3][0]++;
      cov_1jdjf1p941().s[23]++;
      return _server.NextResponse.json({
        error: 'Forbidden'
      }, {
        status: 403
      });
    } else
    /* istanbul ignore next */
    {
      cov_1jdjf1p941().b[3][1]++;
    }
    cov_1jdjf1p941().s[24]++;
    return _server.NextResponse.json(plantInstance);
  } catch (error) {
    /* istanbul ignore next */
    cov_1jdjf1p941().s[25]++;
    console.error('Failed to get plant instance:', error);
    /* istanbul ignore next */
    cov_1jdjf1p941().s[26]++;
    return _server.NextResponse.json({
      error: 'Failed to get plant instance'
    }, {
      status: 500
    });
  }
}
async function PUT(request, {
  params
}) {
  /* istanbul ignore next */
  cov_1jdjf1p941().f[5]++;
  cov_1jdjf1p941().s[27]++;
  try {
    const {
      user
    } =
    /* istanbul ignore next */
    (cov_1jdjf1p941().s[28]++, await (0, _server1.validateRequest)());
    /* istanbul ignore next */
    cov_1jdjf1p941().s[29]++;
    if (!user) {
      /* istanbul ignore next */
      cov_1jdjf1p941().b[4][0]++;
      cov_1jdjf1p941().s[30]++;
      return _server.NextResponse.json({
        error: 'Unauthorized'
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_1jdjf1p941().b[4][1]++;
    }
    const resolvedParams =
    /* istanbul ignore next */
    (cov_1jdjf1p941().s[31]++, await params);
    const id =
    /* istanbul ignore next */
    (cov_1jdjf1p941().s[32]++, parseInt(resolvedParams.id, 10));
    /* istanbul ignore next */
    cov_1jdjf1p941().s[33]++;
    if (isNaN(id)) {
      /* istanbul ignore next */
      cov_1jdjf1p941().b[5][0]++;
      cov_1jdjf1p941().s[34]++;
      return _server.NextResponse.json({
        error: 'Invalid plant instance ID'
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1jdjf1p941().b[5][1]++;
    }
    // Check if the plant instance exists and belongs to the user
    const existingInstance =
    /* istanbul ignore next */
    (cov_1jdjf1p941().s[35]++, await _plantinstances.PlantInstanceQueries.getEnhancedById(id));
    /* istanbul ignore next */
    cov_1jdjf1p941().s[36]++;
    if (!existingInstance) {
      /* istanbul ignore next */
      cov_1jdjf1p941().b[6][0]++;
      cov_1jdjf1p941().s[37]++;
      return _server.NextResponse.json({
        error: 'Plant instance not found'
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_1jdjf1p941().b[6][1]++;
    }
    cov_1jdjf1p941().s[38]++;
    if (existingInstance.userId !== user.id) {
      /* istanbul ignore next */
      cov_1jdjf1p941().b[7][0]++;
      cov_1jdjf1p941().s[39]++;
      return _server.NextResponse.json({
        error: 'Forbidden'
      }, {
        status: 403
      });
    } else
    /* istanbul ignore next */
    {
      cov_1jdjf1p941().b[7][1]++;
    }
    // Handle FormData for file uploads
    const formData =
    /* istanbul ignore next */
    (cov_1jdjf1p941().s[40]++, await request.formData());
    // Helper function to convert file to base64
    /* istanbul ignore next */
    cov_1jdjf1p941().s[41]++;
    const fileToBase64 = async file => {
      /* istanbul ignore next */
      cov_1jdjf1p941().f[6]++;
      const bytes =
      /* istanbul ignore next */
      (cov_1jdjf1p941().s[42]++, await file.arrayBuffer());
      const buffer =
      /* istanbul ignore next */
      (cov_1jdjf1p941().s[43]++, Buffer.from(bytes));
      const base64 =
      /* istanbul ignore next */
      (cov_1jdjf1p941().s[44]++, buffer.toString('base64'));
      /* istanbul ignore next */
      cov_1jdjf1p941().s[45]++;
      return `data:${file.type};base64,${base64}`;
    };
    // Extract form fields
    const body =
    /* istanbul ignore next */
    (cov_1jdjf1p941().s[46]++, {});
    const imageFiles =
    /* istanbul ignore next */
    (cov_1jdjf1p941().s[47]++, []);
    /* istanbul ignore next */
    cov_1jdjf1p941().s[48]++;
    for (const [key, value] of formData.entries()) {
      /* istanbul ignore next */
      cov_1jdjf1p941().s[49]++;
      if (key.startsWith('existingImages[')) {
        /* istanbul ignore next */
        cov_1jdjf1p941().b[8][0]++;
        cov_1jdjf1p941().s[50]++;
        // Handle existing images array
        if (!body.existingImages) {
          /* istanbul ignore next */
          cov_1jdjf1p941().b[9][0]++;
          cov_1jdjf1p941().s[51]++;
          body.existingImages = [];
        } else
        /* istanbul ignore next */
        {
          cov_1jdjf1p941().b[9][1]++;
        }
        cov_1jdjf1p941().s[52]++;
        body.existingImages.push(value);
      } else {
        /* istanbul ignore next */
        cov_1jdjf1p941().b[8][1]++;
        cov_1jdjf1p941().s[53]++;
        if (key.startsWith('imageFiles[')) {
          /* istanbul ignore next */
          cov_1jdjf1p941().b[10][0]++;
          cov_1jdjf1p941().s[54]++;
          // Handle new image files
          if (value instanceof File) {
            /* istanbul ignore next */
            cov_1jdjf1p941().b[11][0]++;
            cov_1jdjf1p941().s[55]++;
            imageFiles.push(value);
          } else
          /* istanbul ignore next */
          {
            cov_1jdjf1p941().b[11][1]++;
          }
        } else {
          /* istanbul ignore next */
          cov_1jdjf1p941().b[10][1]++;
          cov_1jdjf1p941().s[56]++;
          // Handle regular form fields
          body[key] = value;
        }
      }
    }
    // Convert new image files to base64
    const newImageBase64s =
    /* istanbul ignore next */
    (cov_1jdjf1p941().s[57]++, await Promise.all(imageFiles.map(file => {
      /* istanbul ignore next */
      cov_1jdjf1p941().f[7]++;
      cov_1jdjf1p941().s[58]++;
      return fileToBase64(file);
    })));
    // Combine existing images with new images
    const allImages =
    /* istanbul ignore next */
    (cov_1jdjf1p941().s[59]++, [...(
    /* istanbul ignore next */
    (cov_1jdjf1p941().b[12][0]++, body.existingImages) ||
    /* istanbul ignore next */
    (cov_1jdjf1p941().b[12][1]++, [])), ...newImageBase64s]);
    // Convert string values to appropriate types
    /* istanbul ignore next */
    cov_1jdjf1p941().s[60]++;
    if (body.plantId) {
      /* istanbul ignore next */
      cov_1jdjf1p941().b[13][0]++;
      cov_1jdjf1p941().s[61]++;
      body.plantId = parseInt(body.plantId, 10);
    } else
    /* istanbul ignore next */
    {
      cov_1jdjf1p941().b[13][1]++;
    }
    cov_1jdjf1p941().s[62]++;
    if (body.isActive) {
      /* istanbul ignore next */
      cov_1jdjf1p941().b[14][0]++;
      cov_1jdjf1p941().s[63]++;
      body.isActive = body.isActive === 'true';
    } else
    /* istanbul ignore next */
    {
      cov_1jdjf1p941().b[14][1]++;
    }
    // Set the combined images array
    cov_1jdjf1p941().s[64]++;
    body.images = allImages;
    // Convert date strings to Date objects if they exist and are not empty
    const processedBody =
    /* istanbul ignore next */
    (cov_1jdjf1p941().s[65]++, {
      ...body,
      lastFertilized:
      /* istanbul ignore next */
      (cov_1jdjf1p941().b[16][0]++, body.lastFertilized) &&
      /* istanbul ignore next */
      (cov_1jdjf1p941().b[16][1]++, body.lastFertilized !== '') ?
      /* istanbul ignore next */
      (cov_1jdjf1p941().b[15][0]++, new Date(body.lastFertilized)) :
      /* istanbul ignore next */
      (cov_1jdjf1p941().b[15][1]++, null),
      lastRepot:
      /* istanbul ignore next */
      (cov_1jdjf1p941().b[18][0]++, body.lastRepot) &&
      /* istanbul ignore next */
      (cov_1jdjf1p941().b[18][1]++, body.lastRepot !== '') ?
      /* istanbul ignore next */
      (cov_1jdjf1p941().b[17][0]++, new Date(body.lastRepot)) :
      /* istanbul ignore next */
      (cov_1jdjf1p941().b[17][1]++, null)
    });
    // Validate the update data
    const updateData =
    /* istanbul ignore next */
    (cov_1jdjf1p941().s[66]++, _plantschemas.updatePlantInstanceSchema.parse({
      ...processedBody,
      id,
      userId: user.id
    }));
    // Remove id and userId from update data as they shouldn't be updated
    const {
      id: _,
      userId: __,
      ...dataToUpdate
    } =
    /* istanbul ignore next */
    (cov_1jdjf1p941().s[67]++, updateData);
    // Update the plant instance
    const updatedInstance =
    /* istanbul ignore next */
    (cov_1jdjf1p941().s[68]++, await _plantinstances.PlantInstanceQueries.update(id, dataToUpdate));
    // Get the enhanced plant instance with plant data
    const enhancedInstance =
    /* istanbul ignore next */
    (cov_1jdjf1p941().s[69]++, await _plantinstances.PlantInstanceQueries.getEnhancedById(updatedInstance.id));
    /* istanbul ignore next */
    cov_1jdjf1p941().s[70]++;
    return _server.NextResponse.json(enhancedInstance);
  } catch (error) {
    /* istanbul ignore next */
    cov_1jdjf1p941().s[71]++;
    console.error('Failed to update plant instance:', error);
    /* istanbul ignore next */
    cov_1jdjf1p941().s[72]++;
    if (
    /* istanbul ignore next */
    (cov_1jdjf1p941().b[20][0]++, error instanceof Error) &&
    /* istanbul ignore next */
    (cov_1jdjf1p941().b[20][1]++, error.message.includes('validation'))) {
      /* istanbul ignore next */
      cov_1jdjf1p941().b[19][0]++;
      cov_1jdjf1p941().s[73]++;
      return _server.NextResponse.json({
        error: 'Invalid plant instance data',
        details: error.message
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1jdjf1p941().b[19][1]++;
    }
    cov_1jdjf1p941().s[74]++;
    return _server.NextResponse.json({
      error: 'Failed to update plant instance'
    }, {
      status: 500
    });
  }
}
async function DELETE(request, {
  params
}) {
  /* istanbul ignore next */
  cov_1jdjf1p941().f[8]++;
  cov_1jdjf1p941().s[75]++;
  try {
    const {
      user
    } =
    /* istanbul ignore next */
    (cov_1jdjf1p941().s[76]++, await (0, _server1.validateRequest)());
    /* istanbul ignore next */
    cov_1jdjf1p941().s[77]++;
    if (!user) {
      /* istanbul ignore next */
      cov_1jdjf1p941().b[21][0]++;
      cov_1jdjf1p941().s[78]++;
      return _server.NextResponse.json({
        error: 'Unauthorized'
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_1jdjf1p941().b[21][1]++;
    }
    const resolvedParams =
    /* istanbul ignore next */
    (cov_1jdjf1p941().s[79]++, await params);
    const id =
    /* istanbul ignore next */
    (cov_1jdjf1p941().s[80]++, parseInt(resolvedParams.id, 10));
    /* istanbul ignore next */
    cov_1jdjf1p941().s[81]++;
    if (isNaN(id)) {
      /* istanbul ignore next */
      cov_1jdjf1p941().b[22][0]++;
      cov_1jdjf1p941().s[82]++;
      return _server.NextResponse.json({
        error: 'Invalid plant instance ID'
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1jdjf1p941().b[22][1]++;
    }
    // Check if the plant instance exists and belongs to the user
    const existingInstance =
    /* istanbul ignore next */
    (cov_1jdjf1p941().s[83]++, await _plantinstances.PlantInstanceQueries.getEnhancedById(id));
    /* istanbul ignore next */
    cov_1jdjf1p941().s[84]++;
    if (!existingInstance) {
      /* istanbul ignore next */
      cov_1jdjf1p941().b[23][0]++;
      cov_1jdjf1p941().s[85]++;
      return _server.NextResponse.json({
        error: 'Plant instance not found'
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_1jdjf1p941().b[23][1]++;
    }
    cov_1jdjf1p941().s[86]++;
    if (existingInstance.userId !== user.id) {
      /* istanbul ignore next */
      cov_1jdjf1p941().b[24][0]++;
      cov_1jdjf1p941().s[87]++;
      return _server.NextResponse.json({
        error: 'Forbidden'
      }, {
        status: 403
      });
    } else
    /* istanbul ignore next */
    {
      cov_1jdjf1p941().b[24][1]++;
    }
    // Delete the plant instance
    const deleted =
    /* istanbul ignore next */
    (cov_1jdjf1p941().s[88]++, await _plantinstances.PlantInstanceQueries.delete(id));
    /* istanbul ignore next */
    cov_1jdjf1p941().s[89]++;
    if (!deleted) {
      /* istanbul ignore next */
      cov_1jdjf1p941().b[25][0]++;
      cov_1jdjf1p941().s[90]++;
      return _server.NextResponse.json({
        error: 'Failed to delete plant instance'
      }, {
        status: 500
      });
    } else
    /* istanbul ignore next */
    {
      cov_1jdjf1p941().b[25][1]++;
    }
    cov_1jdjf1p941().s[91]++;
    return _server.NextResponse.json({
      success: true,
      message: 'Plant instance deleted successfully'
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1jdjf1p941().s[92]++;
    console.error('Failed to delete plant instance:', error);
    /* istanbul ignore next */
    cov_1jdjf1p941().s[93]++;
    return _server.NextResponse.json({
      error: 'Failed to delete plant instance'
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,