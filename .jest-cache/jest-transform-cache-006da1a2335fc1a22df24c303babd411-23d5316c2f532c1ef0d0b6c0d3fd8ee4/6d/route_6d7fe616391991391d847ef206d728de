d284092e2d7b5effd4c7e253a4c65e95
"use strict";

/* istanbul ignore next */
function cov_1npquit3yj() {
  var path = "/Users/stefanbekker/projects/fancy-planties/src/app/api/import/csv/[importId]/conflicts/route.ts";
  var hash = "cf00d628ba2ac5e36b32d87b5559bb6406638609";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/stefanbekker/projects/fancy-planties/src/app/api/import/csv/[importId]/conflicts/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 18,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 19
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 20
        }
      },
      "6": {
        start: {
          line: 19,
          column: 16
        },
        end: {
          line: 19,
          column: 38
        }
      },
      "7": {
        start: {
          line: 20,
          column: 17
        },
        end: {
          line: 20,
          column: 61
        }
      },
      "8": {
        start: {
          line: 21,
          column: 26
        },
        end: {
          line: 21,
          column: 86
        }
      },
      "9": {
        start: {
          line: 22,
          column: 13
        },
        end: {
          line: 22,
          column: 27
        }
      },
      "10": {
        start: {
          line: 23,
          column: 25
        },
        end: {
          line: 23,
          column: 65
        }
      },
      "11": {
        start: {
          line: 25,
          column: 4
        },
        end: {
          line: 62,
          column: 5
        }
      },
      "12": {
        start: {
          line: 26,
          column: 25
        },
        end: {
          line: 26,
          column: 62
        }
      },
      "13": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 33,
          column: 9
        }
      },
      "14": {
        start: {
          line: 28,
          column: 12
        },
        end: {
          line: 32,
          column: 15
        }
      },
      "15": {
        start: {
          line: 34,
          column: 31
        },
        end: {
          line: 34,
          column: 43
        }
      },
      "16": {
        start: {
          line: 35,
          column: 25
        },
        end: {
          line: 35,
          column: 84
        }
      },
      "17": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 42,
          column: 9
        }
      },
      "18": {
        start: {
          line: 37,
          column: 12
        },
        end: {
          line: 41,
          column: 15
        }
      },
      "19": {
        start: {
          line: 43,
          column: 8
        },
        end: {
          line: 49,
          column: 9
        }
      },
      "20": {
        start: {
          line: 44,
          column: 12
        },
        end: {
          line: 48,
          column: 15
        }
      },
      "21": {
        start: {
          line: 50,
          column: 28
        },
        end: {
          line: 50,
          column: 93
        }
      },
      "22": {
        start: {
          line: 51,
          column: 8
        },
        end: {
          line: 54,
          column: 11
        }
      },
      "23": {
        start: {
          line: 56,
          column: 8
        },
        end: {
          line: 56,
          column: 53
        }
      },
      "24": {
        start: {
          line: 57,
          column: 8
        },
        end: {
          line: 61,
          column: 11
        }
      },
      "25": {
        start: {
          line: 65,
          column: 4
        },
        end: {
          line: 125,
          column: 5
        }
      },
      "26": {
        start: {
          line: 66,
          column: 25
        },
        end: {
          line: 66,
          column: 62
        }
      },
      "27": {
        start: {
          line: 67,
          column: 8
        },
        end: {
          line: 73,
          column: 9
        }
      },
      "28": {
        start: {
          line: 68,
          column: 12
        },
        end: {
          line: 72,
          column: 15
        }
      },
      "29": {
        start: {
          line: 74,
          column: 31
        },
        end: {
          line: 74,
          column: 43
        }
      },
      "30": {
        start: {
          line: 75,
          column: 25
        },
        end: {
          line: 75,
          column: 84
        }
      },
      "31": {
        start: {
          line: 76,
          column: 8
        },
        end: {
          line: 82,
          column: 9
        }
      },
      "32": {
        start: {
          line: 77,
          column: 12
        },
        end: {
          line: 81,
          column: 15
        }
      },
      "33": {
        start: {
          line: 83,
          column: 8
        },
        end: {
          line: 89,
          column: 9
        }
      },
      "34": {
        start: {
          line: 84,
          column: 12
        },
        end: {
          line: 88,
          column: 15
        }
      },
      "35": {
        start: {
          line: 90,
          column: 21
        },
        end: {
          line: 90,
          column: 41
        }
      },
      "36": {
        start: {
          line: 92,
          column: 30
        },
        end: {
          line: 103,
          column: 10
        }
      },
      "37": {
        start: {
          line: 104,
          column: 32
        },
        end: {
          line: 104,
          column: 57
        }
      },
      "38": {
        start: {
          line: 106,
          column: 24
        },
        end: {
          line: 106,
          column: 101
        }
      },
      "39": {
        start: {
          line: 107,
          column: 8
        },
        end: {
          line: 109,
          column: 11
        }
      },
      "40": {
        start: {
          line: 111,
          column: 8
        },
        end: {
          line: 111,
          column: 57
        }
      },
      "41": {
        start: {
          line: 112,
          column: 8
        },
        end: {
          line: 119,
          column: 9
        }
      },
      "42": {
        start: {
          line: 113,
          column: 12
        },
        end: {
          line: 118,
          column: 15
        }
      },
      "43": {
        start: {
          line: 120,
          column: 8
        },
        end: {
          line: 124,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        },
        loc: {
          start: {
            line: 12,
            column: 15
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 16
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "GET",
        decl: {
          start: {
            line: 24,
            column: 15
          },
          end: {
            line: 24,
            column: 18
          }
        },
        loc: {
          start: {
            line: 24,
            column: 40
          },
          end: {
            line: 63,
            column: 1
          }
        },
        line: 24
      },
      "4": {
        name: "POST",
        decl: {
          start: {
            line: 64,
            column: 15
          },
          end: {
            line: 64,
            column: 19
          }
        },
        loc: {
          start: {
            line: 64,
            column: 41
          },
          end: {
            line: 126,
            column: 1
          }
        },
        line: 64
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 27,
            column: 8
          },
          end: {
            line: 33,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 27,
            column: 8
          },
          end: {
            line: 33,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 27
      },
      "1": {
        loc: {
          start: {
            line: 36,
            column: 8
          },
          end: {
            line: 42,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 36,
            column: 8
          },
          end: {
            line: 42,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 36
      },
      "2": {
        loc: {
          start: {
            line: 43,
            column: 8
          },
          end: {
            line: 49,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 43,
            column: 8
          },
          end: {
            line: 49,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 43
      },
      "3": {
        loc: {
          start: {
            line: 67,
            column: 8
          },
          end: {
            line: 73,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 67,
            column: 8
          },
          end: {
            line: 73,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 67
      },
      "4": {
        loc: {
          start: {
            line: 76,
            column: 8
          },
          end: {
            line: 82,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 76,
            column: 8
          },
          end: {
            line: 82,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 76
      },
      "5": {
        loc: {
          start: {
            line: 83,
            column: 8
          },
          end: {
            line: 89,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 83,
            column: 8
          },
          end: {
            line: 89,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 83
      },
      "6": {
        loc: {
          start: {
            line: 112,
            column: 8
          },
          end: {
            line: 119,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 112,
            column: 8
          },
          end: {
            line: 119,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 112
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/stefanbekker/projects/fancy-planties/src/app/api/import/csv/[importId]/conflicts/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport { validateRequest } from '@/lib/auth/server';\nimport { CSVImportService } from '@/lib/services/csv-import-service';\nimport { z } from 'zod';\n\nconst csvImportService = new CSVImportService();\n\n// GET /api/import/csv/[importId]/conflicts - Get suggested conflict resolutions\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: Promise<{ importId: string }> }\n) {\n  try {\n    const { user } = await validateRequest();\n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const resolvedParams = await params;\n    const progress = csvImportService.getImportProgress(resolvedParams.importId);\n    \n    if (!progress) {\n      return NextResponse.json({ error: 'Import not found' }, { status: 404 });\n    }\n\n    if (progress.userId !== user.id) {\n      return NextResponse.json({ error: 'Forbidden' }, { status: 403 });\n    }\n\n    const suggestions = csvImportService.getSuggestedResolutions(resolvedParams.importId);\n    \n    return NextResponse.json({ \n      conflicts: progress.conflicts,\n      suggestions \n    });\n\n  } catch (error) {\n    console.error('Get conflicts error:', error);\n    return NextResponse.json(\n      { error: 'Failed to get conflicts' },\n      { status: 500 }\n    );\n  }\n}\n\n// POST /api/import/csv/[importId]/conflicts - Resolve conflicts\nexport async function POST(\n  request: NextRequest,\n  { params }: { params: Promise<{ importId: string }> }\n) {\n  try {\n    const { user } = await validateRequest();\n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const resolvedParams = await params;\n    const progress = csvImportService.getImportProgress(resolvedParams.importId);\n    \n    if (!progress) {\n      return NextResponse.json({ error: 'Import not found' }, { status: 404 });\n    }\n\n    if (progress.userId !== user.id) {\n      return NextResponse.json({ error: 'Forbidden' }, { status: 403 });\n    }\n\n    const body = await request.json();\n    \n    // Validate request body\n    const requestSchema = z.object({\n      resolutions: z.array(z.object({\n        conflictId: z.string(),\n        action: z.enum(['skip', 'merge', 'create_new', 'manual_review']),\n        data: z.any().optional(),\n      })),\n    });\n\n    const { resolutions } = requestSchema.parse(body);\n\n    // Resolve conflicts\n    const summary = await csvImportService.resolveConflicts(resolvedParams.importId, resolutions);\n    \n    return NextResponse.json({ summary });\n\n  } catch (error) {\n    console.error('Resolve conflicts error:', error);\n    \n    if (error instanceof z.ZodError) {\n      return NextResponse.json(\n        { error: 'Validation error', details: error.issues },\n        { status: 400 }\n      );\n    }\n\n    return NextResponse.json(\n      { error: 'Failed to resolve conflicts' },\n      { status: 500 }\n    );\n  }\n}"],
      names: ["GET", "POST", "csvImportService", "CSVImportService", "request", "params", "user", "validateRequest", "NextResponse", "json", "error", "status", "resolvedParams", "progress", "getImportProgress", "importId", "userId", "id", "suggestions", "getSuggestedResolutions", "conflicts", "console", "body", "requestSchema", "z", "object", "resolutions", "array", "conflictId", "string", "action", "enum", "data", "any", "optional", "parse", "summary", "resolveConflicts", "ZodError", "details", "issues"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "cf00d628ba2ac5e36b32d87b5559bb6406638609"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1npquit3yj = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1npquit3yj();
cov_1npquit3yj().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_1npquit3yj().f[0]++;
  cov_1npquit3yj().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_1npquit3yj().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_1npquit3yj().s[3]++;
_export(exports, {
  get GET() {
    /* istanbul ignore next */
    cov_1npquit3yj().f[1]++;
    cov_1npquit3yj().s[4]++;
    return GET;
  },
  get POST() {
    /* istanbul ignore next */
    cov_1npquit3yj().f[2]++;
    cov_1npquit3yj().s[5]++;
    return POST;
  }
});
const _server =
/* istanbul ignore next */
(cov_1npquit3yj().s[6]++, require("next/server"));
const _server1 =
/* istanbul ignore next */
(cov_1npquit3yj().s[7]++, require("../../../../../../lib/auth/server"));
const _csvimportservice =
/* istanbul ignore next */
(cov_1npquit3yj().s[8]++, require("../../../../../../lib/services/csv-import-service"));
const _zod =
/* istanbul ignore next */
(cov_1npquit3yj().s[9]++, require("zod"));
const csvImportService =
/* istanbul ignore next */
(cov_1npquit3yj().s[10]++, new _csvimportservice.CSVImportService());
async function GET(request, {
  params
}) {
  /* istanbul ignore next */
  cov_1npquit3yj().f[3]++;
  cov_1npquit3yj().s[11]++;
  try {
    const {
      user
    } =
    /* istanbul ignore next */
    (cov_1npquit3yj().s[12]++, await (0, _server1.validateRequest)());
    /* istanbul ignore next */
    cov_1npquit3yj().s[13]++;
    if (!user) {
      /* istanbul ignore next */
      cov_1npquit3yj().b[0][0]++;
      cov_1npquit3yj().s[14]++;
      return _server.NextResponse.json({
        error: 'Unauthorized'
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_1npquit3yj().b[0][1]++;
    }
    const resolvedParams =
    /* istanbul ignore next */
    (cov_1npquit3yj().s[15]++, await params);
    const progress =
    /* istanbul ignore next */
    (cov_1npquit3yj().s[16]++, csvImportService.getImportProgress(resolvedParams.importId));
    /* istanbul ignore next */
    cov_1npquit3yj().s[17]++;
    if (!progress) {
      /* istanbul ignore next */
      cov_1npquit3yj().b[1][0]++;
      cov_1npquit3yj().s[18]++;
      return _server.NextResponse.json({
        error: 'Import not found'
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_1npquit3yj().b[1][1]++;
    }
    cov_1npquit3yj().s[19]++;
    if (progress.userId !== user.id) {
      /* istanbul ignore next */
      cov_1npquit3yj().b[2][0]++;
      cov_1npquit3yj().s[20]++;
      return _server.NextResponse.json({
        error: 'Forbidden'
      }, {
        status: 403
      });
    } else
    /* istanbul ignore next */
    {
      cov_1npquit3yj().b[2][1]++;
    }
    const suggestions =
    /* istanbul ignore next */
    (cov_1npquit3yj().s[21]++, csvImportService.getSuggestedResolutions(resolvedParams.importId));
    /* istanbul ignore next */
    cov_1npquit3yj().s[22]++;
    return _server.NextResponse.json({
      conflicts: progress.conflicts,
      suggestions
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1npquit3yj().s[23]++;
    console.error('Get conflicts error:', error);
    /* istanbul ignore next */
    cov_1npquit3yj().s[24]++;
    return _server.NextResponse.json({
      error: 'Failed to get conflicts'
    }, {
      status: 500
    });
  }
}
async function POST(request, {
  params
}) {
  /* istanbul ignore next */
  cov_1npquit3yj().f[4]++;
  cov_1npquit3yj().s[25]++;
  try {
    const {
      user
    } =
    /* istanbul ignore next */
    (cov_1npquit3yj().s[26]++, await (0, _server1.validateRequest)());
    /* istanbul ignore next */
    cov_1npquit3yj().s[27]++;
    if (!user) {
      /* istanbul ignore next */
      cov_1npquit3yj().b[3][0]++;
      cov_1npquit3yj().s[28]++;
      return _server.NextResponse.json({
        error: 'Unauthorized'
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_1npquit3yj().b[3][1]++;
    }
    const resolvedParams =
    /* istanbul ignore next */
    (cov_1npquit3yj().s[29]++, await params);
    const progress =
    /* istanbul ignore next */
    (cov_1npquit3yj().s[30]++, csvImportService.getImportProgress(resolvedParams.importId));
    /* istanbul ignore next */
    cov_1npquit3yj().s[31]++;
    if (!progress) {
      /* istanbul ignore next */
      cov_1npquit3yj().b[4][0]++;
      cov_1npquit3yj().s[32]++;
      return _server.NextResponse.json({
        error: 'Import not found'
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_1npquit3yj().b[4][1]++;
    }
    cov_1npquit3yj().s[33]++;
    if (progress.userId !== user.id) {
      /* istanbul ignore next */
      cov_1npquit3yj().b[5][0]++;
      cov_1npquit3yj().s[34]++;
      return _server.NextResponse.json({
        error: 'Forbidden'
      }, {
        status: 403
      });
    } else
    /* istanbul ignore next */
    {
      cov_1npquit3yj().b[5][1]++;
    }
    const body =
    /* istanbul ignore next */
    (cov_1npquit3yj().s[35]++, await request.json());
    // Validate request body
    const requestSchema =
    /* istanbul ignore next */
    (cov_1npquit3yj().s[36]++, _zod.z.object({
      resolutions: _zod.z.array(_zod.z.object({
        conflictId: _zod.z.string(),
        action: _zod.z.enum(['skip', 'merge', 'create_new', 'manual_review']),
        data: _zod.z.any().optional()
      }))
    }));
    const {
      resolutions
    } =
    /* istanbul ignore next */
    (cov_1npquit3yj().s[37]++, requestSchema.parse(body));
    // Resolve conflicts
    const summary =
    /* istanbul ignore next */
    (cov_1npquit3yj().s[38]++, await csvImportService.resolveConflicts(resolvedParams.importId, resolutions));
    /* istanbul ignore next */
    cov_1npquit3yj().s[39]++;
    return _server.NextResponse.json({
      summary
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1npquit3yj().s[40]++;
    console.error('Resolve conflicts error:', error);
    /* istanbul ignore next */
    cov_1npquit3yj().s[41]++;
    if (error instanceof _zod.z.ZodError) {
      /* istanbul ignore next */
      cov_1npquit3yj().b[6][0]++;
      cov_1npquit3yj().s[42]++;
      return _server.NextResponse.json({
        error: 'Validation error',
        details: error.issues
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1npquit3yj().b[6][1]++;
    }
    cov_1npquit3yj().s[43]++;
    return _server.NextResponse.json({
      error: 'Failed to resolve conflicts'
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,