489d31477dd74a46aa4d2590930aef9b
"use strict";

/* istanbul ignore next */
function cov_2f3vt1axr1() {
  var path = "/Users/stefanbekker/projects/fancy-planties/src/lib/services/resend-email-service.ts";
  var hash = "de40ee712111333a006e55573fb59ee2e9aa233c";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/stefanbekker/projects/fancy-planties/src/lib/services/resend-email-service.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 18,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 34
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 34
        }
      },
      "6": {
        start: {
          line: 19,
          column: 0
        },
        end: {
          line: 19,
          column: 23
        }
      },
      "7": {
        start: {
          line: 20,
          column: 16
        },
        end: {
          line: 20,
          column: 33
        }
      },
      "8": {
        start: {
          line: 21,
          column: 22
        },
        end: {
          line: 21,
          column: 48
        }
      },
      "9": {
        start: {
          line: 22,
          column: 29
        },
        end: {
          line: 22,
          column: 63
        }
      },
      "10": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 56
        }
      },
      "11": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 26,
          column: 29
        }
      },
      "12": {
        start: {
          line: 29,
          column: 26
        },
        end: {
          line: 29,
          column: 36
        }
      },
      "13": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 77,
          column: 9
        }
      },
      "14": {
        start: {
          line: 31,
          column: 36
        },
        end: {
          line: 39,
          column: 14
        }
      },
      "15": {
        start: {
          line: 40,
          column: 33
        },
        end: {
          line: 40,
          column: 55
        }
      },
      "16": {
        start: {
          line: 41,
          column: 12
        },
        end: {
          line: 58,
          column: 13
        }
      },
      "17": {
        start: {
          line: 42,
          column: 16
        },
        end: {
          line: 42,
          column: 58
        }
      },
      "18": {
        start: {
          line: 45,
          column: 16
        },
        end: {
          line: 51,
          column: 17
        }
      },
      "19": {
        start: {
          line: 46,
          column: 20
        },
        end: {
          line: 46,
          column: 111
        }
      },
      "20": {
        start: {
          line: 47,
          column: 23
        },
        end: {
          line: 51,
          column: 17
        }
      },
      "21": {
        start: {
          line: 48,
          column: 20
        },
        end: {
          line: 48,
          column: 111
        }
      },
      "22": {
        start: {
          line: 50,
          column: 20
        },
        end: {
          line: 50,
          column: 120
        }
      },
      "23": {
        start: {
          line: 53,
          column: 16
        },
        end: {
          line: 56,
          column: 33
        }
      },
      "24": {
        start: {
          line: 57,
          column: 16
        },
        end: {
          line: 57,
          column: 33
        }
      },
      "25": {
        start: {
          line: 60,
          column: 12
        },
        end: {
          line: 60,
          column: 81
        }
      },
      "26": {
        start: {
          line: 61,
          column: 12
        },
        end: {
          line: 61,
          column: 75
        }
      },
      "27": {
        start: {
          line: 62,
          column: 12
        },
        end: {
          line: 62,
          column: 24
        }
      },
      "28": {
        start: {
          line: 64,
          column: 33
        },
        end: {
          line: 64,
          column: 55
        }
      },
      "29": {
        start: {
          line: 65,
          column: 12
        },
        end: {
          line: 68,
          column: 13
        }
      },
      "30": {
        start: {
          line: 67,
          column: 16
        },
        end: {
          line: 67,
          column: 28
        }
      },
      "31": {
        start: {
          line: 69,
          column: 12
        },
        end: {
          line: 69,
          column: 65
        }
      },
      "32": {
        start: {
          line: 70,
          column: 33
        },
        end: {
          line: 70,
          column: 163
        }
      },
      "33": {
        start: {
          line: 72,
          column: 12
        },
        end: {
          line: 75,
          column: 29
        }
      },
      "34": {
        start: {
          line: 76,
          column: 12
        },
        end: {
          line: 76,
          column: 31
        }
      },
      "35": {
        start: {
          line: 80,
          column: 8
        },
        end: {
          line: 155,
          column: 6
        }
      },
      "36": {
        start: {
          line: 158,
          column: 8
        },
        end: {
          line: 172,
          column: 13
        }
      },
      "37": {
        start: {
          line: 176,
          column: 19
        },
        end: {
          line: 180,
          column: 5
        }
      },
      "38": {
        start: {
          line: 181,
          column: 4
        },
        end: {
          line: 183,
          column: 5
        }
      },
      "39": {
        start: {
          line: 182,
          column: 8
        },
        end: {
          line: 182,
          column: 75
        }
      },
      "40": {
        start: {
          line: 184,
          column: 4
        },
        end: {
          line: 184,
          column: 42
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        },
        loc: {
          start: {
            line: 12,
            column: 30
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 30
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 24,
            column: 4
          },
          end: {
            line: 24,
            column: 5
          }
        },
        loc: {
          start: {
            line: 24,
            column: 23
          },
          end: {
            line: 27,
            column: 5
          }
        },
        line: 24
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 28,
            column: 4
          },
          end: {
            line: 28,
            column: 5
          }
        },
        loc: {
          start: {
            line: 28,
            column: 51
          },
          end: {
            line: 78,
            column: 5
          }
        },
        line: 28
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 79,
            column: 4
          },
          end: {
            line: 79,
            column: 5
          }
        },
        loc: {
          start: {
            line: 79,
            column: 50
          },
          end: {
            line: 156,
            column: 5
          }
        },
        line: 79
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 157,
            column: 4
          },
          end: {
            line: 157,
            column: 5
          }
        },
        loc: {
          start: {
            line: 157,
            column: 46
          },
          end: {
            line: 173,
            column: 5
          }
        },
        line: 157
      },
      "7": {
        name: "createEmailService",
        decl: {
          start: {
            line: 175,
            column: 9
          },
          end: {
            line: 175,
            column: 27
          }
        },
        loc: {
          start: {
            line: 175,
            column: 30
          },
          end: {
            line: 185,
            column: 1
          }
        },
        line: 175
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 41,
            column: 12
          },
          end: {
            line: 58,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 41,
            column: 12
          },
          end: {
            line: 58,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 41
      },
      "1": {
        loc: {
          start: {
            line: 45,
            column: 16
          },
          end: {
            line: 51,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 45,
            column: 16
          },
          end: {
            line: 51,
            column: 17
          }
        }, {
          start: {
            line: 47,
            column: 23
          },
          end: {
            line: 51,
            column: 17
          }
        }],
        line: 45
      },
      "2": {
        loc: {
          start: {
            line: 45,
            column: 20
          },
          end: {
            line: 45,
            column: 88
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 45,
            column: 20
          },
          end: {
            line: 45,
            column: 52
          }
        }, {
          start: {
            line: 45,
            column: 56
          },
          end: {
            line: 45,
            column: 88
          }
        }],
        line: 45
      },
      "3": {
        loc: {
          start: {
            line: 47,
            column: 23
          },
          end: {
            line: 51,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 47,
            column: 23
          },
          end: {
            line: 51,
            column: 17
          }
        }, {
          start: {
            line: 49,
            column: 23
          },
          end: {
            line: 51,
            column: 17
          }
        }],
        line: 47
      },
      "4": {
        loc: {
          start: {
            line: 47,
            column: 27
          },
          end: {
            line: 47,
            column: 97
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 47,
            column: 27
          },
          end: {
            line: 47,
            column: 61
          }
        }, {
          start: {
            line: 47,
            column: 65
          },
          end: {
            line: 47,
            column: 97
          }
        }],
        line: 47
      },
      "5": {
        loc: {
          start: {
            line: 65,
            column: 12
          },
          end: {
            line: 68,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 65,
            column: 12
          },
          end: {
            line: 68,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 65
      },
      "6": {
        loc: {
          start: {
            line: 70,
            column: 87
          },
          end: {
            line: 70,
            column: 143
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 70,
            column: 112
          },
          end: {
            line: 70,
            column: 125
          }
        }, {
          start: {
            line: 70,
            column: 128
          },
          end: {
            line: 70,
            column: 143
          }
        }],
        line: 70
      },
      "7": {
        loc: {
          start: {
            line: 178,
            column: 19
          },
          end: {
            line: 178,
            column: 89
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 178,
            column: 19
          },
          end: {
            line: 178,
            column: 41
          }
        }, {
          start: {
            line: 178,
            column: 45
          },
          end: {
            line: 178,
            column: 89
          }
        }],
        line: 178
      },
      "8": {
        loc: {
          start: {
            line: 179,
            column: 18
          },
          end: {
            line: 179,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 179,
            column: 18
          },
          end: {
            line: 179,
            column: 39
          }
        }, {
          start: {
            line: 179,
            column: 43
          },
          end: {
            line: 179,
            column: 59
          }
        }],
        line: 179
      },
      "9": {
        loc: {
          start: {
            line: 181,
            column: 4
          },
          end: {
            line: 183,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 181,
            column: 4
          },
          end: {
            line: 183,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 181
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/stefanbekker/projects/fancy-planties/src/lib/services/resend-email-service.ts"],
      sourcesContent: ["import 'server-only';\nimport { Resend } from 'resend';\nimport { EmailService, EmailConfig, EmailServiceError } from './email-service';\nimport { emailServiceMonitor } from './email-service-monitor';\n\nexport class ResendEmailService implements EmailService {\n  private resend: Resend;\n  private config: EmailConfig;\n\n  constructor(config: EmailConfig) {\n    this.resend = new Resend(config.apiKey);\n    this.config = config;\n  }\n\n  async sendVerificationEmail(email: string, code: string, name: string): Promise<boolean> {\n    const startTime = Date.now();\n    \n    try {\n      const { data, error } = await this.resend.emails.send({\n        from: `${this.config.fromName} <${this.config.fromEmail}>`,\n        to: [email],\n        subject: 'Verify your email address',\n        html: this.generateVerificationEmailTemplate(code, name),\n        text: this.generateVerificationEmailText(code, name),\n      });\n\n      const responseTime = Date.now() - startTime;\n\n      if (error) {\n        console.error('Resend API error:', error);\n        \n        // Map Resend errors to our error types\n        let emailError: EmailServiceError;\n        if (error.message?.includes('quota') || error.message?.includes('limit')) {\n          emailError = new EmailServiceError('Email quota exceeded', 'QUOTA_EXCEEDED');\n        } else if (error.message?.includes('invalid') && error.message?.includes('email')) {\n          emailError = new EmailServiceError('Invalid email address', 'INVALID_EMAIL');\n        } else {\n          emailError = new EmailServiceError(`Resend API error: ${error.message}`, 'API_ERROR');\n        }\n        \n        // Record failure in monitor\n        emailServiceMonitor.recordFailure(\n          { message: emailError.message, code: emailError.code },\n          responseTime\n        );\n        \n        throw emailError;\n      }\n\n      // Record success in monitor\n      emailServiceMonitor.recordSuccess(responseTime);\n      \n      console.log('Verification email sent successfully:', data?.id);\n      return true;\n      \n    } catch (error) {\n      const responseTime = Date.now() - startTime;\n      \n      if (error instanceof EmailServiceError) {\n        // Already recorded in monitor above\n        throw error;\n      }\n      \n      console.error('Network error sending email:', error);\n      const networkError = new EmailServiceError(\n        `Network error: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        'NETWORK_ERROR'\n      );\n      \n      // Record network error in monitor\n      emailServiceMonitor.recordFailure(\n        { message: networkError.message, code: networkError.code },\n        responseTime\n      );\n      \n      throw networkError;\n    }\n  }\n\n  private generateVerificationEmailTemplate(code: string, name: string): string {\n    return `\n      <!DOCTYPE html>\n      <html lang=\"en\">\n      <head>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>Verify Your Email</title>\n        <style>\n          body {\n            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n            line-height: 1.6;\n            color: #333;\n            max-width: 600px;\n            margin: 0 auto;\n            padding: 20px;\n          }\n          .header {\n            text-align: center;\n            margin-bottom: 30px;\n          }\n          .logo {\n            font-size: 24px;\n            font-weight: bold;\n            color: #22c55e;\n            margin-bottom: 10px;\n          }\n          .verification-code {\n            background: #f8f9fa;\n            border: 2px solid #e9ecef;\n            border-radius: 8px;\n            padding: 20px;\n            text-align: center;\n            margin: 30px 0;\n          }\n          .code {\n            font-size: 32px;\n            font-weight: bold;\n            letter-spacing: 4px;\n            color: #22c55e;\n            font-family: 'Courier New', monospace;\n          }\n          .footer {\n            margin-top: 30px;\n            padding-top: 20px;\n            border-top: 1px solid #e9ecef;\n            font-size: 14px;\n            color: #6c757d;\n          }\n        </style>\n      </head>\n      <body>\n        <div class=\"header\">\n          <div class=\"logo\">\uD83C\uDF31 Fancy Planties</div>\n          <h1>Verify Your Email Address</h1>\n        </div>\n        \n        <p>Hi ${name},</p>\n        \n        <p>Welcome to Fancy Planties! To complete your account setup, please verify your email address by entering the verification code below:</p>\n        \n        <div class=\"verification-code\">\n          <div class=\"code\">${code}</div>\n          <p style=\"margin: 10px 0 0 0; font-size: 14px; color: #6c757d;\">\n            This code expires in 10 minutes\n          </p>\n        </div>\n        \n        <p>If you didn't create an account with Fancy Planties, you can safely ignore this email.</p>\n        \n        <div class=\"footer\">\n          <p>This is an automated message from Fancy Planties. Please do not reply to this email.</p>\n          <p>Need help? Contact us at support@fancy-planties.cloudagrapher.com</p>\n        </div>\n      </body>\n      </html>\n    `;\n  }\n\n  private generateVerificationEmailText(code: string, name: string): string {\n    return `\nHi ${name},\n\nWelcome to Fancy Planties! To complete your account setup, please verify your email address by entering the verification code below:\n\nVerification Code: ${code}\n\nThis code expires in 10 minutes.\n\nIf you didn't create an account with Fancy Planties, you can safely ignore this email.\n\n---\nThis is an automated message from Fancy Planties. Please do not reply to this email.\nNeed help? Contact us at support@fancy-planties.cloudagrapher.com\n    `.trim();\n  }\n}\n\n// Factory function to create email service instance\nexport function createEmailService(): EmailService {\n  const config: EmailConfig = {\n    apiKey: process.env.RESEND_API_KEY!,\n    fromEmail: process.env.FROM_EMAIL || 'send.mail.fancy-planties.cloudagrapher.com',\n    fromName: process.env.FROM_NAME || 'Fancy Planties',\n  };\n\n  if (!config.apiKey) {\n    throw new Error('RESEND_API_KEY environment variable is required');\n  }\n\n  return new ResendEmailService(config);\n}"],
      names: ["ResendEmailService", "createEmailService", "config", "resend", "Resend", "apiKey", "sendVerificationEmail", "email", "code", "name", "startTime", "Date", "now", "data", "error", "emails", "send", "from", "fromName", "fromEmail", "to", "subject", "html", "generateVerificationEmailTemplate", "text", "generateVerificationEmailText", "responseTime", "console", "emailError", "message", "includes", "EmailServiceError", "emailServiceMonitor", "recordFailure", "recordSuccess", "log", "id", "networkError", "Error", "trim", "process", "env", "RESEND_API_KEY", "FROM_EMAIL", "FROM_NAME"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "de40ee712111333a006e55573fb59ee2e9aa233c"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2f3vt1axr1 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2f3vt1axr1();
cov_2f3vt1axr1().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_2f3vt1axr1().f[0]++;
  cov_2f3vt1axr1().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_2f3vt1axr1().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_2f3vt1axr1().s[3]++;
_export(exports, {
  get ResendEmailService() {
    /* istanbul ignore next */
    cov_2f3vt1axr1().f[1]++;
    cov_2f3vt1axr1().s[4]++;
    return ResendEmailService;
  },
  get createEmailService() {
    /* istanbul ignore next */
    cov_2f3vt1axr1().f[2]++;
    cov_2f3vt1axr1().s[5]++;
    return createEmailService;
  }
});
/* istanbul ignore next */
cov_2f3vt1axr1().s[6]++;
require("server-only");
const _resend =
/* istanbul ignore next */
(cov_2f3vt1axr1().s[7]++, require("resend"));
const _emailservice =
/* istanbul ignore next */
(cov_2f3vt1axr1().s[8]++, require("./email-service"));
const _emailservicemonitor =
/* istanbul ignore next */
(cov_2f3vt1axr1().s[9]++, require("./email-service-monitor"));
class ResendEmailService {
  constructor(config) {
    /* istanbul ignore next */
    cov_2f3vt1axr1().f[3]++;
    cov_2f3vt1axr1().s[10]++;
    this.resend = new _resend.Resend(config.apiKey);
    /* istanbul ignore next */
    cov_2f3vt1axr1().s[11]++;
    this.config = config;
  }
  async sendVerificationEmail(email, code, name) {
    /* istanbul ignore next */
    cov_2f3vt1axr1().f[4]++;
    const startTime =
    /* istanbul ignore next */
    (cov_2f3vt1axr1().s[12]++, Date.now());
    /* istanbul ignore next */
    cov_2f3vt1axr1().s[13]++;
    try {
      const {
        data,
        error
      } =
      /* istanbul ignore next */
      (cov_2f3vt1axr1().s[14]++, await this.resend.emails.send({
        from: `${this.config.fromName} <${this.config.fromEmail}>`,
        to: [email],
        subject: 'Verify your email address',
        html: this.generateVerificationEmailTemplate(code, name),
        text: this.generateVerificationEmailText(code, name)
      }));
      const responseTime =
      /* istanbul ignore next */
      (cov_2f3vt1axr1().s[15]++, Date.now() - startTime);
      /* istanbul ignore next */
      cov_2f3vt1axr1().s[16]++;
      if (error) {
        /* istanbul ignore next */
        cov_2f3vt1axr1().b[0][0]++;
        cov_2f3vt1axr1().s[17]++;
        console.error('Resend API error:', error);
        // Map Resend errors to our error types
        let emailError;
        /* istanbul ignore next */
        cov_2f3vt1axr1().s[18]++;
        if (
        /* istanbul ignore next */
        (cov_2f3vt1axr1().b[2][0]++, error.message?.includes('quota')) ||
        /* istanbul ignore next */
        (cov_2f3vt1axr1().b[2][1]++, error.message?.includes('limit'))) {
          /* istanbul ignore next */
          cov_2f3vt1axr1().b[1][0]++;
          cov_2f3vt1axr1().s[19]++;
          emailError = new _emailservice.EmailServiceError('Email quota exceeded', 'QUOTA_EXCEEDED');
        } else {
          /* istanbul ignore next */
          cov_2f3vt1axr1().b[1][1]++;
          cov_2f3vt1axr1().s[20]++;
          if (
          /* istanbul ignore next */
          (cov_2f3vt1axr1().b[4][0]++, error.message?.includes('invalid')) &&
          /* istanbul ignore next */
          (cov_2f3vt1axr1().b[4][1]++, error.message?.includes('email'))) {
            /* istanbul ignore next */
            cov_2f3vt1axr1().b[3][0]++;
            cov_2f3vt1axr1().s[21]++;
            emailError = new _emailservice.EmailServiceError('Invalid email address', 'INVALID_EMAIL');
          } else {
            /* istanbul ignore next */
            cov_2f3vt1axr1().b[3][1]++;
            cov_2f3vt1axr1().s[22]++;
            emailError = new _emailservice.EmailServiceError(`Resend API error: ${error.message}`, 'API_ERROR');
          }
        }
        // Record failure in monitor
        /* istanbul ignore next */
        cov_2f3vt1axr1().s[23]++;
        _emailservicemonitor.emailServiceMonitor.recordFailure({
          message: emailError.message,
          code: emailError.code
        }, responseTime);
        /* istanbul ignore next */
        cov_2f3vt1axr1().s[24]++;
        throw emailError;
      } else
      /* istanbul ignore next */
      {
        cov_2f3vt1axr1().b[0][1]++;
      }
      // Record success in monitor
      cov_2f3vt1axr1().s[25]++;
      _emailservicemonitor.emailServiceMonitor.recordSuccess(responseTime);
      /* istanbul ignore next */
      cov_2f3vt1axr1().s[26]++;
      console.log('Verification email sent successfully:', data?.id);
      /* istanbul ignore next */
      cov_2f3vt1axr1().s[27]++;
      return true;
    } catch (error) {
      const responseTime =
      /* istanbul ignore next */
      (cov_2f3vt1axr1().s[28]++, Date.now() - startTime);
      /* istanbul ignore next */
      cov_2f3vt1axr1().s[29]++;
      if (error instanceof _emailservice.EmailServiceError) {
        /* istanbul ignore next */
        cov_2f3vt1axr1().b[5][0]++;
        cov_2f3vt1axr1().s[30]++;
        // Already recorded in monitor above
        throw error;
      } else
      /* istanbul ignore next */
      {
        cov_2f3vt1axr1().b[5][1]++;
      }
      cov_2f3vt1axr1().s[31]++;
      console.error('Network error sending email:', error);
      const networkError =
      /* istanbul ignore next */
      (cov_2f3vt1axr1().s[32]++, new _emailservice.EmailServiceError(`Network error: ${error instanceof Error ?
      /* istanbul ignore next */
      (cov_2f3vt1axr1().b[6][0]++, error.message) :
      /* istanbul ignore next */
      (cov_2f3vt1axr1().b[6][1]++, 'Unknown error')}`, 'NETWORK_ERROR'));
      // Record network error in monitor
      /* istanbul ignore next */
      cov_2f3vt1axr1().s[33]++;
      _emailservicemonitor.emailServiceMonitor.recordFailure({
        message: networkError.message,
        code: networkError.code
      }, responseTime);
      /* istanbul ignore next */
      cov_2f3vt1axr1().s[34]++;
      throw networkError;
    }
  }
  generateVerificationEmailTemplate(code, name) {
    /* istanbul ignore next */
    cov_2f3vt1axr1().f[5]++;
    cov_2f3vt1axr1().s[35]++;
    return `
      <!DOCTYPE html>
      <html lang="en">
      <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Verify Your Email</title>
        <style>
          body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 600px;
            margin: 0 auto;
            padding: 20px;
          }
          .header {
            text-align: center;
            margin-bottom: 30px;
          }
          .logo {
            font-size: 24px;
            font-weight: bold;
            color: #22c55e;
            margin-bottom: 10px;
          }
          .verification-code {
            background: #f8f9fa;
            border: 2px solid #e9ecef;
            border-radius: 8px;
            padding: 20px;
            text-align: center;
            margin: 30px 0;
          }
          .code {
            font-size: 32px;
            font-weight: bold;
            letter-spacing: 4px;
            color: #22c55e;
            font-family: 'Courier New', monospace;
          }
          .footer {
            margin-top: 30px;
            padding-top: 20px;
            border-top: 1px solid #e9ecef;
            font-size: 14px;
            color: #6c757d;
          }
        </style>
      </head>
      <body>
        <div class="header">
          <div class="logo">🌱 Fancy Planties</div>
          <h1>Verify Your Email Address</h1>
        </div>
        
        <p>Hi ${name},</p>
        
        <p>Welcome to Fancy Planties! To complete your account setup, please verify your email address by entering the verification code below:</p>
        
        <div class="verification-code">
          <div class="code">${code}</div>
          <p style="margin: 10px 0 0 0; font-size: 14px; color: #6c757d;">
            This code expires in 10 minutes
          </p>
        </div>
        
        <p>If you didn't create an account with Fancy Planties, you can safely ignore this email.</p>
        
        <div class="footer">
          <p>This is an automated message from Fancy Planties. Please do not reply to this email.</p>
          <p>Need help? Contact us at support@fancy-planties.cloudagrapher.com</p>
        </div>
      </body>
      </html>
    `;
  }
  generateVerificationEmailText(code, name) {
    /* istanbul ignore next */
    cov_2f3vt1axr1().f[6]++;
    cov_2f3vt1axr1().s[36]++;
    return `
Hi ${name},

Welcome to Fancy Planties! To complete your account setup, please verify your email address by entering the verification code below:

Verification Code: ${code}

This code expires in 10 minutes.

If you didn't create an account with Fancy Planties, you can safely ignore this email.

---
This is an automated message from Fancy Planties. Please do not reply to this email.
Need help? Contact us at support@fancy-planties.cloudagrapher.com
    `.trim();
  }
}
function createEmailService() {
  /* istanbul ignore next */
  cov_2f3vt1axr1().f[7]++;
  const config =
  /* istanbul ignore next */
  (cov_2f3vt1axr1().s[37]++, {
    apiKey: process.env.RESEND_API_KEY,
    fromEmail:
    /* istanbul ignore next */
    (cov_2f3vt1axr1().b[7][0]++, process.env.FROM_EMAIL) ||
    /* istanbul ignore next */
    (cov_2f3vt1axr1().b[7][1]++, 'send.mail.fancy-planties.cloudagrapher.com'),
    fromName:
    /* istanbul ignore next */
    (cov_2f3vt1axr1().b[8][0]++, process.env.FROM_NAME) ||
    /* istanbul ignore next */
    (cov_2f3vt1axr1().b[8][1]++, 'Fancy Planties')
  });
  /* istanbul ignore next */
  cov_2f3vt1axr1().s[38]++;
  if (!config.apiKey) {
    /* istanbul ignore next */
    cov_2f3vt1axr1().b[9][0]++;
    cov_2f3vt1axr1().s[39]++;
    throw new Error('RESEND_API_KEY environment variable is required');
  } else
  /* istanbul ignore next */
  {
    cov_2f3vt1axr1().b[9][1]++;
  }
  cov_2f3vt1axr1().s[40]++;
  return new ResendEmailService(config);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,