{"version":3,"sources":["/Users/stefanbekker/projects/fancy-planties/src/__tests__/integration/care-tracking.test.js"],"sourcesContent":["// Care Tracking Integration Tests\n// Tests complete care record creation, history viewing, and statistics workflows\n\nimport { screen, waitFor } from '@testing-library/react';\nimport { renderWithProviders, userInteractions } from '@/test-utils';\nimport { mockApiResponse, mockApiError, resetApiMocks } from '@/test-utils/helpers/api-helpers';\nimport { createAuthenticatedTestUser } from '@/test-utils/factories/user-factory';\nimport { createTestPlantInstance } from '@/test-utils/factories/plant-factory';\nimport { createTestCareRecord } from '@/test-utils/factories/care-factory';\nimport QuickCareForm from '@/components/care/QuickCareForm';\nimport CareHistoryTimeline from '@/components/care/CareHistoryTimeline';\n\n// Mock hooks\njest.mock('@/hooks/useOffline', () => ({\n  useOffline: () => ({\n    isOnline: true,\n    addPendingCareEntry: jest.fn(),\n  }),\n}));\n\njest.mock('@/lib/utils/service-worker', () => ({\n  useServiceWorker: () => ({\n    registerBackgroundSync: jest.fn(),\n  }),\n}));\n\ndescribe('Care Tracking Integration Tests', () => {\n  let testUser;\n  let testSession;\n  let testPlantInstance;\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    resetApiMocks();\n\n    // Create authenticated test user\n    const authData = createAuthenticatedTestUser();\n    testUser = authData.user;\n    testSession = authData.session;\n\n    // Create test plant instance\n    testPlantInstance = createTestPlantInstance({\n      id: 1,\n      userId: testUser.id,\n      nickname: 'Test Plant',\n    });\n  });\n\n  afterEach(() => {\n    resetApiMocks();\n  });\n\n  describe('Care Record Creation and Logging Workflow', () => {\n    it('should complete care logging workflow from form to database', async () => {\n      // Arrange\n      const newCareRecord = createTestCareRecord({\n        id: 1,\n        plantInstanceId: testPlantInstance.id,\n        careType: 'fertilizer',\n        careDate: new Date(),\n        notes: 'Applied liquid fertilizer',\n        userId: testUser.id,\n      });\n\n      mockApiResponse({\n        'POST /api/care/log': {\n          status: 200,\n          data: newCareRecord,\n        },\n      });\n\n      const mockOnSuccess = jest.fn();\n      const { user } = renderWithProviders(\n        <QuickCareForm\n          plantInstanceId={testPlantInstance.id}\n          onSuccess={mockOnSuccess}\n          defaultCareType=\"fertilizer\"\n        />\n      );\n\n      // Act - Fill out care form\n      const notesField = screen.getByLabelText(/notes/i);\n      await user.type(notesField, 'Applied liquid fertilizer');\n\n      // Select fertilizer care type (should be default)\n      const fertilizerButton = screen.getByRole('button', { name: /fertilizer/i });\n      await user.click(fertilizerButton);\n\n      // Submit form\n      const submitButton = screen.getByRole('button', { name: /log care/i });\n      await user.click(submitButton);\n\n      // Assert - Verify API call was made with correct data\n      await waitFor(() => {\n        expect(global.fetch).toHaveBeenCalledWith(\n          '/api/care/log',\n          expect.objectContaining({\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: expect.stringContaining('fertilizer'),\n          })\n        );\n      });\n\n      // Assert - Verify success callback was called\n      await waitFor(() => {\n        expect(mockOnSuccess).toHaveBeenCalled();\n      });\n    });\n\n    it('should handle care logging validation errors', async () => {\n      // Arrange\n      mockApiResponse({\n        'POST /api/care/log': {\n          status: 400,\n          data: {\n            error: 'Care date cannot be in the future',\n          },\n        },\n      });\n\n      const { user } = renderWithProviders(\n        <QuickCareForm\n          plantInstanceId={testPlantInstance.id}\n        />\n      );\n\n      // Act - Set future date\n      const dateField = screen.getByLabelText(/care date/i);\n      const futureDate = new Date();\n      futureDate.setDate(futureDate.getDate() + 1);\n      const futureDateString = futureDate.toISOString().split('T')[0];\n      \n      await user.clear(dateField);\n      await user.type(dateField, futureDateString);\n\n      // Submit form\n      const submitButton = screen.getByRole('button', { name: /log care/i });\n      await user.click(submitButton);\n\n      // Assert - Verify error message is displayed\n      await waitFor(() => {\n        expect(screen.getByText(/care date cannot be in the future/i)).toBeInTheDocument();\n      });\n    });\n\n    it('should handle different care types with specific fields', async () => {\n      // Arrange\n      const repotCareRecord = createTestCareRecord({\n        careType: 'repot',\n        potSize: '6 inch',\n        soilType: 'Potting mix',\n      });\n\n      mockApiResponse({\n        'POST /api/care/log': {\n          status: 200,\n          data: repotCareRecord,\n        },\n      });\n\n      const { user } = renderWithProviders(\n        <QuickCareForm\n          plantInstanceId={testPlantInstance.id}\n        />\n      );\n\n      // Act - Select repot care type\n      const repotButton = screen.getByRole('button', { name: /repot/i });\n      await user.click(repotButton);\n\n      // Fill repot-specific fields\n      await waitFor(() => {\n        expect(screen.getByLabelText(/pot size/i)).toBeInTheDocument();\n      });\n\n      const potSizeField = screen.getByLabelText(/pot size/i);\n      await user.type(potSizeField, '6 inch');\n\n      const soilTypeField = screen.getByLabelText(/soil type/i);\n      await user.type(soilTypeField, 'Potting mix');\n\n      // Submit form\n      const submitButton = screen.getByRole('button', { name: /log care/i });\n      await user.click(submitButton);\n\n      // Assert - Verify API call includes repot-specific data\n      await waitFor(() => {\n        expect(global.fetch).toHaveBeenCalledWith(\n          '/api/care/log',\n          expect.objectContaining({\n            body: expect.stringContaining('repot'),\n          })\n        );\n      });\n    });\n\n    it('should handle offline care logging with queue', async () => {\n      // Arrange - Mock offline state\n      const mockAddPendingCareEntry = jest.fn(() => 'pending-123');\n      const mockRegisterBackgroundSync = jest.fn();\n\n      jest.doMock('@/hooks/useOffline', () => ({\n        useOffline: () => ({\n          isOnline: false,\n          addPendingCareEntry: mockAddPendingCareEntry,\n        }),\n      }));\n\n      jest.doMock('@/lib/utils/service-worker', () => ({\n        useServiceWorker: () => ({\n          registerBackgroundSync: mockRegisterBackgroundSync,\n        }),\n      }));\n\n      const { user } = renderWithProviders(\n        <QuickCareForm\n          plantInstanceId={testPlantInstance.id}\n        />\n      );\n\n      // Assert - Verify offline indicator is shown\n      expect(screen.getByText(/offline mode/i)).toBeInTheDocument();\n\n      // Act - Submit care form while offline\n      const submitButton = screen.getByRole('button', { name: /queue for sync/i });\n      await user.click(submitButton);\n\n      // Assert - Verify offline handling\n      await waitFor(() => {\n        expect(mockAddPendingCareEntry).toHaveBeenCalled();\n        expect(mockRegisterBackgroundSync).toHaveBeenCalled();\n      });\n\n      // Assert - Verify no API call was made\n      expect(global.fetch).not.toHaveBeenCalled();\n    });\n\n    it('should handle care logging server errors gracefully', async () => {\n      // Arrange\n      mockApiError('/api/care/log', 500, { error: 'Database connection failed' }, 'POST');\n\n      const { user } = renderWithProviders(\n        <QuickCareForm\n          plantInstanceId={testPlantInstance.id}\n        />\n      );\n\n      // Act - Submit form\n      const submitButton = screen.getByRole('button', { name: /log care/i });\n      await user.click(submitButton);\n\n      // Assert - Verify error message is displayed\n      await waitFor(() => {\n        expect(screen.getByText(/database connection failed/i)).toBeInTheDocument();\n      });\n    });\n  });\n\n  describe('Care History Viewing and Filtering', () => {\n    it('should display care history timeline with proper formatting', async () => {\n      // Arrange\n      const careHistory = [\n        createTestCareRecord({\n          id: 1,\n          careType: 'fertilizer',\n          careDate: new Date('2024-01-15'),\n          notes: 'Applied liquid fertilizer',\n          formattedDate: 'Jan 15, 2024',\n          daysSinceCare: 5,\n        }),\n        createTestCareRecord({\n          id: 2,\n          careType: 'water',\n          careDate: new Date('2024-01-10'),\n          notes: 'Watered thoroughly',\n          formattedDate: 'Jan 10, 2024',\n          daysSinceCare: 10,\n        }),\n        createTestCareRecord({\n          id: 3,\n          careType: 'repot',\n          careDate: new Date('2024-01-01'),\n          potSize: '6 inch',\n          soilType: 'Potting mix',\n          formattedDate: 'Jan 1, 2024',\n          daysSinceCare: 19,\n        }),\n      ];\n\n      renderWithProviders(\n        <CareHistoryTimeline\n          careHistory={careHistory}\n          plantInstance={testPlantInstance}\n        />\n      );\n\n      // Assert - Verify care history is displayed\n      expect(screen.getByText('Care History')).toBeInTheDocument();\n      expect(screen.getByText('Applied liquid fertilizer')).toBeInTheDocument();\n      expect(screen.getByText('Watered thoroughly')).toBeInTheDocument();\n      expect(screen.getByText('Jan 15, 2024')).toBeInTheDocument();\n      expect(screen.getByText('Jan 10, 2024')).toBeInTheDocument();\n\n      // Assert - Verify repot-specific details are shown\n      expect(screen.getByText('Pot Size:')).toBeInTheDocument();\n      expect(screen.getByText('6 inch')).toBeInTheDocument();\n      expect(screen.getByText('Soil Type:')).toBeInTheDocument();\n      expect(screen.getByText('Potting mix')).toBeInTheDocument();\n    });\n\n    it('should handle empty care history gracefully', async () => {\n      // Arrange\n      renderWithProviders(\n        <CareHistoryTimeline\n          careHistory={[]}\n          plantInstance={testPlantInstance}\n        />\n      );\n\n      // Assert - Verify empty state is displayed\n      expect(screen.getByText('No Care History')).toBeInTheDocument();\n      expect(screen.getByText(/start logging care activities/i)).toBeInTheDocument();\n    });\n\n    it('should fetch and display care history from API', async () => {\n      // Arrange\n      const careHistory = [\n        createTestCareRecord({\n          id: 1,\n          careType: 'fertilizer',\n          formattedDate: 'Today',\n          daysSinceCare: 0,\n        }),\n      ];\n\n      mockApiResponse({\n        'GET /api/care/history/1': {\n          status: 200,\n          data: careHistory,\n        },\n      });\n\n      // Mock a component that fetches care history\n      const CareHistoryContainer = () => {\n        const [history, setHistory] = React.useState([]);\n        const [loading, setLoading] = React.useState(true);\n\n        React.useEffect(() => {\n          const fetchHistory = async () => {\n            try {\n              const response = await fetch(`/api/care/history/${testPlantInstance.id}`);\n              const data = await response.json();\n              setHistory(data);\n            } catch (error) {\n              console.error('Failed to fetch care history:', error);\n            } finally {\n              setLoading(false);\n            }\n          };\n\n          fetchHistory();\n        }, []);\n\n        if (loading) return <div>Loading...</div>;\n\n        return (\n          <CareHistoryTimeline\n            careHistory={history}\n            plantInstance={testPlantInstance}\n          />\n        );\n      };\n\n      renderWithProviders(<CareHistoryContainer />);\n\n      // Assert - Verify API call was made\n      await waitFor(() => {\n        expect(global.fetch).toHaveBeenCalledWith(`/api/care/history/${testPlantInstance.id}`);\n      });\n\n      // Assert - Verify care history is displayed\n      await waitFor(() => {\n        expect(screen.getByText('Care History')).toBeInTheDocument();\n      });\n    });\n\n    it('should handle care history API errors', async () => {\n      // Arrange\n      mockApiError('/api/care/history/1', 500, { error: 'Failed to fetch care history' });\n\n      const CareHistoryContainer = () => {\n        const [history, setHistory] = React.useState([]);\n        const [error, setError] = React.useState(null);\n\n        React.useEffect(() => {\n          const fetchHistory = async () => {\n            try {\n              const response = await fetch(`/api/care/history/${testPlantInstance.id}`);\n              if (!response.ok) {\n                const errorData = await response.json();\n                throw new Error(errorData.error);\n              }\n              const data = await response.json();\n              setHistory(data);\n            } catch (err) {\n              setError(err.message);\n            }\n          };\n\n          fetchHistory();\n        }, []);\n\n        if (error) return <div>Error: {error}</div>;\n\n        return (\n          <CareHistoryTimeline\n            careHistory={history}\n            plantInstance={testPlantInstance}\n          />\n        );\n      };\n\n      renderWithProviders(<CareHistoryContainer />);\n\n      // Assert - Verify error is displayed\n      await waitFor(() => {\n        expect(screen.getByText(/failed to fetch care history/i)).toBeInTheDocument();\n      });\n    });\n\n    it('should limit displayed care history when limit is specified', async () => {\n      // Arrange\n      const careHistory = Array.from({ length: 15 }, (_, index) =>\n        createTestCareRecord({\n          id: index + 1,\n          careType: 'water',\n          formattedDate: `Day ${index + 1}`,\n          daysSinceCare: index + 1,\n        })\n      );\n\n      renderWithProviders(\n        <CareHistoryTimeline\n          careHistory={careHistory}\n          plantInstance={testPlantInstance}\n          limit={5}\n        />\n      );\n\n      // Assert - Verify only limited items are shown\n      expect(screen.getByText('Day 1')).toBeInTheDocument();\n      expect(screen.getByText('Day 5')).toBeInTheDocument();\n      expect(screen.queryByText('Day 6')).not.toBeInTheDocument();\n\n      // Assert - Verify limit indicator is shown\n      expect(screen.getByText(/showing 5 of 15 care events/i)).toBeInTheDocument();\n    });\n  });\n\ndescribe('Care Statistics Calculation and Display', () => {\n    it('should fetch and display care dashboard statistics', async () => {\n      // Arrange\n      const dashboardData = {\n        totalPlants: 5,\n        plantsNeedingCare: 2,\n        overduePlants: 1,\n        recentCareActivities: 8,\n        careStats: {\n          fertilizer: { count: 15, lastDate: '2024-01-15' },\n          water: { count: 25, lastDate: '2024-01-18' },\n          repot: { count: 3, lastDate: '2024-01-01' },\n        },\n        upcomingCare: [\n          {\n            plantInstanceId: 1,\n            nickname: 'Test Plant',\n            careType: 'fertilizer',\n            dueDate: '2024-01-20',\n            daysUntilDue: 2,\n          },\n        ],\n      };\n\n      mockApiResponse({\n        'GET /api/care/dashboard': {\n          status: 200,\n          data: dashboardData,\n        },\n      });\n\n      // Mock a dashboard component\n      const CareDashboard = () => {\n        const [dashboard, setDashboard] = React.useState(null);\n        const [loading, setLoading] = React.useState(true);\n\n        React.useEffect(() => {\n          const fetchDashboard = async () => {\n            try {\n              const response = await fetch('/api/care/dashboard');\n              const data = await response.json();\n              setDashboard(data);\n            } catch (error) {\n              console.error('Failed to fetch dashboard:', error);\n            } finally {\n              setLoading(false);\n            }\n          };\n\n          fetchDashboard();\n        }, []);\n\n        if (loading) return <div>Loading dashboard...</div>;\n        if (!dashboard) return <div>No data</div>;\n\n        return (\n          <div>\n            <h2>Care Dashboard</h2>\n            <div>Total Plants: {dashboard.totalPlants}</div>\n            <div>Plants Needing Care: {dashboard.plantsNeedingCare}</div>\n            <div>Overdue Plants: {dashboard.overduePlants}</div>\n            <div>Recent Activities: {dashboard.recentCareActivities}</div>\n            <div>\n              <h3>Care Statistics</h3>\n              <div>Fertilizer: {dashboard.careStats.fertilizer.count} times</div>\n              <div>Water: {dashboard.careStats.water.count} times</div>\n              <div>Repot: {dashboard.careStats.repot.count} times</div>\n            </div>\n            <div>\n              <h3>Upcoming Care</h3>\n              {dashboard.upcomingCare.map((care) => (\n                <div key={care.plantInstanceId}>\n                  {care.nickname} needs {care.careType} in {care.daysUntilDue} days\n                </div>\n              ))}\n            </div>\n          </div>\n        );\n      };\n\n      renderWithProviders(<CareDashboard />);\n\n      // Assert - Verify API call was made\n      await waitFor(() => {\n        expect(global.fetch).toHaveBeenCalledWith('/api/care/dashboard');\n      });\n\n      // Assert - Verify dashboard data is displayed\n      await waitFor(() => {\n        expect(screen.getByText('Care Dashboard')).toBeInTheDocument();\n        expect(screen.getByText('Total Plants: 5')).toBeInTheDocument();\n        expect(screen.getByText('Plants Needing Care: 2')).toBeInTheDocument();\n        expect(screen.getByText('Overdue Plants: 1')).toBeInTheDocument();\n        expect(screen.getByText('Recent Activities: 8')).toBeInTheDocument();\n      });\n\n      // Assert - Verify care statistics are displayed\n      await waitFor(() => {\n        expect(screen.getByText('Fertilizer: 15 times')).toBeInTheDocument();\n        expect(screen.getByText('Water: 25 times')).toBeInTheDocument();\n        expect(screen.getByText('Repot: 3 times')).toBeInTheDocument();\n      });\n\n      // Assert - Verify upcoming care is displayed\n      await waitFor(() => {\n        expect(screen.getByText(/test plant needs fertilizer in 2 days/i)).toBeInTheDocument();\n      });\n    });\n\n    it('should handle care dashboard API errors', async () => {\n      // Arrange\n      mockApiError('/api/care/dashboard', 500, { error: 'Failed to calculate statistics' });\n\n      const CareDashboard = () => {\n        const [error, setError] = React.useState(null);\n\n        React.useEffect(() => {\n          const fetchDashboard = async () => {\n            try {\n              const response = await fetch('/api/care/dashboard');\n              if (!response.ok) {\n                const errorData = await response.json();\n                throw new Error(errorData.error);\n              }\n            } catch (err) {\n              setError(err.message);\n            }\n          };\n\n          fetchDashboard();\n        }, []);\n\n        if (error) return <div>Dashboard Error: {error}</div>;\n        return <div>Loading...</div>;\n      };\n\n      renderWithProviders(<CareDashboard />);\n\n      // Assert - Verify error is displayed\n      await waitFor(() => {\n        expect(screen.getByText(/failed to calculate statistics/i)).toBeInTheDocument();\n      });\n    });\n\n    it('should calculate care frequency statistics correctly', async () => {\n      // Arrange\n      const careHistory = [\n        createTestCareRecord({ careType: 'fertilizer', careDate: new Date('2024-01-01') }),\n        createTestCareRecord({ careType: 'fertilizer', careDate: new Date('2024-01-15') }),\n        createTestCareRecord({ careType: 'water', careDate: new Date('2024-01-05') }),\n        createTestCareRecord({ careType: 'water', careDate: new Date('2024-01-10') }),\n        createTestCareRecord({ careType: 'water', careDate: new Date('2024-01-15') }),\n      ];\n\n      // Mock a statistics calculator component\n      const CareStatistics = ({ careHistory }) => {\n        const calculateStats = (history) => {\n          const stats = {};\n          history.forEach((care) => {\n            if (!stats[care.careType]) {\n              stats[care.careType] = { count: 0, dates: [] };\n            }\n            stats[care.careType].count++;\n            stats[care.careType].dates.push(care.careDate);\n          });\n          return stats;\n        };\n\n        const stats = calculateStats(careHistory);\n\n        return (\n          <div>\n            <h3>Care Statistics</h3>\n            {Object.entries(stats).map(([careType, data]) => (\n              <div key={careType}>\n                {careType}: {data.count} times\n              </div>\n            ))}\n          </div>\n        );\n      };\n\n      renderWithProviders(<CareStatistics careHistory={careHistory} />);\n\n      // Assert - Verify statistics are calculated correctly\n      expect(screen.getByText('fertilizer: 2 times')).toBeInTheDocument();\n      expect(screen.getByText('water: 3 times')).toBeInTheDocument();\n    });\n  });\n\n  describe('End-to-End Care Tracking Flow', () => {\n    it('should complete full care tracking cycle: log -> view history -> check statistics', async () => {\n      // Step 1: Log care\n      const newCareRecord = createTestCareRecord({\n        id: 1,\n        plantInstanceId: testPlantInstance.id,\n        careType: 'fertilizer',\n      });\n\n      mockApiResponse({\n        'POST /api/care/log': {\n          status: 200,\n          data: newCareRecord,\n        },\n      });\n\n      const { user, rerender } = renderWithProviders(\n        <QuickCareForm\n          plantInstanceId={testPlantInstance.id}\n        />\n      );\n\n      // Log care\n      const submitButton = screen.getByRole('button', { name: /log care/i });\n      await user.click(submitButton);\n\n      await waitFor(() => {\n        expect(global.fetch).toHaveBeenCalledWith(\n          '/api/care/log',\n          expect.objectContaining({ method: 'POST' })\n        );\n      });\n\n      // Reset mocks for history step\n      jest.clearAllMocks();\n\n      // Step 2: View care history\n      mockApiResponse({\n        'GET /api/care/history/1': {\n          status: 200,\n          data: [newCareRecord],\n        },\n      });\n\n      const CareHistoryContainer = () => {\n        const [history, setHistory] = React.useState([]);\n\n        React.useEffect(() => {\n          const fetchHistory = async () => {\n            const response = await fetch(`/api/care/history/${testPlantInstance.id}`);\n            const data = await response.json();\n            setHistory(data);\n          };\n          fetchHistory();\n        }, []);\n\n        return (\n          <CareHistoryTimeline\n            careHistory={history}\n            plantInstance={testPlantInstance}\n          />\n        );\n      };\n\n      rerender(<CareHistoryContainer />);\n\n      await waitFor(() => {\n        expect(global.fetch).toHaveBeenCalledWith(`/api/care/history/${testPlantInstance.id}`);\n      });\n\n      // Reset mocks for dashboard step\n      jest.clearAllMocks();\n\n      // Step 3: Check dashboard statistics\n      mockApiResponse({\n        'GET /api/care/dashboard': {\n          status: 200,\n          data: {\n            totalPlants: 1,\n            recentCareActivities: 1,\n            careStats: {\n              fertilizer: { count: 1, lastDate: newCareRecord.careDate },\n            },\n          },\n        },\n      });\n\n      const CareDashboard = () => {\n        const [dashboard, setDashboard] = React.useState(null);\n\n        React.useEffect(() => {\n          const fetchDashboard = async () => {\n            const response = await fetch('/api/care/dashboard');\n            const data = await response.json();\n            setDashboard(data);\n          };\n          fetchDashboard();\n        }, []);\n\n        if (!dashboard) return <div>Loading...</div>;\n\n        return (\n          <div>\n            <div>Recent Activities: {dashboard.recentCareActivities}</div>\n            <div>Fertilizer Count: {dashboard.careStats.fertilizer.count}</div>\n          </div>\n        );\n      };\n\n      rerender(<CareDashboard />);\n\n      await waitFor(() => {\n        expect(global.fetch).toHaveBeenCalledWith('/api/care/dashboard');\n      });\n\n      await waitFor(() => {\n        expect(screen.getByText('Recent Activities: 1')).toBeInTheDocument();\n        expect(screen.getByText('Fertilizer Count: 1')).toBeInTheDocument();\n      });\n    });\n\n    it('should handle care tracking with multiple plants and care types', async () => {\n      // Arrange\n      const multiPlantCareHistory = [\n        createTestCareRecord({\n          id: 1,\n          plantInstanceId: 1,\n          careType: 'fertilizer',\n          plantInstance: { nickname: 'Plant 1' },\n        }),\n        createTestCareRecord({\n          id: 2,\n          plantInstanceId: 2,\n          careType: 'water',\n          plantInstance: { nickname: 'Plant 2' },\n        }),\n      ];\n\n      renderWithProviders(\n        <CareHistoryTimeline\n          careHistory={multiPlantCareHistory}\n          plantInstance={testPlantInstance}\n          showPlantName={true}\n        />\n      );\n\n      // Assert - Verify multiple plants are shown\n      expect(screen.getByText(/plant 1/i)).toBeInTheDocument();\n      expect(screen.getByText(/plant 2/i)).toBeInTheDocument();\n    });\n  });\n});"],"names":["jest","mock","useOffline","isOnline","addPendingCareEntry","fn","useServiceWorker","registerBackgroundSync","describe","testUser","testSession","testPlantInstance","beforeEach","clearAllMocks","resetApiMocks","authData","createAuthenticatedTestUser","user","session","createTestPlantInstance","id","userId","nickname","afterEach","it","newCareRecord","createTestCareRecord","plantInstanceId","careType","careDate","Date","notes","mockApiResponse","status","data","mockOnSuccess","renderWithProviders","QuickCareForm","onSuccess","defaultCareType","notesField","screen","getByLabelText","type","fertilizerButton","getByRole","name","click","submitButton","waitFor","expect","global","fetch","toHaveBeenCalledWith","objectContaining","method","headers","body","stringContaining","toHaveBeenCalled","error","dateField","futureDate","setDate","getDate","futureDateString","toISOString","split","clear","getByText","toBeInTheDocument","repotCareRecord","potSize","soilType","repotButton","potSizeField","soilTypeField","mockAddPendingCareEntry","mockRegisterBackgroundSync","doMock","not","mockApiError","careHistory","formattedDate","daysSinceCare","CareHistoryTimeline","plantInstance","CareHistoryContainer","history","setHistory","React","useState","loading","setLoading","useEffect","fetchHistory","response","json","console","div","setError","ok","errorData","Error","err","message","Array","from","length","_","index","limit","queryByText","dashboardData","totalPlants","plantsNeedingCare","overduePlants","recentCareActivities","careStats","fertilizer","count","lastDate","water","repot","upcomingCare","dueDate","daysUntilDue","CareDashboard","dashboard","setDashboard","fetchDashboard","h2","h3","map","care","CareStatistics","calculateStats","stats","forEach","dates","push","Object","entries","rerender","multiPlantCareHistory","showPlantName"],"mappings":"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"}