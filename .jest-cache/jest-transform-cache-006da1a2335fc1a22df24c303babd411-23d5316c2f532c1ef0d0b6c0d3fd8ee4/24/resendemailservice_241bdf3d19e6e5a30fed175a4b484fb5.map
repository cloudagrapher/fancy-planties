{"version":3,"sources":["/Users/stefanbekker/projects/fancy-planties/src/lib/services/resend-email-service.ts"],"sourcesContent":["import 'server-only';\nimport { Resend } from 'resend';\nimport { EmailService, EmailConfig, EmailServiceError } from './email-service';\n\nexport class ResendEmailService implements EmailService {\n  private resend: Resend;\n  private config: EmailConfig;\n\n  constructor(config: EmailConfig) {\n    this.resend = new Resend(config.apiKey);\n    this.config = config;\n  }\n\n  async sendVerificationEmail(email: string, code: string, name: string): Promise<boolean> {\n    try {\n      const { data, error } = await this.resend.emails.send({\n        from: `${this.config.fromName} <${this.config.fromEmail}>`,\n        to: [email],\n        subject: 'Verify your email address',\n        html: this.generateVerificationEmailTemplate(code, name),\n        text: this.generateVerificationEmailText(code, name),\n      });\n\n      if (error) {\n        console.error('Resend API error:', error);\n        \n        // Map Resend errors to our error types\n        if (error.message?.includes('quota') || error.message?.includes('limit')) {\n          throw new EmailServiceError('Email quota exceeded', 'QUOTA_EXCEEDED');\n        }\n        \n        if (error.message?.includes('invalid') && error.message?.includes('email')) {\n          throw new EmailServiceError('Invalid email address', 'INVALID_EMAIL');\n        }\n        \n        throw new EmailServiceError(`Resend API error: ${error.message}`, 'API_ERROR');\n      }\n\n      console.log('Verification email sent successfully:', data?.id);\n      return true;\n      \n    } catch (error) {\n      if (error instanceof EmailServiceError) {\n        throw error;\n      }\n      \n      console.error('Network error sending email:', error);\n      throw new EmailServiceError(\n        `Network error: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        'NETWORK_ERROR'\n      );\n    }\n  }\n\n  private generateVerificationEmailTemplate(code: string, name: string): string {\n    return `\n      <!DOCTYPE html>\n      <html lang=\"en\">\n      <head>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>Verify Your Email</title>\n        <style>\n          body {\n            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n            line-height: 1.6;\n            color: #333;\n            max-width: 600px;\n            margin: 0 auto;\n            padding: 20px;\n          }\n          .header {\n            text-align: center;\n            margin-bottom: 30px;\n          }\n          .logo {\n            font-size: 24px;\n            font-weight: bold;\n            color: #22c55e;\n            margin-bottom: 10px;\n          }\n          .verification-code {\n            background: #f8f9fa;\n            border: 2px solid #e9ecef;\n            border-radius: 8px;\n            padding: 20px;\n            text-align: center;\n            margin: 30px 0;\n          }\n          .code {\n            font-size: 32px;\n            font-weight: bold;\n            letter-spacing: 4px;\n            color: #22c55e;\n            font-family: 'Courier New', monospace;\n          }\n          .footer {\n            margin-top: 30px;\n            padding-top: 20px;\n            border-top: 1px solid #e9ecef;\n            font-size: 14px;\n            color: #6c757d;\n          }\n        </style>\n      </head>\n      <body>\n        <div class=\"header\">\n          <div class=\"logo\">ðŸŒ± Fancy Planties</div>\n          <h1>Verify Your Email Address</h1>\n        </div>\n        \n        <p>Hi ${name},</p>\n        \n        <p>Welcome to Fancy Planties! To complete your account setup, please verify your email address by entering the verification code below:</p>\n        \n        <div class=\"verification-code\">\n          <div class=\"code\">${code}</div>\n          <p style=\"margin: 10px 0 0 0; font-size: 14px; color: #6c757d;\">\n            This code expires in 10 minutes\n          </p>\n        </div>\n        \n        <p>If you didn't create an account with Fancy Planties, you can safely ignore this email.</p>\n        \n        <div class=\"footer\">\n          <p>This is an automated message from Fancy Planties. Please do not reply to this email.</p>\n          <p>Need help? Contact us at support@fancy-planties.cloudagrapher.com</p>\n        </div>\n      </body>\n      </html>\n    `;\n  }\n\n  private generateVerificationEmailText(code: string, name: string): string {\n    return `\nHi ${name},\n\nWelcome to Fancy Planties! To complete your account setup, please verify your email address by entering the verification code below:\n\nVerification Code: ${code}\n\nThis code expires in 10 minutes.\n\nIf you didn't create an account with Fancy Planties, you can safely ignore this email.\n\n---\nThis is an automated message from Fancy Planties. Please do not reply to this email.\nNeed help? Contact us at support@fancy-planties.cloudagrapher.com\n    `.trim();\n  }\n}\n\n// Factory function to create email service instance\nexport function createEmailService(): EmailService {\n  const config: EmailConfig = {\n    apiKey: process.env.RESEND_API_KEY!,\n    fromEmail: process.env.FROM_EMAIL || 'send.mail.fancy-planties.cloudagrapher.com',\n    fromName: process.env.FROM_NAME || 'Fancy Planties',\n  };\n\n  if (!config.apiKey) {\n    throw new Error('RESEND_API_KEY environment variable is required');\n  }\n\n  return new ResendEmailService(config);\n}"],"names":["ResendEmailService","createEmailService","config","resend","Resend","apiKey","sendVerificationEmail","email","code","name","data","error","emails","send","from","fromName","fromEmail","to","subject","html","generateVerificationEmailTemplate","text","generateVerificationEmailText","console","message","includes","EmailServiceError","log","id","Error","trim","process","env","RESEND_API_KEY","FROM_EMAIL","FROM_NAME"],"mappings":";;;;;;;;;;;QAIaA;eAAAA;;QAqJGC;eAAAA;;;QAzJT;wBACgB;8BACsC;AAEtD,MAAMD;IAIX,YAAYE,MAAmB,CAAE;QAC/B,IAAI,CAACC,MAAM,GAAG,IAAIC,cAAM,CAACF,OAAOG,MAAM;QACtC,IAAI,CAACH,MAAM,GAAGA;IAChB;IAEA,MAAMI,sBAAsBC,KAAa,EAAEC,IAAY,EAAEC,IAAY,EAAoB;QACvF,IAAI;YACF,MAAM,EAAEC,IAAI,EAAEC,KAAK,EAAE,GAAG,MAAM,IAAI,CAACR,MAAM,CAACS,MAAM,CAACC,IAAI,CAAC;gBACpDC,MAAM,GAAG,IAAI,CAACZ,MAAM,CAACa,QAAQ,CAAC,EAAE,EAAE,IAAI,CAACb,MAAM,CAACc,SAAS,CAAC,CAAC,CAAC;gBAC1DC,IAAI;oBAACV;iBAAM;gBACXW,SAAS;gBACTC,MAAM,IAAI,CAACC,iCAAiC,CAACZ,MAAMC;gBACnDY,MAAM,IAAI,CAACC,6BAA6B,CAACd,MAAMC;YACjD;YAEA,IAAIE,OAAO;gBACTY,QAAQZ,KAAK,CAAC,qBAAqBA;gBAEnC,uCAAuC;gBACvC,IAAIA,MAAMa,OAAO,EAAEC,SAAS,YAAYd,MAAMa,OAAO,EAAEC,SAAS,UAAU;oBACxE,MAAM,IAAIC,+BAAiB,CAAC,wBAAwB;gBACtD;gBAEA,IAAIf,MAAMa,OAAO,EAAEC,SAAS,cAAcd,MAAMa,OAAO,EAAEC,SAAS,UAAU;oBAC1E,MAAM,IAAIC,+BAAiB,CAAC,yBAAyB;gBACvD;gBAEA,MAAM,IAAIA,+BAAiB,CAAC,CAAC,kBAAkB,EAAEf,MAAMa,OAAO,EAAE,EAAE;YACpE;YAEAD,QAAQI,GAAG,CAAC,yCAAyCjB,MAAMkB;YAC3D,OAAO;QAET,EAAE,OAAOjB,OAAO;YACd,IAAIA,iBAAiBe,+BAAiB,EAAE;gBACtC,MAAMf;YACR;YAEAY,QAAQZ,KAAK,CAAC,gCAAgCA;YAC9C,MAAM,IAAIe,+BAAiB,CACzB,CAAC,eAAe,EAAEf,iBAAiBkB,QAAQlB,MAAMa,OAAO,GAAG,iBAAiB,EAC5E;QAEJ;IACF;IAEQJ,kCAAkCZ,IAAY,EAAEC,IAAY,EAAU;QAC5E,OAAO,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cAwDE,EAAEA,KAAK;;;;;4BAKO,EAAED,KAAK;;;;;;;;;;;;;;IAc/B,CAAC;IACH;IAEQc,8BAA8Bd,IAAY,EAAEC,IAAY,EAAU;QACxE,OAAO,CAAC;GACT,EAAEA,KAAK;;;;mBAIS,EAAED,KAAK;;;;;;;;;IAStB,CAAC,CAACsB,IAAI;IACR;AACF;AAGO,SAAS7B;IACd,MAAMC,SAAsB;QAC1BG,QAAQ0B,QAAQC,GAAG,CAACC,cAAc;QAClCjB,WAAWe,QAAQC,GAAG,CAACE,UAAU,IAAI;QACrCnB,UAAUgB,QAAQC,GAAG,CAACG,SAAS,IAAI;IACrC;IAEA,IAAI,CAACjC,OAAOG,MAAM,EAAE;QAClB,MAAM,IAAIwB,MAAM;IAClB;IAEA,OAAO,IAAI7B,mBAAmBE;AAChC"}