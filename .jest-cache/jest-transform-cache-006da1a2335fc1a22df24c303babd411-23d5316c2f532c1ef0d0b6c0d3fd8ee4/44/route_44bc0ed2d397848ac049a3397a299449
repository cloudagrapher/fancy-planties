6ba42ba98f03e3c03584b3b0c00119b5
"use strict";

/* istanbul ignore next */
function cov_12uuylwt9r() {
  var path = "/Users/stefanbekker/projects/fancy-planties/src/app/api/care/history/[plantInstanceId]/route.ts";
  var hash = "a7393d97658b3e76db4ad259ba03acd1aa28978f";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/stefanbekker/projects/fancy-planties/src/app/api/care/history/[plantInstanceId]/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 19
        }
      },
      "3": {
        start: {
          line: 11,
          column: 16
        },
        end: {
          line: 11,
          column: 38
        }
      },
      "4": {
        start: {
          line: 12,
          column: 21
        },
        end: {
          line: 12,
          column: 74
        }
      },
      "5": {
        start: {
          line: 13,
          column: 17
        },
        end: {
          line: 13,
          column: 58
        }
      },
      "6": {
        start: {
          line: 15,
          column: 4
        },
        end: {
          line: 60,
          column: 5
        }
      },
      "7": {
        start: {
          line: 16,
          column: 25
        },
        end: {
          line: 16,
          column: 62
        }
      },
      "8": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 23,
          column: 9
        }
      },
      "9": {
        start: {
          line: 18,
          column: 12
        },
        end: {
          line: 22,
          column: 15
        }
      },
      "10": {
        start: {
          line: 24,
          column: 31
        },
        end: {
          line: 24,
          column: 43
        }
      },
      "11": {
        start: {
          line: 25,
          column: 32
        },
        end: {
          line: 25,
          column: 76
        }
      },
      "12": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 32,
          column: 9
        }
      },
      "13": {
        start: {
          line: 27,
          column: 12
        },
        end: {
          line: 31,
          column: 15
        }
      },
      "14": {
        start: {
          line: 34,
          column: 33
        },
        end: {
          line: 34,
          column: 53
        }
      },
      "15": {
        start: {
          line: 35,
          column: 25
        },
        end: {
          line: 35,
          column: 66
        }
      },
      "16": {
        start: {
          line: 36,
          column: 26
        },
        end: {
          line: 36,
          column: 109
        }
      },
      "17": {
        start: {
          line: 37,
          column: 24
        },
        end: {
          line: 37,
          column: 103
        }
      },
      "18": {
        start: {
          line: 38,
          column: 22
        },
        end: {
          line: 38,
          column: 94
        }
      },
      "19": {
        start: {
          line: 39,
          column: 23
        },
        end: {
          line: 39,
          column: 96
        }
      },
      "20": {
        start: {
          line: 40,
          column: 23
        },
        end: {
          line: 40,
          column: 64
        }
      },
      "21": {
        start: {
          line: 41,
          column: 26
        },
        end: {
          line: 41,
          column: 65
        }
      },
      "22": {
        start: {
          line: 42,
          column: 24
        },
        end: {
          line: 50,
          column: 9
        }
      },
      "23": {
        start: {
          line: 51,
          column: 28
        },
        end: {
          line: 51,
          column: 123
        }
      },
      "24": {
        start: {
          line: 52,
          column: 8
        },
        end: {
          line: 52,
          column: 54
        }
      },
      "25": {
        start: {
          line: 54,
          column: 8
        },
        end: {
          line: 54,
          column: 60
        }
      },
      "26": {
        start: {
          line: 55,
          column: 8
        },
        end: {
          line: 59,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "GET",
        decl: {
          start: {
            line: 14,
            column: 15
          },
          end: {
            line: 14,
            column: 18
          }
        },
        loc: {
          start: {
            line: 14,
            column: 40
          },
          end: {
            line: 61,
            column: 1
          }
        },
        line: 14
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 17,
            column: 8
          },
          end: {
            line: 23,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 17,
            column: 8
          },
          end: {
            line: 23,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 17
      },
      "1": {
        loc: {
          start: {
            line: 26,
            column: 8
          },
          end: {
            line: 32,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 26,
            column: 8
          },
          end: {
            line: 32,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 26
      },
      "2": {
        loc: {
          start: {
            line: 35,
            column: 25
          },
          end: {
            line: 35,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 35,
            column: 25
          },
          end: {
            line: 35,
            column: 53
          }
        }, {
          start: {
            line: 35,
            column: 57
          },
          end: {
            line: 35,
            column: 66
          }
        }],
        line: 35
      },
      "3": {
        loc: {
          start: {
            line: 36,
            column: 26
          },
          end: {
            line: 36,
            column: 109
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 36,
            column: 58
          },
          end: {
            line: 36,
            column: 97
          }
        }, {
          start: {
            line: 36,
            column: 100
          },
          end: {
            line: 36,
            column: 109
          }
        }],
        line: 36
      },
      "4": {
        loc: {
          start: {
            line: 37,
            column: 24
          },
          end: {
            line: 37,
            column: 103
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 37,
            column: 54
          },
          end: {
            line: 37,
            column: 91
          }
        }, {
          start: {
            line: 37,
            column: 94
          },
          end: {
            line: 37,
            column: 103
          }
        }],
        line: 37
      },
      "5": {
        loc: {
          start: {
            line: 38,
            column: 22
          },
          end: {
            line: 38,
            column: 94
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 38,
            column: 50
          },
          end: {
            line: 38,
            column: 89
          }
        }, {
          start: {
            line: 38,
            column: 92
          },
          end: {
            line: 38,
            column: 94
          }
        }],
        line: 38
      },
      "6": {
        loc: {
          start: {
            line: 39,
            column: 23
          },
          end: {
            line: 39,
            column: 96
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 39,
            column: 52
          },
          end: {
            line: 39,
            column: 92
          }
        }, {
          start: {
            line: 39,
            column: 95
          },
          end: {
            line: 39,
            column: 96
          }
        }],
        line: 39
      },
      "7": {
        loc: {
          start: {
            line: 40,
            column: 23
          },
          end: {
            line: 40,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 40,
            column: 23
          },
          end: {
            line: 40,
            column: 49
          }
        }, {
          start: {
            line: 40,
            column: 53
          },
          end: {
            line: 40,
            column: 64
          }
        }],
        line: 40
      },
      "8": {
        loc: {
          start: {
            line: 41,
            column: 26
          },
          end: {
            line: 41,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 41,
            column: 26
          },
          end: {
            line: 41,
            column: 55
          }
        }, {
          start: {
            line: 41,
            column: 59
          },
          end: {
            line: 41,
            column: 65
          }
        }],
        line: 41
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0
    },
    f: {
      "0": 0,
      "1": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/stefanbekker/projects/fancy-planties/src/app/api/care/history/[plantInstanceId]/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport { CareHistoryQueries } from '@/lib/db/queries/care-history';\nimport { validateRequest } from '@/lib/auth/server';\n\n// GET /api/care/history/[plantInstanceId] - Get care history for a plant instance\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: Promise<{ plantInstanceId: string }> }\n) {\n  try {\n    const { user } = await validateRequest();\n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const resolvedParams = await params;\n    const plantInstanceId = parseInt(resolvedParams.plantInstanceId, 10);\n    if (isNaN(plantInstanceId)) {\n      return NextResponse.json({ error: 'Invalid plant instance ID' }, { status: 400 });\n    }\n\n    // Get query parameters for filtering\n    const { searchParams } = new URL(request.url);\n    const careType = searchParams.get('careType') || undefined;\n    const startDate = searchParams.get('startDate') ? new Date(searchParams.get('startDate')!) : undefined;\n    const endDate = searchParams.get('endDate') ? new Date(searchParams.get('endDate')!) : undefined;\n    const limit = searchParams.get('limit') ? parseInt(searchParams.get('limit')!, 10) : 50;\n    const offset = searchParams.get('offset') ? parseInt(searchParams.get('offset')!, 10) : 0;\n    const sortBy = searchParams.get('sortBy') as 'care_date' | 'care_type' | 'created_at' || 'care_date';\n    const sortOrder = searchParams.get('sortOrder') as 'asc' | 'desc' || 'desc';\n\n    const filters = {\n      careType: careType as any,\n      startDate,\n      endDate,\n      limit,\n      offset,\n      sortBy,\n      sortOrder,\n    };\n\n    const careHistory = await CareHistoryQueries.getCareHistoryForPlant(\n      plantInstanceId,\n      user.id,\n      filters\n    );\n\n    return NextResponse.json(careHistory);\n  } catch (error) {\n    console.error('Failed to get care history:', error);\n    return NextResponse.json(\n      { error: 'Failed to get care history' },\n      { status: 500 }\n    );\n  }\n}"],
      names: ["GET", "request", "params", "user", "validateRequest", "NextResponse", "json", "error", "status", "resolvedParams", "plantInstanceId", "parseInt", "isNaN", "searchParams", "URL", "url", "careType", "get", "undefined", "startDate", "Date", "endDate", "limit", "offset", "sortBy", "sortOrder", "filters", "careHistory", "CareHistoryQueries", "getCareHistoryForPlant", "id", "console"],
      mappings: ";;;;+BAKsBA;;;eAAAA;;;wBALoB;6BACP;yBACH;AAGzB,eAAeA,IACpBC,OAAoB,EACpB,EAAEC,MAAM,EAAoD;IAE5D,IAAI;QACF,MAAM,EAAEC,IAAI,EAAE,GAAG,MAAMC,IAAAA,wBAAe;QACtC,IAAI,CAACD,MAAM;YACT,OAAOE,oBAAY,CAACC,IAAI,CAAC;gBAAEC,OAAO;YAAe,GAAG;gBAAEC,QAAQ;YAAI;QACpE;QAEA,MAAMC,iBAAiB,MAAMP;QAC7B,MAAMQ,kBAAkBC,SAASF,eAAeC,eAAe,EAAE;QACjE,IAAIE,MAAMF,kBAAkB;YAC1B,OAAOL,oBAAY,CAACC,IAAI,CAAC;gBAAEC,OAAO;YAA4B,GAAG;gBAAEC,QAAQ;YAAI;QACjF;QAEA,qCAAqC;QACrC,MAAM,EAAEK,YAAY,EAAE,GAAG,IAAIC,IAAIb,QAAQc,GAAG;QAC5C,MAAMC,WAAWH,aAAaI,GAAG,CAAC,eAAeC;QACjD,MAAMC,YAAYN,aAAaI,GAAG,CAAC,eAAe,IAAIG,KAAKP,aAAaI,GAAG,CAAC,gBAAiBC;QAC7F,MAAMG,UAAUR,aAAaI,GAAG,CAAC,aAAa,IAAIG,KAAKP,aAAaI,GAAG,CAAC,cAAeC;QACvF,MAAMI,QAAQT,aAAaI,GAAG,CAAC,WAAWN,SAASE,aAAaI,GAAG,CAAC,UAAW,MAAM;QACrF,MAAMM,SAASV,aAAaI,GAAG,CAAC,YAAYN,SAASE,aAAaI,GAAG,CAAC,WAAY,MAAM;QACxF,MAAMO,SAASX,aAAaI,GAAG,CAAC,aAAyD;QACzF,MAAMQ,YAAYZ,aAAaI,GAAG,CAAC,gBAAkC;QAErE,MAAMS,UAAU;YACdV,UAAUA;YACVG;YACAE;YACAC;YACAC;YACAC;YACAC;QACF;QAEA,MAAME,cAAc,MAAMC,+BAAkB,CAACC,sBAAsB,CACjEnB,iBACAP,KAAK2B,EAAE,EACPJ;QAGF,OAAOrB,oBAAY,CAACC,IAAI,CAACqB;IAC3B,EAAE,OAAOpB,OAAO;QACdwB,QAAQxB,KAAK,CAAC,+BAA+BA;QAC7C,OAAOF,oBAAY,CAACC,IAAI,CACtB;YAAEC,OAAO;QAA6B,GACtC;YAAEC,QAAQ;QAAI;IAElB;AACF"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "a7393d97658b3e76db4ad259ba03acd1aa28978f"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_12uuylwt9r = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_12uuylwt9r();
cov_12uuylwt9r().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_12uuylwt9r().s[1]++;
Object.defineProperty(exports, "GET", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_12uuylwt9r().f[0]++;
    cov_12uuylwt9r().s[2]++;
    return GET;
  }
});
const _server =
/* istanbul ignore next */
(cov_12uuylwt9r().s[3]++, require("next/server"));
const _carehistory =
/* istanbul ignore next */
(cov_12uuylwt9r().s[4]++, require("../../../../../lib/db/queries/care-history"));
const _server1 =
/* istanbul ignore next */
(cov_12uuylwt9r().s[5]++, require("../../../../../lib/auth/server"));
async function GET(request, {
  params
}) {
  /* istanbul ignore next */
  cov_12uuylwt9r().f[1]++;
  cov_12uuylwt9r().s[6]++;
  try {
    const {
      user
    } =
    /* istanbul ignore next */
    (cov_12uuylwt9r().s[7]++, await (0, _server1.validateRequest)());
    /* istanbul ignore next */
    cov_12uuylwt9r().s[8]++;
    if (!user) {
      /* istanbul ignore next */
      cov_12uuylwt9r().b[0][0]++;
      cov_12uuylwt9r().s[9]++;
      return _server.NextResponse.json({
        error: 'Unauthorized'
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_12uuylwt9r().b[0][1]++;
    }
    const resolvedParams =
    /* istanbul ignore next */
    (cov_12uuylwt9r().s[10]++, await params);
    const plantInstanceId =
    /* istanbul ignore next */
    (cov_12uuylwt9r().s[11]++, parseInt(resolvedParams.plantInstanceId, 10));
    /* istanbul ignore next */
    cov_12uuylwt9r().s[12]++;
    if (isNaN(plantInstanceId)) {
      /* istanbul ignore next */
      cov_12uuylwt9r().b[1][0]++;
      cov_12uuylwt9r().s[13]++;
      return _server.NextResponse.json({
        error: 'Invalid plant instance ID'
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_12uuylwt9r().b[1][1]++;
    }
    // Get query parameters for filtering
    const {
      searchParams
    } =
    /* istanbul ignore next */
    (cov_12uuylwt9r().s[14]++, new URL(request.url));
    const careType =
    /* istanbul ignore next */
    (cov_12uuylwt9r().s[15]++,
    /* istanbul ignore next */
    (cov_12uuylwt9r().b[2][0]++, searchParams.get('careType')) ||
    /* istanbul ignore next */
    (cov_12uuylwt9r().b[2][1]++, undefined));
    const startDate =
    /* istanbul ignore next */
    (cov_12uuylwt9r().s[16]++, searchParams.get('startDate') ?
    /* istanbul ignore next */
    (cov_12uuylwt9r().b[3][0]++, new Date(searchParams.get('startDate'))) :
    /* istanbul ignore next */
    (cov_12uuylwt9r().b[3][1]++, undefined));
    const endDate =
    /* istanbul ignore next */
    (cov_12uuylwt9r().s[17]++, searchParams.get('endDate') ?
    /* istanbul ignore next */
    (cov_12uuylwt9r().b[4][0]++, new Date(searchParams.get('endDate'))) :
    /* istanbul ignore next */
    (cov_12uuylwt9r().b[4][1]++, undefined));
    const limit =
    /* istanbul ignore next */
    (cov_12uuylwt9r().s[18]++, searchParams.get('limit') ?
    /* istanbul ignore next */
    (cov_12uuylwt9r().b[5][0]++, parseInt(searchParams.get('limit'), 10)) :
    /* istanbul ignore next */
    (cov_12uuylwt9r().b[5][1]++, 50));
    const offset =
    /* istanbul ignore next */
    (cov_12uuylwt9r().s[19]++, searchParams.get('offset') ?
    /* istanbul ignore next */
    (cov_12uuylwt9r().b[6][0]++, parseInt(searchParams.get('offset'), 10)) :
    /* istanbul ignore next */
    (cov_12uuylwt9r().b[6][1]++, 0));
    const sortBy =
    /* istanbul ignore next */
    (cov_12uuylwt9r().s[20]++,
    /* istanbul ignore next */
    (cov_12uuylwt9r().b[7][0]++, searchParams.get('sortBy')) ||
    /* istanbul ignore next */
    (cov_12uuylwt9r().b[7][1]++, 'care_date'));
    const sortOrder =
    /* istanbul ignore next */
    (cov_12uuylwt9r().s[21]++,
    /* istanbul ignore next */
    (cov_12uuylwt9r().b[8][0]++, searchParams.get('sortOrder')) ||
    /* istanbul ignore next */
    (cov_12uuylwt9r().b[8][1]++, 'desc'));
    const filters =
    /* istanbul ignore next */
    (cov_12uuylwt9r().s[22]++, {
      careType: careType,
      startDate,
      endDate,
      limit,
      offset,
      sortBy,
      sortOrder
    });
    const careHistory =
    /* istanbul ignore next */
    (cov_12uuylwt9r().s[23]++, await _carehistory.CareHistoryQueries.getCareHistoryForPlant(plantInstanceId, user.id, filters));
    /* istanbul ignore next */
    cov_12uuylwt9r().s[24]++;
    return _server.NextResponse.json(careHistory);
  } catch (error) {
    /* istanbul ignore next */
    cov_12uuylwt9r().s[25]++;
    console.error('Failed to get care history:', error);
    /* istanbul ignore next */
    cov_12uuylwt9r().s[26]++;
    return _server.NextResponse.json({
      error: 'Failed to get care history'
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,