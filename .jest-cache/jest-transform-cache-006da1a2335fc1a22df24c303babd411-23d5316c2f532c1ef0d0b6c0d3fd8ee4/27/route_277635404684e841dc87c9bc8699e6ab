a12ee4989d3ba89082016cba9b3512ea
"use strict";

/* istanbul ignore next */
function cov_20sad3f1oe() {
  var path = "/Users/stefanbekker/projects/fancy-planties/src/app/api/care-guides/route.ts";
  var hash = "3a51a9b2454cef92fa9ac17236304a4ace5ac68c";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/stefanbekker/projects/fancy-planties/src/app/api/care-guides/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 18,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 19
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 20
        }
      },
      "6": {
        start: {
          line: 19,
          column: 16
        },
        end: {
          line: 19,
          column: 38
        }
      },
      "7": {
        start: {
          line: 20,
          column: 13
        },
        end: {
          line: 20,
          column: 27
        }
      },
      "8": {
        start: {
          line: 21,
          column: 17
        },
        end: {
          line: 21,
          column: 52
        }
      },
      "9": {
        start: {
          line: 22,
          column: 12
        },
        end: {
          line: 22,
          column: 38
        }
      },
      "10": {
        start: {
          line: 23,
          column: 16
        },
        end: {
          line: 23,
          column: 49
        }
      },
      "11": {
        start: {
          line: 24,
          column: 20
        },
        end: {
          line: 24,
          column: 42
        }
      },
      "12": {
        start: {
          line: 25,
          column: 30
        },
        end: {
          line: 79,
          column: 2
        }
      },
      "13": {
        start: {
          line: 80,
          column: 31
        },
        end: {
          line: 89,
          column: 2
        }
      },
      "14": {
        start: {
          line: 91,
          column: 4
        },
        end: {
          line: 144,
          column: 5
        }
      },
      "15": {
        start: {
          line: 92,
          column: 25
        },
        end: {
          line: 92,
          column: 62
        }
      },
      "16": {
        start: {
          line: 93,
          column: 8
        },
        end: {
          line: 99,
          column: 9
        }
      },
      "17": {
        start: {
          line: 94,
          column: 12
        },
        end: {
          line: 98,
          column: 15
        }
      },
      "18": {
        start: {
          line: 100,
          column: 21
        },
        end: {
          line: 100,
          column: 41
        }
      },
      "19": {
        start: {
          line: 101,
          column: 30
        },
        end: {
          line: 101,
          column: 63
        }
      },
      "20": {
        start: {
          line: 102,
          column: 29
        },
        end: {
          line: 125,
          column: 22
        }
      },
      "21": {
        start: {
          line: 126,
          column: 8
        },
        end: {
          line: 128,
          column: 11
        }
      },
      "22": {
        start: {
          line: 130,
          column: 8
        },
        end: {
          line: 130,
          column: 61
        }
      },
      "23": {
        start: {
          line: 131,
          column: 8
        },
        end: {
          line: 138,
          column: 9
        }
      },
      "24": {
        start: {
          line: 132,
          column: 12
        },
        end: {
          line: 137,
          column: 15
        }
      },
      "25": {
        start: {
          line: 139,
          column: 8
        },
        end: {
          line: 143,
          column: 11
        }
      },
      "26": {
        start: {
          line: 147,
          column: 4
        },
        end: {
          line: 195,
          column: 5
        }
      },
      "27": {
        start: {
          line: 148,
          column: 25
        },
        end: {
          line: 148,
          column: 62
        }
      },
      "28": {
        start: {
          line: 149,
          column: 8
        },
        end: {
          line: 155,
          column: 9
        }
      },
      "29": {
        start: {
          line: 150,
          column: 12
        },
        end: {
          line: 154,
          column: 15
        }
      },
      "30": {
        start: {
          line: 156,
          column: 33
        },
        end: {
          line: 156,
          column: 53
        }
      },
      "31": {
        start: {
          line: 157,
          column: 24
        },
        end: {
          line: 161,
          column: 10
        }
      },
      "32": {
        start: {
          line: 162,
          column: 22
        },
        end: {
          line: 162,
          column: 62
        }
      },
      "33": {
        start: {
          line: 163,
          column: 27
        },
        end: {
          line: 165,
          column: 9
        }
      },
      "34": {
        start: {
          line: 166,
          column: 8
        },
        end: {
          line: 168,
          column: 9
        }
      },
      "35": {
        start: {
          line: 167,
          column: 12
        },
        end: {
          line: 167,
          column: 106
        }
      },
      "36": {
        start: {
          line: 169,
          column: 8
        },
        end: {
          line: 171,
          column: 9
        }
      },
      "37": {
        start: {
          line: 170,
          column: 12
        },
        end: {
          line: 170,
          column: 96
        }
      },
      "38": {
        start: {
          line: 172,
          column: 8
        },
        end: {
          line: 177,
          column: 9
        }
      },
      "39": {
        start: {
          line: 173,
          column: 37
        },
        end: {
          line: 173,
          column: 538
        }
      },
      "40": {
        start: {
          line: 174,
          column: 12
        },
        end: {
          line: 176,
          column: 13
        }
      },
      "41": {
        start: {
          line: 175,
          column: 16
        },
        end: {
          line: 175,
          column: 50
        }
      },
      "42": {
        start: {
          line: 178,
          column: 31
        },
        end: {
          line: 178,
          column: 146
        }
      },
      "43": {
        start: {
          line: 179,
          column: 8
        },
        end: {
          line: 179,
          column: 57
        }
      },
      "44": {
        start: {
          line: 181,
          column: 8
        },
        end: {
          line: 181,
          column: 61
        }
      },
      "45": {
        start: {
          line: 182,
          column: 8
        },
        end: {
          line: 189,
          column: 9
        }
      },
      "46": {
        start: {
          line: 183,
          column: 12
        },
        end: {
          line: 188,
          column: 15
        }
      },
      "47": {
        start: {
          line: 190,
          column: 8
        },
        end: {
          line: 194,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        },
        loc: {
          start: {
            line: 12,
            column: 15
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 16
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "POST",
        decl: {
          start: {
            line: 90,
            column: 15
          },
          end: {
            line: 90,
            column: 19
          }
        },
        loc: {
          start: {
            line: 90,
            column: 29
          },
          end: {
            line: 145,
            column: 1
          }
        },
        line: 90
      },
      "4": {
        name: "GET",
        decl: {
          start: {
            line: 146,
            column: 15
          },
          end: {
            line: 146,
            column: 18
          }
        },
        loc: {
          start: {
            line: 146,
            column: 28
          },
          end: {
            line: 196,
            column: 1
          }
        },
        line: 146
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 93,
            column: 8
          },
          end: {
            line: 99,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 93,
            column: 8
          },
          end: {
            line: 99,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 93
      },
      "1": {
        loc: {
          start: {
            line: 106,
            column: 19
          },
          end: {
            line: 106,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 106,
            column: 19
          },
          end: {
            line: 106,
            column: 38
          }
        }, {
          start: {
            line: 106,
            column: 42
          },
          end: {
            line: 106,
            column: 46
          }
        }],
        line: 106
      },
      "2": {
        loc: {
          start: {
            line: 107,
            column: 21
          },
          end: {
            line: 107,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 107,
            column: 21
          },
          end: {
            line: 107,
            column: 42
          }
        }, {
          start: {
            line: 107,
            column: 46
          },
          end: {
            line: 107,
            column: 50
          }
        }],
        line: 107
      },
      "3": {
        loc: {
          start: {
            line: 108,
            column: 22
          },
          end: {
            line: 108,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 108,
            column: 22
          },
          end: {
            line: 108,
            column: 44
          }
        }, {
          start: {
            line: 108,
            column: 48
          },
          end: {
            line: 108,
            column: 52
          }
        }],
        line: 108
      },
      "4": {
        loc: {
          start: {
            line: 109,
            column: 24
          },
          end: {
            line: 109,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 109,
            column: 24
          },
          end: {
            line: 109,
            column: 48
          }
        }, {
          start: {
            line: 109,
            column: 52
          },
          end: {
            line: 109,
            column: 56
          }
        }],
        line: 109
      },
      "5": {
        loc: {
          start: {
            line: 111,
            column: 25
          },
          end: {
            line: 111,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 111,
            column: 25
          },
          end: {
            line: 111,
            column: 50
          }
        }, {
          start: {
            line: 111,
            column: 54
          },
          end: {
            line: 111,
            column: 58
          }
        }],
        line: 111
      },
      "6": {
        loc: {
          start: {
            line: 113,
            column: 22
          },
          end: {
            line: 113,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 113,
            column: 22
          },
          end: {
            line: 113,
            column: 44
          }
        }, {
          start: {
            line: 113,
            column: 48
          },
          end: {
            line: 113,
            column: 52
          }
        }],
        line: 113
      },
      "7": {
        loc: {
          start: {
            line: 114,
            column: 25
          },
          end: {
            line: 114,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 114,
            column: 25
          },
          end: {
            line: 114,
            column: 50
          }
        }, {
          start: {
            line: 114,
            column: 54
          },
          end: {
            line: 114,
            column: 58
          }
        }],
        line: 114
      },
      "8": {
        loc: {
          start: {
            line: 115,
            column: 22
          },
          end: {
            line: 115,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 115,
            column: 22
          },
          end: {
            line: 115,
            column: 44
          }
        }, {
          start: {
            line: 115,
            column: 48
          },
          end: {
            line: 115,
            column: 52
          }
        }],
        line: 115
      },
      "9": {
        loc: {
          start: {
            line: 116,
            column: 25
          },
          end: {
            line: 116,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 116,
            column: 25
          },
          end: {
            line: 116,
            column: 50
          }
        }, {
          start: {
            line: 116,
            column: 54
          },
          end: {
            line: 116,
            column: 58
          }
        }],
        line: 116
      },
      "10": {
        loc: {
          start: {
            line: 117,
            column: 22
          },
          end: {
            line: 117,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 117,
            column: 22
          },
          end: {
            line: 117,
            column: 44
          }
        }, {
          start: {
            line: 117,
            column: 48
          },
          end: {
            line: 117,
            column: 52
          }
        }],
        line: 117
      },
      "11": {
        loc: {
          start: {
            line: 118,
            column: 18
          },
          end: {
            line: 118,
            column: 44
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 118,
            column: 18
          },
          end: {
            line: 118,
            column: 36
          }
        }, {
          start: {
            line: 118,
            column: 40
          },
          end: {
            line: 118,
            column: 44
          }
        }],
        line: 118
      },
      "12": {
        loc: {
          start: {
            line: 119,
            column: 23
          },
          end: {
            line: 119,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 119,
            column: 23
          },
          end: {
            line: 119,
            column: 46
          }
        }, {
          start: {
            line: 119,
            column: 50
          },
          end: {
            line: 119,
            column: 54
          }
        }],
        line: 119
      },
      "13": {
        loc: {
          start: {
            line: 120,
            column: 25
          },
          end: {
            line: 120,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 120,
            column: 25
          },
          end: {
            line: 120,
            column: 50
          }
        }, {
          start: {
            line: 120,
            column: 54
          },
          end: {
            line: 120,
            column: 58
          }
        }],
        line: 120
      },
      "14": {
        loc: {
          start: {
            line: 121,
            column: 25
          },
          end: {
            line: 121,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 121,
            column: 25
          },
          end: {
            line: 121,
            column: 50
          }
        }, {
          start: {
            line: 121,
            column: 54
          },
          end: {
            line: 121,
            column: 58
          }
        }],
        line: 121
      },
      "15": {
        loc: {
          start: {
            line: 131,
            column: 8
          },
          end: {
            line: 138,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 131,
            column: 8
          },
          end: {
            line: 138,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 131
      },
      "16": {
        loc: {
          start: {
            line: 149,
            column: 8
          },
          end: {
            line: 155,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 149,
            column: 8
          },
          end: {
            line: 155,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 149
      },
      "17": {
        loc: {
          start: {
            line: 158,
            column: 27
          },
          end: {
            line: 158,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 158,
            column: 27
          },
          end: {
            line: 158,
            column: 60
          }
        }, {
          start: {
            line: 158,
            column: 64
          },
          end: {
            line: 158,
            column: 73
          }
        }],
        line: 158
      },
      "18": {
        loc: {
          start: {
            line: 159,
            column: 25
          },
          end: {
            line: 159,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 159,
            column: 25
          },
          end: {
            line: 159,
            column: 56
          }
        }, {
          start: {
            line: 159,
            column: 60
          },
          end: {
            line: 159,
            column: 69
          }
        }],
        line: 159
      },
      "19": {
        loc: {
          start: {
            line: 160,
            column: 22
          },
          end: {
            line: 160,
            column: 131
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 160,
            column: 64
          },
          end: {
            line: 160,
            column: 68
          }
        }, {
          start: {
            line: 160,
            column: 71
          },
          end: {
            line: 160,
            column: 131
          }
        }],
        line: 160
      },
      "20": {
        loc: {
          start: {
            line: 160,
            column: 71
          },
          end: {
            line: 160,
            column: 131
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 160,
            column: 114
          },
          end: {
            line: 160,
            column: 119
          }
        }, {
          start: {
            line: 160,
            column: 122
          },
          end: {
            line: 160,
            column: 131
          }
        }],
        line: 160
      },
      "21": {
        loc: {
          start: {
            line: 166,
            column: 8
          },
          end: {
            line: 168,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 166,
            column: 8
          },
          end: {
            line: 168,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 166
      },
      "22": {
        loc: {
          start: {
            line: 169,
            column: 8
          },
          end: {
            line: 171,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 169,
            column: 8
          },
          end: {
            line: 171,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 169
      },
      "23": {
        loc: {
          start: {
            line: 172,
            column: 8
          },
          end: {
            line: 177,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 172,
            column: 8
          },
          end: {
            line: 177,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 172
      },
      "24": {
        loc: {
          start: {
            line: 174,
            column: 12
          },
          end: {
            line: 176,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 174,
            column: 12
          },
          end: {
            line: 176,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 174
      },
      "25": {
        loc: {
          start: {
            line: 182,
            column: 8
          },
          end: {
            line: 189,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 182,
            column: 8
          },
          end: {
            line: 189,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 182
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/stefanbekker/projects/fancy-planties/src/app/api/care-guides/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport { z } from 'zod';\nimport { validateRequest } from '@/lib/auth/server';\nimport { db } from '@/lib/db';\nimport { careGuides } from '@/lib/db/schema';\nimport { eq, and, or, ilike, desc } from 'drizzle-orm';\n\nconst CareGuideCreateSchema = z.object({\n  taxonomyLevel: z.enum(['family', 'genus', 'species', 'cultivar']),\n  family: z.string().min(1),\n  genus: z.string().optional(),\n  species: z.string().optional(),\n  cultivar: z.string().optional(),\n  commonName: z.string().optional(),\n  title: z.string().min(1),\n  description: z.string().optional(),\n  images: z.array(z.string()).default([]),\n  watering: z.object({\n    frequency: z.string().optional(),\n    method: z.string().optional(),\n    tips: z.string().optional(),\n  }).optional(),\n  fertilizing: z.object({\n    frequency: z.string().optional(),\n    type: z.string().optional(),\n    schedule: z.string().optional(),\n    tips: z.string().optional(),\n  }).optional(),\n  lighting: z.object({\n    requirements: z.string().optional(),\n    intensity: z.string().optional(),\n    tips: z.string().optional(),\n  }).optional(),\n  temperature: z.object({\n    range: z.string().optional(),\n    tips: z.string().optional(),\n  }).optional(),\n  humidity: z.object({\n    requirements: z.string().optional(),\n    tips: z.string().optional(),\n  }).optional(),\n  soil: z.object({\n    type: z.string().optional(),\n    recipe: z.string().optional(),\n    tips: z.string().optional(),\n  }).optional(),\n  repotting: z.object({\n    frequency: z.string().optional(),\n    tips: z.string().optional(),\n  }).optional(),\n  propagation: z.object({\n    methods: z.string().optional(),\n    tips: z.string().optional(),\n  }).optional(),\n  generalTips: z.string().optional(),\n  isPublic: z.boolean().default(false),\n});\n\nconst CareGuideFiltersSchema = z.object({\n  taxonomyLevel: z.enum(['family', 'genus', 'species', 'cultivar']).optional(),\n  searchQuery: z.string().optional(),\n  isPublic: z.boolean().optional(),\n});\n\nexport async function POST(request: NextRequest) {\n  try {\n    const { user } = await validateRequest();\n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const body = await request.json();\n    const validatedData = CareGuideCreateSchema.parse(body);\n\n    const newCareGuide = await db.insert(careGuides).values({\n      userId: user.id,\n      taxonomyLevel: validatedData.taxonomyLevel,\n      family: validatedData.family,\n      genus: validatedData.genus || null,\n      species: validatedData.species || null,\n      cultivar: validatedData.cultivar || null,\n      commonName: validatedData.commonName || null,\n      title: validatedData.title,\n      description: validatedData.description || null,\n      images: validatedData.images,\n      watering: validatedData.watering || null,\n      fertilizing: validatedData.fertilizing || null,\n      lighting: validatedData.lighting || null,\n      temperature: validatedData.temperature || null,\n      humidity: validatedData.humidity || null,\n      soil: validatedData.soil || null,\n      repotting: validatedData.repotting || null,\n      propagation: validatedData.propagation || null,\n      generalTips: validatedData.generalTips || null,\n      isPublic: validatedData.isPublic,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    }).returning();\n\n    return NextResponse.json(newCareGuide[0], { status: 201 });\n  } catch (error) {\n    console.error('Failed to create care guide:', error);\n    \n    if (error instanceof z.ZodError) {\n      return NextResponse.json(\n        { error: 'Validation failed', details: error.issues },\n        { status: 400 }\n      );\n    }\n\n    return NextResponse.json(\n      { error: 'Failed to create care guide' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function GET(request: NextRequest) {\n  try {\n    const { user } = await validateRequest();\n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const { searchParams } = new URL(request.url);\n    const filters = CareGuideFiltersSchema.parse({\n      taxonomyLevel: searchParams.get('taxonomyLevel') || undefined,\n      searchQuery: searchParams.get('searchQuery') || undefined,\n      isPublic: searchParams.get('isPublic') === 'true' ? true : \n                searchParams.get('isPublic') === 'false' ? false : undefined,\n    });\n\n    const query = db.select().from(careGuides);\n    \n    const conditions = [eq(careGuides.userId, user.id)];\n\n    if (filters.taxonomyLevel) {\n      conditions.push(eq(careGuides.taxonomyLevel, filters.taxonomyLevel));\n    }\n\n    if (filters.isPublic !== undefined) {\n      conditions.push(eq(careGuides.isPublic, filters.isPublic));\n    }\n\n    if (filters.searchQuery) {\n      const searchConditions = or(\n        ilike(careGuides.title, `%${filters.searchQuery}%`),\n        ilike(careGuides.description, `%${filters.searchQuery}%`),\n        ilike(careGuides.commonName, `%${filters.searchQuery}%`),\n        ilike(careGuides.family, `%${filters.searchQuery}%`),\n        ilike(careGuides.genus, `%${filters.searchQuery}%`),\n        ilike(careGuides.species, `%${filters.searchQuery}%`)\n      );\n      if (searchConditions) {\n        conditions.push(searchConditions);\n      }\n    }\n\n    const userCareGuides = await query\n      .where(and(...conditions))\n      .orderBy(desc(careGuides.updatedAt));\n\n    return NextResponse.json(userCareGuides);\n  } catch (error) {\n    console.error('Failed to fetch care guides:', error);\n    \n    if (error instanceof z.ZodError) {\n      return NextResponse.json(\n        { error: 'Validation failed', details: error.issues },\n        { status: 400 }\n      );\n    }\n\n    return NextResponse.json(\n      { error: 'Failed to fetch care guides' },\n      { status: 500 }\n    );\n  }\n}"],
      names: ["GET", "POST", "CareGuideCreateSchema", "z", "object", "taxonomyLevel", "enum", "family", "string", "min", "genus", "optional", "species", "cultivar", "commonName", "title", "description", "images", "array", "default", "watering", "frequency", "method", "tips", "fertilizing", "type", "schedule", "lighting", "requirements", "intensity", "temperature", "range", "humidity", "soil", "recipe", "repotting", "propagation", "methods", "generalTips", "isPublic", "boolean", "CareGuideFiltersSchema", "searchQuery", "request", "user", "validateRequest", "NextResponse", "json", "error", "status", "body", "validatedData", "parse", "newCareGuide", "db", "insert", "careGuides", "values", "userId", "id", "createdAt", "Date", "updatedAt", "returning", "console", "ZodError", "details", "issues", "searchParams", "URL", "url", "filters", "get", "undefined", "query", "select", "from", "conditions", "eq", "push", "searchConditions", "or", "ilike", "userCareGuides", "where", "and", "orderBy", "desc"],
      mappings: ";;;;;;;;;;;QAqHsBA;eAAAA;;QArDAC;eAAAA;;;wBAhEoB;qBACxB;yBACc;oBACb;wBACQ;4BACc;AAEzC,MAAMC,wBAAwBC,MAAC,CAACC,MAAM,CAAC;IACrCC,eAAeF,MAAC,CAACG,IAAI,CAAC;QAAC;QAAU;QAAS;QAAW;KAAW;IAChEC,QAAQJ,MAAC,CAACK,MAAM,GAAGC,GAAG,CAAC;IACvBC,OAAOP,MAAC,CAACK,MAAM,GAAGG,QAAQ;IAC1BC,SAAST,MAAC,CAACK,MAAM,GAAGG,QAAQ;IAC5BE,UAAUV,MAAC,CAACK,MAAM,GAAGG,QAAQ;IAC7BG,YAAYX,MAAC,CAACK,MAAM,GAAGG,QAAQ;IAC/BI,OAAOZ,MAAC,CAACK,MAAM,GAAGC,GAAG,CAAC;IACtBO,aAAab,MAAC,CAACK,MAAM,GAAGG,QAAQ;IAChCM,QAAQd,MAAC,CAACe,KAAK,CAACf,MAAC,CAACK,MAAM,IAAIW,OAAO,CAAC,EAAE;IACtCC,UAAUjB,MAAC,CAACC,MAAM,CAAC;QACjBiB,WAAWlB,MAAC,CAACK,MAAM,GAAGG,QAAQ;QAC9BW,QAAQnB,MAAC,CAACK,MAAM,GAAGG,QAAQ;QAC3BY,MAAMpB,MAAC,CAACK,MAAM,GAAGG,QAAQ;IAC3B,GAAGA,QAAQ;IACXa,aAAarB,MAAC,CAACC,MAAM,CAAC;QACpBiB,WAAWlB,MAAC,CAACK,MAAM,GAAGG,QAAQ;QAC9Bc,MAAMtB,MAAC,CAACK,MAAM,GAAGG,QAAQ;QACzBe,UAAUvB,MAAC,CAACK,MAAM,GAAGG,QAAQ;QAC7BY,MAAMpB,MAAC,CAACK,MAAM,GAAGG,QAAQ;IAC3B,GAAGA,QAAQ;IACXgB,UAAUxB,MAAC,CAACC,MAAM,CAAC;QACjBwB,cAAczB,MAAC,CAACK,MAAM,GAAGG,QAAQ;QACjCkB,WAAW1B,MAAC,CAACK,MAAM,GAAGG,QAAQ;QAC9BY,MAAMpB,MAAC,CAACK,MAAM,GAAGG,QAAQ;IAC3B,GAAGA,QAAQ;IACXmB,aAAa3B,MAAC,CAACC,MAAM,CAAC;QACpB2B,OAAO5B,MAAC,CAACK,MAAM,GAAGG,QAAQ;QAC1BY,MAAMpB,MAAC,CAACK,MAAM,GAAGG,QAAQ;IAC3B,GAAGA,QAAQ;IACXqB,UAAU7B,MAAC,CAACC,MAAM,CAAC;QACjBwB,cAAczB,MAAC,CAACK,MAAM,GAAGG,QAAQ;QACjCY,MAAMpB,MAAC,CAACK,MAAM,GAAGG,QAAQ;IAC3B,GAAGA,QAAQ;IACXsB,MAAM9B,MAAC,CAACC,MAAM,CAAC;QACbqB,MAAMtB,MAAC,CAACK,MAAM,GAAGG,QAAQ;QACzBuB,QAAQ/B,MAAC,CAACK,MAAM,GAAGG,QAAQ;QAC3BY,MAAMpB,MAAC,CAACK,MAAM,GAAGG,QAAQ;IAC3B,GAAGA,QAAQ;IACXwB,WAAWhC,MAAC,CAACC,MAAM,CAAC;QAClBiB,WAAWlB,MAAC,CAACK,MAAM,GAAGG,QAAQ;QAC9BY,MAAMpB,MAAC,CAACK,MAAM,GAAGG,QAAQ;IAC3B,GAAGA,QAAQ;IACXyB,aAAajC,MAAC,CAACC,MAAM,CAAC;QACpBiC,SAASlC,MAAC,CAACK,MAAM,GAAGG,QAAQ;QAC5BY,MAAMpB,MAAC,CAACK,MAAM,GAAGG,QAAQ;IAC3B,GAAGA,QAAQ;IACX2B,aAAanC,MAAC,CAACK,MAAM,GAAGG,QAAQ;IAChC4B,UAAUpC,MAAC,CAACqC,OAAO,GAAGrB,OAAO,CAAC;AAChC;AAEA,MAAMsB,yBAAyBtC,MAAC,CAACC,MAAM,CAAC;IACtCC,eAAeF,MAAC,CAACG,IAAI,CAAC;QAAC;QAAU;QAAS;QAAW;KAAW,EAAEK,QAAQ;IAC1E+B,aAAavC,MAAC,CAACK,MAAM,GAAGG,QAAQ;IAChC4B,UAAUpC,MAAC,CAACqC,OAAO,GAAG7B,QAAQ;AAChC;AAEO,eAAeV,KAAK0C,OAAoB;IAC7C,IAAI;QACF,MAAM,EAAEC,IAAI,EAAE,GAAG,MAAMC,IAAAA,wBAAe;QACtC,IAAI,CAACD,MAAM;YACT,OAAOE,oBAAY,CAACC,IAAI,CAAC;gBAAEC,OAAO;YAAe,GAAG;gBAAEC,QAAQ;YAAI;QACpE;QAEA,MAAMC,OAAO,MAAMP,QAAQI,IAAI;QAC/B,MAAMI,gBAAgBjD,sBAAsBkD,KAAK,CAACF;QAElD,MAAMG,eAAe,MAAMC,MAAE,CAACC,MAAM,CAACC,kBAAU,EAAEC,MAAM,CAAC;YACtDC,QAAQd,KAAKe,EAAE;YACftD,eAAe8C,cAAc9C,aAAa;YAC1CE,QAAQ4C,cAAc5C,MAAM;YAC5BG,OAAOyC,cAAczC,KAAK,IAAI;YAC9BE,SAASuC,cAAcvC,OAAO,IAAI;YAClCC,UAAUsC,cAActC,QAAQ,IAAI;YACpCC,YAAYqC,cAAcrC,UAAU,IAAI;YACxCC,OAAOoC,cAAcpC,KAAK;YAC1BC,aAAamC,cAAcnC,WAAW,IAAI;YAC1CC,QAAQkC,cAAclC,MAAM;YAC5BG,UAAU+B,cAAc/B,QAAQ,IAAI;YACpCI,aAAa2B,cAAc3B,WAAW,IAAI;YAC1CG,UAAUwB,cAAcxB,QAAQ,IAAI;YACpCG,aAAaqB,cAAcrB,WAAW,IAAI;YAC1CE,UAAUmB,cAAcnB,QAAQ,IAAI;YACpCC,MAAMkB,cAAclB,IAAI,IAAI;YAC5BE,WAAWgB,cAAchB,SAAS,IAAI;YACtCC,aAAae,cAAcf,WAAW,IAAI;YAC1CE,aAAaa,cAAcb,WAAW,IAAI;YAC1CC,UAAUY,cAAcZ,QAAQ;YAChCqB,WAAW,IAAIC;YACfC,WAAW,IAAID;QACjB,GAAGE,SAAS;QAEZ,OAAOjB,oBAAY,CAACC,IAAI,CAACM,YAAY,CAAC,EAAE,EAAE;YAAEJ,QAAQ;QAAI;IAC1D,EAAE,OAAOD,OAAO;QACdgB,QAAQhB,KAAK,CAAC,gCAAgCA;QAE9C,IAAIA,iBAAiB7C,MAAC,CAAC8D,QAAQ,EAAE;YAC/B,OAAOnB,oBAAY,CAACC,IAAI,CACtB;gBAAEC,OAAO;gBAAqBkB,SAASlB,MAAMmB,MAAM;YAAC,GACpD;gBAAElB,QAAQ;YAAI;QAElB;QAEA,OAAOH,oBAAY,CAACC,IAAI,CACtB;YAAEC,OAAO;QAA8B,GACvC;YAAEC,QAAQ;QAAI;IAElB;AACF;AAEO,eAAejD,IAAI2C,OAAoB;IAC5C,IAAI;QACF,MAAM,EAAEC,IAAI,EAAE,GAAG,MAAMC,IAAAA,wBAAe;QACtC,IAAI,CAACD,MAAM;YACT,OAAOE,oBAAY,CAACC,IAAI,CAAC;gBAAEC,OAAO;YAAe,GAAG;gBAAEC,QAAQ;YAAI;QACpE;QAEA,MAAM,EAAEmB,YAAY,EAAE,GAAG,IAAIC,IAAI1B,QAAQ2B,GAAG;QAC5C,MAAMC,UAAU9B,uBAAuBW,KAAK,CAAC;YAC3C/C,eAAe+D,aAAaI,GAAG,CAAC,oBAAoBC;YACpD/B,aAAa0B,aAAaI,GAAG,CAAC,kBAAkBC;YAChDlC,UAAU6B,aAAaI,GAAG,CAAC,gBAAgB,SAAS,OAC1CJ,aAAaI,GAAG,CAAC,gBAAgB,UAAU,QAAQC;QAC/D;QAEA,MAAMC,QAAQpB,MAAE,CAACqB,MAAM,GAAGC,IAAI,CAACpB,kBAAU;QAEzC,MAAMqB,aAAa;YAACC,IAAAA,cAAE,EAACtB,kBAAU,CAACE,MAAM,EAAEd,KAAKe,EAAE;SAAE;QAEnD,IAAIY,QAAQlE,aAAa,EAAE;YACzBwE,WAAWE,IAAI,CAACD,IAAAA,cAAE,EAACtB,kBAAU,CAACnD,aAAa,EAAEkE,QAAQlE,aAAa;QACpE;QAEA,IAAIkE,QAAQhC,QAAQ,KAAKkC,WAAW;YAClCI,WAAWE,IAAI,CAACD,IAAAA,cAAE,EAACtB,kBAAU,CAACjB,QAAQ,EAAEgC,QAAQhC,QAAQ;QAC1D;QAEA,IAAIgC,QAAQ7B,WAAW,EAAE;YACvB,MAAMsC,mBAAmBC,IAAAA,cAAE,EACzBC,IAAAA,iBAAK,EAAC1B,kBAAU,CAACzC,KAAK,EAAE,CAAC,CAAC,EAAEwD,QAAQ7B,WAAW,CAAC,CAAC,CAAC,GAClDwC,IAAAA,iBAAK,EAAC1B,kBAAU,CAACxC,WAAW,EAAE,CAAC,CAAC,EAAEuD,QAAQ7B,WAAW,CAAC,CAAC,CAAC,GACxDwC,IAAAA,iBAAK,EAAC1B,kBAAU,CAAC1C,UAAU,EAAE,CAAC,CAAC,EAAEyD,QAAQ7B,WAAW,CAAC,CAAC,CAAC,GACvDwC,IAAAA,iBAAK,EAAC1B,kBAAU,CAACjD,MAAM,EAAE,CAAC,CAAC,EAAEgE,QAAQ7B,WAAW,CAAC,CAAC,CAAC,GACnDwC,IAAAA,iBAAK,EAAC1B,kBAAU,CAAC9C,KAAK,EAAE,CAAC,CAAC,EAAE6D,QAAQ7B,WAAW,CAAC,CAAC,CAAC,GAClDwC,IAAAA,iBAAK,EAAC1B,kBAAU,CAAC5C,OAAO,EAAE,CAAC,CAAC,EAAE2D,QAAQ7B,WAAW,CAAC,CAAC,CAAC;YAEtD,IAAIsC,kBAAkB;gBACpBH,WAAWE,IAAI,CAACC;YAClB;QACF;QAEA,MAAMG,iBAAiB,MAAMT,MAC1BU,KAAK,CAACC,IAAAA,eAAG,KAAIR,aACbS,OAAO,CAACC,IAAAA,gBAAI,EAAC/B,kBAAU,CAACM,SAAS;QAEpC,OAAOhB,oBAAY,CAACC,IAAI,CAACoC;IAC3B,EAAE,OAAOnC,OAAO;QACdgB,QAAQhB,KAAK,CAAC,gCAAgCA;QAE9C,IAAIA,iBAAiB7C,MAAC,CAAC8D,QAAQ,EAAE;YAC/B,OAAOnB,oBAAY,CAACC,IAAI,CACtB;gBAAEC,OAAO;gBAAqBkB,SAASlB,MAAMmB,MAAM;YAAC,GACpD;gBAAElB,QAAQ;YAAI;QAElB;QAEA,OAAOH,oBAAY,CAACC,IAAI,CACtB;YAAEC,OAAO;QAA8B,GACvC;YAAEC,QAAQ;QAAI;IAElB;AACF"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "3a51a9b2454cef92fa9ac17236304a4ace5ac68c"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_20sad3f1oe = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_20sad3f1oe();
cov_20sad3f1oe().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_20sad3f1oe().f[0]++;
  cov_20sad3f1oe().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_20sad3f1oe().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_20sad3f1oe().s[3]++;
_export(exports, {
  get GET() {
    /* istanbul ignore next */
    cov_20sad3f1oe().f[1]++;
    cov_20sad3f1oe().s[4]++;
    return GET;
  },
  get POST() {
    /* istanbul ignore next */
    cov_20sad3f1oe().f[2]++;
    cov_20sad3f1oe().s[5]++;
    return POST;
  }
});
const _server =
/* istanbul ignore next */
(cov_20sad3f1oe().s[6]++, require("next/server"));
const _zod =
/* istanbul ignore next */
(cov_20sad3f1oe().s[7]++, require("zod"));
const _server1 =
/* istanbul ignore next */
(cov_20sad3f1oe().s[8]++, require("../../../lib/auth/server"));
const _db =
/* istanbul ignore next */
(cov_20sad3f1oe().s[9]++, require("../../../lib/db"));
const _schema =
/* istanbul ignore next */
(cov_20sad3f1oe().s[10]++, require("../../../lib/db/schema"));
const _drizzleorm =
/* istanbul ignore next */
(cov_20sad3f1oe().s[11]++, require("drizzle-orm"));
const CareGuideCreateSchema =
/* istanbul ignore next */
(cov_20sad3f1oe().s[12]++, _zod.z.object({
  taxonomyLevel: _zod.z.enum(['family', 'genus', 'species', 'cultivar']),
  family: _zod.z.string().min(1),
  genus: _zod.z.string().optional(),
  species: _zod.z.string().optional(),
  cultivar: _zod.z.string().optional(),
  commonName: _zod.z.string().optional(),
  title: _zod.z.string().min(1),
  description: _zod.z.string().optional(),
  images: _zod.z.array(_zod.z.string()).default([]),
  watering: _zod.z.object({
    frequency: _zod.z.string().optional(),
    method: _zod.z.string().optional(),
    tips: _zod.z.string().optional()
  }).optional(),
  fertilizing: _zod.z.object({
    frequency: _zod.z.string().optional(),
    type: _zod.z.string().optional(),
    schedule: _zod.z.string().optional(),
    tips: _zod.z.string().optional()
  }).optional(),
  lighting: _zod.z.object({
    requirements: _zod.z.string().optional(),
    intensity: _zod.z.string().optional(),
    tips: _zod.z.string().optional()
  }).optional(),
  temperature: _zod.z.object({
    range: _zod.z.string().optional(),
    tips: _zod.z.string().optional()
  }).optional(),
  humidity: _zod.z.object({
    requirements: _zod.z.string().optional(),
    tips: _zod.z.string().optional()
  }).optional(),
  soil: _zod.z.object({
    type: _zod.z.string().optional(),
    recipe: _zod.z.string().optional(),
    tips: _zod.z.string().optional()
  }).optional(),
  repotting: _zod.z.object({
    frequency: _zod.z.string().optional(),
    tips: _zod.z.string().optional()
  }).optional(),
  propagation: _zod.z.object({
    methods: _zod.z.string().optional(),
    tips: _zod.z.string().optional()
  }).optional(),
  generalTips: _zod.z.string().optional(),
  isPublic: _zod.z.boolean().default(false)
}));
const CareGuideFiltersSchema =
/* istanbul ignore next */
(cov_20sad3f1oe().s[13]++, _zod.z.object({
  taxonomyLevel: _zod.z.enum(['family', 'genus', 'species', 'cultivar']).optional(),
  searchQuery: _zod.z.string().optional(),
  isPublic: _zod.z.boolean().optional()
}));
async function POST(request) {
  /* istanbul ignore next */
  cov_20sad3f1oe().f[3]++;
  cov_20sad3f1oe().s[14]++;
  try {
    const {
      user
    } =
    /* istanbul ignore next */
    (cov_20sad3f1oe().s[15]++, await (0, _server1.validateRequest)());
    /* istanbul ignore next */
    cov_20sad3f1oe().s[16]++;
    if (!user) {
      /* istanbul ignore next */
      cov_20sad3f1oe().b[0][0]++;
      cov_20sad3f1oe().s[17]++;
      return _server.NextResponse.json({
        error: 'Unauthorized'
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_20sad3f1oe().b[0][1]++;
    }
    const body =
    /* istanbul ignore next */
    (cov_20sad3f1oe().s[18]++, await request.json());
    const validatedData =
    /* istanbul ignore next */
    (cov_20sad3f1oe().s[19]++, CareGuideCreateSchema.parse(body));
    const newCareGuide =
    /* istanbul ignore next */
    (cov_20sad3f1oe().s[20]++, await _db.db.insert(_schema.careGuides).values({
      userId: user.id,
      taxonomyLevel: validatedData.taxonomyLevel,
      family: validatedData.family,
      genus:
      /* istanbul ignore next */
      (cov_20sad3f1oe().b[1][0]++, validatedData.genus) ||
      /* istanbul ignore next */
      (cov_20sad3f1oe().b[1][1]++, null),
      species:
      /* istanbul ignore next */
      (cov_20sad3f1oe().b[2][0]++, validatedData.species) ||
      /* istanbul ignore next */
      (cov_20sad3f1oe().b[2][1]++, null),
      cultivar:
      /* istanbul ignore next */
      (cov_20sad3f1oe().b[3][0]++, validatedData.cultivar) ||
      /* istanbul ignore next */
      (cov_20sad3f1oe().b[3][1]++, null),
      commonName:
      /* istanbul ignore next */
      (cov_20sad3f1oe().b[4][0]++, validatedData.commonName) ||
      /* istanbul ignore next */
      (cov_20sad3f1oe().b[4][1]++, null),
      title: validatedData.title,
      description:
      /* istanbul ignore next */
      (cov_20sad3f1oe().b[5][0]++, validatedData.description) ||
      /* istanbul ignore next */
      (cov_20sad3f1oe().b[5][1]++, null),
      images: validatedData.images,
      watering:
      /* istanbul ignore next */
      (cov_20sad3f1oe().b[6][0]++, validatedData.watering) ||
      /* istanbul ignore next */
      (cov_20sad3f1oe().b[6][1]++, null),
      fertilizing:
      /* istanbul ignore next */
      (cov_20sad3f1oe().b[7][0]++, validatedData.fertilizing) ||
      /* istanbul ignore next */
      (cov_20sad3f1oe().b[7][1]++, null),
      lighting:
      /* istanbul ignore next */
      (cov_20sad3f1oe().b[8][0]++, validatedData.lighting) ||
      /* istanbul ignore next */
      (cov_20sad3f1oe().b[8][1]++, null),
      temperature:
      /* istanbul ignore next */
      (cov_20sad3f1oe().b[9][0]++, validatedData.temperature) ||
      /* istanbul ignore next */
      (cov_20sad3f1oe().b[9][1]++, null),
      humidity:
      /* istanbul ignore next */
      (cov_20sad3f1oe().b[10][0]++, validatedData.humidity) ||
      /* istanbul ignore next */
      (cov_20sad3f1oe().b[10][1]++, null),
      soil:
      /* istanbul ignore next */
      (cov_20sad3f1oe().b[11][0]++, validatedData.soil) ||
      /* istanbul ignore next */
      (cov_20sad3f1oe().b[11][1]++, null),
      repotting:
      /* istanbul ignore next */
      (cov_20sad3f1oe().b[12][0]++, validatedData.repotting) ||
      /* istanbul ignore next */
      (cov_20sad3f1oe().b[12][1]++, null),
      propagation:
      /* istanbul ignore next */
      (cov_20sad3f1oe().b[13][0]++, validatedData.propagation) ||
      /* istanbul ignore next */
      (cov_20sad3f1oe().b[13][1]++, null),
      generalTips:
      /* istanbul ignore next */
      (cov_20sad3f1oe().b[14][0]++, validatedData.generalTips) ||
      /* istanbul ignore next */
      (cov_20sad3f1oe().b[14][1]++, null),
      isPublic: validatedData.isPublic,
      createdAt: new Date(),
      updatedAt: new Date()
    }).returning());
    /* istanbul ignore next */
    cov_20sad3f1oe().s[21]++;
    return _server.NextResponse.json(newCareGuide[0], {
      status: 201
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_20sad3f1oe().s[22]++;
    console.error('Failed to create care guide:', error);
    /* istanbul ignore next */
    cov_20sad3f1oe().s[23]++;
    if (error instanceof _zod.z.ZodError) {
      /* istanbul ignore next */
      cov_20sad3f1oe().b[15][0]++;
      cov_20sad3f1oe().s[24]++;
      return _server.NextResponse.json({
        error: 'Validation failed',
        details: error.issues
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_20sad3f1oe().b[15][1]++;
    }
    cov_20sad3f1oe().s[25]++;
    return _server.NextResponse.json({
      error: 'Failed to create care guide'
    }, {
      status: 500
    });
  }
}
async function GET(request) {
  /* istanbul ignore next */
  cov_20sad3f1oe().f[4]++;
  cov_20sad3f1oe().s[26]++;
  try {
    const {
      user
    } =
    /* istanbul ignore next */
    (cov_20sad3f1oe().s[27]++, await (0, _server1.validateRequest)());
    /* istanbul ignore next */
    cov_20sad3f1oe().s[28]++;
    if (!user) {
      /* istanbul ignore next */
      cov_20sad3f1oe().b[16][0]++;
      cov_20sad3f1oe().s[29]++;
      return _server.NextResponse.json({
        error: 'Unauthorized'
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_20sad3f1oe().b[16][1]++;
    }
    const {
      searchParams
    } =
    /* istanbul ignore next */
    (cov_20sad3f1oe().s[30]++, new URL(request.url));
    const filters =
    /* istanbul ignore next */
    (cov_20sad3f1oe().s[31]++, CareGuideFiltersSchema.parse({
      taxonomyLevel:
      /* istanbul ignore next */
      (cov_20sad3f1oe().b[17][0]++, searchParams.get('taxonomyLevel')) ||
      /* istanbul ignore next */
      (cov_20sad3f1oe().b[17][1]++, undefined),
      searchQuery:
      /* istanbul ignore next */
      (cov_20sad3f1oe().b[18][0]++, searchParams.get('searchQuery')) ||
      /* istanbul ignore next */
      (cov_20sad3f1oe().b[18][1]++, undefined),
      isPublic: searchParams.get('isPublic') === 'true' ?
      /* istanbul ignore next */
      (cov_20sad3f1oe().b[19][0]++, true) :
      /* istanbul ignore next */
      (cov_20sad3f1oe().b[19][1]++, searchParams.get('isPublic') === 'false' ?
      /* istanbul ignore next */
      (cov_20sad3f1oe().b[20][0]++, false) :
      /* istanbul ignore next */
      (cov_20sad3f1oe().b[20][1]++, undefined))
    }));
    const query =
    /* istanbul ignore next */
    (cov_20sad3f1oe().s[32]++, _db.db.select().from(_schema.careGuides));
    const conditions =
    /* istanbul ignore next */
    (cov_20sad3f1oe().s[33]++, [(0, _drizzleorm.eq)(_schema.careGuides.userId, user.id)]);
    /* istanbul ignore next */
    cov_20sad3f1oe().s[34]++;
    if (filters.taxonomyLevel) {
      /* istanbul ignore next */
      cov_20sad3f1oe().b[21][0]++;
      cov_20sad3f1oe().s[35]++;
      conditions.push((0, _drizzleorm.eq)(_schema.careGuides.taxonomyLevel, filters.taxonomyLevel));
    } else
    /* istanbul ignore next */
    {
      cov_20sad3f1oe().b[21][1]++;
    }
    cov_20sad3f1oe().s[36]++;
    if (filters.isPublic !== undefined) {
      /* istanbul ignore next */
      cov_20sad3f1oe().b[22][0]++;
      cov_20sad3f1oe().s[37]++;
      conditions.push((0, _drizzleorm.eq)(_schema.careGuides.isPublic, filters.isPublic));
    } else
    /* istanbul ignore next */
    {
      cov_20sad3f1oe().b[22][1]++;
    }
    cov_20sad3f1oe().s[38]++;
    if (filters.searchQuery) {
      /* istanbul ignore next */
      cov_20sad3f1oe().b[23][0]++;
      const searchConditions =
      /* istanbul ignore next */
      (cov_20sad3f1oe().s[39]++, (0, _drizzleorm.or)((0, _drizzleorm.ilike)(_schema.careGuides.title, `%${filters.searchQuery}%`), (0, _drizzleorm.ilike)(_schema.careGuides.description, `%${filters.searchQuery}%`), (0, _drizzleorm.ilike)(_schema.careGuides.commonName, `%${filters.searchQuery}%`), (0, _drizzleorm.ilike)(_schema.careGuides.family, `%${filters.searchQuery}%`), (0, _drizzleorm.ilike)(_schema.careGuides.genus, `%${filters.searchQuery}%`), (0, _drizzleorm.ilike)(_schema.careGuides.species, `%${filters.searchQuery}%`)));
      /* istanbul ignore next */
      cov_20sad3f1oe().s[40]++;
      if (searchConditions) {
        /* istanbul ignore next */
        cov_20sad3f1oe().b[24][0]++;
        cov_20sad3f1oe().s[41]++;
        conditions.push(searchConditions);
      } else
      /* istanbul ignore next */
      {
        cov_20sad3f1oe().b[24][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_20sad3f1oe().b[23][1]++;
    }
    const userCareGuides =
    /* istanbul ignore next */
    (cov_20sad3f1oe().s[42]++, await query.where((0, _drizzleorm.and)(...conditions)).orderBy((0, _drizzleorm.desc)(_schema.careGuides.updatedAt)));
    /* istanbul ignore next */
    cov_20sad3f1oe().s[43]++;
    return _server.NextResponse.json(userCareGuides);
  } catch (error) {
    /* istanbul ignore next */
    cov_20sad3f1oe().s[44]++;
    console.error('Failed to fetch care guides:', error);
    /* istanbul ignore next */
    cov_20sad3f1oe().s[45]++;
    if (error instanceof _zod.z.ZodError) {
      /* istanbul ignore next */
      cov_20sad3f1oe().b[25][0]++;
      cov_20sad3f1oe().s[46]++;
      return _server.NextResponse.json({
        error: 'Validation failed',
        details: error.issues
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_20sad3f1oe().b[25][1]++;
    }
    cov_20sad3f1oe().s[47]++;
    return _server.NextResponse.json({
      error: 'Failed to fetch care guides'
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,