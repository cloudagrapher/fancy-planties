e13b1dc9a671ae567cd645bd60c54a98
// Component render test helpers
"use strict";
// Mock useRouter hook
jest.mock('next/navigation', ()=>({
        useRouter: ()=>mockRouter,
        usePathname: ()=>'/',
        useSearchParams: ()=>new URLSearchParams()
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get TestProviders () {
        return TestProviders;
    },
    get createTestQueryClient () {
        return createTestQueryClient;
    },
    get mockApiError () {
        return mockApiError;
    },
    get mockApiResponses () {
        return mockApiResponses;
    },
    get renderAndWaitForLoading () {
        return renderAndWaitForLoading;
    },
    get renderWithAuthenticatedUser () {
        return renderWithAuthenticatedUser;
    },
    get renderWithCuratorUser () {
        return renderWithCuratorUser;
    },
    get renderWithProviders () {
        return renderWithProviders;
    },
    get resetTestState () {
        return resetTestState;
    },
    get testUtils () {
        return testUtils;
    },
    get userInteractions () {
        return userInteractions;
    },
    get waitForElement () {
        return waitForElement;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _userevent = /*#__PURE__*/ _interop_require_default(require("@testing-library/user-event"));
const _reactquery = require("@tanstack/react-query");
const _UserProvider = require("../../components/auth/UserProvider");
const _userfactory = require("../factories/user-factory.js");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Mock Next.js router
const mockRouter = {
    push: jest.fn(),
    replace: jest.fn(),
    back: jest.fn(),
    forward: jest.fn(),
    refresh: jest.fn(),
    prefetch: jest.fn(),
    pathname: '/',
    route: '/',
    query: {},
    asPath: '/',
    basePath: '',
    isLocaleDomain: true,
    isReady: true,
    isPreview: false
};
const createTestQueryClient = ()=>{
    return new _reactquery.QueryClient({
        defaultOptions: {
            queries: {
                retry: false,
                gcTime: 0,
                staleTime: 0
            },
            mutations: {
                retry: false
            }
        },
        logger: {
            log: ()=>{},
            warn: ()=>{},
            error: ()=>{}
        }
    });
};
const TestProviders = ({ children, user = null, queryClient = createTestQueryClient() })=>{
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactquery.QueryClientProvider, {
        client: queryClient,
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_UserProvider.UserProvider, {
            user: user,
            children: children
        })
    });
};
const renderWithProviders = (ui, options = {})=>{
    const { user = null, queryClient = createTestQueryClient(), route = '/', routerMock = {}, ...renderOptions } = options;
    // Update router mock with custom values
    Object.assign(mockRouter, {
        pathname: route,
        asPath: route,
        route: route,
        ...routerMock
    });
    // Create wrapper with providers
    const Wrapper = ({ children })=>/*#__PURE__*/ (0, _jsxruntime.jsx)(TestProviders, {
            user: user,
            queryClient: queryClient,
            children: children
        });
    // Render component
    const renderResult = (0, _react1.render)(ui, {
        wrapper: Wrapper,
        ...renderOptions
    });
    // Return enhanced result with utilities
    return {
        ...renderResult,
        user: _userevent.default.setup(),
        queryClient,
        router: mockRouter
    };
};
const renderWithAuthenticatedUser = (ui, options = {})=>{
    const { userOverrides = {}, sessionOverrides = {}, ...renderOptions } = options;
    const { user, session } = (0, _userfactory.createAuthenticatedTestUser)(userOverrides, sessionOverrides);
    const result = renderWithProviders(ui, {
        user,
        ...renderOptions
    });
    return {
        ...result,
        testUser: user,
        testSession: session
    };
};
const renderWithCuratorUser = (ui, options = {})=>{
    return renderWithAuthenticatedUser(ui, {
        userOverrides: {
            isCurator: true
        },
        ...options
    });
};
const renderAndWaitForLoading = async (ui, options = {})=>{
    const result = renderWithProviders(ui, options);
    // Wait for any loading indicators to disappear
    await (0, _react1.waitFor)(()=>{
        expect(_react1.screen.queryByText(/loading/i)).not.toBeInTheDocument();
        expect(_react1.screen.queryByRole('progressbar')).not.toBeInTheDocument();
    }, {
        timeout: 5000
    });
    return result;
};
const mockApiResponses = (responses)=>{
    global.fetch = jest.fn((url)=>{
        const endpoint = url.toString();
        for (const [pattern, response] of Object.entries(responses)){
            if (endpoint.includes(pattern)) {
                return Promise.resolve({
                    ok: true,
                    status: 200,
                    json: ()=>Promise.resolve(response),
                    text: ()=>Promise.resolve(JSON.stringify(response))
                });
            }
        }
        // Default response for unmatched endpoints
        return Promise.resolve({
            ok: false,
            status: 404,
            json: ()=>Promise.resolve({
                    error: 'Not found'
                })
        });
    });
};
const mockApiError = (endpoint, status = 500, error = {
    error: 'Internal server error'
})=>{
    global.fetch = jest.fn((url)=>{
        if (url.toString().includes(endpoint)) {
            return Promise.resolve({
                ok: false,
                status,
                json: ()=>Promise.resolve(error),
                text: ()=>Promise.resolve(JSON.stringify(error))
            });
        }
        // Call original fetch for other endpoints
        return jest.requireActual('node-fetch')(url);
    });
};
const waitForElement = async (query, options = {})=>{
    const { timeout = 5000, interval = 50 } = options;
    return (0, _react1.waitFor)(query, {
        timeout,
        interval
    });
};
const userInteractions = {
    /**
   * Fill out a form with provided data
   * @param {Object} formData - Object with field names and values
   * @param {Object} user - userEvent instance
   */ fillForm: async (formData, user)=>{
        for (const [fieldName, value] of Object.entries(formData)){
            const field = _react1.screen.getByLabelText(new RegExp(fieldName, 'i')) || _react1.screen.getByPlaceholderText(new RegExp(fieldName, 'i')) || _react1.screen.getByRole('textbox', {
                name: new RegExp(fieldName, 'i')
            });
            if (field) {
                await user.clear(field);
                await user.type(field, value);
            }
        }
    },
    /**
   * Submit a form by clicking submit button
   * @param {Object} user - userEvent instance
   * @param {string} buttonText - Submit button text (default: 'submit')
   */ submitForm: async (user, buttonText = 'submit')=>{
        const submitButton = _react1.screen.getByRole('button', {
            name: new RegExp(buttonText, 'i')
        });
        await user.click(submitButton);
    },
    /**
   * Navigate using router mock
   * @param {string} path - Path to navigate to
   */ navigate: (path)=>{
        mockRouter.push(path);
    },
    /**
   * Select option from dropdown/select
   * @param {string} selectLabel - Label of the select element
   * @param {string} optionText - Text of the option to select
   * @param {Object} user - userEvent instance
   */ selectOption: async (selectLabel, optionText, user)=>{
        const select = _react1.screen.getByLabelText(new RegExp(selectLabel, 'i'));
        await user.selectOptions(select, optionText);
    },
    /**
   * Upload file to file input
   * @param {string} inputLabel - Label of the file input
   * @param {File} file - File object to upload
   * @param {Object} user - userEvent instance
   */ uploadFile: async (inputLabel, file, user)=>{
        const fileInput = _react1.screen.getByLabelText(new RegExp(inputLabel, 'i'));
        await user.upload(fileInput, file);
    }
};
const testUtils = {
    /**
   * Assert that an element has specific text content
   * @param {string} text - Text to search for
   * @param {Object} options - Query options
   */ expectTextToBeInDocument: (text, options = {})=>{
        expect(_react1.screen.getByText(text, options)).toBeInTheDocument();
    },
    /**
   * Assert that an element is not in the document
   * @param {string} text - Text to search for
   */ expectTextNotToBeInDocument: (text)=>{
        expect(_react1.screen.queryByText(text)).not.toBeInTheDocument();
    },
    /**
   * Assert that a form field has specific value
   * @param {string} fieldName - Field label or placeholder
   * @param {string} expectedValue - Expected field value
   */ expectFieldValue: (fieldName, expectedValue)=>{
        const field = _react1.screen.getByLabelText(new RegExp(fieldName, 'i')) || _react1.screen.getByPlaceholderText(new RegExp(fieldName, 'i'));
        expect(field).toHaveValue(expectedValue);
    },
    /**
   * Assert that an API call was made with specific parameters
   * @param {string} endpoint - Endpoint pattern
   * @param {Object} expectedData - Expected request data
   */ expectApiCall: (endpoint, expectedData = null)=>{
        expect(global.fetch).toHaveBeenCalledWith(expect.stringContaining(endpoint), expectedData ? expect.objectContaining({
            body: JSON.stringify(expectedData)
        }) : expect.any(Object));
    }
};
const resetTestState = ()=>{
    jest.clearAllMocks();
    mockRouter.push.mockClear();
    mockRouter.replace.mockClear();
    // Reset fetch mock
    if (global.fetch && global.fetch.mockRestore) {
        global.fetch.mockRestore();
    }
};

//# sourceMappingURL=data:application/json;base64,