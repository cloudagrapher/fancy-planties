b16ee59092c92a9e8358a06261a5a608
/**
 * Email Verification Flow Integration Tests
 * Tests complete signup and verification process, resend functionality, and rate limiting
 * Requirements: 1.1, 1.4, 2.1, 2.2
 */ "use strict";
// Mock email service
jest.mock('@/lib/services/resend-email-service');
jest.mock('@/lib/services/email-service');
// Mock database
jest.mock('@/lib/db', ()=>({
        db: {
            select: jest.fn().mockReturnThis(),
            from: jest.fn().mockReturnThis(),
            where: jest.fn().mockReturnThis(),
            insert: jest.fn().mockReturnThis(),
            values: jest.fn().mockReturnThis(),
            update: jest.fn().mockReturnThis(),
            set: jest.fn().mockReturnThis(),
            delete: jest.fn().mockReturnThis(),
            returning: jest.fn(),
            execute: jest.fn()
        }
    }));
// Mock auth functions
jest.mock('@/lib/auth', ()=>({
        getUserByEmail: jest.fn(),
        getUserById: jest.fn()
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _emailverificationcodeservice = require("../../lib/services/email-verification-code-service");
const _resendemailservice = require("../../lib/services/resend-email-service");
const mockEmailService = {
    sendVerificationEmail: jest.fn()
};
const mockCreateEmailService = _resendemailservice.createEmailService;
const mockSendEmailWithRetry = require('@/lib/services/email-service').sendEmailWithRetry;
const mockDb = require('@/lib/db').db;
const mockGetUserByEmail = require('@/lib/auth').getUserByEmail;
const mockGetUserById = require('@/lib/auth').getUserById;
// Mock environment variables
const originalEnv = process.env;
beforeAll(()=>{
    process.env = {
        ...originalEnv,
        RESEND_API_KEY: 'test-api-key',
        FROM_EMAIL: 'test@example.com',
        FROM_NAME: 'Test App',
        VERIFICATION_CODE_EXPIRY_MINUTES: '10',
        MAX_VERIFICATION_ATTEMPTS: '5',
        RESEND_COOLDOWN_SECONDS: '60',
        MAX_RESEND_PER_HOUR: '5',
        NODE_ENV: 'test'
    };
});
afterAll(()=>{
    process.env = originalEnv;
});
describe('Email Verification Flow Integration Tests', ()=>{
    beforeEach(async ()=>{
        jest.clearAllMocks();
        // Mock email service to always succeed
        mockCreateEmailService.mockReturnValue(mockEmailService);
        mockSendEmailWithRetry.mockResolvedValue(true);
        mockEmailService.sendVerificationEmail.mockResolvedValue(true);
        // Setup default database mocks
        mockDb.returning.mockResolvedValue([]);
        mockDb.execute.mockResolvedValue([]);
    });
    describe('Complete Signup and Verification Process', ()=>{
        it('should complete full signup and verification workflow', async ()=>{
            // Mock user data
            const mockUser = {
                id: 1,
                email: 'test@example.com',
                name: 'Test User',
                isEmailVerified: false
            };
            // Mock database responses for user lookup
            mockGetUserByEmail.mockResolvedValue(mockUser);
            mockGetUserById.mockResolvedValue(mockUser);
            // Mock code insertion
            mockDb.returning.mockResolvedValueOnce([
                {
                    id: 1,
                    code: '123456',
                    userId: 1
                }
            ]);
            // Step 1: Generate verification code
            const verificationCode = await _emailverificationcodeservice.emailVerificationCodeService.generateCode(mockUser.id);
            expect(verificationCode).toMatch(/^\d{6}$/);
            // Step 2: Mock successful validation
            mockDb.returning.mockResolvedValueOnce([
                {
                    id: 1,
                    code: verificationCode,
                    userId: 1,
                    expiresAt: new Date(Date.now() + 600000),
                    attemptsUsed: 0
                }
            ]);
            // Mock user update to verified
            mockGetUserById.mockResolvedValueOnce({
                ...mockUser,
                isEmailVerified: true
            });
            // Step 3: Validate the verification code
            const isValid = await _emailverificationcodeservice.emailVerificationCodeService.validateCode('test@example.com', verificationCode);
            expect(isValid).toBe(true);
            // Verify database operations were called
            expect(mockDb.insert).toHaveBeenCalled();
            expect(mockDb.update).toHaveBeenCalled();
            expect(mockDb.delete).toHaveBeenCalled();
        });
        it('should handle email service failure gracefully during code generation', async ()=>{
            // Mock user data
            const mockUser = {
                id: 1,
                email: 'test@example.com',
                name: 'Test User',
                isEmailVerified: false
            };
            // Mock user lookup
            mockGetUserById.mockResolvedValue(mockUser);
            // Mock code insertion
            mockDb.returning.mockResolvedValueOnce([
                {
                    id: 1,
                    code: '123456',
                    userId: 1
                }
            ]);
            // Generate verification code (this should work even if email fails)
            const verificationCode = await _emailverificationcodeservice.emailVerificationCodeService.generateCode(mockUser.id);
            expect(verificationCode).toMatch(/^\d{6}$/);
            // Verify database insert was called
            expect(mockDb.insert).toHaveBeenCalled();
            expect(mockDb.values).toHaveBeenCalled();
        });
        it('should reject verification with invalid code', async ()=>{
            // Mock user data
            const mockUser = {
                id: 1,
                email: 'test@example.com',
                name: 'Test User',
                isEmailVerified: false
            };
            // Mock user lookup
            mockGetUserByEmail.mockResolvedValue(mockUser);
            // Mock code lookup - return empty array (no matching code)
            mockDb.returning.mockResolvedValueOnce([]);
            // Try to verify with wrong code using service directly
            try {
                await _emailverificationcodeservice.emailVerificationCodeService.validateCode('test@example.com', '654321');
                fail('Should have thrown an error for invalid code');
            } catch (error) {
                expect(error.code).toBe('CODE_INVALID');
            }
        });
        it('should reject verification with expired code', async ()=>{
            // Mock user data
            const mockUser = {
                id: 1,
                email: 'test@example.com',
                name: 'Test User',
                isEmailVerified: false
            };
            // Mock user lookup
            mockGetUserByEmail.mockResolvedValue(mockUser);
            // Mock expired code lookup
            mockDb.returning.mockResolvedValueOnce([
                {
                    id: 1,
                    code: '123456',
                    userId: 1,
                    expiresAt: new Date(Date.now() - 1000),
                    attemptsUsed: 0
                }
            ]);
            // Try to verify with expired code using service directly
            try {
                await _emailverificationcodeservice.emailVerificationCodeService.validateCode('test@example.com', '123456');
                fail('Should have thrown an error for expired code');
            } catch (error) {
                expect(error.code).toBe('CODE_EXPIRED');
            }
        });
    });
    describe('Resend Verification Code Functionality', ()=>{
        it('should resend verification code by generating new code', async ()=>{
            // Create unverified user
            const user = await dbManager.createTestUser({
                email: 'test@example.com',
                name: 'Test User',
                passwordHash: 'hashed_password',
                isEmailVerified: false
            });
            // Create existing verification code
            await dbManager.createTestEmailCode({
                userId: user.id,
                code: '123456',
                expiresAt: new Date(Date.now() + 10 * 60 * 1000),
                attemptsUsed: 0
            });
            // Generate new verification code (simulating resend)
            const newCode = await _emailverificationcodeservice.emailVerificationCodeService.generateCode(user.id);
            expect(newCode).toMatch(/^\d{6}$/);
            expect(newCode).not.toBe('123456'); // Should be a new code
            // Verify new code was generated (old one should be invalidated)
            const emailCodes = await dbManager.getEmailCodesByUserId(user.id);
            expect(emailCodes).toHaveLength(1);
            expect(emailCodes[0].code).toBe(newCode);
        });
        it('should handle resend for already verified user', async ()=>{
            // Create verified user
            const user = await dbManager.createTestUser({
                email: 'test@example.com',
                name: 'Test User',
                passwordHash: 'hashed_password',
                isEmailVerified: true
            });
            // Try to generate code for already verified user
            try {
                await _emailverificationcodeservice.emailVerificationCodeService.generateCode(user.id);
                fail('Should have thrown an error for already verified user');
            } catch (error) {
                expect(error.code).toBe('ALREADY_VERIFIED');
            }
        });
        it('should handle resend for non-existent user', async ()=>{
            // Try to validate code for non-existent user
            try {
                await _emailverificationcodeservice.emailVerificationCodeService.validateCode('nonexistent@example.com', '123456');
                fail('Should have thrown an error for non-existent user');
            } catch (error) {
                expect(error.code).toBe('USER_NOT_FOUND');
            }
        });
    });
    describe('Rate Limiting Enforcement', ()=>{
        it('should enforce verification attempt limits', async ()=>{
            // Create user and verification code
            const user = await dbManager.createTestUser({
                email: 'test@example.com',
                name: 'Test User',
                passwordHash: 'hashed_password',
                isEmailVerified: false
            });
            const emailCode = await dbManager.createTestEmailCode({
                userId: user.id,
                code: '123456',
                expiresAt: new Date(Date.now() + 10 * 60 * 1000),
                attemptsUsed: 5
            });
            // Try to verify with max attempts reached
            try {
                await _emailverificationcodeservice.emailVerificationCodeService.validateCode('test@example.com', '123456');
                fail('Should have thrown an error for too many attempts');
            } catch (error) {
                expect(error.code).toBe('TOO_MANY_ATTEMPTS');
            }
            // Verify user is still not verified
            const unverifiedUser = await dbManager.getUserById(user.id);
            expect(unverifiedUser.isEmailVerified).toBe(false);
        });
        it('should handle validation at service level', async ()=>{
            // Create user for testing
            const user = await dbManager.createTestUser({
                email: 'test@example.com',
                name: 'Test User',
                passwordHash: 'hashed_password',
                isEmailVerified: false
            });
            // Generate valid code
            const validCode = await _emailverificationcodeservice.emailVerificationCodeService.generateCode(user.id);
            expect(validCode).toMatch(/^\d{6}$/);
            // Test that service validates codes properly
            const isValid = await _emailverificationcodeservice.emailVerificationCodeService.validateCode('test@example.com', validCode);
            expect(isValid).toBe(true);
            // Verify user is now verified
            const verifiedUser = await dbManager.getUserById(user.id);
            expect(verifiedUser.isEmailVerified).toBe(true);
        });
    });
    describe('Edge Cases and Error Scenarios', ()=>{
        it('should handle duplicate verification code generation', async ()=>{
            // Create user
            const user = await dbManager.createTestUser({
                email: 'test@example.com',
                name: 'Test User',
                passwordHash: 'hashed_password',
                isEmailVerified: false
            });
            // Generate first code
            const firstCode = await _emailverificationcodeservice.emailVerificationCodeService.generateCode(user.id);
            expect(firstCode).toMatch(/^\d{6}$/);
            // Generate second code (should invalidate first)
            const secondCode = await _emailverificationcodeservice.emailVerificationCodeService.generateCode(user.id);
            expect(secondCode).toMatch(/^\d{6}$/);
            expect(secondCode).not.toBe(firstCode);
            // Verify only one code exists
            const emailCodes = await dbManager.getEmailCodesByUserId(user.id);
            expect(emailCodes).toHaveLength(1);
            expect(emailCodes[0].code).toBe(secondCode);
        });
        it('should handle service errors gracefully', async ()=>{
            // Test with non-existent user ID
            try {
                await _emailverificationcodeservice.emailVerificationCodeService.generateCode(99999); // Non-existent user ID
                fail('Should have thrown an error for non-existent user');
            } catch (error) {
                expect(error.code).toBe('USER_NOT_FOUND');
            }
        });
        it('should handle cleanup of expired codes', async ()=>{
            // Create user with expired code
            const user = await dbManager.createTestUser({
                email: 'test@example.com',
                name: 'Test User',
                passwordHash: 'hashed_password',
                isEmailVerified: false
            });
            await dbManager.createTestEmailCode({
                userId: user.id,
                code: '123456',
                expiresAt: new Date(Date.now() - 60000),
                attemptsUsed: 0
            });
            // Run cleanup
            await _emailverificationcodeservice.emailVerificationCodeService.cleanupExpiredCodes();
            // Verify expired code was cleaned up
            const remainingCodes = await dbManager.getEmailCodesByUserId(user.id);
            expect(remainingCodes).toHaveLength(0);
        });
    });
});

//# sourceMappingURL=data:application/json;base64,