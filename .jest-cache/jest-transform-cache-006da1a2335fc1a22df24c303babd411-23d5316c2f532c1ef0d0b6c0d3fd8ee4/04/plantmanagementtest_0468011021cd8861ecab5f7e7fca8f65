93d6702c62e4af3eef2b779ed0a478e5
// Plant Management Integration Tests
// Tests complete plant creation, editing, and deletion workflows
"use strict";
jest.mock('next/navigation', ()=>({
        useRouter: ()=>({
                push: mockPush,
                refresh: mockRefresh
            }),
        useSearchParams: ()=>({
                get: jest.fn(()=>null)
            })
    }));
jest.mock('@tanstack/react-query', ()=>({
        useQuery: jest.fn(()=>({
                data: [],
                isLoading: false,
                error: null
            })),
        useMutation: jest.fn(()=>({
                mutate: jest.fn(),
                isLoading: false,
                error: null
            })),
        useQueryClient: ()=>({
                invalidateQueries: mockInvalidateQueries,
                refetchQueries: mockRefetchQueries,
                removeQueries: mockRemoveQueries
            })
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("@testing-library/react");
const _testutils = require("../../test-utils");
const _apihelpers = require("../../test-utils/helpers/api-helpers.js");
const _userfactory = require("../../test-utils/factories/user-factory.js");
const _plantfactory = require("../../test-utils/factories/plant-factory.js");
const _PlantInstanceForm = /*#__PURE__*/ _interop_require_default(require("../../components/plants/PlantInstanceForm"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Mock Next.js router
const mockPush = jest.fn();
const mockRefresh = jest.fn();
// Mock React Query
const mockInvalidateQueries = jest.fn();
const mockRefetchQueries = jest.fn();
const mockRemoveQueries = jest.fn();
describe('Plant Management Integration Tests', ()=>{
    let testUser;
    let testSession;
    beforeEach(()=>{
        jest.clearAllMocks();
        (0, _apihelpers.resetApiMocks)();
        mockPush.mockClear();
        mockRefresh.mockClear();
        mockInvalidateQueries.mockClear();
        mockRefetchQueries.mockClear();
        mockRemoveQueries.mockClear();
        // Create authenticated test user
        const authData = (0, _userfactory.createAuthenticatedTestUser)();
        testUser = authData.user;
        testSession = authData.session;
    });
    afterEach(()=>{
        (0, _apihelpers.resetApiMocks)();
    });
    describe('Plant Creation Workflow', ()=>{
        it('should complete plant creation workflow from form to database', async ()=>{
            // Arrange
            const testPlant = (0, _plantfactory.createTestPlant)({
                id: 1,
                commonName: 'Monstera Deliciosa',
                family: 'Araceae',
                genus: 'Monstera',
                species: 'deliciosa'
            });
            const newPlantInstance = (0, _plantfactory.createTestPlantInstance)({
                id: 1,
                plantId: testPlant.id,
                nickname: 'My Monstera',
                location: 'Living Room',
                userId: testUser.id
            });
            // Mock plant search API
            (0, _apihelpers.mockApiResponse)({
                'GET /api/plants': {
                    status: 200,
                    data: {
                        success: true,
                        data: [
                            testPlant
                        ]
                    }
                }
            });
            // Mock plant instance creation API
            (0, _apihelpers.mockApiResponse)({
                'POST /api/plant-instances': {
                    status: 201,
                    data: {
                        success: true,
                        data: newPlantInstance
                    }
                }
            });
            const mockOnSuccess = jest.fn();
            const { user } = (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_PlantInstanceForm.default, {
                isOpen: true,
                onClose: jest.fn(),
                onSuccess: mockOnSuccess,
                userId: testUser.id
            }));
            // Act - Fill out plant creation form
            await _testutils.userInteractions.fillForm({
                'Nickname': 'My Monstera',
                'Location': 'Living Room'
            }, user);
            // Select fertilizer schedule
            const fertilizerSelect = _react.screen.getByLabelText(/fertilizer schedule/i);
            await user.selectOptions(fertilizerSelect, 'every_4_weeks');
            // Submit form
            const submitButton = _react.screen.getByRole('button', {
                name: /save|create/i
            });
            await user.click(submitButton);
            // Assert - Verify API call was made with correct data
            await (0, _react.waitFor)(()=>{
                expect(global.fetch).toHaveBeenCalledWith('/api/plant-instances', expect.objectContaining({
                    method: 'POST'
                }));
            });
            // Assert - Verify success callback was called
            await (0, _react.waitFor)(()=>{
                expect(mockOnSuccess).toHaveBeenCalledWith(newPlantInstance);
            });
        });
        it('should handle plant creation validation errors', async ()=>{
            // Arrange
            (0, _apihelpers.mockApiResponse)({
                'POST /api/plant-instances': {
                    status: 400,
                    data: {
                        success: false,
                        error: 'Validation failed',
                        details: [
                            {
                                path: [
                                    'nickname'
                                ],
                                message: 'Nickname is required'
                            },
                            {
                                path: [
                                    'location'
                                ],
                                message: 'Location is required'
                            }
                        ]
                    }
                }
            });
            const { user } = (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_PlantInstanceForm.default, {
                isOpen: true,
                onClose: jest.fn(),
                userId: testUser.id
            }));
            // Act - Submit form without required fields
            const submitButton = _react.screen.getByRole('button', {
                name: /save|create/i
            });
            await user.click(submitButton);
            // Assert - Verify validation errors are displayed
            await (0, _react.waitFor)(()=>{
                expect(_react.screen.getByText(/nickname is required/i)).toBeInTheDocument();
                expect(_react.screen.getByText(/location is required/i)).toBeInTheDocument();
            });
        });
        it('should handle plant creation server errors', async ()=>{
            // Arrange
            (0, _apihelpers.mockApiError)('/api/plant-instances', 500, {
                error: 'Database connection failed'
            }, 'POST');
            const { user } = (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_PlantInstanceForm.default, {
                isOpen: true,
                onClose: jest.fn(),
                userId: testUser.id
            }));
            // Act - Fill and submit valid form
            await _testutils.userInteractions.fillForm({
                'Nickname': 'Test Plant',
                'Location': 'Test Location'
            }, user);
            const submitButton = _react.screen.getByRole('button', {
                name: /save|create/i
            });
            await user.click(submitButton);
            // Assert - Verify error message is displayed
            await (0, _react.waitFor)(()=>{
                expect(_react.screen.getByText(/database connection failed/i)).toBeInTheDocument();
            });
        });
        it('should create new plant taxonomy when plant type not found', async ()=>{
            // Arrange
            const newPlant = (0, _plantfactory.createTestPlant)({
                id: 2,
                commonName: 'New Plant Species',
                family: 'Testaceae',
                genus: 'Testus',
                species: 'newus'
            });
            // Mock empty plant search
            (0, _apihelpers.mockApiResponse)({
                'GET /api/plants': {
                    status: 200,
                    data: {
                        success: true,
                        data: []
                    }
                }
            });
            // Mock plant creation
            (0, _apihelpers.mockApiResponse)({
                'POST /api/plants': {
                    status: 201,
                    data: {
                        success: true,
                        data: newPlant
                    }
                }
            });
            // Mock plant instance creation
            (0, _apihelpers.mockApiResponse)({
                'POST /api/plant-instances': {
                    status: 201,
                    data: {
                        success: true,
                        data: (0, _plantfactory.createTestPlantInstance)({
                            plantId: newPlant.id,
                            userId: testUser.id
                        })
                    }
                }
            });
            const { user } = (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_PlantInstanceForm.default, {
                isOpen: true,
                onClose: jest.fn(),
                userId: testUser.id
            }));
            // Act - Create new plant taxonomy
            const addNewButton = _react.screen.getByRole('button', {
                name: /add new|create new/i
            });
            await user.click(addNewButton);
            // Fill taxonomy form
            await _testutils.userInteractions.fillForm({
                'Common Name': 'New Plant Species',
                'Family': 'Testaceae',
                'Genus': 'Testus',
                'Species': 'newus'
            }, user);
            const createPlantButton = _react.screen.getByRole('button', {
                name: /create plant type/i
            });
            await user.click(createPlantButton);
            // Assert - Verify plant creation API was called
            await (0, _react.waitFor)(()=>{
                expect(global.fetch).toHaveBeenCalledWith('/api/plants', expect.objectContaining({
                    method: 'POST',
                    body: expect.stringContaining('New Plant Species')
                }));
            });
        });
    });
    describe('Plant Editing and Updating Workflows', ()=>{
        it('should complete plant editing workflow with data persistence', async ()=>{
            // Arrange
            const existingPlant = (0, _plantfactory.createTestPlant)();
            const existingInstance = (0, _plantfactory.createTestPlantInstance)({
                id: 1,
                plantId: existingPlant.id,
                nickname: 'Original Name',
                location: 'Original Location',
                userId: testUser.id,
                plant: existingPlant
            });
            const updatedInstance = {
                ...existingInstance,
                nickname: 'Updated Name',
                location: 'Updated Location'
            };
            // Mock plant instance update API
            (0, _apihelpers.mockApiResponse)({
                'PUT /api/plant-instances/1': {
                    status: 200,
                    data: updatedInstance
                }
            });
            const mockOnSuccess = jest.fn();
            const { user } = (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_PlantInstanceForm.default, {
                plantInstance: existingInstance,
                isOpen: true,
                onClose: jest.fn(),
                onSuccess: mockOnSuccess,
                userId: testUser.id
            }));
            // Act - Update plant information
            const nicknameField = _react.screen.getByDisplayValue('Original Name');
            await user.clear(nicknameField);
            await user.type(nicknameField, 'Updated Name');
            const locationField = _react.screen.getByDisplayValue('Original Location');
            await user.clear(locationField);
            await user.type(locationField, 'Updated Location');
            // Submit form
            const submitButton = _react.screen.getByRole('button', {
                name: /save|update/i
            });
            await user.click(submitButton);
            // Assert - Verify API call was made with updated data
            await (0, _react.waitFor)(()=>{
                expect(global.fetch).toHaveBeenCalledWith('/api/plant-instances/1', expect.objectContaining({
                    method: 'PUT'
                }));
            });
            // Assert - Verify success callback was called
            await (0, _react.waitFor)(()=>{
                expect(mockOnSuccess).toHaveBeenCalledWith(updatedInstance);
            });
        });
        it('should handle plant editing authorization errors', async ()=>{
            // Arrange
            const existingInstance = (0, _plantfactory.createTestPlantInstance)({
                id: 1,
                userId: 999
            });
            (0, _apihelpers.mockApiResponse)({
                'PUT /api/plant-instances/1': {
                    status: 403,
                    data: {
                        error: 'Forbidden'
                    }
                }
            });
            const { user } = (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_PlantInstanceForm.default, {
                plantInstance: existingInstance,
                isOpen: true,
                onClose: jest.fn(),
                userId: testUser.id
            }));
            // Act - Try to update plant
            const submitButton = _react.screen.getByRole('button', {
                name: /save|update/i
            });
            await user.click(submitButton);
            // Assert - Verify authorization error is displayed
            await (0, _react.waitFor)(()=>{
                expect(_react.screen.getByText(/forbidden/i)).toBeInTheDocument();
            });
        });
        it('should handle plant editing with image uploads', async ()=>{
            // Arrange
            const existingInstance = (0, _plantfactory.createTestPlantInstance)({
                id: 1,
                userId: testUser.id,
                images: [
                    'existing-image.jpg'
                ]
            });
            const updatedInstance = {
                ...existingInstance,
                images: [
                    'existing-image.jpg',
                    'new-image.jpg'
                ]
            };
            (0, _apihelpers.mockApiResponse)({
                'PUT /api/plant-instances/1': {
                    status: 200,
                    data: updatedInstance
                }
            });
            const { user } = (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_PlantInstanceForm.default, {
                plantInstance: existingInstance,
                isOpen: true,
                onClose: jest.fn(),
                userId: testUser.id
            }));
            // Act - Upload new image
            const fileInput = _react.screen.getByLabelText(/upload|image/i);
            const file = new File([
                'test'
            ], 'new-image.jpg', {
                type: 'image/jpeg'
            });
            await user.upload(fileInput, file);
            // Submit form
            const submitButton = _react.screen.getByRole('button', {
                name: /save|update/i
            });
            await user.click(submitButton);
            // Assert - Verify FormData was sent with images
            await (0, _react.waitFor)(()=>{
                expect(global.fetch).toHaveBeenCalledWith('/api/plant-instances/1', expect.objectContaining({
                    method: 'PUT',
                    body: expect.any(FormData)
                }));
            });
        });
        it('should validate date fields during editing', async ()=>{
            // Arrange
            const existingInstance = (0, _plantfactory.createTestPlantInstance)({
                id: 1,
                userId: testUser.id
            });
            const { user } = (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_PlantInstanceForm.default, {
                plantInstance: existingInstance,
                isOpen: true,
                onClose: jest.fn(),
                userId: testUser.id
            }));
            // Act - Enter future date for last fertilized
            const futureDate = new Date();
            futureDate.setDate(futureDate.getDate() + 1);
            const futureDateString = futureDate.toISOString().split('T')[0];
            const lastFertilizedField = _react.screen.getByLabelText(/last fertilized/i);
            await user.clear(lastFertilizedField);
            await user.type(lastFertilizedField, futureDateString);
            // Submit form
            const submitButton = _react.screen.getByRole('button', {
                name: /save|update/i
            });
            await user.click(submitButton);
            // Assert - Verify validation error is displayed
            await (0, _react.waitFor)(()=>{
                expect(_react.screen.getByText(/cannot be in the future/i)).toBeInTheDocument();
            });
        });
    });
    describe('Plant Deletion with Proper Cleanup', ()=>{
        it('should complete plant deletion workflow with confirmation', async ()=>{
            // Arrange
            const plantToDelete = (0, _plantfactory.createTestPlantInstance)({
                id: 1,
                userId: testUser.id
            });
            (0, _apihelpers.mockApiResponse)({
                'DELETE /api/plant-instances/1': {
                    status: 200,
                    data: {
                        success: true,
                        message: 'Plant instance deleted successfully'
                    }
                }
            });
            // Mock window.confirm
            const originalConfirm = window.confirm;
            window.confirm = jest.fn(()=>true);
            const mockOnDelete = jest.fn();
            const { user } = (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                    onClick: async ()=>{
                        const confirmed = window.confirm('Are you sure you want to delete this plant?');
                        if (confirmed) {
                            const response = await fetch(`/api/plant-instances/${plantToDelete.id}`, {
                                method: 'DELETE'
                            });
                            if (response.ok) {
                                mockOnDelete();
                            }
                        }
                    },
                    children: "Delete Plant"
                })
            }));
            // Act - Click delete button
            const deleteButton = _react.screen.getByRole('button', {
                name: /delete plant/i
            });
            await user.click(deleteButton);
            // Assert - Verify confirmation was shown
            expect(window.confirm).toHaveBeenCalledWith('Are you sure you want to delete this plant?');
            // Assert - Verify API call was made
            await (0, _react.waitFor)(()=>{
                expect(global.fetch).toHaveBeenCalledWith('/api/plant-instances/1', expect.objectContaining({
                    method: 'DELETE'
                }));
            });
            // Assert - Verify deletion callback was called
            await (0, _react.waitFor)(()=>{
                expect(mockOnDelete).toHaveBeenCalled();
            });
            // Cleanup
            window.confirm = originalConfirm;
        });
        it('should handle plant deletion authorization errors', async ()=>{
            // Arrange
            (0, _apihelpers.mockApiResponse)({
                'DELETE /api/plant-instances/1': {
                    status: 403,
                    data: {
                        error: 'Forbidden'
                    }
                }
            });
            const originalConfirm = window.confirm;
            window.confirm = jest.fn(()=>true);
            const { user } = (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                    onClick: async ()=>{
                        const confirmed = window.confirm('Are you sure?');
                        if (confirmed) {
                            const response = await fetch('/api/plant-instances/1', {
                                method: 'DELETE'
                            });
                            const result = await response.json();
                            if (!response.ok) {
                                alert(result.error);
                            }
                        }
                    },
                    children: "Delete Plant"
                })
            }));
            // Mock window.alert
            const originalAlert = window.alert;
            window.alert = jest.fn();
            // Act - Try to delete plant
            const deleteButton = _react.screen.getByRole('button', {
                name: /delete plant/i
            });
            await user.click(deleteButton);
            // Assert - Verify error was shown
            await (0, _react.waitFor)(()=>{
                expect(window.alert).toHaveBeenCalledWith('Forbidden');
            });
            // Cleanup
            window.confirm = originalConfirm;
            window.alert = originalAlert;
        });
        it('should cancel deletion when user declines confirmation', async ()=>{
            // Arrange
            const originalConfirm = window.confirm;
            window.confirm = jest.fn(()=>false); // User cancels
            const mockOnDelete = jest.fn();
            const { user } = (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                    onClick: async ()=>{
                        const confirmed = window.confirm('Are you sure?');
                        if (confirmed) {
                            mockOnDelete();
                        }
                    },
                    children: "Delete Plant"
                })
            }));
            // Act - Click delete button but cancel
            const deleteButton = _react.screen.getByRole('button', {
                name: /delete plant/i
            });
            await user.click(deleteButton);
            // Assert - Verify confirmation was shown
            expect(window.confirm).toHaveBeenCalled();
            // Assert - Verify no API call was made
            expect(global.fetch).not.toHaveBeenCalled();
            // Assert - Verify deletion callback was not called
            expect(mockOnDelete).not.toHaveBeenCalled();
            // Cleanup
            window.confirm = originalConfirm;
        });
        it('should handle plant deletion server errors gracefully', async ()=>{
            // Arrange
            (0, _apihelpers.mockApiError)('/api/plant-instances/1', 500, {
                error: 'Database error'
            }, 'DELETE');
            const originalConfirm = window.confirm;
            window.confirm = jest.fn(()=>true);
            const { user } = (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                    onClick: async ()=>{
                        const confirmed = window.confirm('Are you sure?');
                        if (confirmed) {
                            try {
                                const response = await fetch('/api/plant-instances/1', {
                                    method: 'DELETE'
                                });
                                const result = await response.json();
                                if (!response.ok) {
                                    throw new Error(result.error);
                                }
                            } catch (error) {
                                alert(`Failed to delete: ${error.message}`);
                            }
                        }
                    },
                    children: "Delete Plant"
                })
            }));
            const originalAlert = window.alert;
            window.alert = jest.fn();
            // Act - Try to delete plant
            const deleteButton = _react.screen.getByRole('button', {
                name: /delete plant/i
            });
            await user.click(deleteButton);
            // Assert - Verify error handling
            await (0, _react.waitFor)(()=>{
                expect(window.alert).toHaveBeenCalledWith('Failed to delete: Database error');
            });
            // Cleanup
            window.confirm = originalConfirm;
            window.alert = originalAlert;
        });
    });
    describe('End-to-End Plant Management Flow', ()=>{
        it('should complete full plant lifecycle: create -> edit -> delete', async ()=>{
            // Step 1: Create plant
            const newPlant = (0, _plantfactory.createTestPlant)();
            const newInstance = (0, _plantfactory.createTestPlantInstance)({
                id: 1,
                plantId: newPlant.id,
                userId: testUser.id
            });
            (0, _apihelpers.mockApiResponse)({
                'POST /api/plant-instances': {
                    status: 201,
                    data: {
                        success: true,
                        data: newInstance
                    }
                }
            });
            const { user, rerender } = (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_PlantInstanceForm.default, {
                isOpen: true,
                onClose: jest.fn(),
                userId: testUser.id
            }));
            // Create plant
            await _testutils.userInteractions.fillForm({
                'Nickname': 'Test Plant',
                'Location': 'Test Location'
            }, user);
            let submitButton = _react.screen.getByRole('button', {
                name: /save|create/i
            });
            await user.click(submitButton);
            await (0, _react.waitFor)(()=>{
                expect(global.fetch).toHaveBeenCalledWith('/api/plant-instances', expect.objectContaining({
                    method: 'POST'
                }));
            });
            // Reset mocks for edit step
            jest.clearAllMocks();
            // Step 2: Edit plant
            const updatedInstance = {
                ...newInstance,
                nickname: 'Updated Plant'
            };
            (0, _apihelpers.mockApiResponse)({
                'PUT /api/plant-instances/1': {
                    status: 200,
                    data: updatedInstance
                }
            });
            rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(_PlantInstanceForm.default, {
                plantInstance: newInstance,
                isOpen: true,
                onClose: jest.fn(),
                userId: testUser.id
            }));
            // Edit plant
            const nicknameField = _react.screen.getByDisplayValue('Test Plant');
            await user.clear(nicknameField);
            await user.type(nicknameField, 'Updated Plant');
            submitButton = _react.screen.getByRole('button', {
                name: /save|update/i
            });
            await user.click(submitButton);
            await (0, _react.waitFor)(()=>{
                expect(global.fetch).toHaveBeenCalledWith('/api/plant-instances/1', expect.objectContaining({
                    method: 'PUT'
                }));
            });
            // Reset mocks for delete step
            jest.clearAllMocks();
            // Step 3: Delete plant
            (0, _apihelpers.mockApiResponse)({
                'DELETE /api/plant-instances/1': {
                    status: 200,
                    data: {
                        success: true,
                        message: 'Plant deleted successfully'
                    }
                }
            });
            const originalConfirm = window.confirm;
            window.confirm = jest.fn(()=>true);
            rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                    onClick: async ()=>{
                        const confirmed = window.confirm('Delete plant?');
                        if (confirmed) {
                            await fetch('/api/plant-instances/1', {
                                method: 'DELETE'
                            });
                        }
                    },
                    children: "Delete Plant"
                })
            }));
            // Delete plant
            const deleteButton = _react.screen.getByRole('button', {
                name: /delete plant/i
            });
            await user.click(deleteButton);
            await (0, _react.waitFor)(()=>{
                expect(global.fetch).toHaveBeenCalledWith('/api/plant-instances/1', expect.objectContaining({
                    method: 'DELETE'
                }));
            });
            // Cleanup
            window.confirm = originalConfirm;
        });
    });
});

//# sourceMappingURL=data:application/json;base64,