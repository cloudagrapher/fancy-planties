{"version":3,"names":["GET","cov_1ivckoayjy","f","s","POST","request","user","_server1","validateRequest","b","_server","NextResponse","json","error","status","searchParams","URL","url","searchData","query","get","limit","parseInt","offset","includeUnverified","familyFilter","undefined","genusFilter","validatedSearch","_plantschemas","plantSearchSchema","parse","options","filters","family","genus","isVerified","userContext","userId","id","includeUserPlants","results","_plantsearch","plantSearchService","hybridSearch","success","data","metadata","operation","timestamp","Date","performance","queryTime","searchTime","cacheHit","getCacheStats","needsRefresh","console","_zod","ZodError","details","issues","body","advancedSearch"],"sources":["/Users/stefanbekker/projects/fancy-planties/src/app/api/plants/search/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { validateRequest } from '@/lib/auth/server';\nimport { plantSearchService } from '@/lib/services/plant-search';\nimport { plantSearchSchema } from '@/lib/validation/plant-schemas';\nimport { ZodError } from 'zod';\n\n// GET /api/plants/search - Search plants with fuzzy matching\nexport async function GET(request: NextRequest) {\n  try {\n    const { user } = await validateRequest();\n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const { searchParams } = new URL(request.url);\n    const searchData = {\n      query: searchParams.get('q') || searchParams.get('query') || '',\n      limit: searchParams.get('limit') ? parseInt(searchParams.get('limit')!, 10) : 20,\n      offset: searchParams.get('offset') ? parseInt(searchParams.get('offset')!, 10) : 0,\n      includeUnverified: searchParams.get('includeUnverified') !== 'false',\n      familyFilter: searchParams.get('family') || undefined,\n      genusFilter: searchParams.get('genus') || undefined,\n    };\n\n    if (!searchData.query) {\n      return NextResponse.json(\n        { error: 'Search query is required' }, \n        { status: 400 }\n      );\n    }\n\n    const validatedSearch = plantSearchSchema.parse(searchData);\n    \n    const options = {\n      filters: {\n        family: searchData.familyFilter,\n        genus: searchData.genusFilter,\n        isVerified: searchParams.get('verified') === 'true' ? true : undefined,\n      },\n      userContext: {\n        userId: user.id,\n        includeUserPlants: searchParams.get('includeUserPlants') !== 'false',\n      },\n    };\n\n    const results = await plantSearchService.hybridSearch(validatedSearch, options);\n\n    return NextResponse.json({\n      success: true,\n      data: results,\n      metadata: {\n        operation: 'search',\n        timestamp: new Date(),\n        userId: user.id,\n        performance: {\n          queryTime: results.searchTime,\n          cacheHit: !plantSearchService.getCacheStats().needsRefresh,\n        },\n      },\n    });\n  } catch (error) {\n    console.error('Error searching plants:', error);\n    \n    if (error instanceof ZodError) {\n      return NextResponse.json(\n        { \n          error: 'Invalid search parameters', \n          details: error.issues \n        }, \n        { status: 400 }\n      );\n    }\n\n    return NextResponse.json(\n      { error: 'Internal server error' }, \n      { status: 500 }\n    );\n  }\n}\n\n// POST /api/plants/search - Advanced search with multiple criteria\nexport async function POST(request: NextRequest) {\n  try {\n    const { user } = await validateRequest();\n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const body = await request.json();\n    const results = await plantSearchService.advancedSearch({\n      ...body,\n      userId: user.id,\n    });\n\n    return NextResponse.json({\n      success: true,\n      data: results,\n      metadata: {\n        operation: 'advanced_search',\n        timestamp: new Date(),\n        userId: user.id,\n        performance: {\n          queryTime: results.searchTime,\n          cacheHit: !plantSearchService.getCacheStats().needsRefresh,\n        },\n      },\n    });\n  } catch (error) {\n    console.error('Error in advanced search:', error);\n    \n    return NextResponse.json(\n      { error: 'Internal server error' }, \n      { status: 500 }\n    );\n  }\n}"],"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","ignoreList":[]}