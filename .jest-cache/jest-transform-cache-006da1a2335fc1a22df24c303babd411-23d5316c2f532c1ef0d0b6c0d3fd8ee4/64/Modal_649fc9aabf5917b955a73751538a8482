21a445436da03129a226ffc2cada6324
'use client';
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get ConfirmationModal () {
        return ConfirmationModal;
    },
    get ModalWithTabs () {
        return ModalWithTabs;
    },
    get default () {
        return Modal;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("react");
const _reactdom = require("react-dom");
function Modal({ isOpen, onClose, title, children, size = 'default', showCloseButton = true, closeOnBackdropClick = true, closeOnEscape = true, footer }) {
    // Handle escape key
    (0, _react.useEffect)(()=>{
        if (!isOpen || !closeOnEscape) return;
        const handleEscape = (e)=>{
            if (e.key === 'Escape') {
                onClose();
            }
        };
        document.addEventListener('keydown', handleEscape);
        return ()=>document.removeEventListener('keydown', handleEscape);
    }, [
        isOpen,
        closeOnEscape,
        onClose
    ]);
    // Prevent body scroll when modal is open
    (0, _react.useEffect)(()=>{
        if (isOpen) {
            document.body.style.overflow = 'hidden';
        } else {
            document.body.style.overflow = 'unset';
        }
        return ()=>{
            document.body.style.overflow = 'unset';
        };
    }, [
        isOpen
    ]);
    if (!isOpen) return null;
    const handleBackdropClick = (e)=>{
        if (closeOnBackdropClick && e.target === e.currentTarget) {
            onClose();
        }
    };
    const modalContent = /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
        className: "modal-overlay",
        onClick: handleBackdropClick,
        children: /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
            className: `modal-content ${size === 'large' ? 'modal-content--large' : ''}`,
            onClick: (e)=>e.stopPropagation(),
            children: [
                (title || showCloseButton) && /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    className: "modal-header",
                    children: [
                        title && /*#__PURE__*/ (0, _jsxruntime.jsx)("h2", {
                            className: "modal-title",
                            children: title
                        }),
                        showCloseButton && /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                            onClick: onClose,
                            className: "modal-close",
                            "aria-label": "Close modal",
                            children: /*#__PURE__*/ (0, _jsxruntime.jsx)("svg", {
                                className: "w-6 h-6",
                                fill: "none",
                                stroke: "currentColor",
                                viewBox: "0 0 24 24",
                                children: /*#__PURE__*/ (0, _jsxruntime.jsx)("path", {
                                    strokeLinecap: "round",
                                    strokeLinejoin: "round",
                                    strokeWidth: 2,
                                    d: "M6 18L18 6M6 6l12 12"
                                })
                            })
                        })
                    ]
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    className: "modal-body",
                    children: children
                }),
                footer && /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    className: "modal-footer",
                    children: footer
                })
            ]
        })
    });
    // Render modal in portal to avoid z-index issues
    return /*#__PURE__*/ (0, _reactdom.createPortal)(modalContent, document.body);
}
function ModalWithTabs({ tabs, activeTab, onTabChange, ...modalProps }) {
    const activeTabContent = tabs.find((tab)=>tab.id === activeTab)?.content;
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(Modal, {
        ...modalProps,
        showCloseButton: false,
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                className: "modal-header",
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("h2", {
                        className: "modal-title",
                        children: modalProps.title
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                        onClick: modalProps.onClose,
                        className: "modal-close",
                        "aria-label": "Close modal",
                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)("svg", {
                            className: "w-6 h-6",
                            fill: "none",
                            stroke: "currentColor",
                            viewBox: "0 0 24 24",
                            children: /*#__PURE__*/ (0, _jsxruntime.jsx)("path", {
                                strokeLinecap: "round",
                                strokeLinejoin: "round",
                                strokeWidth: 2,
                                d: "M6 18L18 6M6 6l12 12"
                            })
                        })
                    })
                ]
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                className: "modal-tabs",
                children: tabs.map((tab)=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("button", {
                        onClick: ()=>onTabChange(tab.id),
                        className: `tab ${activeTab === tab.id ? 'tab--active' : ''}`,
                        children: [
                            tab.icon && /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                className: "mr-2",
                                children: tab.icon
                            }),
                            tab.label
                        ]
                    }, tab.id))
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                className: "modal-body modal-body--no-padding",
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    className: "p-6",
                    children: activeTabContent
                })
            })
        ]
    });
}
function ConfirmationModal({ isOpen, onClose, onConfirm, title, message, confirmText = 'Confirm', cancelText = 'Cancel', variant = 'default', isLoading = false }) {
    const handleConfirm = ()=>{
        onConfirm();
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(Modal, {
        isOpen: isOpen,
        onClose: onClose,
        title: title,
        closeOnBackdropClick: !isLoading,
        closeOnEscape: !isLoading,
        footer: /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
            className: "flex gap-3 justify-end w-full",
            children: [
                /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                    onClick: onClose,
                    disabled: isLoading,
                    className: "btn btn--outline",
                    children: cancelText
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                    onClick: handleConfirm,
                    disabled: isLoading,
                    className: `btn ${variant === 'danger' ? 'btn--danger' : 'btn--primary'} ${isLoading ? 'btn--loading' : ''}`,
                    children: confirmText
                })
            ]
        }),
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
            className: "text-gray-700",
            children: message
        })
    });
}

//# sourceMappingURL=data:application/json;base64,