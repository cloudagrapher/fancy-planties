{"version":3,"sources":["/Users/stefanbekker/projects/fancy-planties/src/__tests__/database/plant-data-queries.test.js"],"sourcesContent":["/**\n * Plant Data Database Query Tests\n * Tests plant and plant instance CRUD operations, search, filtering, and relationships\n */\n\nimport { PlantQueries } from '../../lib/db/queries/plants';\nimport { PlantInstanceQueries } from '../../lib/db/queries/plant-instances';\nimport { createPlant, searchPlants, getPlantById, validatePlantTaxonomy } from '../../lib/db/queries/plant-taxonomy';\nimport { createDatabaseTestManager } from '../../test-utils/setup/database-test-manager';\nimport { \n  createTestPlant, \n  createTestPlantInstance, \n  createTestPlantWithTaxonomy,\n  createTestPlantInstanceForUser,\n  createTestPlantInstanceNeedingCare,\n  createRealisticPlants,\n  resetPlantCounters\n} from '../../test-utils/factories/plant-factory';\nimport { createTestUser } from '../../test-utils/factories/user-factory';\n\ndescribe('Plant Data Database Queries', () => {\n  let dbManager;\n\n  beforeEach(() => {\n    dbManager = createDatabaseTestManager();\n    resetPlantCounters();\n  });\n\n  afterEach(async () => {\n    await dbManager.cleanup();\n  });\n\n  describe('Plant Taxonomy CRUD Operations', () => {\n    test('should create a new plant taxonomy entry', async () => {\n      const testUser = createTestUser();\n      const createdUser = await dbManager.createTestUser(testUser);\n\n      const plantData = {\n        family: 'Araceae',\n        genus: 'Monstera',\n        species: 'deliciosa',\n        cultivar: null,\n        commonName: 'Monstera Deliciosa',\n        careInstructions: 'Bright indirect light, water when soil is dry',\n        createdBy: createdUser.id,\n        isVerified: false,\n      };\n\n      const plant = await PlantQueries.create(plantData);\n\n      expect(plant).toBeDefined();\n      expect(plant.id).toBeDefined();\n      expect(plant.family).toBe('Araceae');\n      expect(plant.genus).toBe('Monstera');\n      expect(plant.species).toBe('deliciosa');\n      expect(plant.commonName).toBe('Monstera Deliciosa');\n      expect(plant.createdBy).toBe(createdUser.id);\n      expect(plant.isVerified).toBe(false);\n      expect(plant.createdAt).toBeInstanceOf(Date);\n      expect(plant.updatedAt).toBeInstanceOf(Date);\n    });\n\n    test('should retrieve plant by ID', async () => {\n      const testUser = createTestUser();\n      const createdUser = await dbManager.createTestUser(testUser);\n\n      const plantData = createTestPlant({ createdBy: createdUser.id });\n      const createdPlant = await PlantQueries.create(plantData);\n\n      const foundPlant = await PlantQueries.getById(createdPlant.id);\n\n      expect(foundPlant).toBeDefined();\n      expect(foundPlant.id).toBe(createdPlant.id);\n      expect(foundPlant.family).toBe(createdPlant.family);\n      expect(foundPlant.genus).toBe(createdPlant.genus);\n      expect(foundPlant.species).toBe(createdPlant.species);\n      expect(foundPlant.commonName).toBe(createdPlant.commonName);\n    });\n\n    test('should return null for non-existent plant ID', async () => {\n      const plant = await PlantQueries.getById(99999);\n      expect(plant).toBeNull();\n    });\n\n    test('should update plant taxonomy entry', async () => {\n      const testUser = createTestUser();\n      const createdUser = await dbManager.createTestUser(testUser);\n\n      const plantData = createTestPlant({ createdBy: createdUser.id });\n      const createdPlant = await PlantQueries.create(plantData);\n\n      const updates = {\n        commonName: 'Updated Common Name',\n        careInstructions: 'Updated care instructions',\n        isVerified: true,\n      };\n\n      const updatedPlant = await PlantQueries.update(createdPlant.id, updates);\n\n      expect(updatedPlant.commonName).toBe('Updated Common Name');\n      expect(updatedPlant.careInstructions).toBe('Updated care instructions');\n      expect(updatedPlant.isVerified).toBe(true);\n      expect(updatedPlant.updatedAt.getTime()).toBeGreaterThan(createdPlant.updatedAt.getTime());\n    });\n\n    test('should check if plant taxonomy already exists', async () => {\n      const testUser = createTestUser();\n      const createdUser = await dbManager.createTestUser(testUser);\n\n      const plantData = createTestPlantWithTaxonomy({\n        family: 'Araceae',\n        genus: 'Monstera',\n        species: 'deliciosa',\n        cultivar: null,\n      }, { createdBy: createdUser.id });\n\n      await PlantQueries.create(plantData);\n\n      // Check for existing taxonomy\n      const existingPlant = await PlantQueries.taxonomyExists('Araceae', 'Monstera', 'deliciosa');\n      expect(existingPlant).toBeDefined();\n      expect(existingPlant.family).toBe('Araceae');\n\n      // Check for non-existing taxonomy\n      const nonExistingPlant = await PlantQueries.taxonomyExists('Araceae', 'Monstera', 'adansonii');\n      expect(nonExistingPlant).toBeNull();\n    });\n\n    test('should handle cultivar variations in taxonomy existence check', async () => {\n      const testUser = createTestUser();\n      const createdUser = await dbManager.createTestUser(testUser);\n\n      // Create plant with cultivar\n      const plantWithCultivar = createTestPlantWithTaxonomy({\n        family: 'Araceae',\n        genus: 'Monstera',\n        species: 'deliciosa',\n        cultivar: 'Variegata',\n      }, { createdBy: createdUser.id });\n\n      await PlantQueries.create(plantWithCultivar);\n\n      // Check for exact match with cultivar\n      const exactMatch = await PlantQueries.taxonomyExists('Araceae', 'Monstera', 'deliciosa', 'Variegata');\n      expect(exactMatch).toBeDefined();\n\n      // Check for same species without cultivar\n      const withoutCultivar = await PlantQueries.taxonomyExists('Araceae', 'Monstera', 'deliciosa');\n      expect(withoutCultivar).toBeNull(); // Should not match because one has cultivar, one doesn't\n    });\n  });\n\n  describe('Plant Search and Filtering', () => {\n    test('should search plants by common name', async () => {\n      const testUser = createTestUser();\n      const createdUser = await dbManager.createTestUser(testUser);\n\n      // Create test plants\n      const monstera = createTestPlantWithTaxonomy({\n        family: 'Araceae',\n        genus: 'Monstera',\n        species: 'deliciosa',\n        commonName: 'Monstera Deliciosa',\n      }, { createdBy: createdUser.id });\n\n      const pothos = createTestPlantWithTaxonomy({\n        family: 'Araceae',\n        genus: 'Epipremnum',\n        species: 'aureum',\n        commonName: 'Golden Pothos',\n      }, { createdBy: createdUser.id });\n\n      await PlantQueries.create(monstera);\n      await PlantQueries.create(pothos);\n\n      // Search by common name\n      const monsteraResults = await PlantQueries.search('Monstera');\n      expect(monsteraResults.length).toBeGreaterThan(0);\n      expect(monsteraResults.some(p => p.commonName.includes('Monstera'))).toBe(true);\n\n      const pothosResults = await PlantQueries.search('Pothos');\n      expect(pothosResults.length).toBeGreaterThan(0);\n      expect(pothosResults.some(p => p.commonName.includes('Pothos'))).toBe(true);\n    });\n\n    test('should search plants by genus and species', async () => {\n      const testUser = createTestUser();\n      const createdUser = await dbManager.createTestUser(testUser);\n\n      const plant = createTestPlantWithTaxonomy({\n        family: 'Araceae',\n        genus: 'Monstera',\n        species: 'deliciosa',\n        commonName: 'Monstera Deliciosa',\n      }, { createdBy: createdUser.id });\n\n      await PlantQueries.create(plant);\n\n      // Search by genus\n      const genusResults = await PlantQueries.search('Monstera');\n      expect(genusResults.length).toBeGreaterThan(0);\n      expect(genusResults.some(p => p.genus === 'Monstera')).toBe(true);\n\n      // Search by species\n      const speciesResults = await PlantQueries.search('deliciosa');\n      expect(speciesResults.length).toBeGreaterThan(0);\n      expect(speciesResults.some(p => p.species === 'deliciosa')).toBe(true);\n    });\n\n    test('should get plants by family', async () => {\n      const testUser = createTestUser();\n      const createdUser = await dbManager.createTestUser(testUser);\n\n      // Create plants in same family\n      const monstera = createTestPlantWithTaxonomy({\n        family: 'Araceae',\n        genus: 'Monstera',\n        species: 'deliciosa',\n      }, { createdBy: createdUser.id });\n\n      const pothos = createTestPlantWithTaxonomy({\n        family: 'Araceae',\n        genus: 'Epipremnum',\n        species: 'aureum',\n      }, { createdBy: createdUser.id });\n\n      await PlantQueries.create(monstera);\n      await PlantQueries.create(pothos);\n\n      const araceaeResults = await PlantQueries.getByFamily('Araceae');\n      expect(araceaeResults.length).toBe(2);\n      expect(araceaeResults.every(p => p.family === 'Araceae')).toBe(true);\n    });\n\n    test('should perform full-text search', async () => {\n      const testUser = createTestUser();\n      const createdUser = await dbManager.createTestUser(testUser);\n\n      const plant = createTestPlantWithTaxonomy({\n        family: 'Araceae',\n        genus: 'Monstera',\n        species: 'deliciosa',\n        commonName: 'Swiss Cheese Plant',\n      }, { createdBy: createdUser.id });\n\n      await PlantQueries.create(plant);\n\n      // Test full-text search (should fallback to regular search if PostgreSQL full-text fails)\n      const results = await PlantQueries.fullTextSearch('Swiss Cheese');\n      expect(results.length).toBeGreaterThan(0);\n    });\n\n    test('should get all plants with pagination', async () => {\n      const testUser = createTestUser();\n      const createdUser = await dbManager.createTestUser(testUser);\n\n      // Create multiple plants\n      const plants = [\n        createTestPlantWithTaxonomy({ commonName: 'Plant 1' }, { createdBy: createdUser.id }),\n        createTestPlantWithTaxonomy({ commonName: 'Plant 2' }, { createdBy: createdUser.id }),\n        createTestPlantWithTaxonomy({ commonName: 'Plant 3' }, { createdBy: createdUser.id }),\n      ];\n\n      for (const plant of plants) {\n        await PlantQueries.create(plant);\n      }\n\n      // Test pagination\n      const firstPage = await PlantQueries.getAll(0, 2);\n      expect(firstPage.length).toBe(2);\n\n      const secondPage = await PlantQueries.getAll(2, 2);\n      expect(secondPage.length).toBeGreaterThanOrEqual(1);\n    });\n  });\n\n  describe('Plant Instance CRUD Operations', () => {\n    test('should create a new plant instance', async () => {\n      const testUser = createTestUser();\n      const createdUser = await dbManager.createTestUser(testUser);\n\n      const plant = createTestPlant({ createdBy: createdUser.id });\n      const createdPlant = await PlantQueries.create(plant);\n\n      const instanceData = {\n        userId: createdUser.id,\n        plantId: createdPlant.id,\n        nickname: 'My Monstera',\n        location: 'Living Room',\n        fertilizerSchedule: 'every_4_weeks',\n        notes: 'Beautiful plant with fenestrations',\n        images: [],\n        isActive: true,\n      };\n\n      const instance = await PlantInstanceQueries.create(instanceData);\n\n      expect(instance).toBeDefined();\n      expect(instance.id).toBeDefined();\n      expect(instance.userId).toBe(createdUser.id);\n      expect(instance.plantId).toBe(createdPlant.id);\n      expect(instance.nickname).toBe('My Monstera');\n      expect(instance.location).toBe('Living Room');\n      expect(instance.fertilizerSchedule).toBe('every_4_weeks');\n      expect(instance.isActive).toBe(true);\n      expect(instance.createdAt).toBeInstanceOf(Date);\n    });\n\n    test('should retrieve plant instance by ID with plant data', async () => {\n      const testUser = createTestUser();\n      const createdUser = await dbManager.createTestUser(testUser);\n\n      const plant = createTestPlant({ createdBy: createdUser.id });\n      const createdPlant = await PlantQueries.create(plant);\n\n      const instanceData = createTestPlantInstance({\n        userId: createdUser.id,\n        plantId: createdPlant.id,\n      });\n\n      const createdInstance = await PlantInstanceQueries.create(instanceData);\n\n      const foundInstance = await PlantInstanceQueries.getById(createdInstance.id);\n\n      expect(foundInstance).toBeDefined();\n      expect(foundInstance.id).toBe(createdInstance.id);\n      expect(foundInstance.plant).toBeDefined();\n      expect(foundInstance.plant.id).toBe(createdPlant.id);\n      expect(foundInstance.plant.commonName).toBe(createdPlant.commonName);\n    });\n\n    test('should get all plant instances for a user', async () => {\n      const testUser = createTestUser();\n      const createdUser = await dbManager.createTestUser(testUser);\n\n      const plant = createTestPlant({ createdBy: createdUser.id });\n      const createdPlant = await PlantQueries.create(plant);\n\n      // Create multiple instances for the user\n      const instance1 = createTestPlantInstance({\n        userId: createdUser.id,\n        plantId: createdPlant.id,\n        nickname: 'Plant 1',\n      });\n\n      const instance2 = createTestPlantInstance({\n        userId: createdUser.id,\n        plantId: createdPlant.id,\n        nickname: 'Plant 2',\n      });\n\n      await PlantInstanceQueries.create(instance1);\n      await PlantInstanceQueries.create(instance2);\n\n      const userInstances = await PlantInstanceQueries.getByUserId(createdUser.id);\n\n      expect(userInstances.length).toBe(2);\n      expect(userInstances.every(i => i.userId === createdUser.id)).toBe(true);\n      expect(userInstances.every(i => i.plant)).toBe(true);\n    });\n\n    test('should update plant instance', async () => {\n      const testUser = createTestUser();\n      const createdUser = await dbManager.createTestUser(testUser);\n\n      const plant = createTestPlant({ createdBy: createdUser.id });\n      const createdPlant = await PlantQueries.create(plant);\n\n      const instanceData = createTestPlantInstance({\n        userId: createdUser.id,\n        plantId: createdPlant.id,\n      });\n\n      const createdInstance = await PlantInstanceQueries.create(instanceData);\n\n      const updates = {\n        nickname: 'Updated Nickname',\n        location: 'New Location',\n        notes: 'Updated notes',\n      };\n\n      const updatedInstance = await PlantInstanceQueries.update(createdInstance.id, updates);\n\n      expect(updatedInstance.nickname).toBe('Updated Nickname');\n      expect(updatedInstance.location).toBe('New Location');\n      expect(updatedInstance.notes).toBe('Updated notes');\n      expect(updatedInstance.updatedAt.getTime()).toBeGreaterThan(createdInstance.updatedAt.getTime());\n    });\n\n    test('should deactivate and reactivate plant instance', async () => {\n      const testUser = createTestUser();\n      const createdUser = await dbManager.createTestUser(testUser);\n\n      const plant = createTestPlant({ createdBy: createdUser.id });\n      const createdPlant = await PlantQueries.create(plant);\n\n      const instanceData = createTestPlantInstance({\n        userId: createdUser.id,\n        plantId: createdPlant.id,\n        isActive: true,\n      });\n\n      const createdInstance = await PlantInstanceQueries.create(instanceData);\n\n      // Deactivate\n      const deactivatedInstance = await PlantInstanceQueries.deactivate(createdInstance.id);\n      expect(deactivatedInstance.isActive).toBe(false);\n\n      // Reactivate\n      const reactivatedInstance = await PlantInstanceQueries.reactivate(createdInstance.id);\n      expect(reactivatedInstance.isActive).toBe(true);\n    });\n  });\n\n  describe('Plant Instance Care Management', () => {\n    test('should log fertilizer application and calculate next due date', async () => {\n      const testUser = createTestUser();\n      const createdUser = await dbManager.createTestUser(testUser);\n\n      const plant = createTestPlant({ createdBy: createdUser.id });\n      const createdPlant = await PlantQueries.create(plant);\n\n      const instanceData = createTestPlantInstance({\n        userId: createdUser.id,\n        plantId: createdPlant.id,\n        fertilizerSchedule: '4 weeks',\n        lastFertilized: null,\n      });\n\n      const createdInstance = await PlantInstanceQueries.create(instanceData);\n\n      const fertilizerDate = new Date();\n      const updatedInstance = await PlantInstanceQueries.logFertilizer(createdInstance.id, fertilizerDate);\n\n      expect(updatedInstance.lastFertilized).toEqual(fertilizerDate);\n      expect(updatedInstance.fertilizerDue).toBeDefined();\n      \n      // Should be approximately 4 weeks from fertilizer date\n      const expectedDue = new Date(fertilizerDate);\n      expectedDue.setDate(expectedDue.getDate() + 28);\n      const timeDiff = Math.abs(updatedInstance.fertilizerDue.getTime() - expectedDue.getTime());\n      expect(timeDiff).toBeLessThan(24 * 60 * 60 * 1000); // Within 24 hours\n    });\n\n    test('should log repotting with notes', async () => {\n      const testUser = createTestUser();\n      const createdUser = await dbManager.createTestUser(testUser);\n\n      const plant = createTestPlant({ createdBy: createdUser.id });\n      const createdPlant = await PlantQueries.create(plant);\n\n      const instanceData = createTestPlantInstance({\n        userId: createdUser.id,\n        plantId: createdPlant.id,\n        lastRepot: null,\n        notes: 'Original notes',\n      });\n\n      const createdInstance = await PlantInstanceQueries.create(instanceData);\n\n      const repotDate = new Date();\n      const repotNotes = 'Moved to larger pot with fresh soil';\n      const updatedInstance = await PlantInstanceQueries.logRepot(createdInstance.id, repotDate, repotNotes);\n\n      expect(updatedInstance.lastRepot).toEqual(repotDate);\n      expect(updatedInstance.notes).toContain('Original notes');\n      expect(updatedInstance.notes).toContain(repotNotes);\n      expect(updatedInstance.notes).toContain(repotDate.toDateString());\n    });\n\n    test('should get plant instances with overdue fertilizer', async () => {\n      const testUser = createTestUser();\n      const createdUser = await dbManager.createTestUser(testUser);\n\n      const plant = createTestPlant({ createdBy: createdUser.id });\n      const createdPlant = await PlantQueries.create(plant);\n\n      // Create instance with overdue fertilizer\n      const overdueDate = new Date();\n      overdueDate.setDate(overdueDate.getDate() - 1); // 1 day overdue\n\n      const instanceData = createTestPlantInstance({\n        userId: createdUser.id,\n        plantId: createdPlant.id,\n        fertilizerDue: overdueDate,\n        isActive: true,\n      });\n\n      await PlantInstanceQueries.create(instanceData);\n\n      const overdueInstances = await PlantInstanceQueries.getOverdueFertilizer(createdUser.id);\n\n      expect(overdueInstances.length).toBe(1);\n      expect(overdueInstances[0].fertilizerDue.getTime()).toBeLessThanOrEqual(Date.now());\n    });\n\n    test('should get plant instances with fertilizer due soon', async () => {\n      const testUser = createTestUser();\n      const createdUser = await dbManager.createTestUser(testUser);\n\n      const plant = createTestPlant({ createdBy: createdUser.id });\n      const createdPlant = await PlantQueries.create(plant);\n\n      // Create instance with fertilizer due in 3 days\n      const dueSoonDate = new Date();\n      dueSoonDate.setDate(dueSoonDate.getDate() + 3);\n\n      const instanceData = createTestPlantInstance({\n        userId: createdUser.id,\n        plantId: createdPlant.id,\n        fertilizerDue: dueSoonDate,\n        isActive: true,\n      });\n\n      await PlantInstanceQueries.create(instanceData);\n\n      const dueSoonInstances = await PlantInstanceQueries.getFertilizerDueSoon(createdUser.id, 7);\n\n      expect(dueSoonInstances.length).toBe(1);\n      expect(dueSoonInstances[0].fertilizerDue.getTime()).toBeGreaterThan(Date.now());\n    });\n  });\n\n  describe('Plant Instance Search and Filtering', () => {\n    test('should search plant instances by nickname and location', async () => {\n      const testUser = createTestUser();\n      const createdUser = await dbManager.createTestUser(testUser);\n\n      const plant = createTestPlant({ createdBy: createdUser.id });\n      const createdPlant = await PlantQueries.create(plant);\n\n      const instance1 = createTestPlantInstance({\n        userId: createdUser.id,\n        plantId: createdPlant.id,\n        nickname: 'Living Room Monstera',\n        location: 'Living Room',\n      });\n\n      const instance2 = createTestPlantInstance({\n        userId: createdUser.id,\n        plantId: createdPlant.id,\n        nickname: 'Bedroom Pothos',\n        location: 'Bedroom',\n      });\n\n      await PlantInstanceQueries.create(instance1);\n      await PlantInstanceQueries.create(instance2);\n\n      // Search by nickname\n      const monsteraResults = await PlantInstanceQueries.search(createdUser.id, 'Monstera');\n      expect(monsteraResults.length).toBe(1);\n      expect(monsteraResults[0].nickname).toContain('Monstera');\n\n      // Search by location\n      const bedroomResults = await PlantInstanceQueries.search(createdUser.id, 'Bedroom');\n      expect(bedroomResults.length).toBe(1);\n      expect(bedroomResults[0].location).toBe('Bedroom');\n    });\n\n    test('should get care statistics for user', async () => {\n      const testUser = createTestUser();\n      const createdUser = await dbManager.createTestUser(testUser);\n\n      const plant = createTestPlant({ createdBy: createdUser.id });\n      const createdPlant = await PlantQueries.create(plant);\n\n      // Create active instance\n      const activeInstance = createTestPlantInstance({\n        userId: createdUser.id,\n        plantId: createdPlant.id,\n        isActive: true,\n      });\n\n      // Create inactive instance\n      const inactiveInstance = createTestPlantInstance({\n        userId: createdUser.id,\n        plantId: createdPlant.id,\n        isActive: false,\n      });\n\n      await PlantInstanceQueries.create(activeInstance);\n      await PlantInstanceQueries.create(inactiveInstance);\n\n      const stats = await PlantInstanceQueries.getCareStats(createdUser.id);\n\n      expect(stats.totalPlants).toBe(2);\n      expect(stats.activePlants).toBe(1);\n      expect(stats.overdueFertilizer).toBeGreaterThanOrEqual(0);\n      expect(stats.dueSoon).toBeGreaterThanOrEqual(0);\n    });\n\n    test('should get unique locations for user', async () => {\n      const testUser = createTestUser();\n      const createdUser = await dbManager.createTestUser(testUser);\n\n      const plant = createTestPlant({ createdBy: createdUser.id });\n      const createdPlant = await PlantQueries.create(plant);\n\n      const locations = ['Living Room', 'Bedroom', 'Kitchen', 'Living Room']; // Duplicate\n\n      for (const location of locations) {\n        const instance = createTestPlantInstance({\n          userId: createdUser.id,\n          plantId: createdPlant.id,\n          location,\n        });\n        await PlantInstanceQueries.create(instance);\n      }\n\n      const userLocations = await PlantInstanceQueries.getUserLocations(createdUser.id);\n\n      expect(userLocations.length).toBe(3); // Should be unique\n      expect(userLocations).toContain('Living Room');\n      expect(userLocations).toContain('Bedroom');\n      expect(userLocations).toContain('Kitchen');\n    });\n  });\n\n  describe('Plant Taxonomy Validation', () => {\n    test('should validate plant taxonomy for duplicates', async () => {\n      const testUser = createTestUser();\n      const createdUser = await dbManager.createTestUser(testUser);\n\n      // Create existing plant\n      const existingPlant = createTestPlantWithTaxonomy({\n        family: 'Araceae',\n        genus: 'Monstera',\n        species: 'deliciosa',\n        commonName: 'Monstera Deliciosa',\n      }, { createdBy: createdUser.id });\n\n      await PlantQueries.create(existingPlant);\n\n      // Validate same taxonomy\n      const validation = await validatePlantTaxonomy({\n        family: 'Araceae',\n        genus: 'Monstera',\n        species: 'deliciosa',\n        commonName: 'Swiss Cheese Plant', // Different common name\n      });\n\n      expect(validation.isValid).toBe(false);\n      expect(validation.errors).toContain('A plant with this exact taxonomy already exists');\n      expect(validation.duplicates.length).toBe(1);\n    });\n\n    test('should provide suggestions for similar taxonomy', async () => {\n      const testUser = createTestUser();\n      const createdUser = await dbManager.createTestUser(testUser);\n\n      // Create plants with similar names\n      const araceaePlant = createTestPlantWithTaxonomy({\n        family: 'Araceae',\n        genus: 'Monstera',\n        species: 'deliciosa',\n      }, { createdBy: createdUser.id });\n\n      await PlantQueries.create(araceaePlant);\n\n      // Validate similar taxonomy\n      const validation = await validatePlantTaxonomy({\n        family: 'Ara', // Partial match\n        genus: 'Mon', // Partial match\n        species: 'adansonii',\n        commonName: 'Monstera Adansonii',\n      });\n\n      expect(validation.suggestions.family.length).toBeGreaterThan(0);\n      expect(validation.suggestions.genus.length).toBeGreaterThan(0);\n    });\n  });\n\n  describe('Error Handling and Edge Cases', () => {\n    test('should handle non-existent plant instance operations gracefully', async () => {\n      await expect(PlantInstanceQueries.update(99999, { nickname: 'Test' }))\n        .rejects.toThrow('Plant instance not found');\n\n      await expect(PlantInstanceQueries.logFertilizer(99999))\n        .rejects.toThrow('Plant instance not found');\n\n      await expect(PlantInstanceQueries.deactivate(99999))\n        .rejects.toThrow('Plant instance not found');\n    });\n\n    test('should handle non-existent plant operations gracefully', async () => {\n      await expect(PlantQueries.update(99999, { commonName: 'Test' }))\n        .rejects.toThrow('Plant not found');\n\n      const nonExistentPlant = await PlantQueries.getById(99999);\n      expect(nonExistentPlant).toBeNull();\n    });\n\n    test('should handle empty search queries', async () => {\n      const results = await PlantQueries.search('');\n      expect(Array.isArray(results)).toBe(true);\n    });\n\n    test('should handle invalid fertilizer schedule formats', async () => {\n      const testUser = createTestUser();\n      const createdUser = await dbManager.createTestUser(testUser);\n\n      const plant = createTestPlant({ createdBy: createdUser.id });\n      const createdPlant = await PlantQueries.create(plant);\n\n      const instanceData = createTestPlantInstance({\n        userId: createdUser.id,\n        plantId: createdPlant.id,\n        fertilizerSchedule: 'invalid schedule format',\n      });\n\n      const createdInstance = await PlantInstanceQueries.create(instanceData);\n\n      // Should not crash, but may not calculate next due date\n      const updatedInstance = await PlantInstanceQueries.logFertilizer(createdInstance.id);\n      expect(updatedInstance.lastFertilized).toBeDefined();\n      // fertilizerDue may be null due to invalid schedule format\n    });\n  });\n\n  describe('Database Connection and Performance', () => {\n    test('should verify database connection is working', async () => {\n      const isConnected = await dbManager.isConnected();\n      expect(isConnected).toBe(true);\n    });\n\n    test('should handle concurrent plant creation', async () => {\n      const testUser = createTestUser();\n      const createdUser = await dbManager.createTestUser(testUser);\n\n      const plantPromises = Array.from({ length: 5 }, (_, index) => {\n        const plantData = createTestPlant({\n          commonName: `Concurrent Plant ${index}`,\n          createdBy: createdUser.id,\n        });\n        return PlantQueries.create(plantData);\n      });\n\n      const plants = await Promise.all(plantPromises);\n      expect(plants.length).toBe(5);\n      expect(plants.every(p => p.id)).toBe(true);\n    });\n\n    test('should handle large search result sets efficiently', async () => {\n      const testUser = createTestUser();\n      const createdUser = await dbManager.createTestUser(testUser);\n\n      // Create many plants with similar names\n      const plantPromises = Array.from({ length: 20 }, (_, index) => {\n        const plantData = createTestPlant({\n          commonName: `Search Test Plant ${index}`,\n          createdBy: createdUser.id,\n        });\n        return PlantQueries.create(plantData);\n      });\n\n      await Promise.all(plantPromises);\n\n      const startTime = Date.now();\n      const results = await PlantQueries.search('Search Test');\n      const searchTime = Date.now() - startTime;\n\n      expect(results.length).toBeGreaterThan(0);\n      expect(searchTime).toBeLessThan(1000); // Should complete within 1 second\n    });\n  });\n});"],"names":["describe","dbManager","beforeEach","createDatabaseTestManager","resetPlantCounters","afterEach","cleanup","test","testUser","createTestUser","createdUser","plantData","family","genus","species","cultivar","commonName","careInstructions","createdBy","id","isVerified","plant","PlantQueries","create","expect","toBeDefined","toBe","createdAt","toBeInstanceOf","Date","updatedAt","createTestPlant","createdPlant","foundPlant","getById","toBeNull","updates","updatedPlant","update","getTime","toBeGreaterThan","createTestPlantWithTaxonomy","existingPlant","taxonomyExists","nonExistingPlant","plantWithCultivar","exactMatch","withoutCultivar","monstera","pothos","monsteraResults","search","length","some","p","includes","pothosResults","genusResults","speciesResults","araceaeResults","getByFamily","every","results","fullTextSearch","plants","firstPage","getAll","secondPage","toBeGreaterThanOrEqual","instanceData","userId","plantId","nickname","location","fertilizerSchedule","notes","images","isActive","instance","PlantInstanceQueries","createTestPlantInstance","createdInstance","foundInstance","instance1","instance2","userInstances","getByUserId","i","updatedInstance","deactivatedInstance","deactivate","reactivatedInstance","reactivate","lastFertilized","fertilizerDate","logFertilizer","toEqual","fertilizerDue","expectedDue","setDate","getDate","timeDiff","Math","abs","toBeLessThan","lastRepot","repotDate","repotNotes","logRepot","toContain","toDateString","overdueDate","overdueInstances","getOverdueFertilizer","toBeLessThanOrEqual","now","dueSoonDate","dueSoonInstances","getFertilizerDueSoon","bedroomResults","activeInstance","inactiveInstance","stats","getCareStats","totalPlants","activePlants","overdueFertilizer","dueSoon","locations","userLocations","getUserLocations","validation","validatePlantTaxonomy","isValid","errors","duplicates","araceaePlant","suggestions","rejects","toThrow","nonExistentPlant","Array","isArray","isConnected","plantPromises","from","_","index","Promise","all","startTime","searchTime"],"mappings":"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"}