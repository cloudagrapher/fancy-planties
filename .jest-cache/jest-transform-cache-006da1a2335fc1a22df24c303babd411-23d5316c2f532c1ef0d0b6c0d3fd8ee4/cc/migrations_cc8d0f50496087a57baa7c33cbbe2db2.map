{"version":3,"sources":["/Users/stefanbekker/projects/fancy-planties/src/lib/db/migrations.ts"],"sourcesContent":["import 'server-only';\n\nimport { db } from './index';\nimport { sql } from 'drizzle-orm';\nimport fs from 'fs';\nimport path from 'path';\n\n// Migration utilities\nexport class MigrationUtils {\n  // Run all pending migrations\n  static async runMigrations(): Promise<void> {\n    try {\n      console.log('Starting database migrations...');\n      \n      // Create migrations table if it doesn't exist\n      await db.execute(sql`\n        CREATE TABLE IF NOT EXISTS __drizzle_migrations (\n          id SERIAL PRIMARY KEY,\n          hash text NOT NULL,\n          created_at bigint\n        );\n      `);\n\n      // Apply migration files from drizzle directory\n      const migrationsPath = path.join(process.cwd(), 'drizzle');\n      \n      if (fs.existsSync(migrationsPath)) {\n        const files = fs.readdirSync(migrationsPath);\n        const sqlFiles = files\n          .filter(file => file.endsWith('.sql') && !file.includes('rls-policies'))\n          .sort(); // Ensure migrations are applied in order\n\n        for (const file of sqlFiles) {\n          const filePath = path.join(migrationsPath, file);\n          const migrationSQL = fs.readFileSync(filePath, 'utf8');\n          \n          // Check if migration was already applied\n          const [existing] = await db.execute(sql`\n            SELECT COUNT(*) as count FROM __drizzle_migrations \n            WHERE hash = ${file}\n          `);\n          \n          if (Number(existing?.count) === 0) {\n            console.log(`  üìã Applying migration: ${file}`);\n            \n            // Split migration into individual statements\n            const statements = migrationSQL\n              .split('--> statement-breakpoint')\n              .map(stmt => stmt.trim())\n              .filter(stmt => stmt.length > 0 && !stmt.startsWith('--'));\n\n            for (const statement of statements) {\n              const cleanStatement = statement.trim();\n              if (cleanStatement && !cleanStatement.startsWith('--')) {\n                await db.execute(sql.raw(cleanStatement));\n              }\n            }\n            \n            // Record migration as applied\n            await db.execute(sql`\n              INSERT INTO __drizzle_migrations (hash, created_at) \n              VALUES (${file}, ${Date.now()})\n            `);\n            \n            console.log(`  ‚úÖ Applied migration: ${file}`);\n          } else {\n            console.log(`  ‚è≠Ô∏è  Skipping already applied migration: ${file}`);\n          }\n        }\n      }\n\n      console.log('Migrations completed successfully');\n    } catch (error) {\n      console.error('Migration failed:', error);\n      throw new Error('Failed to run migrations');\n    }\n  }\n\n  // Apply RLS policies\n  static async applyRLSPolicies(): Promise<void> {\n    try {\n      console.log('Applying Row-Level Security policies...');\n      \n      const rlsPath = path.join(process.cwd(), 'drizzle', 'rls-policies.sql');\n      \n      if (fs.existsSync(rlsPath)) {\n        const rlsSQL = fs.readFileSync(rlsPath, 'utf8');\n        \n        // Split by semicolon and filter out comments\n        const statements = rlsSQL\n          .split(';')\n          .map(stmt => stmt.trim())\n          .filter(stmt => \n            stmt.length > 0 && \n            !stmt.startsWith('--') && \n            !stmt.match(/^\\/\\*.*\\*\\/$/)\n          );\n\n        for (const statement of statements) {\n          const cleanStatement = statement.trim();\n          if (cleanStatement && !cleanStatement.startsWith('--')) {\n            try {\n              await db.execute(sql.raw(cleanStatement));\n            } catch (error) {\n              // Log but don't fail on policy conflicts (they might already exist)\n              if (error instanceof Error && error.message.includes('already exists')) {\n                console.log(`Policy already exists, skipping: ${cleanStatement.substring(0, 50)}...`);\n              } else {\n                console.error(`Failed to execute statement: ${cleanStatement.substring(0, 50)}...`);\n                throw error;\n              }\n            }\n          }\n        }\n        \n        console.log('RLS policies applied successfully');\n      } else {\n        console.warn('RLS policies file not found, skipping...');\n      }\n    } catch (error) {\n      console.error('Failed to apply RLS policies:', error);\n      throw new Error('Failed to apply RLS policies');\n    }\n  }\n\n  // Rollback last migration (basic implementation)\n  static async rollbackLastMigration(): Promise<void> {\n    try {\n      console.log('Rolling back last migration...');\n      \n      // This is a basic implementation - in production you'd want more sophisticated rollback logic\n      console.warn('Rollback functionality requires manual intervention for safety');\n      console.log('Please review the migration files and manually rollback if needed');\n      \n    } catch (error) {\n      console.error('Rollback failed:', error);\n      throw new Error('Failed to rollback migration');\n    }\n  }\n\n  // Check migration status\n  static async getMigrationStatus(): Promise<{\n    appliedMigrations: number;\n    pendingMigrations: string[];\n  }> {\n    try {\n      // Get applied migrations\n      const appliedResults = await db.execute(sql`\n        SELECT hash FROM __drizzle_migrations ORDER BY created_at\n      `);\n      \n      const appliedMigrations = appliedResults.length;\n      const appliedHashes = new Set(appliedResults.map(r => r.hash));\n      \n      // Get all migration files\n      const migrationsPath = path.join(process.cwd(), 'drizzle');\n      const pendingMigrations: string[] = [];\n      \n      if (fs.existsSync(migrationsPath)) {\n        const files = fs.readdirSync(migrationsPath);\n        const sqlFiles = files\n          .filter(file => file.endsWith('.sql') && !file.includes('rls-policies'))\n          .sort();\n        \n        // Find pending migrations\n        for (const file of sqlFiles) {\n          if (!appliedHashes.has(file)) {\n            pendingMigrations.push(file);\n          }\n        }\n      }\n\n      return {\n        appliedMigrations,\n        pendingMigrations\n      };\n    } catch (error) {\n      console.error('Failed to get migration status:', error);\n      throw new Error('Failed to get migration status');\n    }\n  }\n\n  // Seed initial data (for development)\n  static async seedInitialData(): Promise<void> {\n    try {\n      console.log('Seeding initial data...');\n      \n      // Check if we already have data\n      const [userCount] = await db.execute(sql`SELECT COUNT(*) as count FROM users`);\n      \n      if (Number(userCount?.count) > 0) {\n        console.log('Database already has data, skipping seed');\n        return;\n      }\n\n      // Add some common plant taxonomy data\n      const commonPlants = [\n        {\n          family: 'Araceae',\n          genus: 'Monstera',\n          species: 'deliciosa',\n          commonName: 'Swiss Cheese Plant',\n          careInstructions: 'Bright indirect light, water when top inch of soil is dry',\n          isVerified: true\n        },\n        {\n          family: 'Araceae',\n          genus: 'Pothos',\n          species: 'aureus',\n          commonName: 'Golden Pothos',\n          careInstructions: 'Low to bright indirect light, water when soil is dry',\n          isVerified: true\n        },\n        {\n          family: 'Asparagaceae',\n          genus: 'Sansevieria',\n          species: 'trifasciata',\n          commonName: 'Snake Plant',\n          careInstructions: 'Low light tolerant, water sparingly',\n          isVerified: true\n        },\n        {\n          family: 'Araceae',\n          genus: 'Philodendron',\n          species: 'hederaceum',\n          commonName: 'Heartleaf Philodendron',\n          careInstructions: 'Bright indirect light, keep soil lightly moist',\n          isVerified: true\n        }\n      ];\n\n      for (const plant of commonPlants) {\n        await db.execute(sql`\n          INSERT INTO plants (family, genus, species, cultivar, common_name, care_instructions, is_verified)\n          VALUES (${plant.family}, ${plant.genus}, ${plant.species}, NULL, ${plant.commonName}, ${plant.careInstructions}, ${plant.isVerified})\n          ON CONFLICT (family, genus, species, cultivar) DO NOTHING\n        `);\n      }\n\n      console.log('Initial data seeded successfully');\n    } catch (error) {\n      console.error('Failed to seed initial data:', error);\n      throw new Error('Failed to seed initial data');\n    }\n  }\n\n  // Database health check\n  static async healthCheck(): Promise<{\n    connected: boolean;\n    migrationsApplied: boolean;\n    rlsEnabled: boolean;\n    tablesExist: boolean;\n  }> {\n    try {\n      // Check connection\n      const connected = await db.execute(sql`SELECT 1`).then(() => true).catch(() => false);\n      \n      // Check if migrations table exists\n      const [migrationTable] = await db.execute(sql`\n        SELECT EXISTS (\n          SELECT FROM information_schema.tables \n          WHERE table_name = '__drizzle_migrations'\n        ) as exists\n      `);\n      const migrationsApplied = Boolean(migrationTable?.exists) || false;\n\n      // Check if main tables exist (including email verification)\n      const [tablesCheck] = await db.execute(sql`\n        SELECT \n          (SELECT COUNT(*) FROM information_schema.tables WHERE table_name IN ('users', 'plants', 'plant_instances', 'propagations', 'sessions', 'email_verification_codes')) as table_count\n      `);\n      const tablesExist = Number(tablesCheck?.table_count) === 6;\n\n      // Check if RLS is enabled on user tables\n      const [rlsCheck] = await db.execute(sql`\n        SELECT COUNT(*) as rls_count\n        FROM pg_class c\n        JOIN pg_namespace n ON n.oid = c.relnamespace\n        WHERE c.relrowsecurity = true \n        AND n.nspname = 'public'\n        AND c.relname IN ('plant_instances', 'propagations', 'sessions', 'care_history', 'care_guides', 'email_verification_codes')\n      `);\n      const rlsEnabled = Number(rlsCheck?.rls_count) === 6;\n\n      return {\n        connected,\n        migrationsApplied,\n        rlsEnabled,\n        tablesExist\n      };\n    } catch (error) {\n      console.error('Health check failed:', error);\n      return {\n        connected: false,\n        migrationsApplied: false,\n        rlsEnabled: false,\n        tablesExist: false\n      };\n    }\n  }\n}"],"names":["MigrationUtils","runMigrations","console","log","db","execute","sql","migrationsPath","path","join","process","cwd","fs","existsSync","files","readdirSync","sqlFiles","filter","file","endsWith","includes","sort","filePath","migrationSQL","readFileSync","existing","Number","count","statements","split","map","stmt","trim","length","startsWith","statement","cleanStatement","raw","Date","now","error","Error","applyRLSPolicies","rlsPath","rlsSQL","match","message","substring","warn","rollbackLastMigration","getMigrationStatus","appliedResults","appliedMigrations","appliedHashes","Set","r","hash","pendingMigrations","has","push","seedInitialData","userCount","commonPlants","family","genus","species","commonName","careInstructions","isVerified","plant","healthCheck","connected","then","catch","migrationTable","migrationsApplied","Boolean","exists","tablesCheck","tablesExist","table_count","rlsCheck","rlsEnabled","rls_count"],"mappings":"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"}