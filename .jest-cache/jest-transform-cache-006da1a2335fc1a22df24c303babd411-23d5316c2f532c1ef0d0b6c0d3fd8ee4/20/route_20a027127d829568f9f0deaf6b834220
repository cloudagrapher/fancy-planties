7f1abeb0a22ac8d04ea30206d679927a
"use strict";

/* istanbul ignore next */
function cov_1fc4pd2a28() {
  var path = "/Users/stefanbekker/projects/fancy-planties/src/app/api/auth/signup/route.ts";
  var hash = "114318a5ac54d47e5308fb8c12be904ab389a43e";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/stefanbekker/projects/fancy-planties/src/app/api/auth/signup/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 20
        }
      },
      "3": {
        start: {
          line: 11,
          column: 16
        },
        end: {
          line: 11,
          column: 38
        }
      },
      "4": {
        start: {
          line: 12,
          column: 14
        },
        end: {
          line: 12,
          column: 45
        }
      },
      "5": {
        start: {
          line: 13,
          column: 20
        },
        end: {
          line: 13,
          column: 62
        }
      },
      "6": {
        start: {
          line: 14,
          column: 20
        },
        end: {
          line: 14,
          column: 62
        }
      },
      "7": {
        start: {
          line: 15,
          column: 38
        },
        end: {
          line: 15,
          column: 105
        }
      },
      "8": {
        start: {
          line: 16,
          column: 22
        },
        end: {
          line: 16,
          column: 71
        }
      },
      "9": {
        start: {
          line: 17,
          column: 28
        },
        end: {
          line: 17,
          column: 84
        }
      },
      "10": {
        start: {
          line: 19,
          column: 4
        },
        end: {
          line: 116,
          column: 7
        }
      },
      "11": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 115,
          column: 9
        }
      },
      "12": {
        start: {
          line: 21,
          column: 25
        },
        end: {
          line: 21,
          column: 41
        }
      },
      "13": {
        start: {
          line: 23,
          column: 31
        },
        end: {
          line: 23,
          column: 93
        }
      },
      "14": {
        start: {
          line: 24,
          column: 12
        },
        end: {
          line: 31,
          column: 13
        }
      },
      "15": {
        start: {
          line: 25,
          column: 16
        },
        end: {
          line: 30,
          column: 19
        }
      },
      "16": {
        start: {
          line: 32,
          column: 46
        },
        end: {
          line: 32,
          column: 61
        }
      },
      "17": {
        start: {
          line: 34,
          column: 25
        },
        end: {
          line: 34,
          column: 81
        }
      },
      "18": {
        start: {
          line: 36,
          column: 37
        },
        end: {
          line: 36,
          column: 123
        }
      },
      "19": {
        start: {
          line: 38,
          column: 12
        },
        end: {
          line: 100,
          column: 13
        }
      },
      "20": {
        start: {
          line: 39,
          column: 37
        },
        end: {
          line: 39,
          column: 82
        }
      },
      "21": {
        start: {
          line: 40,
          column: 16
        },
        end: {
          line: 40,
          column: 105
        }
      },
      "22": {
        start: {
          line: 41,
          column: 16
        },
        end: {
          line: 41,
          column: 87
        }
      },
      "23": {
        start: {
          line: 42,
          column: 16
        },
        end: {
          line: 52,
          column: 19
        }
      },
      "24": {
        start: {
          line: 54,
          column: 16
        },
        end: {
          line: 54,
          column: 80
        }
      },
      "25": {
        start: {
          line: 56,
          column: 16
        },
        end: {
          line: 86,
          column: 17
        }
      },
      "26": {
        start: {
          line: 57,
          column: 39
        },
        end: {
          line: 57,
          column: 76
        }
      },
      "27": {
        start: {
          line: 58,
          column: 20
        },
        end: {
          line: 73,
          column: 21
        }
      },
      "28": {
        start: {
          line: 60,
          column: 28
        },
        end: {
          line: 60,
          column: 100
        }
      },
      "29": {
        start: {
          line: 61,
          column: 28
        },
        end: {
          line: 61,
          column: 34
        }
      },
      "30": {
        start: {
          line: 63,
          column: 28
        },
        end: {
          line: 63,
          column: 78
        }
      },
      "31": {
        start: {
          line: 64,
          column: 28
        },
        end: {
          line: 64,
          column: 34
        }
      },
      "32": {
        start: {
          line: 66,
          column: 28
        },
        end: {
          line: 66,
          column: 111
        }
      },
      "33": {
        start: {
          line: 67,
          column: 28
        },
        end: {
          line: 67,
          column: 34
        }
      },
      "34": {
        start: {
          line: 69,
          column: 28
        },
        end: {
          line: 69,
          column: 109
        }
      },
      "35": {
        start: {
          line: 70,
          column: 28
        },
        end: {
          line: 70,
          column: 34
        }
      },
      "36": {
        start: {
          line: 72,
          column: 28
        },
        end: {
          line: 72,
          column: 90
        }
      },
      "37": {
        start: {
          line: 74,
          column: 20
        },
        end: {
          line: 85,
          column: 23
        }
      },
      "38": {
        start: {
          line: 88,
          column: 16
        },
        end: {
          line: 99,
          column: 19
        }
      },
      "39": {
        start: {
          line: 102,
          column: 12
        },
        end: {
          line: 102,
          column: 51
        }
      },
      "40": {
        start: {
          line: 103,
          column: 12
        },
        end: {
          line: 109,
          column: 13
        }
      },
      "41": {
        start: {
          line: 104,
          column: 16
        },
        end: {
          line: 108,
          column: 19
        }
      },
      "42": {
        start: {
          line: 110,
          column: 12
        },
        end: {
          line: 114,
          column: 15
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "POST",
        decl: {
          start: {
            line: 18,
            column: 15
          },
          end: {
            line: 18,
            column: 19
          }
        },
        loc: {
          start: {
            line: 18,
            column: 29
          },
          end: {
            line: 117,
            column: 1
          }
        },
        line: 18
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 19,
            column: 51
          },
          end: {
            line: 19,
            column: 52
          }
        },
        loc: {
          start: {
            line: 19,
            column: 64
          },
          end: {
            line: 116,
            column: 5
          }
        },
        line: 19
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 24,
            column: 12
          },
          end: {
            line: 31,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 24,
            column: 12
          },
          end: {
            line: 31,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 24
      },
      "1": {
        loc: {
          start: {
            line: 56,
            column: 16
          },
          end: {
            line: 86,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 56,
            column: 16
          },
          end: {
            line: 86,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 56
      },
      "2": {
        loc: {
          start: {
            line: 58,
            column: 20
          },
          end: {
            line: 73,
            column: 21
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 59,
            column: 24
          },
          end: {
            line: 61,
            column: 34
          }
        }, {
          start: {
            line: 62,
            column: 24
          },
          end: {
            line: 64,
            column: 34
          }
        }, {
          start: {
            line: 65,
            column: 24
          },
          end: {
            line: 67,
            column: 34
          }
        }, {
          start: {
            line: 68,
            column: 24
          },
          end: {
            line: 70,
            column: 34
          }
        }, {
          start: {
            line: 71,
            column: 24
          },
          end: {
            line: 72,
            column: 90
          }
        }],
        line: 58
      },
      "3": {
        loc: {
          start: {
            line: 103,
            column: 12
          },
          end: {
            line: 109,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 103,
            column: 12
          },
          end: {
            line: 109,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 103
      },
      "4": {
        loc: {
          start: {
            line: 103,
            column: 16
          },
          end: {
            line: 103,
            column: 81
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 103,
            column: 16
          },
          end: {
            line: 103,
            column: 38
          }
        }, {
          start: {
            line: 103,
            column: 42
          },
          end: {
            line: 103,
            column: 81
          }
        }],
        line: 103
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0, 0, 0, 0],
      "3": [0, 0],
      "4": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/stefanbekker/projects/fancy-planties/src/app/api/auth/signup/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport { signUpUnverified } from '@/lib/auth';\nimport { signUpSchema, validateInput } from '@/lib/auth/validation';\nimport { withRateLimit } from '@/lib/auth/middleware';\nimport { emailVerificationCodeService } from '@/lib/services/email-verification-code-service';\nimport { sendEmailWithRetry, EmailServiceError } from '@/lib/services/email-service';\nimport { createEmailService } from '@/lib/services/resend-email-service';\n\nexport async function POST(request: NextRequest) {\n  return withRateLimit(request, async (req) => {\n    try {\n      const body = await req.json();\n      \n      // Validate input\n      const validation = validateInput(signUpSchema, body);\n      if (!validation.success) {\n        return NextResponse.json(\n          { error: 'Validation failed', errors: validation.errors },\n          { status: 400 }\n        );\n      }\n      \n      const { email, password, name } = validation.data;\n      \n      // Create unverified user\n      const user = await signUpUnverified(email, password, name);\n      \n      // Generate verification code\n      const verificationCode = await emailVerificationCodeService.generateCode(user.id);\n      \n      // Send verification email\n      try {\n        const emailService = createEmailService();\n        await sendEmailWithRetry(emailService, email, verificationCode, name);\n        \n        console.log(`Verification email sent to ${email} for user ${user.id}`);\n        \n        return NextResponse.json({\n          success: true,\n          message: 'Account created successfully. Please check your email for a verification code.',\n          requiresVerification: true,\n          user: {\n            id: user.id,\n            email: user.email,\n            name: user.name,\n            isEmailVerified: user.isEmailVerified,\n          },\n        });\n        \n      } catch (emailError) {\n        console.error('Failed to send verification email:', emailError);\n        \n        // If email sending fails, we still created the user, so let them know they can resend\n        if (emailError instanceof EmailServiceError) {\n          let errorMessage = 'Failed to send verification email. ';\n          \n          switch (emailError.code) {\n            case 'QUOTA_EXCEEDED':\n              errorMessage += 'Email service quota exceeded. Please try again later.';\n              break;\n            case 'INVALID_EMAIL':\n              errorMessage += 'Invalid email address provided.';\n              break;\n            case 'API_ERROR':\n              errorMessage += 'Email service error. Please try resending the verification code.';\n              break;\n            case 'NETWORK_ERROR':\n              errorMessage += 'Network error. Please check your connection and try resending.';\n              break;\n            default:\n              errorMessage += 'Please try resending the verification code.';\n          }\n          \n          return NextResponse.json({\n            success: true,\n            message: 'Account created successfully.',\n            requiresVerification: true,\n            emailError: errorMessage,\n            user: {\n              id: user.id,\n              email: user.email,\n              name: user.name,\n              isEmailVerified: user.isEmailVerified,\n            },\n          });\n        }\n        \n        // For unknown email errors, still return success but mention the issue\n        return NextResponse.json({\n          success: true,\n          message: 'Account created successfully.',\n          requiresVerification: true,\n          emailError: 'Failed to send verification email. Please try resending the verification code.',\n          user: {\n            id: user.id,\n            email: user.email,\n            name: user.name,\n            isEmailVerified: user.isEmailVerified,\n          },\n        });\n      }\n      \n    } catch (error) {\n      console.error('Sign up error:', error);\n      \n      if (error instanceof Error && error.message === 'User already exists') {\n        return NextResponse.json(\n          { error: 'An account with this email already exists' },\n          { status: 409 }\n        );\n      }\n      \n      return NextResponse.json(\n        { error: 'Internal server error' },\n        { status: 500 }\n      );\n    }\n  });\n}"],
      names: ["POST", "request", "withRateLimit", "req", "body", "json", "validation", "validateInput", "signUpSchema", "success", "NextResponse", "error", "errors", "status", "email", "password", "name", "data", "user", "signUpUnverified", "verificationCode", "emailVerificationCodeService", "generateCode", "id", "emailService", "createEmailService", "sendEmailWithRetry", "console", "log", "message", "requiresVerification", "isEmailVerified", "emailError", "EmailServiceError", "errorMessage", "code", "Error"],
      mappings: ";;;;+BAQsBA;;;eAAAA;;;wBARoB;sBACT;4BACW;4BACd;8CACe;8BACS;oCACnB;AAE5B,eAAeA,KAAKC,OAAoB;IAC7C,OAAOC,IAAAA,yBAAa,EAACD,SAAS,OAAOE;QACnC,IAAI;YACF,MAAMC,OAAO,MAAMD,IAAIE,IAAI;YAE3B,iBAAiB;YACjB,MAAMC,aAAaC,IAAAA,yBAAa,EAACC,wBAAY,EAAEJ;YAC/C,IAAI,CAACE,WAAWG,OAAO,EAAE;gBACvB,OAAOC,oBAAY,CAACL,IAAI,CACtB;oBAAEM,OAAO;oBAAqBC,QAAQN,WAAWM,MAAM;gBAAC,GACxD;oBAAEC,QAAQ;gBAAI;YAElB;YAEA,MAAM,EAAEC,KAAK,EAAEC,QAAQ,EAAEC,IAAI,EAAE,GAAGV,WAAWW,IAAI;YAEjD,yBAAyB;YACzB,MAAMC,OAAO,MAAMC,IAAAA,sBAAgB,EAACL,OAAOC,UAAUC;YAErD,6BAA6B;YAC7B,MAAMI,mBAAmB,MAAMC,0DAA4B,CAACC,YAAY,CAACJ,KAAKK,EAAE;YAEhF,0BAA0B;YAC1B,IAAI;gBACF,MAAMC,eAAeC,IAAAA,sCAAkB;gBACvC,MAAMC,IAAAA,gCAAkB,EAACF,cAAcV,OAAOM,kBAAkBJ;gBAEhEW,QAAQC,GAAG,CAAC,CAAC,2BAA2B,EAAEd,MAAM,UAAU,EAAEI,KAAKK,EAAE,EAAE;gBAErE,OAAOb,oBAAY,CAACL,IAAI,CAAC;oBACvBI,SAAS;oBACToB,SAAS;oBACTC,sBAAsB;oBACtBZ,MAAM;wBACJK,IAAIL,KAAKK,EAAE;wBACXT,OAAOI,KAAKJ,KAAK;wBACjBE,MAAME,KAAKF,IAAI;wBACfe,iBAAiBb,KAAKa,eAAe;oBACvC;gBACF;YAEF,EAAE,OAAOC,YAAY;gBACnBL,QAAQhB,KAAK,CAAC,sCAAsCqB;gBAEpD,sFAAsF;gBACtF,IAAIA,sBAAsBC,+BAAiB,EAAE;oBAC3C,IAAIC,eAAe;oBAEnB,OAAQF,WAAWG,IAAI;wBACrB,KAAK;4BACHD,gBAAgB;4BAChB;wBACF,KAAK;4BACHA,gBAAgB;4BAChB;wBACF,KAAK;4BACHA,gBAAgB;4BAChB;wBACF,KAAK;4BACHA,gBAAgB;4BAChB;wBACF;4BACEA,gBAAgB;oBACpB;oBAEA,OAAOxB,oBAAY,CAACL,IAAI,CAAC;wBACvBI,SAAS;wBACToB,SAAS;wBACTC,sBAAsB;wBACtBE,YAAYE;wBACZhB,MAAM;4BACJK,IAAIL,KAAKK,EAAE;4BACXT,OAAOI,KAAKJ,KAAK;4BACjBE,MAAME,KAAKF,IAAI;4BACfe,iBAAiBb,KAAKa,eAAe;wBACvC;oBACF;gBACF;gBAEA,uEAAuE;gBACvE,OAAOrB,oBAAY,CAACL,IAAI,CAAC;oBACvBI,SAAS;oBACToB,SAAS;oBACTC,sBAAsB;oBACtBE,YAAY;oBACZd,MAAM;wBACJK,IAAIL,KAAKK,EAAE;wBACXT,OAAOI,KAAKJ,KAAK;wBACjBE,MAAME,KAAKF,IAAI;wBACfe,iBAAiBb,KAAKa,eAAe;oBACvC;gBACF;YACF;QAEF,EAAE,OAAOpB,OAAO;YACdgB,QAAQhB,KAAK,CAAC,kBAAkBA;YAEhC,IAAIA,iBAAiByB,SAASzB,MAAMkB,OAAO,KAAK,uBAAuB;gBACrE,OAAOnB,oBAAY,CAACL,IAAI,CACtB;oBAAEM,OAAO;gBAA4C,GACrD;oBAAEE,QAAQ;gBAAI;YAElB;YAEA,OAAOH,oBAAY,CAACL,IAAI,CACtB;gBAAEM,OAAO;YAAwB,GACjC;gBAAEE,QAAQ;YAAI;QAElB;IACF;AACF"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "114318a5ac54d47e5308fb8c12be904ab389a43e"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1fc4pd2a28 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1fc4pd2a28();
cov_1fc4pd2a28().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1fc4pd2a28().s[1]++;
Object.defineProperty(exports, "POST", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_1fc4pd2a28().f[0]++;
    cov_1fc4pd2a28().s[2]++;
    return POST;
  }
});
const _server =
/* istanbul ignore next */
(cov_1fc4pd2a28().s[3]++, require("next/server"));
const _auth =
/* istanbul ignore next */
(cov_1fc4pd2a28().s[4]++, require("../../../../lib/auth"));
const _validation =
/* istanbul ignore next */
(cov_1fc4pd2a28().s[5]++, require("../../../../lib/auth/validation"));
const _middleware =
/* istanbul ignore next */
(cov_1fc4pd2a28().s[6]++, require("../../../../lib/auth/middleware"));
const _emailverificationcodeservice =
/* istanbul ignore next */
(cov_1fc4pd2a28().s[7]++, require("../../../../lib/services/email-verification-code-service"));
const _emailservice =
/* istanbul ignore next */
(cov_1fc4pd2a28().s[8]++, require("../../../../lib/services/email-service"));
const _resendemailservice =
/* istanbul ignore next */
(cov_1fc4pd2a28().s[9]++, require("../../../../lib/services/resend-email-service"));
async function POST(request) {
  /* istanbul ignore next */
  cov_1fc4pd2a28().f[1]++;
  cov_1fc4pd2a28().s[10]++;
  return (0, _middleware.withRateLimit)(request, async req => {
    /* istanbul ignore next */
    cov_1fc4pd2a28().f[2]++;
    cov_1fc4pd2a28().s[11]++;
    try {
      const body =
      /* istanbul ignore next */
      (cov_1fc4pd2a28().s[12]++, await req.json());
      // Validate input
      const validation =
      /* istanbul ignore next */
      (cov_1fc4pd2a28().s[13]++, (0, _validation.validateInput)(_validation.signUpSchema, body));
      /* istanbul ignore next */
      cov_1fc4pd2a28().s[14]++;
      if (!validation.success) {
        /* istanbul ignore next */
        cov_1fc4pd2a28().b[0][0]++;
        cov_1fc4pd2a28().s[15]++;
        return _server.NextResponse.json({
          error: 'Validation failed',
          errors: validation.errors
        }, {
          status: 400
        });
      } else
      /* istanbul ignore next */
      {
        cov_1fc4pd2a28().b[0][1]++;
      }
      const {
        email,
        password,
        name
      } =
      /* istanbul ignore next */
      (cov_1fc4pd2a28().s[16]++, validation.data);
      // Create unverified user
      const user =
      /* istanbul ignore next */
      (cov_1fc4pd2a28().s[17]++, await (0, _auth.signUpUnverified)(email, password, name));
      // Generate verification code
      const verificationCode =
      /* istanbul ignore next */
      (cov_1fc4pd2a28().s[18]++, await _emailverificationcodeservice.emailVerificationCodeService.generateCode(user.id));
      // Send verification email
      /* istanbul ignore next */
      cov_1fc4pd2a28().s[19]++;
      try {
        const emailService =
        /* istanbul ignore next */
        (cov_1fc4pd2a28().s[20]++, (0, _resendemailservice.createEmailService)());
        /* istanbul ignore next */
        cov_1fc4pd2a28().s[21]++;
        await (0, _emailservice.sendEmailWithRetry)(emailService, email, verificationCode, name);
        /* istanbul ignore next */
        cov_1fc4pd2a28().s[22]++;
        console.log(`Verification email sent to ${email} for user ${user.id}`);
        /* istanbul ignore next */
        cov_1fc4pd2a28().s[23]++;
        return _server.NextResponse.json({
          success: true,
          message: 'Account created successfully. Please check your email for a verification code.',
          requiresVerification: true,
          user: {
            id: user.id,
            email: user.email,
            name: user.name,
            isEmailVerified: user.isEmailVerified
          }
        });
      } catch (emailError) {
        /* istanbul ignore next */
        cov_1fc4pd2a28().s[24]++;
        console.error('Failed to send verification email:', emailError);
        // If email sending fails, we still created the user, so let them know they can resend
        /* istanbul ignore next */
        cov_1fc4pd2a28().s[25]++;
        if (emailError instanceof _emailservice.EmailServiceError) {
          /* istanbul ignore next */
          cov_1fc4pd2a28().b[1][0]++;
          let errorMessage =
          /* istanbul ignore next */
          (cov_1fc4pd2a28().s[26]++, 'Failed to send verification email. ');
          /* istanbul ignore next */
          cov_1fc4pd2a28().s[27]++;
          switch (emailError.code) {
            case 'QUOTA_EXCEEDED':
              /* istanbul ignore next */
              cov_1fc4pd2a28().b[2][0]++;
              cov_1fc4pd2a28().s[28]++;
              errorMessage += 'Email service quota exceeded. Please try again later.';
              /* istanbul ignore next */
              cov_1fc4pd2a28().s[29]++;
              break;
            case 'INVALID_EMAIL':
              /* istanbul ignore next */
              cov_1fc4pd2a28().b[2][1]++;
              cov_1fc4pd2a28().s[30]++;
              errorMessage += 'Invalid email address provided.';
              /* istanbul ignore next */
              cov_1fc4pd2a28().s[31]++;
              break;
            case 'API_ERROR':
              /* istanbul ignore next */
              cov_1fc4pd2a28().b[2][2]++;
              cov_1fc4pd2a28().s[32]++;
              errorMessage += 'Email service error. Please try resending the verification code.';
              /* istanbul ignore next */
              cov_1fc4pd2a28().s[33]++;
              break;
            case 'NETWORK_ERROR':
              /* istanbul ignore next */
              cov_1fc4pd2a28().b[2][3]++;
              cov_1fc4pd2a28().s[34]++;
              errorMessage += 'Network error. Please check your connection and try resending.';
              /* istanbul ignore next */
              cov_1fc4pd2a28().s[35]++;
              break;
            default:
              /* istanbul ignore next */
              cov_1fc4pd2a28().b[2][4]++;
              cov_1fc4pd2a28().s[36]++;
              errorMessage += 'Please try resending the verification code.';
          }
          /* istanbul ignore next */
          cov_1fc4pd2a28().s[37]++;
          return _server.NextResponse.json({
            success: true,
            message: 'Account created successfully.',
            requiresVerification: true,
            emailError: errorMessage,
            user: {
              id: user.id,
              email: user.email,
              name: user.name,
              isEmailVerified: user.isEmailVerified
            }
          });
        } else
        /* istanbul ignore next */
        {
          cov_1fc4pd2a28().b[1][1]++;
        }
        // For unknown email errors, still return success but mention the issue
        cov_1fc4pd2a28().s[38]++;
        return _server.NextResponse.json({
          success: true,
          message: 'Account created successfully.',
          requiresVerification: true,
          emailError: 'Failed to send verification email. Please try resending the verification code.',
          user: {
            id: user.id,
            email: user.email,
            name: user.name,
            isEmailVerified: user.isEmailVerified
          }
        });
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_1fc4pd2a28().s[39]++;
      console.error('Sign up error:', error);
      /* istanbul ignore next */
      cov_1fc4pd2a28().s[40]++;
      if (
      /* istanbul ignore next */
      (cov_1fc4pd2a28().b[4][0]++, error instanceof Error) &&
      /* istanbul ignore next */
      (cov_1fc4pd2a28().b[4][1]++, error.message === 'User already exists')) {
        /* istanbul ignore next */
        cov_1fc4pd2a28().b[3][0]++;
        cov_1fc4pd2a28().s[41]++;
        return _server.NextResponse.json({
          error: 'An account with this email already exists'
        }, {
          status: 409
        });
      } else
      /* istanbul ignore next */
      {
        cov_1fc4pd2a28().b[3][1]++;
      }
      cov_1fc4pd2a28().s[42]++;
      return _server.NextResponse.json({
        error: 'Internal server error'
      }, {
        status: 500
      });
    }
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,