{"version":3,"sources":["/Users/stefanbekker/projects/fancy-planties/src/app/api/plants/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { validateRequest } from '@/lib/auth/server';\nimport { \n  createPlant, \n  getPlantsWithStats, \n  validatePlantTaxonomy \n} from '@/lib/db/queries/plant-taxonomy';\nimport { \n  createPlantSchema, \n  plantFilterSchema \n} from '@/lib/validation/plant-schemas';\nimport { ZodError } from 'zod';\n\n// GET /api/plants - Get plants with optional filtering\nexport async function GET(request: NextRequest) {\n  try {\n    const { user } = await validateRequest();\n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const { searchParams } = new URL(request.url);\n    const filterParams = {\n      family: searchParams.get('family') || undefined,\n      genus: searchParams.get('genus') || undefined,\n      isVerified: searchParams.get('isVerified') ? searchParams.get('isVerified') === 'true' : undefined,\n      createdBy: searchParams.get('createdBy') ? parseInt(searchParams.get('createdBy')!, 10) : undefined,\n      limit: searchParams.get('limit') ? parseInt(searchParams.get('limit')!, 10) : 20,\n      offset: searchParams.get('offset') ? parseInt(searchParams.get('offset')!, 10) : 0,\n    };\n\n    const validatedFilter = plantFilterSchema.parse(filterParams);\n    const plants = await getPlantsWithStats(validatedFilter, user.id);\n\n    return NextResponse.json({\n      success: true,\n      data: plants,\n      metadata: {\n        operation: 'search',\n        timestamp: new Date(),\n        userId: user.id,\n      },\n    });\n  } catch (error) {\n    console.error('Error fetching plants:', error);\n    \n    if (error instanceof ZodError) {\n      return NextResponse.json(\n        { \n          error: 'Invalid filter parameters', \n          details: error.issues \n        }, \n        { status: 400 }\n      );\n    }\n\n    return NextResponse.json(\n      { error: 'Internal server error' }, \n      { status: 500 }\n    );\n  }\n}\n\n// POST /api/plants - Create a new plant taxonomy entry\nexport async function POST(request: NextRequest) {\n  try {\n    const { user } = await validateRequest();\n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const body = await request.json();\n    const validatedData = createPlantSchema.parse(body);\n\n    // Validate taxonomy for duplicates\n    const validation = await validatePlantTaxonomy(validatedData);\n    if (!validation.isValid) {\n      return NextResponse.json(\n        { \n          error: 'Validation failed', \n          details: validation.errors,\n          duplicates: validation.duplicates \n        }, \n        { status: 409 }\n      );\n    }\n\n    const newPlant = await createPlant(validatedData, user.id);\n\n    return NextResponse.json({\n      success: true,\n      data: newPlant,\n      metadata: {\n        operation: 'create',\n        timestamp: new Date(),\n        userId: user.id,\n      },\n    }, { status: 201 });\n  } catch (error) {\n    console.error('Error creating plant:', error);\n    \n    if (error instanceof ZodError) {\n      return NextResponse.json(\n        { \n          error: 'Invalid plant data', \n          details: error.issues \n        }, \n        { status: 400 }\n      );\n    }\n\n    return NextResponse.json(\n      { error: 'Internal server error' }, \n      { status: 500 }\n    );\n  }\n}"],"names":["GET","POST","request","user","validateRequest","NextResponse","json","error","status","searchParams","URL","url","filterParams","family","get","undefined","genus","isVerified","createdBy","parseInt","limit","offset","validatedFilter","plantFilterSchema","parse","plants","getPlantsWithStats","id","success","data","metadata","operation","timestamp","Date","userId","console","ZodError","details","issues","body","validatedData","createPlantSchema","validation","validatePlantTaxonomy","isValid","errors","duplicates","newPlant","createPlant"],"mappings":"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"}