{"version":3,"sources":["/Users/stefanbekker/projects/fancy-planties/src/__tests__/components/navigation/AuthGuard.test.js"],"sourcesContent":["/**\n * @jest-environment jsdom\n */\n\nimport React from 'react';\nimport { screen } from '@testing-library/react';\nimport { renderWithProviders } from '@/test-utils/helpers/render-helpers';\nimport AuthGuard from '@/components/auth/AuthGuard';\n\n// Mock Next.js navigation\nconst mockRedirect = jest.fn();\n\njest.mock('next/navigation', () => ({\n  redirect: mockRedirect,\n}));\n\n// Mock auth server functions\njest.mock('@/lib/auth/server', () => ({\n  requireAuthSession: jest.fn(),\n}));\n\n// Import the mocked function\nimport { requireAuthSession } from '@/lib/auth/server';\nconst mockRequireAuthSession = requireAuthSession;\n\ndescribe('AuthGuard', () => {\n  const TestComponent = () => <div data-testid=\"protected-content\">Protected Content</div>;\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('Authentication Success', () => {\n    beforeEach(() => {\n      mockRequireAuthSession.mockResolvedValue({\n        user: { id: 1, email: 'test@example.com' },\n        session: { id: 'session-123' },\n      });\n    });\n\n    it('renders children when user is authenticated', async () => {\n      renderWithProviders(\n        <AuthGuard>\n          <TestComponent />\n        </AuthGuard>\n      );\n\n      expect(screen.getByTestId('protected-content')).toBeInTheDocument();\n      expect(mockRequireAuthSession).toHaveBeenCalled();\n      expect(mockRedirect).not.toHaveBeenCalled();\n    });\n\n    it('passes through multiple children', async () => {\n      renderWithProviders(\n        <AuthGuard>\n          <div data-testid=\"child-1\">Child 1</div>\n          <div data-testid=\"child-2\">Child 2</div>\n          <TestComponent />\n        </AuthGuard>\n      );\n\n      expect(screen.getByTestId('child-1')).toBeInTheDocument();\n      expect(screen.getByTestId('child-2')).toBeInTheDocument();\n      expect(screen.getByTestId('protected-content')).toBeInTheDocument();\n    });\n\n    it('preserves child component props and state', async () => {\n      const ChildWithProps = ({ title, count }) => (\n        <div data-testid=\"child-with-props\">\n          {title}: {count}\n        </div>\n      );\n\n      renderWithProviders(\n        <AuthGuard>\n          <ChildWithProps title=\"Test\" count={42} />\n        </AuthGuard>\n      );\n\n      expect(screen.getByTestId('child-with-props')).toHaveTextContent('Test: 42');\n    });\n  });\n\n  describe('Authentication Failure', () => {\n    beforeEach(() => {\n      mockRequireAuthSession.mockRejectedValue(new Error('Not authenticated'));\n    });\n\n    it('redirects to default sign-in page when authentication fails', async () => {\n      renderWithProviders(\n        <AuthGuard>\n          <TestComponent />\n        </AuthGuard>\n      );\n\n      expect(mockRequireAuthSession).toHaveBeenCalled();\n      expect(mockRedirect).toHaveBeenCalledWith('/auth/signin');\n      expect(screen.queryByTestId('protected-content')).not.toBeInTheDocument();\n    });\n\n    it('redirects to custom redirect URL when provided', async () => {\n      renderWithProviders(\n        <AuthGuard redirectTo=\"/custom-login\">\n          <TestComponent />\n        </AuthGuard>\n      );\n\n      expect(mockRedirect).toHaveBeenCalledWith('/custom-login');\n    });\n\n    it('handles different authentication error types', async () => {\n      const errorTypes = [\n        new Error('Session expired'),\n        new Error('Invalid token'),\n        new Error('User not found'),\n        'String error',\n        null,\n        undefined,\n      ];\n\n      for (const error of errorTypes) {\n        jest.clearAllMocks();\n        mockRequireAuthSession.mockRejectedValue(error);\n\n        renderWithProviders(\n          <AuthGuard>\n            <TestComponent />\n          </AuthGuard>\n        );\n\n        expect(mockRedirect).toHaveBeenCalledWith('/auth/signin');\n      }\n    });\n  });\n\n  describe('Route Protection Scenarios', () => {\n    it('protects admin routes', async () => {\n      mockRequireAuthSession.mockRejectedValue(new Error('Insufficient permissions'));\n\n      renderWithProviders(\n        <AuthGuard redirectTo=\"/auth/signin?redirect=/admin\">\n          <div data-testid=\"admin-panel\">Admin Panel</div>\n        </AuthGuard>\n      );\n\n      expect(mockRedirect).toHaveBeenCalledWith('/auth/signin?redirect=/admin');\n      expect(screen.queryByTestId('admin-panel')).not.toBeInTheDocument();\n    });\n\n    it('protects user dashboard', async () => {\n      mockRequireAuthSession.mockRejectedValue(new Error('Not authenticated'));\n\n      renderWithProviders(\n        <AuthGuard>\n          <div data-testid=\"user-dashboard\">User Dashboard</div>\n        </AuthGuard>\n      );\n\n      expect(mockRedirect).toHaveBeenCalledWith('/auth/signin');\n      expect(screen.queryByTestId('user-dashboard')).not.toBeInTheDocument();\n    });\n\n    it('protects API-dependent components', async () => {\n      mockRequireAuthSession.mockRejectedValue(new Error('Token invalid'));\n\n      const ApiComponent = () => (\n        <div data-testid=\"api-component\">\n          Component that requires API access\n        </div>\n      );\n\n      renderWithProviders(\n        <AuthGuard>\n          <ApiComponent />\n        </AuthGuard>\n      );\n\n      expect(mockRedirect).toHaveBeenCalledWith('/auth/signin');\n      expect(screen.queryByTestId('api-component')).not.toBeInTheDocument();\n    });\n  });\n\n  describe('Session Validation', () => {\n    it('validates session on each render', async () => {\n      mockRequireAuthSession.mockResolvedValue({\n        user: { id: 1, email: 'test@example.com' },\n        session: { id: 'session-123' },\n      });\n\n      const { rerender } = renderWithProviders(\n        <AuthGuard>\n          <TestComponent />\n        </AuthGuard>\n      );\n\n      expect(mockRequireAuthSession).toHaveBeenCalledTimes(1);\n\n      // Re-render should trigger validation again\n      rerender(\n        <AuthGuard>\n          <TestComponent />\n        </AuthGuard>\n      );\n\n      expect(mockRequireAuthSession).toHaveBeenCalledTimes(2);\n    });\n\n    it('handles session expiration during component lifecycle', async () => {\n      // Initially authenticated\n      mockRequireAuthSession.mockResolvedValue({\n        user: { id: 1, email: 'test@example.com' },\n        session: { id: 'session-123' },\n      });\n\n      const { rerender } = renderWithProviders(\n        <AuthGuard>\n          <TestComponent />\n        </AuthGuard>\n      );\n\n      expect(screen.getByTestId('protected-content')).toBeInTheDocument();\n\n      // Session expires\n      mockRequireAuthSession.mockRejectedValue(new Error('Session expired'));\n\n      rerender(\n        <AuthGuard>\n          <TestComponent />\n        </AuthGuard>\n      );\n\n      expect(mockRedirect).toHaveBeenCalledWith('/auth/signin');\n    });\n  });\n\n  describe('Error Handling', () => {\n    it('handles network errors gracefully', async () => {\n      mockRequireAuthSession.mockRejectedValue(new Error('Network error'));\n\n      renderWithProviders(\n        <AuthGuard>\n          <TestComponent />\n        </AuthGuard>\n      );\n\n      expect(mockRedirect).toHaveBeenCalledWith('/auth/signin');\n    });\n\n    it('handles server errors gracefully', async () => {\n      mockRequireAuthSession.mockRejectedValue(new Error('Internal server error'));\n\n      renderWithProviders(\n        <AuthGuard>\n          <TestComponent />\n        </AuthGuard>\n      );\n\n      expect(mockRedirect).toHaveBeenCalledWith('/auth/signin');\n    });\n\n    it('handles malformed responses gracefully', async () => {\n      mockRequireAuthSession.mockRejectedValue(new Error('Invalid response format'));\n\n      renderWithProviders(\n        <AuthGuard>\n          <TestComponent />\n        </AuthGuard>\n      );\n\n      expect(mockRedirect).toHaveBeenCalledWith('/auth/signin');\n    });\n  });\n\n  describe('Integration with Authentication Flow', () => {\n    it('works with sign-in redirect flow', async () => {\n      mockRequireAuthSession.mockRejectedValue(new Error('Not authenticated'));\n\n      renderWithProviders(\n        <AuthGuard redirectTo=\"/auth/signin?redirect=/dashboard/plants\">\n          <div data-testid=\"plants-page\">Plants Page</div>\n        </AuthGuard>\n      );\n\n      expect(mockRedirect).toHaveBeenCalledWith('/auth/signin?redirect=/dashboard/plants');\n    });\n\n    it('preserves query parameters in redirect', async () => {\n      mockRequireAuthSession.mockRejectedValue(new Error('Not authenticated'));\n\n      renderWithProviders(\n        <AuthGuard redirectTo=\"/auth/signin?redirect=/dashboard/care&tab=overdue\">\n          <div data-testid=\"care-page\">Care Page</div>\n        </AuthGuard>\n      );\n\n      expect(mockRedirect).toHaveBeenCalledWith('/auth/signin?redirect=/dashboard/care&tab=overdue');\n    });\n\n    it('handles successful authentication after redirect', async () => {\n      // Simulate successful authentication after redirect\n      mockRequireAuthSession.mockResolvedValue({\n        user: { id: 1, email: 'test@example.com' },\n        session: { id: 'session-123' },\n      });\n\n      renderWithProviders(\n        <AuthGuard>\n          <div data-testid=\"protected-page\">Protected Page</div>\n        </AuthGuard>\n      );\n\n      expect(screen.getByTestId('protected-page')).toBeInTheDocument();\n      expect(mockRedirect).not.toHaveBeenCalled();\n    });\n  });\n\n  describe('Performance Considerations', () => {\n    it('does not cause unnecessary re-renders', async () => {\n      mockRequireAuthSession.mockResolvedValue({\n        user: { id: 1, email: 'test@example.com' },\n        session: { id: 'session-123' },\n      });\n\n      let renderCount = 0;\n      const CountingComponent = () => {\n        renderCount++;\n        return <div data-testid=\"counting-component\">Render count: {renderCount}</div>;\n      };\n\n      renderWithProviders(\n        <AuthGuard>\n          <CountingComponent />\n        </AuthGuard>\n      );\n\n      expect(screen.getByTestId('counting-component')).toHaveTextContent('Render count: 1');\n    });\n\n    it('handles rapid authentication state changes', async () => {\n      // Simulate rapid state changes\n      mockRequireAuthSession\n        .mockResolvedValueOnce({\n          user: { id: 1, email: 'test@example.com' },\n          session: { id: 'session-123' },\n        })\n        .mockRejectedValueOnce(new Error('Session expired'))\n        .mockResolvedValueOnce({\n          user: { id: 1, email: 'test@example.com' },\n          session: { id: 'session-456' },\n        });\n\n      const { rerender } = renderWithProviders(\n        <AuthGuard>\n          <TestComponent />\n        </AuthGuard>\n      );\n\n      // First render - authenticated\n      expect(screen.getByTestId('protected-content')).toBeInTheDocument();\n\n      // Second render - session expired\n      rerender(\n        <AuthGuard>\n          <TestComponent />\n        </AuthGuard>\n      );\n\n      expect(mockRedirect).toHaveBeenCalledWith('/auth/signin');\n\n      // Third render - re-authenticated\n      jest.clearAllMocks();\n      rerender(\n        <AuthGuard>\n          <TestComponent />\n        </AuthGuard>\n      );\n\n      expect(screen.getByTestId('protected-content')).toBeInTheDocument();\n    });\n  });\n\n  describe('Component Composition', () => {\n    it('works with nested components', async () => {\n      mockRequireAuthSession.mockResolvedValue({\n        user: { id: 1, email: 'test@example.com' },\n        session: { id: 'session-123' },\n      });\n\n      const NestedComponent = ({ children }) => (\n        <div data-testid=\"nested-wrapper\">\n          <header>Header</header>\n          {children}\n          <footer>Footer</footer>\n        </div>\n      );\n\n      renderWithProviders(\n        <AuthGuard>\n          <NestedComponent>\n            <TestComponent />\n          </NestedComponent>\n        </AuthGuard>\n      );\n\n      expect(screen.getByTestId('nested-wrapper')).toBeInTheDocument();\n      expect(screen.getByTestId('protected-content')).toBeInTheDocument();\n      expect(screen.getByText('Header')).toBeInTheDocument();\n      expect(screen.getByText('Footer')).toBeInTheDocument();\n    });\n\n    it('works with conditional rendering', async () => {\n      mockRequireAuthSession.mockResolvedValue({\n        user: { id: 1, email: 'test@example.com' },\n        session: { id: 'session-123' },\n      });\n\n      const ConditionalComponent = ({ showContent }) => (\n        <div>\n          {showContent && <TestComponent />}\n          <div data-testid=\"always-visible\">Always visible</div>\n        </div>\n      );\n\n      renderWithProviders(\n        <AuthGuard>\n          <ConditionalComponent showContent={true} />\n        </AuthGuard>\n      );\n\n      expect(screen.getByTestId('protected-content')).toBeInTheDocument();\n      expect(screen.getByTestId('always-visible')).toBeInTheDocument();\n    });\n\n    it('works with React fragments', async () => {\n      mockRequireAuthSession.mockResolvedValue({\n        user: { id: 1, email: 'test@example.com' },\n        session: { id: 'session-123' },\n      });\n\n      renderWithProviders(\n        <AuthGuard>\n          <>\n            <div data-testid=\"fragment-child-1\">Fragment Child 1</div>\n            <TestComponent />\n            <div data-testid=\"fragment-child-2\">Fragment Child 2</div>\n          </>\n        </AuthGuard>\n      );\n\n      expect(screen.getByTestId('fragment-child-1')).toBeInTheDocument();\n      expect(screen.getByTestId('protected-content')).toBeInTheDocument();\n      expect(screen.getByTestId('fragment-child-2')).toBeInTheDocument();\n    });\n  });\n});"],"names":["jest","mock","redirect","mockRedirect","requireAuthSession","fn","mockRequireAuthSession","describe","TestComponent","div","data-testid","beforeEach","clearAllMocks","mockResolvedValue","user","id","email","session","it","renderWithProviders","AuthGuard","expect","screen","getByTestId","toBeInTheDocument","toHaveBeenCalled","not","ChildWithProps","title","count","toHaveTextContent","mockRejectedValue","Error","toHaveBeenCalledWith","queryByTestId","redirectTo","errorTypes","undefined","error","ApiComponent","rerender","toHaveBeenCalledTimes","renderCount","CountingComponent","mockResolvedValueOnce","mockRejectedValueOnce","NestedComponent","children","header","footer","getByText","ConditionalComponent","showContent"],"mappings":"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"}