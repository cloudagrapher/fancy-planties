b6a135aa0b4b7457dd2a3f9a4eae28af
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "CareHistoryQueries", {
    enumerable: true,
    get: function() {
        return CareHistoryQueries;
    }
});
const _db = require("..");
const _schema = require("../schema");
const _drizzleorm = require("drizzle-orm");
const _carecalculator = require("../../services/care-calculator");
const _caretypes = require("../../types/care-types");
class CareHistoryQueries {
    /**
   * Create a new care history entry
   */ static async createCareHistory(data) {
        const [careEntry] = await _db.db.insert(_schema.careHistory).values({
            ...data,
            createdAt: new Date(),
            updatedAt: new Date()
        }).returning();
        return careEntry;
    }
    /**
   * Get care history by ID
   */ static async getCareHistoryById(id) {
        const [careEntry] = await _db.db.select().from(_schema.careHistory).where((0, _drizzleorm.eq)(_schema.careHistory.id, id)).limit(1);
        return careEntry || null;
    }
    /**
   * Get care history for a specific plant instance
   */ static async getCareHistoryForPlant(plantInstanceId, userId, filters) {
        // Build where conditions
        const conditions = [
            (0, _drizzleorm.eq)(_schema.careHistory.plantInstanceId, plantInstanceId),
            (0, _drizzleorm.eq)(_schema.careHistory.userId, userId)
        ];
        if (filters?.careType) {
            conditions.push((0, _drizzleorm.eq)(_schema.careHistory.careType, filters.careType));
        }
        if (filters?.startDate) {
            conditions.push((0, _drizzleorm.gte)(_schema.careHistory.careDate, filters.startDate));
        }
        if (filters?.endDate) {
            conditions.push((0, _drizzleorm.lte)(_schema.careHistory.careDate, filters.endDate));
        }
        // Apply sorting
        const sortField = filters?.sortBy === 'care_type' ? _schema.careHistory.careType : filters?.sortBy === 'created_at' ? _schema.careHistory.createdAt : _schema.careHistory.careDate;
        const sortOrder = filters?.sortOrder === 'asc' ? (0, _drizzleorm.asc)(sortField) : (0, _drizzleorm.desc)(sortField);
        // Build the query
        let query = _db.db.select({
            careHistory: _schema.careHistory,
            plantInstance: _schema.plantInstances,
            plant: _schema.plants
        }).from(_schema.careHistory).leftJoin(_schema.plantInstances, (0, _drizzleorm.eq)(_schema.careHistory.plantInstanceId, _schema.plantInstances.id)).leftJoin(_schema.plants, (0, _drizzleorm.eq)(_schema.plantInstances.plantId, _schema.plants.id)).where((0, _drizzleorm.and)(...conditions)).orderBy(sortOrder);
        // Apply pagination
        if (filters?.limit) {
            query = query.limit(filters.limit);
        }
        if (filters?.offset) {
            query = query.offset(filters.offset);
        }
        const results = await query;
        return results.map((result)=>this.enhanceCareHistory(result.careHistory, result.plantInstance, result.plant));
    }
    /**
   * Get care history for multiple plant instances (for dashboard)
   */ static async getCareHistoryForPlants(plantInstanceIds, userId, filters) {
        if (plantInstanceIds.length === 0) return [];
        // Build where conditions
        const conditions = [
            (0, _drizzleorm.inArray)(_schema.careHistory.plantInstanceId, plantInstanceIds),
            (0, _drizzleorm.eq)(_schema.careHistory.userId, userId)
        ];
        if (filters?.careType) {
            conditions.push((0, _drizzleorm.eq)(_schema.careHistory.careType, filters.careType));
        }
        if (filters?.startDate) {
            conditions.push((0, _drizzleorm.gte)(_schema.careHistory.careDate, filters.startDate));
        }
        if (filters?.endDate) {
            conditions.push((0, _drizzleorm.lte)(_schema.careHistory.careDate, filters.endDate));
        }
        // Apply sorting
        const sortField = filters?.sortBy === 'care_type' ? _schema.careHistory.careType : filters?.sortBy === 'created_at' ? _schema.careHistory.createdAt : _schema.careHistory.careDate;
        const sortOrder = filters?.sortOrder === 'asc' ? (0, _drizzleorm.asc)(sortField) : (0, _drizzleorm.desc)(sortField);
        // Build the query
        let query = _db.db.select({
            careHistory: _schema.careHistory,
            plantInstance: _schema.plantInstances,
            plant: _schema.plants
        }).from(_schema.careHistory).leftJoin(_schema.plantInstances, (0, _drizzleorm.eq)(_schema.careHistory.plantInstanceId, _schema.plantInstances.id)).leftJoin(_schema.plants, (0, _drizzleorm.eq)(_schema.plantInstances.plantId, _schema.plants.id)).where((0, _drizzleorm.and)(...conditions)).orderBy(sortOrder);
        // Apply pagination
        if (filters?.limit) {
            query = query.limit(filters.limit);
        }
        if (filters?.offset) {
            query = query.offset(filters.offset);
        }
        const results = await query;
        return results.map((result)=>this.enhanceCareHistory(result.careHistory, result.plantInstance, result.plant));
    }
    /**
   * Get recent care history for a user
   */ static async getRecentCareHistory(userId, limit = 20) {
        const results = await _db.db.select({
            careHistory: _schema.careHistory,
            plantInstance: _schema.plantInstances,
            plant: _schema.plants
        }).from(_schema.careHistory).leftJoin(_schema.plantInstances, (0, _drizzleorm.eq)(_schema.careHistory.plantInstanceId, _schema.plantInstances.id)).leftJoin(_schema.plants, (0, _drizzleorm.eq)(_schema.plantInstances.plantId, _schema.plants.id)).where((0, _drizzleorm.eq)(_schema.careHistory.userId, userId)).orderBy((0, _drizzleorm.desc)(_schema.careHistory.careDate)).limit(limit);
        return results.map((result)=>this.enhanceCareHistory(result.careHistory, result.plantInstance, result.plant));
    }
    /**
   * Update care history entry
   */ static async updateCareHistory(id, userId, updates) {
        const [updated] = await _db.db.update(_schema.careHistory).set({
            ...updates,
            updatedAt: new Date()
        }).where((0, _drizzleorm.and)((0, _drizzleorm.eq)(_schema.careHistory.id, id), (0, _drizzleorm.eq)(_schema.careHistory.userId, userId))).returning();
        return updated || null;
    }
    /**
   * Delete care history entry
   */ static async deleteCareHistory(id, userId) {
        console.log('Attempting to delete care:', id, 'for user:', userId);
        // First check if record exists
        const existing = await _db.db.select().from(_schema.careHistory).where((0, _drizzleorm.eq)(_schema.careHistory.id, id)).limit(1);
        console.log('Existing record:', existing);
        try {
            const result = await _db.db.delete(_schema.careHistory).where((0, _drizzleorm.and)((0, _drizzleorm.eq)(_schema.careHistory.id, id), (0, _drizzleorm.eq)(_schema.careHistory.userId, userId)));
            console.log('Delete result:', result, 'Length:', result.length);
            // Double check by trying to fetch the record again
            const stillExists = await _db.db.select().from(_schema.careHistory).where((0, _drizzleorm.eq)(_schema.careHistory.id, id)).limit(1);
            console.log('Record still exists after delete:', stillExists.length > 0);
            return result.length > 0;
        } catch (error) {
            console.error('Delete error:', error);
            throw error;
        }
    }
    /**
   * Get care statistics for a plant instance
   */ static async getPlantCareStatistics(plantInstanceId, userId) {
        // Get plant instance
        const [plantInstance] = await _db.db.select().from(_schema.plantInstances).where((0, _drizzleorm.and)((0, _drizzleorm.eq)(_schema.plantInstances.id, plantInstanceId), (0, _drizzleorm.eq)(_schema.plantInstances.userId, userId))).limit(1);
        if (!plantInstance) return null;
        // Get care history
        const careHistoryData = await _db.db.select().from(_schema.careHistory).where((0, _drizzleorm.and)((0, _drizzleorm.eq)(_schema.careHistory.plantInstanceId, plantInstanceId), (0, _drizzleorm.eq)(_schema.careHistory.userId, userId))).orderBy((0, _drizzleorm.asc)(_schema.careHistory.careDate));
        return _carecalculator.CareCalculator.calculatePlantCareStatistics(plantInstance, careHistoryData);
    }
    /**
   * Get care statistics for multiple plants
   */ static async getBulkCareStatistics(plantInstanceIds, userId) {
        if (plantInstanceIds.length === 0) return [];
        // Get plant instances
        const plantInstancesData = await _db.db.select().from(_schema.plantInstances).where((0, _drizzleorm.and)((0, _drizzleorm.inArray)(_schema.plantInstances.id, plantInstanceIds), (0, _drizzleorm.eq)(_schema.plantInstances.userId, userId)));
        // Get care history for all plants
        const careHistoryData = await _db.db.select().from(_schema.careHistory).where((0, _drizzleorm.and)((0, _drizzleorm.inArray)(_schema.careHistory.plantInstanceId, plantInstanceIds), (0, _drizzleorm.eq)(_schema.careHistory.userId, userId))).orderBy((0, _drizzleorm.asc)(_schema.careHistory.careDate));
        // Group care history by plant instance
        const careHistoryByPlant = careHistoryData.reduce((acc, care)=>{
            if (!acc[care.plantInstanceId]) {
                acc[care.plantInstanceId] = [];
            }
            acc[care.plantInstanceId].push(care);
            return acc;
        }, {});
        // Calculate statistics for each plant
        return plantInstancesData.map((plantInstance)=>_carecalculator.CareCalculator.calculatePlantCareStatistics(plantInstance, careHistoryByPlant[plantInstance.id] || []));
    }
    /**
   * Get care dashboard data
   */ static async getCareDashboardData(userId, options = {}) {
        const { includeInactive = false, daysAhead = 7 } = options;
        // Get all plant instances for the user
        const plantInstancesData = await _db.db.select({
            plantInstance: _schema.plantInstances,
            plant: _schema.plants
        }).from(_schema.plantInstances).leftJoin(_schema.plants, (0, _drizzleorm.eq)(_schema.plantInstances.plantId, _schema.plants.id)).where(includeInactive ? (0, _drizzleorm.eq)(_schema.plantInstances.userId, userId) : (0, _drizzleorm.and)((0, _drizzleorm.eq)(_schema.plantInstances.userId, userId), (0, _drizzleorm.eq)(_schema.plantInstances.isActive, true)));
        // Get recent care history for statistics
        const oneWeekAgo = new Date();
        oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);
        const recentCareHistory = await _db.db.select().from(_schema.careHistory).where((0, _drizzleorm.and)((0, _drizzleorm.eq)(_schema.careHistory.userId, userId), (0, _drizzleorm.gte)(_schema.careHistory.careDate, oneWeekAgo)));
        // Enhance plant instances with care calculations
        const enhancedPlants = plantInstancesData.map(({ plantInstance, plant })=>{
            if (!plant) return null;
            const careStatus = _carecalculator.CareCalculator.calculateCareStatus(plantInstance.fertilizerDue);
            const careUrgency = _carecalculator.CareCalculator.calculateCareUrgency(plantInstance.fertilizerDue);
            const daysUntilFertilizerDue = _carecalculator.CareCalculator.calculateDaysUntilFertilizerDue(plantInstance.fertilizerDue);
            const daysSinceLastFertilized = _carecalculator.CareCalculator.calculateDaysSinceLastFertilized(plantInstance.lastFertilized);
            const daysSinceLastRepot = _carecalculator.CareCalculator.calculateDaysSinceLastRepot(plantInstance.lastRepot);
            const displayName = plantInstance.nickname || plant.commonName;
            const primaryImage = plantInstance.images?.[0] || plant.defaultImage || null;
            return {
                ...plantInstance,
                plant,
                careStatus,
                careUrgency,
                daysUntilFertilizerDue,
                daysSinceLastFertilized,
                daysSinceLastRepot,
                displayName,
                primaryImage
            };
        }).filter((plant)=>plant !== null);
        // Categorize plants by care status
        const overdue = enhancedPlants.filter((p)=>p.careStatus === 'overdue');
        const dueToday = enhancedPlants.filter((p)=>p.careStatus === 'due_today');
        const dueSoon = enhancedPlants.filter((p)=>p.careStatus === 'due_soon');
        // Get recently cared plants (fertilized in last 3 days)
        const threeDaysAgo = new Date();
        threeDaysAgo.setDate(threeDaysAgo.getDate() - 3);
        const recentlyCared = enhancedPlants.filter((p)=>p.lastFertilized && p.lastFertilized >= threeDaysAgo);
        // Calculate care streak (consecutive days with proper care)
        const careStreakDays = this.calculateUserCareStreak(userId, recentCareHistory);
        // Calculate average care consistency across all plants
        const averageCareConsistency = enhancedPlants.length > 0 ? enhancedPlants.reduce((sum, plant)=>{
            // Simplified consistency calculation for dashboard
            const daysSince = plant.daysSinceLastFertilized || 0;
            const scheduleDays = _caretypes.careHelpers.parseFertilizerSchedule(plant.fertilizerSchedule);
            const consistency = Math.max(0, 100 - daysSince / scheduleDays * 50);
            return sum + consistency;
        }, 0) / enhancedPlants.length : 0;
        return {
            overdue,
            dueToday,
            dueSoon,
            recentlyCared,
            statistics: {
                totalActivePlants: enhancedPlants.length,
                overdueCount: overdue.length,
                dueTodayCount: dueToday.length,
                dueSoonCount: dueSoon.length,
                careStreakDays,
                totalCareEventsThisWeek: recentCareHistory.length,
                averageCareConsistency: Math.round(averageCareConsistency)
            },
            quickActions: _caretypes.careHelpers.getDefaultQuickCareActions()
        };
    }
    /**
   * Get care history count for a plant instance
   */ static async getCareHistoryCount(plantInstanceId, userId, careType) {
        const conditions = [
            (0, _drizzleorm.eq)(_schema.careHistory.plantInstanceId, plantInstanceId),
            (0, _drizzleorm.eq)(_schema.careHistory.userId, userId)
        ];
        if (careType) {
            conditions.push((0, _drizzleorm.eq)(_schema.careHistory.careType, careType));
        }
        const [result] = await _db.db.select({
            count: (0, _drizzleorm.count)()
        }).from(_schema.careHistory).where((0, _drizzleorm.and)(...conditions));
        return result.count;
    }
    /**
   * Get last care date for a specific care type
   */ static async getLastCareDate(plantInstanceId, userId, careType) {
        const [result] = await _db.db.select({
            careDate: _schema.careHistory.careDate
        }).from(_schema.careHistory).where((0, _drizzleorm.and)((0, _drizzleorm.eq)(_schema.careHistory.plantInstanceId, plantInstanceId), (0, _drizzleorm.eq)(_schema.careHistory.userId, userId), (0, _drizzleorm.eq)(_schema.careHistory.careType, careType))).orderBy((0, _drizzleorm.desc)(_schema.careHistory.careDate)).limit(1);
        return result?.careDate || null;
    }
    /**
   * Bulk create care history entries
   */ static async bulkCreateCareHistory(entries) {
        if (entries.length === 0) return [];
        const entriesWithTimestamps = entries.map((entry)=>({
                ...entry,
                createdAt: new Date(),
                updatedAt: new Date()
            }));
        return await _db.db.insert(_schema.careHistory).values(entriesWithTimestamps).returning();
    }
    /**
   * Private helper to enhance care history with computed properties
   */ static enhanceCareHistory(care, plantInstance, plant) {
        const now = new Date();
        const daysSinceCare = Math.floor((now.getTime() - care.careDate.getTime()) / (1000 * 60 * 60 * 24));
        const formattedDate = _caretypes.careHelpers.formatCareDate(care.careDate);
        const careTypeDisplay = _caretypes.careHelpers.getCareTypeDisplay(care.careType);
        return {
            ...care,
            plantInstance: plantInstance && plant ? {
                ...plantInstance,
                plant
            } : undefined,
            daysSinceCare,
            formattedDate,
            careTypeDisplay
        };
    }
    /**
   * Private helper to calculate user care streak
   */ static calculateUserCareStreak(userId, recentCareHistory) {
        // Simplified care streak calculation
        // Count consecutive days with at least one care event
        const careByDate = recentCareHistory.reduce((acc, care)=>{
            const dateKey = care.careDate.toISOString().split('T')[0];
            acc[dateKey] = true;
            return acc;
        }, {});
        let streak = 0;
        const today = new Date();
        for(let i = 0; i < 30; i++){
            const checkDate = new Date(today);
            checkDate.setDate(checkDate.getDate() - i);
            const dateKey = checkDate.toISOString().split('T')[0];
            if (careByDate[dateKey]) {
                streak++;
            } else if (i > 0) {
                break;
            }
        }
        return streak;
    }
}

//# sourceMappingURL=data:application/json;base64,