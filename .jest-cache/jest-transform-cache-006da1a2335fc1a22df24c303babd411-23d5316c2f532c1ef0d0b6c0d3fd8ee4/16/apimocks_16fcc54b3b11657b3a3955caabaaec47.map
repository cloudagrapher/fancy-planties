{"version":3,"sources":["/Users/stefanbekker/projects/fancy-planties/src/test-utils/mocks/api-mocks.js"],"sourcesContent":["// API mocking utilities\n\n/**\n * Mock API endpoints for the plant tracker application\n */\n\n/**\n * Mock authentication API endpoints\n */\nexport const mockAuthAPI = () => {\n  const authResponses = {\n    'POST /api/auth/signin': {\n      success: true,\n      user: {\n        id: 1,\n        email: 'test@example.com',\n        name: 'Test User',\n        isCurator: false,\n      },\n      session: {\n        id: 'mock-session-id',\n        userId: 1,\n        expiresAt: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000),\n      },\n    },\n    'POST /api/auth/signup': {\n      success: true,\n      user: {\n        id: 2,\n        email: 'newuser@example.com',\n        name: 'New User',\n        isCurator: false,\n      },\n      session: {\n        id: 'mock-session-id-2',\n        userId: 2,\n        expiresAt: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000),\n      },\n    },\n    'POST /api/auth/logout': {\n      success: true,\n      message: 'Logged out successfully',\n    },\n    'GET /api/auth/me': {\n      success: true,\n      user: {\n        id: 1,\n        email: 'test@example.com',\n        name: 'Test User',\n        isCurator: false,\n      },\n    },\n  };\n\n  return authResponses;\n};\n\n/**\n * Mock plant management API endpoints\n */\nexport const mockPlantAPI = () => {\n  const plantResponses = {\n    'GET /api/plants': {\n      success: true,\n      data: [\n        {\n          id: 1,\n          family: 'Araceae',\n          genus: 'Monstera',\n          species: 'deliciosa',\n          commonName: 'Swiss Cheese Plant',\n          isVerified: true,\n        },\n        {\n          id: 2,\n          family: 'Ficus',\n          genus: 'Ficus',\n          species: 'elastica',\n          commonName: 'Rubber Plant',\n          isVerified: true,\n        },\n      ],\n      pagination: {\n        page: 1,\n        limit: 10,\n        total: 2,\n        totalPages: 1,\n      },\n    },\n    'GET /api/plant-instances': {\n      success: true,\n      data: [\n        {\n          id: 1,\n          userId: 1,\n          plantId: 1,\n          nickname: 'My Monstera',\n          location: 'Living Room',\n          fertilizerSchedule: 'monthly',\n          isActive: true,\n          plant: {\n            id: 1,\n            commonName: 'Swiss Cheese Plant',\n            family: 'Araceae',\n          },\n        },\n      ],\n    },\n    'POST /api/plant-instances': {\n      success: true,\n      data: {\n        id: 3,\n        userId: 1,\n        plantId: 1,\n        nickname: 'New Plant',\n        location: 'Bedroom',\n        fertilizerSchedule: 'weekly',\n        isActive: true,\n      },\n    },\n    'PUT /api/plant-instances/1': {\n      success: true,\n      data: {\n        id: 1,\n        userId: 1,\n        plantId: 1,\n        nickname: 'Updated Monstera',\n        location: 'Kitchen',\n        fertilizerSchedule: 'bi-weekly',\n        isActive: true,\n      },\n    },\n    'DELETE /api/plant-instances/1': {\n      success: true,\n      message: 'Plant instance deleted successfully',\n    },\n  };\n\n  return plantResponses;\n};\n\n/**\n * Mock care tracking API endpoints\n */\nexport const mockCareAPI = () => {\n  const careResponses = {\n    'GET /api/care': {\n      success: true,\n      data: [\n        {\n          id: 1,\n          userId: 1,\n          plantInstanceId: 1,\n          careType: 'water',\n          careDate: new Date().toISOString(),\n          notes: 'Watered thoroughly',\n        },\n        {\n          id: 2,\n          userId: 1,\n          plantInstanceId: 1,\n          careType: 'fertilizer',\n          careDate: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString(),\n          notes: 'Applied liquid fertilizer',\n          fertilizerType: 'Balanced liquid fertilizer',\n        },\n      ],\n    },\n    'POST /api/care': {\n      success: true,\n      data: {\n        id: 3,\n        userId: 1,\n        plantInstanceId: 1,\n        careType: 'water',\n        careDate: new Date().toISOString(),\n        notes: 'New care record',\n      },\n    },\n    'GET /api/dashboard': {\n      success: true,\n      data: {\n        totalPlants: 5,\n        activePlants: 4,\n        careTasksDue: 2,\n        recentCareEvents: 8,\n        careStatistics: {\n          thisWeek: 3,\n          thisMonth: 12,\n          totalCareEvents: 45,\n        },\n        upcomingTasks: [\n          {\n            id: 1,\n            plantInstanceId: 1,\n            plantNickname: 'My Monstera',\n            taskType: 'fertilizer',\n            dueDate: new Date(Date.now() + 2 * 24 * 60 * 60 * 1000).toISOString(),\n            isOverdue: false,\n          },\n        ],\n      },\n    },\n  };\n\n  return careResponses;\n};\n\n/**\n * Mock propagation API endpoints\n */\nexport const mockPropagationAPI = () => {\n  const propagationResponses = {\n    'GET /api/propagations': {\n      success: true,\n      data: [\n        {\n          id: 1,\n          userId: 1,\n          plantId: 1,\n          parentInstanceId: 1,\n          nickname: 'Monstera Cutting',\n          location: 'Propagation Station',\n          status: 'rooting',\n          sourceType: 'internal',\n          dateStarted: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString(),\n        },\n      ],\n    },\n    'POST /api/propagations': {\n      success: true,\n      data: {\n        id: 2,\n        userId: 1,\n        plantId: 1,\n        nickname: 'New Cutting',\n        location: 'Windowsill',\n        status: 'started',\n        sourceType: 'internal',\n        dateStarted: new Date().toISOString(),\n      },\n    },\n    'PUT /api/propagations/1': {\n      success: true,\n      data: {\n        id: 1,\n        userId: 1,\n        plantId: 1,\n        nickname: 'Updated Cutting',\n        status: 'planted',\n      },\n    },\n  };\n\n  return propagationResponses;\n};\n\n/**\n * Mock search API endpoints\n */\nexport const mockSearchAPI = () => {\n  const searchResponses = {\n    'GET /api/search': {\n      success: true,\n      data: {\n        plants: [\n          {\n            id: 1,\n            commonName: 'Swiss Cheese Plant',\n            family: 'Araceae',\n            genus: 'Monstera',\n            species: 'deliciosa',\n          },\n        ],\n        plantInstances: [\n          {\n            id: 1,\n            nickname: 'My Monstera',\n            location: 'Living Room',\n            plant: {\n              commonName: 'Swiss Cheese Plant',\n            },\n          },\n        ],\n        careRecords: [\n          {\n            id: 1,\n            careType: 'water',\n            careDate: new Date().toISOString(),\n            plantInstance: {\n              nickname: 'My Monstera',\n            },\n          },\n        ],\n      },\n    },\n  };\n\n  return searchResponses;\n};\n\n/**\n * Mock data import API endpoints\n */\nexport const mockImportAPI = () => {\n  const importResponses = {\n    'POST /api/import/csv': {\n      success: true,\n      data: {\n        importId: 'import-123',\n        status: 'processing',\n        totalRows: 10,\n        processedRows: 0,\n        errors: [],\n      },\n    },\n    'GET /api/import/status/import-123': {\n      success: true,\n      data: {\n        importId: 'import-123',\n        status: 'completed',\n        totalRows: 10,\n        processedRows: 10,\n        successfulRows: 9,\n        errors: [\n          {\n            row: 5,\n            error: 'Invalid plant species',\n            data: { commonName: 'Unknown Plant' },\n          },\n        ],\n      },\n    },\n    'GET /api/import/history': {\n      success: true,\n      data: [\n        {\n          id: 'import-123',\n          fileName: 'plants.csv',\n          status: 'completed',\n          totalRows: 10,\n          successfulRows: 9,\n          createdAt: new Date().toISOString(),\n        },\n      ],\n    },\n  };\n\n  return importResponses;\n};\n\n/**\n * Mock user profile API endpoints\n */\nexport const mockUserAPI = () => {\n  const userResponses = {\n    'GET /api/user/profile': {\n      success: true,\n      data: {\n        id: 1,\n        email: 'test@example.com',\n        name: 'Test User',\n        isCurator: false,\n        isEmailVerified: true,\n        createdAt: new Date().toISOString(),\n      },\n    },\n    'PUT /api/user/profile': {\n      success: true,\n      data: {\n        id: 1,\n        email: 'test@example.com',\n        name: 'Updated User',\n        isCurator: false,\n        isEmailVerified: true,\n      },\n    },\n    'POST /api/user/change-password': {\n      success: true,\n      message: 'Password changed successfully',\n    },\n  };\n\n  return userResponses;\n};\n\n/**\n * Get all API mock responses\n */\nexport const getAllAPIMocks = () => {\n  return {\n    ...mockAuthAPI(),\n    ...mockPlantAPI(),\n    ...mockCareAPI(),\n    ...mockPropagationAPI(),\n    ...mockSearchAPI(),\n    ...mockImportAPI(),\n    ...mockUserAPI(),\n  };\n};\n\n/**\n * Mock API error responses\n */\nexport const mockAPIErrors = () => {\n  return {\n    'POST /api/auth/signin': {\n      status: 401,\n      success: false,\n      error: 'Invalid credentials',\n    },\n    'POST /api/auth/signup': {\n      status: 409,\n      success: false,\n      error: 'User already exists',\n    },\n    'GET /api/plant-instances': {\n      status: 401,\n      success: false,\n      error: 'Authentication required',\n    },\n    'POST /api/plant-instances': {\n      status: 400,\n      success: false,\n      error: 'Validation failed',\n      details: [\n        {\n          field: 'nickname',\n          message: 'Nickname is required',\n        },\n      ],\n    },\n  };\n};\n\n/**\n * Apply all API mocks\n * @param {Object} customResponses - Custom response overrides\n */\nexport const applyAllAPIMocks = (customResponses = {}) => {\n  const { mockApiResponse } = require('../helpers/api-helpers');\n  \n  const allResponses = {\n    ...getAllAPIMocks(),\n    ...customResponses,\n  };\n  \n  mockApiResponse(allResponses);\n  \n  return allResponses;\n};\n\n/**\n * Apply API error mocks\n * @param {Object} customErrors - Custom error overrides\n */\nexport const applyAPIErrorMocks = (customErrors = {}) => {\n  const { mockApiResponse } = require('../helpers/api-helpers');\n  \n  const allErrors = {\n    ...mockAPIErrors(),\n    ...customErrors,\n  };\n  \n  mockApiResponse(allErrors);\n  \n  return allErrors;\n};"],"names":["applyAPIErrorMocks","applyAllAPIMocks","getAllAPIMocks","mockAPIErrors","mockAuthAPI","mockCareAPI","mockImportAPI","mockPlantAPI","mockPropagationAPI","mockSearchAPI","mockUserAPI","authResponses","success","user","id","email","name","isCurator","session","userId","expiresAt","Date","now","message","plantResponses","data","family","genus","species","commonName","isVerified","pagination","page","limit","total","totalPages","plantId","nickname","location","fertilizerSchedule","isActive","plant","careResponses","plantInstanceId","careType","careDate","toISOString","notes","fertilizerType","totalPlants","activePlants","careTasksDue","recentCareEvents","careStatistics","thisWeek","thisMonth","totalCareEvents","upcomingTasks","plantNickname","taskType","dueDate","isOverdue","propagationResponses","parentInstanceId","status","sourceType","dateStarted","searchResponses","plants","plantInstances","careRecords","plantInstance","importResponses","importId","totalRows","processedRows","errors","successfulRows","row","error","fileName","createdAt","userResponses","isEmailVerified","details","field","customResponses","mockApiResponse","require","allResponses","customErrors","allErrors"],"mappings":"AAAA,wBAAwB;AAExB;;CAEC,GAED;;CAEC;;;;;;;;;;;QAgcYA;eAAAA;;QAjBAC;eAAAA;;QAlDAC;eAAAA;;QAeAC;eAAAA;;QA3YAC;eAAAA;;QAuIAC;eAAAA;;QAgKAC;eAAAA;;QApPAC;eAAAA;;QAuJAC;eAAAA;;QAiDAC;eAAAA;;QA8FAC;eAAAA;;;AAzVN,MAAMN,cAAc;IACzB,MAAMO,gBAAgB;QACpB,yBAAyB;YACvBC,SAAS;YACTC,MAAM;gBACJC,IAAI;gBACJC,OAAO;gBACPC,MAAM;gBACNC,WAAW;YACb;YACAC,SAAS;gBACPJ,IAAI;gBACJK,QAAQ;gBACRC,WAAW,IAAIC,KAAKA,KAAKC,GAAG,KAAK,KAAK,KAAK,KAAK,KAAK;YACvD;QACF;QACA,yBAAyB;YACvBV,SAAS;YACTC,MAAM;gBACJC,IAAI;gBACJC,OAAO;gBACPC,MAAM;gBACNC,WAAW;YACb;YACAC,SAAS;gBACPJ,IAAI;gBACJK,QAAQ;gBACRC,WAAW,IAAIC,KAAKA,KAAKC,GAAG,KAAK,KAAK,KAAK,KAAK,KAAK;YACvD;QACF;QACA,yBAAyB;YACvBV,SAAS;YACTW,SAAS;QACX;QACA,oBAAoB;YAClBX,SAAS;YACTC,MAAM;gBACJC,IAAI;gBACJC,OAAO;gBACPC,MAAM;gBACNC,WAAW;YACb;QACF;IACF;IAEA,OAAON;AACT;AAKO,MAAMJ,eAAe;IAC1B,MAAMiB,iBAAiB;QACrB,mBAAmB;YACjBZ,SAAS;YACTa,MAAM;gBACJ;oBACEX,IAAI;oBACJY,QAAQ;oBACRC,OAAO;oBACPC,SAAS;oBACTC,YAAY;oBACZC,YAAY;gBACd;gBACA;oBACEhB,IAAI;oBACJY,QAAQ;oBACRC,OAAO;oBACPC,SAAS;oBACTC,YAAY;oBACZC,YAAY;gBACd;aACD;YACDC,YAAY;gBACVC,MAAM;gBACNC,OAAO;gBACPC,OAAO;gBACPC,YAAY;YACd;QACF;QACA,4BAA4B;YAC1BvB,SAAS;YACTa,MAAM;gBACJ;oBACEX,IAAI;oBACJK,QAAQ;oBACRiB,SAAS;oBACTC,UAAU;oBACVC,UAAU;oBACVC,oBAAoB;oBACpBC,UAAU;oBACVC,OAAO;wBACL3B,IAAI;wBACJe,YAAY;wBACZH,QAAQ;oBACV;gBACF;aACD;QACH;QACA,6BAA6B;YAC3Bd,SAAS;YACTa,MAAM;gBACJX,IAAI;gBACJK,QAAQ;gBACRiB,SAAS;gBACTC,UAAU;gBACVC,UAAU;gBACVC,oBAAoB;gBACpBC,UAAU;YACZ;QACF;QACA,8BAA8B;YAC5B5B,SAAS;YACTa,MAAM;gBACJX,IAAI;gBACJK,QAAQ;gBACRiB,SAAS;gBACTC,UAAU;gBACVC,UAAU;gBACVC,oBAAoB;gBACpBC,UAAU;YACZ;QACF;QACA,iCAAiC;YAC/B5B,SAAS;YACTW,SAAS;QACX;IACF;IAEA,OAAOC;AACT;AAKO,MAAMnB,cAAc;IACzB,MAAMqC,gBAAgB;QACpB,iBAAiB;YACf9B,SAAS;YACTa,MAAM;gBACJ;oBACEX,IAAI;oBACJK,QAAQ;oBACRwB,iBAAiB;oBACjBC,UAAU;oBACVC,UAAU,IAAIxB,OAAOyB,WAAW;oBAChCC,OAAO;gBACT;gBACA;oBACEjC,IAAI;oBACJK,QAAQ;oBACRwB,iBAAiB;oBACjBC,UAAU;oBACVC,UAAU,IAAIxB,KAAKA,KAAKC,GAAG,KAAK,IAAI,KAAK,KAAK,KAAK,MAAMwB,WAAW;oBACpEC,OAAO;oBACPC,gBAAgB;gBAClB;aACD;QACH;QACA,kBAAkB;YAChBpC,SAAS;YACTa,MAAM;gBACJX,IAAI;gBACJK,QAAQ;gBACRwB,iBAAiB;gBACjBC,UAAU;gBACVC,UAAU,IAAIxB,OAAOyB,WAAW;gBAChCC,OAAO;YACT;QACF;QACA,sBAAsB;YACpBnC,SAAS;YACTa,MAAM;gBACJwB,aAAa;gBACbC,cAAc;gBACdC,cAAc;gBACdC,kBAAkB;gBAClBC,gBAAgB;oBACdC,UAAU;oBACVC,WAAW;oBACXC,iBAAiB;gBACnB;gBACAC,eAAe;oBACb;wBACE3C,IAAI;wBACJ6B,iBAAiB;wBACjBe,eAAe;wBACfC,UAAU;wBACVC,SAAS,IAAIvC,KAAKA,KAAKC,GAAG,KAAK,IAAI,KAAK,KAAK,KAAK,MAAMwB,WAAW;wBACnEe,WAAW;oBACb;iBACD;YACH;QACF;IACF;IAEA,OAAOnB;AACT;AAKO,MAAMlC,qBAAqB;IAChC,MAAMsD,uBAAuB;QAC3B,yBAAyB;YACvBlD,SAAS;YACTa,MAAM;gBACJ;oBACEX,IAAI;oBACJK,QAAQ;oBACRiB,SAAS;oBACT2B,kBAAkB;oBAClB1B,UAAU;oBACVC,UAAU;oBACV0B,QAAQ;oBACRC,YAAY;oBACZC,aAAa,IAAI7C,KAAKA,KAAKC,GAAG,KAAK,KAAK,KAAK,KAAK,KAAK,MAAMwB,WAAW;gBAC1E;aACD;QACH;QACA,0BAA0B;YACxBlC,SAAS;YACTa,MAAM;gBACJX,IAAI;gBACJK,QAAQ;gBACRiB,SAAS;gBACTC,UAAU;gBACVC,UAAU;gBACV0B,QAAQ;gBACRC,YAAY;gBACZC,aAAa,IAAI7C,OAAOyB,WAAW;YACrC;QACF;QACA,2BAA2B;YACzBlC,SAAS;YACTa,MAAM;gBACJX,IAAI;gBACJK,QAAQ;gBACRiB,SAAS;gBACTC,UAAU;gBACV2B,QAAQ;YACV;QACF;IACF;IAEA,OAAOF;AACT;AAKO,MAAMrD,gBAAgB;IAC3B,MAAM0D,kBAAkB;QACtB,mBAAmB;YACjBvD,SAAS;YACTa,MAAM;gBACJ2C,QAAQ;oBACN;wBACEtD,IAAI;wBACJe,YAAY;wBACZH,QAAQ;wBACRC,OAAO;wBACPC,SAAS;oBACX;iBACD;gBACDyC,gBAAgB;oBACd;wBACEvD,IAAI;wBACJuB,UAAU;wBACVC,UAAU;wBACVG,OAAO;4BACLZ,YAAY;wBACd;oBACF;iBACD;gBACDyC,aAAa;oBACX;wBACExD,IAAI;wBACJ8B,UAAU;wBACVC,UAAU,IAAIxB,OAAOyB,WAAW;wBAChCyB,eAAe;4BACblC,UAAU;wBACZ;oBACF;iBACD;YACH;QACF;IACF;IAEA,OAAO8B;AACT;AAKO,MAAM7D,gBAAgB;IAC3B,MAAMkE,kBAAkB;QACtB,wBAAwB;YACtB5D,SAAS;YACTa,MAAM;gBACJgD,UAAU;gBACVT,QAAQ;gBACRU,WAAW;gBACXC,eAAe;gBACfC,QAAQ,EAAE;YACZ;QACF;QACA,qCAAqC;YACnChE,SAAS;YACTa,MAAM;gBACJgD,UAAU;gBACVT,QAAQ;gBACRU,WAAW;gBACXC,eAAe;gBACfE,gBAAgB;gBAChBD,QAAQ;oBACN;wBACEE,KAAK;wBACLC,OAAO;wBACPtD,MAAM;4BAAEI,YAAY;wBAAgB;oBACtC;iBACD;YACH;QACF;QACA,2BAA2B;YACzBjB,SAAS;YACTa,MAAM;gBACJ;oBACEX,IAAI;oBACJkE,UAAU;oBACVhB,QAAQ;oBACRU,WAAW;oBACXG,gBAAgB;oBAChBI,WAAW,IAAI5D,OAAOyB,WAAW;gBACnC;aACD;QACH;IACF;IAEA,OAAO0B;AACT;AAKO,MAAM9D,cAAc;IACzB,MAAMwE,gBAAgB;QACpB,yBAAyB;YACvBtE,SAAS;YACTa,MAAM;gBACJX,IAAI;gBACJC,OAAO;gBACPC,MAAM;gBACNC,WAAW;gBACXkE,iBAAiB;gBACjBF,WAAW,IAAI5D,OAAOyB,WAAW;YACnC;QACF;QACA,yBAAyB;YACvBlC,SAAS;YACTa,MAAM;gBACJX,IAAI;gBACJC,OAAO;gBACPC,MAAM;gBACNC,WAAW;gBACXkE,iBAAiB;YACnB;QACF;QACA,kCAAkC;YAChCvE,SAAS;YACTW,SAAS;QACX;IACF;IAEA,OAAO2D;AACT;AAKO,MAAMhF,iBAAiB;IAC5B,OAAO;QACL,GAAGE,aAAa;QAChB,GAAGG,cAAc;QACjB,GAAGF,aAAa;QAChB,GAAGG,oBAAoB;QACvB,GAAGC,eAAe;QAClB,GAAGH,eAAe;QAClB,GAAGI,aAAa;IAClB;AACF;AAKO,MAAMP,gBAAgB;IAC3B,OAAO;QACL,yBAAyB;YACvB6D,QAAQ;YACRpD,SAAS;YACTmE,OAAO;QACT;QACA,yBAAyB;YACvBf,QAAQ;YACRpD,SAAS;YACTmE,OAAO;QACT;QACA,4BAA4B;YAC1Bf,QAAQ;YACRpD,SAAS;YACTmE,OAAO;QACT;QACA,6BAA6B;YAC3Bf,QAAQ;YACRpD,SAAS;YACTmE,OAAO;YACPK,SAAS;gBACP;oBACEC,OAAO;oBACP9D,SAAS;gBACX;aACD;QACH;IACF;AACF;AAMO,MAAMtB,mBAAmB,CAACqF,kBAAkB,CAAC,CAAC;IACnD,MAAM,EAAEC,eAAe,EAAE,GAAGC,QAAQ;IAEpC,MAAMC,eAAe;QACnB,GAAGvF,gBAAgB;QACnB,GAAGoF,eAAe;IACpB;IAEAC,gBAAgBE;IAEhB,OAAOA;AACT;AAMO,MAAMzF,qBAAqB,CAAC0F,eAAe,CAAC,CAAC;IAClD,MAAM,EAAEH,eAAe,EAAE,GAAGC,QAAQ;IAEpC,MAAMG,YAAY;QAChB,GAAGxF,eAAe;QAClB,GAAGuF,YAAY;IACjB;IAEAH,gBAAgBI;IAEhB,OAAOA;AACT"}