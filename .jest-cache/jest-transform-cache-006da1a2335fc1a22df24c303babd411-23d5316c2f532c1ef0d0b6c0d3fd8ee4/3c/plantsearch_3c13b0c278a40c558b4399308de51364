0a4a04fea47026a0488e9a4b2cca4ba3
"use strict";

/* istanbul ignore next */
function cov_2i6bs01ag9() {
  var path = "/Users/stefanbekker/projects/fancy-planties/src/lib/services/plant-search.ts";
  var hash = "1d4c61513a13d04480a364bef532abd1b773da22";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/stefanbekker/projects/fancy-planties/src/lib/services/plant-search.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 21,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 34
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 34
        }
      },
      "6": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 27
        }
      },
      "7": {
        start: {
          line: 22,
          column: 28
        },
        end: {
          line: 22,
          column: 72
        }
      },
      "8": {
        start: {
          line: 23,
          column: 23
        },
        end: {
          line: 23,
          column: 62
        }
      },
      "9": {
        start: {
          line: 25,
          column: 4
        },
        end: {
          line: 27,
          column: 6
        }
      },
      "10": {
        start: {
          line: 30,
          column: 28
        },
        end: {
          line: 55,
          column: 1
        }
      },
      "11": {
        start: {
          line: 58,
          column: 8
        },
        end: {
          line: 58,
          column: 29
        }
      },
      "12": {
        start: {
          line: 59,
          column: 8
        },
        end: {
          line: 59,
          column: 33
        }
      },
      "13": {
        start: {
          line: 60,
          column: 8
        },
        end: {
          line: 60,
          column: 28
        }
      },
      "14": {
        start: {
          line: 61,
          column: 8
        },
        end: {
          line: 61,
          column: 31
        }
      },
      "15": {
        start: {
          line: 62,
          column: 8
        },
        end: {
          line: 62,
          column: 42
        }
      },
      "16": {
        start: {
          line: 66,
          column: 8
        },
        end: {
          line: 66,
          column: 32
        }
      },
      "17": {
        start: {
          line: 67,
          column: 8
        },
        end: {
          line: 74,
          column: 11
        }
      },
      "18": {
        start: {
          line: 70,
          column: 66
        },
        end: {
          line: 73,
          column: 17
        }
      },
      "19": {
        start: {
          line: 75,
          column: 8
        },
        end: {
          line: 75,
          column: 37
        }
      },
      "20": {
        start: {
          line: 79,
          column: 8
        },
        end: {
          line: 79,
          column: 64
        }
      },
      "21": {
        start: {
          line: 79,
          column: 52
        },
        end: {
          line: 79,
          column: 64
        }
      },
      "22": {
        start: {
          line: 80,
          column: 8
        },
        end: {
          line: 80,
          column: 74
        }
      },
      "23": {
        start: {
          line: 84,
          column: 8
        },
        end: {
          line: 86,
          column: 9
        }
      },
      "24": {
        start: {
          line: 85,
          column: 12
        },
        end: {
          line: 85,
          column: 22
        }
      },
      "25": {
        start: {
          line: 87,
          column: 24
        },
        end: {
          line: 89,
          column: 10
        }
      },
      "26": {
        start: {
          line: 90,
          column: 8
        },
        end: {
          line: 101,
          column: 16
        }
      },
      "27": {
        start: {
          line: 90,
          column: 38
        },
        end: {
          line: 101,
          column: 13
        }
      },
      "28": {
        start: {
          line: 93,
          column: 55
        },
        end: {
          line: 100,
          column: 21
        }
      },
      "29": {
        start: {
          line: 96,
          column: 68
        },
        end: {
          line: 99,
          column: 29
        }
      },
      "30": {
        start: {
          line: 105,
          column: 26
        },
        end: {
          line: 105,
          column: 36
        }
      },
      "31": {
        start: {
          line: 107,
          column: 26
        },
        end: {
          line: 107,
          column: 87
        }
      },
      "32": {
        start: {
          line: 109,
          column: 8
        },
        end: {
          line: 123,
          column: 9
        }
      },
      "33": {
        start: {
          line: 111,
          column: 12
        },
        end: {
          line: 113,
          column: 13
        }
      },
      "34": {
        start: {
          line: 112,
          column: 16
        },
        end: {
          line: 112,
          column: 61
        }
      },
      "35": {
        start: {
          line: 115,
          column: 33
        },
        end: {
          line: 115,
          column: 89
        }
      },
      "36": {
        start: {
          line: 117,
          column: 34
        },
        end: {
          line: 117,
          column: 89
        }
      },
      "37": {
        start: {
          line: 118,
          column: 12
        },
        end: {
          line: 122,
          column: 14
        }
      },
      "38": {
        start: {
          line: 124,
          column: 8
        },
        end: {
          line: 127,
          column: 10
        }
      },
      "39": {
        start: {
          line: 131,
          column: 26
        },
        end: {
          line: 131,
          column: 35
        }
      },
      "40": {
        start: {
          line: 133,
          column: 8
        },
        end: {
          line: 138,
          column: 11
        }
      },
      "41": {
        start: {
          line: 134,
          column: 12
        },
        end: {
          line: 137,
          column: 15
        }
      },
      "42": {
        start: {
          line: 140,
          column: 8
        },
        end: {
          line: 154,
          column: 11
        }
      },
      "43": {
        start: {
          line: 141,
          column: 29
        },
        end: {
          line: 141,
          column: 63
        }
      },
      "44": {
        start: {
          line: 142,
          column: 12
        },
        end: {
          line: 153,
          column: 13
        }
      },
      "45": {
        start: {
          line: 144,
          column: 16
        },
        end: {
          line: 144,
          column: 102
        }
      },
      "46": {
        start: {
          line: 145,
          column: 16
        },
        end: {
          line: 145,
          column: 79
        }
      },
      "47": {
        start: {
          line: 145,
          column: 70
        },
        end: {
          line: 145,
          column: 77
        }
      },
      "48": {
        start: {
          line: 148,
          column: 16
        },
        end: {
          line: 152,
          column: 19
        }
      },
      "49": {
        start: {
          line: 151,
          column: 64
        },
        end: {
          line: 151,
          column: 71
        }
      },
      "50": {
        start: {
          line: 156,
          column: 8
        },
        end: {
          line: 159,
          column: 16
        }
      },
      "51": {
        start: {
          line: 156,
          column: 59
        },
        end: {
          line: 156,
          column: 92
        }
      },
      "52": {
        start: {
          line: 156,
          column: 130
        },
        end: {
          line: 159,
          column: 13
        }
      },
      "53": {
        start: {
          line: 163,
          column: 8
        },
        end: {
          line: 163,
          column: 47
        }
      },
      "54": {
        start: {
          line: 163,
          column: 37
        },
        end: {
          line: 163,
          column: 47
        }
      },
      "55": {
        start: {
          line: 164,
          column: 28
        },
        end: {
          line: 164,
          column: 37
        }
      },
      "56": {
        start: {
          line: 166,
          column: 29
        },
        end: {
          line: 166,
          column: 70
        }
      },
      "57": {
        start: {
          line: 167,
          column: 8
        },
        end: {
          line: 181,
          column: 11
        }
      },
      "58": {
        start: {
          line: 169,
          column: 12
        },
        end: {
          line: 171,
          column: 13
        }
      },
      "59": {
        start: {
          line: 170,
          column: 16
        },
        end: {
          line: 170,
          column: 56
        }
      },
      "60": {
        start: {
          line: 173,
          column: 35
        },
        end: {
          line: 173,
          column: 80
        }
      },
      "61": {
        start: {
          line: 174,
          column: 12
        },
        end: {
          line: 176,
          column: 13
        }
      },
      "62": {
        start: {
          line: 175,
          column: 16
        },
        end: {
          line: 175,
          column: 48
        }
      },
      "63": {
        start: {
          line: 178,
          column: 12
        },
        end: {
          line: 180,
          column: 13
        }
      },
      "64": {
        start: {
          line: 179,
          column: 16
        },
        end: {
          line: 179,
          column: 51
        }
      },
      "65": {
        start: {
          line: 182,
          column: 8
        },
        end: {
          line: 182,
          column: 55
        }
      },
      "66": {
        start: {
          line: 186,
          column: 29
        },
        end: {
          line: 191,
          column: 9
        }
      },
      "67": {
        start: {
          line: 192,
          column: 24
        },
        end: {
          line: 198,
          column: 9
        }
      },
      "68": {
        start: {
          line: 200,
          column: 8
        },
        end: {
          line: 202,
          column: 9
        }
      },
      "69": {
        start: {
          line: 201,
          column: 12
        },
        end: {
          line: 201,
          column: 81
        }
      },
      "70": {
        start: {
          line: 204,
          column: 8
        },
        end: {
          line: 204,
          column: 62
        }
      },
      "71": {
        start: {
          line: 208,
          column: 8
        },
        end: {
          line: 208,
          column: 33
        }
      },
      "72": {
        start: {
          line: 209,
          column: 8
        },
        end: {
          line: 209,
          column: 28
        }
      },
      "73": {
        start: {
          line: 210,
          column: 8
        },
        end: {
          line: 210,
          column: 31
        }
      },
      "74": {
        start: {
          line: 214,
          column: 8
        },
        end: {
          line: 219,
          column: 10
        }
      },
      "75": {
        start: {
          line: 222,
          column: 27
        },
        end: {
          line: 222,
          column: 51
        }
      },
      "76": {
        start: {
          line: 223,
          column: 20
        },
        end: {
          line: 279,
          column: 1
        }
      },
      "77": {
        start: {
          line: 226,
          column: 8
        },
        end: {
          line: 226,
          column: 41
        }
      },
      "78": {
        start: {
          line: 226,
          column: 29
        },
        end: {
          line: 226,
          column: 41
        }
      },
      "79": {
        start: {
          line: 227,
          column: 30
        },
        end: {
          line: 227,
          column: 34
        }
      },
      "80": {
        start: {
          line: 228,
          column: 8
        },
        end: {
          line: 231,
          column: 11
        }
      },
      "81": {
        start: {
          line: 229,
          column: 26
        },
        end: {
          line: 229,
          column: 56
        }
      },
      "82": {
        start: {
          line: 230,
          column: 12
        },
        end: {
          line: 230,
          column: 80
        }
      },
      "83": {
        start: {
          line: 232,
          column: 8
        },
        end: {
          line: 232,
          column: 31
        }
      },
      "84": {
        start: {
          line: 236,
          column: 8
        },
        end: {
          line: 236,
          column: 104
        }
      },
      "85": {
        start: {
          line: 236,
          column: 72
        },
        end: {
          line: 236,
          column: 90
        }
      },
      "86": {
        start: {
          line: 240,
          column: 28
        },
        end: {
          line: 240,
          column: 30
        }
      },
      "87": {
        start: {
          line: 242,
          column: 22
        },
        end: {
          line: 242,
          column: 47
        }
      },
      "88": {
        start: {
          line: 243,
          column: 8
        },
        end: {
          line: 247,
          column: 9
        }
      },
      "89": {
        start: {
          line: 244,
          column: 12
        },
        end: {
          line: 244,
          column: 56
        }
      },
      "90": {
        start: {
          line: 245,
          column: 12
        },
        end: {
          line: 245,
          column: 39
        }
      },
      "91": {
        start: {
          line: 246,
          column: 12
        },
        end: {
          line: 246,
          column: 39
        }
      },
      "92": {
        start: {
          line: 249,
          column: 8
        },
        end: {
          line: 251,
          column: 9
        }
      },
      "93": {
        start: {
          line: 250,
          column: 12
        },
        end: {
          line: 250,
          column: 42
        }
      },
      "94": {
        start: {
          line: 252,
          column: 8
        },
        end: {
          line: 252,
          column: 64
        }
      },
      "95": {
        start: {
          line: 252,
          column: 39
        },
        end: {
          line: 252,
          column: 50
        }
      },
      "96": {
        start: {
          line: 256,
          column: 20
        },
        end: {
          line: 256,
          column: 21
        }
      },
      "97": {
        start: {
          line: 257,
          column: 27
        },
        end: {
          line: 257,
          column: 46
        }
      },
      "98": {
        start: {
          line: 259,
          column: 8
        },
        end: {
          line: 261,
          column: 82
        }
      },
      "99": {
        start: {
          line: 259,
          column: 59
        },
        end: {
          line: 259,
          column: 72
        }
      },
      "100": {
        start: {
          line: 260,
          column: 13
        },
        end: {
          line: 261,
          column: 82
        }
      },
      "101": {
        start: {
          line: 260,
          column: 72
        },
        end: {
          line: 260,
          column: 84
        }
      },
      "102": {
        start: {
          line: 261,
          column: 13
        },
        end: {
          line: 261,
          column: 82
        }
      },
      "103": {
        start: {
          line: 261,
          column: 70
        },
        end: {
          line: 261,
          column: 82
        }
      },
      "104": {
        start: {
          line: 262,
          column: 31
        },
        end: {
          line: 262,
          column: 78
        }
      },
      "105": {
        start: {
          line: 263,
          column: 8
        },
        end: {
          line: 265,
          column: 66
        }
      },
      "106": {
        start: {
          line: 263,
          column: 43
        },
        end: {
          line: 263,
          column: 55
        }
      },
      "107": {
        start: {
          line: 264,
          column: 13
        },
        end: {
          line: 265,
          column: 66
        }
      },
      "108": {
        start: {
          line: 264,
          column: 56
        },
        end: {
          line: 264,
          column: 68
        }
      },
      "109": {
        start: {
          line: 265,
          column: 13
        },
        end: {
          line: 265,
          column: 66
        }
      },
      "110": {
        start: {
          line: 265,
          column: 54
        },
        end: {
          line: 265,
          column: 66
        }
      },
      "111": {
        start: {
          line: 266,
          column: 8
        },
        end: {
          line: 266,
          column: 66
        }
      },
      "112": {
        start: {
          line: 266,
          column: 54
        },
        end: {
          line: 266,
          column: 66
        }
      },
      "113": {
        start: {
          line: 267,
          column: 8
        },
        end: {
          line: 267,
          column: 68
        }
      },
      "114": {
        start: {
          line: 267,
          column: 56
        },
        end: {
          line: 267,
          column: 68
        }
      },
      "115": {
        start: {
          line: 268,
          column: 8
        },
        end: {
          line: 268,
          column: 67
        }
      },
      "116": {
        start: {
          line: 268,
          column: 55
        },
        end: {
          line: 268,
          column: 67
        }
      },
      "117": {
        start: {
          line: 270,
          column: 8
        },
        end: {
          line: 270,
          column: 42
        }
      },
      "118": {
        start: {
          line: 270,
          column: 30
        },
        end: {
          line: 270,
          column: 42
        }
      },
      "119": {
        start: {
          line: 272,
          column: 8
        },
        end: {
          line: 276,
          column: 11
        }
      },
      "120": {
        start: {
          line: 273,
          column: 12
        },
        end: {
          line: 273,
          column: 51
        }
      },
      "121": {
        start: {
          line: 273,
          column: 40
        },
        end: {
          line: 273,
          column: 51
        }
      },
      "122": {
        start: {
          line: 274,
          column: 12
        },
        end: {
          line: 274,
          column: 46
        }
      },
      "123": {
        start: {
          line: 274,
          column: 35
        },
        end: {
          line: 274,
          column: 46
        }
      },
      "124": {
        start: {
          line: 275,
          column: 12
        },
        end: {
          line: 275,
          column: 48
        }
      },
      "125": {
        start: {
          line: 275,
          column: 37
        },
        end: {
          line: 275,
          column: 48
        }
      },
      "126": {
        start: {
          line: 277,
          column: 8
        },
        end: {
          line: 277,
          column: 36
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        },
        loc: {
          start: {
            line: 12,
            column: 30
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 30
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 18,
            column: 4
          },
          end: {
            line: 18,
            column: 5
          }
        },
        loc: {
          start: {
            line: 18,
            column: 23
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 18
      },
      "4": {
        name: "_interop_require_default",
        decl: {
          start: {
            line: 24,
            column: 9
          },
          end: {
            line: 24,
            column: 33
          }
        },
        loc: {
          start: {
            line: 24,
            column: 39
          },
          end: {
            line: 28,
            column: 1
          }
        },
        line: 24
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 57,
            column: 4
          },
          end: {
            line: 57,
            column: 5
          }
        },
        loc: {
          start: {
            line: 57,
            column: 28
          },
          end: {
            line: 63,
            column: 5
          }
        },
        line: 57
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 65,
            column: 4
          },
          end: {
            line: 65,
            column: 5
          }
        },
        loc: {
          start: {
            line: 65,
            column: 34
          },
          end: {
            line: 76,
            column: 5
          }
        },
        line: 65
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 70,
            column: 58
          },
          end: {
            line: 70,
            column: 59
          }
        },
        loc: {
          start: {
            line: 70,
            column: 66
          },
          end: {
            line: 73,
            column: 17
          }
        },
        line: 70
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 78,
            column: 4
          },
          end: {
            line: 78,
            column: 5
          }
        },
        loc: {
          start: {
            line: 78,
            column: 19
          },
          end: {
            line: 81,
            column: 5
          }
        },
        line: 78
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 83,
            column: 4
          },
          end: {
            line: 83,
            column: 5
          }
        },
        loc: {
          start: {
            line: 83,
            column: 35
          },
          end: {
            line: 102,
            column: 5
          }
        },
        line: 83
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 90,
            column: 27
          },
          end: {
            line: 90,
            column: 28
          }
        },
        loc: {
          start: {
            line: 90,
            column: 38
          },
          end: {
            line: 101,
            column: 13
          }
        },
        line: 90
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 93,
            column: 45
          },
          end: {
            line: 93,
            column: 46
          }
        },
        loc: {
          start: {
            line: 93,
            column: 55
          },
          end: {
            line: 100,
            column: 21
          }
        },
        line: 93
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 96,
            column: 59
          },
          end: {
            line: 96,
            column: 60
          }
        },
        loc: {
          start: {
            line: 96,
            column: 68
          },
          end: {
            line: 99,
            column: 29
          }
        },
        line: 96
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 104,
            column: 4
          },
          end: {
            line: 104,
            column: 5
          }
        },
        loc: {
          start: {
            line: 104,
            column: 51
          },
          end: {
            line: 128,
            column: 5
          }
        },
        line: 104
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 130,
            column: 4
          },
          end: {
            line: 130,
            column: 5
          }
        },
        loc: {
          start: {
            line: 130,
            column: 48
          },
          end: {
            line: 160,
            column: 5
          }
        },
        line: 130
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 133,
            column: 26
          },
          end: {
            line: 133,
            column: 27
          }
        },
        loc: {
          start: {
            line: 133,
            column: 35
          },
          end: {
            line: 138,
            column: 9
          }
        },
        line: 133
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 140,
            column: 29
          },
          end: {
            line: 140,
            column: 30
          }
        },
        loc: {
          start: {
            line: 140,
            column: 44
          },
          end: {
            line: 154,
            column: 9
          }
        },
        line: 140
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 145,
            column: 65
          },
          end: {
            line: 145,
            column: 66
          }
        },
        loc: {
          start: {
            line: 145,
            column: 70
          },
          end: {
            line: 145,
            column: 77
          }
        },
        line: 145
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 151,
            column: 59
          },
          end: {
            line: 151,
            column: 60
          }
        },
        loc: {
          start: {
            line: 151,
            column: 64
          },
          end: {
            line: 151,
            column: 71
          }
        },
        line: 151
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 156,
            column: 51
          },
          end: {
            line: 156,
            column: 52
          }
        },
        loc: {
          start: {
            line: 156,
            column: 59
          },
          end: {
            line: 156,
            column: 92
          }
        },
        line: 156
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 156,
            column: 98
          },
          end: {
            line: 156,
            column: 99
          }
        },
        loc: {
          start: {
            line: 156,
            column: 130
          },
          end: {
            line: 159,
            column: 13
          }
        },
        line: 156
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 162,
            column: 4
          },
          end: {
            line: 162,
            column: 5
          }
        },
        loc: {
          start: {
            line: 162,
            column: 56
          },
          end: {
            line: 183,
            column: 5
          }
        },
        line: 162
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 167,
            column: 29
          },
          end: {
            line: 167,
            column: 30
          }
        },
        loc: {
          start: {
            line: 167,
            column: 39
          },
          end: {
            line: 181,
            column: 9
          }
        },
        line: 167
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 185,
            column: 4
          },
          end: {
            line: 185,
            column: 5
          }
        },
        loc: {
          start: {
            line: 185,
            column: 35
          },
          end: {
            line: 205,
            column: 5
          }
        },
        line: 185
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 207,
            column: 4
          },
          end: {
            line: 207,
            column: 5
          }
        },
        loc: {
          start: {
            line: 207,
            column: 17
          },
          end: {
            line: 211,
            column: 5
          }
        },
        line: 207
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 213,
            column: 4
          },
          end: {
            line: 213,
            column: 5
          }
        },
        loc: {
          start: {
            line: 213,
            column: 20
          },
          end: {
            line: 220,
            column: 5
          }
        },
        line: 213
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 225,
            column: 4
          },
          end: {
            line: 225,
            column: 5
          }
        },
        loc: {
          start: {
            line: 225,
            column: 37
          },
          end: {
            line: 233,
            column: 5
          }
        },
        line: 225
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 228,
            column: 24
          },
          end: {
            line: 228,
            column: 25
          }
        },
        loc: {
          start: {
            line: 228,
            column: 33
          },
          end: {
            line: 231,
            column: 9
          }
        },
        line: 228
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 235,
            column: 4
          },
          end: {
            line: 235,
            column: 5
          }
        },
        loc: {
          start: {
            line: 235,
            column: 28
          },
          end: {
            line: 237,
            column: 5
          }
        },
        line: 235
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 236,
            column: 61
          },
          end: {
            line: 236,
            column: 62
          }
        },
        loc: {
          start: {
            line: 236,
            column: 72
          },
          end: {
            line: 236,
            column: 90
          }
        },
        line: 236
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 239,
            column: 4
          },
          end: {
            line: 239,
            column: 5
          }
        },
        loc: {
          start: {
            line: 239,
            column: 37
          },
          end: {
            line: 253,
            column: 5
          }
        },
        line: 239
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 252,
            column: 34
          },
          end: {
            line: 252,
            column: 35
          }
        },
        loc: {
          start: {
            line: 252,
            column: 39
          },
          end: {
            line: 252,
            column: 50
          }
        },
        line: 252
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 255,
            column: 4
          },
          end: {
            line: 255,
            column: 5
          }
        },
        loc: {
          start: {
            line: 255,
            column: 63
          },
          end: {
            line: 278,
            column: 5
          }
        },
        line: 255
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 272,
            column: 30
          },
          end: {
            line: 272,
            column: 31
          }
        },
        loc: {
          start: {
            line: 272,
            column: 39
          },
          end: {
            line: 276,
            column: 9
          }
        },
        line: 272
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 25,
            column: 11
          },
          end: {
            line: 27,
            column: 5
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 25,
            column: 35
          },
          end: {
            line: 25,
            column: 38
          }
        }, {
          start: {
            line: 25,
            column: 41
          },
          end: {
            line: 27,
            column: 5
          }
        }],
        line: 25
      },
      "1": {
        loc: {
          start: {
            line: 25,
            column: 11
          },
          end: {
            line: 25,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 25,
            column: 11
          },
          end: {
            line: 25,
            column: 14
          }
        }, {
          start: {
            line: 25,
            column: 18
          },
          end: {
            line: 25,
            column: 32
          }
        }],
        line: 25
      },
      "2": {
        loc: {
          start: {
            line: 57,
            column: 16
          },
          end: {
            line: 57,
            column: 27
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 57,
            column: 25
          },
          end: {
            line: 57,
            column: 27
          }
        }],
        line: 57
      },
      "3": {
        loc: {
          start: {
            line: 69,
            column: 23
          },
          end: {
            line: 69,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 69,
            column: 23
          },
          end: {
            line: 69,
            column: 44
          }
        }, {
          start: {
            line: 69,
            column: 48
          },
          end: {
            line: 69,
            column: 77
          }
        }],
        line: 69
      },
      "4": {
        loc: {
          start: {
            line: 70,
            column: 18
          },
          end: {
            line: 73,
            column: 46
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 70,
            column: 37
          },
          end: {
            line: 73,
            column: 19
          }
        }, {
          start: {
            line: 73,
            column: 22
          },
          end: {
            line: 73,
            column: 46
          }
        }],
        line: 70
      },
      "5": {
        loc: {
          start: {
            line: 79,
            column: 8
          },
          end: {
            line: 79,
            column: 64
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 79,
            column: 8
          },
          end: {
            line: 79,
            column: 64
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 79
      },
      "6": {
        loc: {
          start: {
            line: 79,
            column: 12
          },
          end: {
            line: 79,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 79,
            column: 12
          },
          end: {
            line: 79,
            column: 28
          }
        }, {
          start: {
            line: 79,
            column: 32
          },
          end: {
            line: 79,
            column: 50
          }
        }],
        line: 79
      },
      "7": {
        loc: {
          start: {
            line: 83,
            column: 23
          },
          end: {
            line: 83,
            column: 33
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 83,
            column: 31
          },
          end: {
            line: 83,
            column: 33
          }
        }],
        line: 83
      },
      "8": {
        loc: {
          start: {
            line: 84,
            column: 8
          },
          end: {
            line: 86,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 84,
            column: 8
          },
          end: {
            line: 86,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 84
      },
      "9": {
        loc: {
          start: {
            line: 84,
            column: 12
          },
          end: {
            line: 84,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 84,
            column: 12
          },
          end: {
            line: 84,
            column: 30
          }
        }, {
          start: {
            line: 84,
            column: 34
          },
          end: {
            line: 84,
            column: 61
          }
        }],
        line: 84
      },
      "10": {
        loc: {
          start: {
            line: 92,
            column: 23
          },
          end: {
            line: 92,
            column: 40
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 92,
            column: 23
          },
          end: {
            line: 92,
            column: 35
          }
        }, {
          start: {
            line: 92,
            column: 39
          },
          end: {
            line: 92,
            column: 40
          }
        }],
        line: 92
      },
      "11": {
        loc: {
          start: {
            line: 93,
            column: 25
          },
          end: {
            line: 100,
            column: 29
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 93,
            column: 25
          },
          end: {
            line: 100,
            column: 23
          }
        }, {
          start: {
            line: 100,
            column: 27
          },
          end: {
            line: 100,
            column: 29
          }
        }],
        line: 93
      },
      "12": {
        loc: {
          start: {
            line: 94,
            column: 31
          },
          end: {
            line: 94,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 94,
            column: 31
          },
          end: {
            line: 94,
            column: 40
          }
        }, {
          start: {
            line: 94,
            column: 44
          },
          end: {
            line: 94,
            column: 46
          }
        }],
        line: 94
      },
      "13": {
        loc: {
          start: {
            line: 95,
            column: 31
          },
          end: {
            line: 95,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 95,
            column: 31
          },
          end: {
            line: 95,
            column: 42
          }
        }, {
          start: {
            line: 95,
            column: 46
          },
          end: {
            line: 95,
            column: 48
          }
        }],
        line: 95
      },
      "14": {
        loc: {
          start: {
            line: 96,
            column: 34
          },
          end: {
            line: 96,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 96,
            column: 34
          },
          end: {
            line: 96,
            column: 47
          }
        }, {
          start: {
            line: 96,
            column: 51
          },
          end: {
            line: 96,
            column: 53
          }
        }],
        line: 96
      },
      "15": {
        loc: {
          start: {
            line: 104,
            column: 37
          },
          end: {
            line: 104,
            column: 49
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 104,
            column: 47
          },
          end: {
            line: 104,
            column: 49
          }
        }],
        line: 104
      },
      "16": {
        loc: {
          start: {
            line: 109,
            column: 8
          },
          end: {
            line: 123,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 109,
            column: 8
          },
          end: {
            line: 123,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 109
      },
      "17": {
        loc: {
          start: {
            line: 109,
            column: 12
          },
          end: {
            line: 109,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 109,
            column: 12
          },
          end: {
            line: 109,
            column: 40
          }
        }, {
          start: {
            line: 109,
            column: 44
          },
          end: {
            line: 109,
            column: 74
          }
        }],
        line: 109
      },
      "18": {
        loc: {
          start: {
            line: 111,
            column: 12
          },
          end: {
            line: 113,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 111,
            column: 12
          },
          end: {
            line: 113,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 111
      },
      "19": {
        loc: {
          start: {
            line: 120,
            column: 44
          },
          end: {
            line: 120,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 120,
            column: 44
          },
          end: {
            line: 120,
            column: 63
          }
        }, {
          start: {
            line: 120,
            column: 67
          },
          end: {
            line: 120,
            column: 68
          }
        }],
        line: 120
      },
      "20": {
        loc: {
          start: {
            line: 120,
            column: 71
          },
          end: {
            line: 120,
            column: 95
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 120,
            column: 71
          },
          end: {
            line: 120,
            column: 90
          }
        }, {
          start: {
            line: 120,
            column: 94
          },
          end: {
            line: 120,
            column: 95
          }
        }],
        line: 120
      },
      "21": {
        loc: {
          start: {
            line: 136,
            column: 31
          },
          end: {
            line: 136,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 136,
            column: 31
          },
          end: {
            line: 136,
            column: 42
          }
        }, {
          start: {
            line: 136,
            column: 46
          },
          end: {
            line: 136,
            column: 47
          }
        }],
        line: 136
      },
      "22": {
        loc: {
          start: {
            line: 142,
            column: 12
          },
          end: {
            line: 153,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 142,
            column: 12
          },
          end: {
            line: 153,
            column: 13
          }
        }, {
          start: {
            line: 146,
            column: 19
          },
          end: {
            line: 153,
            column: 13
          }
        }],
        line: 142
      },
      "23": {
        loc: {
          start: {
            line: 144,
            column: 42
          },
          end: {
            line: 144,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 144,
            column: 42
          },
          end: {
            line: 144,
            column: 64
          }
        }, {
          start: {
            line: 144,
            column: 68
          },
          end: {
            line: 144,
            column: 69
          }
        }],
        line: 144
      },
      "24": {
        loc: {
          start: {
            line: 162,
            column: 45
          },
          end: {
            line: 162,
            column: 54
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 162,
            column: 53
          },
          end: {
            line: 162,
            column: 54
          }
        }],
        line: 162
      },
      "25": {
        loc: {
          start: {
            line: 163,
            column: 8
          },
          end: {
            line: 163,
            column: 47
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 163,
            column: 8
          },
          end: {
            line: 163,
            column: 47
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 163
      },
      "26": {
        loc: {
          start: {
            line: 169,
            column: 12
          },
          end: {
            line: 171,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 169,
            column: 12
          },
          end: {
            line: 171,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 169
      },
      "27": {
        loc: {
          start: {
            line: 174,
            column: 12
          },
          end: {
            line: 176,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 174,
            column: 12
          },
          end: {
            line: 176,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 174
      },
      "28": {
        loc: {
          start: {
            line: 178,
            column: 12
          },
          end: {
            line: 180,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 178,
            column: 12
          },
          end: {
            line: 180,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 178
      },
      "29": {
        loc: {
          start: {
            line: 187,
            column: 19
          },
          end: {
            line: 187,
            column: 39
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 187,
            column: 19
          },
          end: {
            line: 187,
            column: 33
          }
        }, {
          start: {
            line: 187,
            column: 37
          },
          end: {
            line: 187,
            column: 39
          }
        }],
        line: 187
      },
      "30": {
        loc: {
          start: {
            line: 188,
            column: 19
          },
          end: {
            line: 188,
            column: 39
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 188,
            column: 19
          },
          end: {
            line: 188,
            column: 33
          }
        }, {
          start: {
            line: 188,
            column: 37
          },
          end: {
            line: 188,
            column: 39
          }
        }],
        line: 188
      },
      "31": {
        loc: {
          start: {
            line: 189,
            column: 20
          },
          end: {
            line: 189,
            column: 40
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 189,
            column: 20
          },
          end: {
            line: 189,
            column: 35
          }
        }, {
          start: {
            line: 189,
            column: 39
          },
          end: {
            line: 189,
            column: 40
          }
        }],
        line: 189
      },
      "32": {
        loc: {
          start: {
            line: 190,
            column: 31
          },
          end: {
            line: 190,
            column: 94
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 190,
            column: 67
          },
          end: {
            line: 190,
            column: 71
          }
        }, {
          start: {
            line: 190,
            column: 74
          },
          end: {
            line: 190,
            column: 94
          }
        }],
        line: 190
      },
      "33": {
        loc: {
          start: {
            line: 200,
            column: 8
          },
          end: {
            line: 202,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 200,
            column: 8
          },
          end: {
            line: 202,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 200
      },
      "34": {
        loc: {
          start: {
            line: 200,
            column: 12
          },
          end: {
            line: 200,
            column: 88
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 200,
            column: 12
          },
          end: {
            line: 200,
            column: 27
          }
        }, {
          start: {
            line: 200,
            column: 31
          },
          end: {
            line: 200,
            column: 45
          }
        }, {
          start: {
            line: 200,
            column: 49
          },
          end: {
            line: 200,
            column: 65
          }
        }, {
          start: {
            line: 200,
            column: 69
          },
          end: {
            line: 200,
            column: 88
          }
        }],
        line: 200
      },
      "35": {
        loc: {
          start: {
            line: 226,
            column: 8
          },
          end: {
            line: 226,
            column: 41
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 226,
            column: 8
          },
          end: {
            line: 226,
            column: 41
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 226
      },
      "36": {
        loc: {
          start: {
            line: 243,
            column: 8
          },
          end: {
            line: 247,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 243,
            column: 8
          },
          end: {
            line: 247,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 243
      },
      "37": {
        loc: {
          start: {
            line: 249,
            column: 8
          },
          end: {
            line: 251,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 249,
            column: 8
          },
          end: {
            line: 251,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 249
      },
      "38": {
        loc: {
          start: {
            line: 255,
            column: 43
          },
          end: {
            line: 255,
            column: 61
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 255,
            column: 59
          },
          end: {
            line: 255,
            column: 61
          }
        }],
        line: 255
      },
      "39": {
        loc: {
          start: {
            line: 259,
            column: 8
          },
          end: {
            line: 261,
            column: 82
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 259,
            column: 8
          },
          end: {
            line: 261,
            column: 82
          }
        }, {
          start: {
            line: 260,
            column: 13
          },
          end: {
            line: 261,
            column: 82
          }
        }],
        line: 259
      },
      "40": {
        loc: {
          start: {
            line: 260,
            column: 13
          },
          end: {
            line: 261,
            column: 82
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 260,
            column: 13
          },
          end: {
            line: 261,
            column: 82
          }
        }, {
          start: {
            line: 261,
            column: 13
          },
          end: {
            line: 261,
            column: 82
          }
        }],
        line: 260
      },
      "41": {
        loc: {
          start: {
            line: 261,
            column: 13
          },
          end: {
            line: 261,
            column: 82
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 261,
            column: 13
          },
          end: {
            line: 261,
            column: 82
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 261
      },
      "42": {
        loc: {
          start: {
            line: 263,
            column: 8
          },
          end: {
            line: 265,
            column: 66
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 263,
            column: 8
          },
          end: {
            line: 265,
            column: 66
          }
        }, {
          start: {
            line: 264,
            column: 13
          },
          end: {
            line: 265,
            column: 66
          }
        }],
        line: 263
      },
      "43": {
        loc: {
          start: {
            line: 264,
            column: 13
          },
          end: {
            line: 265,
            column: 66
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 264,
            column: 13
          },
          end: {
            line: 265,
            column: 66
          }
        }, {
          start: {
            line: 265,
            column: 13
          },
          end: {
            line: 265,
            column: 66
          }
        }],
        line: 264
      },
      "44": {
        loc: {
          start: {
            line: 265,
            column: 13
          },
          end: {
            line: 265,
            column: 66
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 265,
            column: 13
          },
          end: {
            line: 265,
            column: 66
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 265
      },
      "45": {
        loc: {
          start: {
            line: 266,
            column: 8
          },
          end: {
            line: 266,
            column: 66
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 266,
            column: 8
          },
          end: {
            line: 266,
            column: 66
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 266
      },
      "46": {
        loc: {
          start: {
            line: 267,
            column: 8
          },
          end: {
            line: 267,
            column: 68
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 267,
            column: 8
          },
          end: {
            line: 267,
            column: 68
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 267
      },
      "47": {
        loc: {
          start: {
            line: 268,
            column: 8
          },
          end: {
            line: 268,
            column: 67
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 268,
            column: 8
          },
          end: {
            line: 268,
            column: 67
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 268
      },
      "48": {
        loc: {
          start: {
            line: 270,
            column: 8
          },
          end: {
            line: 270,
            column: 42
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 270,
            column: 8
          },
          end: {
            line: 270,
            column: 42
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 270
      },
      "49": {
        loc: {
          start: {
            line: 273,
            column: 12
          },
          end: {
            line: 273,
            column: 51
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 273,
            column: 12
          },
          end: {
            line: 273,
            column: 51
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 273
      },
      "50": {
        loc: {
          start: {
            line: 274,
            column: 12
          },
          end: {
            line: 274,
            column: 46
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 274,
            column: 12
          },
          end: {
            line: 274,
            column: 46
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 274
      },
      "51": {
        loc: {
          start: {
            line: 275,
            column: 12
          },
          end: {
            line: 275,
            column: 48
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 275,
            column: 12
          },
          end: {
            line: 275,
            column: 48
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 275
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0, 0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/stefanbekker/projects/fancy-planties/src/lib/services/plant-search.ts"],
      sourcesContent: ["import Fuse, { type IFuseOptions } from 'fuse.js';\nimport type { \n  PlantSuggestion, \n  FuzzySearchConfig,\n  PlantSearch \n} from '@/lib/validation/plant-schemas';\nimport type { \n  FuzzyMatchResult, \n  PlantSearchResult,\n  PlantLookupOptions \n} from '@/lib/types/plant-types';\nimport { searchPlants as dbSearchPlants } from '@/lib/db/queries/plant-taxonomy';\n\n// Default fuzzy search configuration\nconst DEFAULT_FUSE_CONFIG: IFuseOptions<PlantSuggestion> = {\n  threshold: 0.4, // Lower = more strict matching\n  location: 0,\n  distance: 100,\n  minMatchCharLength: 2,\n  includeScore: true,\n  includeMatches: true,\n  keys: [\n    {\n      name: 'commonName',\n      weight: 0.4, // Highest priority for common names\n    },\n    {\n      name: 'genus',\n      weight: 0.3,\n    },\n    {\n      name: 'species',\n      weight: 0.2,\n    },\n    {\n      name: 'family',\n      weight: 0.1, // Lowest priority for family\n    },\n  ],\n};\n\nexport class PlantSearchService {\n  private fuseInstance: Fuse<PlantSuggestion> | null = null;\n  private plantData: PlantSuggestion[] = [];\n  private lastUpdate: Date | null = null;\n  private readonly cacheTimeout = 5 * 60 * 1000; // 5 minutes\n\n  constructor(private config: Partial<FuzzySearchConfig> = {}) {}\n\n  // Initialize or update the search index\n  async initializeIndex(plants: PlantSuggestion[]): Promise<void> {\n    this.plantData = plants;\n    this.fuseInstance = new Fuse(plants, {\n      ...DEFAULT_FUSE_CONFIG,\n      threshold: this.config.threshold ?? DEFAULT_FUSE_CONFIG.threshold,\n      keys: this.config.keys ? this.config.keys.map(key => ({ name: key, weight: 1 })) : DEFAULT_FUSE_CONFIG.keys,\n    });\n    this.lastUpdate = new Date();\n  }\n\n  // Check if index needs refresh\n  private needsRefresh(): boolean {\n    if (!this.lastUpdate || !this.fuseInstance) return true;\n    return Date.now() - this.lastUpdate.getTime() > this.cacheTimeout;\n  }\n\n  // Perform fuzzy search on cached data\n  fuzzySearch(query: string, limit: number = 20): FuzzyMatchResult[] {\n    if (!this.fuseInstance || this.plantData.length === 0) {\n      return [];\n    }\n\n    const results = this.fuseInstance.search(query, { limit });\n    \n    return results.map(result => ({\n      item: result.item,\n      score: result.score || 0,\n      matches: result.matches?.map(match => ({\n        field: match.key || '',\n        value: match.value || '',\n        indices: (match.indices || []).map(tuple => [tuple[0], tuple[1]]),\n      })) || [],\n    }));\n  }\n\n  // Hybrid search: combines database search with fuzzy matching\n  async hybridSearch(\n    searchParams: PlantSearch,\n    options: PlantLookupOptions = {}\n  ): Promise<PlantSearchResult> {\n    const startTime = Date.now();\n\n    // First, get results from database (handles complex filtering, pagination)\n    const dbResults = await dbSearchPlants(searchParams, options);\n\n    // If we have a small result set, enhance with fuzzy search\n    if (dbResults.plants.length < 50 && searchParams.query.length >= 2) {\n      // Initialize fuzzy search if needed\n      if (this.needsRefresh()) {\n        await this.initializeIndex(dbResults.plants);\n      }\n\n      // Perform fuzzy search on the database results\n      const fuzzyResults = this.fuzzySearch(searchParams.query, searchParams.limit);\n      \n      // Merge and re-rank results\n      const mergedResults = this.mergeSearchResults(dbResults.plants, fuzzyResults);\n      \n      return {\n        ...dbResults,\n        plants: mergedResults.slice(searchParams.offset || 0, (searchParams.offset || 0) + searchParams.limit),\n        searchTime: Date.now() - startTime,\n      };\n    }\n\n    return {\n      ...dbResults,\n      searchTime: Date.now() - startTime,\n    };\n  }\n\n  // Merge database and fuzzy search results with intelligent ranking\n  private mergeSearchResults(\n    dbResults: PlantSuggestion[],\n    fuzzyResults: FuzzyMatchResult[]\n  ): PlantSuggestion[] {\n    const resultMap = new Map<number, PlantSuggestion & { combinedScore: number }>();\n\n    // Add database results with their scores\n    dbResults.forEach(plant => {\n      resultMap.set(plant.id, {\n        ...plant,\n        combinedScore: plant.score || 0,\n      });\n    });\n\n    // Enhance with fuzzy search scores\n    fuzzyResults.forEach(fuzzyResult => {\n      const existing = resultMap.get(fuzzyResult.item.id);\n      if (existing) {\n        // Combine scores: database score (0-100) + fuzzy score (0-1) * 50\n        existing.combinedScore = (existing.combinedScore || 0) + (1 - fuzzyResult.score) * 50;\n        existing.matchedFields = fuzzyResult.matches.map(m => m.field);\n      } else {\n        // Add new fuzzy result\n        resultMap.set(fuzzyResult.item.id, {\n          ...fuzzyResult.item,\n          combinedScore: (1 - fuzzyResult.score) * 50,\n          matchedFields: fuzzyResult.matches.map(m => m.field),\n        });\n      }\n    });\n\n    // Sort by combined score and return\n    return Array.from(resultMap.values())\n      .sort((a, b) => b.combinedScore - a.combinedScore)\n      .map(({ combinedScore, ...plant }) => ({\n        ...plant,\n        score: Math.round(combinedScore),\n      }));\n  }\n\n  // Get search suggestions based on partial input\n  async getSearchSuggestions(\n    partialQuery: string,\n    limit: number = 5\n  ): Promise<string[]> {\n    if (partialQuery.length < 2) return [];\n\n    const suggestions = new Set<string>();\n    \n    // Get fuzzy matches\n    const fuzzyResults = this.fuzzySearch(partialQuery, limit * 2);\n    \n    fuzzyResults.forEach(result => {\n      // Add common name\n      if (result.item.commonName.toLowerCase().includes(partialQuery.toLowerCase())) {\n        suggestions.add(result.item.commonName);\n      }\n      \n      // Add scientific name\n      const scientificName = `${result.item.genus} ${result.item.species}`;\n      if (scientificName.toLowerCase().includes(partialQuery.toLowerCase())) {\n        suggestions.add(scientificName);\n      }\n      \n      // Add genus if it matches\n      if (result.item.genus.toLowerCase().includes(partialQuery.toLowerCase())) {\n        suggestions.add(result.item.genus);\n      }\n    });\n\n    return Array.from(suggestions).slice(0, limit);\n  }\n\n  // Advanced search with multiple criteria\n  async advancedSearch(criteria: {\n    query?: string;\n    family?: string;\n    genus?: string;\n    species?: string;\n    commonName?: string;\n    isVerified?: boolean;\n    limit?: number;\n    offset?: number;\n  }): Promise<PlantSearchResult> {\n    const searchParams: PlantSearch = {\n      query: criteria.query || '',\n      limit: criteria.limit || 20,\n      offset: criteria.offset || 0,\n      includeUnverified: criteria.isVerified === undefined ? true : !criteria.isVerified,\n    };\n\n    const options: PlantLookupOptions = {\n      filters: {\n        family: criteria.family,\n        genus: criteria.genus,\n        isVerified: criteria.isVerified,\n      },\n    };\n\n    // If we have specific field criteria, use exact matching\n    if (criteria.family || criteria.genus || criteria.species || criteria.commonName) {\n      return await dbSearchPlants(searchParams, options);\n    }\n\n    // Otherwise use hybrid search\n    return await this.hybridSearch(searchParams, options);\n  }\n\n  // Clear the search cache\n  clearCache(): void {\n    this.fuseInstance = null;\n    this.plantData = [];\n    this.lastUpdate = null;\n  }\n\n  // Get cache statistics\n  getCacheStats() {\n    return {\n      isInitialized: !!this.fuseInstance,\n      plantCount: this.plantData.length,\n      lastUpdate: this.lastUpdate,\n      needsRefresh: this.needsRefresh(),\n    };\n  }\n}\n\n// Export a singleton instance\nexport const plantSearchService = new PlantSearchService();\n\n// Utility functions for search result processing\nexport const searchUtils = {\n  // Highlight matched terms in text\n  highlightMatches(text: string, matches: string[]): string {\n    if (!matches.length) return text;\n    \n    let highlightedText = text;\n    matches.forEach(match => {\n      const regex = new RegExp(`(${match})`, 'gi');\n      highlightedText = highlightedText.replace(regex, '<mark>$1</mark>');\n    });\n    \n    return highlightedText;\n  },\n\n  // Extract search keywords from query\n  extractKeywords(query: string): string[] {\n    return query\n      .toLowerCase()\n      .split(/[\\s,\\-_]+/)\n      .filter(keyword => keyword.length > 1)\n      .slice(0, 5); // Limit to 5 keywords\n  },\n\n  // Generate search suggestions based on common patterns\n  generateQuerySuggestions(query: string): string[] {\n    const suggestions: string[] = [];\n    \n    // If query looks like scientific name (two words)\n    const words = query.trim().split(/\\s+/);\n    if (words.length === 2) {\n      suggestions.push(`${words[0]} ${words[1]}`); // Exact scientific name\n      suggestions.push(words[0]); // Just genus\n      suggestions.push(words[1]); // Just species\n    }\n    \n    // Add partial matches\n    if (query.length >= 3) {\n      suggestions.push(`${query}*`); // Prefix search\n    }\n    \n    return suggestions.filter(s => s !== query).slice(0, 3);\n  },\n\n  // Score search result relevance\n  calculateRelevanceScore(\n    plant: PlantSuggestion,\n    query: string,\n    matchedFields: string[] = []\n  ): number {\n    let score = 0;\n    const lowerQuery = query.toLowerCase();\n    \n    // Exact matches get highest scores\n    if (plant.commonName.toLowerCase() === lowerQuery) score += 100;\n    else if (plant.commonName.toLowerCase().startsWith(lowerQuery)) score += 80;\n    else if (plant.commonName.toLowerCase().includes(lowerQuery)) score += 60;\n    \n    const scientificName = `${plant.genus} ${plant.species}`.toLowerCase();\n    if (scientificName === lowerQuery) score += 90;\n    else if (scientificName.startsWith(lowerQuery)) score += 70;\n    else if (scientificName.includes(lowerQuery)) score += 50;\n    \n    if (plant.genus.toLowerCase() === lowerQuery) score += 75;\n    if (plant.species.toLowerCase() === lowerQuery) score += 65;\n    if (plant.family.toLowerCase() === lowerQuery) score += 55;\n    \n    // Boost verified plants\n    if (plant.isVerified) score += 10;\n    \n    // Boost based on matched fields\n    matchedFields.forEach(field => {\n      if (field === 'commonName') score += 5;\n      if (field === 'genus') score += 3;\n      if (field === 'species') score += 2;\n    });\n    \n    return Math.min(score, 100); // Cap at 100\n  },\n};"],
      names: ["PlantSearchService", "plantSearchService", "searchUtils", "DEFAULT_FUSE_CONFIG", "threshold", "location", "distance", "minMatchCharLength", "includeScore", "includeMatches", "keys", "name", "weight", "config", "fuseInstance", "plantData", "lastUpdate", "cacheTimeout", "initializeIndex", "plants", "Fuse", "map", "key", "Date", "needsRefresh", "now", "getTime", "fuzzySearch", "query", "limit", "length", "results", "search", "result", "item", "score", "matches", "match", "field", "value", "indices", "tuple", "hybridSearch", "searchParams", "options", "startTime", "dbResults", "dbSearchPlants", "fuzzyResults", "mergedResults", "mergeSearchResults", "slice", "offset", "searchTime", "resultMap", "Map", "forEach", "plant", "set", "id", "combinedScore", "fuzzyResult", "existing", "get", "matchedFields", "m", "Array", "from", "values", "sort", "a", "b", "Math", "round", "getSearchSuggestions", "partialQuery", "suggestions", "Set", "commonName", "toLowerCase", "includes", "add", "scientificName", "genus", "species", "advancedSearch", "criteria", "includeUnverified", "isVerified", "undefined", "filters", "family", "clearCache", "getCacheStats", "isInitialized", "plantCount", "highlightMatches", "text", "highlightedText", "regex", "RegExp", "replace", "extractKeywords", "split", "filter", "keyword", "generateQuerySuggestions", "words", "trim", "push", "s", "calculateRelevanceScore", "lowerQuery", "startsWith", "min"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "1d4c61513a13d04480a364bef532abd1b773da22"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2i6bs01ag9 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2i6bs01ag9();
cov_2i6bs01ag9().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_2i6bs01ag9().f[0]++;
  cov_2i6bs01ag9().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_2i6bs01ag9().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_2i6bs01ag9().s[3]++;
_export(exports, {
  get PlantSearchService() {
    /* istanbul ignore next */
    cov_2i6bs01ag9().f[1]++;
    cov_2i6bs01ag9().s[4]++;
    return PlantSearchService;
  },
  get plantSearchService() {
    /* istanbul ignore next */
    cov_2i6bs01ag9().f[2]++;
    cov_2i6bs01ag9().s[5]++;
    return plantSearchService;
  },
  get searchUtils() {
    /* istanbul ignore next */
    cov_2i6bs01ag9().f[3]++;
    cov_2i6bs01ag9().s[6]++;
    return searchUtils;
  }
});
const _fuse =
/* istanbul ignore next */
(/*#__PURE__*/cov_2i6bs01ag9().s[7]++, _interop_require_default(require("fuse.js")));
const _planttaxonomy =
/* istanbul ignore next */
(cov_2i6bs01ag9().s[8]++, require("../db/queries/plant-taxonomy"));
function _interop_require_default(obj) {
  /* istanbul ignore next */
  cov_2i6bs01ag9().f[4]++;
  cov_2i6bs01ag9().s[9]++;
  return /* istanbul ignore next */(cov_2i6bs01ag9().b[1][0]++, obj) &&
  /* istanbul ignore next */
  (cov_2i6bs01ag9().b[1][1]++, obj.__esModule) ?
  /* istanbul ignore next */
  (cov_2i6bs01ag9().b[0][0]++, obj) :
  /* istanbul ignore next */
  (cov_2i6bs01ag9().b[0][1]++, {
    default: obj
  });
}
// Default fuzzy search configuration
const DEFAULT_FUSE_CONFIG =
/* istanbul ignore next */
(cov_2i6bs01ag9().s[10]++, {
  threshold: 0.4,
  location: 0,
  distance: 100,
  minMatchCharLength: 2,
  includeScore: true,
  includeMatches: true,
  keys: [{
    name: 'commonName',
    weight: 0.4
  }, {
    name: 'genus',
    weight: 0.3
  }, {
    name: 'species',
    weight: 0.2
  }, {
    name: 'family',
    weight: 0.1
  }]
});
class PlantSearchService {
  constructor(config =
  /* istanbul ignore next */
  (cov_2i6bs01ag9().b[2][0]++, {})) {
    /* istanbul ignore next */
    cov_2i6bs01ag9().f[5]++;
    cov_2i6bs01ag9().s[11]++;
    this.config = config;
    /* istanbul ignore next */
    cov_2i6bs01ag9().s[12]++;
    this.fuseInstance = null;
    /* istanbul ignore next */
    cov_2i6bs01ag9().s[13]++;
    this.plantData = [];
    /* istanbul ignore next */
    cov_2i6bs01ag9().s[14]++;
    this.lastUpdate = null;
    /* istanbul ignore next */
    cov_2i6bs01ag9().s[15]++;
    this.cacheTimeout = 5 * 60 * 1000; // 5 minutes
  }
  // Initialize or update the search index
  async initializeIndex(plants) {
    /* istanbul ignore next */
    cov_2i6bs01ag9().f[6]++;
    cov_2i6bs01ag9().s[16]++;
    this.plantData = plants;
    /* istanbul ignore next */
    cov_2i6bs01ag9().s[17]++;
    this.fuseInstance = new _fuse.default(plants, {
      ...DEFAULT_FUSE_CONFIG,
      threshold:
      /* istanbul ignore next */
      (cov_2i6bs01ag9().b[3][0]++, this.config.threshold) ??
      /* istanbul ignore next */
      (cov_2i6bs01ag9().b[3][1]++, DEFAULT_FUSE_CONFIG.threshold),
      keys: this.config.keys ?
      /* istanbul ignore next */
      (cov_2i6bs01ag9().b[4][0]++, this.config.keys.map(key => {
        /* istanbul ignore next */
        cov_2i6bs01ag9().f[7]++;
        cov_2i6bs01ag9().s[18]++;
        return {
          name: key,
          weight: 1
        };
      })) :
      /* istanbul ignore next */
      (cov_2i6bs01ag9().b[4][1]++, DEFAULT_FUSE_CONFIG.keys)
    });
    /* istanbul ignore next */
    cov_2i6bs01ag9().s[19]++;
    this.lastUpdate = new Date();
  }
  // Check if index needs refresh
  needsRefresh() {
    /* istanbul ignore next */
    cov_2i6bs01ag9().f[8]++;
    cov_2i6bs01ag9().s[20]++;
    if (
    /* istanbul ignore next */
    (cov_2i6bs01ag9().b[6][0]++, !this.lastUpdate) ||
    /* istanbul ignore next */
    (cov_2i6bs01ag9().b[6][1]++, !this.fuseInstance)) {
      /* istanbul ignore next */
      cov_2i6bs01ag9().b[5][0]++;
      cov_2i6bs01ag9().s[21]++;
      return true;
    } else
    /* istanbul ignore next */
    {
      cov_2i6bs01ag9().b[5][1]++;
    }
    cov_2i6bs01ag9().s[22]++;
    return Date.now() - this.lastUpdate.getTime() > this.cacheTimeout;
  }
  // Perform fuzzy search on cached data
  fuzzySearch(query, limit =
  /* istanbul ignore next */
  (cov_2i6bs01ag9().b[7][0]++, 20)) {
    /* istanbul ignore next */
    cov_2i6bs01ag9().f[9]++;
    cov_2i6bs01ag9().s[23]++;
    if (
    /* istanbul ignore next */
    (cov_2i6bs01ag9().b[9][0]++, !this.fuseInstance) ||
    /* istanbul ignore next */
    (cov_2i6bs01ag9().b[9][1]++, this.plantData.length === 0)) {
      /* istanbul ignore next */
      cov_2i6bs01ag9().b[8][0]++;
      cov_2i6bs01ag9().s[24]++;
      return [];
    } else
    /* istanbul ignore next */
    {
      cov_2i6bs01ag9().b[8][1]++;
    }
    const results =
    /* istanbul ignore next */
    (cov_2i6bs01ag9().s[25]++, this.fuseInstance.search(query, {
      limit
    }));
    /* istanbul ignore next */
    cov_2i6bs01ag9().s[26]++;
    return results.map(result => {
      /* istanbul ignore next */
      cov_2i6bs01ag9().f[10]++;
      cov_2i6bs01ag9().s[27]++;
      return {
        item: result.item,
        score:
        /* istanbul ignore next */
        (cov_2i6bs01ag9().b[10][0]++, result.score) ||
        /* istanbul ignore next */
        (cov_2i6bs01ag9().b[10][1]++, 0),
        matches:
        /* istanbul ignore next */
        (cov_2i6bs01ag9().b[11][0]++, result.matches?.map(match => {
          /* istanbul ignore next */
          cov_2i6bs01ag9().f[11]++;
          cov_2i6bs01ag9().s[28]++;
          return {
            field:
            /* istanbul ignore next */
            (cov_2i6bs01ag9().b[12][0]++, match.key) ||
            /* istanbul ignore next */
            (cov_2i6bs01ag9().b[12][1]++, ''),
            value:
            /* istanbul ignore next */
            (cov_2i6bs01ag9().b[13][0]++, match.value) ||
            /* istanbul ignore next */
            (cov_2i6bs01ag9().b[13][1]++, ''),
            indices: (
            /* istanbul ignore next */
            (cov_2i6bs01ag9().b[14][0]++, match.indices) ||
            /* istanbul ignore next */
            (cov_2i6bs01ag9().b[14][1]++, [])).map(tuple => {
              /* istanbul ignore next */
              cov_2i6bs01ag9().f[12]++;
              cov_2i6bs01ag9().s[29]++;
              return [tuple[0], tuple[1]];
            })
          };
        })) ||
        /* istanbul ignore next */
        (cov_2i6bs01ag9().b[11][1]++, [])
      };
    });
  }
  // Hybrid search: combines database search with fuzzy matching
  async hybridSearch(searchParams, options =
  /* istanbul ignore next */
  (cov_2i6bs01ag9().b[15][0]++, {})) {
    /* istanbul ignore next */
    cov_2i6bs01ag9().f[13]++;
    const startTime =
    /* istanbul ignore next */
    (cov_2i6bs01ag9().s[30]++, Date.now());
    // First, get results from database (handles complex filtering, pagination)
    const dbResults =
    /* istanbul ignore next */
    (cov_2i6bs01ag9().s[31]++, await (0, _planttaxonomy.searchPlants)(searchParams, options));
    // If we have a small result set, enhance with fuzzy search
    /* istanbul ignore next */
    cov_2i6bs01ag9().s[32]++;
    if (
    /* istanbul ignore next */
    (cov_2i6bs01ag9().b[17][0]++, dbResults.plants.length < 50) &&
    /* istanbul ignore next */
    (cov_2i6bs01ag9().b[17][1]++, searchParams.query.length >= 2)) {
      /* istanbul ignore next */
      cov_2i6bs01ag9().b[16][0]++;
      cov_2i6bs01ag9().s[33]++;
      // Initialize fuzzy search if needed
      if (this.needsRefresh()) {
        /* istanbul ignore next */
        cov_2i6bs01ag9().b[18][0]++;
        cov_2i6bs01ag9().s[34]++;
        await this.initializeIndex(dbResults.plants);
      } else
      /* istanbul ignore next */
      {
        cov_2i6bs01ag9().b[18][1]++;
      }
      // Perform fuzzy search on the database results
      const fuzzyResults =
      /* istanbul ignore next */
      (cov_2i6bs01ag9().s[35]++, this.fuzzySearch(searchParams.query, searchParams.limit));
      // Merge and re-rank results
      const mergedResults =
      /* istanbul ignore next */
      (cov_2i6bs01ag9().s[36]++, this.mergeSearchResults(dbResults.plants, fuzzyResults));
      /* istanbul ignore next */
      cov_2i6bs01ag9().s[37]++;
      return {
        ...dbResults,
        plants: mergedResults.slice(
        /* istanbul ignore next */
        (cov_2i6bs01ag9().b[19][0]++, searchParams.offset) ||
        /* istanbul ignore next */
        (cov_2i6bs01ag9().b[19][1]++, 0), (
        /* istanbul ignore next */
        (cov_2i6bs01ag9().b[20][0]++, searchParams.offset) ||
        /* istanbul ignore next */
        (cov_2i6bs01ag9().b[20][1]++, 0)) + searchParams.limit),
        searchTime: Date.now() - startTime
      };
    } else
    /* istanbul ignore next */
    {
      cov_2i6bs01ag9().b[16][1]++;
    }
    cov_2i6bs01ag9().s[38]++;
    return {
      ...dbResults,
      searchTime: Date.now() - startTime
    };
  }
  // Merge database and fuzzy search results with intelligent ranking
  mergeSearchResults(dbResults, fuzzyResults) {
    /* istanbul ignore next */
    cov_2i6bs01ag9().f[14]++;
    const resultMap =
    /* istanbul ignore next */
    (cov_2i6bs01ag9().s[39]++, new Map());
    // Add database results with their scores
    /* istanbul ignore next */
    cov_2i6bs01ag9().s[40]++;
    dbResults.forEach(plant => {
      /* istanbul ignore next */
      cov_2i6bs01ag9().f[15]++;
      cov_2i6bs01ag9().s[41]++;
      resultMap.set(plant.id, {
        ...plant,
        combinedScore:
        /* istanbul ignore next */
        (cov_2i6bs01ag9().b[21][0]++, plant.score) ||
        /* istanbul ignore next */
        (cov_2i6bs01ag9().b[21][1]++, 0)
      });
    });
    // Enhance with fuzzy search scores
    /* istanbul ignore next */
    cov_2i6bs01ag9().s[42]++;
    fuzzyResults.forEach(fuzzyResult => {
      /* istanbul ignore next */
      cov_2i6bs01ag9().f[16]++;
      const existing =
      /* istanbul ignore next */
      (cov_2i6bs01ag9().s[43]++, resultMap.get(fuzzyResult.item.id));
      /* istanbul ignore next */
      cov_2i6bs01ag9().s[44]++;
      if (existing) {
        /* istanbul ignore next */
        cov_2i6bs01ag9().b[22][0]++;
        cov_2i6bs01ag9().s[45]++;
        // Combine scores: database score (0-100) + fuzzy score (0-1) * 50
        existing.combinedScore = (
        /* istanbul ignore next */
        (cov_2i6bs01ag9().b[23][0]++, existing.combinedScore) ||
        /* istanbul ignore next */
        (cov_2i6bs01ag9().b[23][1]++, 0)) + (1 - fuzzyResult.score) * 50;
        /* istanbul ignore next */
        cov_2i6bs01ag9().s[46]++;
        existing.matchedFields = fuzzyResult.matches.map(m => {
          /* istanbul ignore next */
          cov_2i6bs01ag9().f[17]++;
          cov_2i6bs01ag9().s[47]++;
          return m.field;
        });
      } else {
        /* istanbul ignore next */
        cov_2i6bs01ag9().b[22][1]++;
        cov_2i6bs01ag9().s[48]++;
        // Add new fuzzy result
        resultMap.set(fuzzyResult.item.id, {
          ...fuzzyResult.item,
          combinedScore: (1 - fuzzyResult.score) * 50,
          matchedFields: fuzzyResult.matches.map(m => {
            /* istanbul ignore next */
            cov_2i6bs01ag9().f[18]++;
            cov_2i6bs01ag9().s[49]++;
            return m.field;
          })
        });
      }
    });
    // Sort by combined score and return
    /* istanbul ignore next */
    cov_2i6bs01ag9().s[50]++;
    return Array.from(resultMap.values()).sort((a, b) => {
      /* istanbul ignore next */
      cov_2i6bs01ag9().f[19]++;
      cov_2i6bs01ag9().s[51]++;
      return b.combinedScore - a.combinedScore;
    }).map(({
      combinedScore,
      ...plant
    }) => {
      /* istanbul ignore next */
      cov_2i6bs01ag9().f[20]++;
      cov_2i6bs01ag9().s[52]++;
      return {
        ...plant,
        score: Math.round(combinedScore)
      };
    });
  }
  // Get search suggestions based on partial input
  async getSearchSuggestions(partialQuery, limit =
  /* istanbul ignore next */
  (cov_2i6bs01ag9().b[24][0]++, 5)) {
    /* istanbul ignore next */
    cov_2i6bs01ag9().f[21]++;
    cov_2i6bs01ag9().s[53]++;
    if (partialQuery.length < 2) {
      /* istanbul ignore next */
      cov_2i6bs01ag9().b[25][0]++;
      cov_2i6bs01ag9().s[54]++;
      return [];
    } else
    /* istanbul ignore next */
    {
      cov_2i6bs01ag9().b[25][1]++;
    }
    const suggestions =
    /* istanbul ignore next */
    (cov_2i6bs01ag9().s[55]++, new Set());
    // Get fuzzy matches
    const fuzzyResults =
    /* istanbul ignore next */
    (cov_2i6bs01ag9().s[56]++, this.fuzzySearch(partialQuery, limit * 2));
    /* istanbul ignore next */
    cov_2i6bs01ag9().s[57]++;
    fuzzyResults.forEach(result => {
      /* istanbul ignore next */
      cov_2i6bs01ag9().f[22]++;
      cov_2i6bs01ag9().s[58]++;
      // Add common name
      if (result.item.commonName.toLowerCase().includes(partialQuery.toLowerCase())) {
        /* istanbul ignore next */
        cov_2i6bs01ag9().b[26][0]++;
        cov_2i6bs01ag9().s[59]++;
        suggestions.add(result.item.commonName);
      } else
      /* istanbul ignore next */
      {
        cov_2i6bs01ag9().b[26][1]++;
      }
      // Add scientific name
      const scientificName =
      /* istanbul ignore next */
      (cov_2i6bs01ag9().s[60]++, `${result.item.genus} ${result.item.species}`);
      /* istanbul ignore next */
      cov_2i6bs01ag9().s[61]++;
      if (scientificName.toLowerCase().includes(partialQuery.toLowerCase())) {
        /* istanbul ignore next */
        cov_2i6bs01ag9().b[27][0]++;
        cov_2i6bs01ag9().s[62]++;
        suggestions.add(scientificName);
      } else
      /* istanbul ignore next */
      {
        cov_2i6bs01ag9().b[27][1]++;
      }
      // Add genus if it matches
      cov_2i6bs01ag9().s[63]++;
      if (result.item.genus.toLowerCase().includes(partialQuery.toLowerCase())) {
        /* istanbul ignore next */
        cov_2i6bs01ag9().b[28][0]++;
        cov_2i6bs01ag9().s[64]++;
        suggestions.add(result.item.genus);
      } else
      /* istanbul ignore next */
      {
        cov_2i6bs01ag9().b[28][1]++;
      }
    });
    /* istanbul ignore next */
    cov_2i6bs01ag9().s[65]++;
    return Array.from(suggestions).slice(0, limit);
  }
  // Advanced search with multiple criteria
  async advancedSearch(criteria) {
    /* istanbul ignore next */
    cov_2i6bs01ag9().f[23]++;
    const searchParams =
    /* istanbul ignore next */
    (cov_2i6bs01ag9().s[66]++, {
      query:
      /* istanbul ignore next */
      (cov_2i6bs01ag9().b[29][0]++, criteria.query) ||
      /* istanbul ignore next */
      (cov_2i6bs01ag9().b[29][1]++, ''),
      limit:
      /* istanbul ignore next */
      (cov_2i6bs01ag9().b[30][0]++, criteria.limit) ||
      /* istanbul ignore next */
      (cov_2i6bs01ag9().b[30][1]++, 20),
      offset:
      /* istanbul ignore next */
      (cov_2i6bs01ag9().b[31][0]++, criteria.offset) ||
      /* istanbul ignore next */
      (cov_2i6bs01ag9().b[31][1]++, 0),
      includeUnverified: criteria.isVerified === undefined ?
      /* istanbul ignore next */
      (cov_2i6bs01ag9().b[32][0]++, true) :
      /* istanbul ignore next */
      (cov_2i6bs01ag9().b[32][1]++, !criteria.isVerified)
    });
    const options =
    /* istanbul ignore next */
    (cov_2i6bs01ag9().s[67]++, {
      filters: {
        family: criteria.family,
        genus: criteria.genus,
        isVerified: criteria.isVerified
      }
    });
    // If we have specific field criteria, use exact matching
    /* istanbul ignore next */
    cov_2i6bs01ag9().s[68]++;
    if (
    /* istanbul ignore next */
    (cov_2i6bs01ag9().b[34][0]++, criteria.family) ||
    /* istanbul ignore next */
    (cov_2i6bs01ag9().b[34][1]++, criteria.genus) ||
    /* istanbul ignore next */
    (cov_2i6bs01ag9().b[34][2]++, criteria.species) ||
    /* istanbul ignore next */
    (cov_2i6bs01ag9().b[34][3]++, criteria.commonName)) {
      /* istanbul ignore next */
      cov_2i6bs01ag9().b[33][0]++;
      cov_2i6bs01ag9().s[69]++;
      return await (0, _planttaxonomy.searchPlants)(searchParams, options);
    } else
    /* istanbul ignore next */
    {
      cov_2i6bs01ag9().b[33][1]++;
    }
    // Otherwise use hybrid search
    cov_2i6bs01ag9().s[70]++;
    return await this.hybridSearch(searchParams, options);
  }
  // Clear the search cache
  clearCache() {
    /* istanbul ignore next */
    cov_2i6bs01ag9().f[24]++;
    cov_2i6bs01ag9().s[71]++;
    this.fuseInstance = null;
    /* istanbul ignore next */
    cov_2i6bs01ag9().s[72]++;
    this.plantData = [];
    /* istanbul ignore next */
    cov_2i6bs01ag9().s[73]++;
    this.lastUpdate = null;
  }
  // Get cache statistics
  getCacheStats() {
    /* istanbul ignore next */
    cov_2i6bs01ag9().f[25]++;
    cov_2i6bs01ag9().s[74]++;
    return {
      isInitialized: !!this.fuseInstance,
      plantCount: this.plantData.length,
      lastUpdate: this.lastUpdate,
      needsRefresh: this.needsRefresh()
    };
  }
}
const plantSearchService =
/* istanbul ignore next */
(cov_2i6bs01ag9().s[75]++, new PlantSearchService());
const searchUtils =
/* istanbul ignore next */
(cov_2i6bs01ag9().s[76]++, {
  // Highlight matched terms in text
  highlightMatches(text, matches) {
    /* istanbul ignore next */
    cov_2i6bs01ag9().f[26]++;
    cov_2i6bs01ag9().s[77]++;
    if (!matches.length) {
      /* istanbul ignore next */
      cov_2i6bs01ag9().b[35][0]++;
      cov_2i6bs01ag9().s[78]++;
      return text;
    } else
    /* istanbul ignore next */
    {
      cov_2i6bs01ag9().b[35][1]++;
    }
    let highlightedText =
    /* istanbul ignore next */
    (cov_2i6bs01ag9().s[79]++, text);
    /* istanbul ignore next */
    cov_2i6bs01ag9().s[80]++;
    matches.forEach(match => {
      /* istanbul ignore next */
      cov_2i6bs01ag9().f[27]++;
      const regex =
      /* istanbul ignore next */
      (cov_2i6bs01ag9().s[81]++, new RegExp(`(${match})`, 'gi'));
      /* istanbul ignore next */
      cov_2i6bs01ag9().s[82]++;
      highlightedText = highlightedText.replace(regex, '<mark>$1</mark>');
    });
    /* istanbul ignore next */
    cov_2i6bs01ag9().s[83]++;
    return highlightedText;
  },
  // Extract search keywords from query
  extractKeywords(query) {
    /* istanbul ignore next */
    cov_2i6bs01ag9().f[28]++;
    cov_2i6bs01ag9().s[84]++;
    return query.toLowerCase().split(/[\s,\-_]+/).filter(keyword => {
      /* istanbul ignore next */
      cov_2i6bs01ag9().f[29]++;
      cov_2i6bs01ag9().s[85]++;
      return keyword.length > 1;
    }).slice(0, 5); // Limit to 5 keywords
  },
  // Generate search suggestions based on common patterns
  generateQuerySuggestions(query) {
    /* istanbul ignore next */
    cov_2i6bs01ag9().f[30]++;
    const suggestions =
    /* istanbul ignore next */
    (cov_2i6bs01ag9().s[86]++, []);
    // If query looks like scientific name (two words)
    const words =
    /* istanbul ignore next */
    (cov_2i6bs01ag9().s[87]++, query.trim().split(/\s+/));
    /* istanbul ignore next */
    cov_2i6bs01ag9().s[88]++;
    if (words.length === 2) {
      /* istanbul ignore next */
      cov_2i6bs01ag9().b[36][0]++;
      cov_2i6bs01ag9().s[89]++;
      suggestions.push(`${words[0]} ${words[1]}`); // Exact scientific name
      /* istanbul ignore next */
      cov_2i6bs01ag9().s[90]++;
      suggestions.push(words[0]); // Just genus
      /* istanbul ignore next */
      cov_2i6bs01ag9().s[91]++;
      suggestions.push(words[1]); // Just species
    } else
    /* istanbul ignore next */
    {
      cov_2i6bs01ag9().b[36][1]++;
    }
    // Add partial matches
    cov_2i6bs01ag9().s[92]++;
    if (query.length >= 3) {
      /* istanbul ignore next */
      cov_2i6bs01ag9().b[37][0]++;
      cov_2i6bs01ag9().s[93]++;
      suggestions.push(`${query}*`); // Prefix search
    } else
    /* istanbul ignore next */
    {
      cov_2i6bs01ag9().b[37][1]++;
    }
    cov_2i6bs01ag9().s[94]++;
    return suggestions.filter(s => {
      /* istanbul ignore next */
      cov_2i6bs01ag9().f[31]++;
      cov_2i6bs01ag9().s[95]++;
      return s !== query;
    }).slice(0, 3);
  },
  // Score search result relevance
  calculateRelevanceScore(plant, query, matchedFields =
  /* istanbul ignore next */
  (cov_2i6bs01ag9().b[38][0]++, [])) {
    /* istanbul ignore next */
    cov_2i6bs01ag9().f[32]++;
    let score =
    /* istanbul ignore next */
    (cov_2i6bs01ag9().s[96]++, 0);
    const lowerQuery =
    /* istanbul ignore next */
    (cov_2i6bs01ag9().s[97]++, query.toLowerCase());
    // Exact matches get highest scores
    /* istanbul ignore next */
    cov_2i6bs01ag9().s[98]++;
    if (plant.commonName.toLowerCase() === lowerQuery) {
      /* istanbul ignore next */
      cov_2i6bs01ag9().b[39][0]++;
      cov_2i6bs01ag9().s[99]++;
      score += 100;
    } else {
      /* istanbul ignore next */
      cov_2i6bs01ag9().b[39][1]++;
      cov_2i6bs01ag9().s[100]++;
      if (plant.commonName.toLowerCase().startsWith(lowerQuery)) {
        /* istanbul ignore next */
        cov_2i6bs01ag9().b[40][0]++;
        cov_2i6bs01ag9().s[101]++;
        score += 80;
      } else {
        /* istanbul ignore next */
        cov_2i6bs01ag9().b[40][1]++;
        cov_2i6bs01ag9().s[102]++;
        if (plant.commonName.toLowerCase().includes(lowerQuery)) {
          /* istanbul ignore next */
          cov_2i6bs01ag9().b[41][0]++;
          cov_2i6bs01ag9().s[103]++;
          score += 60;
        } else
        /* istanbul ignore next */
        {
          cov_2i6bs01ag9().b[41][1]++;
        }
      }
    }
    const scientificName =
    /* istanbul ignore next */
    (cov_2i6bs01ag9().s[104]++, `${plant.genus} ${plant.species}`.toLowerCase());
    /* istanbul ignore next */
    cov_2i6bs01ag9().s[105]++;
    if (scientificName === lowerQuery) {
      /* istanbul ignore next */
      cov_2i6bs01ag9().b[42][0]++;
      cov_2i6bs01ag9().s[106]++;
      score += 90;
    } else {
      /* istanbul ignore next */
      cov_2i6bs01ag9().b[42][1]++;
      cov_2i6bs01ag9().s[107]++;
      if (scientificName.startsWith(lowerQuery)) {
        /* istanbul ignore next */
        cov_2i6bs01ag9().b[43][0]++;
        cov_2i6bs01ag9().s[108]++;
        score += 70;
      } else {
        /* istanbul ignore next */
        cov_2i6bs01ag9().b[43][1]++;
        cov_2i6bs01ag9().s[109]++;
        if (scientificName.includes(lowerQuery)) {
          /* istanbul ignore next */
          cov_2i6bs01ag9().b[44][0]++;
          cov_2i6bs01ag9().s[110]++;
          score += 50;
        } else
        /* istanbul ignore next */
        {
          cov_2i6bs01ag9().b[44][1]++;
        }
      }
    }
    /* istanbul ignore next */
    cov_2i6bs01ag9().s[111]++;
    if (plant.genus.toLowerCase() === lowerQuery) {
      /* istanbul ignore next */
      cov_2i6bs01ag9().b[45][0]++;
      cov_2i6bs01ag9().s[112]++;
      score += 75;
    } else
    /* istanbul ignore next */
    {
      cov_2i6bs01ag9().b[45][1]++;
    }
    cov_2i6bs01ag9().s[113]++;
    if (plant.species.toLowerCase() === lowerQuery) {
      /* istanbul ignore next */
      cov_2i6bs01ag9().b[46][0]++;
      cov_2i6bs01ag9().s[114]++;
      score += 65;
    } else
    /* istanbul ignore next */
    {
      cov_2i6bs01ag9().b[46][1]++;
    }
    cov_2i6bs01ag9().s[115]++;
    if (plant.family.toLowerCase() === lowerQuery) {
      /* istanbul ignore next */
      cov_2i6bs01ag9().b[47][0]++;
      cov_2i6bs01ag9().s[116]++;
      score += 55;
    } else
    /* istanbul ignore next */
    {
      cov_2i6bs01ag9().b[47][1]++;
    }
    // Boost verified plants
    cov_2i6bs01ag9().s[117]++;
    if (plant.isVerified) {
      /* istanbul ignore next */
      cov_2i6bs01ag9().b[48][0]++;
      cov_2i6bs01ag9().s[118]++;
      score += 10;
    } else
    /* istanbul ignore next */
    {
      cov_2i6bs01ag9().b[48][1]++;
    }
    // Boost based on matched fields
    cov_2i6bs01ag9().s[119]++;
    matchedFields.forEach(field => {
      /* istanbul ignore next */
      cov_2i6bs01ag9().f[33]++;
      cov_2i6bs01ag9().s[120]++;
      if (field === 'commonName') {
        /* istanbul ignore next */
        cov_2i6bs01ag9().b[49][0]++;
        cov_2i6bs01ag9().s[121]++;
        score += 5;
      } else
      /* istanbul ignore next */
      {
        cov_2i6bs01ag9().b[49][1]++;
      }
      cov_2i6bs01ag9().s[122]++;
      if (field === 'genus') {
        /* istanbul ignore next */
        cov_2i6bs01ag9().b[50][0]++;
        cov_2i6bs01ag9().s[123]++;
        score += 3;
      } else
      /* istanbul ignore next */
      {
        cov_2i6bs01ag9().b[50][1]++;
      }
      cov_2i6bs01ag9().s[124]++;
      if (field === 'species') {
        /* istanbul ignore next */
        cov_2i6bs01ag9().b[51][0]++;
        cov_2i6bs01ag9().s[125]++;
        score += 2;
      } else
      /* istanbul ignore next */
      {
        cov_2i6bs01ag9().b[51][1]++;
      }
    });
    /* istanbul ignore next */
    cov_2i6bs01ag9().s[126]++;
    return Math.min(score, 100); // Cap at 100
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,