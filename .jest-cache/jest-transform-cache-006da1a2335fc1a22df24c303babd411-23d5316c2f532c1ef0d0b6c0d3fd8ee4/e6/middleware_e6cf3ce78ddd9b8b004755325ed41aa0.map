{"version":3,"sources":["/Users/stefanbekker/projects/fancy-planties/middleware.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport type { NextRequest } from 'next/server';\n\n// Define protected routes that require authentication\nconst protectedRoutes = [\n  '/dashboard',\n  '/api/plants',\n  '/api/propagations',\n  '/api/care',\n  '/api/user',\n];\n\n// Define routes that require email verification\nconst verificationRequiredRoutes = [\n  '/dashboard',\n  '/api/plants',\n  '/api/propagations',\n  '/api/care',\n  '/api/user',\n];\n\n// Define auth routes that should redirect if already authenticated\nconst authRoutes = [\n  '/auth/signin',\n  '/auth/signup',\n  '/auth/forgot-password',\n];\n\n// Define public API routes that don't require authentication\nconst publicApiRoutes = [\n  '/api/auth/signin',\n  '/api/auth/signup',\n  '/api/auth/signout',\n  '/api/auth/verify-email',\n  '/api/auth/resend-verification',\n  '/api/auth/check-verification',\n  '/api/health',\n];\n\nexport async function middleware(request: NextRequest) {\n  const { pathname } = request.nextUrl;\n  const sessionCookie = request.cookies.get('auth_session');\n  const isAuthenticated = !!sessionCookie?.value;\n\n  // Check if the route is protected\n  const isProtectedRoute = protectedRoutes.some(route => \n    pathname.startsWith(route)\n  );\n\n  // Check if the route requires email verification\n  const requiresVerification = verificationRequiredRoutes.some(route => \n    pathname.startsWith(route)\n  );\n\n  // Check if the route is an auth route\n  const isAuthRoute = authRoutes.some(route => \n    pathname.startsWith(route)\n  );\n\n  // Check if it's a public API route\n  const isPublicApiRoute = publicApiRoutes.some(route => \n    pathname.startsWith(route)\n  );\n\n  // Allow public API routes\n  if (isPublicApiRoute) {\n    return NextResponse.next();\n  }\n\n  // Allow access to email verification page for authenticated users\n  if (pathname === '/auth/verify-email' && isAuthenticated) {\n    return NextResponse.next();\n  }\n\n  // Redirect unauthenticated users from protected routes\n  if (isProtectedRoute && !isAuthenticated) {\n    const signInUrl = new URL('/auth/signin', request.url);\n    signInUrl.searchParams.set('redirect', pathname);\n    return NextResponse.redirect(signInUrl);\n  }\n\n  // Check email verification for authenticated users on verification-required routes\n  if (requiresVerification && isAuthenticated && sessionCookie?.value) {\n    try {\n      // Make a request to our internal API to check verification status\n      const verificationCheckUrl = new URL('/api/auth/check-verification', request.url);\n      const verificationResponse = await fetch(verificationCheckUrl, {\n        headers: {\n          'Cookie': request.headers.get('cookie') || '',\n        },\n      });\n      \n      if (verificationResponse.ok) {\n        const { isVerified } = await verificationResponse.json();\n        \n        if (!isVerified) {\n          // For API routes, return 403 instead of redirect\n          if (pathname.startsWith('/api/')) {\n            return NextResponse.json(\n              { \n                error: 'Email verification required',\n                code: 'EMAIL_VERIFICATION_REQUIRED',\n                message: 'Please verify your email address to access this resource.'\n              },\n              { status: 403 }\n            );\n          }\n          \n          // For page routes, redirect to verification page\n          return NextResponse.redirect(new URL('/auth/verify-email', request.url));\n        }\n      } else if (verificationResponse.status === 401) {\n        // User is not authenticated, redirect to signin\n        const signInUrl = new URL('/auth/signin', request.url);\n        signInUrl.searchParams.set('redirect', pathname);\n        return NextResponse.redirect(signInUrl);\n      }\n    } catch (error) {\n      // If verification check fails, allow the request to continue\n      // The individual route handlers will handle authentication\n      console.error('Verification check error in middleware:', error);\n    }\n  }\n\n  // Redirect authenticated users from auth routes (except verify-email)\n  if (isAuthRoute && isAuthenticated && pathname !== '/auth/verify-email') {\n    const redirectUrl = request.nextUrl.searchParams.get('redirect') || '/dashboard';\n    return NextResponse.redirect(new URL(redirectUrl, request.url));\n  }\n\n  // Add security headers\n  const response = NextResponse.next();\n  \n  // Security headers\n  response.headers.set('X-Frame-Options', 'DENY');\n  response.headers.set('X-Content-Type-Options', 'nosniff');\n  response.headers.set('Referrer-Policy', 'strict-origin-when-cross-origin');\n  response.headers.set('X-XSS-Protection', '1; mode=block');\n  \n  // CSP header for enhanced security\n  const cspHeader = [\n    \"default-src 'self'\",\n    \"script-src 'self' 'unsafe-inline' 'unsafe-eval'\", // Next.js requires unsafe-inline and unsafe-eval\n    \"style-src 'self' 'unsafe-inline'\", // Tailwind requires unsafe-inline\n    \"img-src 'self' data: blob:\",\n    \"font-src 'self'\",\n    \"connect-src 'self'\",\n    \"frame-ancestors 'none'\",\n  ].join('; ');\n  \n  response.headers.set('Content-Security-Policy', cspHeader);\n\n  return response;\n}\n\n// Configure which routes the middleware should run on\nexport const config = {\n  matcher: [\n    /*\n     * Match all request paths except for the ones starting with:\n     * - _next/static (static files)\n     * - _next/image (image optimization files)\n     * - favicon.ico (favicon file)\n     * - public folder files\n     */\n    '/((?!_next/static|_next/image|favicon.ico|.*\\\\.(?:svg|png|jpg|jpeg|gif|webp)$).*)',\n  ],\n};"],"names":["config","middleware","protectedRoutes","verificationRequiredRoutes","authRoutes","publicApiRoutes","request","pathname","nextUrl","sessionCookie","cookies","get","isAuthenticated","value","isProtectedRoute","some","route","startsWith","requiresVerification","isAuthRoute","isPublicApiRoute","NextResponse","next","signInUrl","URL","url","searchParams","set","redirect","verificationCheckUrl","verificationResponse","fetch","headers","ok","isVerified","json","error","code","message","status","console","redirectUrl","response","cspHeader","join","matcher"],"mappings":"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"}