f53320f386f301da7518bd4ba970dcd9
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "PlantInstanceQueries", {
    enumerable: true,
    get: function() {
        return PlantInstanceQueries;
    }
});
const _drizzleorm = require("drizzle-orm");
const _index = require("../index");
const _schema = require("../schema");
const _plantinstancetypes = require("../../types/plant-instance-types");
class PlantInstanceQueries {
    // Create a new plant instance
    static async create(instanceData) {
        try {
            const [instance] = await _index.db.insert(_schema.plantInstances).values(instanceData).returning();
            return instance;
        } catch (error) {
            console.error('Failed to create plant instance:', error);
            throw new Error('Failed to create plant instance');
        }
    }
    // Get plant instance by ID with plant taxonomy data
    static async getById(id) {
        try {
            const [instance] = await _index.db.select().from(_schema.plantInstances).leftJoin(_schema.plants, (0, _drizzleorm.eq)(_schema.plantInstances.plantId, _schema.plants.id)).where((0, _drizzleorm.eq)(_schema.plantInstances.id, id));
            if (!instance) return null;
            return {
                ...instance.plant_instances,
                plant: instance.plants
            };
        } catch (error) {
            console.error('Failed to get plant instance by ID:', error);
            throw new Error('Failed to get plant instance');
        }
    }
    // Get all plant instances for a user
    static async getByUserId(userId, activeOnly = true) {
        try {
            const conditions = [
                (0, _drizzleorm.eq)(_schema.plantInstances.userId, userId)
            ];
            if (activeOnly) {
                conditions.push((0, _drizzleorm.eq)(_schema.plantInstances.isActive, true));
            }
            const instances = await _index.db.select().from(_schema.plantInstances).leftJoin(_schema.plants, (0, _drizzleorm.eq)(_schema.plantInstances.plantId, _schema.plants.id)).where((0, _drizzleorm.and)(...conditions)).orderBy((0, _drizzleorm.desc)(_schema.plantInstances.createdAt));
            return instances.map((instance)=>({
                    ...instance.plant_instances,
                    plant: instance.plants
                }));
        } catch (error) {
            console.error('Failed to get plant instances by user ID:', error);
            throw new Error('Failed to get plant instances');
        }
    }
    // Get plant instances with overdue fertilizer
    static async getOverdueFertilizer(userId) {
        try {
            const now = new Date();
            const instances = await _index.db.select().from(_schema.plantInstances).leftJoin(_schema.plants, (0, _drizzleorm.eq)(_schema.plantInstances.plantId, _schema.plants.id)).where((0, _drizzleorm.and)((0, _drizzleorm.eq)(_schema.plantInstances.userId, userId), (0, _drizzleorm.eq)(_schema.plantInstances.isActive, true), (0, _drizzleorm.isNotNull)(_schema.plantInstances.fertilizerDue), (0, _drizzleorm.lte)(_schema.plantInstances.fertilizerDue, now))).orderBy((0, _drizzleorm.asc)(_schema.plantInstances.fertilizerDue));
            return instances.map((instance)=>({
                    ...instance.plant_instances,
                    plant: instance.plants
                }));
        } catch (error) {
            console.error('Failed to get overdue fertilizer instances:', error);
            throw new Error('Failed to get overdue fertilizer instances');
        }
    }
    // Get plant instances with fertilizer due soon
    static async getFertilizerDueSoon(userId, daysAhead = 7) {
        try {
            const now = new Date();
            const futureDate = new Date();
            futureDate.setDate(now.getDate() + daysAhead);
            const instances = await _index.db.select().from(_schema.plantInstances).leftJoin(_schema.plants, (0, _drizzleorm.eq)(_schema.plantInstances.plantId, _schema.plants.id)).where((0, _drizzleorm.and)((0, _drizzleorm.eq)(_schema.plantInstances.userId, userId), (0, _drizzleorm.eq)(_schema.plantInstances.isActive, true), (0, _drizzleorm.isNotNull)(_schema.plantInstances.fertilizerDue), (0, _drizzleorm.gte)(_schema.plantInstances.fertilizerDue, now), (0, _drizzleorm.lte)(_schema.plantInstances.fertilizerDue, futureDate))).orderBy((0, _drizzleorm.asc)(_schema.plantInstances.fertilizerDue));
            return instances.map((instance)=>({
                    ...instance.plant_instances,
                    plant: instance.plants
                }));
        } catch (error) {
            console.error('Failed to get fertilizer due soon instances:', error);
            throw new Error('Failed to get fertilizer due soon instances');
        }
    }
    // Search plant instances by nickname, location, or notes
    static async search(userId, query) {
        try {
            const searchTerm = `%${query.toLowerCase()}%`;
            const instances = await _index.db.select().from(_schema.plantInstances).leftJoin(_schema.plants, (0, _drizzleorm.eq)(_schema.plantInstances.plantId, _schema.plants.id)).where((0, _drizzleorm.and)((0, _drizzleorm.eq)(_schema.plantInstances.userId, userId), (0, _drizzleorm.eq)(_schema.plantInstances.isActive, true), (0, _drizzleorm.or)((0, _drizzleorm.ilike)(_schema.plantInstances.nickname, searchTerm), (0, _drizzleorm.ilike)(_schema.plantInstances.location, searchTerm), (0, _drizzleorm.ilike)(_schema.plantInstances.notes, searchTerm), (0, _drizzleorm.ilike)(_schema.plants.commonName, searchTerm), (0, _drizzleorm.ilike)(_schema.plants.genus, searchTerm), (0, _drizzleorm.ilike)(_schema.plants.species, searchTerm)))).orderBy((0, _drizzleorm.desc)(_schema.plantInstances.createdAt));
            return instances.map((instance)=>({
                    ...instance.plant_instances,
                    plant: instance.plants
                }));
        } catch (error) {
            console.error('Failed to search plant instances:', error);
            throw new Error('Failed to search plant instances');
        }
    }
    // Update plant instance
    static async update(id, instanceData) {
        try {
            const [instance] = await _index.db.update(_schema.plantInstances).set({
                ...instanceData,
                updatedAt: new Date()
            }).where((0, _drizzleorm.eq)(_schema.plantInstances.id, id)).returning();
            if (!instance) {
                throw new Error('Plant instance not found');
            }
            return instance;
        } catch (error) {
            console.error('Failed to update plant instance:', error);
            throw new Error('Failed to update plant instance');
        }
    }
    // Log fertilizer application and calculate next due date
    static async logFertilizer(id, fertilizerDate) {
        try {
            const now = fertilizerDate || new Date();
            // Get current instance to calculate next due date
            const [currentInstance] = await _index.db.select().from(_schema.plantInstances).where((0, _drizzleorm.eq)(_schema.plantInstances.id, id));
            if (!currentInstance) {
                throw new Error('Plant instance not found');
            }
            // Calculate next fertilizer due date based on schedule
            let nextDue = null;
            if (currentInstance.fertilizerSchedule) {
                const scheduleMatch = currentInstance.fertilizerSchedule.match(/(\d+)\s*(day|week|month)s?/i);
                if (scheduleMatch) {
                    const [, amount, unit] = scheduleMatch;
                    nextDue = new Date(now);
                    switch(unit.toLowerCase()){
                        case 'day':
                            nextDue.setDate(nextDue.getDate() + parseInt(amount, 10));
                            break;
                        case 'week':
                            nextDue.setDate(nextDue.getDate() + parseInt(amount, 10) * 7);
                            break;
                        case 'month':
                            nextDue.setMonth(nextDue.getMonth() + parseInt(amount, 10));
                            break;
                    }
                }
            }
            const [instance] = await _index.db.update(_schema.plantInstances).set({
                lastFertilized: now,
                fertilizerDue: nextDue,
                updatedAt: new Date()
            }).where((0, _drizzleorm.eq)(_schema.plantInstances.id, id)).returning();
            return instance;
        } catch (error) {
            console.error('Failed to log fertilizer:', error);
            throw new Error('Failed to log fertilizer');
        }
    }
    // Log repotting
    static async logRepot(id, repotDate, notes) {
        try {
            const now = repotDate || new Date();
            const updateData = {
                lastRepot: now,
                updatedAt: new Date()
            };
            if (notes) {
                // Get current instance to append notes
                const [currentInstance] = await _index.db.select().from(_schema.plantInstances).where((0, _drizzleorm.eq)(_schema.plantInstances.id, id));
                if (currentInstance) {
                    const existingNotes = currentInstance.notes || '';
                    const repotNote = `Repotted on ${now.toDateString()}: ${notes}`;
                    updateData.notes = existingNotes ? `${existingNotes}\n${repotNote}` : repotNote;
                }
            }
            const [instance] = await _index.db.update(_schema.plantInstances).set(updateData).where((0, _drizzleorm.eq)(_schema.plantInstances.id, id)).returning();
            if (!instance) {
                throw new Error('Plant instance not found');
            }
            return instance;
        } catch (error) {
            console.error('Failed to log repot:', error);
            throw new Error('Failed to log repot');
        }
    }
    // Deactivate plant instance (soft delete)
    static async deactivate(id) {
        try {
            const [instance] = await _index.db.update(_schema.plantInstances).set({
                isActive: false,
                updatedAt: new Date()
            }).where((0, _drizzleorm.eq)(_schema.plantInstances.id, id)).returning();
            if (!instance) {
                throw new Error('Plant instance not found');
            }
            return instance;
        } catch (error) {
            console.error('Failed to deactivate plant instance:', error);
            throw new Error('Failed to deactivate plant instance');
        }
    }
    // Reactivate plant instance
    static async reactivate(id) {
        try {
            const [instance] = await _index.db.update(_schema.plantInstances).set({
                isActive: true,
                updatedAt: new Date()
            }).where((0, _drizzleorm.eq)(_schema.plantInstances.id, id)).returning();
            if (!instance) {
                throw new Error('Plant instance not found');
            }
            return instance;
        } catch (error) {
            console.error('Failed to reactivate plant instance:', error);
            throw new Error('Failed to reactivate plant instance');
        }
    }
    // Delete plant instance permanently
    static async delete(id) {
        try {
            const result = await _index.db.delete(_schema.plantInstances).where((0, _drizzleorm.eq)(_schema.plantInstances.id, id));
            return result.length > 0;
        } catch (error) {
            console.error('Failed to delete plant instance:', error);
            throw new Error('Failed to delete plant instance');
        }
    }
    // Get care statistics for a user
    static async getCareStats(userId) {
        try {
            const now = new Date();
            const weekFromNow = new Date();
            weekFromNow.setDate(now.getDate() + 7);
            const [stats] = await _index.db.select({
                totalPlants: (0, _drizzleorm.sql)`count(*)`,
                activePlants: (0, _drizzleorm.sql)`count(*) filter (where ${_schema.plantInstances.isActive} = true)`,
                overdueFertilizer: (0, _drizzleorm.sql)`count(*) filter (where ${_schema.plantInstances.isActive} = true and ${_schema.plantInstances.fertilizerDue} <= ${now})`,
                dueSoon: (0, _drizzleorm.sql)`count(*) filter (where ${_schema.plantInstances.isActive} = true and ${_schema.plantInstances.fertilizerDue} > ${now} and ${_schema.plantInstances.fertilizerDue} <= ${weekFromNow})`
            }).from(_schema.plantInstances).where((0, _drizzleorm.eq)(_schema.plantInstances.userId, userId));
            return stats;
        } catch (error) {
            console.error('Failed to get care stats:', error);
            throw new Error('Failed to get care stats');
        }
    }
    // Enhanced search with filters
    static async searchWithFilters(searchParams) {
        try {
            const startTime = Date.now();
            const { query, userId, activeOnly, limit, offset } = searchParams;
            const searchTerm = `%${query.toLowerCase()}%`;
            const conditions = [
                (0, _drizzleorm.eq)(_schema.plantInstances.userId, userId)
            ];
            if (activeOnly) {
                conditions.push((0, _drizzleorm.eq)(_schema.plantInstances.isActive, true));
            }
            // Add search conditions
            conditions.push((0, _drizzleorm.or)((0, _drizzleorm.ilike)(_schema.plantInstances.nickname, searchTerm), (0, _drizzleorm.ilike)(_schema.plantInstances.location, searchTerm), (0, _drizzleorm.ilike)(_schema.plantInstances.notes, searchTerm), (0, _drizzleorm.ilike)(_schema.plants.commonName, searchTerm), (0, _drizzleorm.ilike)(_schema.plants.genus, searchTerm), (0, _drizzleorm.ilike)(_schema.plants.species, searchTerm), (0, _drizzleorm.ilike)(_schema.plants.family, searchTerm)));
            // Get total count
            const [countResult] = await _index.db.select({
                count: (0, _drizzleorm.sql)`count(*)`
            }).from(_schema.plantInstances).leftJoin(_schema.plants, (0, _drizzleorm.eq)(_schema.plantInstances.plantId, _schema.plants.id)).where((0, _drizzleorm.and)(...conditions));
            const totalCount = countResult.count;
            // Get instances with plant data
            const instances = await _index.db.select().from(_schema.plantInstances).leftJoin(_schema.plants, (0, _drizzleorm.eq)(_schema.plantInstances.plantId, _schema.plants.id)).where((0, _drizzleorm.and)(...conditions)).orderBy((0, _drizzleorm.desc)(_schema.plantInstances.createdAt)).limit(limit).offset(offset);
            const enhancedInstances = instances.map((instance)=>_plantinstancetypes.plantInstanceHelpers.enhancePlantInstance(instance.plant_instances, instance.plants));
            const searchTime = Date.now() - startTime;
            return {
                instances: enhancedInstances,
                totalCount,
                hasMore: offset + limit < totalCount,
                searchTime,
                filters: {
                    ...searchParams,
                    overdueOnly: false
                }
            };
        } catch (error) {
            console.error('Failed to search plant instances with filters:', error);
            throw new Error('Failed to search plant instances');
        }
    }
    // Advanced filtering
    static async getWithFilters(filterParams) {
        try {
            const startTime = Date.now();
            const { userId, location, plantId, isActive, overdueOnly, dueSoonDays, createdAfter, createdBefore, lastFertilizedAfter, lastFertilizedBefore, limit, offset } = filterParams;
            const conditions = [
                (0, _drizzleorm.eq)(_schema.plantInstances.userId, userId)
            ];
            // Apply filters
            if (location) {
                conditions.push((0, _drizzleorm.ilike)(_schema.plantInstances.location, `%${location}%`));
            }
            if (plantId) {
                conditions.push((0, _drizzleorm.eq)(_schema.plantInstances.plantId, plantId));
            }
            if (isActive !== undefined) {
                conditions.push((0, _drizzleorm.eq)(_schema.plantInstances.isActive, isActive));
            }
            if (overdueOnly) {
                const now = new Date();
                conditions.push((0, _drizzleorm.and)((0, _drizzleorm.isNotNull)(_schema.plantInstances.fertilizerDue), (0, _drizzleorm.lte)(_schema.plantInstances.fertilizerDue, now)));
            }
            if (dueSoonDays) {
                const now = new Date();
                const futureDate = new Date();
                futureDate.setDate(now.getDate() + dueSoonDays);
                conditions.push((0, _drizzleorm.and)((0, _drizzleorm.isNotNull)(_schema.plantInstances.fertilizerDue), (0, _drizzleorm.gte)(_schema.plantInstances.fertilizerDue, now), (0, _drizzleorm.lte)(_schema.plantInstances.fertilizerDue, futureDate)));
            }
            if (createdAfter) {
                conditions.push((0, _drizzleorm.gte)(_schema.plantInstances.createdAt, createdAfter));
            }
            if (createdBefore) {
                conditions.push((0, _drizzleorm.lte)(_schema.plantInstances.createdAt, createdBefore));
            }
            if (lastFertilizedAfter) {
                conditions.push((0, _drizzleorm.and)((0, _drizzleorm.isNotNull)(_schema.plantInstances.lastFertilized), (0, _drizzleorm.gte)(_schema.plantInstances.lastFertilized, lastFertilizedAfter)));
            }
            if (lastFertilizedBefore) {
                conditions.push((0, _drizzleorm.and)((0, _drizzleorm.isNotNull)(_schema.plantInstances.lastFertilized), (0, _drizzleorm.lte)(_schema.plantInstances.lastFertilized, lastFertilizedBefore)));
            }
            // Get total count
            const [countResult] = await _index.db.select({
                count: (0, _drizzleorm.sql)`count(*)`
            }).from(_schema.plantInstances).leftJoin(_schema.plants, (0, _drizzleorm.eq)(_schema.plantInstances.plantId, _schema.plants.id)).where((0, _drizzleorm.and)(...conditions));
            const totalCount = countResult.count;
            // Get instances with plant data
            const instances = await _index.db.select().from(_schema.plantInstances).leftJoin(_schema.plants, (0, _drizzleorm.eq)(_schema.plantInstances.plantId, _schema.plants.id)).where((0, _drizzleorm.and)(...conditions)).orderBy(overdueOnly || dueSoonDays ? (0, _drizzleorm.asc)(_schema.plantInstances.fertilizerDue) : (0, _drizzleorm.desc)(_schema.plantInstances.createdAt)).limit(limit).offset(offset);
            const enhancedInstances = instances.map((instance)=>_plantinstancetypes.plantInstanceHelpers.enhancePlantInstance(instance.plant_instances, instance.plants));
            const searchTime = Date.now() - startTime;
            return {
                instances: enhancedInstances,
                totalCount,
                hasMore: offset + limit < totalCount,
                searchTime,
                filters: filterParams
            };
        } catch (error) {
            console.error('Failed to get plant instances with filters:', error);
            throw new Error('Failed to get plant instances with filters');
        }
    }
    // Get enhanced plant instances for a user
    static async getEnhancedByUserId(userId, activeOnly = true) {
        try {
            const conditions = [
                (0, _drizzleorm.eq)(_schema.plantInstances.userId, userId)
            ];
            if (activeOnly) {
                conditions.push((0, _drizzleorm.eq)(_schema.plantInstances.isActive, true));
            }
            const instances = await _index.db.select().from(_schema.plantInstances).leftJoin(_schema.plants, (0, _drizzleorm.eq)(_schema.plantInstances.plantId, _schema.plants.id)).where((0, _drizzleorm.and)(...conditions)).orderBy((0, _drizzleorm.desc)(_schema.plantInstances.createdAt));
            return instances.map((instance)=>_plantinstancetypes.plantInstanceHelpers.enhancePlantInstance(instance.plant_instances, instance.plants));
        } catch (error) {
            console.error('Failed to get enhanced plant instances:', error);
            throw new Error('Failed to get enhanced plant instances');
        }
    }
    // Get care dashboard data
    static async getCareDashboardData(userId) {
        try {
            const now = new Date();
            const tomorrow = new Date();
            tomorrow.setDate(now.getDate() + 1);
            const weekFromNow = new Date();
            weekFromNow.setDate(now.getDate() + 7);
            // Get all active instances with plant data
            const instances = await this.getEnhancedByUserId(userId, true);
            // Categorize by care status
            const overdue = instances.filter((instance)=>instance.careStatus === 'overdue');
            const dueToday = instances.filter((instance)=>instance.careStatus === 'due_today');
            const dueSoon = instances.filter((instance)=>instance.careStatus === 'due_soon');
            // Get recently cared for plants (fertilized in last 7 days)
            const recentlyCared = instances.filter((instance)=>{
                if (!instance.lastFertilized) return false;
                const daysSince = _plantinstancetypes.plantInstanceHelpers.calculateDaysSinceLastFertilized(instance.lastFertilized);
                return daysSince !== null && daysSince <= 7;
            });
            // Calculate care streak (consecutive days with care activity)
            const careStreakDays = await this.calculateCareStreak(userId);
            return {
                overdue: _plantinstancetypes.plantInstanceHelpers.sortByCareUrgency(overdue),
                dueToday: _plantinstancetypes.plantInstanceHelpers.sortByCareUrgency(dueToday),
                dueSoon: _plantinstancetypes.plantInstanceHelpers.sortByCareUrgency(dueSoon),
                recentlyCared,
                statistics: {
                    totalActivePlants: instances.length,
                    overdueCount: overdue.length,
                    dueTodayCount: dueToday.length,
                    dueSoonCount: dueSoon.length,
                    careStreakDays
                }
            };
        } catch (error) {
            console.error('Failed to get care dashboard data:', error);
            throw new Error('Failed to get care dashboard data');
        }
    }
    // Calculate care streak
    static async calculateCareStreak(userId) {
        try {
            // This is a simplified implementation
            // In a real app, you might want to track care events in a separate table
            const instances = await _index.db.select({
                lastFertilized: _schema.plantInstances.lastFertilized
            }).from(_schema.plantInstances).where((0, _drizzleorm.and)((0, _drizzleorm.eq)(_schema.plantInstances.userId, userId), (0, _drizzleorm.eq)(_schema.plantInstances.isActive, true), (0, _drizzleorm.isNotNull)(_schema.plantInstances.lastFertilized))).orderBy((0, _drizzleorm.desc)(_schema.plantInstances.lastFertilized));
            if (instances.length === 0) return 0;
            // Simple streak calculation based on recent fertilizer applications
            let streak = 0;
            const now = new Date();
            for (const instance of instances){
                if (!instance.lastFertilized) break;
                const daysSince = Math.floor((now.getTime() - instance.lastFertilized.getTime()) / (1000 * 60 * 60 * 24));
                if (daysSince <= 1) {
                    streak = Math.max(streak, 1);
                }
            }
            return streak;
        } catch (error) {
            console.error('Failed to calculate care streak:', error);
            return 0;
        }
    }
    // Bulk operations
    static async bulkOperation(operation) {
        try {
            const { plantInstanceIds, operation: op, fertilizerDate, notes } = operation;
            const results = [];
            let successCount = 0;
            let failureCount = 0;
            for (const id of plantInstanceIds){
                try {
                    let result;
                    switch(op){
                        case 'activate':
                            result = await this.reactivate(id);
                            break;
                        case 'deactivate':
                            result = await this.deactivate(id);
                            break;
                        case 'delete':
                            await this.delete(id);
                            result = {
                                id
                            }; // Placeholder for deleted item
                            break;
                        case 'fertilize':
                            result = await this.logFertilizer(id, fertilizerDate);
                            break;
                        default:
                            throw new Error(`Unknown operation: ${op}`);
                    }
                    results.push({
                        plantInstanceId: id,
                        success: true
                    });
                    successCount++;
                } catch (error) {
                    results.push({
                        plantInstanceId: id,
                        success: false,
                        error: error instanceof Error ? error.message : 'Unknown error'
                    });
                    failureCount++;
                }
            }
            return {
                success: successCount > 0,
                successCount,
                failureCount,
                results
            };
        } catch (error) {
            console.error('Failed to perform bulk operation:', error);
            throw new Error('Failed to perform bulk operation');
        }
    }
    // Get plant instances by location
    static async getByLocation(userId, location) {
        try {
            const instances = await _index.db.select().from(_schema.plantInstances).leftJoin(_schema.plants, (0, _drizzleorm.eq)(_schema.plantInstances.plantId, _schema.plants.id)).where((0, _drizzleorm.and)((0, _drizzleorm.eq)(_schema.plantInstances.userId, userId), (0, _drizzleorm.eq)(_schema.plantInstances.isActive, true), (0, _drizzleorm.ilike)(_schema.plantInstances.location, `%${location}%`))).orderBy(_schema.plantInstances.nickname);
            return instances.map((instance)=>_plantinstancetypes.plantInstanceHelpers.enhancePlantInstance(instance.plant_instances, instance.plants));
        } catch (error) {
            console.error('Failed to get plant instances by location:', error);
            throw new Error('Failed to get plant instances by location');
        }
    }
    // Get unique locations for a user
    static async getUserLocations(userId) {
        try {
            const locations = await _index.db.selectDistinct({
                location: _schema.plantInstances.location
            }).from(_schema.plantInstances).where((0, _drizzleorm.and)((0, _drizzleorm.eq)(_schema.plantInstances.userId, userId), (0, _drizzleorm.eq)(_schema.plantInstances.isActive, true))).orderBy(_schema.plantInstances.location);
            return locations.map((l)=>l.location).filter(Boolean);
        } catch (error) {
            console.error('Failed to get user locations:', error);
            throw new Error('Failed to get user locations');
        }
    }
    // Get enhanced plant instance by ID
    static async getEnhancedById(id) {
        try {
            const [instance] = await _index.db.select().from(_schema.plantInstances).leftJoin(_schema.plants, (0, _drizzleorm.eq)(_schema.plantInstances.plantId, _schema.plants.id)).where((0, _drizzleorm.eq)(_schema.plantInstances.id, id));
            if (!instance || !instance.plants) return null;
            return _plantinstancetypes.plantInstanceHelpers.enhancePlantInstance(instance.plant_instances, instance.plants);
        } catch (error) {
            console.error('Failed to get enhanced plant instance by ID:', error);
            throw new Error('Failed to get enhanced plant instance');
        }
    }
}

//# sourceMappingURL=data:application/json;base64,