{"version":3,"sources":["/Users/stefanbekker/projects/fancy-planties/src/lib/db/migrations.ts"],"sourcesContent":["import 'server-only';\n\nimport { db } from './index';\nimport { sql } from 'drizzle-orm';\nimport fs from 'fs';\nimport path from 'path';\n\n// Migration utilities\nexport class MigrationUtils {\n  // Run all pending migrations\n  static async runMigrations(): Promise<void> {\n    try {\n      console.log('Starting database migrations...');\n      \n      // Create migrations table if it doesn't exist\n      await db.execute(sql`\n        CREATE TABLE IF NOT EXISTS __drizzle_migrations (\n          id SERIAL PRIMARY KEY,\n          hash text NOT NULL,\n          created_at bigint\n        );\n      `);\n\n      console.log('Migrations completed successfully');\n    } catch (error) {\n      console.error('Migration failed:', error);\n      throw new Error('Failed to run migrations');\n    }\n  }\n\n  // Apply RLS policies\n  static async applyRLSPolicies(): Promise<void> {\n    try {\n      console.log('Applying Row-Level Security policies...');\n      \n      const rlsPath = path.join(process.cwd(), 'drizzle', 'rls-policies.sql');\n      \n      if (fs.existsSync(rlsPath)) {\n        const rlsSQL = fs.readFileSync(rlsPath, 'utf8');\n        \n        // Split by semicolon and filter out comments\n        const statements = rlsSQL\n          .split(';')\n          .map(stmt => stmt.trim())\n          .filter(stmt => \n            stmt.length > 0 && \n            !stmt.startsWith('--') && \n            !stmt.match(/^\\/\\*.*\\*\\/$/)\n          );\n\n        for (const statement of statements) {\n          const cleanStatement = statement.trim();\n          if (cleanStatement && !cleanStatement.startsWith('--')) {\n            try {\n              await db.execute(sql.raw(cleanStatement));\n            } catch (error) {\n              // Log but don't fail on policy conflicts (they might already exist)\n              if (error instanceof Error && error.message.includes('already exists')) {\n                console.log(`Policy already exists, skipping: ${cleanStatement.substring(0, 50)}...`);\n              } else {\n                console.error(`Failed to execute statement: ${cleanStatement.substring(0, 50)}...`);\n                throw error;\n              }\n            }\n          }\n        }\n        \n        console.log('RLS policies applied successfully');\n      } else {\n        console.warn('RLS policies file not found, skipping...');\n      }\n    } catch (error) {\n      console.error('Failed to apply RLS policies:', error);\n      throw new Error('Failed to apply RLS policies');\n    }\n  }\n\n  // Rollback last migration (basic implementation)\n  static async rollbackLastMigration(): Promise<void> {\n    try {\n      console.log('Rolling back last migration...');\n      \n      // This is a basic implementation - in production you'd want more sophisticated rollback logic\n      console.warn('Rollback functionality requires manual intervention for safety');\n      console.log('Please review the migration files and manually rollback if needed');\n      \n    } catch (error) {\n      console.error('Rollback failed:', error);\n      throw new Error('Failed to rollback migration');\n    }\n  }\n\n  // Check migration status\n  static async getMigrationStatus(): Promise<{\n    appliedMigrations: number;\n    pendingMigrations: string[];\n  }> {\n    try {\n      // Get applied migrations count\n      const [result] = await db.execute(sql`\n        SELECT COUNT(*) as count FROM __drizzle_migrations\n      `);\n      \n      const appliedMigrations = result?.count || 0;\n      \n      // Get pending migrations by checking the drizzle folder\n      const migrationsPath = path.join(process.cwd(), 'drizzle');\n      const pendingMigrations: string[] = [];\n      \n      if (fs.existsSync(migrationsPath)) {\n        const files = fs.readdirSync(migrationsPath);\n        const sqlFiles = files.filter(file => file.endsWith('.sql') && !file.includes('rls-policies'));\n        pendingMigrations.push(...sqlFiles);\n      }\n\n      return {\n        appliedMigrations: Number(appliedMigrations),\n        pendingMigrations\n      };\n    } catch (error) {\n      console.error('Failed to get migration status:', error);\n      throw new Error('Failed to get migration status');\n    }\n  }\n\n  // Seed initial data (for development)\n  static async seedInitialData(): Promise<void> {\n    try {\n      console.log('Seeding initial data...');\n      \n      // Check if we already have data\n      const [userCount] = await db.execute(sql`SELECT COUNT(*) as count FROM users`);\n      \n      if (Number(userCount?.count) > 0) {\n        console.log('Database already has data, skipping seed');\n        return;\n      }\n\n      // Add some common plant taxonomy data\n      const commonPlants = [\n        {\n          family: 'Araceae',\n          genus: 'Monstera',\n          species: 'deliciosa',\n          commonName: 'Swiss Cheese Plant',\n          careInstructions: 'Bright indirect light, water when top inch of soil is dry',\n          isVerified: true\n        },\n        {\n          family: 'Araceae',\n          genus: 'Pothos',\n          species: 'aureus',\n          commonName: 'Golden Pothos',\n          careInstructions: 'Low to bright indirect light, water when soil is dry',\n          isVerified: true\n        },\n        {\n          family: 'Asparagaceae',\n          genus: 'Sansevieria',\n          species: 'trifasciata',\n          commonName: 'Snake Plant',\n          careInstructions: 'Low light tolerant, water sparingly',\n          isVerified: true\n        },\n        {\n          family: 'Araceae',\n          genus: 'Philodendron',\n          species: 'hederaceum',\n          commonName: 'Heartleaf Philodendron',\n          careInstructions: 'Bright indirect light, keep soil lightly moist',\n          isVerified: true\n        }\n      ];\n\n      for (const plant of commonPlants) {\n        await db.execute(sql`\n          INSERT INTO plants (family, genus, species, cultivar, common_name, care_instructions, is_verified)\n          VALUES (${plant.family}, ${plant.genus}, ${plant.species}, NULL, ${plant.commonName}, ${plant.careInstructions}, ${plant.isVerified})\n          ON CONFLICT (family, genus, species, cultivar) DO NOTHING\n        `);\n      }\n\n      console.log('Initial data seeded successfully');\n    } catch (error) {\n      console.error('Failed to seed initial data:', error);\n      throw new Error('Failed to seed initial data');\n    }\n  }\n\n  // Database health check\n  static async healthCheck(): Promise<{\n    connected: boolean;\n    migrationsApplied: boolean;\n    rlsEnabled: boolean;\n    tablesExist: boolean;\n  }> {\n    try {\n      // Check connection\n      const connected = await db.execute(sql`SELECT 1`).then(() => true).catch(() => false);\n      \n      // Check if migrations table exists\n      const [migrationTable] = await db.execute(sql`\n        SELECT EXISTS (\n          SELECT FROM information_schema.tables \n          WHERE table_name = '__drizzle_migrations'\n        ) as exists\n      `);\n      const migrationsApplied = Boolean(migrationTable?.exists) || false;\n\n      // Check if main tables exist\n      const [tablesCheck] = await db.execute(sql`\n        SELECT \n          (SELECT COUNT(*) FROM information_schema.tables WHERE table_name IN ('users', 'plants', 'plant_instances', 'propagations', 'sessions')) as table_count\n      `);\n      const tablesExist = Number(tablesCheck?.table_count) === 5;\n\n      // Check if RLS is enabled on user tables\n      const [rlsCheck] = await db.execute(sql`\n        SELECT COUNT(*) as rls_count\n        FROM pg_class c\n        JOIN pg_namespace n ON n.oid = c.relnamespace\n        WHERE c.relrowsecurity = true \n        AND n.nspname = 'public'\n        AND c.relname IN ('plant_instances', 'propagations', 'sessions')\n      `);\n      const rlsEnabled = Number(rlsCheck?.rls_count) === 3;\n\n      return {\n        connected,\n        migrationsApplied,\n        rlsEnabled,\n        tablesExist\n      };\n    } catch (error) {\n      console.error('Health check failed:', error);\n      return {\n        connected: false,\n        migrationsApplied: false,\n        rlsEnabled: false,\n        tablesExist: false\n      };\n    }\n  }\n}"],"names":["MigrationUtils","runMigrations","console","log","db","execute","sql","error","Error","applyRLSPolicies","rlsPath","path","join","process","cwd","fs","existsSync","rlsSQL","readFileSync","statements","split","map","stmt","trim","filter","length","startsWith","match","statement","cleanStatement","raw","message","includes","substring","warn","rollbackLastMigration","getMigrationStatus","result","appliedMigrations","count","migrationsPath","pendingMigrations","files","readdirSync","sqlFiles","file","endsWith","push","Number","seedInitialData","userCount","commonPlants","family","genus","species","commonName","careInstructions","isVerified","plant","healthCheck","connected","then","catch","migrationTable","migrationsApplied","Boolean","exists","tablesCheck","tablesExist","table_count","rlsCheck","rlsEnabled","rls_count"],"mappings":"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"}