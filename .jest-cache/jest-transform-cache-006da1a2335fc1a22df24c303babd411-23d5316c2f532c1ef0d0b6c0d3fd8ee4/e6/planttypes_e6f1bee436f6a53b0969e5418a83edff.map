{"version":3,"sources":["/Users/stefanbekker/projects/fancy-planties/src/lib/types/plant-types.ts"],"sourcesContent":["import type { Plant } from '@/lib/db/schema';\nimport type { PlantSuggestion, FuzzySearchConfig } from '@/lib/validation/plant-schemas';\n\n// Enhanced Plant interface with computed properties\nexport interface EnhancedPlant extends Plant {\n  // Computed display name\n  displayName: string;\n  // Scientific name (Genus species)\n  scientificName: string;\n  // Full taxonomy string\n  fullTaxonomy: string;\n  // Search relevance score (for search results)\n  relevanceScore?: number;\n  // Matched search terms (for highlighting)\n  matchedTerms?: string[];\n}\n\n// Plant with usage statistics\nexport interface PlantWithStats extends EnhancedPlant {\n  instanceCount: number;\n  propagationCount: number;\n  popularityScore: number;\n  lastUsed?: Date;\n}\n\n// Plant search result interface\nexport interface PlantSearchResult {\n  plants: PlantSuggestion[];\n  totalCount: number;\n  hasMore: boolean;\n  searchTime: number;\n  suggestions?: string[]; // Alternative search suggestions\n}\n\n// Plant taxonomy hierarchy for browsing\nexport interface TaxonomyHierarchy {\n  families: Array<{\n    name: string;\n    count: number;\n    genera: Array<{\n      name: string;\n      count: number;\n      species: Array<{\n        name: string;\n        count: number;\n        plants: PlantSuggestion[];\n      }>;\n    }>;\n  }>;\n}\n\n// Recent and popular plants for quick selection\nexport interface QuickSelectPlants {\n  recent: PlantSuggestion[];\n  popular: PlantSuggestion[];\n  verified: PlantSuggestion[];\n}\n\n// Plant creation context for tracking user contributions\nexport interface PlantCreationContext {\n  userId: number;\n  source: 'manual' | 'csv_import' | 'api_import';\n  confidence: number; // 0-1 scale for data quality\n  needsVerification: boolean;\n}\n\n// Fuzzy search match result\nexport interface FuzzyMatchResult {\n  item: PlantSuggestion;\n  score: number;\n  matches: Array<{\n    field: string;\n    value: string;\n    indices: number[][];\n  }>;\n}\n\n// Plant lookup options\nexport interface PlantLookupOptions {\n  fuzzyConfig?: Partial<FuzzySearchConfig>;\n  includeStats?: boolean;\n  userContext?: {\n    userId: number;\n    includeUserPlants?: boolean;\n  };\n  filters?: {\n    family?: string;\n    genus?: string;\n    isVerified?: boolean;\n    minPopularity?: number;\n  };\n}\n\n// Plant taxonomy validation result\nexport interface TaxonomyValidationResult {\n  isValid: boolean;\n  errors: string[];\n  warnings: string[];\n  suggestions: {\n    family?: string[];\n    genus?: string[];\n    species?: string[];\n    commonName?: string[];\n  };\n  duplicates: PlantSuggestion[];\n}\n\n// Plant import/export interfaces\nexport interface PlantImportData {\n  family: string;\n  genus: string;\n  species: string;\n  commonName: string;\n  careInstructions?: string;\n  source: string;\n  confidence: number;\n}\n\nexport interface PlantExportData extends Plant {\n  instanceCount: number;\n  propagationCount: number;\n  createdByName?: string;\n}\n\n// Utility type for plant operations\nexport type PlantOperation = 'create' | 'update' | 'delete' | 'search' | 'import';\n\n// Plant service response wrapper\nexport interface PlantServiceResponse<T> {\n  success: boolean;\n  data?: T;\n  error?: string;\n  metadata?: {\n    operation: PlantOperation;\n    timestamp: Date;\n    userId?: number;\n    performance?: {\n      queryTime: number;\n      cacheHit: boolean;\n    };\n  };\n}\n\n// Helper functions for plant data manipulation\nexport const plantHelpers = {\n  // Create display name from plant data\n  createDisplayName: (plant: Pick<Plant, 'commonName' | 'genus' | 'species'>): string => {\n    return plant.commonName || `${plant.genus} ${plant.species}`;\n  },\n\n  // Create scientific name\n  createScientificName: (plant: Pick<Plant, 'genus' | 'species'>): string => {\n    return `${plant.genus} ${plant.species}`;\n  },\n\n  // Create full taxonomy string\n  createFullTaxonomy: (plant: Pick<Plant, 'family' | 'genus' | 'species'>): string => {\n    return `${plant.family} > ${plant.genus} > ${plant.species}`;\n  },\n\n  // Enhance plant with computed properties\n  enhancePlant: (plant: Plant): EnhancedPlant => ({\n    ...plant,\n    displayName: plantHelpers.createDisplayName(plant),\n    scientificName: plantHelpers.createScientificName(plant),\n    fullTaxonomy: plantHelpers.createFullTaxonomy(plant),\n  }),\n\n  // Check if two plants are taxonomically identical\n  areTaxonomicallyEqual: (\n    plant1: Pick<Plant, 'family' | 'genus' | 'species'>,\n    plant2: Pick<Plant, 'family' | 'genus' | 'species'>\n  ): boolean => {\n    return (\n      plant1.family.toLowerCase() === plant2.family.toLowerCase() &&\n      plant1.genus.toLowerCase() === plant2.genus.toLowerCase() &&\n      plant1.species.toLowerCase() === plant2.species.toLowerCase()\n    );\n  },\n\n  // Generate search keywords for a plant\n  generateSearchKeywords: (plant: Plant): string[] => {\n    const keywords = [\n      plant.family.toLowerCase(),\n      plant.genus.toLowerCase(),\n      plant.species.toLowerCase(),\n      plant.commonName.toLowerCase(),\n      plantHelpers.createScientificName(plant).toLowerCase(),\n    ];\n\n    // Add common name variations (split by spaces, commas, etc.)\n    const commonNameParts = plant.commonName\n      .toLowerCase()\n      .split(/[\\s,\\-_]+/)\n      .filter(part => part.length > 2);\n    \n    keywords.push(...commonNameParts);\n\n    return [...new Set(keywords)]; // Remove duplicates\n  },\n};"],"names":["plantHelpers","createDisplayName","plant","commonName","genus","species","createScientificName","createFullTaxonomy","family","enhancePlant","displayName","scientificName","fullTaxonomy","areTaxonomicallyEqual","plant1","plant2","toLowerCase","generateSearchKeywords","keywords","commonNameParts","split","filter","part","length","push","Set"],"mappings":";;;;+BAgJaA;;;eAAAA;;;AAAN,MAAMA,eAAe;IAC1B,sCAAsC;IACtCC,mBAAmB,CAACC;QAClB,OAAOA,MAAMC,UAAU,IAAI,GAAGD,MAAME,KAAK,CAAC,CAAC,EAAEF,MAAMG,OAAO,EAAE;IAC9D;IAEA,yBAAyB;IACzBC,sBAAsB,CAACJ;QACrB,OAAO,GAAGA,MAAME,KAAK,CAAC,CAAC,EAAEF,MAAMG,OAAO,EAAE;IAC1C;IAEA,8BAA8B;IAC9BE,oBAAoB,CAACL;QACnB,OAAO,GAAGA,MAAMM,MAAM,CAAC,GAAG,EAAEN,MAAME,KAAK,CAAC,GAAG,EAAEF,MAAMG,OAAO,EAAE;IAC9D;IAEA,yCAAyC;IACzCI,cAAc,CAACP,QAAiC,CAAA;YAC9C,GAAGA,KAAK;YACRQ,aAAaV,aAAaC,iBAAiB,CAACC;YAC5CS,gBAAgBX,aAAaM,oBAAoB,CAACJ;YAClDU,cAAcZ,aAAaO,kBAAkB,CAACL;QAChD,CAAA;IAEA,kDAAkD;IAClDW,uBAAuB,CACrBC,QACAC;QAEA,OACED,OAAON,MAAM,CAACQ,WAAW,OAAOD,OAAOP,MAAM,CAACQ,WAAW,MACzDF,OAAOV,KAAK,CAACY,WAAW,OAAOD,OAAOX,KAAK,CAACY,WAAW,MACvDF,OAAOT,OAAO,CAACW,WAAW,OAAOD,OAAOV,OAAO,CAACW,WAAW;IAE/D;IAEA,uCAAuC;IACvCC,wBAAwB,CAACf;QACvB,MAAMgB,WAAW;YACfhB,MAAMM,MAAM,CAACQ,WAAW;YACxBd,MAAME,KAAK,CAACY,WAAW;YACvBd,MAAMG,OAAO,CAACW,WAAW;YACzBd,MAAMC,UAAU,CAACa,WAAW;YAC5BhB,aAAaM,oBAAoB,CAACJ,OAAOc,WAAW;SACrD;QAED,6DAA6D;QAC7D,MAAMG,kBAAkBjB,MAAMC,UAAU,CACrCa,WAAW,GACXI,KAAK,CAAC,aACNC,MAAM,CAACC,CAAAA,OAAQA,KAAKC,MAAM,GAAG;QAEhCL,SAASM,IAAI,IAAIL;QAEjB,OAAO;eAAI,IAAIM,IAAIP;SAAU,EAAE,oBAAoB;IACrD;AACF"}