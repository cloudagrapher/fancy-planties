{"version":3,"names":["DEFAULT_EMAIL_VERIFICATION_RATE_LIMIT_CONFIG","cov_2l6vagox5t","f","s","EmailVerificationRateLimiter","emailVerificationRateLimiter","logSecurityEvent","maxVerificationAttempts","verificationWindowMs","maxResendRequests","resendWindowMs","resendCooldownMs","maxEmailVerificationRequests","emailVerificationWindowMs","verificationAttemptStore","Map","resendRequestStore","emailVerificationStore","resendCooldownStore","securityEvents","event","push","console","warn","type","identifier","email","timestamp","Date","toISOString","details","length","b","splice","checkRateLimit","store","maxRequests","windowMs","now","key","entry","entries","resetTime","delete","get","set","count","firstAttempt","allowed","remaining","retryAfter","Math","ceil","constructor","config","checkVerificationAttempts","result","limitType","checkResendRequests","normalizedEmail","toLowerCase","lastResendTime","cooldownRemaining","cooldownMs","recordResendSuccess","checkEmailVerificationActivity","detectSuspiciousActivity","oneHour","verificationEntry","timeSpan","pattern","attempts","timeSpanMs","recentEvents","filter","uniqueEmails","Set","map","size","getSecurityEvents","since","cutoff","cleanup","oneDayAgo","cutoffIndex","findIndex","getStats","verificationAttempts","resendRequests","emailVerificationActivity","resendCooldowns","process","env","NODE_ENV","setInterval"],"sources":["/Users/stefanbekker/projects/fancy-planties/src/lib/services/email-verification-rate-limiter.ts"],"sourcesContent":["import 'server-only';\n\n// Rate limiting configuration for email verification\nexport interface EmailVerificationRateLimitConfig {\n  // Verification attempts\n  maxVerificationAttempts: number;\n  verificationWindowMs: number;\n  \n  // Resend requests\n  maxResendRequests: number;\n  resendWindowMs: number;\n  resendCooldownMs: number;\n  \n  // Overall email verification activity\n  maxEmailVerificationRequests: number;\n  emailVerificationWindowMs: number;\n}\n\n// Default configuration based on requirements\nexport const DEFAULT_EMAIL_VERIFICATION_RATE_LIMIT_CONFIG: EmailVerificationRateLimitConfig = {\n  // Max 5 verification attempts per code (handled by service)\n  maxVerificationAttempts: 10, // Per IP per hour\n  verificationWindowMs: 60 * 60 * 1000, // 1 hour\n  \n  // Max 5 resend requests per hour per email\n  maxResendRequests: 5,\n  resendWindowMs: 60 * 60 * 1000, // 1 hour\n  resendCooldownMs: 60 * 1000, // 60 seconds between resends\n  \n  // Overall email verification activity per IP\n  maxEmailVerificationRequests: 20,\n  emailVerificationWindowMs: 60 * 60 * 1000, // 1 hour\n};\n\n// Rate limit entry structure\ninterface RateLimitEntry {\n  count: number;\n  resetTime: number;\n  firstAttempt: number;\n}\n\n// In-memory stores (in production, use Redis)\nconst verificationAttemptStore = new Map<string, RateLimitEntry>();\nconst resendRequestStore = new Map<string, RateLimitEntry>();\nconst emailVerificationStore = new Map<string, RateLimitEntry>();\nconst resendCooldownStore = new Map<string, number>(); // email -> last resend timestamp\n\n// Security event logging\nexport interface SecurityEvent {\n  type: 'RATE_LIMIT_EXCEEDED' | 'SUSPICIOUS_ACTIVITY' | 'BRUTE_FORCE_ATTEMPT';\n  identifier: string;\n  email?: string;\n  timestamp: number;\n  details: Record<string, any>;\n}\n\nconst securityEvents: SecurityEvent[] = [];\n\nexport function logSecurityEvent(event: SecurityEvent): void {\n  securityEvents.push(event);\n  \n  // Log to console (in production, send to monitoring service)\n  console.warn(`[SECURITY] ${event.type}:`, {\n    identifier: event.identifier,\n    email: event.email,\n    timestamp: new Date(event.timestamp).toISOString(),\n    details: event.details,\n  });\n  \n  // Keep only last 1000 events in memory\n  if (securityEvents.length > 1000) {\n    securityEvents.splice(0, securityEvents.length - 1000);\n  }\n}\n\n// Generic rate limiting function\nfunction checkRateLimit(\n  store: Map<string, RateLimitEntry>,\n  identifier: string,\n  maxRequests: number,\n  windowMs: number\n): { allowed: boolean; remaining: number; resetTime: number; retryAfter?: number } {\n  const now = Date.now();\n  \n  // Clean up expired entries\n  for (const [key, entry] of store.entries()) {\n    if (entry.resetTime < now) {\n      store.delete(key);\n    }\n  }\n  \n  const entry = store.get(identifier);\n  \n  if (!entry || entry.resetTime < now) {\n    // New window or expired window\n    const resetTime = now + windowMs;\n    store.set(identifier, {\n      count: 1,\n      resetTime,\n      firstAttempt: now,\n    });\n    \n    return {\n      allowed: true,\n      remaining: maxRequests - 1,\n      resetTime,\n    };\n  }\n  \n  if (entry.count >= maxRequests) {\n    // Rate limit exceeded\n    const retryAfter = Math.ceil((entry.resetTime - now) / 1000);\n    \n    return {\n      allowed: false,\n      remaining: 0,\n      resetTime: entry.resetTime,\n      retryAfter,\n    };\n  }\n  \n  // Increment count\n  entry.count++;\n  store.set(identifier, entry);\n  \n  return {\n    allowed: true,\n    remaining: maxRequests - entry.count,\n    resetTime: entry.resetTime,\n  };\n}\n\nexport class EmailVerificationRateLimiter {\n  constructor(private config: EmailVerificationRateLimitConfig = DEFAULT_EMAIL_VERIFICATION_RATE_LIMIT_CONFIG) {}\n  \n  /**\n   * Check rate limit for verification attempts\n   */\n  checkVerificationAttempts(identifier: string, email?: string): {\n    allowed: boolean;\n    remaining: number;\n    resetTime: number;\n    retryAfter?: number;\n  } {\n    const result = checkRateLimit(\n      verificationAttemptStore,\n      identifier,\n      this.config.maxVerificationAttempts,\n      this.config.verificationWindowMs\n    );\n    \n    if (!result.allowed) {\n      logSecurityEvent({\n        type: 'RATE_LIMIT_EXCEEDED',\n        identifier,\n        email,\n        timestamp: Date.now(),\n        details: {\n          limitType: 'verification_attempts',\n          maxRequests: this.config.maxVerificationAttempts,\n          windowMs: this.config.verificationWindowMs,\n        },\n      });\n    }\n    \n    return result;\n  }\n  \n  /**\n   * Check rate limit for resend requests\n   */\n  checkResendRequests(email: string, identifier: string): {\n    allowed: boolean;\n    remaining: number;\n    resetTime: number;\n    retryAfter?: number;\n    cooldownRemaining?: number;\n  } {\n    const normalizedEmail = email.toLowerCase();\n    \n    // Check cooldown first\n    const lastResendTime = resendCooldownStore.get(normalizedEmail);\n    const now = Date.now();\n    \n    if (lastResendTime && (now - lastResendTime) < this.config.resendCooldownMs) {\n      const cooldownRemaining = Math.ceil((this.config.resendCooldownMs - (now - lastResendTime)) / 1000);\n      \n      logSecurityEvent({\n        type: 'RATE_LIMIT_EXCEEDED',\n        identifier,\n        email: normalizedEmail,\n        timestamp: now,\n        details: {\n          limitType: 'resend_cooldown',\n          cooldownMs: this.config.resendCooldownMs,\n          cooldownRemaining,\n        },\n      });\n      \n      return {\n        allowed: false,\n        remaining: 0,\n        resetTime: lastResendTime + this.config.resendCooldownMs,\n        cooldownRemaining,\n      };\n    }\n    \n    // Check hourly rate limit\n    const result = checkRateLimit(\n      resendRequestStore,\n      normalizedEmail,\n      this.config.maxResendRequests,\n      this.config.resendWindowMs\n    );\n    \n    if (!result.allowed) {\n      logSecurityEvent({\n        type: 'RATE_LIMIT_EXCEEDED',\n        identifier,\n        email: normalizedEmail,\n        timestamp: now,\n        details: {\n          limitType: 'resend_requests',\n          maxRequests: this.config.maxResendRequests,\n          windowMs: this.config.resendWindowMs,\n        },\n      });\n    }\n    \n    return result;\n  }\n  \n  /**\n   * Record successful resend to update cooldown\n   */\n  recordResendSuccess(email: string): void {\n    const normalizedEmail = email.toLowerCase();\n    resendCooldownStore.set(normalizedEmail, Date.now());\n  }\n  \n  /**\n   * Check overall email verification activity rate limit\n   */\n  checkEmailVerificationActivity(identifier: string, email?: string): {\n    allowed: boolean;\n    remaining: number;\n    resetTime: number;\n    retryAfter?: number;\n  } {\n    const result = checkRateLimit(\n      emailVerificationStore,\n      identifier,\n      this.config.maxEmailVerificationRequests,\n      this.config.emailVerificationWindowMs\n    );\n    \n    if (!result.allowed) {\n      logSecurityEvent({\n        type: 'RATE_LIMIT_EXCEEDED',\n        identifier,\n        email,\n        timestamp: Date.now(),\n        details: {\n          limitType: 'email_verification_activity',\n          maxRequests: this.config.maxEmailVerificationRequests,\n          windowMs: this.config.emailVerificationWindowMs,\n        },\n      });\n    }\n    \n    return result;\n  }\n  \n  /**\n   * Detect suspicious activity patterns\n   */\n  detectSuspiciousActivity(identifier: string, email?: string): boolean {\n    const now = Date.now();\n    const oneHour = 60 * 60 * 1000;\n    \n    // Check for rapid-fire attempts from same IP\n    const verificationEntry = verificationAttemptStore.get(identifier);\n    if (verificationEntry && verificationEntry.count >= 8) {\n      const timeSpan = now - verificationEntry.firstAttempt;\n      if (timeSpan < 10 * 60 * 1000) { // 8+ attempts in 10 minutes\n        logSecurityEvent({\n          type: 'SUSPICIOUS_ACTIVITY',\n          identifier,\n          email,\n          timestamp: now,\n          details: {\n            pattern: 'rapid_verification_attempts',\n            attempts: verificationEntry.count,\n            timeSpanMs: timeSpan,\n          },\n        });\n        return true;\n      }\n    }\n    \n    // Check for multiple email addresses from same IP\n    const recentEvents = securityEvents.filter(\n      event => event.identifier === identifier && \n               event.timestamp > (now - oneHour) &&\n               event.email\n    );\n    \n    const uniqueEmails = new Set(recentEvents.map(event => event.email));\n    if (uniqueEmails.size >= 5) { // 5+ different emails in 1 hour\n      logSecurityEvent({\n        type: 'SUSPICIOUS_ACTIVITY',\n        identifier,\n        email,\n        timestamp: now,\n        details: {\n          pattern: 'multiple_email_addresses',\n          uniqueEmails: uniqueEmails.size,\n          timeSpanMs: oneHour,\n        },\n      });\n      return true;\n    }\n    \n    return false;\n  }\n  \n  /**\n   * Get security events for monitoring\n   */\n  getSecurityEvents(since?: number): SecurityEvent[] {\n    const cutoff = since || (Date.now() - 24 * 60 * 60 * 1000); // Last 24 hours\n    return securityEvents.filter(event => event.timestamp >= cutoff);\n  }\n  \n  /**\n   * Clean up expired data\n   */\n  cleanup(): void {\n    const now = Date.now();\n    const oneDayAgo = now - 24 * 60 * 60 * 1000;\n    \n    // Clean up rate limit stores\n    for (const store of [verificationAttemptStore, resendRequestStore, emailVerificationStore]) {\n      for (const [key, entry] of store.entries()) {\n        if (entry.resetTime < now) {\n          store.delete(key);\n        }\n      }\n    }\n    \n    // Clean up cooldown store\n    for (const [email, timestamp] of resendCooldownStore.entries()) {\n      if (timestamp < oneDayAgo) {\n        resendCooldownStore.delete(email);\n      }\n    }\n    \n    // Clean up old security events\n    const cutoffIndex = securityEvents.findIndex(event => event.timestamp >= oneDayAgo);\n    if (cutoffIndex > 0) {\n      securityEvents.splice(0, cutoffIndex);\n    }\n  }\n  \n  /**\n   * Get rate limit statistics\n   */\n  getStats(): {\n    verificationAttempts: number;\n    resendRequests: number;\n    emailVerificationActivity: number;\n    resendCooldowns: number;\n    securityEvents: number;\n  } {\n    return {\n      verificationAttempts: verificationAttemptStore.size,\n      resendRequests: resendRequestStore.size,\n      emailVerificationActivity: emailVerificationStore.size,\n      resendCooldowns: resendCooldownStore.size,\n      securityEvents: securityEvents.length,\n    };\n  }\n}\n\n// Export singleton instance\nexport const emailVerificationRateLimiter = new EmailVerificationRateLimiter();\n\n// Cleanup job - run every hour (but not during tests)\nif (process.env.NODE_ENV !== 'test') {\n  setInterval(() => {\n    emailVerificationRateLimiter.cleanup();\n  }, 60 * 60 * 1000);\n}"],"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","ignoreList":[]}