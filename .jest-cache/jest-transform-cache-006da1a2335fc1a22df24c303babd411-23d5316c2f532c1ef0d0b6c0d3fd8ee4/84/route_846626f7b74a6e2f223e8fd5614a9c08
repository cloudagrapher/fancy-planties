2d0a1e64738986df05be85349a78978e
"use strict";

/* istanbul ignore next */
function cov_5tff2rat8() {
  var path = "/Users/stefanbekker/projects/fancy-planties/src/app/api/care/quick-log/route.ts";
  var hash = "d6065ba1e94e4fb3228919211f1a7eeacc1231ea";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/stefanbekker/projects/fancy-planties/src/app/api/care/quick-log/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 20
        }
      },
      "3": {
        start: {
          line: 11,
          column: 16
        },
        end: {
          line: 11,
          column: 38
        }
      },
      "4": {
        start: {
          line: 12,
          column: 17
        },
        end: {
          line: 12,
          column: 55
        }
      },
      "5": {
        start: {
          line: 13,
          column: 21
        },
        end: {
          line: 13,
          column: 69
        }
      },
      "6": {
        start: {
          line: 14,
          column: 21
        },
        end: {
          line: 14,
          column: 71
        }
      },
      "7": {
        start: {
          line: 16,
          column: 4
        },
        end: {
          line: 49,
          column: 5
        }
      },
      "8": {
        start: {
          line: 17,
          column: 25
        },
        end: {
          line: 17,
          column: 65
        }
      },
      "9": {
        start: {
          line: 18,
          column: 21
        },
        end: {
          line: 18,
          column: 41
        }
      },
      "10": {
        start: {
          line: 20,
          column: 27
        },
        end: {
          line: 23,
          column: 10
        }
      },
      "11": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 32,
          column: 9
        }
      },
      "12": {
        start: {
          line: 25,
          column: 12
        },
        end: {
          line: 25,
          column: 83
        }
      },
      "13": {
        start: {
          line: 26,
          column: 12
        },
        end: {
          line: 31,
          column: 15
        }
      },
      "14": {
        start: {
          line: 33,
          column: 23
        },
        end: {
          line: 33,
          column: 92
        }
      },
      "15": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 40,
          column: 9
        }
      },
      "16": {
        start: {
          line: 35,
          column: 12
        },
        end: {
          line: 39,
          column: 15
        }
      },
      "17": {
        start: {
          line: 41,
          column: 8
        },
        end: {
          line: 41,
          column: 61
        }
      },
      "18": {
        start: {
          line: 43,
          column: 8
        },
        end: {
          line: 43,
          column: 59
        }
      },
      "19": {
        start: {
          line: 44,
          column: 8
        },
        end: {
          line: 48,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "POST",
        decl: {
          start: {
            line: 15,
            column: 15
          },
          end: {
            line: 15,
            column: 19
          }
        },
        loc: {
          start: {
            line: 15,
            column: 29
          },
          end: {
            line: 50,
            column: 1
          }
        },
        line: 15
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 22,
            column: 31
          },
          end: {
            line: 22,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 22,
            column: 31
          },
          end: {
            line: 22,
            column: 44
          }
        }, {
          start: {
            line: 22,
            column: 48
          },
          end: {
            line: 22,
            column: 58
          }
        }],
        line: 22
      },
      "1": {
        loc: {
          start: {
            line: 24,
            column: 8
          },
          end: {
            line: 32,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 24,
            column: 8
          },
          end: {
            line: 32,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 24
      },
      "2": {
        loc: {
          start: {
            line: 27,
            column: 23
          },
          end: {
            line: 27,
            column: 87
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 27,
            column: 23
          },
          end: {
            line: 27,
            column: 58
          }
        }, {
          start: {
            line: 27,
            column: 62
          },
          end: {
            line: 27,
            column: 87
          }
        }],
        line: 27
      },
      "3": {
        loc: {
          start: {
            line: 34,
            column: 8
          },
          end: {
            line: 40,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 34,
            column: 8
          },
          end: {
            line: 40,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 34
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0
    },
    f: {
      "0": 0,
      "1": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/stefanbekker/projects/fancy-planties/src/app/api/care/quick-log/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport { requireAuthSession } from '@/lib/auth/server';\nimport { CareService } from '@/lib/services/care-service';\nimport { careValidation } from '@/lib/validation/care-schemas';\n\nexport async function POST(request: NextRequest) {\n  try {\n    const { user } = await requireAuthSession();\n    const body = await request.json();\n    \n    // Validate the quick care log data\n    const validation = careValidation.validateQuickCareLog({\n      ...body,\n      careDate: new Date(body.careDate || new Date()),\n    });\n    \n    if (!validation.success) {\n      console.error('Quick care validation error:', validation.error.issues);\n      return NextResponse.json(\n        { \n          error: validation.error.issues[0]?.message || 'Invalid quick care data',\n          details: validation.error.issues \n        },\n        { status: 400 }\n      );\n    }\n    \n    const result = await CareService.quickCareLog(user.id, validation.data);\n    \n    if (!result.success) {\n      return NextResponse.json(\n        { error: result.error },\n        { status: 400 }\n      );\n    }\n    \n    return NextResponse.json(result.careHistory);\n  } catch (error) {\n    console.error('Error with quick care log:', error);\n    return NextResponse.json(\n      { error: 'Failed to log quick care' },\n      { status: 500 }\n    );\n  }\n}"],
      names: ["POST", "request", "user", "requireAuthSession", "body", "json", "validation", "careValidation", "validateQuickCareLog", "careDate", "Date", "success", "console", "error", "issues", "NextResponse", "message", "details", "status", "result", "CareService", "quickCareLog", "id", "data", "careHistory"],
      mappings: ";;;;+BAKsBA;;;eAAAA;;;wBALoB;yBACP;6BACP;6BACG;AAExB,eAAeA,KAAKC,OAAoB;IAC7C,IAAI;QACF,MAAM,EAAEC,IAAI,EAAE,GAAG,MAAMC,IAAAA,2BAAkB;QACzC,MAAMC,OAAO,MAAMH,QAAQI,IAAI;QAE/B,mCAAmC;QACnC,MAAMC,aAAaC,2BAAc,CAACC,oBAAoB,CAAC;YACrD,GAAGJ,IAAI;YACPK,UAAU,IAAIC,KAAKN,KAAKK,QAAQ,IAAI,IAAIC;QAC1C;QAEA,IAAI,CAACJ,WAAWK,OAAO,EAAE;YACvBC,QAAQC,KAAK,CAAC,gCAAgCP,WAAWO,KAAK,CAACC,MAAM;YACrE,OAAOC,oBAAY,CAACV,IAAI,CACtB;gBACEQ,OAAOP,WAAWO,KAAK,CAACC,MAAM,CAAC,EAAE,EAAEE,WAAW;gBAC9CC,SAASX,WAAWO,KAAK,CAACC,MAAM;YAClC,GACA;gBAAEI,QAAQ;YAAI;QAElB;QAEA,MAAMC,SAAS,MAAMC,wBAAW,CAACC,YAAY,CAACnB,KAAKoB,EAAE,EAAEhB,WAAWiB,IAAI;QAEtE,IAAI,CAACJ,OAAOR,OAAO,EAAE;YACnB,OAAOI,oBAAY,CAACV,IAAI,CACtB;gBAAEQ,OAAOM,OAAON,KAAK;YAAC,GACtB;gBAAEK,QAAQ;YAAI;QAElB;QAEA,OAAOH,oBAAY,CAACV,IAAI,CAACc,OAAOK,WAAW;IAC7C,EAAE,OAAOX,OAAO;QACdD,QAAQC,KAAK,CAAC,8BAA8BA;QAC5C,OAAOE,oBAAY,CAACV,IAAI,CACtB;YAAEQ,OAAO;QAA2B,GACpC;YAAEK,QAAQ;QAAI;IAElB;AACF"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "d6065ba1e94e4fb3228919211f1a7eeacc1231ea"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_5tff2rat8 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_5tff2rat8();
cov_5tff2rat8().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_5tff2rat8().s[1]++;
Object.defineProperty(exports, "POST", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_5tff2rat8().f[0]++;
    cov_5tff2rat8().s[2]++;
    return POST;
  }
});
const _server =
/* istanbul ignore next */
(cov_5tff2rat8().s[3]++, require("next/server"));
const _server1 =
/* istanbul ignore next */
(cov_5tff2rat8().s[4]++, require("../../../../lib/auth/server"));
const _careservice =
/* istanbul ignore next */
(cov_5tff2rat8().s[5]++, require("../../../../lib/services/care-service"));
const _careschemas =
/* istanbul ignore next */
(cov_5tff2rat8().s[6]++, require("../../../../lib/validation/care-schemas"));
async function POST(request) {
  /* istanbul ignore next */
  cov_5tff2rat8().f[1]++;
  cov_5tff2rat8().s[7]++;
  try {
    const {
      user
    } =
    /* istanbul ignore next */
    (cov_5tff2rat8().s[8]++, await (0, _server1.requireAuthSession)());
    const body =
    /* istanbul ignore next */
    (cov_5tff2rat8().s[9]++, await request.json());
    // Validate the quick care log data
    const validation =
    /* istanbul ignore next */
    (cov_5tff2rat8().s[10]++, _careschemas.careValidation.validateQuickCareLog({
      ...body,
      careDate: new Date(
      /* istanbul ignore next */
      (cov_5tff2rat8().b[0][0]++, body.careDate) ||
      /* istanbul ignore next */
      (cov_5tff2rat8().b[0][1]++, new Date()))
    }));
    /* istanbul ignore next */
    cov_5tff2rat8().s[11]++;
    if (!validation.success) {
      /* istanbul ignore next */
      cov_5tff2rat8().b[1][0]++;
      cov_5tff2rat8().s[12]++;
      console.error('Quick care validation error:', validation.error.issues);
      /* istanbul ignore next */
      cov_5tff2rat8().s[13]++;
      return _server.NextResponse.json({
        error:
        /* istanbul ignore next */
        (cov_5tff2rat8().b[2][0]++, validation.error.issues[0]?.message) ||
        /* istanbul ignore next */
        (cov_5tff2rat8().b[2][1]++, 'Invalid quick care data'),
        details: validation.error.issues
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_5tff2rat8().b[1][1]++;
    }
    const result =
    /* istanbul ignore next */
    (cov_5tff2rat8().s[14]++, await _careservice.CareService.quickCareLog(user.id, validation.data));
    /* istanbul ignore next */
    cov_5tff2rat8().s[15]++;
    if (!result.success) {
      /* istanbul ignore next */
      cov_5tff2rat8().b[3][0]++;
      cov_5tff2rat8().s[16]++;
      return _server.NextResponse.json({
        error: result.error
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_5tff2rat8().b[3][1]++;
    }
    cov_5tff2rat8().s[17]++;
    return _server.NextResponse.json(result.careHistory);
  } catch (error) {
    /* istanbul ignore next */
    cov_5tff2rat8().s[18]++;
    console.error('Error with quick care log:', error);
    /* istanbul ignore next */
    cov_5tff2rat8().s[19]++;
    return _server.NextResponse.json({
      error: 'Failed to log quick care'
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfNXRmZjJyYXQ4IiwiYWN0dWFsQ292ZXJhZ2UiLCJzIiwiUE9TVCIsInJlcXVlc3QiLCJmIiwidXNlciIsIl9zZXJ2ZXIxIiwicmVxdWlyZUF1dGhTZXNzaW9uIiwiYm9keSIsImpzb24iLCJ2YWxpZGF0aW9uIiwiX2NhcmVzY2hlbWFzIiwiY2FyZVZhbGlkYXRpb24iLCJ2YWxpZGF0ZVF1aWNrQ2FyZUxvZyIsImNhcmVEYXRlIiwiRGF0ZSIsImIiLCJzdWNjZXNzIiwiY29uc29sZSIsImVycm9yIiwiaXNzdWVzIiwiX3NlcnZlciIsIk5leHRSZXNwb25zZSIsIm1lc3NhZ2UiLCJkZXRhaWxzIiwic3RhdHVzIiwicmVzdWx0IiwiX2NhcmVzZXJ2aWNlIiwiQ2FyZVNlcnZpY2UiLCJxdWlja0NhcmVMb2ciLCJpZCIsImRhdGEiLCJjYXJlSGlzdG9yeSJdLCJzb3VyY2VzIjpbIi9Vc2Vycy9zdGVmYW5iZWtrZXIvcHJvamVjdHMvZmFuY3ktcGxhbnRpZXMvc3JjL2FwcC9hcGkvY2FyZS9xdWljay1sb2cvcm91dGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmV4dFJlcXVlc3QsIE5leHRSZXNwb25zZSB9IGZyb20gJ25leHQvc2VydmVyJztcbmltcG9ydCB7IHJlcXVpcmVBdXRoU2Vzc2lvbiB9IGZyb20gJ0AvbGliL2F1dGgvc2VydmVyJztcbmltcG9ydCB7IENhcmVTZXJ2aWNlIH0gZnJvbSAnQC9saWIvc2VydmljZXMvY2FyZS1zZXJ2aWNlJztcbmltcG9ydCB7IGNhcmVWYWxpZGF0aW9uIH0gZnJvbSAnQC9saWIvdmFsaWRhdGlvbi9jYXJlLXNjaGVtYXMnO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gUE9TVChyZXF1ZXN0OiBOZXh0UmVxdWVzdCkge1xuICB0cnkge1xuICAgIGNvbnN0IHsgdXNlciB9ID0gYXdhaXQgcmVxdWlyZUF1dGhTZXNzaW9uKCk7XG4gICAgY29uc3QgYm9keSA9IGF3YWl0IHJlcXVlc3QuanNvbigpO1xuICAgIFxuICAgIC8vIFZhbGlkYXRlIHRoZSBxdWljayBjYXJlIGxvZyBkYXRhXG4gICAgY29uc3QgdmFsaWRhdGlvbiA9IGNhcmVWYWxpZGF0aW9uLnZhbGlkYXRlUXVpY2tDYXJlTG9nKHtcbiAgICAgIC4uLmJvZHksXG4gICAgICBjYXJlRGF0ZTogbmV3IERhdGUoYm9keS5jYXJlRGF0ZSB8fCBuZXcgRGF0ZSgpKSxcbiAgICB9KTtcbiAgICBcbiAgICBpZiAoIXZhbGlkYXRpb24uc3VjY2Vzcykge1xuICAgICAgY29uc29sZS5lcnJvcignUXVpY2sgY2FyZSB2YWxpZGF0aW9uIGVycm9yOicsIHZhbGlkYXRpb24uZXJyb3IuaXNzdWVzKTtcbiAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcbiAgICAgICAgeyBcbiAgICAgICAgICBlcnJvcjogdmFsaWRhdGlvbi5lcnJvci5pc3N1ZXNbMF0/Lm1lc3NhZ2UgfHwgJ0ludmFsaWQgcXVpY2sgY2FyZSBkYXRhJyxcbiAgICAgICAgICBkZXRhaWxzOiB2YWxpZGF0aW9uLmVycm9yLmlzc3VlcyBcbiAgICAgICAgfSxcbiAgICAgICAgeyBzdGF0dXM6IDQwMCB9XG4gICAgICApO1xuICAgIH1cbiAgICBcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBDYXJlU2VydmljZS5xdWlja0NhcmVMb2codXNlci5pZCwgdmFsaWRhdGlvbi5kYXRhKTtcbiAgICBcbiAgICBpZiAoIXJlc3VsdC5zdWNjZXNzKSB7XG4gICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXG4gICAgICAgIHsgZXJyb3I6IHJlc3VsdC5lcnJvciB9LFxuICAgICAgICB7IHN0YXR1czogNDAwIH1cbiAgICAgICk7XG4gICAgfVxuICAgIFxuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihyZXN1bHQuY2FyZUhpc3RvcnkpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHdpdGggcXVpY2sgY2FyZSBsb2c6JywgZXJyb3IpO1xuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcbiAgICAgIHsgZXJyb3I6ICdGYWlsZWQgdG8gbG9nIHF1aWNrIGNhcmUnIH0sXG4gICAgICB7IHN0YXR1czogNTAwIH1cbiAgICApO1xuICB9XG59Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7SUFNTTtJQUFBQSxhQUFBLFlBQUFBLENBQUE7TUFBQSxPQUFBQyxjQUFBO0lBQUE7RUFBQTtFQUFBLE9BQUFBLGNBQUE7QUFBQTtBQUFBRCxhQUFBO0FBQUFBLGFBQUEsR0FBQUUsQ0FBQTs7Ozs7OytCQURnQjs7Ozs7O1dBQUFDLElBQUE7Ozs7O2lDQUxvQjs7O2lDQUNQOzs7aUNBQ1A7OztpQ0FDRztBQUV4QixlQUFlQSxLQUFLQyxPQUFvQjtFQUFBO0VBQUFKLGFBQUEsR0FBQUssQ0FBQTtFQUFBTCxhQUFBLEdBQUFFLENBQUE7RUFDN0MsSUFBSTtJQUNGLE1BQU07TUFBRUk7SUFBSSxDQUFFO0lBQUE7SUFBQSxDQUFBTixhQUFBLEdBQUFFLENBQUEsT0FBRyxNQUFNLElBQUFLLFFB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