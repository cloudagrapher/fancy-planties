{"version":3,"names":["cov_11sovjiz7f","actualCoverage","s","ServiceWorkerManager","f","useServiceWorker","constructor","registration","updateAvailable","getInstance","instance","b","register","navigator","console","log","serviceWorker","scope","addEventListener","newWorker","installing","state","controller","notifyUpdateAvailable","handleMessage","bind","error","update","skipWaiting","waiting","postMessage","type","message","active","cacheOfflineData","data","registerBackgroundSync","event","window","dispatchEvent","CustomEvent","detail","isUpdateAvailable","isRegistered","swManager"],"sources":["/Users/stefanbekker/projects/fancy-planties/src/lib/utils/service-worker.ts"],"sourcesContent":["'use client';\n\n/**\n * Service Worker Registration and Management\n * Handles registration, updates, and communication with the service worker\n */\n\nexport class ServiceWorkerManager {\n  private static instance: ServiceWorkerManager;\n  private registration: ServiceWorkerRegistration | null = null;\n  private updateAvailable = false;\n\n  private constructor() {}\n\n  static getInstance(): ServiceWorkerManager {\n    if (!ServiceWorkerManager.instance) {\n      ServiceWorkerManager.instance = new ServiceWorkerManager();\n    }\n    return ServiceWorkerManager.instance;\n  }\n\n  /**\n   * Register the service worker\n   */\n  async register(): Promise<boolean> {\n    if (typeof navigator === 'undefined' || !('serviceWorker' in navigator)) {\n      console.log('Service Worker not supported');\n      return false;\n    }\n\n    try {\n      this.registration = await navigator.serviceWorker.register('/custom-sw.js', {\n        scope: '/',\n      });\n\n      console.log('Service Worker registered successfully');\n\n      // Listen for updates\n      this.registration.addEventListener('updatefound', () => {\n        const newWorker = this.registration?.installing;\n        if (newWorker) {\n          newWorker.addEventListener('statechange', () => {\n            if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {\n              this.updateAvailable = true;\n              this.notifyUpdateAvailable();\n            }\n          });\n        }\n      });\n\n      // Listen for messages from service worker\n      navigator.serviceWorker.addEventListener('message', this.handleMessage.bind(this));\n\n      return true;\n    } catch (error) {\n      console.error('Service Worker registration failed:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Update the service worker\n   */\n  async update(): Promise<void> {\n    if (this.registration) {\n      await this.registration.update();\n    }\n  }\n\n  /**\n   * Skip waiting and activate new service worker\n   */\n  skipWaiting(): void {\n    if (this.registration?.waiting) {\n      this.registration.waiting.postMessage({ type: 'SKIP_WAITING' });\n    }\n  }\n\n  /**\n   * Send message to service worker\n   */\n  postMessage(message: any): void {\n    if (this.registration?.active) {\n      this.registration.active.postMessage(message);\n    }\n  }\n\n  /**\n   * Cache offline data in service worker\n   */\n  cacheOfflineData(data: any): void {\n    this.postMessage({\n      type: 'CACHE_OFFLINE_DATA',\n      data,\n    });\n  }\n\n  /**\n   * Register background sync for care entries\n   */\n  registerBackgroundSync(): void {\n    this.postMessage({\n      type: 'REGISTER_BACKGROUND_SYNC',\n    });\n  }\n\n  /**\n   * Handle messages from service worker\n   */\n  private handleMessage(event: MessageEvent): void {\n    const { type, data } = event.data;\n\n    switch (type) {\n      case 'SYNC_COMPLETE':\n        console.log('Background sync completed:', data);\n        // Dispatch custom event for React components to listen to\n        window.dispatchEvent(new CustomEvent('sw-sync-complete', { detail: data }));\n        break;\n\n      default:\n        console.log('Unknown message from service worker:', type);\n    }\n  }\n\n  /**\n   * Notify about available update\n   */\n  private notifyUpdateAvailable(): void {\n    window.dispatchEvent(new CustomEvent('sw-update-available'));\n  }\n\n  /**\n   * Check if update is available\n   */\n  isUpdateAvailable(): boolean {\n    return this.updateAvailable;\n  }\n\n  /**\n   * Get registration status\n   */\n  isRegistered(): boolean {\n    return this.registration !== null;\n  }\n}\n\n/**\n * Hook for service worker functionality\n */\nexport function useServiceWorker() {\n  const swManager = ServiceWorkerManager.getInstance();\n\n  return {\n    register: () => swManager.register(),\n    update: () => swManager.update(),\n    skipWaiting: () => swManager.skipWaiting(),\n    cacheOfflineData: (data: any) => swManager.cacheOfflineData(data),\n    registerBackgroundSync: () => swManager.registerBackgroundSync(),\n    isUpdateAvailable: () => swManager.isUpdateAvailable(),\n    isRegistered: () => swManager.isRegistered(),\n  };\n}"],"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","ignoreList":[]}