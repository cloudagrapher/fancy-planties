{"version":3,"sources":["/Users/stefanbekker/projects/fancy-planties/src/lib/validation/care-schemas.ts"],"sourcesContent":["import { z } from 'zod';\n\n// Care type schema\nexport const careTypeSchema = z.enum([\n  'fertilizer',\n  'water',\n  'repot',\n  'prune',\n  'inspect',\n  'other'\n]);\n\n// Fertilizer schedule schema\nexport const fertilizerScheduleSchema = z.enum([\n  'weekly',\n  'biweekly', \n  'monthly',\n  'bimonthly',\n  'quarterly',\n  'custom'\n]).or(z.string().regex(/^\\d+$/, 'Custom schedule must be a number of days'));\n\n// Care history entry schema\nexport const careHistorySchema = z.object({\n  id: z.number().optional(),\n  userId: z.number(),\n  plantInstanceId: z.number(),\n  careType: careTypeSchema,\n  careDate: z.date(),\n  notes: z.string().max(1000, 'Notes must be less than 1000 characters').optional(),\n  fertilizerType: z.string().max(100, 'Fertilizer type must be less than 100 characters').optional(),\n  potSize: z.string().max(50, 'Pot size must be less than 50 characters').optional(),\n  soilType: z.string().max(100, 'Soil type must be less than 100 characters').optional(),\n  images: z.array(z.string()).default([]),\n  createdAt: z.date().optional(),\n  updatedAt: z.date().optional(),\n});\n\n// Care form data schema for creating new care entries\nexport const careFormSchema = z.object({\n  plantInstanceId: z.number().min(1, 'Plant instance ID is required'),\n  careType: careTypeSchema,\n  careDate: z.date().refine(\n    (date) => date <= new Date(),\n    'Care date cannot be in the future'\n  ).refine(\n    (date) => {\n      const oneYearAgo = new Date();\n      oneYearAgo.setFullYear(oneYearAgo.getFullYear() - 1);\n      return date >= oneYearAgo;\n    },\n    'Care date cannot be more than one year ago'\n  ),\n  notes: z.string().max(1000, 'Notes must be less than 1000 characters').optional(),\n  fertilizerType: z.string().max(100, 'Fertilizer type must be less than 100 characters').optional(),\n  potSize: z.string().max(50, 'Pot size must be less than 50 characters').optional(),\n  soilType: z.string().max(100, 'Soil type must be less than 100 characters').optional(),\n  images: z.array(z.string()).default([]),\n  updateSchedule: z.boolean().default(true),\n}).refine(\n  (data) => {\n    // If care type is fertilizer, fertilizer type is recommended\n    if (data.careType === 'fertilizer' && !data.fertilizerType) {\n      return true; // Allow but will show warning\n    }\n    return true;\n  }\n).refine(\n  (data) => {\n    // If care type is repot, pot size and soil type are recommended\n    if (data.careType === 'repot' && (!data.potSize || !data.soilType)) {\n      return true; // Allow but will show warning\n    }\n    return true;\n  }\n);\n\n// Quick care log schema for simple care logging\nexport const quickCareLogSchema = z.object({\n  plantInstanceId: z.number().min(1, 'Plant instance ID is required'),\n  careType: careTypeSchema,\n  careDate: z.date().default(() => new Date()),\n  notes: z.string().max(500, 'Notes must be less than 500 characters').optional(),\n});\n\n// Bulk care operation schema\nexport const bulkCareSchema = z.object({\n  plantInstanceIds: z.array(z.number()).min(1, 'At least one plant must be selected'),\n  careType: careTypeSchema,\n  careDate: z.date().default(() => new Date()),\n  notes: z.string().max(500, 'Notes must be less than 500 characters').optional(),\n  fertilizerType: z.string().max(100, 'Fertilizer type must be less than 100 characters').optional(),\n});\n\n// Care filter schema for querying care history\nexport const careFilterSchema = z.object({\n  plantInstanceId: z.number().optional(),\n  careType: careTypeSchema.optional(),\n  startDate: z.date().optional(),\n  endDate: z.date().optional(),\n  limit: z.number().min(1).max(100).default(50),\n  offset: z.number().min(0).default(0),\n  sortBy: z.enum(['care_date', 'care_type', 'created_at']).default('care_date'),\n  sortOrder: z.enum(['asc', 'desc']).default('desc'),\n});\n\n// Care statistics query schema\nexport const careStatsQuerySchema = z.object({\n  plantInstanceId: z.number().optional(),\n  startDate: z.date().optional(),\n  endDate: z.date().optional(),\n  careTypes: z.array(careTypeSchema).optional(),\n});\n\n// Care reminder schema\nexport const careReminderSchema = z.object({\n  id: z.string().optional(),\n  plantInstanceId: z.number(),\n  careType: careTypeSchema,\n  reminderDate: z.date(),\n  isActive: z.boolean().default(true),\n  notificationSent: z.boolean().default(false),\n  createdAt: z.date().optional(),\n});\n\n// Plant instance care update schema\nexport const plantInstanceCareUpdateSchema = z.object({\n  lastFertilized: z.date().optional(),\n  fertilizerSchedule: fertilizerScheduleSchema.optional(),\n  fertilizerDue: z.date().optional(),\n  lastRepot: z.date().optional(),\n});\n\n// Care dashboard query schema\nexport const careDashboardQuerySchema = z.object({\n  userId: z.number(),\n  includeInactive: z.boolean().default(false),\n  daysAhead: z.number().min(1).max(30).default(7), // How many days ahead to look for \"due soon\"\n});\n\n// Care schedule calculation input schema\nexport const careScheduleInputSchema = z.object({\n  lastFertilized: z.date().nullable(),\n  fertilizerSchedule: fertilizerScheduleSchema,\n  currentDate: z.date().default(() => new Date()),\n});\n\n// Export type definitions\nexport type CareTypeInput = z.infer<typeof careTypeSchema>;\nexport type FertilizerScheduleInput = z.infer<typeof fertilizerScheduleSchema>;\nexport type CareHistoryInput = z.infer<typeof careHistorySchema>;\nexport type CareFormInput = z.infer<typeof careFormSchema>;\nexport type QuickCareLogInput = z.infer<typeof quickCareLogSchema>;\nexport type BulkCareInput = z.infer<typeof bulkCareSchema>;\nexport type CareFilterInput = z.infer<typeof careFilterSchema>;\nexport type CareStatsQueryInput = z.infer<typeof careStatsQuerySchema>;\nexport type CareReminderInput = z.infer<typeof careReminderSchema>;\nexport type PlantInstanceCareUpdateInput = z.infer<typeof plantInstanceCareUpdateSchema>;\nexport type CareDashboardQueryInput = z.infer<typeof careDashboardQuerySchema>;\nexport type CareScheduleInput = z.infer<typeof careScheduleInputSchema>;\n\n// Validation helper functions\nexport const careValidation = {\n  // Validate care form data\n  validateCareForm: (data: unknown) => {\n    return careFormSchema.safeParse(data);\n  },\n\n  // Validate quick care log\n  validateQuickCareLog: (data: unknown) => {\n    return quickCareLogSchema.safeParse(data);\n  },\n\n  // Validate bulk care operation\n  validateBulkCare: (data: unknown) => {\n    return bulkCareSchema.safeParse(data);\n  },\n\n  // Validate care filter\n  validateCareFilter: (data: unknown) => {\n    return careFilterSchema.safeParse(data);\n  },\n\n  // Validate care reminder\n  validateCareReminder: (data: unknown) => {\n    return careReminderSchema.safeParse(data);\n  },\n\n  // Validate fertilizer schedule\n  validateFertilizerSchedule: (schedule: string): boolean => {\n    return fertilizerScheduleSchema.safeParse(schedule).success;\n  },\n\n  // Parse fertilizer schedule to days\n  parseFertilizerScheduleToDays: (schedule: string): number => {\n    const scheduleMap: Record<string, number> = {\n      'weekly': 7,\n      'biweekly': 14,\n      'monthly': 30,\n      'bimonthly': 60,\n      'quarterly': 90\n    };\n\n    // Check if it's a predefined schedule\n    if (scheduleMap[schedule]) {\n      return scheduleMap[schedule];\n    }\n\n    // Try to parse as custom number of days\n    const customDays = parseInt(schedule, 10);\n    if (!isNaN(customDays) && customDays > 0) {\n      return customDays;\n    }\n\n    // Default to monthly if unable to parse\n    return 30;\n  },\n\n  // Validate care date range\n  validateDateRange: (startDate?: Date, endDate?: Date): boolean => {\n    if (!startDate || !endDate) return true;\n    return startDate <= endDate;\n  },\n\n  // Get care type validation error messages\n  getCareTypeErrorMessage: (careType: string): string | null => {\n    const validTypes = ['fertilizer', 'water', 'repot', 'prune', 'inspect', 'other'];\n    if (!validTypes.includes(careType)) {\n      return `Care type must be one of: ${validTypes.join(', ')}`;\n    }\n    return null;\n  }\n};"],"names":["bulkCareSchema","careDashboardQuerySchema","careFilterSchema","careFormSchema","careHistorySchema","careReminderSchema","careScheduleInputSchema","careStatsQuerySchema","careTypeSchema","careValidation","fertilizerScheduleSchema","plantInstanceCareUpdateSchema","quickCareLogSchema","z","enum","or","string","regex","object","id","number","optional","userId","plantInstanceId","careType","careDate","date","notes","max","fertilizerType","potSize","soilType","images","array","default","createdAt","updatedAt","min","refine","Date","oneYearAgo","setFullYear","getFullYear","updateSchedule","boolean","data","plantInstanceIds","startDate","endDate","limit","offset","sortBy","sortOrder","careTypes","reminderDate","isActive","notificationSent","lastFertilized","fertilizerSchedule","fertilizerDue","lastRepot","includeInactive","daysAhead","nullable","currentDate","validateCareForm","safeParse","validateQuickCareLog","validateBulkCare","validateCareFilter","validateCareReminder","validateFertilizerSchedule","schedule","success","parseFertilizerScheduleToDays","scheduleMap","customDays","parseInt","isNaN","validateDateRange","getCareTypeErrorMessage","validTypes","includes","join"],"mappings":"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"}