{"version":3,"sources":["/Users/stefanbekker/projects/fancy-planties/src/__tests__/database/user-auth-queries.test.js"],"sourcesContent":["/**\n * User and Authentication Database Query Tests\n * Tests user creation, retrieval, session management, and password operations\n */\n\nimport {\n  createUser,\n  getUserByEmail,\n  getUserById,\n  hashPassword,\n  verifyPassword,\n  signIn,\n  signUp,\n  createSession,\n  invalidateSession,\n} from '../../lib/auth';\nimport { createDatabaseTestManager } from '../../test-utils/setup/database-test-manager';\nimport { createTestUser, createTestUserWithPassword, hashTestPassword } from '../../test-utils/factories/user-factory';\n\ndescribe('User and Authentication Database Queries', () => {\n  let dbManager;\n\n  beforeEach(() => {\n    dbManager = createDatabaseTestManager();\n  });\n\n  afterEach(async () => {\n    await dbManager.cleanup();\n  });\n\n  describe('User Creation and Retrieval', () => {\n    test('should create a new user with hashed password', async () => {\n      const email = 'test@example.com';\n      const password = 'testpassword123';\n      const name = 'Test User';\n\n      const user = await createUser(email, password, name);\n\n      expect(user).toBeDefined();\n      expect(user.id).toBeDefined();\n      expect(user.email).toBe(email.toLowerCase());\n      expect(user.name).toBe(name);\n      expect(user.hashedPassword).toBeDefined();\n      expect(user.hashedPassword).not.toBe(password); // Should be hashed\n      expect(user.isCurator).toBe(false);\n      expect(user.isEmailVerified).toBe(false);\n      expect(user.createdAt).toBeInstanceOf(Date);\n      expect(user.updatedAt).toBeInstanceOf(Date);\n\n      // Track for cleanup\n      dbManager.createdUsers.push(user.id);\n    });\n\n    test('should retrieve user by email (case insensitive)', async () => {\n      const testUser = createTestUser({\n        email: 'Test@Example.COM',\n      });\n      \n      const createdUser = await dbManager.createTestUser(testUser);\n\n      // Test case insensitive retrieval\n      const foundUser1 = await getUserByEmail('test@example.com');\n      const foundUser2 = await getUserByEmail('TEST@EXAMPLE.COM');\n      const foundUser3 = await getUserByEmail('Test@Example.COM');\n\n      expect(foundUser1).toBeDefined();\n      expect(foundUser2).toBeDefined();\n      expect(foundUser3).toBeDefined();\n      expect(foundUser1.id).toBe(createdUser.id);\n      expect(foundUser2.id).toBe(createdUser.id);\n      expect(foundUser3.id).toBe(createdUser.id);\n    });\n\n    test('should return null for non-existent email', async () => {\n      const user = await getUserByEmail('nonexistent@example.com');\n      expect(user).toBeNull();\n    });\n\n    test('should retrieve user by ID', async () => {\n      const testUser = createTestUser();\n      const createdUser = await dbManager.createTestUser(testUser);\n\n      const foundUser = await getUserById(createdUser.id);\n\n      expect(foundUser).toBeDefined();\n      expect(foundUser.id).toBe(createdUser.id);\n      expect(foundUser.email).toBe(createdUser.email);\n      expect(foundUser.name).toBe(createdUser.name);\n    });\n\n    test('should return null for non-existent user ID', async () => {\n      const user = await getUserById(99999);\n      expect(user).toBeNull();\n    });\n\n    test('should prevent duplicate email registration', async () => {\n      const email = 'duplicate@example.com';\n      \n      // Create first user\n      await createUser(email, 'password1', 'User 1');\n      \n      // Attempt to create second user with same email should fail\n      await expect(createUser(email, 'password2', 'User 2')).rejects.toThrow();\n    });\n  });\n\n  describe('Password Hashing and Verification', () => {\n    test('should hash passwords securely', async () => {\n      const password = 'testpassword123';\n      const hash1 = await hashPassword(password);\n      const hash2 = await hashPassword(password);\n\n      expect(hash1).toBeDefined();\n      expect(hash2).toBeDefined();\n      expect(hash1).not.toBe(password);\n      expect(hash2).not.toBe(password);\n      expect(hash1).not.toBe(hash2); // Should use salt, so hashes differ\n      expect(hash1.length).toBeGreaterThan(50); // bcrypt hashes are long\n    });\n\n    test('should verify correct passwords', async () => {\n      const password = 'testpassword123';\n      const hash = await hashPassword(password);\n\n      const isValid = await verifyPassword(password, hash);\n      expect(isValid).toBe(true);\n    });\n\n    test('should reject incorrect passwords', async () => {\n      const password = 'testpassword123';\n      const wrongPassword = 'wrongpassword';\n      const hash = await hashPassword(password);\n\n      const isValid = await verifyPassword(wrongPassword, hash);\n      expect(isValid).toBe(false);\n    });\n\n    test('should handle empty passwords gracefully', async () => {\n      const hash = await hashPassword('validpassword');\n      \n      const isValid = await verifyPassword('', hash);\n      expect(isValid).toBe(false);\n    });\n  });\n\n  describe('Session Management', () => {\n    test('should create session for user', async () => {\n      const testUser = createTestUser();\n      const createdUser = await dbManager.createTestUser(testUser);\n\n      const session = await createSession(createdUser.id);\n\n      expect(session).toBeDefined();\n      expect(session.id).toBeDefined();\n      expect(session.userId).toBe(createdUser.id);\n      expect(session.expiresAt).toBeInstanceOf(Date);\n      expect(session.expiresAt.getTime()).toBeGreaterThan(Date.now());\n\n      // Track for cleanup\n      dbManager.createdSessions.push(session.id);\n    });\n\n    test('should retrieve session by ID', async () => {\n      const testUser = createTestUser();\n      const createdUser = await dbManager.createTestUser(testUser);\n      const session = await createSession(createdUser.id);\n      dbManager.createdSessions.push(session.id);\n\n      const foundSession = await dbManager.getSessionById(session.id);\n\n      expect(foundSession).toBeDefined();\n      expect(foundSession.id).toBe(session.id);\n      expect(foundSession.userId).toBe(createdUser.id);\n    });\n\n    test('should retrieve sessions by user ID', async () => {\n      const testUser = createTestUser();\n      const createdUser = await dbManager.createTestUser(testUser);\n      \n      // Create multiple sessions for the user\n      const session1 = await createSession(createdUser.id);\n      const session2 = await createSession(createdUser.id);\n      dbManager.createdSessions.push(session1.id, session2.id);\n\n      const userSessions = await dbManager.getSessionsByUserId(createdUser.id);\n\n      expect(userSessions).toHaveLength(2);\n      expect(userSessions.map(s => s.id)).toContain(session1.id);\n      expect(userSessions.map(s => s.id)).toContain(session2.id);\n    });\n\n    test('should invalidate session', async () => {\n      const testUser = createTestUser();\n      const createdUser = await dbManager.createTestUser(testUser);\n      const session = await createSession(createdUser.id);\n      dbManager.createdSessions.push(session.id);\n\n      // Verify session exists\n      let foundSession = await dbManager.getSessionById(session.id);\n      expect(foundSession).toBeDefined();\n\n      // Invalidate session\n      await invalidateSession(session.id);\n\n      // Session should no longer exist\n      foundSession = await dbManager.getSessionById(session.id);\n      expect(foundSession).toBeNull();\n    });\n  });\n\n  describe('Authentication Flows', () => {\n    test('should sign in with valid credentials', async () => {\n      const email = 'signin@example.com';\n      const password = 'testpassword123';\n      const name = 'Sign In User';\n\n      // Create user first\n      const user = await createUser(email, password, name);\n      dbManager.createdUsers.push(user.id);\n\n      // Attempt sign in\n      const result = await signIn(email, password);\n\n      expect(result).toBeDefined();\n      expect(result.user).toBeDefined();\n      expect(result.session).toBeDefined();\n      expect(result.user.id).toBe(user.id);\n      expect(result.user.email).toBe(email.toLowerCase());\n      expect(result.session.userId).toBe(user.id);\n      expect(result.session.id).toBeDefined();\n\n      // Track session for cleanup\n      dbManager.createdSessions.push(result.session.id);\n    });\n\n    test('should reject sign in with invalid email', async () => {\n      const result = await signIn('nonexistent@example.com', 'password');\n      expect(result).toBeNull();\n    });\n\n    test('should reject sign in with invalid password', async () => {\n      const email = 'signin2@example.com';\n      const password = 'correctpassword';\n      const wrongPassword = 'wrongpassword';\n\n      // Create user\n      const user = await createUser(email, password, 'Test User');\n      dbManager.createdUsers.push(user.id);\n\n      // Attempt sign in with wrong password\n      const result = await signIn(email, wrongPassword);\n      expect(result).toBeNull();\n    });\n\n    test('should sign up new user successfully', async () => {\n      const email = 'signup@example.com';\n      const password = 'testpassword123';\n      const name = 'Sign Up User';\n\n      const result = await signUp(email, password, name);\n\n      expect(result).toBeDefined();\n      expect(result.user).toBeDefined();\n      expect(result.session).toBeDefined();\n      expect(result.user.email).toBe(email.toLowerCase());\n      expect(result.user.name).toBe(name);\n      expect(result.session.userId).toBe(result.user.id);\n\n      // Track for cleanup\n      dbManager.createdUsers.push(result.user.id);\n      dbManager.createdSessions.push(result.session.id);\n    });\n\n    test('should reject sign up with existing email', async () => {\n      const email = 'existing@example.com';\n      const password = 'testpassword123';\n\n      // Create first user\n      const user1 = await createUser(email, password, 'First User');\n      dbManager.createdUsers.push(user1.id);\n\n      // Attempt to sign up with same email\n      await expect(signUp(email, password, 'Second User')).rejects.toThrow('User already exists');\n    });\n\n    test('should handle case insensitive email in sign in', async () => {\n      const email = 'CaseTest@Example.COM';\n      const password = 'testpassword123';\n\n      // Create user with mixed case email\n      const user = await createUser(email, password, 'Case Test User');\n      dbManager.createdUsers.push(user.id);\n\n      // Sign in with different case\n      const result = await signIn('casetest@example.com', password);\n\n      expect(result).toBeDefined();\n      expect(result.user.id).toBe(user.id);\n\n      // Track session for cleanup\n      dbManager.createdSessions.push(result.session.id);\n    });\n  });\n\n  describe('Email Verification Code Management', () => {\n    test('should create and retrieve email verification codes', async () => {\n      const testUser = createTestUser();\n      const createdUser = await dbManager.createTestUser(testUser);\n\n      const codeData = {\n        userId: createdUser.id,\n        code: '123456',\n        expiresAt: new Date(Date.now() + 15 * 60 * 1000), // 15 minutes\n        attemptsUsed: 0,\n      };\n\n      const createdCode = await dbManager.createTestEmailCode(codeData);\n\n      expect(createdCode).toBeDefined();\n      expect(createdCode.userId).toBe(createdUser.id);\n      expect(createdCode.code).toBe('123456');\n      expect(createdCode.expiresAt).toBeInstanceOf(Date);\n\n      // Retrieve codes for user\n      const userCodes = await dbManager.getEmailCodesByUserId(createdUser.id);\n      expect(userCodes).toHaveLength(1);\n      expect(userCodes[0].id).toBe(createdCode.id);\n    });\n\n    test('should handle multiple verification codes for user', async () => {\n      const testUser = createTestUser();\n      const createdUser = await dbManager.createTestUser(testUser);\n\n      // Create multiple codes (simulating code regeneration)\n      const code1 = await dbManager.createTestEmailCode({\n        userId: createdUser.id,\n        code: '111111',\n        expiresAt: new Date(Date.now() + 15 * 60 * 1000),\n        attemptsUsed: 0,\n      });\n\n      const code2 = await dbManager.createTestEmailCode({\n        userId: createdUser.id,\n        code: '222222',\n        expiresAt: new Date(Date.now() + 15 * 60 * 1000),\n        attemptsUsed: 0,\n      });\n\n      const userCodes = await dbManager.getEmailCodesByUserId(createdUser.id);\n      expect(userCodes).toHaveLength(2);\n      expect(userCodes.map(c => c.code)).toContain('111111');\n      expect(userCodes.map(c => c.code)).toContain('222222');\n    });\n  });\n\n  describe('Database Connection and Error Handling', () => {\n    test('should verify database connection is working', async () => {\n      const isConnected = await dbManager.isConnected();\n      expect(isConnected).toBe(true);\n    });\n\n    test('should handle database constraint violations gracefully', async () => {\n      const email = 'constraint@example.com';\n      \n      // Create first user\n      const user1 = await createUser(email, 'password1', 'User 1');\n      dbManager.createdUsers.push(user1.id);\n\n      // Attempt to create duplicate should throw error\n      await expect(createUser(email, 'password2', 'User 2')).rejects.toThrow();\n    });\n  });\n});"],"names":["describe","dbManager","beforeEach","createDatabaseTestManager","afterEach","cleanup","test","email","password","name","user","createUser","expect","toBeDefined","id","toBe","toLowerCase","hashedPassword","not","isCurator","isEmailVerified","createdAt","toBeInstanceOf","Date","updatedAt","createdUsers","push","testUser","createTestUser","createdUser","foundUser1","getUserByEmail","foundUser2","foundUser3","toBeNull","foundUser","getUserById","rejects","toThrow","hash1","hashPassword","hash2","length","toBeGreaterThan","hash","isValid","verifyPassword","wrongPassword","session","createSession","userId","expiresAt","getTime","now","createdSessions","foundSession","getSessionById","session1","session2","userSessions","getSessionsByUserId","toHaveLength","map","s","toContain","invalidateSession","result","signIn","signUp","user1","codeData","code","attemptsUsed","createdCode","createTestEmailCode","userCodes","getEmailCodesByUserId","code1","code2","c","isConnected"],"mappings":"AAAA;;;CAGC;;;;sBAYM;qCACmC;6BACmC;AAE7EA,SAAS,4CAA4C;IACnD,IAAIC;IAEJC,WAAW;QACTD,YAAYE,IAAAA,8CAAyB;IACvC;IAEAC,UAAU;QACR,MAAMH,UAAUI,OAAO;IACzB;IAEAL,SAAS,+BAA+B;QACtCM,KAAK,iDAAiD;YACpD,MAAMC,QAAQ;YACd,MAAMC,WAAW;YACjB,MAAMC,OAAO;YAEb,MAAMC,OAAO,MAAMC,IAAAA,gBAAU,EAACJ,OAAOC,UAAUC;YAE/CG,OAAOF,MAAMG,WAAW;YACxBD,OAAOF,KAAKI,EAAE,EAAED,WAAW;YAC3BD,OAAOF,KAAKH,KAAK,EAAEQ,IAAI,CAACR,MAAMS,WAAW;YACzCJ,OAAOF,KAAKD,IAAI,EAAEM,IAAI,CAACN;YACvBG,OAAOF,KAAKO,cAAc,EAAEJ,WAAW;YACvCD,OAAOF,KAAKO,cAAc,EAAEC,GAAG,CAACH,IAAI,CAACP,WAAW,mBAAmB;YACnEI,OAAOF,KAAKS,SAAS,EAAEJ,IAAI,CAAC;YAC5BH,OAAOF,KAAKU,eAAe,EAAEL,IAAI,CAAC;YAClCH,OAAOF,KAAKW,SAAS,EAAEC,cAAc,CAACC;YACtCX,OAAOF,KAAKc,SAAS,EAAEF,cAAc,CAACC;YAEtC,oBAAoB;YACpBtB,UAAUwB,YAAY,CAACC,IAAI,CAAChB,KAAKI,EAAE;QACrC;QAEAR,KAAK,oDAAoD;YACvD,MAAMqB,WAAWC,IAAAA,2BAAc,EAAC;gBAC9BrB,OAAO;YACT;YAEA,MAAMsB,cAAc,MAAM5B,UAAU2B,cAAc,CAACD;YAEnD,kCAAkC;YAClC,MAAMG,aAAa,MAAMC,IAAAA,oBAAc,EAAC;YACxC,MAAMC,aAAa,MAAMD,IAAAA,oBAAc,EAAC;YACxC,MAAME,aAAa,MAAMF,IAAAA,oBAAc,EAAC;YAExCnB,OAAOkB,YAAYjB,WAAW;YAC9BD,OAAOoB,YAAYnB,WAAW;YAC9BD,OAAOqB,YAAYpB,WAAW;YAC9BD,OAAOkB,WAAWhB,EAAE,EAAEC,IAAI,CAACc,YAAYf,EAAE;YACzCF,OAAOoB,WAAWlB,EAAE,EAAEC,IAAI,CAACc,YAAYf,EAAE;YACzCF,OAAOqB,WAAWnB,EAAE,EAAEC,IAAI,CAACc,YAAYf,EAAE;QAC3C;QAEAR,KAAK,6CAA6C;YAChD,MAAMI,OAAO,MAAMqB,IAAAA,oBAAc,EAAC;YAClCnB,OAAOF,MAAMwB,QAAQ;QACvB;QAEA5B,KAAK,8BAA8B;YACjC,MAAMqB,WAAWC,IAAAA,2BAAc;YAC/B,MAAMC,cAAc,MAAM5B,UAAU2B,cAAc,CAACD;YAEnD,MAAMQ,YAAY,MAAMC,IAAAA,iBAAW,EAACP,YAAYf,EAAE;YAElDF,OAAOuB,WAAWtB,WAAW;YAC7BD,OAAOuB,UAAUrB,EAAE,EAAEC,IAAI,CAACc,YAAYf,EAAE;YACxCF,OAAOuB,UAAU5B,KAAK,EAAEQ,IAAI,CAACc,YAAYtB,KAAK;YAC9CK,OAAOuB,UAAU1B,IAAI,EAAEM,IAAI,CAACc,YAAYpB,IAAI;QAC9C;QAEAH,KAAK,+CAA+C;YAClD,MAAMI,OAAO,MAAM0B,IAAAA,iBAAW,EAAC;YAC/BxB,OAAOF,MAAMwB,QAAQ;QACvB;QAEA5B,KAAK,+CAA+C;YAClD,MAAMC,QAAQ;YAEd,oBAAoB;YACpB,MAAMI,IAAAA,gBAAU,EAACJ,OAAO,aAAa;YAErC,4DAA4D;YAC5D,MAAMK,OAAOD,IAAAA,gBAAU,EAACJ,OAAO,aAAa,WAAW8B,OAAO,CAACC,OAAO;QACxE;IACF;IAEAtC,SAAS,qCAAqC;QAC5CM,KAAK,kCAAkC;YACrC,MAAME,WAAW;YACjB,MAAM+B,QAAQ,MAAMC,IAAAA,kBAAY,EAAChC;YACjC,MAAMiC,QAAQ,MAAMD,IAAAA,kBAAY,EAAChC;YAEjCI,OAAO2B,OAAO1B,WAAW;YACzBD,OAAO6B,OAAO5B,WAAW;YACzBD,OAAO2B,OAAOrB,GAAG,CAACH,IAAI,CAACP;YACvBI,OAAO6B,OAAOvB,GAAG,CAACH,IAAI,CAACP;YACvBI,OAAO2B,OAAOrB,GAAG,CAACH,IAAI,CAAC0B,QAAQ,oCAAoC;YACnE7B,OAAO2B,MAAMG,MAAM,EAAEC,eAAe,CAAC,KAAK,yBAAyB;QACrE;QAEArC,KAAK,mCAAmC;YACtC,MAAME,WAAW;YACjB,MAAMoC,OAAO,MAAMJ,IAAAA,kBAAY,EAAChC;YAEhC,MAAMqC,UAAU,MAAMC,IAAAA,oBAAc,EAACtC,UAAUoC;YAC/ChC,OAAOiC,SAAS9B,IAAI,CAAC;QACvB;QAEAT,KAAK,qCAAqC;YACxC,MAAME,WAAW;YACjB,MAAMuC,gBAAgB;YACtB,MAAMH,OAAO,MAAMJ,IAAAA,kBAAY,EAAChC;YAEhC,MAAMqC,UAAU,MAAMC,IAAAA,oBAAc,EAACC,eAAeH;YACpDhC,OAAOiC,SAAS9B,IAAI,CAAC;QACvB;QAEAT,KAAK,4CAA4C;YAC/C,MAAMsC,OAAO,MAAMJ,IAAAA,kBAAY,EAAC;YAEhC,MAAMK,UAAU,MAAMC,IAAAA,oBAAc,EAAC,IAAIF;YACzChC,OAAOiC,SAAS9B,IAAI,CAAC;QACvB;IACF;IAEAf,SAAS,sBAAsB;QAC7BM,KAAK,kCAAkC;YACrC,MAAMqB,WAAWC,IAAAA,2BAAc;YAC/B,MAAMC,cAAc,MAAM5B,UAAU2B,cAAc,CAACD;YAEnD,MAAMqB,UAAU,MAAMC,IAAAA,mBAAa,EAACpB,YAAYf,EAAE;YAElDF,OAAOoC,SAASnC,WAAW;YAC3BD,OAAOoC,QAAQlC,EAAE,EAAED,WAAW;YAC9BD,OAAOoC,QAAQE,MAAM,EAAEnC,IAAI,CAACc,YAAYf,EAAE;YAC1CF,OAAOoC,QAAQG,SAAS,EAAE7B,cAAc,CAACC;YACzCX,OAAOoC,QAAQG,SAAS,CAACC,OAAO,IAAIT,eAAe,CAACpB,KAAK8B,GAAG;YAE5D,oBAAoB;YACpBpD,UAAUqD,eAAe,CAAC5B,IAAI,CAACsB,QAAQlC,EAAE;QAC3C;QAEAR,KAAK,iCAAiC;YACpC,MAAMqB,WAAWC,IAAAA,2BAAc;YAC/B,MAAMC,cAAc,MAAM5B,UAAU2B,cAAc,CAACD;YACnD,MAAMqB,UAAU,MAAMC,IAAAA,mBAAa,EAACpB,YAAYf,EAAE;YAClDb,UAAUqD,eAAe,CAAC5B,IAAI,CAACsB,QAAQlC,EAAE;YAEzC,MAAMyC,eAAe,MAAMtD,UAAUuD,cAAc,CAACR,QAAQlC,EAAE;YAE9DF,OAAO2C,cAAc1C,WAAW;YAChCD,OAAO2C,aAAazC,EAAE,EAAEC,IAAI,CAACiC,QAAQlC,EAAE;YACvCF,OAAO2C,aAAaL,MAAM,EAAEnC,IAAI,CAACc,YAAYf,EAAE;QACjD;QAEAR,KAAK,uCAAuC;YAC1C,MAAMqB,WAAWC,IAAAA,2BAAc;YAC/B,MAAMC,cAAc,MAAM5B,UAAU2B,cAAc,CAACD;YAEnD,wCAAwC;YACxC,MAAM8B,WAAW,MAAMR,IAAAA,mBAAa,EAACpB,YAAYf,EAAE;YACnD,MAAM4C,WAAW,MAAMT,IAAAA,mBAAa,EAACpB,YAAYf,EAAE;YACnDb,UAAUqD,eAAe,CAAC5B,IAAI,CAAC+B,SAAS3C,EAAE,EAAE4C,SAAS5C,EAAE;YAEvD,MAAM6C,eAAe,MAAM1D,UAAU2D,mBAAmB,CAAC/B,YAAYf,EAAE;YAEvEF,OAAO+C,cAAcE,YAAY,CAAC;YAClCjD,OAAO+C,aAAaG,GAAG,CAACC,CAAAA,IAAKA,EAAEjD,EAAE,GAAGkD,SAAS,CAACP,SAAS3C,EAAE;YACzDF,OAAO+C,aAAaG,GAAG,CAACC,CAAAA,IAAKA,EAAEjD,EAAE,GAAGkD,SAAS,CAACN,SAAS5C,EAAE;QAC3D;QAEAR,KAAK,6BAA6B;YAChC,MAAMqB,WAAWC,IAAAA,2BAAc;YAC/B,MAAMC,cAAc,MAAM5B,UAAU2B,cAAc,CAACD;YACnD,MAAMqB,UAAU,MAAMC,IAAAA,mBAAa,EAACpB,YAAYf,EAAE;YAClDb,UAAUqD,eAAe,CAAC5B,IAAI,CAACsB,QAAQlC,EAAE;YAEzC,wBAAwB;YACxB,IAAIyC,eAAe,MAAMtD,UAAUuD,cAAc,CAACR,QAAQlC,EAAE;YAC5DF,OAAO2C,cAAc1C,WAAW;YAEhC,qBAAqB;YACrB,MAAMoD,IAAAA,uBAAiB,EAACjB,QAAQlC,EAAE;YAElC,iCAAiC;YACjCyC,eAAe,MAAMtD,UAAUuD,cAAc,CAACR,QAAQlC,EAAE;YACxDF,OAAO2C,cAAcrB,QAAQ;QAC/B;IACF;IAEAlC,SAAS,wBAAwB;QAC/BM,KAAK,yCAAyC;YAC5C,MAAMC,QAAQ;YACd,MAAMC,WAAW;YACjB,MAAMC,OAAO;YAEb,oBAAoB;YACpB,MAAMC,OAAO,MAAMC,IAAAA,gBAAU,EAACJ,OAAOC,UAAUC;YAC/CR,UAAUwB,YAAY,CAACC,IAAI,CAAChB,KAAKI,EAAE;YAEnC,kBAAkB;YAClB,MAAMoD,SAAS,MAAMC,IAAAA,YAAM,EAAC5D,OAAOC;YAEnCI,OAAOsD,QAAQrD,WAAW;YAC1BD,OAAOsD,OAAOxD,IAAI,EAAEG,WAAW;YAC/BD,OAAOsD,OAAOlB,OAAO,EAAEnC,WAAW;YAClCD,OAAOsD,OAAOxD,IAAI,CAACI,EAAE,EAAEC,IAAI,CAACL,KAAKI,EAAE;YACnCF,OAAOsD,OAAOxD,IAAI,CAACH,KAAK,EAAEQ,IAAI,CAACR,MAAMS,WAAW;YAChDJ,OAAOsD,OAAOlB,OAAO,CAACE,MAAM,EAAEnC,IAAI,CAACL,KAAKI,EAAE;YAC1CF,OAAOsD,OAAOlB,OAAO,CAAClC,EAAE,EAAED,WAAW;YAErC,4BAA4B;YAC5BZ,UAAUqD,eAAe,CAAC5B,IAAI,CAACwC,OAAOlB,OAAO,CAAClC,EAAE;QAClD;QAEAR,KAAK,4CAA4C;YAC/C,MAAM4D,SAAS,MAAMC,IAAAA,YAAM,EAAC,2BAA2B;YACvDvD,OAAOsD,QAAQhC,QAAQ;QACzB;QAEA5B,KAAK,+CAA+C;YAClD,MAAMC,QAAQ;YACd,MAAMC,WAAW;YACjB,MAAMuC,gBAAgB;YAEtB,cAAc;YACd,MAAMrC,OAAO,MAAMC,IAAAA,gBAAU,EAACJ,OAAOC,UAAU;YAC/CP,UAAUwB,YAAY,CAACC,IAAI,CAAChB,KAAKI,EAAE;YAEnC,sCAAsC;YACtC,MAAMoD,SAAS,MAAMC,IAAAA,YAAM,EAAC5D,OAAOwC;YACnCnC,OAAOsD,QAAQhC,QAAQ;QACzB;QAEA5B,KAAK,wCAAwC;YAC3C,MAAMC,QAAQ;YACd,MAAMC,WAAW;YACjB,MAAMC,OAAO;YAEb,MAAMyD,SAAS,MAAME,IAAAA,YAAM,EAAC7D,OAAOC,UAAUC;YAE7CG,OAAOsD,QAAQrD,WAAW;YAC1BD,OAAOsD,OAAOxD,IAAI,EAAEG,WAAW;YAC/BD,OAAOsD,OAAOlB,OAAO,EAAEnC,WAAW;YAClCD,OAAOsD,OAAOxD,IAAI,CAACH,KAAK,EAAEQ,IAAI,CAACR,MAAMS,WAAW;YAChDJ,OAAOsD,OAAOxD,IAAI,CAACD,IAAI,EAAEM,IAAI,CAACN;YAC9BG,OAAOsD,OAAOlB,OAAO,CAACE,MAAM,EAAEnC,IAAI,CAACmD,OAAOxD,IAAI,CAACI,EAAE;YAEjD,oBAAoB;YACpBb,UAAUwB,YAAY,CAACC,IAAI,CAACwC,OAAOxD,IAAI,CAACI,EAAE;YAC1Cb,UAAUqD,eAAe,CAAC5B,IAAI,CAACwC,OAAOlB,OAAO,CAAClC,EAAE;QAClD;QAEAR,KAAK,6CAA6C;YAChD,MAAMC,QAAQ;YACd,MAAMC,WAAW;YAEjB,oBAAoB;YACpB,MAAM6D,QAAQ,MAAM1D,IAAAA,gBAAU,EAACJ,OAAOC,UAAU;YAChDP,UAAUwB,YAAY,CAACC,IAAI,CAAC2C,MAAMvD,EAAE;YAEpC,qCAAqC;YACrC,MAAMF,OAAOwD,IAAAA,YAAM,EAAC7D,OAAOC,UAAU,gBAAgB6B,OAAO,CAACC,OAAO,CAAC;QACvE;QAEAhC,KAAK,mDAAmD;YACtD,MAAMC,QAAQ;YACd,MAAMC,WAAW;YAEjB,oCAAoC;YACpC,MAAME,OAAO,MAAMC,IAAAA,gBAAU,EAACJ,OAAOC,UAAU;YAC/CP,UAAUwB,YAAY,CAACC,IAAI,CAAChB,KAAKI,EAAE;YAEnC,8BAA8B;YAC9B,MAAMoD,SAAS,MAAMC,IAAAA,YAAM,EAAC,wBAAwB3D;YAEpDI,OAAOsD,QAAQrD,WAAW;YAC1BD,OAAOsD,OAAOxD,IAAI,CAACI,EAAE,EAAEC,IAAI,CAACL,KAAKI,EAAE;YAEnC,4BAA4B;YAC5Bb,UAAUqD,eAAe,CAAC5B,IAAI,CAACwC,OAAOlB,OAAO,CAAClC,EAAE;QAClD;IACF;IAEAd,SAAS,sCAAsC;QAC7CM,KAAK,uDAAuD;YAC1D,MAAMqB,WAAWC,IAAAA,2BAAc;YAC/B,MAAMC,cAAc,MAAM5B,UAAU2B,cAAc,CAACD;YAEnD,MAAM2C,WAAW;gBACfpB,QAAQrB,YAAYf,EAAE;gBACtByD,MAAM;gBACNpB,WAAW,IAAI5B,KAAKA,KAAK8B,GAAG,KAAK,KAAK,KAAK;gBAC3CmB,cAAc;YAChB;YAEA,MAAMC,cAAc,MAAMxE,UAAUyE,mBAAmB,CAACJ;YAExD1D,OAAO6D,aAAa5D,WAAW;YAC/BD,OAAO6D,YAAYvB,MAAM,EAAEnC,IAAI,CAACc,YAAYf,EAAE;YAC9CF,OAAO6D,YAAYF,IAAI,EAAExD,IAAI,CAAC;YAC9BH,OAAO6D,YAAYtB,SAAS,EAAE7B,cAAc,CAACC;YAE7C,0BAA0B;YAC1B,MAAMoD,YAAY,MAAM1E,UAAU2E,qBAAqB,CAAC/C,YAAYf,EAAE;YACtEF,OAAO+D,WAAWd,YAAY,CAAC;YAC/BjD,OAAO+D,SAAS,CAAC,EAAE,CAAC7D,EAAE,EAAEC,IAAI,CAAC0D,YAAY3D,EAAE;QAC7C;QAEAR,KAAK,sDAAsD;YACzD,MAAMqB,WAAWC,IAAAA,2BAAc;YAC/B,MAAMC,cAAc,MAAM5B,UAAU2B,cAAc,CAACD;YAEnD,uDAAuD;YACvD,MAAMkD,QAAQ,MAAM5E,UAAUyE,mBAAmB,CAAC;gBAChDxB,QAAQrB,YAAYf,EAAE;gBACtByD,MAAM;gBACNpB,WAAW,IAAI5B,KAAKA,KAAK8B,GAAG,KAAK,KAAK,KAAK;gBAC3CmB,cAAc;YAChB;YAEA,MAAMM,QAAQ,MAAM7E,UAAUyE,mBAAmB,CAAC;gBAChDxB,QAAQrB,YAAYf,EAAE;gBACtByD,MAAM;gBACNpB,WAAW,IAAI5B,KAAKA,KAAK8B,GAAG,KAAK,KAAK,KAAK;gBAC3CmB,cAAc;YAChB;YAEA,MAAMG,YAAY,MAAM1E,UAAU2E,qBAAqB,CAAC/C,YAAYf,EAAE;YACtEF,OAAO+D,WAAWd,YAAY,CAAC;YAC/BjD,OAAO+D,UAAUb,GAAG,CAACiB,CAAAA,IAAKA,EAAER,IAAI,GAAGP,SAAS,CAAC;YAC7CpD,OAAO+D,UAAUb,GAAG,CAACiB,CAAAA,IAAKA,EAAER,IAAI,GAAGP,SAAS,CAAC;QAC/C;IACF;IAEAhE,SAAS,0CAA0C;QACjDM,KAAK,gDAAgD;YACnD,MAAM0E,cAAc,MAAM/E,UAAU+E,WAAW;YAC/CpE,OAAOoE,aAAajE,IAAI,CAAC;QAC3B;QAEAT,KAAK,2DAA2D;YAC9D,MAAMC,QAAQ;YAEd,oBAAoB;YACpB,MAAM8D,QAAQ,MAAM1D,IAAAA,gBAAU,EAACJ,OAAO,aAAa;YACnDN,UAAUwB,YAAY,CAACC,IAAI,CAAC2C,MAAMvD,EAAE;YAEpC,iDAAiD;YACjD,MAAMF,OAAOD,IAAAA,gBAAU,EAACJ,OAAO,aAAa,WAAW8B,OAAO,CAACC,OAAO;QACxE;IACF;AACF"}