41ecd2d2d5a1daa89e65c45887aefa83
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "MigrationUtils", {
    enumerable: true,
    get: function() {
        return MigrationUtils;
    }
});
require("server-only");
const _index = require("./index");
const _drizzleorm = require("drizzle-orm");
const _fs = /*#__PURE__*/ _interop_require_default(require("fs"));
const _path = /*#__PURE__*/ _interop_require_default(require("path"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
class MigrationUtils {
    // Run all pending migrations
    static async runMigrations() {
        try {
            console.log('Starting database migrations...');
            // Create migrations table if it doesn't exist
            await _index.db.execute((0, _drizzleorm.sql)`
        CREATE TABLE IF NOT EXISTS __drizzle_migrations (
          id SERIAL PRIMARY KEY,
          hash text NOT NULL,
          created_at bigint
        );
      `);
            // Apply migration files from drizzle directory
            const migrationsPath = _path.default.join(process.cwd(), 'drizzle');
            if (_fs.default.existsSync(migrationsPath)) {
                const files = _fs.default.readdirSync(migrationsPath);
                const sqlFiles = files.filter((file)=>file.endsWith('.sql') && !file.includes('rls-policies')).sort(); // Ensure migrations are applied in order
                for (const file of sqlFiles){
                    const filePath = _path.default.join(migrationsPath, file);
                    const migrationSQL = _fs.default.readFileSync(filePath, 'utf8');
                    // Check if migration was already applied
                    const [existing] = await _index.db.execute((0, _drizzleorm.sql)`
            SELECT COUNT(*) as count FROM __drizzle_migrations 
            WHERE hash = ${file}
          `);
                    if (Number(existing?.count) === 0) {
                        console.log(`  📋 Applying migration: ${file}`);
                        // Split migration into individual statements
                        const statements = migrationSQL.split('--> statement-breakpoint').map((stmt)=>stmt.trim()).filter((stmt)=>stmt.length > 0 && !stmt.startsWith('--'));
                        for (const statement of statements){
                            const cleanStatement = statement.trim();
                            if (cleanStatement && !cleanStatement.startsWith('--')) {
                                await _index.db.execute(_drizzleorm.sql.raw(cleanStatement));
                            }
                        }
                        // Record migration as applied
                        await _index.db.execute((0, _drizzleorm.sql)`
              INSERT INTO __drizzle_migrations (hash, created_at) 
              VALUES (${file}, ${Date.now()})
            `);
                        console.log(`  ✅ Applied migration: ${file}`);
                    } else {
                        console.log(`  ⏭️  Skipping already applied migration: ${file}`);
                    }
                }
            }
            console.log('Migrations completed successfully');
        } catch (error) {
            console.error('Migration failed:', error);
            throw new Error('Failed to run migrations');
        }
    }
    // Apply RLS policies
    static async applyRLSPolicies() {
        try {
            console.log('Applying Row-Level Security policies...');
            const rlsPath = _path.default.join(process.cwd(), 'drizzle', 'rls-policies.sql');
            if (_fs.default.existsSync(rlsPath)) {
                const rlsSQL = _fs.default.readFileSync(rlsPath, 'utf8');
                // Split by semicolon and filter out comments
                const statements = rlsSQL.split(';').map((stmt)=>stmt.trim()).filter((stmt)=>stmt.length > 0 && !stmt.startsWith('--') && !stmt.match(/^\/\*.*\*\/$/));
                for (const statement of statements){
                    const cleanStatement = statement.trim();
                    if (cleanStatement && !cleanStatement.startsWith('--')) {
                        try {
                            await _index.db.execute(_drizzleorm.sql.raw(cleanStatement));
                        } catch (error) {
                            // Log but don't fail on policy conflicts (they might already exist)
                            if (error instanceof Error && error.message.includes('already exists')) {
                                console.log(`Policy already exists, skipping: ${cleanStatement.substring(0, 50)}...`);
                            } else {
                                console.error(`Failed to execute statement: ${cleanStatement.substring(0, 50)}...`);
                                throw error;
                            }
                        }
                    }
                }
                console.log('RLS policies applied successfully');
            } else {
                console.warn('RLS policies file not found, skipping...');
            }
        } catch (error) {
            console.error('Failed to apply RLS policies:', error);
            throw new Error('Failed to apply RLS policies');
        }
    }
    // Rollback last migration (basic implementation)
    static async rollbackLastMigration() {
        try {
            console.log('Rolling back last migration...');
            // This is a basic implementation - in production you'd want more sophisticated rollback logic
            console.warn('Rollback functionality requires manual intervention for safety');
            console.log('Please review the migration files and manually rollback if needed');
        } catch (error) {
            console.error('Rollback failed:', error);
            throw new Error('Failed to rollback migration');
        }
    }
    // Check migration status
    static async getMigrationStatus() {
        try {
            // Get applied migrations
            const appliedResults = await _index.db.execute((0, _drizzleorm.sql)`
        SELECT hash FROM __drizzle_migrations ORDER BY created_at
      `);
            const appliedMigrations = appliedResults.length;
            const appliedHashes = new Set(appliedResults.map((r)=>r.hash));
            // Get all migration files
            const migrationsPath = _path.default.join(process.cwd(), 'drizzle');
            const pendingMigrations = [];
            if (_fs.default.existsSync(migrationsPath)) {
                const files = _fs.default.readdirSync(migrationsPath);
                const sqlFiles = files.filter((file)=>file.endsWith('.sql') && !file.includes('rls-policies')).sort();
                // Find pending migrations
                for (const file of sqlFiles){
                    if (!appliedHashes.has(file)) {
                        pendingMigrations.push(file);
                    }
                }
            }
            return {
                appliedMigrations,
                pendingMigrations
            };
        } catch (error) {
            console.error('Failed to get migration status:', error);
            throw new Error('Failed to get migration status');
        }
    }
    // Seed initial data (for development)
    static async seedInitialData() {
        try {
            console.log('Seeding initial data...');
            // Check if we already have data
            const [userCount] = await _index.db.execute((0, _drizzleorm.sql)`SELECT COUNT(*) as count FROM users`);
            if (Number(userCount?.count) > 0) {
                console.log('Database already has data, skipping seed');
                return;
            }
            // Add some common plant taxonomy data
            const commonPlants = [
                {
                    family: 'Araceae',
                    genus: 'Monstera',
                    species: 'deliciosa',
                    commonName: 'Swiss Cheese Plant',
                    careInstructions: 'Bright indirect light, water when top inch of soil is dry',
                    isVerified: true
                },
                {
                    family: 'Araceae',
                    genus: 'Pothos',
                    species: 'aureus',
                    commonName: 'Golden Pothos',
                    careInstructions: 'Low to bright indirect light, water when soil is dry',
                    isVerified: true
                },
                {
                    family: 'Asparagaceae',
                    genus: 'Sansevieria',
                    species: 'trifasciata',
                    commonName: 'Snake Plant',
                    careInstructions: 'Low light tolerant, water sparingly',
                    isVerified: true
                },
                {
                    family: 'Araceae',
                    genus: 'Philodendron',
                    species: 'hederaceum',
                    commonName: 'Heartleaf Philodendron',
                    careInstructions: 'Bright indirect light, keep soil lightly moist',
                    isVerified: true
                }
            ];
            for (const plant of commonPlants){
                await _index.db.execute((0, _drizzleorm.sql)`
          INSERT INTO plants (family, genus, species, cultivar, common_name, care_instructions, is_verified)
          VALUES (${plant.family}, ${plant.genus}, ${plant.species}, NULL, ${plant.commonName}, ${plant.careInstructions}, ${plant.isVerified})
          ON CONFLICT (family, genus, species, cultivar) DO NOTHING
        `);
            }
            console.log('Initial data seeded successfully');
        } catch (error) {
            console.error('Failed to seed initial data:', error);
            throw new Error('Failed to seed initial data');
        }
    }
    // Database health check
    static async healthCheck() {
        try {
            // Check connection
            const connected = await _index.db.execute((0, _drizzleorm.sql)`SELECT 1`).then(()=>true).catch(()=>false);
            // Check if migrations table exists
            const [migrationTable] = await _index.db.execute((0, _drizzleorm.sql)`
        SELECT EXISTS (
          SELECT FROM information_schema.tables 
          WHERE table_name = '__drizzle_migrations'
        ) as exists
      `);
            const migrationsApplied = Boolean(migrationTable?.exists) || false;
            // Check if main tables exist (including email verification)
            const [tablesCheck] = await _index.db.execute((0, _drizzleorm.sql)`
        SELECT 
          (SELECT COUNT(*) FROM information_schema.tables WHERE table_name IN ('users', 'plants', 'plant_instances', 'propagations', 'sessions', 'email_verification_codes')) as table_count
      `);
            const tablesExist = Number(tablesCheck?.table_count) === 6;
            // Check if RLS is enabled on user tables
            const [rlsCheck] = await _index.db.execute((0, _drizzleorm.sql)`
        SELECT COUNT(*) as rls_count
        FROM pg_class c
        JOIN pg_namespace n ON n.oid = c.relnamespace
        WHERE c.relrowsecurity = true 
        AND n.nspname = 'public'
        AND c.relname IN ('plant_instances', 'propagations', 'sessions', 'care_history', 'care_guides', 'email_verification_codes')
      `);
            const rlsEnabled = Number(rlsCheck?.rls_count) === 6;
            return {
                connected,
                migrationsApplied,
                rlsEnabled,
                tablesExist
            };
        } catch (error) {
            console.error('Health check failed:', error);
            return {
                connected: false,
                migrationsApplied: false,
                rlsEnabled: false,
                tablesExist: false
            };
        }
    }
}

//# sourceMappingURL=data:application/json;base64,