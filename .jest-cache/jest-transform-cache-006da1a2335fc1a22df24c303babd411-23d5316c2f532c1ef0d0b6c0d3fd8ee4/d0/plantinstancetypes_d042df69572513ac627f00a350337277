69d9f405ce5113b2d6079ad5418e4664
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "plantInstanceHelpers", {
    enumerable: true,
    get: function() {
        return plantInstanceHelpers;
    }
});
const plantInstanceHelpers = {
    // Calculate care status based on fertilizer due date
    calculateCareStatus: (fertilizerDue)=>{
        if (!fertilizerDue) return 'unknown';
        const now = new Date();
        const diffMs = fertilizerDue.getTime() - now.getTime();
        const diffDays = Math.ceil(diffMs / (1000 * 60 * 60 * 24));
        if (diffDays < 0) return 'overdue';
        if (diffDays === 0) return 'due_today';
        if (diffDays <= 7) return 'due_soon';
        return 'healthy';
    },
    // Calculate care urgency for prioritization
    calculateCareUrgency: (fertilizerDue)=>{
        if (!fertilizerDue) return 'none';
        const now = new Date();
        const diffMs = fertilizerDue.getTime() - now.getTime();
        const diffDays = Math.ceil(diffMs / (1000 * 60 * 60 * 24));
        if (diffDays < -7) return 'critical';
        if (diffDays < 0) return 'high';
        if (diffDays <= 1) return 'medium';
        if (diffDays <= 7) return 'low';
        return 'none';
    },
    // Calculate days until fertilizer due (negative if overdue)
    calculateDaysUntilFertilizerDue: (fertilizerDue)=>{
        if (!fertilizerDue) return null;
        const now = new Date();
        const diffMs = fertilizerDue.getTime() - now.getTime();
        return Math.ceil(diffMs / (1000 * 60 * 60 * 24));
    },
    // Calculate days since last fertilized
    calculateDaysSinceLastFertilized: (lastFertilized)=>{
        if (!lastFertilized) return null;
        const now = new Date();
        const diffMs = now.getTime() - lastFertilized.getTime();
        return Math.floor(diffMs / (1000 * 60 * 60 * 24));
    },
    // Calculate days since last repot
    calculateDaysSinceLastRepot: (lastRepot)=>{
        if (!lastRepot) return null;
        const now = new Date();
        const diffMs = now.getTime() - lastRepot.getTime();
        return Math.floor(diffMs / (1000 * 60 * 60 * 24));
    },
    // Get display name (nickname or plant common name)
    getDisplayName: (instance, plant)=>{
        return instance.nickname || plant?.commonName || 'Unnamed Plant';
    },
    // Get primary image (first image or plant default image)
    getPrimaryImage: (instance, plant)=>{
        if (instance.images && instance.images.length > 0) {
            return instance.images[0];
        }
        return plant?.defaultImage || null;
    },
    // Enhance plant instance with computed properties
    enhancePlantInstance: (instance, plant)=>{
        const careStatus = plantInstanceHelpers.calculateCareStatus(instance.fertilizerDue);
        const careUrgency = plantInstanceHelpers.calculateCareUrgency(instance.fertilizerDue);
        const daysUntilFertilizerDue = plantInstanceHelpers.calculateDaysUntilFertilizerDue(instance.fertilizerDue);
        const daysSinceLastFertilized = plantInstanceHelpers.calculateDaysSinceLastFertilized(instance.lastFertilized);
        const daysSinceLastRepot = plantInstanceHelpers.calculateDaysSinceLastRepot(instance.lastRepot);
        const displayName = plantInstanceHelpers.getDisplayName(instance, plant);
        const primaryImage = plantInstanceHelpers.getPrimaryImage(instance, plant);
        return {
            ...instance,
            plant,
            careStatus,
            careUrgency,
            daysUntilFertilizerDue,
            daysSinceLastFertilized,
            daysSinceLastRepot,
            displayName,
            primaryImage
        };
    },
    // Sort plant instances by care urgency
    sortByCareUrgency: (instances)=>{
        const urgencyOrder = {
            critical: 0,
            high: 1,
            medium: 2,
            low: 3,
            none: 4
        };
        return [
            ...instances
        ].sort((a, b)=>{
            const aOrder = urgencyOrder[a.careUrgency];
            const bOrder = urgencyOrder[b.careUrgency];
            if (aOrder !== bOrder) {
                return aOrder - bOrder;
            }
            // If same urgency, sort by fertilizer due date
            if (a.fertilizerDue && b.fertilizerDue) {
                return a.fertilizerDue.getTime() - b.fertilizerDue.getTime();
            }
            // If one has no due date, prioritize the one with a due date
            if (a.fertilizerDue && !b.fertilizerDue) return -1;
            if (!a.fertilizerDue && b.fertilizerDue) return 1;
            // If neither has a due date, sort by nickname
            return a.displayName.localeCompare(b.displayName);
        });
    },
    // Filter instances by care status
    filterByCareStatus: (instances, status)=>{
        return instances.filter((instance)=>instance.careStatus === status);
    },
    // Get care status color for UI
    getCareStatusColor: (status)=>{
        switch(status){
            case 'overdue':
                return 'text-red-600 bg-red-50';
            case 'due_today':
                return 'text-amber-600 bg-amber-50';
            case 'due_soon':
                return 'text-yellow-600 bg-yellow-50';
            case 'healthy':
                return 'text-green-600 bg-green-50';
            case 'unknown':
                return 'text-gray-600 bg-gray-50';
            default:
                return 'text-gray-600 bg-gray-50';
        }
    },
    // Get care urgency color for UI
    getCareUrgencyColor: (urgency)=>{
        switch(urgency){
            case 'critical':
                return 'bg-red-500';
            case 'high':
                return 'bg-red-400';
            case 'medium':
                return 'bg-amber-400';
            case 'low':
                return 'bg-yellow-400';
            case 'none':
                return 'bg-green-400';
            default:
                return 'bg-gray-400';
        }
    }
};

//# sourceMappingURL=data:application/json;base64,