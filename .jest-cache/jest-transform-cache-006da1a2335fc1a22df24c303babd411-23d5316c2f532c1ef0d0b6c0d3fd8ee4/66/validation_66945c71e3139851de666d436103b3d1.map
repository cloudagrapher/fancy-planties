{"version":3,"sources":["/Users/stefanbekker/projects/fancy-planties/src/lib/auth/validation.ts"],"sourcesContent":["import { z } from 'zod';\n\n// Password validation schema\nexport const passwordSchema = z\n  .string()\n  .min(8, 'Password must be at least 8 characters long')\n  .max(128, 'Password must be less than 128 characters')\n  .regex(\n    /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)/,\n    'Password must contain at least one lowercase letter, one uppercase letter, and one number'\n  );\n\n// Email validation schema\nexport const emailSchema = z\n  .string()\n  .email('Please enter a valid email address')\n  .max(255, 'Email must be less than 255 characters')\n  .transform((email) => email.toLowerCase());\n\n// Name validation schema\nexport const nameSchema = z\n  .string()\n  .min(1, 'Name is required')\n  .max(100, 'Name must be less than 100 characters')\n  .regex(/^[a-zA-Z\\s'-]+$/, 'Name can only contain letters, spaces, hyphens, and apostrophes')\n  .transform((name) => name.trim());\n\n// Sign up validation schema\nexport const signUpSchema = z.object({\n  email: emailSchema,\n  password: passwordSchema,\n  name: nameSchema,\n});\n\n// Sign in validation schema\nexport const signInSchema = z.object({\n  email: emailSchema,\n  password: z.string().min(1, 'Password is required'),\n});\n\n// Password reset request schema\nexport const passwordResetRequestSchema = z.object({\n  email: emailSchema,\n});\n\n// Password reset schema\nexport const passwordResetSchema = z.object({\n  token: z.string().min(1, 'Reset token is required'),\n  password: passwordSchema,\n});\n\n// Change password schema\nexport const changePasswordSchema = z.object({\n  currentPassword: z.string().min(1, 'Current password is required'),\n  newPassword: passwordSchema,\n});\n\n// Update profile schema\nexport const updateProfileSchema = z.object({\n  name: nameSchema,\n  email: emailSchema,\n});\n\n// Validation helper types\nexport type SignUpInput = z.infer<typeof signUpSchema>;\nexport type SignInInput = z.infer<typeof signInSchema>;\nexport type PasswordResetRequestInput = z.infer<typeof passwordResetRequestSchema>;\nexport type PasswordResetInput = z.infer<typeof passwordResetSchema>;\nexport type ChangePasswordInput = z.infer<typeof changePasswordSchema>;\nexport type UpdateProfileInput = z.infer<typeof updateProfileSchema>;\n\n// Validation error formatter\nexport function formatValidationErrors(error: z.ZodError): Record<string, string> {\n  const errors: Record<string, string> = {};\n  \n  error.issues.forEach((issue) => {\n    const path = issue.path.join('.');\n    errors[path] = issue.message;\n  });\n  \n  return errors;\n}\n\n// Safe validation helper\nexport function validateInput<T>(\n  schema: z.ZodSchema<T>,\n  input: unknown\n): { success: true; data: T } | { success: false; errors: Record<string, string> } {\n  try {\n    const data = schema.parse(input);\n    return { success: true, data };\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      return { success: false, errors: formatValidationErrors(error) };\n    }\n    throw error;\n  }\n}"],"names":["changePasswordSchema","emailSchema","formatValidationErrors","nameSchema","passwordResetRequestSchema","passwordResetSchema","passwordSchema","signInSchema","signUpSchema","updateProfileSchema","validateInput","z","string","min","max","regex","email","transform","toLowerCase","name","trim","object","password","token","currentPassword","newPassword","error","errors","issues","forEach","issue","path","join","message","schema","input","data","parse","success","ZodError"],"mappings":";;;;;;;;;;;QAoDaA;eAAAA;;QAvCAC;eAAAA;;QA2DGC;eAAAA;;QApDHC;eAAAA;;QAqBAC;eAAAA;;QAKAC;eAAAA;;QA3CAC;eAAAA;;QAgCAC;eAAAA;;QAPAC;eAAAA;;QA8BAC;eAAAA;;QA0BGC;eAAAA;;;qBApFE;AAGX,MAAMJ,iBAAiBK,MAAC,CAC5BC,MAAM,GACNC,GAAG,CAAC,GAAG,+CACPC,GAAG,CAAC,KAAK,6CACTC,KAAK,CACJ,mCACA;AAIG,MAAMd,cAAcU,MAAC,CACzBC,MAAM,GACNI,KAAK,CAAC,sCACNF,GAAG,CAAC,KAAK,0CACTG,SAAS,CAAC,CAACD,QAAUA,MAAME,WAAW;AAGlC,MAAMf,aAAaQ,MAAC,CACxBC,MAAM,GACNC,GAAG,CAAC,GAAG,oBACPC,GAAG,CAAC,KAAK,yCACTC,KAAK,CAAC,mBAAmB,mEACzBE,SAAS,CAAC,CAACE,OAASA,KAAKC,IAAI;AAGzB,MAAMZ,eAAeG,MAAC,CAACU,MAAM,CAAC;IACnCL,OAAOf;IACPqB,UAAUhB;IACVa,MAAMhB;AACR;AAGO,MAAMI,eAAeI,MAAC,CAACU,MAAM,CAAC;IACnCL,OAAOf;IACPqB,UAAUX,MAAC,CAACC,MAAM,GAAGC,GAAG,CAAC,GAAG;AAC9B;AAGO,MAAMT,6BAA6BO,MAAC,CAACU,MAAM,CAAC;IACjDL,OAAOf;AACT;AAGO,MAAMI,sBAAsBM,MAAC,CAACU,MAAM,CAAC;IAC1CE,OAAOZ,MAAC,CAACC,MAAM,GAAGC,GAAG,CAAC,GAAG;IACzBS,UAAUhB;AACZ;AAGO,MAAMN,uBAAuBW,MAAC,CAACU,MAAM,CAAC;IAC3CG,iBAAiBb,MAAC,CAACC,MAAM,GAAGC,GAAG,CAAC,GAAG;IACnCY,aAAanB;AACf;AAGO,MAAMG,sBAAsBE,MAAC,CAACU,MAAM,CAAC;IAC1CF,MAAMhB;IACNa,OAAOf;AACT;AAWO,SAASC,uBAAuBwB,KAAiB;IACtD,MAAMC,SAAiC,CAAC;IAExCD,MAAME,MAAM,CAACC,OAAO,CAAC,CAACC;QACpB,MAAMC,OAAOD,MAAMC,IAAI,CAACC,IAAI,CAAC;QAC7BL,MAAM,CAACI,KAAK,GAAGD,MAAMG,OAAO;IAC9B;IAEA,OAAON;AACT;AAGO,SAASjB,cACdwB,MAAsB,EACtBC,KAAc;IAEd,IAAI;QACF,MAAMC,OAAOF,OAAOG,KAAK,CAACF;QAC1B,OAAO;YAAEG,SAAS;YAAMF;QAAK;IAC/B,EAAE,OAAOV,OAAO;QACd,IAAIA,iBAAiBf,MAAC,CAAC4B,QAAQ,EAAE;YAC/B,OAAO;gBAAED,SAAS;gBAAOX,QAAQzB,uBAAuBwB;YAAO;QACjE;QACA,MAAMA;IACR;AACF"}