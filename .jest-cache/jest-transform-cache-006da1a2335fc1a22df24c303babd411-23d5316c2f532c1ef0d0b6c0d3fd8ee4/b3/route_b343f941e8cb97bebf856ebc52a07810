efc18663d4f3e3916de262cd6f04cb4e
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get DELETE () {
        return DELETE;
    },
    get GET () {
        return GET;
    },
    get PUT () {
        return PUT;
    }
});
const _server = require("next/server");
const _zod = require("zod");
const _plantinstances = require("../../../../lib/db/queries/plant-instances");
const _plantschemas = require("../../../../lib/validation/plant-schemas");
const _server1 = require("../../../../lib/auth/server");
async function GET(request, { params }) {
    try {
        const { user } = await (0, _server1.validateRequest)();
        if (!user) {
            return _server.NextResponse.json({
                error: 'Unauthorized'
            }, {
                status: 401
            });
        }
        const resolvedParams = await params;
        const id = parseInt(resolvedParams.id, 10);
        if (isNaN(id)) {
            return _server.NextResponse.json({
                error: 'Invalid plant instance ID'
            }, {
                status: 400
            });
        }
        const plantInstance = await _plantinstances.PlantInstanceQueries.getEnhancedById(id);
        if (!plantInstance) {
            return _server.NextResponse.json({
                error: 'Plant instance not found'
            }, {
                status: 404
            });
        }
        // Check if the plant instance belongs to the current user
        if (plantInstance.userId !== user.id) {
            return _server.NextResponse.json({
                error: 'Forbidden'
            }, {
                status: 403
            });
        }
        return _server.NextResponse.json(plantInstance);
    } catch (error) {
        console.error('Failed to get plant instance:', error);
        return _server.NextResponse.json({
            error: 'Failed to get plant instance'
        }, {
            status: 500
        });
    }
}
async function PUT(request, { params }) {
    try {
        const { user } = await (0, _server1.validateRequest)();
        if (!user) {
            return _server.NextResponse.json({
                error: 'Unauthorized'
            }, {
                status: 401
            });
        }
        const resolvedParams = await params;
        const id = parseInt(resolvedParams.id, 10);
        if (isNaN(id)) {
            return _server.NextResponse.json({
                error: 'Invalid plant instance ID'
            }, {
                status: 400
            });
        }
        // Check if the plant instance exists and belongs to the user
        const existingInstance = await _plantinstances.PlantInstanceQueries.getEnhancedById(id);
        if (!existingInstance) {
            return _server.NextResponse.json({
                error: 'Plant instance not found'
            }, {
                status: 404
            });
        }
        if (existingInstance.userId !== user.id) {
            return _server.NextResponse.json({
                error: 'Forbidden'
            }, {
                status: 403
            });
        }
        // Check if request is FormData or JSON
        const contentType = request.headers.get('content-type');
        let body;
        if (contentType?.includes('multipart/form-data')) {
            // Handle FormData for file uploads
            const formData = await request.formData();
            // Helper function to convert file to base64
            const fileToBase64 = async (file)=>{
                const bytes = await file.arrayBuffer();
                const buffer = Buffer.from(bytes);
                const base64 = buffer.toString('base64');
                return `data:${file.type};base64,${base64}`;
            };
            // Extract form fields
            body = {};
            const imageFiles = [];
            const existingImages = [];
            for (const [key, value] of formData.entries()){
                if (key.startsWith('existingImages[')) {
                    // Handle existing images array
                    existingImages.push(value);
                } else if (key.startsWith('imageFiles[')) {
                    // Handle new image files
                    if (value instanceof File) {
                        imageFiles.push(value);
                    }
                } else {
                    // Handle regular form fields
                    if (key === 'plantId') {
                        body[key] = parseInt(value, 10);
                    } else if (key === 'isActive') {
                        body[key] = value === 'true';
                    } else {
                        body[key] = value;
                    }
                }
            }
            // Convert new image files to base64
            const newImageBase64s = await Promise.all(imageFiles.map((file)=>fileToBase64(file)));
            // Combine existing images with new images
            body.images = [
                ...existingImages,
                ...newImageBase64s
            ];
        } else {
            // Handle JSON
            try {
                body = await request.json();
            } catch (jsonError) {
                return _server.NextResponse.json({
                    error: 'Invalid request format'
                }, {
                    status: 400
                });
            }
        }
        // Convert date strings to Date objects if they exist and are not empty
        const processedBody = {
            ...body,
            lastFertilized: body.lastFertilized && body.lastFertilized !== '' ? new Date(body.lastFertilized) : null,
            lastRepot: body.lastRepot && body.lastRepot !== '' ? new Date(body.lastRepot) : null
        };
        // Validate the update data
        const updateData = _plantschemas.updatePlantInstanceSchema.parse({
            ...processedBody,
            id,
            userId: user.id
        });
        // Remove id and userId from update data as they shouldn't be updated
        const { id: _, userId: __, ...dataToUpdate } = updateData;
        // Update the plant instance
        const updatedInstance = await _plantinstances.PlantInstanceQueries.update(id, dataToUpdate);
        // Get the enhanced plant instance with plant data
        const enhancedInstance = await _plantinstances.PlantInstanceQueries.getEnhancedById(updatedInstance.id);
        return _server.NextResponse.json(enhancedInstance);
    } catch (error) {
        console.error('Failed to update plant instance:', error);
        if (error instanceof _zod.z.ZodError) {
            return _server.NextResponse.json({
                error: 'Invalid plant instance data',
                details: error.issues
            }, {
                status: 400
            });
        }
        if (error instanceof Error && error.message.includes('validation')) {
            return _server.NextResponse.json({
                error: 'Invalid plant instance data',
                details: error.message
            }, {
                status: 400
            });
        }
        return _server.NextResponse.json({
            error: 'Failed to update plant instance'
        }, {
            status: 500
        });
    }
}
async function DELETE(request, { params }) {
    try {
        const { user } = await (0, _server1.validateRequest)();
        if (!user) {
            return _server.NextResponse.json({
                error: 'Unauthorized'
            }, {
                status: 401
            });
        }
        const resolvedParams = await params;
        const id = parseInt(resolvedParams.id, 10);
        if (isNaN(id)) {
            return _server.NextResponse.json({
                error: 'Invalid plant instance ID'
            }, {
                status: 400
            });
        }
        // Check if the plant instance exists and belongs to the user
        const existingInstance = await _plantinstances.PlantInstanceQueries.getEnhancedById(id);
        if (!existingInstance) {
            return _server.NextResponse.json({
                error: 'Plant instance not found'
            }, {
                status: 404
            });
        }
        if (existingInstance.userId !== user.id) {
            return _server.NextResponse.json({
                error: 'Forbidden'
            }, {
                status: 403
            });
        }
        // Delete the plant instance
        const deleted = await _plantinstances.PlantInstanceQueries.delete(id);
        if (!deleted) {
            return _server.NextResponse.json({
                error: 'Failed to delete plant instance'
            }, {
                status: 500
            });
        }
        return _server.NextResponse.json({
            success: true,
            message: 'Plant instance deleted successfully'
        });
    } catch (error) {
        console.error('Failed to delete plant instance:', error);
        return _server.NextResponse.json({
            error: 'Failed to delete plant instance'
        }, {
            status: 500
        });
    }
}

//# sourceMappingURL=data:application/json;base64,