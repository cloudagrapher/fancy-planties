2240eab299afafe3f1de9a56e6213226
'use client';
"use strict";

/* istanbul ignore next */
function cov_9blg9itkw() {
  var path = "/Users/stefanbekker/projects/fancy-planties/src/hooks/usePlantInstances.ts";
  var hash = "53b06c7676935a8cf1ab8c2e7a7e89d7e65e11d7";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/stefanbekker/projects/fancy-planties/src/hooks/usePlantInstances.ts",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 5,
          column: 3
        }
      },
      "1": {
        start: {
          line: 7,
          column: 4
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "2": {
        start: {
          line: 7,
          column: 24
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "3": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 49,
          column: 3
        }
      },
      "4": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 45
        }
      },
      "5": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 32
        }
      },
      "6": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 20,
          column: 38
        }
      },
      "7": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 23,
          column: 38
        }
      },
      "8": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 26,
          column: 26
        }
      },
      "9": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 29,
          column: 48
        }
      },
      "10": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 32,
          column: 32
        }
      },
      "11": {
        start: {
          line: 35,
          column: 8
        },
        end: {
          line: 35,
          column: 33
        }
      },
      "12": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 38,
          column: 39
        }
      },
      "13": {
        start: {
          line: 41,
          column: 8
        },
        end: {
          line: 41,
          column: 44
        }
      },
      "14": {
        start: {
          line: 44,
          column: 8
        },
        end: {
          line: 44,
          column: 38
        }
      },
      "15": {
        start: {
          line: 47,
          column: 8
        },
        end: {
          line: 47,
          column: 32
        }
      },
      "16": {
        start: {
          line: 50,
          column: 20
        },
        end: {
          line: 50,
          column: 52
        }
      },
      "17": {
        start: {
          line: 52,
          column: 4
        },
        end: {
          line: 69,
          column: 7
        }
      },
      "18": {
        start: {
          line: 58,
          column: 27
        },
        end: {
          line: 61,
          column: 20
        }
      },
      "19": {
        start: {
          line: 58,
          column: 110
        },
        end: {
          line: 61,
          column: 17
        }
      },
      "20": {
        start: {
          line: 62,
          column: 29
        },
        end: {
          line: 62,
          column: 74
        }
      },
      "21": {
        start: {
          line: 63,
          column: 12
        },
        end: {
          line: 65,
          column: 13
        }
      },
      "22": {
        start: {
          line: 64,
          column: 16
        },
        end: {
          line: 64,
          column: 67
        }
      },
      "23": {
        start: {
          line: 66,
          column: 12
        },
        end: {
          line: 66,
          column: 35
        }
      },
      "24": {
        start: {
          line: 72,
          column: 4
        },
        end: {
          line: 93,
          column: 7
        }
      },
      "25": {
        start: {
          line: 78,
          column: 27
        },
        end: {
          line: 84,
          column: 14
        }
      },
      "26": {
        start: {
          line: 85,
          column: 29
        },
        end: {
          line: 85,
          column: 81
        }
      },
      "27": {
        start: {
          line: 86,
          column: 12
        },
        end: {
          line: 88,
          column: 13
        }
      },
      "28": {
        start: {
          line: 87,
          column: 16
        },
        end: {
          line: 87,
          column: 68
        }
      },
      "29": {
        start: {
          line: 89,
          column: 12
        },
        end: {
          line: 89,
          column: 35
        }
      },
      "30": {
        start: {
          line: 96,
          column: 4
        },
        end: {
          line: 109,
          column: 7
        }
      },
      "31": {
        start: {
          line: 102,
          column: 29
        },
        end: {
          line: 102,
          column: 70
        }
      },
      "32": {
        start: {
          line: 103,
          column: 12
        },
        end: {
          line: 105,
          column: 13
        }
      },
      "33": {
        start: {
          line: 104,
          column: 16
        },
        end: {
          line: 104,
          column: 66
        }
      },
      "34": {
        start: {
          line: 106,
          column: 12
        },
        end: {
          line: 106,
          column: 35
        }
      },
      "35": {
        start: {
          line: 112,
          column: 4
        },
        end: {
          line: 126,
          column: 7
        }
      },
      "36": {
        start: {
          line: 118,
          column: 29
        },
        end: {
          line: 118,
          column: 74
        }
      },
      "37": {
        start: {
          line: 119,
          column: 12
        },
        end: {
          line: 121,
          column: 13
        }
      },
      "38": {
        start: {
          line: 120,
          column: 16
        },
        end: {
          line: 120,
          column: 71
        }
      },
      "39": {
        start: {
          line: 122,
          column: 12
        },
        end: {
          line: 122,
          column: 35
        }
      },
      "40": {
        start: {
          line: 129,
          column: 4
        },
        end: {
          line: 143,
          column: 7
        }
      },
      "41": {
        start: {
          line: 135,
          column: 29
        },
        end: {
          line: 135,
          column: 74
        }
      },
      "42": {
        start: {
          line: 136,
          column: 12
        },
        end: {
          line: 138,
          column: 13
        }
      },
      "43": {
        start: {
          line: 137,
          column: 16
        },
        end: {
          line: 137,
          column: 66
        }
      },
      "44": {
        start: {
          line: 139,
          column: 25
        },
        end: {
          line: 139,
          column: 46
        }
      },
      "45": {
        start: {
          line: 140,
          column: 12
        },
        end: {
          line: 140,
          column: 34
        }
      },
      "46": {
        start: {
          line: 146,
          column: 24
        },
        end: {
          line: 146,
          column: 57
        }
      },
      "47": {
        start: {
          line: 147,
          column: 4
        },
        end: {
          line: 185,
          column: 7
        }
      },
      "48": {
        start: {
          line: 149,
          column: 29
        },
        end: {
          line: 155,
          column: 14
        }
      },
      "49": {
        start: {
          line: 156,
          column: 12
        },
        end: {
          line: 159,
          column: 13
        }
      },
      "50": {
        start: {
          line: 157,
          column: 30
        },
        end: {
          line: 157,
          column: 51
        }
      },
      "51": {
        start: {
          line: 158,
          column: 16
        },
        end: {
          line: 158,
          column: 82
        }
      },
      "52": {
        start: {
          line: 160,
          column: 12
        },
        end: {
          line: 160,
          column: 35
        }
      },
      "53": {
        start: {
          line: 164,
          column: 12
        },
        end: {
          line: 168,
          column: 15
        }
      },
      "54": {
        start: {
          line: 169,
          column: 12
        },
        end: {
          line: 173,
          column: 15
        }
      },
      "55": {
        start: {
          line: 174,
          column: 12
        },
        end: {
          line: 178,
          column: 15
        }
      },
      "56": {
        start: {
          line: 180,
          column: 12
        },
        end: {
          line: 183,
          column: 21
        }
      },
      "57": {
        start: {
          line: 188,
          column: 24
        },
        end: {
          line: 188,
          column: 57
        }
      },
      "58": {
        start: {
          line: 189,
          column: 4
        },
        end: {
          line: 222,
          column: 7
        }
      },
      "59": {
        start: {
          line: 191,
          column: 29
        },
        end: {
          line: 197,
          column: 14
        }
      },
      "60": {
        start: {
          line: 198,
          column: 12
        },
        end: {
          line: 201,
          column: 13
        }
      },
      "61": {
        start: {
          line: 199,
          column: 30
        },
        end: {
          line: 199,
          column: 51
        }
      },
      "62": {
        start: {
          line: 200,
          column: 16
        },
        end: {
          line: 200,
          column: 82
        }
      },
      "63": {
        start: {
          line: 202,
          column: 12
        },
        end: {
          line: 202,
          column: 35
        }
      },
      "64": {
        start: {
          line: 206,
          column: 12
        },
        end: {
          line: 209,
          column: 21
        }
      },
      "65": {
        start: {
          line: 211,
          column: 12
        },
        end: {
          line: 215,
          column: 15
        }
      },
      "66": {
        start: {
          line: 216,
          column: 12
        },
        end: {
          line: 220,
          column: 15
        }
      },
      "67": {
        start: {
          line: 225,
          column: 24
        },
        end: {
          line: 225,
          column: 57
        }
      },
      "68": {
        start: {
          line: 226,
          column: 4
        },
        end: {
          line: 256,
          column: 7
        }
      },
      "69": {
        start: {
          line: 228,
          column: 29
        },
        end: {
          line: 230,
          column: 14
        }
      },
      "70": {
        start: {
          line: 231,
          column: 12
        },
        end: {
          line: 234,
          column: 13
        }
      },
      "71": {
        start: {
          line: 232,
          column: 30
        },
        end: {
          line: 232,
          column: 51
        }
      },
      "72": {
        start: {
          line: 233,
          column: 16
        },
        end: {
          line: 233,
          column: 82
        }
      },
      "73": {
        start: {
          line: 238,
          column: 12
        },
        end: {
          line: 243,
          column: 15
        }
      },
      "74": {
        start: {
          line: 245,
          column: 12
        },
        end: {
          line: 249,
          column: 15
        }
      },
      "75": {
        start: {
          line: 250,
          column: 12
        },
        end: {
          line: 254,
          column: 15
        }
      },
      "76": {
        start: {
          line: 259,
          column: 24
        },
        end: {
          line: 259,
          column: 57
        }
      },
      "77": {
        start: {
          line: 260,
          column: 4
        },
        end: {
          line: 298,
          column: 7
        }
      },
      "78": {
        start: {
          line: 262,
          column: 29
        },
        end: {
          line: 271,
          column: 14
        }
      },
      "79": {
        start: {
          line: 272,
          column: 12
        },
        end: {
          line: 275,
          column: 13
        }
      },
      "80": {
        start: {
          line: 273,
          column: 30
        },
        end: {
          line: 273,
          column: 51
        }
      },
      "81": {
        start: {
          line: 274,
          column: 16
        },
        end: {
          line: 274,
          column: 78
        }
      },
      "82": {
        start: {
          line: 276,
          column: 12
        },
        end: {
          line: 276,
          column: 35
        }
      },
      "83": {
        start: {
          line: 279,
          column: 12
        },
        end: {
          line: 296,
          column: 13
        }
      },
      "84": {
        start: {
          line: 281,
          column: 16
        },
        end: {
          line: 284,
          column: 36
        }
      },
      "85": {
        start: {
          line: 286,
          column: 16
        },
        end: {
          line: 290,
          column: 19
        }
      },
      "86": {
        start: {
          line: 291,
          column: 16
        },
        end: {
          line: 295,
          column: 19
        }
      },
      "87": {
        start: {
          line: 301,
          column: 24
        },
        end: {
          line: 301,
          column: 57
        }
      },
      "88": {
        start: {
          line: 302,
          column: 4
        },
        end: {
          line: 335,
          column: 7
        }
      },
      "89": {
        start: {
          line: 304,
          column: 29
        },
        end: {
          line: 310,
          column: 14
        }
      },
      "90": {
        start: {
          line: 311,
          column: 12
        },
        end: {
          line: 314,
          column: 13
        }
      },
      "91": {
        start: {
          line: 312,
          column: 30
        },
        end: {
          line: 312,
          column: 51
        }
      },
      "92": {
        start: {
          line: 313,
          column: 16
        },
        end: {
          line: 313,
          column: 83
        }
      },
      "93": {
        start: {
          line: 315,
          column: 12
        },
        end: {
          line: 315,
          column: 35
        }
      },
      "94": {
        start: {
          line: 319,
          column: 12
        },
        end: {
          line: 323,
          column: 15
        }
      },
      "95": {
        start: {
          line: 324,
          column: 12
        },
        end: {
          line: 328,
          column: 15
        }
      },
      "96": {
        start: {
          line: 329,
          column: 12
        },
        end: {
          line: 333,
          column: 15
        }
      },
      "97": {
        start: {
          line: 338,
          column: 24
        },
        end: {
          line: 338,
          column: 57
        }
      },
      "98": {
        start: {
          line: 339,
          column: 4
        },
        end: {
          line: 374,
          column: 7
        }
      },
      "99": {
        start: {
          line: 341,
          column: 29
        },
        end: {
          line: 349,
          column: 14
        }
      },
      "100": {
        start: {
          line: 350,
          column: 12
        },
        end: {
          line: 353,
          column: 13
        }
      },
      "101": {
        start: {
          line: 351,
          column: 30
        },
        end: {
          line: 351,
          column: 51
        }
      },
      "102": {
        start: {
          line: 352,
          column: 16
        },
        end: {
          line: 352,
          column: 80
        }
      },
      "103": {
        start: {
          line: 354,
          column: 12
        },
        end: {
          line: 354,
          column: 35
        }
      },
      "104": {
        start: {
          line: 358,
          column: 12
        },
        end: {
          line: 361,
          column: 21
        }
      },
      "105": {
        start: {
          line: 363,
          column: 12
        },
        end: {
          line: 367,
          column: 15
        }
      },
      "106": {
        start: {
          line: 368,
          column: 12
        },
        end: {
          line: 372,
          column: 15
        }
      },
      "107": {
        start: {
          line: 377,
          column: 24
        },
        end: {
          line: 377,
          column: 57
        }
      },
      "108": {
        start: {
          line: 378,
          column: 46
        },
        end: {
          line: 389,
          column: 5
        }
      },
      "109": {
        start: {
          line: 379,
          column: 8
        },
        end: {
          line: 388,
          column: 11
        }
      },
      "110": {
        start: {
          line: 383,
          column: 12
        },
        end: {
          line: 383,
          column: 33
        }
      },
      "111": {
        start: {
          line: 383,
          column: 22
        },
        end: {
          line: 383,
          column: 33
        }
      },
      "112": {
        start: {
          line: 384,
          column: 12
        },
        end: {
          line: 387,
          column: 14
        }
      },
      "113": {
        start: {
          line: 390,
          column: 38
        },
        end: {
          line: 397,
          column: 5
        }
      },
      "114": {
        start: {
          line: 391,
          column: 8
        },
        end: {
          line: 396,
          column: 11
        }
      },
      "115": {
        start: {
          line: 398,
          column: 4
        },
        end: {
          line: 401,
          column: 6
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 6,
            column: 9
          },
          end: {
            line: 6,
            column: 16
          }
        },
        loc: {
          start: {
            line: 6,
            column: 30
          },
          end: {
            line: 11,
            column: 1
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 13,
            column: 5
          }
        },
        loc: {
          start: {
            line: 13,
            column: 41
          },
          end: {
            line: 15,
            column: 5
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 16,
            column: 4
          },
          end: {
            line: 16,
            column: 5
          }
        },
        loc: {
          start: {
            line: 16,
            column: 28
          },
          end: {
            line: 18,
            column: 5
          }
        },
        line: 16
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 19,
            column: 4
          },
          end: {
            line: 19,
            column: 5
          }
        },
        loc: {
          start: {
            line: 19,
            column: 34
          },
          end: {
            line: 21,
            column: 5
          }
        },
        line: 19
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 22,
            column: 4
          },
          end: {
            line: 22,
            column: 5
          }
        },
        loc: {
          start: {
            line: 22,
            column: 34
          },
          end: {
            line: 24,
            column: 5
          }
        },
        line: 22
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 25,
            column: 4
          },
          end: {
            line: 25,
            column: 5
          }
        },
        loc: {
          start: {
            line: 25,
            column: 22
          },
          end: {
            line: 27,
            column: 5
          }
        },
        line: 25
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 28,
            column: 4
          },
          end: {
            line: 28,
            column: 5
          }
        },
        loc: {
          start: {
            line: 28,
            column: 44
          },
          end: {
            line: 30,
            column: 5
          }
        },
        line: 28
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 31,
            column: 4
          },
          end: {
            line: 31,
            column: 5
          }
        },
        loc: {
          start: {
            line: 31,
            column: 28
          },
          end: {
            line: 33,
            column: 5
          }
        },
        line: 31
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 34,
            column: 4
          },
          end: {
            line: 34,
            column: 5
          }
        },
        loc: {
          start: {
            line: 34,
            column: 29
          },
          end: {
            line: 36,
            column: 5
          }
        },
        line: 34
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 37,
            column: 4
          },
          end: {
            line: 37,
            column: 5
          }
        },
        loc: {
          start: {
            line: 37,
            column: 35
          },
          end: {
            line: 39,
            column: 5
          }
        },
        line: 37
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 40,
            column: 4
          },
          end: {
            line: 40,
            column: 5
          }
        },
        loc: {
          start: {
            line: 40,
            column: 40
          },
          end: {
            line: 42,
            column: 5
          }
        },
        line: 40
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 43,
            column: 4
          },
          end: {
            line: 43,
            column: 5
          }
        },
        loc: {
          start: {
            line: 43,
            column: 34
          },
          end: {
            line: 45,
            column: 5
          }
        },
        line: 43
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 46,
            column: 4
          },
          end: {
            line: 46,
            column: 5
          }
        },
        loc: {
          start: {
            line: 46,
            column: 28
          },
          end: {
            line: 48,
            column: 5
          }
        },
        line: 46
      },
      "13": {
        name: "usePlantInstances",
        decl: {
          start: {
            line: 51,
            column: 9
          },
          end: {
            line: 51,
            column: 26
          }
        },
        loc: {
          start: {
            line: 51,
            column: 36
          },
          end: {
            line: 70,
            column: 1
          }
        },
        line: 51
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 57,
            column: 17
          },
          end: {
            line: 57,
            column: 18
          }
        },
        loc: {
          start: {
            line: 57,
            column: 27
          },
          end: {
            line: 67,
            column: 9
          }
        },
        line: 57
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 58,
            column: 94
          },
          end: {
            line: 58,
            column: 95
          }
        },
        loc: {
          start: {
            line: 58,
            column: 110
          },
          end: {
            line: 61,
            column: 17
          }
        },
        line: 58
      },
      "16": {
        name: "useSearchPlantInstances",
        decl: {
          start: {
            line: 71,
            column: 9
          },
          end: {
            line: 71,
            column: 32
          }
        },
        loc: {
          start: {
            line: 71,
            column: 47
          },
          end: {
            line: 94,
            column: 1
          }
        },
        line: 71
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 77,
            column: 17
          },
          end: {
            line: 77,
            column: 18
          }
        },
        loc: {
          start: {
            line: 77,
            column: 27
          },
          end: {
            line: 90,
            column: 9
          }
        },
        line: 77
      },
      "18": {
        name: "usePlantInstance",
        decl: {
          start: {
            line: 95,
            column: 9
          },
          end: {
            line: 95,
            column: 25
          }
        },
        loc: {
          start: {
            line: 95,
            column: 30
          },
          end: {
            line: 110,
            column: 1
          }
        },
        line: 95
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 101,
            column: 17
          },
          end: {
            line: 101,
            column: 18
          }
        },
        loc: {
          start: {
            line: 101,
            column: 27
          },
          end: {
            line: 107,
            column: 9
          }
        },
        line: 101
      },
      "20": {
        name: "useCareDashboard",
        decl: {
          start: {
            line: 111,
            column: 9
          },
          end: {
            line: 111,
            column: 25
          }
        },
        loc: {
          start: {
            line: 111,
            column: 34
          },
          end: {
            line: 127,
            column: 1
          }
        },
        line: 111
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 117,
            column: 17
          },
          end: {
            line: 117,
            column: 18
          }
        },
        loc: {
          start: {
            line: 117,
            column: 27
          },
          end: {
            line: 123,
            column: 9
          }
        },
        line: 117
      },
      "22": {
        name: "useUserLocations",
        decl: {
          start: {
            line: 128,
            column: 9
          },
          end: {
            line: 128,
            column: 25
          }
        },
        loc: {
          start: {
            line: 128,
            column: 34
          },
          end: {
            line: 144,
            column: 1
          }
        },
        line: 128
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 134,
            column: 17
          },
          end: {
            line: 134,
            column: 18
          }
        },
        loc: {
          start: {
            line: 134,
            column: 27
          },
          end: {
            line: 141,
            column: 9
          }
        },
        line: 134
      },
      "24": {
        name: "useCreatePlantInstance",
        decl: {
          start: {
            line: 145,
            column: 9
          },
          end: {
            line: 145,
            column: 31
          }
        },
        loc: {
          start: {
            line: 145,
            column: 34
          },
          end: {
            line: 186,
            column: 1
          }
        },
        line: 145
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 148,
            column: 20
          },
          end: {
            line: 148,
            column: 21
          }
        },
        loc: {
          start: {
            line: 148,
            column: 34
          },
          end: {
            line: 161,
            column: 9
          }
        },
        line: 148
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 162,
            column: 19
          },
          end: {
            line: 162,
            column: 20
          }
        },
        loc: {
          start: {
            line: 162,
            column: 27
          },
          end: {
            line: 184,
            column: 9
          }
        },
        line: 162
      },
      "27": {
        name: "useUpdatePlantInstance",
        decl: {
          start: {
            line: 187,
            column: 9
          },
          end: {
            line: 187,
            column: 31
          }
        },
        loc: {
          start: {
            line: 187,
            column: 34
          },
          end: {
            line: 223,
            column: 1
          }
        },
        line: 187
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 190,
            column: 20
          },
          end: {
            line: 190,
            column: 21
          }
        },
        loc: {
          start: {
            line: 190,
            column: 42
          },
          end: {
            line: 203,
            column: 9
          }
        },
        line: 190
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 204,
            column: 19
          },
          end: {
            line: 204,
            column: 20
          }
        },
        loc: {
          start: {
            line: 204,
            column: 27
          },
          end: {
            line: 221,
            column: 9
          }
        },
        line: 204
      },
      "30": {
        name: "useDeletePlantInstance",
        decl: {
          start: {
            line: 224,
            column: 9
          },
          end: {
            line: 224,
            column: 31
          }
        },
        loc: {
          start: {
            line: 224,
            column: 34
          },
          end: {
            line: 257,
            column: 1
          }
        },
        line: 224
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 227,
            column: 20
          },
          end: {
            line: 227,
            column: 21
          }
        },
        loc: {
          start: {
            line: 227,
            column: 32
          },
          end: {
            line: 235,
            column: 9
          }
        },
        line: 227
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 236,
            column: 19
          },
          end: {
            line: 236,
            column: 20
          }
        },
        loc: {
          start: {
            line: 236,
            column: 28
          },
          end: {
            line: 255,
            column: 9
          }
        },
        line: 236
      },
      "33": {
        name: "useLogCare",
        decl: {
          start: {
            line: 258,
            column: 9
          },
          end: {
            line: 258,
            column: 19
          }
        },
        loc: {
          start: {
            line: 258,
            column: 22
          },
          end: {
            line: 299,
            column: 1
          }
        },
        line: 258
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 261,
            column: 20
          },
          end: {
            line: 261,
            column: 21
          }
        },
        loc: {
          start: {
            line: 261,
            column: 46
          },
          end: {
            line: 277,
            column: 9
          }
        },
        line: 261
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 278,
            column: 19
          },
          end: {
            line: 278,
            column: 20
          }
        },
        loc: {
          start: {
            line: 278,
            column: 29
          },
          end: {
            line: 297,
            column: 9
          }
        },
        line: 278
      },
      "36": {
        name: "useBulkPlantInstanceOperation",
        decl: {
          start: {
            line: 300,
            column: 9
          },
          end: {
            line: 300,
            column: 38
          }
        },
        loc: {
          start: {
            line: 300,
            column: 41
          },
          end: {
            line: 336,
            column: 1
          }
        },
        line: 300
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 303,
            column: 20
          },
          end: {
            line: 303,
            column: 21
          }
        },
        loc: {
          start: {
            line: 303,
            column: 39
          },
          end: {
            line: 316,
            column: 9
          }
        },
        line: 303
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 317,
            column: 19
          },
          end: {
            line: 317,
            column: 20
          }
        },
        loc: {
          start: {
            line: 317,
            column: 23
          },
          end: {
            line: 334,
            column: 9
          }
        },
        line: 317
      },
      "39": {
        name: "useTogglePlantInstanceStatus",
        decl: {
          start: {
            line: 337,
            column: 9
          },
          end: {
            line: 337,
            column: 37
          }
        },
        loc: {
          start: {
            line: 337,
            column: 40
          },
          end: {
            line: 375,
            column: 1
          }
        },
        line: 337
      },
      "40": {
        name: "(anonymous_40)",
        decl: {
          start: {
            line: 340,
            column: 20
          },
          end: {
            line: 340,
            column: 21
          }
        },
        loc: {
          start: {
            line: 340,
            column: 46
          },
          end: {
            line: 355,
            column: 9
          }
        },
        line: 340
      },
      "41": {
        name: "(anonymous_41)",
        decl: {
          start: {
            line: 356,
            column: 19
          },
          end: {
            line: 356,
            column: 20
          }
        },
        loc: {
          start: {
            line: 356,
            column: 27
          },
          end: {
            line: 373,
            column: 9
          }
        },
        line: 356
      },
      "42": {
        name: "useOptimisticPlantInstanceUpdate",
        decl: {
          start: {
            line: 376,
            column: 9
          },
          end: {
            line: 376,
            column: 41
          }
        },
        loc: {
          start: {
            line: 376,
            column: 44
          },
          end: {
            line: 402,
            column: 1
          }
        },
        line: 376
      },
      "43": {
        name: "(anonymous_43)",
        decl: {
          start: {
            line: 378,
            column: 46
          },
          end: {
            line: 378,
            column: 47
          }
        },
        loc: {
          start: {
            line: 378,
            column: 61
          },
          end: {
            line: 389,
            column: 5
          }
        },
        line: 378
      },
      "44": {
        name: "(anonymous_44)",
        decl: {
          start: {
            line: 382,
            column: 11
          },
          end: {
            line: 382,
            column: 12
          }
        },
        loc: {
          start: {
            line: 382,
            column: 18
          },
          end: {
            line: 388,
            column: 9
          }
        },
        line: 382
      },
      "45": {
        name: "(anonymous_45)",
        decl: {
          start: {
            line: 390,
            column: 38
          },
          end: {
            line: 390,
            column: 39
          }
        },
        loc: {
          start: {
            line: 390,
            column: 44
          },
          end: {
            line: 397,
            column: 5
          }
        },
        line: 390
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 60,
            column: 20
          },
          end: {
            line: 60,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 60,
            column: 44
          },
          end: {
            line: 60,
            column: 63
          }
        }, {
          start: {
            line: 60,
            column: 66
          },
          end: {
            line: 60,
            column: 79
          }
        }],
        line: 60
      },
      "1": {
        loc: {
          start: {
            line: 63,
            column: 12
          },
          end: {
            line: 65,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 63,
            column: 12
          },
          end: {
            line: 65,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 63
      },
      "2": {
        loc: {
          start: {
            line: 86,
            column: 12
          },
          end: {
            line: 88,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 86,
            column: 12
          },
          end: {
            line: 88,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 86
      },
      "3": {
        loc: {
          start: {
            line: 103,
            column: 12
          },
          end: {
            line: 105,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 103,
            column: 12
          },
          end: {
            line: 105,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 103
      },
      "4": {
        loc: {
          start: {
            line: 119,
            column: 12
          },
          end: {
            line: 121,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 119,
            column: 12
          },
          end: {
            line: 121,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 119
      },
      "5": {
        loc: {
          start: {
            line: 136,
            column: 12
          },
          end: {
            line: 138,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 136,
            column: 12
          },
          end: {
            line: 138,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 136
      },
      "6": {
        loc: {
          start: {
            line: 156,
            column: 12
          },
          end: {
            line: 159,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 156,
            column: 12
          },
          end: {
            line: 159,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 156
      },
      "7": {
        loc: {
          start: {
            line: 158,
            column: 32
          },
          end: {
            line: 158,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 158,
            column: 32
          },
          end: {
            line: 158,
            column: 43
          }
        }, {
          start: {
            line: 158,
            column: 47
          },
          end: {
            line: 158,
            column: 80
          }
        }],
        line: 158
      },
      "8": {
        loc: {
          start: {
            line: 198,
            column: 12
          },
          end: {
            line: 201,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 198,
            column: 12
          },
          end: {
            line: 201,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 198
      },
      "9": {
        loc: {
          start: {
            line: 200,
            column: 32
          },
          end: {
            line: 200,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 200,
            column: 32
          },
          end: {
            line: 200,
            column: 43
          }
        }, {
          start: {
            line: 200,
            column: 47
          },
          end: {
            line: 200,
            column: 80
          }
        }],
        line: 200
      },
      "10": {
        loc: {
          start: {
            line: 231,
            column: 12
          },
          end: {
            line: 234,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 231,
            column: 12
          },
          end: {
            line: 234,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 231
      },
      "11": {
        loc: {
          start: {
            line: 233,
            column: 32
          },
          end: {
            line: 233,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 233,
            column: 32
          },
          end: {
            line: 233,
            column: 43
          }
        }, {
          start: {
            line: 233,
            column: 47
          },
          end: {
            line: 233,
            column: 80
          }
        }],
        line: 233
      },
      "12": {
        loc: {
          start: {
            line: 272,
            column: 12
          },
          end: {
            line: 275,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 272,
            column: 12
          },
          end: {
            line: 275,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 272
      },
      "13": {
        loc: {
          start: {
            line: 274,
            column: 32
          },
          end: {
            line: 274,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 274,
            column: 32
          },
          end: {
            line: 274,
            column: 43
          }
        }, {
          start: {
            line: 274,
            column: 47
          },
          end: {
            line: 274,
            column: 76
          }
        }],
        line: 274
      },
      "14": {
        loc: {
          start: {
            line: 279,
            column: 12
          },
          end: {
            line: 296,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 279,
            column: 12
          },
          end: {
            line: 296,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 279
      },
      "15": {
        loc: {
          start: {
            line: 279,
            column: 16
          },
          end: {
            line: 279,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 279,
            column: 16
          },
          end: {
            line: 279,
            column: 30
          }
        }, {
          start: {
            line: 279,
            column: 34
          },
          end: {
            line: 279,
            column: 49
          }
        }],
        line: 279
      },
      "16": {
        loc: {
          start: {
            line: 311,
            column: 12
          },
          end: {
            line: 314,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 311,
            column: 12
          },
          end: {
            line: 314,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 311
      },
      "17": {
        loc: {
          start: {
            line: 313,
            column: 32
          },
          end: {
            line: 313,
            column: 81
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 313,
            column: 32
          },
          end: {
            line: 313,
            column: 43
          }
        }, {
          start: {
            line: 313,
            column: 47
          },
          end: {
            line: 313,
            column: 81
          }
        }],
        line: 313
      },
      "18": {
        loc: {
          start: {
            line: 350,
            column: 12
          },
          end: {
            line: 353,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 350,
            column: 12
          },
          end: {
            line: 353,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 350
      },
      "19": {
        loc: {
          start: {
            line: 352,
            column: 32
          },
          end: {
            line: 352,
            column: 78
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 352,
            column: 32
          },
          end: {
            line: 352,
            column: 43
          }
        }, {
          start: {
            line: 352,
            column: 47
          },
          end: {
            line: 352,
            column: 78
          }
        }],
        line: 352
      },
      "20": {
        loc: {
          start: {
            line: 383,
            column: 12
          },
          end: {
            line: 383,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 383,
            column: 12
          },
          end: {
            line: 383,
            column: 33
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 383
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/stefanbekker/projects/fancy-planties/src/hooks/usePlantInstances.ts"],
      sourcesContent: ["'use client';\n\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport type { \n  EnhancedPlantInstance,\n  PlantInstanceSearchResult,\n  CareDashboardData,\n  PlantInstanceOperationResult,\n  BulkOperationResult\n} from '@/lib/types/plant-instance-types';\nimport type { \n  PlantInstanceFilter,\n  PlantInstanceSearch,\n  CreatePlantInstance,\n  UpdatePlantInstance,\n  LogFertilizer,\n  LogRepot,\n  BulkPlantInstanceOperation\n} from '@/lib/validation/plant-schemas';\n\n// Hook for fetching plant instances with filters\nexport function usePlantInstances(filters: PlantInstanceFilter) {\n  return useQuery({\n    queryKey: ['plant-instances', filters],\n    queryFn: async (): Promise<PlantInstanceSearchResult> => {\n      const params = new URLSearchParams(\n        Object.fromEntries(\n          Object.entries(filters).map(([key, value]) => [\n            key,\n            value instanceof Date ? value.toISOString() : String(value)\n          ])\n        )\n      );\n\n      const response = await fetch(`/api/plant-instances?${params}`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch plant instances');\n      }\n      return response.json();\n    },\n    staleTime: 1000 * 60 * 5, // 5 minutes\n  });\n}\n\n// Hook for searching plant instances\nexport function useSearchPlantInstances(searchParams: PlantInstanceSearch) {\n  return useQuery({\n    queryKey: ['plant-instances-search', searchParams],\n    queryFn: async (): Promise<PlantInstanceSearchResult> => {\n      const params = new URLSearchParams({\n        query: searchParams.query,\n        userId: String(searchParams.userId),\n        activeOnly: String(searchParams.activeOnly),\n        limit: String(searchParams.limit),\n        offset: String(searchParams.offset),\n      });\n\n      const response = await fetch(`/api/plant-instances/search?${params}`);\n      if (!response.ok) {\n        throw new Error('Failed to search plant instances');\n      }\n      return response.json();\n    },\n    enabled: !!searchParams.query,\n    staleTime: 1000 * 60 * 2, // 2 minutes\n  });\n}\n\n// Hook for fetching a single plant instance\nexport function usePlantInstance(id: number) {\n  return useQuery({\n    queryKey: ['plant-instance', id],\n    queryFn: async (): Promise<EnhancedPlantInstance> => {\n      const response = await fetch(`/api/plant-instances/${id}`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch plant instance');\n      }\n      return response.json();\n    },\n    staleTime: 1000 * 60 * 5, // 5 minutes\n  });\n}\n\n// Hook for fetching care dashboard data\nexport function useCareDashboard(userId: number) {\n  return useQuery({\n    queryKey: ['care-dashboard', userId],\n    queryFn: async (): Promise<CareDashboardData> => {\n      const response = await fetch('/api/plant-instances/dashboard');\n      if (!response.ok) {\n        throw new Error('Failed to fetch care dashboard data');\n      }\n      return response.json();\n    },\n    staleTime: 1000 * 60 * 2, // 2 minutes\n    refetchInterval: 1000 * 60 * 5, // Refetch every 5 minutes\n  });\n}\n\n// Hook for fetching user locations\nexport function useUserLocations(userId: number) {\n  return useQuery({\n    queryKey: ['user-locations', userId],\n    queryFn: async (): Promise<string[]> => {\n      const response = await fetch('/api/plant-instances/locations');\n      if (!response.ok) {\n        throw new Error('Failed to fetch user locations');\n      }\n      const data = await response.json();\n      return data.locations;\n    },\n    staleTime: 1000 * 60 * 10, // 10 minutes\n  });\n}\n\n// Hook for creating a plant instance\nexport function useCreatePlantInstance() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async (data: CreatePlantInstance): Promise<EnhancedPlantInstance> => {\n      const response = await fetch('/api/plant-instances', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || 'Failed to create plant instance');\n      }\n\n      return response.json();\n    },\n    onSuccess: (data) => {\n      // Invalidate and refetch plant instances queries\n      queryClient.invalidateQueries({ queryKey: ['plant-instances'] });\n      queryClient.invalidateQueries({ queryKey: ['care-dashboard'] });\n      queryClient.invalidateQueries({ queryKey: ['user-locations'] });\n      \n      // Update the specific plant instance cache\n      queryClient.setQueryData(['plant-instance', data.id], data);\n    },\n  });\n}\n\n// Hook for updating a plant instance\nexport function useUpdatePlantInstance() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async ({ id, data }: { id: number; data: Partial<UpdatePlantInstance> }): Promise<EnhancedPlantInstance> => {\n      const response = await fetch(`/api/plant-instances/${id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || 'Failed to update plant instance');\n      }\n\n      return response.json();\n    },\n    onSuccess: (data) => {\n      // Update the specific plant instance cache\n      queryClient.setQueryData(['plant-instance', data.id], data);\n      \n      // Invalidate related queries\n      queryClient.invalidateQueries({ queryKey: ['plant-instances'] });\n      queryClient.invalidateQueries({ queryKey: ['care-dashboard'] });\n    },\n  });\n}\n\n// Hook for deleting a plant instance\nexport function useDeletePlantInstance() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async (id: number): Promise<void> => {\n      const response = await fetch(`/api/plant-instances/${id}`, {\n        method: 'DELETE',\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || 'Failed to delete plant instance');\n      }\n    },\n    onSuccess: (_, id) => {\n      // Remove from cache\n      queryClient.removeQueries({ queryKey: ['plant-instance', id] });\n      \n      // Invalidate related queries\n      queryClient.invalidateQueries({ queryKey: ['plant-instances'] });\n      queryClient.invalidateQueries({ queryKey: ['care-dashboard'] });\n    },\n  });\n}\n\n// Hook for logging care activities\nexport function useLogCare() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async ({ action, data }: { action: 'fertilize' | 'repot'; data: LogFertilizer | LogRepot }): Promise<PlantInstanceOperationResult> => {\n      const response = await fetch('/api/plant-instances/care', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ action, ...data }),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || 'Failed to log care activity');\n      }\n\n      return response.json();\n    },\n    onSuccess: (result) => {\n      if (result.success && result.instance) {\n        // Update the specific plant instance cache\n        queryClient.setQueryData(['plant-instance', result.instance.id], result.instance);\n        \n        // Invalidate related queries\n        queryClient.invalidateQueries({ queryKey: ['plant-instances'] });\n        queryClient.invalidateQueries({ queryKey: ['care-dashboard'] });\n      }\n    },\n  });\n}\n\n// Hook for bulk operations\nexport function useBulkPlantInstanceOperation() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async (operation: BulkPlantInstanceOperation): Promise<BulkOperationResult> => {\n      const response = await fetch('/api/plant-instances/bulk', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(operation),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || 'Failed to perform bulk operation');\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      // Invalidate all plant instance related queries\n      queryClient.invalidateQueries({ queryKey: ['plant-instances'] });\n      queryClient.invalidateQueries({ queryKey: ['care-dashboard'] });\n      queryClient.invalidateQueries({ queryKey: ['plant-instance'] });\n    },\n  });\n}\n\n// Hook for toggling plant instance active status\nexport function useTogglePlantInstanceStatus() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async ({ id, isActive }: { id: number; isActive: boolean }): Promise<EnhancedPlantInstance> => {\n      const response = await fetch(`/api/plant-instances/${id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ isActive }),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || 'Failed to update plant status');\n      }\n\n      return response.json();\n    },\n    onSuccess: (data) => {\n      // Update the specific plant instance cache\n      queryClient.setQueryData(['plant-instance', data.id], data);\n      \n      // Invalidate related queries\n      queryClient.invalidateQueries({ queryKey: ['plant-instances'] });\n      queryClient.invalidateQueries({ queryKey: ['care-dashboard'] });\n    },\n  });\n}\n\n// Utility hook for optimistic updates\nexport function useOptimisticPlantInstanceUpdate() {\n  const queryClient = useQueryClient();\n\n  const updatePlantInstanceOptimistically = (id: number, updates: Partial<EnhancedPlantInstance>) => {\n    queryClient.setQueryData(['plant-instance', id], (old: EnhancedPlantInstance | undefined) => {\n      if (!old) return old;\n      return { ...old, ...updates };\n    });\n  };\n\n  const revertPlantInstanceUpdate = (id: number) => {\n    queryClient.invalidateQueries({ queryKey: ['plant-instance', id] });\n  };\n\n  return {\n    updatePlantInstanceOptimistically,\n    revertPlantInstanceUpdate,\n  };\n}"],
      names: ["useBulkPlantInstanceOperation", "useCareDashboard", "useCreatePlantInstance", "useDeletePlantInstance", "useLogCare", "useOptimisticPlantInstanceUpdate", "usePlantInstance", "usePlantInstances", "useSearchPlantInstances", "useTogglePlantInstanceStatus", "useUpdatePlantInstance", "useUserLocations", "filters", "useQuery", "queryKey", "queryFn", "params", "URLSearchParams", "Object", "fromEntries", "entries", "map", "key", "value", "Date", "toISOString", "String", "response", "fetch", "ok", "Error", "json", "staleTime", "searchParams", "query", "userId", "activeOnly", "limit", "offset", "enabled", "id", "refetchInterval", "data", "locations", "queryClient", "useQueryClient", "useMutation", "mutationFn", "method", "headers", "body", "JSON", "stringify", "error", "onSuccess", "invalidateQueries", "setQueryData", "_", "removeQueries", "action", "result", "success", "instance", "operation", "isActive", "updatePlantInstanceOptimistically", "updates", "old", "revertPlantInstanceUpdate"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "53b06c7676935a8cf1ab8c2e7a7e89d7e65e11d7"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_9blg9itkw = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_9blg9itkw();
cov_9blg9itkw().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_9blg9itkw().f[0]++;
  cov_9blg9itkw().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_9blg9itkw().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_9blg9itkw().s[3]++;
_export(exports, {
  get useBulkPlantInstanceOperation() {
    /* istanbul ignore next */
    cov_9blg9itkw().f[1]++;
    cov_9blg9itkw().s[4]++;
    return useBulkPlantInstanceOperation;
  },
  get useCareDashboard() {
    /* istanbul ignore next */
    cov_9blg9itkw().f[2]++;
    cov_9blg9itkw().s[5]++;
    return useCareDashboard;
  },
  get useCreatePlantInstance() {
    /* istanbul ignore next */
    cov_9blg9itkw().f[3]++;
    cov_9blg9itkw().s[6]++;
    return useCreatePlantInstance;
  },
  get useDeletePlantInstance() {
    /* istanbul ignore next */
    cov_9blg9itkw().f[4]++;
    cov_9blg9itkw().s[7]++;
    return useDeletePlantInstance;
  },
  get useLogCare() {
    /* istanbul ignore next */
    cov_9blg9itkw().f[5]++;
    cov_9blg9itkw().s[8]++;
    return useLogCare;
  },
  get useOptimisticPlantInstanceUpdate() {
    /* istanbul ignore next */
    cov_9blg9itkw().f[6]++;
    cov_9blg9itkw().s[9]++;
    return useOptimisticPlantInstanceUpdate;
  },
  get usePlantInstance() {
    /* istanbul ignore next */
    cov_9blg9itkw().f[7]++;
    cov_9blg9itkw().s[10]++;
    return usePlantInstance;
  },
  get usePlantInstances() {
    /* istanbul ignore next */
    cov_9blg9itkw().f[8]++;
    cov_9blg9itkw().s[11]++;
    return usePlantInstances;
  },
  get useSearchPlantInstances() {
    /* istanbul ignore next */
    cov_9blg9itkw().f[9]++;
    cov_9blg9itkw().s[12]++;
    return useSearchPlantInstances;
  },
  get useTogglePlantInstanceStatus() {
    /* istanbul ignore next */
    cov_9blg9itkw().f[10]++;
    cov_9blg9itkw().s[13]++;
    return useTogglePlantInstanceStatus;
  },
  get useUpdatePlantInstance() {
    /* istanbul ignore next */
    cov_9blg9itkw().f[11]++;
    cov_9blg9itkw().s[14]++;
    return useUpdatePlantInstance;
  },
  get useUserLocations() {
    /* istanbul ignore next */
    cov_9blg9itkw().f[12]++;
    cov_9blg9itkw().s[15]++;
    return useUserLocations;
  }
});
const _reactquery =
/* istanbul ignore next */
(cov_9blg9itkw().s[16]++, require("@tanstack/react-query"));
function usePlantInstances(filters) {
  /* istanbul ignore next */
  cov_9blg9itkw().f[13]++;
  cov_9blg9itkw().s[17]++;
  return (0, _reactquery.useQuery)({
    queryKey: ['plant-instances', filters],
    queryFn: async () => {
      /* istanbul ignore next */
      cov_9blg9itkw().f[14]++;
      const params =
      /* istanbul ignore next */
      (cov_9blg9itkw().s[18]++, new URLSearchParams(Object.fromEntries(Object.entries(filters).map(([key, value]) => {
        /* istanbul ignore next */
        cov_9blg9itkw().f[15]++;
        cov_9blg9itkw().s[19]++;
        return [key, value instanceof Date ?
        /* istanbul ignore next */
        (cov_9blg9itkw().b[0][0]++, value.toISOString()) :
        /* istanbul ignore next */
        (cov_9blg9itkw().b[0][1]++, String(value))];
      }))));
      const response =
      /* istanbul ignore next */
      (cov_9blg9itkw().s[20]++, await fetch(`/api/plant-instances?${params}`));
      /* istanbul ignore next */
      cov_9blg9itkw().s[21]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_9blg9itkw().b[1][0]++;
        cov_9blg9itkw().s[22]++;
        throw new Error('Failed to fetch plant instances');
      } else
      /* istanbul ignore next */
      {
        cov_9blg9itkw().b[1][1]++;
      }
      cov_9blg9itkw().s[23]++;
      return response.json();
    },
    staleTime: 1000 * 60 * 5
  });
}
function useSearchPlantInstances(searchParams) {
  /* istanbul ignore next */
  cov_9blg9itkw().f[16]++;
  cov_9blg9itkw().s[24]++;
  return (0, _reactquery.useQuery)({
    queryKey: ['plant-instances-search', searchParams],
    queryFn: async () => {
      /* istanbul ignore next */
      cov_9blg9itkw().f[17]++;
      const params =
      /* istanbul ignore next */
      (cov_9blg9itkw().s[25]++, new URLSearchParams({
        query: searchParams.query,
        userId: String(searchParams.userId),
        activeOnly: String(searchParams.activeOnly),
        limit: String(searchParams.limit),
        offset: String(searchParams.offset)
      }));
      const response =
      /* istanbul ignore next */
      (cov_9blg9itkw().s[26]++, await fetch(`/api/plant-instances/search?${params}`));
      /* istanbul ignore next */
      cov_9blg9itkw().s[27]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_9blg9itkw().b[2][0]++;
        cov_9blg9itkw().s[28]++;
        throw new Error('Failed to search plant instances');
      } else
      /* istanbul ignore next */
      {
        cov_9blg9itkw().b[2][1]++;
      }
      cov_9blg9itkw().s[29]++;
      return response.json();
    },
    enabled: !!searchParams.query,
    staleTime: 1000 * 60 * 2
  });
}
function usePlantInstance(id) {
  /* istanbul ignore next */
  cov_9blg9itkw().f[18]++;
  cov_9blg9itkw().s[30]++;
  return (0, _reactquery.useQuery)({
    queryKey: ['plant-instance', id],
    queryFn: async () => {
      /* istanbul ignore next */
      cov_9blg9itkw().f[19]++;
      const response =
      /* istanbul ignore next */
      (cov_9blg9itkw().s[31]++, await fetch(`/api/plant-instances/${id}`));
      /* istanbul ignore next */
      cov_9blg9itkw().s[32]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_9blg9itkw().b[3][0]++;
        cov_9blg9itkw().s[33]++;
        throw new Error('Failed to fetch plant instance');
      } else
      /* istanbul ignore next */
      {
        cov_9blg9itkw().b[3][1]++;
      }
      cov_9blg9itkw().s[34]++;
      return response.json();
    },
    staleTime: 1000 * 60 * 5
  });
}
function useCareDashboard(userId) {
  /* istanbul ignore next */
  cov_9blg9itkw().f[20]++;
  cov_9blg9itkw().s[35]++;
  return (0, _reactquery.useQuery)({
    queryKey: ['care-dashboard', userId],
    queryFn: async () => {
      /* istanbul ignore next */
      cov_9blg9itkw().f[21]++;
      const response =
      /* istanbul ignore next */
      (cov_9blg9itkw().s[36]++, await fetch('/api/plant-instances/dashboard'));
      /* istanbul ignore next */
      cov_9blg9itkw().s[37]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_9blg9itkw().b[4][0]++;
        cov_9blg9itkw().s[38]++;
        throw new Error('Failed to fetch care dashboard data');
      } else
      /* istanbul ignore next */
      {
        cov_9blg9itkw().b[4][1]++;
      }
      cov_9blg9itkw().s[39]++;
      return response.json();
    },
    staleTime: 1000 * 60 * 2,
    refetchInterval: 1000 * 60 * 5
  });
}
function useUserLocations(userId) {
  /* istanbul ignore next */
  cov_9blg9itkw().f[22]++;
  cov_9blg9itkw().s[40]++;
  return (0, _reactquery.useQuery)({
    queryKey: ['user-locations', userId],
    queryFn: async () => {
      /* istanbul ignore next */
      cov_9blg9itkw().f[23]++;
      const response =
      /* istanbul ignore next */
      (cov_9blg9itkw().s[41]++, await fetch('/api/plant-instances/locations'));
      /* istanbul ignore next */
      cov_9blg9itkw().s[42]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_9blg9itkw().b[5][0]++;
        cov_9blg9itkw().s[43]++;
        throw new Error('Failed to fetch user locations');
      } else
      /* istanbul ignore next */
      {
        cov_9blg9itkw().b[5][1]++;
      }
      const data =
      /* istanbul ignore next */
      (cov_9blg9itkw().s[44]++, await response.json());
      /* istanbul ignore next */
      cov_9blg9itkw().s[45]++;
      return data.locations;
    },
    staleTime: 1000 * 60 * 10
  });
}
function useCreatePlantInstance() {
  /* istanbul ignore next */
  cov_9blg9itkw().f[24]++;
  const queryClient =
  /* istanbul ignore next */
  (cov_9blg9itkw().s[46]++, (0, _reactquery.useQueryClient)());
  /* istanbul ignore next */
  cov_9blg9itkw().s[47]++;
  return (0, _reactquery.useMutation)({
    mutationFn: async data => {
      /* istanbul ignore next */
      cov_9blg9itkw().f[25]++;
      const response =
      /* istanbul ignore next */
      (cov_9blg9itkw().s[48]++, await fetch('/api/plant-instances', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(data)
      }));
      /* istanbul ignore next */
      cov_9blg9itkw().s[49]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_9blg9itkw().b[6][0]++;
        const error =
        /* istanbul ignore next */
        (cov_9blg9itkw().s[50]++, await response.json());
        /* istanbul ignore next */
        cov_9blg9itkw().s[51]++;
        throw new Error(
        /* istanbul ignore next */
        (cov_9blg9itkw().b[7][0]++, error.error) ||
        /* istanbul ignore next */
        (cov_9blg9itkw().b[7][1]++, 'Failed to create plant instance'));
      } else
      /* istanbul ignore next */
      {
        cov_9blg9itkw().b[6][1]++;
      }
      cov_9blg9itkw().s[52]++;
      return response.json();
    },
    onSuccess: data => {
      /* istanbul ignore next */
      cov_9blg9itkw().f[26]++;
      cov_9blg9itkw().s[53]++;
      // Invalidate and refetch plant instances queries
      queryClient.invalidateQueries({
        queryKey: ['plant-instances']
      });
      /* istanbul ignore next */
      cov_9blg9itkw().s[54]++;
      queryClient.invalidateQueries({
        queryKey: ['care-dashboard']
      });
      /* istanbul ignore next */
      cov_9blg9itkw().s[55]++;
      queryClient.invalidateQueries({
        queryKey: ['user-locations']
      });
      // Update the specific plant instance cache
      /* istanbul ignore next */
      cov_9blg9itkw().s[56]++;
      queryClient.setQueryData(['plant-instance', data.id], data);
    }
  });
}
function useUpdatePlantInstance() {
  /* istanbul ignore next */
  cov_9blg9itkw().f[27]++;
  const queryClient =
  /* istanbul ignore next */
  (cov_9blg9itkw().s[57]++, (0, _reactquery.useQueryClient)());
  /* istanbul ignore next */
  cov_9blg9itkw().s[58]++;
  return (0, _reactquery.useMutation)({
    mutationFn: async ({
      id,
      data
    }) => {
      /* istanbul ignore next */
      cov_9blg9itkw().f[28]++;
      const response =
      /* istanbul ignore next */
      (cov_9blg9itkw().s[59]++, await fetch(`/api/plant-instances/${id}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(data)
      }));
      /* istanbul ignore next */
      cov_9blg9itkw().s[60]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_9blg9itkw().b[8][0]++;
        const error =
        /* istanbul ignore next */
        (cov_9blg9itkw().s[61]++, await response.json());
        /* istanbul ignore next */
        cov_9blg9itkw().s[62]++;
        throw new Error(
        /* istanbul ignore next */
        (cov_9blg9itkw().b[9][0]++, error.error) ||
        /* istanbul ignore next */
        (cov_9blg9itkw().b[9][1]++, 'Failed to update plant instance'));
      } else
      /* istanbul ignore next */
      {
        cov_9blg9itkw().b[8][1]++;
      }
      cov_9blg9itkw().s[63]++;
      return response.json();
    },
    onSuccess: data => {
      /* istanbul ignore next */
      cov_9blg9itkw().f[29]++;
      cov_9blg9itkw().s[64]++;
      // Update the specific plant instance cache
      queryClient.setQueryData(['plant-instance', data.id], data);
      // Invalidate related queries
      /* istanbul ignore next */
      cov_9blg9itkw().s[65]++;
      queryClient.invalidateQueries({
        queryKey: ['plant-instances']
      });
      /* istanbul ignore next */
      cov_9blg9itkw().s[66]++;
      queryClient.invalidateQueries({
        queryKey: ['care-dashboard']
      });
    }
  });
}
function useDeletePlantInstance() {
  /* istanbul ignore next */
  cov_9blg9itkw().f[30]++;
  const queryClient =
  /* istanbul ignore next */
  (cov_9blg9itkw().s[67]++, (0, _reactquery.useQueryClient)());
  /* istanbul ignore next */
  cov_9blg9itkw().s[68]++;
  return (0, _reactquery.useMutation)({
    mutationFn: async id => {
      /* istanbul ignore next */
      cov_9blg9itkw().f[31]++;
      const response =
      /* istanbul ignore next */
      (cov_9blg9itkw().s[69]++, await fetch(`/api/plant-instances/${id}`, {
        method: 'DELETE'
      }));
      /* istanbul ignore next */
      cov_9blg9itkw().s[70]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_9blg9itkw().b[10][0]++;
        const error =
        /* istanbul ignore next */
        (cov_9blg9itkw().s[71]++, await response.json());
        /* istanbul ignore next */
        cov_9blg9itkw().s[72]++;
        throw new Error(
        /* istanbul ignore next */
        (cov_9blg9itkw().b[11][0]++, error.error) ||
        /* istanbul ignore next */
        (cov_9blg9itkw().b[11][1]++, 'Failed to delete plant instance'));
      } else
      /* istanbul ignore next */
      {
        cov_9blg9itkw().b[10][1]++;
      }
    },
    onSuccess: (_, id) => {
      /* istanbul ignore next */
      cov_9blg9itkw().f[32]++;
      cov_9blg9itkw().s[73]++;
      // Remove from cache
      queryClient.removeQueries({
        queryKey: ['plant-instance', id]
      });
      // Invalidate related queries
      /* istanbul ignore next */
      cov_9blg9itkw().s[74]++;
      queryClient.invalidateQueries({
        queryKey: ['plant-instances']
      });
      /* istanbul ignore next */
      cov_9blg9itkw().s[75]++;
      queryClient.invalidateQueries({
        queryKey: ['care-dashboard']
      });
    }
  });
}
function useLogCare() {
  /* istanbul ignore next */
  cov_9blg9itkw().f[33]++;
  const queryClient =
  /* istanbul ignore next */
  (cov_9blg9itkw().s[76]++, (0, _reactquery.useQueryClient)());
  /* istanbul ignore next */
  cov_9blg9itkw().s[77]++;
  return (0, _reactquery.useMutation)({
    mutationFn: async ({
      action,
      data
    }) => {
      /* istanbul ignore next */
      cov_9blg9itkw().f[34]++;
      const response =
      /* istanbul ignore next */
      (cov_9blg9itkw().s[78]++, await fetch('/api/plant-instances/care', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          action,
          ...data
        })
      }));
      /* istanbul ignore next */
      cov_9blg9itkw().s[79]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_9blg9itkw().b[12][0]++;
        const error =
        /* istanbul ignore next */
        (cov_9blg9itkw().s[80]++, await response.json());
        /* istanbul ignore next */
        cov_9blg9itkw().s[81]++;
        throw new Error(
        /* istanbul ignore next */
        (cov_9blg9itkw().b[13][0]++, error.error) ||
        /* istanbul ignore next */
        (cov_9blg9itkw().b[13][1]++, 'Failed to log care activity'));
      } else
      /* istanbul ignore next */
      {
        cov_9blg9itkw().b[12][1]++;
      }
      cov_9blg9itkw().s[82]++;
      return response.json();
    },
    onSuccess: result => {
      /* istanbul ignore next */
      cov_9blg9itkw().f[35]++;
      cov_9blg9itkw().s[83]++;
      if (
      /* istanbul ignore next */
      (cov_9blg9itkw().b[15][0]++, result.success) &&
      /* istanbul ignore next */
      (cov_9blg9itkw().b[15][1]++, result.instance)) {
        /* istanbul ignore next */
        cov_9blg9itkw().b[14][0]++;
        cov_9blg9itkw().s[84]++;
        // Update the specific plant instance cache
        queryClient.setQueryData(['plant-instance', result.instance.id], result.instance);
        // Invalidate related queries
        /* istanbul ignore next */
        cov_9blg9itkw().s[85]++;
        queryClient.invalidateQueries({
          queryKey: ['plant-instances']
        });
        /* istanbul ignore next */
        cov_9blg9itkw().s[86]++;
        queryClient.invalidateQueries({
          queryKey: ['care-dashboard']
        });
      } else
      /* istanbul ignore next */
      {
        cov_9blg9itkw().b[14][1]++;
      }
    }
  });
}
function useBulkPlantInstanceOperation() {
  /* istanbul ignore next */
  cov_9blg9itkw().f[36]++;
  const queryClient =
  /* istanbul ignore next */
  (cov_9blg9itkw().s[87]++, (0, _reactquery.useQueryClient)());
  /* istanbul ignore next */
  cov_9blg9itkw().s[88]++;
  return (0, _reactquery.useMutation)({
    mutationFn: async operation => {
      /* istanbul ignore next */
      cov_9blg9itkw().f[37]++;
      const response =
      /* istanbul ignore next */
      (cov_9blg9itkw().s[89]++, await fetch('/api/plant-instances/bulk', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(operation)
      }));
      /* istanbul ignore next */
      cov_9blg9itkw().s[90]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_9blg9itkw().b[16][0]++;
        const error =
        /* istanbul ignore next */
        (cov_9blg9itkw().s[91]++, await response.json());
        /* istanbul ignore next */
        cov_9blg9itkw().s[92]++;
        throw new Error(
        /* istanbul ignore next */
        (cov_9blg9itkw().b[17][0]++, error.error) ||
        /* istanbul ignore next */
        (cov_9blg9itkw().b[17][1]++, 'Failed to perform bulk operation'));
      } else
      /* istanbul ignore next */
      {
        cov_9blg9itkw().b[16][1]++;
      }
      cov_9blg9itkw().s[93]++;
      return response.json();
    },
    onSuccess: () => {
      /* istanbul ignore next */
      cov_9blg9itkw().f[38]++;
      cov_9blg9itkw().s[94]++;
      // Invalidate all plant instance related queries
      queryClient.invalidateQueries({
        queryKey: ['plant-instances']
      });
      /* istanbul ignore next */
      cov_9blg9itkw().s[95]++;
      queryClient.invalidateQueries({
        queryKey: ['care-dashboard']
      });
      /* istanbul ignore next */
      cov_9blg9itkw().s[96]++;
      queryClient.invalidateQueries({
        queryKey: ['plant-instance']
      });
    }
  });
}
function useTogglePlantInstanceStatus() {
  /* istanbul ignore next */
  cov_9blg9itkw().f[39]++;
  const queryClient =
  /* istanbul ignore next */
  (cov_9blg9itkw().s[97]++, (0, _reactquery.useQueryClient)());
  /* istanbul ignore next */
  cov_9blg9itkw().s[98]++;
  return (0, _reactquery.useMutation)({
    mutationFn: async ({
      id,
      isActive
    }) => {
      /* istanbul ignore next */
      cov_9blg9itkw().f[40]++;
      const response =
      /* istanbul ignore next */
      (cov_9blg9itkw().s[99]++, await fetch(`/api/plant-instances/${id}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          isActive
        })
      }));
      /* istanbul ignore next */
      cov_9blg9itkw().s[100]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_9blg9itkw().b[18][0]++;
        const error =
        /* istanbul ignore next */
        (cov_9blg9itkw().s[101]++, await response.json());
        /* istanbul ignore next */
        cov_9blg9itkw().s[102]++;
        throw new Error(
        /* istanbul ignore next */
        (cov_9blg9itkw().b[19][0]++, error.error) ||
        /* istanbul ignore next */
        (cov_9blg9itkw().b[19][1]++, 'Failed to update plant status'));
      } else
      /* istanbul ignore next */
      {
        cov_9blg9itkw().b[18][1]++;
      }
      cov_9blg9itkw().s[103]++;
      return response.json();
    },
    onSuccess: data => {
      /* istanbul ignore next */
      cov_9blg9itkw().f[41]++;
      cov_9blg9itkw().s[104]++;
      // Update the specific plant instance cache
      queryClient.setQueryData(['plant-instance', data.id], data);
      // Invalidate related queries
      /* istanbul ignore next */
      cov_9blg9itkw().s[105]++;
      queryClient.invalidateQueries({
        queryKey: ['plant-instances']
      });
      /* istanbul ignore next */
      cov_9blg9itkw().s[106]++;
      queryClient.invalidateQueries({
        queryKey: ['care-dashboard']
      });
    }
  });
}
function useOptimisticPlantInstanceUpdate() {
  /* istanbul ignore next */
  cov_9blg9itkw().f[42]++;
  const queryClient =
  /* istanbul ignore next */
  (cov_9blg9itkw().s[107]++, (0, _reactquery.useQueryClient)());
  /* istanbul ignore next */
  cov_9blg9itkw().s[108]++;
  const updatePlantInstanceOptimistically = (id, updates) => {
    /* istanbul ignore next */
    cov_9blg9itkw().f[43]++;
    cov_9blg9itkw().s[109]++;
    queryClient.setQueryData(['plant-instance', id], old => {
      /* istanbul ignore next */
      cov_9blg9itkw().f[44]++;
      cov_9blg9itkw().s[110]++;
      if (!old) {
        /* istanbul ignore next */
        cov_9blg9itkw().b[20][0]++;
        cov_9blg9itkw().s[111]++;
        return old;
      } else
      /* istanbul ignore next */
      {
        cov_9blg9itkw().b[20][1]++;
      }
      cov_9blg9itkw().s[112]++;
      return {
        ...old,
        ...updates
      };
    });
  };
  /* istanbul ignore next */
  cov_9blg9itkw().s[113]++;
  const revertPlantInstanceUpdate = id => {
    /* istanbul ignore next */
    cov_9blg9itkw().f[45]++;
    cov_9blg9itkw().s[114]++;
    queryClient.invalidateQueries({
      queryKey: ['plant-instance', id]
    });
  };
  /* istanbul ignore next */
  cov_9blg9itkw().s[115]++;
  return {
    updatePlantInstanceOptimistically,
    revertPlantInstanceUpdate
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,