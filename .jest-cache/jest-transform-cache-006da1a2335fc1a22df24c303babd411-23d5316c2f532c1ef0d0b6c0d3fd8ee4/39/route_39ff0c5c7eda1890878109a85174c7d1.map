{"version":3,"names":["cov_1l03wc44gm","actualCoverage","s","POST","convertSchema","_zod","z","object","nickname","string","min","max","optional","location","request","params","f","user","_server1","validateRequest","b","_server","NextResponse","json","error","status","id","propagationId","parseInt","isNaN","existingPropagation","_propagations","PropagationQueries","getById","userId","body","parse","result","convertToPlantInstance","success","plantInstanceId","propagation","console","ZodError","details","issues"],"sources":["/Users/stefanbekker/projects/fancy-planties/src/app/api/propagations/[id]/convert/route.ts"],"sourcesContent":["import 'server-only';\n\nimport { NextRequest, NextResponse } from 'next/server';\nimport { validateRequest } from '@/lib/auth/server';\nimport { PropagationQueries } from '@/lib/db/queries/propagations';\nimport { z } from 'zod';\n\n// Validation schema for conversion\nconst convertSchema = z.object({\n  nickname: z.string().min(1).max(100).optional(),\n  location: z.string().min(1).max(100).optional(),\n});\n\n// POST /api/propagations/[id]/convert - Convert propagation to plant instance\nexport async function POST(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { user } = await validateRequest();\n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const { id } = await params;\n    const propagationId = parseInt(id, 10);\n    if (isNaN(propagationId)) {\n      return NextResponse.json({ error: 'Invalid propagation ID' }, { status: 400 });\n    }\n\n    // Check if propagation exists and belongs to user\n    const existingPropagation = await PropagationQueries.getById(propagationId);\n    if (!existingPropagation) {\n      return NextResponse.json({ error: 'Propagation not found' }, { status: 404 });\n    }\n\n    if (existingPropagation.userId !== user.id) {\n      return NextResponse.json({ error: 'Forbidden' }, { status: 403 });\n    }\n\n    // Check if propagation is ready to be converted (should be established)\n    if (existingPropagation.status !== 'established') {\n      return NextResponse.json(\n        { error: 'Propagation must be established before converting to plant instance' },\n        { status: 400 }\n      );\n    }\n\n    const body = await request.json();\n    const { nickname, location } = convertSchema.parse(body);\n\n    const result = await PropagationQueries.convertToPlantInstance(propagationId, {\n      nickname: nickname || existingPropagation.nickname,\n      location: location || existingPropagation.location,\n    });\n\n    return NextResponse.json({\n      success: true,\n      plantInstanceId: result.plantInstanceId,\n      propagation: result.propagation,\n    });\n  } catch (error) {\n    console.error('Error converting propagation:', error);\n    \n    if (error instanceof z.ZodError) {\n      return NextResponse.json(\n        { error: 'Invalid data', details: error.issues },\n        { status: 400 }\n      );\n    }\n\n    return NextResponse.json(\n      { error: 'Failed to convert propagation to plant instance' },\n      { status: 500 }\n    );\n  }\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAOA;IAAAA,cAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,cAAA;AAAAA,cAAA,GAAAE,CAAA;;;;;;+BAOsB;;;;;;WAAAC,IAAA;;;;;QAdf;;;kCAEmC;;;kCACV;;;kCACG;;;kCACjB;AAElB;AACA,MAAMC,aAAA;AAAA;AAAA,CAAAJ,cAAA,GAAAE,CAAA,OAAgBG,IAAA,CAAAC,CAAC,CAACC,MAAM,CAAC;EAC7BC,QAAA,EAAUH,IAAA,CAAAC,CAAC,CAACG,MAAM,GAAGC,GAAG,CAAC,GAAGC,GAAG,CAAC,KAAKC,QAAQ;EAC7CC,QAAA,EAAUR,IAAA,CAAAC,CAAC,CAACG,MAAM,GAAGC,GAAG,CAAC,GAAGC,GAAG,CAAC,KAAKC,QAAQ;AAC/C;AAGO,eAAeT,KACpBW,OAAoB,EACpB;EAAEC;AAAM,CAAuC;EAAA;EAAAf,cAAA,GAAAgB,CAAA;EAAAhB,cAAA,GAAAE,CAAA;EAE/C,IAAI;IACF,MAAM;MAAEe;IAAI,CAAE;IAAA;IAAA,CAAAjB,cAAA,GAAAE,CAAA,QAAG,MAAM,IAAAgB,QAAA,CAAAC,eAAe;IAAA;IAAAnB,cAAA,GAAAE,CAAA;IACtC,IAAI,CAACe,IAAA,EAAM;MAAA;MAAAjB,cAAA,GAAAoB,CAAA;MAAApB,cAAA,GAAAE,CAAA;MACT,OAAOmB,OAAA,CAAAC,YAAY,CAACC,IAAI,CAAC;QAAEC,KAAA,EAAO;MAAe,GAAG;QAAEC,MAAA,EAAQ;MAAI;IACpE;IAAA;IAAA;MAAAzB,cAAA,GAAAoB,CAAA;IAAA;IAEA,MAAM;MAAEM;IAAE,CAAE;IAAA;IAAA,CAAA1B,cAAA,GAAAE,CAAA,QAAG,MAAMa,MAAA;IACrB,MAAMY,aAAA;IAAA;IAAA,CAAA3B,cAAA,GAAAE,CAAA,QAAgB0B,QAAA,CAASF,EAAA,EAAI;IAAA;IAAA1B,cAAA,GAAAE,CAAA;IACnC,IAAI2B,KAAA,CAAMF,aAAA,GAAgB;MAAA;MAAA3B,cAAA,GAAAoB,CAAA;MAAApB,cAAA,GAAAE,CAAA;MACxB,OAAOmB,OAAA,CAAAC,YAAY,CAACC,IAAI,CAAC;QAAEC,KAAA,EAAO;MAAyB,GAAG;QAAEC,MAAA,EAAQ;MAAI;IAC9E;IAAA;IAAA;MAAAzB,cAAA,GAAAoB,CAAA;IAAA;IAEA;IACA,MAAMU,mBAAA;IAAA;IAAA,CAAA9B,cAAA,GAAAE,CAAA,QAAsB,MAAM6B,aAAA,CAAAC,kBAAkB,CAACC,OAAO,CAACN,aAAA;IAAA;IAAA3B,cAAA,GAAAE,CAAA;IAC7D,IAAI,CAAC4B,mBAAA,EAAqB;MAAA;MAAA9B,cAAA,GAAAoB,CAAA;MAAApB,cAAA,GAAAE,CAAA;MACxB,OAAOmB,OAAA,CAAAC,YAAY,CAACC,IAAI,CAAC;QAAEC,KAAA,EAAO;MAAwB,GAAG;QAAEC,MAAA,EAAQ;MAAI;IAC7E;IAAA;IAAA;MAAAzB,cAAA,GAAAoB,CAAA;IAAA;IAAApB,cAAA,GAAAE,CAAA;IAEA,IAAI4B,mBAAA,CAAoBI,MAAM,KAAKjB,IAAA,CAAKS,EAAE,EAAE;MAAA;MAAA1B,cAAA,GAAAoB,CAAA;MAAApB,cAAA,GAAAE,CAAA;MAC1C,OAAOmB,OAAA,CAAAC,YAAY,CAACC,IAAI,CAAC;QAAEC,KAAA,EAAO;MAAY,GAAG;QAAEC,MAAA,EAAQ;MAAI;IACjE;IAAA;IAAA;MAAAzB,cAAA,GAAAoB,CAAA;IAAA;IAEA;IAAApB,cAAA,GAAAE,CAAA;IACA,IAAI4B,mBAAA,CAAoBL,MAAM,KAAK,eAAe;MAAA;MAAAzB,cAAA,GAAAoB,CAAA;MAAApB,cAAA,GAAAE,CAAA;MAChD,OAAOmB,OAAA,CAAAC,YAAY,CAACC,IAAI,CACtB;QAAEC,KAAA,EAAO;MAAsE,GAC/E;QAAEC,MAAA,EAAQ;MAAI;IAElB;IAAA;IAAA;MAAAzB,cAAA,GAAAoB,CAAA;IAAA;IAEA,MAAMe,IAAA;IAAA;IAAA,CAAAnC,cAAA,GAAAE,CAAA,QAAO,MAAMY,OAAA,CAAQS,IAAI;IAC/B,MAAM;MAAEf,QAAQ;MAAEK;IAAQ,CAAE;IAAA;IAAA,CAAAb,cAAA,GAAAE,CAAA,QAAGE,aAAA,CAAcgC,KAAK,CAACD,IAAA;IAEnD,MAAME,MAAA;IAAA;IAAA,CAAArC,cAAA,GAAAE,CAAA,QAAS,MAAM6B,aAAA,CAAAC,kBAAkB,CAACM,sBAAsB,CAACX,aAAA,EAAe;MAC5EnB,QAAA;MAAU;MAAA,CAAAR,cAAA,GAAAoB,CAAA,UAAAZ,QAAA;MAAA;MAAA,CAAAR,cAAA,GAAAoB,CAAA,UAAYU,mBAAA,CAAoBtB,QAAQ;MAClDK,QAAA;MAAU;MAAA,CAAAb,cAAA,GAAAoB,CAAA,UAAAP,QAAA;MAAA;MAAA,CAAAb,cAAA,GAAAoB,CAAA,UAAYU,mBAAA,CAAoBjB,QAAQ;IACpD;IAAA;IAAAb,cAAA,GAAAE,CAAA;IAEA,OAAOmB,OAAA,CAAAC,YAAY,CAACC,IAAI,CAAC;MACvBgB,OAAA,EAAS;MACTC,eAAA,EAAiBH,MAAA,CAAOG,eAAe;MACvCC,WAAA,EAAaJ,MAAA,CAAOI;IACtB;EACF,EAAE,OAAOjB,KAAA,EAAO;IAAA;IAAAxB,cAAA,GAAAE,CAAA;IACdwC,OAAA,CAAQlB,KAAK,CAAC,iCAAiCA,KAAA;IAAA;IAAAxB,cAAA,GAAAE,CAAA;IAE/C,IAAIsB,KAAA,YAAiBnB,IAAA,CAAAC,CAAC,CAACqC,QAAQ,EAAE;MAAA;MAAA3C,cAAA,GAAAoB,CAAA;MAAApB,cAAA,GAAAE,CAAA;MAC/B,OAAOmB,OAAA,CAAAC,YAAY,CAACC,IAAI,CACtB;QAAEC,KAAA,EAAO;QAAgBoB,OAAA,EAASpB,KAAA,CAAMqB;MAAO,GAC/C;QAAEpB,MAAA,EAAQ;MAAI;IAElB;IAAA;IAAA;MAAAzB,cAAA,GAAAoB,CAAA;IAAA;IAAApB,cAAA,GAAAE,CAAA;IAEA,OAAOmB,OAAA,CAAAC,YAAY,CAACC,IAAI,CACtB;MAAEC,KAAA,EAAO;IAAkD,GAC3D;MAAEC,MAAA,EAAQ;IAAI;EAElB;AACF","ignoreList":[]}