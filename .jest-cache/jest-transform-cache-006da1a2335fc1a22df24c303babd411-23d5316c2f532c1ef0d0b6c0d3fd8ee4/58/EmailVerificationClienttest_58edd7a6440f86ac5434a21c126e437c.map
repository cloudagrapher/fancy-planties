{"version":3,"sources":["/Users/stefanbekker/projects/fancy-planties/src/app/auth/verify-email/__tests__/EmailVerificationClient.test.tsx"],"sourcesContent":["import { render, screen, fireEvent, waitFor, act } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport { useRouter } from 'next/navigation';\nimport EmailVerificationClient from '../EmailVerificationClient';\n\n// Mock next/navigation\njest.mock('next/navigation', () => ({\n  useRouter: jest.fn(),\n}));\n\n// Mock fetch\nglobal.fetch = jest.fn();\n\ndescribe('EmailVerificationClient', () => {\n  const mockPush = jest.fn();\n  const mockRefresh = jest.fn();\n  const mockFetch = global.fetch as jest.MockedFunction<typeof fetch>;\n\n  beforeEach(() => {\n    (useRouter as jest.Mock).mockReturnValue({\n      push: mockPush,\n      refresh: mockRefresh,\n    });\n    mockFetch.mockClear();\n    mockPush.mockClear();\n    mockRefresh.mockClear();\n    jest.clearAllTimers();\n    jest.useFakeTimers();\n  });\n\n  afterEach(() => {\n    jest.runOnlyPendingTimers();\n    jest.useRealTimers();\n  });\n\n  it('renders the verification form correctly', () => {\n    render(<EmailVerificationClient email=\"test@example.com\" />);\n    \n    expect(screen.getByText('Enter verification code')).toBeInTheDocument();\n    expect(screen.getByText(/We've sent a 6-digit code to your email/)).toBeInTheDocument();\n    expect(screen.getByRole('button', { name: /verify email/i })).toBeInTheDocument();\n    expect(screen.getByText(\"Didn't receive the code? Resend it\")).toBeInTheDocument();\n  });\n\n  it('auto-submits when 6-digit code is entered', async () => {\n    const user = userEvent.setup({ advanceTimers: jest.advanceTimersByTime });\n    \n    mockFetch.mockResolvedValueOnce({\n      ok: true,\n      json: async () => ({ success: true }),\n    } as Response);\n\n    render(<EmailVerificationClient email=\"test@example.com\" />);\n    \n    const inputs = screen.getAllByRole('textbox');\n    \n    // Enter 6 digits\n    await act(async () => {\n      await user.type(inputs[0], '1');\n      await user.type(inputs[1], '2');\n      await user.type(inputs[2], '3');\n      await user.type(inputs[3], '4');\n      await user.type(inputs[4], '5');\n      await user.type(inputs[5], '6');\n    });\n\n    // Wait for auto-submit\n    await waitFor(() => {\n      expect(mockFetch).toHaveBeenCalledWith('/api/auth/verify-email', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          email: 'test@example.com',\n          code: '123456',\n        }),\n      });\n    });\n  });\n\n  it('shows success state and redirects after successful verification', async () => {\n    const user = userEvent.setup({ advanceTimers: jest.advanceTimersByTime });\n    \n    mockFetch.mockResolvedValueOnce({\n      ok: true,\n      json: async () => ({ success: true }),\n    } as Response);\n\n    render(<EmailVerificationClient email=\"test@example.com\" />);\n    \n    const inputs = screen.getAllByRole('textbox');\n    \n    // Enter complete code\n    await act(async () => {\n      await user.type(inputs[0], '123456');\n    });\n\n    // Wait for success state\n    await waitFor(() => {\n      expect(screen.getByText('Email verified successfully! ðŸŽ‰')).toBeInTheDocument();\n      expect(screen.getByText(/Welcome to Fancy Planties/)).toBeInTheDocument();\n    });\n\n    // Fast-forward timer for redirect\n    act(() => {\n      jest.advanceTimersByTime(1500);\n    });\n\n    expect(mockPush).toHaveBeenCalledWith('/dashboard');\n    expect(mockRefresh).toHaveBeenCalled();\n  });\n\n  it('handles different error types correctly', async () => {\n    const user = userEvent.setup({ advanceTimers: jest.advanceTimersByTime });\n    \n    const errorCases = [\n      { error: 'CODE_EXPIRED', expectedMessage: 'This code has expired. Please request a new one.' },\n      { error: 'CODE_INVALID', expectedMessage: 'Invalid code. Please check and try again.' },\n      { error: 'TOO_MANY_ATTEMPTS', expectedMessage: 'Too many attempts. Please request a new code.' },\n      { error: 'ALREADY_VERIFIED', expectedMessage: 'Your email is already verified.' },\n    ];\n\n    for (const { error, expectedMessage } of errorCases) {\n      mockFetch.mockResolvedValueOnce({\n        ok: false,\n        json: async () => ({ error }),\n      } as Response);\n\n      const { rerender } = render(<EmailVerificationClient email=\"test@example.com\" />);\n      \n      const inputs = screen.getAllByRole('textbox');\n      \n      await act(async () => {\n        await user.type(inputs[0], '123456');\n      });\n\n      await waitFor(() => {\n        expect(screen.getByText(expectedMessage)).toBeInTheDocument();\n      });\n\n      // Clean up for next iteration\n      rerender(<div />);\n      mockFetch.mockClear();\n    }\n  });\n\n  it('handles network errors gracefully', async () => {\n    const user = userEvent.setup({ advanceTimers: jest.advanceTimersByTime });\n    \n    mockFetch.mockRejectedValueOnce(new Error('Network error'));\n\n    render(<EmailVerificationClient email=\"test@example.com\" />);\n    \n    const inputs = screen.getAllByRole('textbox');\n    \n    await act(async () => {\n      await user.type(inputs[0], '123456');\n    });\n\n    await waitFor(() => {\n      expect(screen.getByText('Network error. Please check your connection and try again.')).toBeInTheDocument();\n    });\n  });\n\n  it('handles resend functionality correctly', async () => {\n    const user = userEvent.setup({ advanceTimers: jest.advanceTimersByTime });\n    \n    mockFetch.mockResolvedValueOnce({\n      ok: true,\n      json: async () => ({ success: true, cooldownSeconds: 60 }),\n    } as Response);\n\n    render(<EmailVerificationClient email=\"test@example.com\" />);\n    \n    const resendButton = screen.getByText(\"Didn't receive the code? Resend it\");\n    \n    await act(async () => {\n      await user.click(resendButton);\n    });\n\n    expect(mockFetch).toHaveBeenCalledWith('/api/auth/resend-verification', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        email: 'test@example.com',\n      }),\n    });\n\n    // Should show cooldown\n    await waitFor(() => {\n      expect(screen.getByText(/Resend code in 60s/)).toBeInTheDocument();\n    });\n  });\n\n  it('shows cooldown timer correctly', async () => {\n    const user = userEvent.setup({ advanceTimers: jest.advanceTimersByTime });\n    \n    mockFetch.mockResolvedValueOnce({\n      ok: true,\n      json: async () => ({ success: true, cooldownSeconds: 3 }),\n    } as Response);\n\n    render(<EmailVerificationClient email=\"test@example.com\" />);\n    \n    const resendButton = screen.getByText(\"Didn't receive the code? Resend it\");\n    \n    await act(async () => {\n      await user.click(resendButton);\n    });\n\n    // Should show initial cooldown\n    await waitFor(() => {\n      expect(screen.getByText(/Resend code in 3s/)).toBeInTheDocument();\n    });\n\n    // Advance timer by 1 second\n    act(() => {\n      jest.advanceTimersByTime(1000);\n    });\n\n    expect(screen.getByText(/Resend code in 2s/)).toBeInTheDocument();\n\n    // Advance timer by 2 more seconds\n    act(() => {\n      jest.advanceTimersByTime(2000);\n    });\n\n    expect(screen.getByText(\"Didn't receive the code? Resend it\")).toBeInTheDocument();\n  });\n\n  it('disables inputs and buttons during loading', async () => {\n    const user = userEvent.setup({ advanceTimers: jest.advanceTimersByTime });\n    \n    // Mock a slow response\n    mockFetch.mockImplementationOnce(() => \n      new Promise(resolve => setTimeout(() => resolve({\n        ok: true,\n        json: async () => ({ success: true }),\n      } as Response), 1000))\n    );\n\n    render(<EmailVerificationClient email=\"test@example.com\" />);\n    \n    const inputs = screen.getAllByRole('textbox');\n    const submitButton = screen.getByRole('button', { name: /verify email/i });\n    \n    // Enter code to trigger loading\n    await act(async () => {\n      await user.type(inputs[0], '123456');\n    });\n\n    // Should show loading state\n    await waitFor(() => {\n      expect(screen.getByText('Verifying...')).toBeInTheDocument();\n    });\n\n    // Inputs should be disabled\n    inputs.forEach(input => {\n      expect(input).toBeDisabled();\n    });\n\n    // Submit button should be disabled and show loading\n    expect(submitButton).toBeDisabled();\n  });\n\n  it('clears error when user starts typing', async () => {\n    const user = userEvent.setup({ advanceTimers: jest.advanceTimersByTime });\n    \n    mockFetch.mockResolvedValueOnce({\n      ok: false,\n      json: async () => ({ error: 'CODE_INVALID' }),\n    } as Response);\n\n    render(<EmailVerificationClient email=\"test@example.com\" />);\n    \n    const inputs = screen.getAllByRole('textbox');\n    \n    // Enter invalid code\n    await act(async () => {\n      await user.type(inputs[0], '123456');\n    });\n\n    // Should show error\n    await waitFor(() => {\n      expect(screen.getByText('Invalid code. Please check and try again.')).toBeInTheDocument();\n    });\n\n    // Start typing new code\n    await act(async () => {\n      await user.clear(inputs[0]);\n      await user.type(inputs[0], '1');\n    });\n\n    // Error should be cleared\n    expect(screen.queryByText('Invalid code. Please check and try again.')).not.toBeInTheDocument();\n  });\n\n  it('handles manual form submission with incomplete code', async () => {\n    const user = userEvent.setup({ advanceTimers: jest.advanceTimersByTime });\n\n    render(<EmailVerificationClient email=\"test@example.com\" />);\n    \n    const inputs = screen.getAllByRole('textbox');\n    const submitButton = screen.getByRole('button', { name: /verify email/i });\n    \n    // Enter incomplete code (5 digits)\n    await act(async () => {\n      await user.type(inputs[0], '1');\n      await user.type(inputs[1], '2');\n      await user.type(inputs[2], '3');\n      await user.type(inputs[3], '4');\n      await user.type(inputs[4], '5');\n    });\n\n    // Manually click submit with incomplete code\n    await act(async () => {\n      await user.click(submitButton);\n    });\n\n    // Should show error for incomplete code\n    await waitFor(() => {\n      expect(screen.getByText('Please enter a 6-digit code')).toBeInTheDocument();\n    });\n  });\n\n  it('has proper accessibility attributes', () => {\n    render(<EmailVerificationClient email=\"test@example.com\" />);\n    \n    // Check for proper headings\n    expect(screen.getByRole('heading', { name: /enter verification code/i })).toBeInTheDocument();\n    \n    // Check for form\n    expect(screen.getByRole('form')).toBeInTheDocument();\n    \n    // Check for buttons\n    expect(screen.getByRole('button', { name: /verify email/i })).toBeInTheDocument();\n    \n    // Check for proper text content\n    expect(screen.getByText(/We've sent a 6-digit code to your email/)).toBeInTheDocument();\n  });\n});"],"names":["jest","mock","useRouter","fn","global","fetch","describe","mockPush","mockRefresh","mockFetch","beforeEach","mockReturnValue","push","refresh","mockClear","clearAllTimers","useFakeTimers","afterEach","runOnlyPendingTimers","useRealTimers","it","render","EmailVerificationClient","email","expect","screen","getByText","toBeInTheDocument","getByRole","name","user","userEvent","setup","advanceTimers","advanceTimersByTime","mockResolvedValueOnce","ok","json","success","inputs","getAllByRole","act","type","waitFor","toHaveBeenCalledWith","method","headers","body","JSON","stringify","code","toHaveBeenCalled","errorCases","error","expectedMessage","rerender","div","mockRejectedValueOnce","Error","cooldownSeconds","resendButton","click","mockImplementationOnce","Promise","resolve","setTimeout","submitButton","forEach","input","toBeDisabled","clear","queryByText","not"],"mappings":"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"}