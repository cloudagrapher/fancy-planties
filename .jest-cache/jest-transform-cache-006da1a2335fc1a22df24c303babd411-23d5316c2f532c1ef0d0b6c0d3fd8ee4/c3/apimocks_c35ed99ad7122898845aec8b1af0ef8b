ffc48ed57a9dcaa58af745fc615e8a09
// API mocking utilities
/**
 * Mock API endpoints for the plant tracker application
 */ /**
 * Mock authentication API endpoints
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get applyAPIErrorMocks () {
        return applyAPIErrorMocks;
    },
    get applyAllAPIMocks () {
        return applyAllAPIMocks;
    },
    get getAllAPIMocks () {
        return getAllAPIMocks;
    },
    get mockAPIErrors () {
        return mockAPIErrors;
    },
    get mockAuthAPI () {
        return mockAuthAPI;
    },
    get mockCareAPI () {
        return mockCareAPI;
    },
    get mockImportAPI () {
        return mockImportAPI;
    },
    get mockPlantAPI () {
        return mockPlantAPI;
    },
    get mockPropagationAPI () {
        return mockPropagationAPI;
    },
    get mockSearchAPI () {
        return mockSearchAPI;
    },
    get mockUserAPI () {
        return mockUserAPI;
    }
});
const mockAuthAPI = ()=>{
    const authResponses = {
        'POST /api/auth/signin': {
            success: true,
            user: {
                id: 1,
                email: 'test@example.com',
                name: 'Test User',
                isCurator: false
            },
            session: {
                id: 'mock-session-id',
                userId: 1,
                expiresAt: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000)
            }
        },
        'POST /api/auth/signup': {
            success: true,
            user: {
                id: 2,
                email: 'newuser@example.com',
                name: 'New User',
                isCurator: false
            },
            session: {
                id: 'mock-session-id-2',
                userId: 2,
                expiresAt: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000)
            }
        },
        'POST /api/auth/logout': {
            success: true,
            message: 'Logged out successfully'
        },
        'GET /api/auth/me': {
            success: true,
            user: {
                id: 1,
                email: 'test@example.com',
                name: 'Test User',
                isCurator: false
            }
        }
    };
    return authResponses;
};
const mockPlantAPI = ()=>{
    const plantResponses = {
        'GET /api/plants': {
            success: true,
            data: [
                {
                    id: 1,
                    family: 'Araceae',
                    genus: 'Monstera',
                    species: 'deliciosa',
                    commonName: 'Swiss Cheese Plant',
                    isVerified: true
                },
                {
                    id: 2,
                    family: 'Ficus',
                    genus: 'Ficus',
                    species: 'elastica',
                    commonName: 'Rubber Plant',
                    isVerified: true
                }
            ],
            pagination: {
                page: 1,
                limit: 10,
                total: 2,
                totalPages: 1
            }
        },
        'GET /api/plant-instances': {
            success: true,
            data: [
                {
                    id: 1,
                    userId: 1,
                    plantId: 1,
                    nickname: 'My Monstera',
                    location: 'Living Room',
                    fertilizerSchedule: 'monthly',
                    isActive: true,
                    plant: {
                        id: 1,
                        commonName: 'Swiss Cheese Plant',
                        family: 'Araceae'
                    }
                }
            ]
        },
        'POST /api/plant-instances': {
            success: true,
            data: {
                id: 3,
                userId: 1,
                plantId: 1,
                nickname: 'New Plant',
                location: 'Bedroom',
                fertilizerSchedule: 'weekly',
                isActive: true
            }
        },
        'PUT /api/plant-instances/1': {
            success: true,
            data: {
                id: 1,
                userId: 1,
                plantId: 1,
                nickname: 'Updated Monstera',
                location: 'Kitchen',
                fertilizerSchedule: 'bi-weekly',
                isActive: true
            }
        },
        'DELETE /api/plant-instances/1': {
            success: true,
            message: 'Plant instance deleted successfully'
        }
    };
    return plantResponses;
};
const mockCareAPI = ()=>{
    const careResponses = {
        'GET /api/care': {
            success: true,
            data: [
                {
                    id: 1,
                    userId: 1,
                    plantInstanceId: 1,
                    careType: 'water',
                    careDate: new Date().toISOString(),
                    notes: 'Watered thoroughly'
                },
                {
                    id: 2,
                    userId: 1,
                    plantInstanceId: 1,
                    careType: 'fertilizer',
                    careDate: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString(),
                    notes: 'Applied liquid fertilizer',
                    fertilizerType: 'Balanced liquid fertilizer'
                }
            ]
        },
        'POST /api/care': {
            success: true,
            data: {
                id: 3,
                userId: 1,
                plantInstanceId: 1,
                careType: 'water',
                careDate: new Date().toISOString(),
                notes: 'New care record'
            }
        },
        'GET /api/dashboard': {
            success: true,
            data: {
                totalPlants: 5,
                activePlants: 4,
                careTasksDue: 2,
                recentCareEvents: 8,
                careStatistics: {
                    thisWeek: 3,
                    thisMonth: 12,
                    totalCareEvents: 45
                },
                upcomingTasks: [
                    {
                        id: 1,
                        plantInstanceId: 1,
                        plantNickname: 'My Monstera',
                        taskType: 'fertilizer',
                        dueDate: new Date(Date.now() + 2 * 24 * 60 * 60 * 1000).toISOString(),
                        isOverdue: false
                    }
                ]
            }
        }
    };
    return careResponses;
};
const mockPropagationAPI = ()=>{
    const propagationResponses = {
        'GET /api/propagations': {
            success: true,
            data: [
                {
                    id: 1,
                    userId: 1,
                    plantId: 1,
                    parentInstanceId: 1,
                    nickname: 'Monstera Cutting',
                    location: 'Propagation Station',
                    status: 'rooting',
                    sourceType: 'internal',
                    dateStarted: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString()
                }
            ]
        },
        'POST /api/propagations': {
            success: true,
            data: {
                id: 2,
                userId: 1,
                plantId: 1,
                nickname: 'New Cutting',
                location: 'Windowsill',
                status: 'started',
                sourceType: 'internal',
                dateStarted: new Date().toISOString()
            }
        },
        'PUT /api/propagations/1': {
            success: true,
            data: {
                id: 1,
                userId: 1,
                plantId: 1,
                nickname: 'Updated Cutting',
                status: 'planted'
            }
        }
    };
    return propagationResponses;
};
const mockSearchAPI = ()=>{
    const searchResponses = {
        'GET /api/search': {
            success: true,
            data: {
                plants: [
                    {
                        id: 1,
                        commonName: 'Swiss Cheese Plant',
                        family: 'Araceae',
                        genus: 'Monstera',
                        species: 'deliciosa'
                    }
                ],
                plantInstances: [
                    {
                        id: 1,
                        nickname: 'My Monstera',
                        location: 'Living Room',
                        plant: {
                            commonName: 'Swiss Cheese Plant'
                        }
                    }
                ],
                careRecords: [
                    {
                        id: 1,
                        careType: 'water',
                        careDate: new Date().toISOString(),
                        plantInstance: {
                            nickname: 'My Monstera'
                        }
                    }
                ]
            }
        }
    };
    return searchResponses;
};
const mockImportAPI = ()=>{
    const importResponses = {
        'POST /api/import/csv': {
            success: true,
            data: {
                importId: 'import-123',
                status: 'processing',
                totalRows: 10,
                processedRows: 0,
                errors: []
            }
        },
        'GET /api/import/status/import-123': {
            success: true,
            data: {
                importId: 'import-123',
                status: 'completed',
                totalRows: 10,
                processedRows: 10,
                successfulRows: 9,
                errors: [
                    {
                        row: 5,
                        error: 'Invalid plant species',
                        data: {
                            commonName: 'Unknown Plant'
                        }
                    }
                ]
            }
        },
        'GET /api/import/history': {
            success: true,
            data: [
                {
                    id: 'import-123',
                    fileName: 'plants.csv',
                    status: 'completed',
                    totalRows: 10,
                    successfulRows: 9,
                    createdAt: new Date().toISOString()
                }
            ]
        }
    };
    return importResponses;
};
const mockUserAPI = ()=>{
    const userResponses = {
        'GET /api/user/profile': {
            success: true,
            data: {
                id: 1,
                email: 'test@example.com',
                name: 'Test User',
                isCurator: false,
                isEmailVerified: true,
                createdAt: new Date().toISOString()
            }
        },
        'PUT /api/user/profile': {
            success: true,
            data: {
                id: 1,
                email: 'test@example.com',
                name: 'Updated User',
                isCurator: false,
                isEmailVerified: true
            }
        },
        'POST /api/user/change-password': {
            success: true,
            message: 'Password changed successfully'
        }
    };
    return userResponses;
};
const getAllAPIMocks = ()=>{
    return {
        ...mockAuthAPI(),
        ...mockPlantAPI(),
        ...mockCareAPI(),
        ...mockPropagationAPI(),
        ...mockSearchAPI(),
        ...mockImportAPI(),
        ...mockUserAPI()
    };
};
const mockAPIErrors = ()=>{
    return {
        'POST /api/auth/signin': {
            status: 401,
            success: false,
            error: 'Invalid credentials'
        },
        'POST /api/auth/signup': {
            status: 409,
            success: false,
            error: 'User already exists'
        },
        'GET /api/plant-instances': {
            status: 401,
            success: false,
            error: 'Authentication required'
        },
        'POST /api/plant-instances': {
            status: 400,
            success: false,
            error: 'Validation failed',
            details: [
                {
                    field: 'nickname',
                    message: 'Nickname is required'
                }
            ]
        }
    };
};
const applyAllAPIMocks = (customResponses = {})=>{
    const { mockApiResponse } = require('../helpers/api-helpers');
    const allResponses = {
        ...getAllAPIMocks(),
        ...customResponses
    };
    mockApiResponse(allResponses);
    return allResponses;
};
const applyAPIErrorMocks = (customErrors = {})=>{
    const { mockApiResponse } = require('../helpers/api-helpers');
    const allErrors = {
        ...mockAPIErrors(),
        ...customErrors
    };
    mockApiResponse(allErrors);
    return allErrors;
};

//# sourceMappingURL=data:application/json;base64,