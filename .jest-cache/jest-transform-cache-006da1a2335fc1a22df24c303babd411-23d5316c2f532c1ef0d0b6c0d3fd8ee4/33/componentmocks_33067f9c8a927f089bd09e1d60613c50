197e9001f452b9b070659874a8195360
// Component mocking utilities
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get applyCommonMocks () {
        return applyCommonMocks;
    },
    get careComponentMocks () {
        return careComponentMocks;
    },
    get commonComponentMocks () {
        return commonComponentMocks;
    },
    get createMockComponent () {
        return createMockComponent;
    },
    get createTrackingMockComponent () {
        return createTrackingMockComponent;
    },
    get mockComponent () {
        return mockComponent;
    },
    get mockComponents () {
        return mockComponents;
    },
    get navigationComponentMocks () {
        return navigationComponentMocks;
    },
    get plantComponentMocks () {
        return plantComponentMocks;
    },
    get resetComponentMocks () {
        return resetComponentMocks;
    },
    get selectiveMocks () {
        return selectiveMocks;
    }
});
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const createMockComponent = (displayName, defaultProps = {})=>{
    const MockComponent = ({ children, ...props })=>{
        const mergedProps = {
            ...defaultProps,
            ...props
        };
        return /*#__PURE__*/ _react.default.createElement('div', {
            'data-testid': `mock-${displayName.toLowerCase()}`,
            'data-component': displayName,
            ...mergedProps
        }, children);
    };
    MockComponent.displayName = `Mock${displayName}`;
    return MockComponent;
};
const createTrackingMockComponent = (displayName, options = {})=>{
    const { defaultProps = {}, renderContent = null } = options;
    const calls = [];
    const MockComponent = ({ children, ...props })=>{
        const mergedProps = {
            ...defaultProps,
            ...props
        };
        // Track this call
        calls.push({
            props: mergedProps,
            children,
            timestamp: new Date()
        });
        // Custom render content or default
        const content = renderContent ? renderContent(mergedProps, children) : children;
        return /*#__PURE__*/ _react.default.createElement('div', {
            'data-testid': `mock-${displayName.toLowerCase()}`,
            'data-component': displayName,
            'data-call-count': calls.length
        }, content);
    };
    MockComponent.displayName = `Mock${displayName}`;
    MockComponent.getCalls = ()=>calls;
    MockComponent.getLastCall = ()=>calls[calls.length - 1];
    MockComponent.getCallCount = ()=>calls.length;
    MockComponent.clearCalls = ()=>calls.length = 0;
    return MockComponent;
};
const mockComponent = (modulePath, componentName, mockImplementation = null)=>{
    let mockImpl;
    if (typeof mockImplementation === 'function') {
        mockImpl = mockImplementation;
    } else if (mockImplementation && typeof mockImplementation === 'object') {
        mockImpl = createMockComponent(componentName, mockImplementation);
    } else {
        mockImpl = createMockComponent(componentName);
    }
    jest.doMock(modulePath, ()=>({
            ...jest.requireActual(modulePath),
            [componentName]: mockImpl,
            default: mockImpl
        }));
    return mockImpl;
};
const mockComponents = (modulePath, componentMocks)=>{
    const mocks = {};
    for (const [componentName, mockImpl] of Object.entries(componentMocks)){
        if (typeof mockImpl === 'function') {
            mocks[componentName] = mockImpl;
        } else {
            mocks[componentName] = createMockComponent(componentName, mockImpl);
        }
    }
    jest.doMock(modulePath, ()=>({
            ...jest.requireActual(modulePath),
            ...mocks
        }));
    return mocks;
};
const commonComponentMocks = {
    /**
   * Mock LoadingSpinner component
   */ LoadingSpinner: createMockComponent('LoadingSpinner', {
        'aria-label': 'Loading',
        role: 'progressbar'
    }),
    /**
   * Mock Modal component
   */ Modal: createTrackingMockComponent('Modal', {
        defaultProps: {
            isOpen: false
        },
        renderContent: (props, children)=>{
            if (!props.isOpen) return null;
            return /*#__PURE__*/ _react.default.createElement('div', {
                role: 'dialog',
                'aria-modal': 'true',
                'data-modal-title': props.title
            }, children);
        }
    }),
    /**
   * Mock ErrorDisplay component
   */ ErrorDisplay: createMockComponent('ErrorDisplay', {
        role: 'alert',
        'aria-live': 'polite'
    }),
    /**
   * Mock AsyncButton component
   */ AsyncButton: createTrackingMockComponent('AsyncButton', {
        renderContent: (props, children)=>{
            return /*#__PURE__*/ _react.default.createElement('button', {
                type: props.type || 'button',
                disabled: props.loading || props.disabled,
                'data-loading': props.loading,
                onClick: props.onClick
            }, props.loading ? 'Loading...' : children);
        }
    }),
    /**
   * Mock ImageUpload component
   */ ImageUpload: createTrackingMockComponent('ImageUpload', {
        renderContent: (props)=>{
            return /*#__PURE__*/ _react.default.createElement('div', {
                'data-testid': 'image-upload',
                'data-accept': props.accept,
                'data-multiple': props.multiple
            }, /*#__PURE__*/ _react.default.createElement('input', {
                type: 'file',
                accept: props.accept,
                multiple: props.multiple,
                onChange: props.onUpload
            }), 'Upload Images');
        }
    }),
    /**
   * Mock OptimizedImage component
   */ OptimizedImage: createMockComponent('OptimizedImage', {
        renderContent: (props)=>{
            return /*#__PURE__*/ _react.default.createElement('img', {
                src: props.src,
                alt: props.alt,
                width: props.width,
                height: props.height,
                'data-optimized': true
            });
        }
    })
};
const plantComponentMocks = {
    /**
   * Mock PlantCard component
   */ PlantCard: createTrackingMockComponent('PlantCard', {
        renderContent: (props)=>{
            return /*#__PURE__*/ _react.default.createElement('div', {
                'data-testid': 'plant-card',
                'data-plant-id': props.plant?.id,
                onClick: props.onClick
            }, /*#__PURE__*/ _react.default.createElement('h3', null, props.plant?.nickname || props.plant?.commonName), /*#__PURE__*/ _react.default.createElement('p', null, props.plant?.location), props.showCareStatus && /*#__PURE__*/ _react.default.createElement('div', {
                'data-testid': 'care-status'
            }, 'Care Status'));
        }
    }),
    /**
   * Mock PlantInstanceForm component
   */ PlantInstanceForm: createTrackingMockComponent('PlantInstanceForm', {
        renderContent: (props)=>{
            return /*#__PURE__*/ _react.default.createElement('form', {
                'data-testid': 'plant-instance-form',
                onSubmit: props.onSubmit
            }, /*#__PURE__*/ _react.default.createElement('input', {
                name: 'nickname',
                placeholder: 'Plant nickname',
                defaultValue: props.initialData?.nickname
            }), /*#__PURE__*/ _react.default.createElement('input', {
                name: 'location',
                placeholder: 'Location',
                defaultValue: props.initialData?.location
            }), /*#__PURE__*/ _react.default.createElement('button', {
                type: 'submit'
            }, 'Save Plant'));
        }
    }),
    /**
   * Mock PlantSelector component
   */ PlantSelector: createTrackingMockComponent('PlantSelector', {
        renderContent: (props)=>{
            return /*#__PURE__*/ _react.default.createElement('div', {
                'data-testid': 'plant-selector',
                'data-selected': props.selectedPlant?.id
            }, /*#__PURE__*/ _react.default.createElement('input', {
                type: 'text',
                placeholder: 'Search plants...',
                onChange: props.onSearch
            }), /*#__PURE__*/ _react.default.createElement('button', {
                onClick: ()=>props.onSelect?.(props.selectedPlant)
            }, 'Select Plant'));
        }
    }),
    /**
   * Mock PlantsGrid component
   */ PlantsGrid: createTrackingMockComponent('PlantsGrid', {
        renderContent: (props)=>{
            return /*#__PURE__*/ _react.default.createElement('div', {
                'data-testid': 'plants-grid',
                'data-plant-count': props.plants?.length || 0
            }, props.plants?.map((plant, index)=>/*#__PURE__*/ _react.default.createElement('div', {
                    key: plant.id || index,
                    'data-testid': 'grid-plant-item',
                    'data-plant-id': plant.id
                }, plant.nickname || plant.commonName)));
        }
    })
};
const careComponentMocks = {
    /**
   * Mock CareTaskCard component
   */ CareTaskCard: createTrackingMockComponent('CareTaskCard', {
        renderContent: (props)=>{
            return /*#__PURE__*/ _react.default.createElement('div', {
                'data-testid': 'care-task-card',
                'data-task-type': props.task?.type,
                'data-overdue': props.task?.isOverdue
            }, /*#__PURE__*/ _react.default.createElement('h4', null, props.task?.title), /*#__PURE__*/ _react.default.createElement('p', null, props.task?.description), /*#__PURE__*/ _react.default.createElement('button', {
                onClick: props.onComplete
            }, 'Mark Complete'));
        }
    }),
    /**
   * Mock QuickCareForm component
   */ QuickCareForm: createTrackingMockComponent('QuickCareForm', {
        renderContent: (props)=>{
            return /*#__PURE__*/ _react.default.createElement('form', {
                'data-testid': 'quick-care-form',
                onSubmit: props.onSubmit
            }, /*#__PURE__*/ _react.default.createElement('select', {
                name: 'careType',
                defaultValue: props.defaultCareType
            }), /*#__PURE__*/ _react.default.createElement('textarea', {
                name: 'notes',
                placeholder: 'Care notes...'
            }), /*#__PURE__*/ _react.default.createElement('button', {
                type: 'submit'
            }, 'Log Care'));
        }
    }),
    /**
   * Mock CareHistoryTimeline component
   */ CareHistoryTimeline: createTrackingMockComponent('CareHistoryTimeline', {
        renderContent: (props)=>{
            return /*#__PURE__*/ _react.default.createElement('div', {
                'data-testid': 'care-history-timeline',
                'data-record-count': props.careRecords?.length || 0
            }, props.careRecords?.map((record, index)=>/*#__PURE__*/ _react.default.createElement('div', {
                    key: record.id || index,
                    'data-testid': 'timeline-item',
                    'data-care-type': record.careType
                }, `${record.careType} - ${record.careDate}`)));
        }
    })
};
const navigationComponentMocks = {
    /**
   * Mock BottomNavigation component
   */ BottomNavigation: createTrackingMockComponent('BottomNavigation', {
        renderContent: (props)=>{
            return /*#__PURE__*/ _react.default.createElement('nav', {
                'data-testid': 'bottom-navigation',
                'data-active-route': props.activeRoute
            }, /*#__PURE__*/ _react.default.createElement('a', {
                href: '/dashboard'
            }, 'Dashboard'), /*#__PURE__*/ _react.default.createElement('a', {
                href: '/plants'
            }, 'Plants'), /*#__PURE__*/ _react.default.createElement('a', {
                href: '/care'
            }, 'Care'), /*#__PURE__*/ _react.default.createElement('a', {
                href: '/profile'
            }, 'Profile'));
        }
    })
};
const applyCommonMocks = ()=>{
    // Mock shared components
    mockComponents('@/components/shared', commonComponentMocks);
    // Mock plant components
    mockComponents('@/components/plants', plantComponentMocks);
    // Mock care components
    mockComponents('@/components/care', careComponentMocks);
    // Mock navigation components
    mockComponents('@/components/navigation', navigationComponentMocks);
};
const selectiveMocks = {
    /**
   * Mock only loading and error components
   */ loadingAndError: ()=>{
        mockComponent('@/components/shared/LoadingSpinner', 'LoadingSpinner', commonComponentMocks.LoadingSpinner);
        mockComponent('@/components/shared/ErrorDisplay', 'ErrorDisplay', commonComponentMocks.ErrorDisplay);
    },
    /**
   * Mock only form components
   */ forms: ()=>{
        mockComponent('@/components/plants/PlantInstanceForm', 'PlantInstanceForm', plantComponentMocks.PlantInstanceForm);
        mockComponent('@/components/care/QuickCareForm', 'QuickCareForm', careComponentMocks.QuickCareForm);
        mockComponent('@/components/shared/AsyncButton', 'AsyncButton', commonComponentMocks.AsyncButton);
    },
    /**
   * Mock only display components (no interactive elements)
   */ display: ()=>{
        mockComponent('@/components/plants/PlantCard', 'PlantCard', plantComponentMocks.PlantCard);
        mockComponent('@/components/plants/PlantsGrid', 'PlantsGrid', plantComponentMocks.PlantsGrid);
        mockComponent('@/components/care/CareHistoryTimeline', 'CareHistoryTimeline', careComponentMocks.CareHistoryTimeline);
    },
    /**
   * Mock only navigation components
   */ navigation: ()=>{
        mockComponent('@/components/navigation/BottomNavigation', 'BottomNavigation', navigationComponentMocks.BottomNavigation);
    }
};
const resetComponentMocks = ()=>{
    jest.resetModules();
    jest.clearAllMocks();
    // Clear tracking data from mock components
    Object.values(commonComponentMocks).forEach((mock)=>{
        if (mock.clearCalls) mock.clearCalls();
    });
    Object.values(plantComponentMocks).forEach((mock)=>{
        if (mock.clearCalls) mock.clearCalls();
    });
    Object.values(careComponentMocks).forEach((mock)=>{
        if (mock.clearCalls) mock.clearCalls();
    });
    Object.values(navigationComponentMocks).forEach((mock)=>{
        if (mock.clearCalls) mock.clearCalls();
    });
};

//# sourceMappingURL=data:application/json;base64,