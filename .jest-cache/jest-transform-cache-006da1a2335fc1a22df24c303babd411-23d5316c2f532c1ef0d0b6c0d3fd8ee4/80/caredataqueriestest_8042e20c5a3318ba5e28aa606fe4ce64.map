{"version":3,"sources":["/Users/stefanbekker/projects/fancy-planties/src/__tests__/database/care-data-queries.test.js"],"sourcesContent":["/**\n * Care Data Database Query Tests\n * Tests care record creation, retrieval, care history aggregation, and statistics\n */\n\nimport { CareHistoryQueries } from '../../lib/db/queries/care-history';\nimport { PlantQueries } from '../../lib/db/queries/plants';\nimport { PlantInstanceQueries } from '../../lib/db/queries/plant-instances';\nimport { createDatabaseTestManager } from '../../test-utils/setup/database-test-manager';\nimport { \n  createTestCareRecord,\n  createTestFertilizerRecord,\n  createTestWateringRecord,\n  createTestRepottingRecord,\n  createTestCareHistory,\n  createRealisticCareSchedule,\n  resetCareCounter\n} from '../../test-utils/factories/care-factory';\nimport { createTestUser } from '../../test-utils/factories/user-factory';\nimport { createTestPlant, createTestPlantInstance } from '../../test-utils/factories/plant-factory';\n\ndescribe('Care Data Database Queries', () => {\n  let dbManager;\n\n  beforeEach(() => {\n    dbManager = createDatabaseTestManager();\n    resetCareCounter();\n  });\n\n  afterEach(async () => {\n    await dbManager.cleanup();\n  });\n\n  describe('Care Record CRUD Operations', () => {\n    test('should create a new care record', async () => {\n      const testUser = createTestUser();\n      const createdUser = await dbManager.createTestUser(testUser);\n\n      const plant = createTestPlant({ createdBy: createdUser.id });\n      const createdPlant = await PlantQueries.create(plant);\n\n      const plantInstance = createTestPlantInstance({\n        userId: createdUser.id,\n        plantId: createdPlant.id,\n      });\n      const createdInstance = await PlantInstanceQueries.create(plantInstance);\n\n      const careData = {\n        userId: createdUser.id,\n        plantInstanceId: createdInstance.id,\n        careType: 'fertilizer',\n        careDate: new Date(),\n        notes: 'Applied balanced liquid fertilizer',\n        fertilizerType: 'Balanced liquid fertilizer (10-10-10)',\n        images: [],\n      };\n\n      const careRecord = await CareHistoryQueries.createCareHistory(careData);\n\n      expect(careRecord).toBeDefined();\n      expect(careRecord.id).toBeDefined();\n      expect(careRecord.userId).toBe(createdUser.id);\n      expect(careRecord.plantInstanceId).toBe(createdInstance.id);\n      expect(careRecord.careType).toBe('fertilizer');\n      expect(careRecord.notes).toBe('Applied balanced liquid fertilizer');\n      expect(careRecord.fertilizerType).toBe('Balanced liquid fertilizer (10-10-10)');\n      expect(careRecord.createdAt).toBeInstanceOf(Date);\n      expect(careRecord.updatedAt).toBeInstanceOf(Date);\n    });\n\n    test('should retrieve care record by ID', async () => {\n      const testUser = createTestUser();\n      const createdUser = await dbManager.createTestUser(testUser);\n\n      const plant = createTestPlant({ createdBy: createdUser.id });\n      const createdPlant = await PlantQueries.create(plant);\n\n      const plantInstance = createTestPlantInstance({\n        userId: createdUser.id,\n        plantId: createdPlant.id,\n      });\n      const createdInstance = await PlantInstanceQueries.create(plantInstance);\n\n      const careData = createTestCareRecord({\n        userId: createdUser.id,\n        plantInstanceId: createdInstance.id,\n      });\n\n      const createdCare = await CareHistoryQueries.createCareHistory(careData);\n      const foundCare = await CareHistoryQueries.getCareHistoryById(createdCare.id);\n\n      expect(foundCare).toBeDefined();\n      expect(foundCare.id).toBe(createdCare.id);\n      expect(foundCare.careType).toBe(createdCare.careType);\n      expect(foundCare.notes).toBe(createdCare.notes);\n    });\n\n    test('should return null for non-existent care record ID', async () => {\n      const careRecord = await CareHistoryQueries.getCareHistoryById(99999);\n      expect(careRecord).toBeNull();\n    });\n\n    test('should update care record', async () => {\n      const testUser = createTestUser();\n      const createdUser = await dbManager.createTestUser(testUser);\n\n      const plant = createTestPlant({ createdBy: createdUser.id });\n      const createdPlant = await PlantQueries.create(plant);\n\n      const plantInstance = createTestPlantInstance({\n        userId: createdUser.id,\n        plantId: createdPlant.id,\n      });\n      const createdInstance = await PlantInstanceQueries.create(plantInstance);\n\n      const careData = createTestCareRecord({\n        userId: createdUser.id,\n        plantInstanceId: createdInstance.id,\n      });\n\n      const createdCare = await CareHistoryQueries.createCareHistory(careData);\n\n      const updates = {\n        notes: 'Updated care notes',\n        fertilizerType: 'Updated fertilizer type',\n      };\n\n      const updatedCare = await CareHistoryQueries.updateCareHistory(\n        createdCare.id,\n        createdUser.id,\n        updates\n      );\n\n      expect(updatedCare).toBeDefined();\n      expect(updatedCare.notes).toBe('Updated care notes');\n      expect(updatedCare.fertilizerType).toBe('Updated fertilizer type');\n      expect(updatedCare.updatedAt.getTime()).toBeGreaterThan(createdCare.updatedAt.getTime());\n    });\n\n    test('should delete care record', async () => {\n      const testUser = createTestUser();\n      const createdUser = await dbManager.createTestUser(testUser);\n\n      const plant = createTestPlant({ createdBy: createdUser.id });\n      const createdPlant = await PlantQueries.create(plant);\n\n      const plantInstance = createTestPlantInstance({\n        userId: createdUser.id,\n        plantId: createdPlant.id,\n      });\n      const createdInstance = await PlantInstanceQueries.create(plantInstance);\n\n      const careData = createTestCareRecord({\n        userId: createdUser.id,\n        plantInstanceId: createdInstance.id,\n      });\n\n      const createdCare = await CareHistoryQueries.createCareHistory(careData);\n\n      const deleted = await CareHistoryQueries.deleteCareHistory(createdCare.id, createdUser.id);\n      expect(deleted).toBe(true);\n\n      const foundCare = await CareHistoryQueries.getCareHistoryById(createdCare.id);\n      expect(foundCare).toBeNull();\n    });\n  });\n\n  describe('Care History Retrieval and Filtering', () => {\n    test('should get care history for a specific plant instance', async () => {\n      const testUser = createTestUser();\n      const createdUser = await dbManager.createTestUser(testUser);\n\n      const plant = createTestPlant({ createdBy: createdUser.id });\n      const createdPlant = await PlantQueries.create(plant);\n\n      const plantInstance = createTestPlantInstance({\n        userId: createdUser.id,\n        plantId: createdPlant.id,\n      });\n      const createdInstance = await PlantInstanceQueries.create(plantInstance);\n\n      // Create multiple care records\n      const careRecords = [\n        createTestCareRecord({\n          userId: createdUser.id,\n          plantInstanceId: createdInstance.id,\n          careType: 'fertilizer',\n        }),\n        createTestCareRecord({\n          userId: createdUser.id,\n          plantInstanceId: createdInstance.id,\n          careType: 'water',\n        }),\n        createTestCareRecord({\n          userId: createdUser.id,\n          plantInstanceId: createdInstance.id,\n          careType: 'prune',\n        }),\n      ];\n\n      for (const care of careRecords) {\n        await CareHistoryQueries.createCareHistory(care);\n      }\n\n      const history = await CareHistoryQueries.getCareHistoryForPlant(\n        createdInstance.id,\n        createdUser.id\n      );\n\n      expect(history.length).toBe(3);\n      expect(history.every(h => h.plantInstanceId === createdInstance.id)).toBe(true);\n      expect(history.every(h => h.userId === createdUser.id)).toBe(true);\n    });\n\n    test('should filter care history by care type', async () => {\n      const testUser = createTestUser();\n      const createdUser = await dbManager.createTestUser(testUser);\n\n      const plant = createTestPlant({ createdBy: createdUser.id });\n      const createdPlant = await PlantQueries.create(plant);\n\n      const plantInstance = createTestPlantInstance({\n        userId: createdUser.id,\n        plantId: createdPlant.id,\n      });\n      const createdInstance = await PlantInstanceQueries.create(plantInstance);\n\n      // Create care records of different types\n      const fertilizerCare = createTestCareRecord({\n        userId: createdUser.id,\n        plantInstanceId: createdInstance.id,\n        careType: 'fertilizer',\n      });\n\n      const waterCare = createTestCareRecord({\n        userId: createdUser.id,\n        plantInstanceId: createdInstance.id,\n        careType: 'water',\n      });\n\n      await CareHistoryQueries.createCareHistory(fertilizerCare);\n      await CareHistoryQueries.createCareHistory(waterCare);\n\n      // Filter by fertilizer type\n      const fertilizerHistory = await CareHistoryQueries.getCareHistoryForPlant(\n        createdInstance.id,\n        createdUser.id,\n        { careType: 'fertilizer' }\n      );\n\n      expect(fertilizerHistory.length).toBe(1);\n      expect(fertilizerHistory[0].careType).toBe('fertilizer');\n    });\n\n    test('should filter care history by date range', async () => {\n      const testUser = createTestUser();\n      const createdUser = await dbManager.createTestUser(testUser);\n\n      const plant = createTestPlant({ createdBy: createdUser.id });\n      const createdPlant = await PlantQueries.create(plant);\n\n      const plantInstance = createTestPlantInstance({\n        userId: createdUser.id,\n        plantId: createdPlant.id,\n      });\n      const createdInstance = await PlantInstanceQueries.create(plantInstance);\n\n      const now = new Date();\n      const oneWeekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n      const twoWeeksAgo = new Date(now.getTime() - 14 * 24 * 60 * 60 * 1000);\n\n      // Create care records with different dates\n      const recentCare = createTestCareRecord({\n        userId: createdUser.id,\n        plantInstanceId: createdInstance.id,\n        careDate: now,\n      });\n\n      const oldCare = createTestCareRecord({\n        userId: createdUser.id,\n        plantInstanceId: createdInstance.id,\n        careDate: twoWeeksAgo,\n      });\n\n      await CareHistoryQueries.createCareHistory(recentCare);\n      await CareHistoryQueries.createCareHistory(oldCare);\n\n      // Filter by date range (last week)\n      const recentHistory = await CareHistoryQueries.getCareHistoryForPlant(\n        createdInstance.id,\n        createdUser.id,\n        { \n          startDate: oneWeekAgo,\n          endDate: now \n        }\n      );\n\n      expect(recentHistory.length).toBe(1);\n      expect(recentHistory[0].careDate.getTime()).toBeGreaterThanOrEqual(oneWeekAgo.getTime());\n    });\n\n    test('should get recent care history for user', async () => {\n      const testUser = createTestUser();\n      const createdUser = await dbManager.createTestUser(testUser);\n\n      const plant = createTestPlant({ createdBy: createdUser.id });\n      const createdPlant = await PlantQueries.create(plant);\n\n      // Create multiple plant instances\n      const instance1 = createTestPlantInstance({\n        userId: createdUser.id,\n        plantId: createdPlant.id,\n      });\n      const instance2 = createTestPlantInstance({\n        userId: createdUser.id,\n        plantId: createdPlant.id,\n      });\n\n      const createdInstance1 = await PlantInstanceQueries.create(instance1);\n      const createdInstance2 = await PlantInstanceQueries.create(instance2);\n\n      // Create care records for both instances\n      const care1 = createTestCareRecord({\n        userId: createdUser.id,\n        plantInstanceId: createdInstance1.id,\n      });\n\n      const care2 = createTestCareRecord({\n        userId: createdUser.id,\n        plantInstanceId: createdInstance2.id,\n      });\n\n      await CareHistoryQueries.createCareHistory(care1);\n      await CareHistoryQueries.createCareHistory(care2);\n\n      const recentHistory = await CareHistoryQueries.getRecentCareHistory(createdUser.id, 10);\n\n      expect(recentHistory.length).toBe(2);\n      expect(recentHistory.every(h => h.userId === createdUser.id)).toBe(true);\n      // Should be sorted by date (most recent first)\n      expect(recentHistory[0].careDate.getTime()).toBeGreaterThanOrEqual(recentHistory[1].careDate.getTime());\n    });\n  });\n\n  describe('Care Statistics and Aggregation', () => {\n    test('should get care history count for plant instance', async () => {\n      const testUser = createTestUser();\n      const createdUser = await dbManager.createTestUser(testUser);\n\n      const plant = createTestPlant({ createdBy: createdUser.id });\n      const createdPlant = await PlantQueries.create(plant);\n\n      const plantInstance = createTestPlantInstance({\n        userId: createdUser.id,\n        plantId: createdPlant.id,\n      });\n      const createdInstance = await PlantInstanceQueries.create(plantInstance);\n\n      // Create multiple care records\n      const careRecords = [\n        createTestCareRecord({\n          userId: createdUser.id,\n          plantInstanceId: createdInstance.id,\n          careType: 'fertilizer',\n        }),\n        createTestCareRecord({\n          userId: createdUser.id,\n          plantInstanceId: createdInstance.id,\n          careType: 'fertilizer',\n        }),\n        createTestCareRecord({\n          userId: createdUser.id,\n          plantInstanceId: createdInstance.id,\n          careType: 'water',\n        }),\n      ];\n\n      for (const care of careRecords) {\n        await CareHistoryQueries.createCareHistory(care);\n      }\n\n      // Get total count\n      const totalCount = await CareHistoryQueries.getCareHistoryCount(\n        createdInstance.id,\n        createdUser.id\n      );\n      expect(totalCount).toBe(3);\n\n      // Get count by care type\n      const fertilizerCount = await CareHistoryQueries.getCareHistoryCount(\n        createdInstance.id,\n        createdUser.id,\n        'fertilizer'\n      );\n      expect(fertilizerCount).toBe(2);\n\n      const waterCount = await CareHistoryQueries.getCareHistoryCount(\n        createdInstance.id,\n        createdUser.id,\n        'water'\n      );\n      expect(waterCount).toBe(1);\n    });\n\n    test('should get last care date for specific care type', async () => {\n      const testUser = createTestUser();\n      const createdUser = await dbManager.createTestUser(testUser);\n\n      const plant = createTestPlant({ createdBy: createdUser.id });\n      const createdPlant = await PlantQueries.create(plant);\n\n      const plantInstance = createTestPlantInstance({\n        userId: createdUser.id,\n        plantId: createdPlant.id,\n      });\n      const createdInstance = await PlantInstanceQueries.create(plantInstance);\n\n      const now = new Date();\n      const yesterday = new Date(now.getTime() - 24 * 60 * 60 * 1000);\n\n      // Create care records with different dates\n      const oldFertilizer = createTestCareRecord({\n        userId: createdUser.id,\n        plantInstanceId: createdInstance.id,\n        careType: 'fertilizer',\n        careDate: yesterday,\n      });\n\n      const recentFertilizer = createTestCareRecord({\n        userId: createdUser.id,\n        plantInstanceId: createdInstance.id,\n        careType: 'fertilizer',\n        careDate: now,\n      });\n\n      await CareHistoryQueries.createCareHistory(oldFertilizer);\n      await CareHistoryQueries.createCareHistory(recentFertilizer);\n\n      const lastFertilizerDate = await CareHistoryQueries.getLastCareDate(\n        createdInstance.id,\n        createdUser.id,\n        'fertilizer'\n      );\n\n      expect(lastFertilizerDate).toBeDefined();\n      expect(lastFertilizerDate.getTime()).toBe(now.getTime());\n    });\n\n    test('should return null for care type with no history', async () => {\n      const testUser = createTestUser();\n      const createdUser = await dbManager.createTestUser(testUser);\n\n      const plant = createTestPlant({ createdBy: createdUser.id });\n      const createdPlant = await PlantQueries.create(plant);\n\n      const plantInstance = createTestPlantInstance({\n        userId: createdUser.id,\n        plantId: createdPlant.id,\n      });\n      const createdInstance = await PlantInstanceQueries.create(plantInstance);\n\n      const lastRepotDate = await CareHistoryQueries.getLastCareDate(\n        createdInstance.id,\n        createdUser.id,\n        'repot'\n      );\n\n      expect(lastRepotDate).toBeNull();\n    });\n\n    test('should get care dashboard data for user', async () => {\n      const testUser = createTestUser();\n      const createdUser = await dbManager.createTestUser(testUser);\n\n      const plant = createTestPlant({ createdBy: createdUser.id });\n      const createdPlant = await PlantQueries.create(plant);\n\n      // Create plant instances with different care statuses\n      const overdueInstance = createTestPlantInstance({\n        userId: createdUser.id,\n        plantId: createdPlant.id,\n        fertilizerDue: new Date(Date.now() - 24 * 60 * 60 * 1000), // 1 day overdue\n        isActive: true,\n      });\n\n      const dueTodayInstance = createTestPlantInstance({\n        userId: createdUser.id,\n        plantId: createdPlant.id,\n        fertilizerDue: new Date(), // Due today\n        isActive: true,\n      });\n\n      const dueSoonInstance = createTestPlantInstance({\n        userId: createdUser.id,\n        plantId: createdPlant.id,\n        fertilizerDue: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000), // Due in 3 days\n        isActive: true,\n      });\n\n      await PlantInstanceQueries.create(overdueInstance);\n      await PlantInstanceQueries.create(dueTodayInstance);\n      await PlantInstanceQueries.create(dueSoonInstance);\n\n      const dashboardData = await CareHistoryQueries.getCareDashboardData(createdUser.id);\n\n      expect(dashboardData).toBeDefined();\n      expect(dashboardData.statistics).toBeDefined();\n      expect(dashboardData.statistics.totalActivePlants).toBe(3);\n      expect(dashboardData.overdue.length).toBeGreaterThanOrEqual(1);\n      expect(dashboardData.dueToday.length).toBeGreaterThanOrEqual(1);\n      expect(dashboardData.dueSoon.length).toBeGreaterThanOrEqual(1);\n    });\n  });\n\n  describe('Bulk Operations', () => {\n    test('should bulk create care history entries', async () => {\n      const testUser = createTestUser();\n      const createdUser = await dbManager.createTestUser(testUser);\n\n      const plant = createTestPlant({ createdBy: createdUser.id });\n      const createdPlant = await PlantQueries.create(plant);\n\n      const plantInstance = createTestPlantInstance({\n        userId: createdUser.id,\n        plantId: createdPlant.id,\n      });\n      const createdInstance = await PlantInstanceQueries.create(plantInstance);\n\n      const careEntries = [\n        {\n          userId: createdUser.id,\n          plantInstanceId: createdInstance.id,\n          careType: 'fertilizer',\n          careDate: new Date(),\n          notes: 'Bulk fertilizer 1',\n        },\n        {\n          userId: createdUser.id,\n          plantInstanceId: createdInstance.id,\n          careType: 'water',\n          careDate: new Date(),\n          notes: 'Bulk water 1',\n        },\n        {\n          userId: createdUser.id,\n          plantInstanceId: createdInstance.id,\n          careType: 'prune',\n          careDate: new Date(),\n          notes: 'Bulk prune 1',\n        },\n      ];\n\n      const createdEntries = await CareHistoryQueries.bulkCreateCareHistory(careEntries);\n\n      expect(createdEntries.length).toBe(3);\n      expect(createdEntries.every(entry => entry.id)).toBe(true);\n      expect(createdEntries.every(entry => entry.userId === createdUser.id)).toBe(true);\n    });\n\n    test('should handle empty bulk create gracefully', async () => {\n      const result = await CareHistoryQueries.bulkCreateCareHistory([]);\n      expect(result).toEqual([]);\n    });\n\n    test('should get care history for multiple plant instances', async () => {\n      const testUser = createTestUser();\n      const createdUser = await dbManager.createTestUser(testUser);\n\n      const plant = createTestPlant({ createdBy: createdUser.id });\n      const createdPlant = await PlantQueries.create(plant);\n\n      // Create multiple plant instances\n      const instance1 = createTestPlantInstance({\n        userId: createdUser.id,\n        plantId: createdPlant.id,\n      });\n      const instance2 = createTestPlantInstance({\n        userId: createdUser.id,\n        plantId: createdPlant.id,\n      });\n\n      const createdInstance1 = await PlantInstanceQueries.create(instance1);\n      const createdInstance2 = await PlantInstanceQueries.create(instance2);\n\n      // Create care records for both instances\n      const care1 = createTestCareRecord({\n        userId: createdUser.id,\n        plantInstanceId: createdInstance1.id,\n      });\n\n      const care2 = createTestCareRecord({\n        userId: createdUser.id,\n        plantInstanceId: createdInstance2.id,\n      });\n\n      await CareHistoryQueries.createCareHistory(care1);\n      await CareHistoryQueries.createCareHistory(care2);\n\n      const plantInstanceIds = [createdInstance1.id, createdInstance2.id];\n      const history = await CareHistoryQueries.getCareHistoryForPlants(\n        plantInstanceIds,\n        createdUser.id\n      );\n\n      expect(history.length).toBe(2);\n      expect(history.every(h => plantInstanceIds.includes(h.plantInstanceId))).toBe(true);\n    });\n  });\n\n  describe('Care Type Specific Operations', () => {\n    test('should create fertilizer care record with specific data', async () => {\n      const testUser = createTestUser();\n      const createdUser = await dbManager.createTestUser(testUser);\n\n      const plant = createTestPlant({ createdBy: createdUser.id });\n      const createdPlant = await PlantQueries.create(plant);\n\n      const plantInstance = createTestPlantInstance({\n        userId: createdUser.id,\n        plantId: createdPlant.id,\n      });\n      const createdInstance = await PlantInstanceQueries.create(plantInstance);\n\n      const fertilizerCare = {\n        userId: createdUser.id,\n        plantInstanceId: createdInstance.id,\n        careType: 'fertilizer',\n        careDate: new Date(),\n        notes: 'Applied balanced liquid fertilizer at half strength',\n        fertilizerType: 'Balanced liquid fertilizer (10-10-10)',\n        images: [],\n      };\n\n      const createdCare = await CareHistoryQueries.createCareHistory(fertilizerCare);\n\n      expect(createdCare.careType).toBe('fertilizer');\n      expect(createdCare.fertilizerType).toBe('Balanced liquid fertilizer (10-10-10)');\n      expect(createdCare.potSize).toBeNull();\n      expect(createdCare.soilType).toBeNull();\n    });\n\n    test('should create repotting care record with specific data', async () => {\n      const testUser = createTestUser();\n      const createdUser = await dbManager.createTestUser(testUser);\n\n      const plant = createTestPlant({ createdBy: createdUser.id });\n      const createdPlant = await PlantQueries.create(plant);\n\n      const plantInstance = createTestPlantInstance({\n        userId: createdUser.id,\n        plantId: createdPlant.id,\n      });\n      const createdInstance = await PlantInstanceQueries.create(plantInstance);\n\n      const repotCare = {\n        userId: createdUser.id,\n        plantInstanceId: createdInstance.id,\n        careType: 'repot',\n        careDate: new Date(),\n        notes: 'Repotted into larger container with fresh soil',\n        potSize: '8 inch',\n        soilType: 'Standard potting mix',\n        images: [],\n      };\n\n      const createdCare = await CareHistoryQueries.createCareHistory(repotCare);\n\n      expect(createdCare.careType).toBe('repot');\n      expect(createdCare.potSize).toBe('8 inch');\n      expect(createdCare.soilType).toBe('Standard potting mix');\n      expect(createdCare.fertilizerType).toBeNull();\n    });\n\n    test('should create water care record', async () => {\n      const testUser = createTestUser();\n      const createdUser = await dbManager.createTestUser(testUser);\n\n      const plant = createTestPlant({ createdBy: createdUser.id });\n      const createdPlant = await PlantQueries.create(plant);\n\n      const plantInstance = createTestPlantInstance({\n        userId: createdUser.id,\n        plantId: createdPlant.id,\n      });\n      const createdInstance = await PlantInstanceQueries.create(plantInstance);\n\n      const waterCare = {\n        userId: createdUser.id,\n        plantInstanceId: createdInstance.id,\n        careType: 'water',\n        careDate: new Date(),\n        notes: 'Watered thoroughly until water drained from bottom',\n        images: [],\n      };\n\n      const createdCare = await CareHistoryQueries.createCareHistory(waterCare);\n\n      expect(createdCare.careType).toBe('water');\n      expect(createdCare.notes).toBe('Watered thoroughly until water drained from bottom');\n      expect(createdCare.fertilizerType).toBeNull();\n      expect(createdCare.potSize).toBeNull();\n      expect(createdCare.soilType).toBeNull();\n    });\n  });\n\n  describe('Error Handling and Edge Cases', () => {\n    test('should handle non-existent plant instance in care operations', async () => {\n      const testUser = createTestUser();\n      const createdUser = await dbManager.createTestUser(testUser);\n\n      const careData = createTestCareRecord({\n        userId: createdUser.id,\n        plantInstanceId: 99999, // Non-existent\n      });\n\n      // Should not crash, but may fail due to foreign key constraint\n      await expect(CareHistoryQueries.createCareHistory(careData))\n        .rejects.toThrow();\n    });\n\n    test('should handle unauthorized care record access', async () => {\n      const testUser1 = createTestUser({ email: 'user1@example.com' });\n      const testUser2 = createTestUser({ email: 'user2@example.com' });\n      const createdUser1 = await dbManager.createTestUser(testUser1);\n      const createdUser2 = await dbManager.createTestUser(testUser2);\n\n      const plant = createTestPlant({ createdBy: createdUser1.id });\n      const createdPlant = await PlantQueries.create(plant);\n\n      const plantInstance = createTestPlantInstance({\n        userId: createdUser1.id,\n        plantId: createdPlant.id,\n      });\n      const createdInstance = await PlantInstanceQueries.create(plantInstance);\n\n      const careData = createTestCareRecord({\n        userId: createdUser1.id,\n        plantInstanceId: createdInstance.id,\n      });\n\n      const createdCare = await CareHistoryQueries.createCareHistory(careData);\n\n      // User 2 should not be able to update User 1's care record\n      const updatedCare = await CareHistoryQueries.updateCareHistory(\n        createdCare.id,\n        createdUser2.id, // Different user\n        { notes: 'Unauthorized update' }\n      );\n\n      expect(updatedCare).toBeNull();\n    });\n\n    test('should handle invalid care type gracefully', async () => {\n      const testUser = createTestUser();\n      const createdUser = await dbManager.createTestUser(testUser);\n\n      const plant = createTestPlant({ createdBy: createdUser.id });\n      const createdPlant = await PlantQueries.create(plant);\n\n      const plantInstance = createTestPlantInstance({\n        userId: createdUser.id,\n        plantId: createdPlant.id,\n      });\n      const createdInstance = await PlantInstanceQueries.create(plantInstance);\n\n      const careData = {\n        userId: createdUser.id,\n        plantInstanceId: createdInstance.id,\n        careType: 'invalid_care_type', // Invalid\n        careDate: new Date(),\n        notes: 'Test notes',\n      };\n\n      // Should fail due to enum constraint\n      await expect(CareHistoryQueries.createCareHistory(careData))\n        .rejects.toThrow();\n    });\n\n    test('should handle empty care history queries', async () => {\n      const testUser = createTestUser();\n      const createdUser = await dbManager.createTestUser(testUser);\n\n      const plant = createTestPlant({ createdBy: createdUser.id });\n      const createdPlant = await PlantQueries.create(plant);\n\n      const plantInstance = createTestPlantInstance({\n        userId: createdUser.id,\n        plantId: createdPlant.id,\n      });\n      const createdInstance = await PlantInstanceQueries.create(plantInstance);\n\n      // No care records created\n      const history = await CareHistoryQueries.getCareHistoryForPlant(\n        createdInstance.id,\n        createdUser.id\n      );\n\n      expect(history).toEqual([]);\n\n      const count = await CareHistoryQueries.getCareHistoryCount(\n        createdInstance.id,\n        createdUser.id\n      );\n\n      expect(count).toBe(0);\n    });\n  });\n\n  describe('Performance and Concurrency', () => {\n    test('should handle concurrent care record creation', async () => {\n      const testUser = createTestUser();\n      const createdUser = await dbManager.createTestUser(testUser);\n\n      const plant = createTestPlant({ createdBy: createdUser.id });\n      const createdPlant = await PlantQueries.create(plant);\n\n      const plantInstance = createTestPlantInstance({\n        userId: createdUser.id,\n        plantId: createdPlant.id,\n      });\n      const createdInstance = await PlantInstanceQueries.create(plantInstance);\n\n      // Create multiple care records concurrently\n      const carePromises = Array.from({ length: 5 }, (_, index) => {\n        const careData = createTestCareRecord({\n          userId: createdUser.id,\n          plantInstanceId: createdInstance.id,\n          notes: `Concurrent care ${index}`,\n        });\n        return CareHistoryQueries.createCareHistory(careData);\n      });\n\n      const careRecords = await Promise.all(carePromises);\n      expect(careRecords.length).toBe(5);\n      expect(careRecords.every(c => c.id)).toBe(true);\n    });\n\n    test('should handle large care history efficiently', async () => {\n      const testUser = createTestUser();\n      const createdUser = await dbManager.createTestUser(testUser);\n\n      const plant = createTestPlant({ createdBy: createdUser.id });\n      const createdPlant = await PlantQueries.create(plant);\n\n      const plantInstance = createTestPlantInstance({\n        userId: createdUser.id,\n        plantId: createdPlant.id,\n      });\n      const createdInstance = await PlantInstanceQueries.create(plantInstance);\n\n      // Create many care records\n      const careEntries = Array.from({ length: 50 }, (_, index) => ({\n        userId: createdUser.id,\n        plantInstanceId: createdInstance.id,\n        careType: 'water',\n        careDate: new Date(Date.now() - index * 24 * 60 * 60 * 1000), // One per day\n        notes: `Daily water ${index}`,\n      }));\n\n      await CareHistoryQueries.bulkCreateCareHistory(careEntries);\n\n      const startTime = Date.now();\n      const history = await CareHistoryQueries.getCareHistoryForPlant(\n        createdInstance.id,\n        createdUser.id,\n        { limit: 20 }\n      );\n      const queryTime = Date.now() - startTime;\n\n      expect(history.length).toBe(20);\n      expect(queryTime).toBeLessThan(1000); // Should complete within 1 second\n    });\n  });\n});"],"names":["describe","dbManager","beforeEach","createDatabaseTestManager","resetCareCounter","afterEach","cleanup","test","testUser","createTestUser","createdUser","plant","createTestPlant","createdBy","id","createdPlant","PlantQueries","create","plantInstance","createTestPlantInstance","userId","plantId","createdInstance","PlantInstanceQueries","careData","plantInstanceId","careType","careDate","Date","notes","fertilizerType","images","careRecord","CareHistoryQueries","createCareHistory","expect","toBeDefined","toBe","createdAt","toBeInstanceOf","updatedAt","createTestCareRecord","createdCare","foundCare","getCareHistoryById","toBeNull","updates","updatedCare","updateCareHistory","getTime","toBeGreaterThan","deleted","deleteCareHistory","careRecords","care","history","getCareHistoryForPlant","length","every","h","fertilizerCare","waterCare","fertilizerHistory","now","oneWeekAgo","twoWeeksAgo","recentCare","oldCare","recentHistory","startDate","endDate","toBeGreaterThanOrEqual","instance1","instance2","createdInstance1","createdInstance2","care1","care2","getRecentCareHistory","totalCount","getCareHistoryCount","fertilizerCount","waterCount","yesterday","oldFertilizer","recentFertilizer","lastFertilizerDate","getLastCareDate","lastRepotDate","overdueInstance","fertilizerDue","isActive","dueTodayInstance","dueSoonInstance","dashboardData","getCareDashboardData","statistics","totalActivePlants","overdue","dueToday","dueSoon","careEntries","createdEntries","bulkCreateCareHistory","entry","result","toEqual","plantInstanceIds","getCareHistoryForPlants","includes","potSize","soilType","repotCare","rejects","toThrow","testUser1","email","testUser2","createdUser1","createdUser2","count","carePromises","Array","from","_","index","Promise","all","c","startTime","limit","queryTime","toBeLessThan"],"mappings":"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"}