6c466edcd3d8e040363bc8d834c7d34c
"use strict";

/* istanbul ignore next */
function cov_9yxhon6fb() {
  var path = "/Users/stefanbekker/projects/fancy-planties/src/lib/db/migrations.ts";
  var hash = "a0292c6ba976875e41f122081aa3f407dfb9333e";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/stefanbekker/projects/fancy-planties/src/lib/db/migrations.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 30
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 11,
          column: 23
        }
      },
      "4": {
        start: {
          line: 12,
          column: 15
        },
        end: {
          line: 12,
          column: 33
        }
      },
      "5": {
        start: {
          line: 13,
          column: 20
        },
        end: {
          line: 13,
          column: 42
        }
      },
      "6": {
        start: {
          line: 14,
          column: 26
        },
        end: {
          line: 14,
          column: 65
        }
      },
      "7": {
        start: {
          line: 15,
          column: 28
        },
        end: {
          line: 15,
          column: 69
        }
      },
      "8": {
        start: {
          line: 17,
          column: 4
        },
        end: {
          line: 19,
          column: 6
        }
      },
      "9": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 38,
          column: 9
        }
      },
      "10": {
        start: {
          line: 25,
          column: 12
        },
        end: {
          line: 25,
          column: 59
        }
      },
      "11": {
        start: {
          line: 27,
          column: 12
        },
        end: {
          line: 33,
          column: 9
        }
      },
      "12": {
        start: {
          line: 34,
          column: 12
        },
        end: {
          line: 34,
          column: 61
        }
      },
      "13": {
        start: {
          line: 36,
          column: 12
        },
        end: {
          line: 36,
          column: 54
        }
      },
      "14": {
        start: {
          line: 37,
          column: 12
        },
        end: {
          line: 37,
          column: 56
        }
      },
      "15": {
        start: {
          line: 42,
          column: 8
        },
        end: {
          line: 72,
          column: 9
        }
      },
      "16": {
        start: {
          line: 43,
          column: 12
        },
        end: {
          line: 43,
          column: 67
        }
      },
      "17": {
        start: {
          line: 44,
          column: 28
        },
        end: {
          line: 44,
          column: 92
        }
      },
      "18": {
        start: {
          line: 45,
          column: 12
        },
        end: {
          line: 68,
          column: 13
        }
      },
      "19": {
        start: {
          line: 46,
          column: 31
        },
        end: {
          line: 46,
          column: 72
        }
      },
      "20": {
        start: {
          line: 48,
          column: 35
        },
        end: {
          line: 48,
          column: 166
        }
      },
      "21": {
        start: {
          line: 48,
          column: 65
        },
        end: {
          line: 48,
          column: 76
        }
      },
      "22": {
        start: {
          line: 48,
          column: 93
        },
        end: {
          line: 48,
          column: 165
        }
      },
      "23": {
        start: {
          line: 49,
          column: 16
        },
        end: {
          line: 64,
          column: 17
        }
      },
      "24": {
        start: {
          line: 50,
          column: 43
        },
        end: {
          line: 50,
          column: 59
        }
      },
      "25": {
        start: {
          line: 51,
          column: 20
        },
        end: {
          line: 63,
          column: 21
        }
      },
      "26": {
        start: {
          line: 52,
          column: 24
        },
        end: {
          line: 62,
          column: 25
        }
      },
      "27": {
        start: {
          line: 53,
          column: 28
        },
        end: {
          line: 53,
          column: 89
        }
      },
      "28": {
        start: {
          line: 56,
          column: 28
        },
        end: {
          line: 61,
          column: 29
        }
      },
      "29": {
        start: {
          line: 57,
          column: 32
        },
        end: {
          line: 57,
          column: 118
        }
      },
      "30": {
        start: {
          line: 59,
          column: 32
        },
        end: {
          line: 59,
          column: 116
        }
      },
      "31": {
        start: {
          line: 60,
          column: 32
        },
        end: {
          line: 60,
          column: 44
        }
      },
      "32": {
        start: {
          line: 65,
          column: 16
        },
        end: {
          line: 65,
          column: 65
        }
      },
      "33": {
        start: {
          line: 67,
          column: 16
        },
        end: {
          line: 67,
          column: 73
        }
      },
      "34": {
        start: {
          line: 70,
          column: 12
        },
        end: {
          line: 70,
          column: 66
        }
      },
      "35": {
        start: {
          line: 71,
          column: 12
        },
        end: {
          line: 71,
          column: 60
        }
      },
      "36": {
        start: {
          line: 76,
          column: 8
        },
        end: {
          line: 84,
          column: 9
        }
      },
      "37": {
        start: {
          line: 77,
          column: 12
        },
        end: {
          line: 77,
          column: 58
        }
      },
      "38": {
        start: {
          line: 79,
          column: 12
        },
        end: {
          line: 79,
          column: 91
        }
      },
      "39": {
        start: {
          line: 80,
          column: 12
        },
        end: {
          line: 80,
          column: 93
        }
      },
      "40": {
        start: {
          line: 82,
          column: 12
        },
        end: {
          line: 82,
          column: 53
        }
      },
      "41": {
        start: {
          line: 83,
          column: 12
        },
        end: {
          line: 83,
          column: 60
        }
      },
      "42": {
        start: {
          line: 88,
          column: 8
        },
        end: {
          line: 109,
          column: 9
        }
      },
      "43": {
        start: {
          line: 90,
          column: 29
        },
        end: {
          line: 92,
          column: 8
        }
      },
      "44": {
        start: {
          line: 93,
          column: 38
        },
        end: {
          line: 93,
          column: 56
        }
      },
      "45": {
        start: {
          line: 95,
          column: 35
        },
        end: {
          line: 95,
          column: 79
        }
      },
      "46": {
        start: {
          line: 96,
          column: 38
        },
        end: {
          line: 96,
          column: 40
        }
      },
      "47": {
        start: {
          line: 97,
          column: 12
        },
        end: {
          line: 101,
          column: 13
        }
      },
      "48": {
        start: {
          line: 98,
          column: 30
        },
        end: {
          line: 98,
          column: 69
        }
      },
      "49": {
        start: {
          line: 99,
          column: 33
        },
        end: {
          line: 99,
          column: 110
        }
      },
      "50": {
        start: {
          line: 99,
          column: 54
        },
        end: {
          line: 99,
          column: 109
        }
      },
      "51": {
        start: {
          line: 100,
          column: 16
        },
        end: {
          line: 100,
          column: 52
        }
      },
      "52": {
        start: {
          line: 102,
          column: 12
        },
        end: {
          line: 105,
          column: 14
        }
      },
      "53": {
        start: {
          line: 107,
          column: 12
        },
        end: {
          line: 107,
          column: 68
        }
      },
      "54": {
        start: {
          line: 108,
          column: 12
        },
        end: {
          line: 108,
          column: 62
        }
      },
      "55": {
        start: {
          line: 113,
          column: 8
        },
        end: {
          line: 167,
          column: 9
        }
      },
      "56": {
        start: {
          line: 114,
          column: 12
        },
        end: {
          line: 114,
          column: 51
        }
      },
      "57": {
        start: {
          line: 116,
          column: 32
        },
        end: {
          line: 116,
          column: 114
        }
      },
      "58": {
        start: {
          line: 117,
          column: 12
        },
        end: {
          line: 120,
          column: 13
        }
      },
      "59": {
        start: {
          line: 118,
          column: 16
        },
        end: {
          line: 118,
          column: 72
        }
      },
      "60": {
        start: {
          line: 119,
          column: 16
        },
        end: {
          line: 119,
          column: 23
        }
      },
      "61": {
        start: {
          line: 122,
          column: 33
        },
        end: {
          line: 155,
          column: 13
        }
      },
      "62": {
        start: {
          line: 156,
          column: 12
        },
        end: {
          line: 162,
          column: 13
        }
      },
      "63": {
        start: {
          line: 157,
          column: 16
        },
        end: {
          line: 161,
          column: 11
        }
      },
      "64": {
        start: {
          line: 163,
          column: 12
        },
        end: {
          line: 163,
          column: 60
        }
      },
      "65": {
        start: {
          line: 165,
          column: 12
        },
        end: {
          line: 165,
          column: 65
        }
      },
      "66": {
        start: {
          line: 166,
          column: 12
        },
        end: {
          line: 166,
          column: 59
        }
      },
      "67": {
        start: {
          line: 171,
          column: 8
        },
        end: {
          line: 212,
          column: 9
        }
      },
      "68": {
        start: {
          line: 173,
          column: 30
        },
        end: {
          line: 173,
          column: 117
        }
      },
      "69": {
        start: {
          line: 173,
          column: 95
        },
        end: {
          line: 173,
          column: 99
        }
      },
      "70": {
        start: {
          line: 173,
          column: 111
        },
        end: {
          line: 173,
          column: 116
        }
      },
      "71": {
        start: {
          line: 175,
          column: 37
        },
        end: {
          line: 180,
          column: 8
        }
      },
      "72": {
        start: {
          line: 181,
          column: 38
        },
        end: {
          line: 181,
          column: 78
        }
      },
      "73": {
        start: {
          line: 183,
          column: 34
        },
        end: {
          line: 186,
          column: 8
        }
      },
      "74": {
        start: {
          line: 187,
          column: 32
        },
        end: {
          line: 187,
          column: 70
        }
      },
      "75": {
        start: {
          line: 189,
          column: 31
        },
        end: {
          line: 196,
          column: 8
        }
      },
      "76": {
        start: {
          line: 197,
          column: 31
        },
        end: {
          line: 197,
          column: 64
        }
      },
      "77": {
        start: {
          line: 198,
          column: 12
        },
        end: {
          line: 203,
          column: 14
        }
      },
      "78": {
        start: {
          line: 205,
          column: 12
        },
        end: {
          line: 205,
          column: 57
        }
      },
      "79": {
        start: {
          line: 206,
          column: 12
        },
        end: {
          line: 211,
          column: 14
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "_interop_require_default",
        decl: {
          start: {
            line: 16,
            column: 9
          },
          end: {
            line: 16,
            column: 33
          }
        },
        loc: {
          start: {
            line: 16,
            column: 39
          },
          end: {
            line: 20,
            column: 1
          }
        },
        line: 16
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 23,
            column: 4
          },
          end: {
            line: 23,
            column: 5
          }
        },
        loc: {
          start: {
            line: 23,
            column: 33
          },
          end: {
            line: 39,
            column: 5
          }
        },
        line: 23
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 41,
            column: 4
          },
          end: {
            line: 41,
            column: 5
          }
        },
        loc: {
          start: {
            line: 41,
            column: 36
          },
          end: {
            line: 73,
            column: 5
          }
        },
        line: 41
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 48,
            column: 57
          },
          end: {
            line: 48,
            column: 58
          }
        },
        loc: {
          start: {
            line: 48,
            column: 65
          },
          end: {
            line: 48,
            column: 76
          }
        },
        line: 48
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 48,
            column: 85
          },
          end: {
            line: 48,
            column: 86
          }
        },
        loc: {
          start: {
            line: 48,
            column: 93
          },
          end: {
            line: 48,
            column: 165
          }
        },
        line: 48
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 75,
            column: 4
          },
          end: {
            line: 75,
            column: 5
          }
        },
        loc: {
          start: {
            line: 75,
            column: 41
          },
          end: {
            line: 85,
            column: 5
          }
        },
        line: 75
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 87,
            column: 4
          },
          end: {
            line: 87,
            column: 5
          }
        },
        loc: {
          start: {
            line: 87,
            column: 38
          },
          end: {
            line: 110,
            column: 5
          }
        },
        line: 87
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 99,
            column: 46
          },
          end: {
            line: 99,
            column: 47
          }
        },
        loc: {
          start: {
            line: 99,
            column: 54
          },
          end: {
            line: 99,
            column: 109
          }
        },
        line: 99
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 112,
            column: 4
          },
          end: {
            line: 112,
            column: 5
          }
        },
        loc: {
          start: {
            line: 112,
            column: 35
          },
          end: {
            line: 168,
            column: 5
          }
        },
        line: 112
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 170,
            column: 4
          },
          end: {
            line: 170,
            column: 5
          }
        },
        loc: {
          start: {
            line: 170,
            column: 31
          },
          end: {
            line: 213,
            column: 5
          }
        },
        line: 170
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 173,
            column: 91
          },
          end: {
            line: 173,
            column: 92
          }
        },
        loc: {
          start: {
            line: 173,
            column: 95
          },
          end: {
            line: 173,
            column: 99
          }
        },
        line: 173
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 173,
            column: 107
          },
          end: {
            line: 173,
            column: 108
          }
        },
        loc: {
          start: {
            line: 173,
            column: 111
          },
          end: {
            line: 173,
            column: 116
          }
        },
        line: 173
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 17,
            column: 11
          },
          end: {
            line: 19,
            column: 5
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 17,
            column: 35
          },
          end: {
            line: 17,
            column: 38
          }
        }, {
          start: {
            line: 17,
            column: 41
          },
          end: {
            line: 19,
            column: 5
          }
        }],
        line: 17
      },
      "1": {
        loc: {
          start: {
            line: 17,
            column: 11
          },
          end: {
            line: 17,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 17,
            column: 11
          },
          end: {
            line: 17,
            column: 14
          }
        }, {
          start: {
            line: 17,
            column: 18
          },
          end: {
            line: 17,
            column: 32
          }
        }],
        line: 17
      },
      "2": {
        loc: {
          start: {
            line: 45,
            column: 12
          },
          end: {
            line: 68,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 45,
            column: 12
          },
          end: {
            line: 68,
            column: 13
          }
        }, {
          start: {
            line: 66,
            column: 19
          },
          end: {
            line: 68,
            column: 13
          }
        }],
        line: 45
      },
      "3": {
        loc: {
          start: {
            line: 48,
            column: 93
          },
          end: {
            line: 48,
            column: 165
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 48,
            column: 93
          },
          end: {
            line: 48,
            column: 108
          }
        }, {
          start: {
            line: 48,
            column: 112
          },
          end: {
            line: 48,
            column: 134
          }
        }, {
          start: {
            line: 48,
            column: 138
          },
          end: {
            line: 48,
            column: 165
          }
        }],
        line: 48
      },
      "4": {
        loc: {
          start: {
            line: 51,
            column: 20
          },
          end: {
            line: 63,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 51,
            column: 20
          },
          end: {
            line: 63,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 51
      },
      "5": {
        loc: {
          start: {
            line: 51,
            column: 24
          },
          end: {
            line: 51,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 51,
            column: 24
          },
          end: {
            line: 51,
            column: 38
          }
        }, {
          start: {
            line: 51,
            column: 42
          },
          end: {
            line: 51,
            column: 74
          }
        }],
        line: 51
      },
      "6": {
        loc: {
          start: {
            line: 56,
            column: 28
          },
          end: {
            line: 61,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 56,
            column: 28
          },
          end: {
            line: 61,
            column: 29
          }
        }, {
          start: {
            line: 58,
            column: 35
          },
          end: {
            line: 61,
            column: 29
          }
        }],
        line: 56
      },
      "7": {
        loc: {
          start: {
            line: 56,
            column: 32
          },
          end: {
            line: 56,
            column: 98
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 56,
            column: 32
          },
          end: {
            line: 56,
            column: 54
          }
        }, {
          start: {
            line: 56,
            column: 58
          },
          end: {
            line: 56,
            column: 98
          }
        }],
        line: 56
      },
      "8": {
        loc: {
          start: {
            line: 93,
            column: 38
          },
          end: {
            line: 93,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 93,
            column: 38
          },
          end: {
            line: 93,
            column: 51
          }
        }, {
          start: {
            line: 93,
            column: 55
          },
          end: {
            line: 93,
            column: 56
          }
        }],
        line: 93
      },
      "9": {
        loc: {
          start: {
            line: 97,
            column: 12
          },
          end: {
            line: 101,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 97,
            column: 12
          },
          end: {
            line: 101,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 97
      },
      "10": {
        loc: {
          start: {
            line: 99,
            column: 54
          },
          end: {
            line: 99,
            column: 109
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 99,
            column: 54
          },
          end: {
            line: 99,
            column: 75
          }
        }, {
          start: {
            line: 99,
            column: 79
          },
          end: {
            line: 99,
            column: 109
          }
        }],
        line: 99
      },
      "11": {
        loc: {
          start: {
            line: 117,
            column: 12
          },
          end: {
            line: 120,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 117,
            column: 12
          },
          end: {
            line: 120,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 117
      },
      "12": {
        loc: {
          start: {
            line: 181,
            column: 38
          },
          end: {
            line: 181,
            column: 78
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 181,
            column: 38
          },
          end: {
            line: 181,
            column: 69
          }
        }, {
          start: {
            line: 181,
            column: 73
          },
          end: {
            line: 181,
            column: 78
          }
        }],
        line: 181
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/stefanbekker/projects/fancy-planties/src/lib/db/migrations.ts"],
      sourcesContent: ["import 'server-only';\n\nimport { db } from './index';\nimport { sql } from 'drizzle-orm';\nimport fs from 'fs';\nimport path from 'path';\n\n// Migration utilities\nexport class MigrationUtils {\n  // Run all pending migrations\n  static async runMigrations(): Promise<void> {\n    try {\n      console.log('Starting database migrations...');\n      \n      // Create migrations table if it doesn't exist\n      await db.execute(sql`\n        CREATE TABLE IF NOT EXISTS __drizzle_migrations (\n          id SERIAL PRIMARY KEY,\n          hash text NOT NULL,\n          created_at bigint\n        );\n      `);\n\n      console.log('Migrations completed successfully');\n    } catch (error) {\n      console.error('Migration failed:', error);\n      throw new Error('Failed to run migrations');\n    }\n  }\n\n  // Apply RLS policies\n  static async applyRLSPolicies(): Promise<void> {\n    try {\n      console.log('Applying Row-Level Security policies...');\n      \n      const rlsPath = path.join(process.cwd(), 'drizzle', 'rls-policies.sql');\n      \n      if (fs.existsSync(rlsPath)) {\n        const rlsSQL = fs.readFileSync(rlsPath, 'utf8');\n        \n        // Split by semicolon and filter out comments\n        const statements = rlsSQL\n          .split(';')\n          .map(stmt => stmt.trim())\n          .filter(stmt => \n            stmt.length > 0 && \n            !stmt.startsWith('--') && \n            !stmt.match(/^\\/\\*.*\\*\\/$/)\n          );\n\n        for (const statement of statements) {\n          const cleanStatement = statement.trim();\n          if (cleanStatement && !cleanStatement.startsWith('--')) {\n            try {\n              await db.execute(sql.raw(cleanStatement));\n            } catch (error) {\n              // Log but don't fail on policy conflicts (they might already exist)\n              if (error instanceof Error && error.message.includes('already exists')) {\n                console.log(`Policy already exists, skipping: ${cleanStatement.substring(0, 50)}...`);\n              } else {\n                console.error(`Failed to execute statement: ${cleanStatement.substring(0, 50)}...`);\n                throw error;\n              }\n            }\n          }\n        }\n        \n        console.log('RLS policies applied successfully');\n      } else {\n        console.warn('RLS policies file not found, skipping...');\n      }\n    } catch (error) {\n      console.error('Failed to apply RLS policies:', error);\n      throw new Error('Failed to apply RLS policies');\n    }\n  }\n\n  // Rollback last migration (basic implementation)\n  static async rollbackLastMigration(): Promise<void> {\n    try {\n      console.log('Rolling back last migration...');\n      \n      // This is a basic implementation - in production you'd want more sophisticated rollback logic\n      console.warn('Rollback functionality requires manual intervention for safety');\n      console.log('Please review the migration files and manually rollback if needed');\n      \n    } catch (error) {\n      console.error('Rollback failed:', error);\n      throw new Error('Failed to rollback migration');\n    }\n  }\n\n  // Check migration status\n  static async getMigrationStatus(): Promise<{\n    appliedMigrations: number;\n    pendingMigrations: string[];\n  }> {\n    try {\n      // Get applied migrations count\n      const [result] = await db.execute(sql`\n        SELECT COUNT(*) as count FROM __drizzle_migrations\n      `);\n      \n      const appliedMigrations = result?.count || 0;\n      \n      // Get pending migrations by checking the drizzle folder\n      const migrationsPath = path.join(process.cwd(), 'drizzle');\n      const pendingMigrations: string[] = [];\n      \n      if (fs.existsSync(migrationsPath)) {\n        const files = fs.readdirSync(migrationsPath);\n        const sqlFiles = files.filter(file => file.endsWith('.sql') && !file.includes('rls-policies'));\n        pendingMigrations.push(...sqlFiles);\n      }\n\n      return {\n        appliedMigrations: Number(appliedMigrations),\n        pendingMigrations\n      };\n    } catch (error) {\n      console.error('Failed to get migration status:', error);\n      throw new Error('Failed to get migration status');\n    }\n  }\n\n  // Seed initial data (for development)\n  static async seedInitialData(): Promise<void> {\n    try {\n      console.log('Seeding initial data...');\n      \n      // Check if we already have data\n      const [userCount] = await db.execute(sql`SELECT COUNT(*) as count FROM users`);\n      \n      if (Number(userCount?.count) > 0) {\n        console.log('Database already has data, skipping seed');\n        return;\n      }\n\n      // Add some common plant taxonomy data\n      const commonPlants = [\n        {\n          family: 'Araceae',\n          genus: 'Monstera',\n          species: 'deliciosa',\n          commonName: 'Swiss Cheese Plant',\n          careInstructions: 'Bright indirect light, water when top inch of soil is dry',\n          isVerified: true\n        },\n        {\n          family: 'Araceae',\n          genus: 'Pothos',\n          species: 'aureus',\n          commonName: 'Golden Pothos',\n          careInstructions: 'Low to bright indirect light, water when soil is dry',\n          isVerified: true\n        },\n        {\n          family: 'Asparagaceae',\n          genus: 'Sansevieria',\n          species: 'trifasciata',\n          commonName: 'Snake Plant',\n          careInstructions: 'Low light tolerant, water sparingly',\n          isVerified: true\n        },\n        {\n          family: 'Araceae',\n          genus: 'Philodendron',\n          species: 'hederaceum',\n          commonName: 'Heartleaf Philodendron',\n          careInstructions: 'Bright indirect light, keep soil lightly moist',\n          isVerified: true\n        }\n      ];\n\n      for (const plant of commonPlants) {\n        await db.execute(sql`\n          INSERT INTO plants (family, genus, species, cultivar, common_name, care_instructions, is_verified)\n          VALUES (${plant.family}, ${plant.genus}, ${plant.species}, NULL, ${plant.commonName}, ${plant.careInstructions}, ${plant.isVerified})\n          ON CONFLICT (family, genus, species, cultivar) DO NOTHING\n        `);\n      }\n\n      console.log('Initial data seeded successfully');\n    } catch (error) {\n      console.error('Failed to seed initial data:', error);\n      throw new Error('Failed to seed initial data');\n    }\n  }\n\n  // Database health check\n  static async healthCheck(): Promise<{\n    connected: boolean;\n    migrationsApplied: boolean;\n    rlsEnabled: boolean;\n    tablesExist: boolean;\n  }> {\n    try {\n      // Check connection\n      const connected = await db.execute(sql`SELECT 1`).then(() => true).catch(() => false);\n      \n      // Check if migrations table exists\n      const [migrationTable] = await db.execute(sql`\n        SELECT EXISTS (\n          SELECT FROM information_schema.tables \n          WHERE table_name = '__drizzle_migrations'\n        ) as exists\n      `);\n      const migrationsApplied = Boolean(migrationTable?.exists) || false;\n\n      // Check if main tables exist\n      const [tablesCheck] = await db.execute(sql`\n        SELECT \n          (SELECT COUNT(*) FROM information_schema.tables WHERE table_name IN ('users', 'plants', 'plant_instances', 'propagations', 'sessions')) as table_count\n      `);\n      const tablesExist = Number(tablesCheck?.table_count) === 5;\n\n      // Check if RLS is enabled on user tables\n      const [rlsCheck] = await db.execute(sql`\n        SELECT COUNT(*) as rls_count\n        FROM pg_class c\n        JOIN pg_namespace n ON n.oid = c.relnamespace\n        WHERE c.relrowsecurity = true \n        AND n.nspname = 'public'\n        AND c.relname IN ('plant_instances', 'propagations', 'sessions')\n      `);\n      const rlsEnabled = Number(rlsCheck?.rls_count) === 3;\n\n      return {\n        connected,\n        migrationsApplied,\n        rlsEnabled,\n        tablesExist\n      };\n    } catch (error) {\n      console.error('Health check failed:', error);\n      return {\n        connected: false,\n        migrationsApplied: false,\n        rlsEnabled: false,\n        tablesExist: false\n      };\n    }\n  }\n}"],
      names: ["MigrationUtils", "runMigrations", "console", "log", "db", "execute", "sql", "error", "Error", "applyRLSPolicies", "rlsPath", "path", "join", "process", "cwd", "fs", "existsSync", "rlsSQL", "readFileSync", "statements", "split", "map", "stmt", "trim", "filter", "length", "startsWith", "match", "statement", "cleanStatement", "raw", "message", "includes", "substring", "warn", "rollbackLastMigration", "getMigrationStatus", "result", "appliedMigrations", "count", "migrationsPath", "pendingMigrations", "files", "readdirSync", "sqlFiles", "file", "endsWith", "push", "Number", "seedInitialData", "userCount", "commonPlants", "family", "genus", "species", "commonName", "careInstructions", "isVerified", "plant", "healthCheck", "connected", "then", "catch", "migrationTable", "migrationsApplied", "Boolean", "exists", "tablesCheck", "tablesExist", "table_count", "rlsCheck", "rlsEnabled", "rls_count"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "a0292c6ba976875e41f122081aa3f407dfb9333e"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_9yxhon6fb = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_9yxhon6fb();
cov_9yxhon6fb().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_9yxhon6fb().s[1]++;
Object.defineProperty(exports, "MigrationUtils", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_9yxhon6fb().f[0]++;
    cov_9yxhon6fb().s[2]++;
    return MigrationUtils;
  }
});
/* istanbul ignore next */
cov_9yxhon6fb().s[3]++;
require("server-only");
const _index =
/* istanbul ignore next */
(cov_9yxhon6fb().s[4]++, require("./index"));
const _drizzleorm =
/* istanbul ignore next */
(cov_9yxhon6fb().s[5]++, require("drizzle-orm"));
const _fs =
/* istanbul ignore next */
(/*#__PURE__*/cov_9yxhon6fb().s[6]++, _interop_require_default(require("fs")));
const _path =
/* istanbul ignore next */
(/*#__PURE__*/cov_9yxhon6fb().s[7]++, _interop_require_default(require("path")));
function _interop_require_default(obj) {
  /* istanbul ignore next */
  cov_9yxhon6fb().f[1]++;
  cov_9yxhon6fb().s[8]++;
  return /* istanbul ignore next */(cov_9yxhon6fb().b[1][0]++, obj) &&
  /* istanbul ignore next */
  (cov_9yxhon6fb().b[1][1]++, obj.__esModule) ?
  /* istanbul ignore next */
  (cov_9yxhon6fb().b[0][0]++, obj) :
  /* istanbul ignore next */
  (cov_9yxhon6fb().b[0][1]++, {
    default: obj
  });
}
class MigrationUtils {
  // Run all pending migrations
  static async runMigrations() {
    /* istanbul ignore next */
    cov_9yxhon6fb().f[2]++;
    cov_9yxhon6fb().s[9]++;
    try {
      /* istanbul ignore next */
      cov_9yxhon6fb().s[10]++;
      console.log('Starting database migrations...');
      // Create migrations table if it doesn't exist
      /* istanbul ignore next */
      cov_9yxhon6fb().s[11]++;
      await _index.db.execute((0, _drizzleorm.sql)`
        CREATE TABLE IF NOT EXISTS __drizzle_migrations (
          id SERIAL PRIMARY KEY,
          hash text NOT NULL,
          created_at bigint
        );
      `);
      /* istanbul ignore next */
      cov_9yxhon6fb().s[12]++;
      console.log('Migrations completed successfully');
    } catch (error) {
      /* istanbul ignore next */
      cov_9yxhon6fb().s[13]++;
      console.error('Migration failed:', error);
      /* istanbul ignore next */
      cov_9yxhon6fb().s[14]++;
      throw new Error('Failed to run migrations');
    }
  }
  // Apply RLS policies
  static async applyRLSPolicies() {
    /* istanbul ignore next */
    cov_9yxhon6fb().f[3]++;
    cov_9yxhon6fb().s[15]++;
    try {
      /* istanbul ignore next */
      cov_9yxhon6fb().s[16]++;
      console.log('Applying Row-Level Security policies...');
      const rlsPath =
      /* istanbul ignore next */
      (cov_9yxhon6fb().s[17]++, _path.default.join(process.cwd(), 'drizzle', 'rls-policies.sql'));
      /* istanbul ignore next */
      cov_9yxhon6fb().s[18]++;
      if (_fs.default.existsSync(rlsPath)) {
        /* istanbul ignore next */
        cov_9yxhon6fb().b[2][0]++;
        const rlsSQL =
        /* istanbul ignore next */
        (cov_9yxhon6fb().s[19]++, _fs.default.readFileSync(rlsPath, 'utf8'));
        // Split by semicolon and filter out comments
        const statements =
        /* istanbul ignore next */
        (cov_9yxhon6fb().s[20]++, rlsSQL.split(';').map(stmt => {
          /* istanbul ignore next */
          cov_9yxhon6fb().f[4]++;
          cov_9yxhon6fb().s[21]++;
          return stmt.trim();
        }).filter(stmt => {
          /* istanbul ignore next */
          cov_9yxhon6fb().f[5]++;
          cov_9yxhon6fb().s[22]++;
          return /* istanbul ignore next */(cov_9yxhon6fb().b[3][0]++, stmt.length > 0) &&
          /* istanbul ignore next */
          (cov_9yxhon6fb().b[3][1]++, !stmt.startsWith('--')) &&
          /* istanbul ignore next */
          (cov_9yxhon6fb().b[3][2]++, !stmt.match(/^\/\*.*\*\/$/));
        }));
        /* istanbul ignore next */
        cov_9yxhon6fb().s[23]++;
        for (const statement of statements) {
          const cleanStatement =
          /* istanbul ignore next */
          (cov_9yxhon6fb().s[24]++, statement.trim());
          /* istanbul ignore next */
          cov_9yxhon6fb().s[25]++;
          if (
          /* istanbul ignore next */
          (cov_9yxhon6fb().b[5][0]++, cleanStatement) &&
          /* istanbul ignore next */
          (cov_9yxhon6fb().b[5][1]++, !cleanStatement.startsWith('--'))) {
            /* istanbul ignore next */
            cov_9yxhon6fb().b[4][0]++;
            cov_9yxhon6fb().s[26]++;
            try {
              /* istanbul ignore next */
              cov_9yxhon6fb().s[27]++;
              await _index.db.execute(_drizzleorm.sql.raw(cleanStatement));
            } catch (error) {
              /* istanbul ignore next */
              cov_9yxhon6fb().s[28]++;
              // Log but don't fail on policy conflicts (they might already exist)
              if (
              /* istanbul ignore next */
              (cov_9yxhon6fb().b[7][0]++, error instanceof Error) &&
              /* istanbul ignore next */
              (cov_9yxhon6fb().b[7][1]++, error.message.includes('already exists'))) {
                /* istanbul ignore next */
                cov_9yxhon6fb().b[6][0]++;
                cov_9yxhon6fb().s[29]++;
                console.log(`Policy already exists, skipping: ${cleanStatement.substring(0, 50)}...`);
              } else {
                /* istanbul ignore next */
                cov_9yxhon6fb().b[6][1]++;
                cov_9yxhon6fb().s[30]++;
                console.error(`Failed to execute statement: ${cleanStatement.substring(0, 50)}...`);
                /* istanbul ignore next */
                cov_9yxhon6fb().s[31]++;
                throw error;
              }
            }
          } else
          /* istanbul ignore next */
          {
            cov_9yxhon6fb().b[4][1]++;
          }
        }
        /* istanbul ignore next */
        cov_9yxhon6fb().s[32]++;
        console.log('RLS policies applied successfully');
      } else {
        /* istanbul ignore next */
        cov_9yxhon6fb().b[2][1]++;
        cov_9yxhon6fb().s[33]++;
        console.warn('RLS policies file not found, skipping...');
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_9yxhon6fb().s[34]++;
      console.error('Failed to apply RLS policies:', error);
      /* istanbul ignore next */
      cov_9yxhon6fb().s[35]++;
      throw new Error('Failed to apply RLS policies');
    }
  }
  // Rollback last migration (basic implementation)
  static async rollbackLastMigration() {
    /* istanbul ignore next */
    cov_9yxhon6fb().f[6]++;
    cov_9yxhon6fb().s[36]++;
    try {
      /* istanbul ignore next */
      cov_9yxhon6fb().s[37]++;
      console.log('Rolling back last migration...');
      // This is a basic implementation - in production you'd want more sophisticated rollback logic
      /* istanbul ignore next */
      cov_9yxhon6fb().s[38]++;
      console.warn('Rollback functionality requires manual intervention for safety');
      /* istanbul ignore next */
      cov_9yxhon6fb().s[39]++;
      console.log('Please review the migration files and manually rollback if needed');
    } catch (error) {
      /* istanbul ignore next */
      cov_9yxhon6fb().s[40]++;
      console.error('Rollback failed:', error);
      /* istanbul ignore next */
      cov_9yxhon6fb().s[41]++;
      throw new Error('Failed to rollback migration');
    }
  }
  // Check migration status
  static async getMigrationStatus() {
    /* istanbul ignore next */
    cov_9yxhon6fb().f[7]++;
    cov_9yxhon6fb().s[42]++;
    try {
      // Get applied migrations count
      const [result] =
      /* istanbul ignore next */
      (cov_9yxhon6fb().s[43]++, await _index.db.execute((0, _drizzleorm.sql)`
        SELECT COUNT(*) as count FROM __drizzle_migrations
      `));
      const appliedMigrations =
      /* istanbul ignore next */
      (cov_9yxhon6fb().s[44]++,
      /* istanbul ignore next */
      (cov_9yxhon6fb().b[8][0]++, result?.count) ||
      /* istanbul ignore next */
      (cov_9yxhon6fb().b[8][1]++, 0));
      // Get pending migrations by checking the drizzle folder
      const migrationsPath =
      /* istanbul ignore next */
      (cov_9yxhon6fb().s[45]++, _path.default.join(process.cwd(), 'drizzle'));
      const pendingMigrations =
      /* istanbul ignore next */
      (cov_9yxhon6fb().s[46]++, []);
      /* istanbul ignore next */
      cov_9yxhon6fb().s[47]++;
      if (_fs.default.existsSync(migrationsPath)) {
        /* istanbul ignore next */
        cov_9yxhon6fb().b[9][0]++;
        const files =
        /* istanbul ignore next */
        (cov_9yxhon6fb().s[48]++, _fs.default.readdirSync(migrationsPath));
        const sqlFiles =
        /* istanbul ignore next */
        (cov_9yxhon6fb().s[49]++, files.filter(file => {
          /* istanbul ignore next */
          cov_9yxhon6fb().f[8]++;
          cov_9yxhon6fb().s[50]++;
          return /* istanbul ignore next */(cov_9yxhon6fb().b[10][0]++, file.endsWith('.sql')) &&
          /* istanbul ignore next */
          (cov_9yxhon6fb().b[10][1]++, !file.includes('rls-policies'));
        }));
        /* istanbul ignore next */
        cov_9yxhon6fb().s[51]++;
        pendingMigrations.push(...sqlFiles);
      } else
      /* istanbul ignore next */
      {
        cov_9yxhon6fb().b[9][1]++;
      }
      cov_9yxhon6fb().s[52]++;
      return {
        appliedMigrations: Number(appliedMigrations),
        pendingMigrations
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_9yxhon6fb().s[53]++;
      console.error('Failed to get migration status:', error);
      /* istanbul ignore next */
      cov_9yxhon6fb().s[54]++;
      throw new Error('Failed to get migration status');
    }
  }
  // Seed initial data (for development)
  static async seedInitialData() {
    /* istanbul ignore next */
    cov_9yxhon6fb().f[9]++;
    cov_9yxhon6fb().s[55]++;
    try {
      /* istanbul ignore next */
      cov_9yxhon6fb().s[56]++;
      console.log('Seeding initial data...');
      // Check if we already have data
      const [userCount] =
      /* istanbul ignore next */
      (cov_9yxhon6fb().s[57]++, await _index.db.execute((0, _drizzleorm.sql)`SELECT COUNT(*) as count FROM users`));
      /* istanbul ignore next */
      cov_9yxhon6fb().s[58]++;
      if (Number(userCount?.count) > 0) {
        /* istanbul ignore next */
        cov_9yxhon6fb().b[11][0]++;
        cov_9yxhon6fb().s[59]++;
        console.log('Database already has data, skipping seed');
        /* istanbul ignore next */
        cov_9yxhon6fb().s[60]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_9yxhon6fb().b[11][1]++;
      }
      // Add some common plant taxonomy data
      const commonPlants =
      /* istanbul ignore next */
      (cov_9yxhon6fb().s[61]++, [{
        family: 'Araceae',
        genus: 'Monstera',
        species: 'deliciosa',
        commonName: 'Swiss Cheese Plant',
        careInstructions: 'Bright indirect light, water when top inch of soil is dry',
        isVerified: true
      }, {
        family: 'Araceae',
        genus: 'Pothos',
        species: 'aureus',
        commonName: 'Golden Pothos',
        careInstructions: 'Low to bright indirect light, water when soil is dry',
        isVerified: true
      }, {
        family: 'Asparagaceae',
        genus: 'Sansevieria',
        species: 'trifasciata',
        commonName: 'Snake Plant',
        careInstructions: 'Low light tolerant, water sparingly',
        isVerified: true
      }, {
        family: 'Araceae',
        genus: 'Philodendron',
        species: 'hederaceum',
        commonName: 'Heartleaf Philodendron',
        careInstructions: 'Bright indirect light, keep soil lightly moist',
        isVerified: true
      }]);
      /* istanbul ignore next */
      cov_9yxhon6fb().s[62]++;
      for (const plant of commonPlants) {
        /* istanbul ignore next */
        cov_9yxhon6fb().s[63]++;
        await _index.db.execute((0, _drizzleorm.sql)`
          INSERT INTO plants (family, genus, species, cultivar, common_name, care_instructions, is_verified)
          VALUES (${plant.family}, ${plant.genus}, ${plant.species}, NULL, ${plant.commonName}, ${plant.careInstructions}, ${plant.isVerified})
          ON CONFLICT (family, genus, species, cultivar) DO NOTHING
        `);
      }
      /* istanbul ignore next */
      cov_9yxhon6fb().s[64]++;
      console.log('Initial data seeded successfully');
    } catch (error) {
      /* istanbul ignore next */
      cov_9yxhon6fb().s[65]++;
      console.error('Failed to seed initial data:', error);
      /* istanbul ignore next */
      cov_9yxhon6fb().s[66]++;
      throw new Error('Failed to seed initial data');
    }
  }
  // Database health check
  static async healthCheck() {
    /* istanbul ignore next */
    cov_9yxhon6fb().f[10]++;
    cov_9yxhon6fb().s[67]++;
    try {
      // Check connection
      const connected =
      /* istanbul ignore next */
      (cov_9yxhon6fb().s[68]++, await _index.db.execute((0, _drizzleorm.sql)`SELECT 1`).then(() => {
        /* istanbul ignore next */
        cov_9yxhon6fb().f[11]++;
        cov_9yxhon6fb().s[69]++;
        return true;
      }).catch(() => {
        /* istanbul ignore next */
        cov_9yxhon6fb().f[12]++;
        cov_9yxhon6fb().s[70]++;
        return false;
      }));
      // Check if migrations table exists
      const [migrationTable] =
      /* istanbul ignore next */
      (cov_9yxhon6fb().s[71]++, await _index.db.execute((0, _drizzleorm.sql)`
        SELECT EXISTS (
          SELECT FROM information_schema.tables 
          WHERE table_name = '__drizzle_migrations'
        ) as exists
      `));
      const migrationsApplied =
      /* istanbul ignore next */
      (cov_9yxhon6fb().s[72]++,
      /* istanbul ignore next */
      (cov_9yxhon6fb().b[12][0]++, Boolean(migrationTable?.exists)) ||
      /* istanbul ignore next */
      (cov_9yxhon6fb().b[12][1]++, false));
      // Check if main tables exist
      const [tablesCheck] =
      /* istanbul ignore next */
      (cov_9yxhon6fb().s[73]++, await _index.db.execute((0, _drizzleorm.sql)`
        SELECT 
          (SELECT COUNT(*) FROM information_schema.tables WHERE table_name IN ('users', 'plants', 'plant_instances', 'propagations', 'sessions')) as table_count
      `));
      const tablesExist =
      /* istanbul ignore next */
      (cov_9yxhon6fb().s[74]++, Number(tablesCheck?.table_count) === 5);
      // Check if RLS is enabled on user tables
      const [rlsCheck] =
      /* istanbul ignore next */
      (cov_9yxhon6fb().s[75]++, await _index.db.execute((0, _drizzleorm.sql)`
        SELECT COUNT(*) as rls_count
        FROM pg_class c
        JOIN pg_namespace n ON n.oid = c.relnamespace
        WHERE c.relrowsecurity = true 
        AND n.nspname = 'public'
        AND c.relname IN ('plant_instances', 'propagations', 'sessions')
      `));
      const rlsEnabled =
      /* istanbul ignore next */
      (cov_9yxhon6fb().s[76]++, Number(rlsCheck?.rls_count) === 3);
      /* istanbul ignore next */
      cov_9yxhon6fb().s[77]++;
      return {
        connected,
        migrationsApplied,
        rlsEnabled,
        tablesExist
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_9yxhon6fb().s[78]++;
      console.error('Health check failed:', error);
      /* istanbul ignore next */
      cov_9yxhon6fb().s[79]++;
      return {
        connected: false,
        migrationsApplied: false,
        rlsEnabled: false,
        tablesExist: false
      };
    }
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJNaWdyYXRpb25VdGlscyIsInJ1bk1pZ3JhdGlvbnMiLCJjb3ZfOXl4aG9uNmZiIiwiZiIsInMiLCJjb25zb2xlIiwibG9nIiwiX2luZGV4IiwiZGIiLCJleGVjdXRlIiwiX2RyaXp6bGVvcm0iLCJzcWwiLCJlcnJvciIsIkVycm9yIiwiYXBwbHlSTFNQb2xpY2llcyIsInJsc1BhdGgiLCJfcGF0aCIsImRlZmF1bHQiLCJqb2luIiwicHJvY2VzcyIsImN3ZCIsIl9mcyIsImV4aXN0c1N5bmMiLCJiIiwicmxzU1FMIiwicmVhZEZpbGVTeW5jIiwic3RhdGVtZW50cyIsInNwbGl0IiwibWFwIiwic3RtdCIsInRyaW0iLCJmaWx0ZXIiLCJsZW5ndGgiLCJzdGFydHNXaXRoIiwibWF0Y2giLCJzdGF0ZW1lbnQiLCJjbGVhblN0YXRlbWVudCIsInJhdyIsIm1lc3NhZ2UiLCJpbmNsdWRlcyIsInN1YnN0cmluZyIsIndhcm4iLCJyb2xsYmFja0xhc3RNaWdyYXRpb24iLCJnZXRNaWdyYXRpb25TdGF0dXMiLCJyZXN1bHQiLCJhcHBsaWVkTWlncmF0aW9ucyIsImNvdW50IiwibWlncmF0aW9uc1BhdGgiLCJwZW5kaW5nTWlncmF0aW9ucyIsImZpbGVzIiwicmVhZGRpclN5bmMiLCJzcWxGaWxlcyIsImZpbGUiLCJlbmRzV2l0aCIsInB1c2giLCJOdW1iZXIiLCJzZWVkSW5pdGlhbERhdGEiLCJ1c2VyQ291bnQiLCJjb21tb25QbGFudHMiLCJmYW1pbHkiLCJnZW51cyIsInNwZWNpZXMiLCJjb21tb25OYW1lIiwiY2FyZUluc3RydWN0aW9ucyIsImlzVmVyaWZpZWQiLCJwbGFudCIsImhlYWx0aENoZWNrIiwiY29ubmVjdGVkIiwidGhlbiIsImNhdGNoIiwibWlncmF0aW9uVGFibGUiLCJtaWdyYXRpb25zQXBwbGllZCIsIkJvb2xlYW4iLCJleGlzdHMiLCJ0YWJsZXNDaGVjayIsInRhYmxlc0V4aXN0IiwidGFibGVfY291bnQiLCJybHNDaGVjayIsInJsc0VuYWJsZWQiLCJybHNfY291bnQiXSwic291cmNlcyI6WyIvVXNlcnMvc3RlZmFuYmVra2VyL3Byb2plY3RzL2ZhbmN5LXBsYW50aWVzL3NyYy9saWIvZGIvbWlncmF0aW9ucy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJ3NlcnZlci1vbmx5JztcblxuaW1wb3J0IHsgZGIgfSBmcm9tICcuL2luZGV4JztcbmltcG9ydCB7IHNxbCB9IGZyb20gJ2RyaXp6bGUtb3JtJztcbmltcG9ydCBmcyBmcm9tICdmcyc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcblxuLy8gTWlncmF0aW9uIHV0aWxpdGllc1xuZXhwb3J0IGNsYXNzIE1pZ3JhdGlvblV0aWxzIHtcbiAgLy8gUnVuIGFsbCBwZW5kaW5nIG1pZ3JhdGlvbnNcbiAgc3RhdGljIGFzeW5jIHJ1bk1pZ3JhdGlvbnMoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnNvbGUubG9nKCdTdGFydGluZyBkYXRhYmFzZSBtaWdyYXRpb25zLi4uJyk7XG4gICAgICBcbiAgICAgIC8vIENyZWF0ZSBtaWdyYXRpb25zIHRhYmxlIGlmIGl0IGRvZXNuJ3QgZXhpc3RcbiAgICAgIGF3YWl0IGRiLmV4ZWN1dGUoc3FsYFxuICAgICAgICBDUkVBVEUgVEFCTEUgSUYgTk9UIEVYSVNUUyBfX2RyaXp6bGVfbWlncmF0aW9ucyAoXG4gICAgICAgICAgaWQgU0VSSUFMIFBSSU1BUlkgS0VZLFxuICAgICAgICAgIGhhc2ggdGV4dCBOT1QgTlVMTCxcbiAgICAgICAgICBjcmVhdGVkX2F0IGJpZ2ludFxuICAgICAgICApO1xuICAgICAgYCk7XG5cbiAgICAgIGNvbnNvbGUubG9nKCdNaWdyYXRpb25zIGNvbXBsZXRlZCBzdWNjZXNzZnVsbHknKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignTWlncmF0aW9uIGZhaWxlZDonLCBlcnJvcik7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZhaWxlZCB0byBydW4gbWlncmF0aW9ucycpO1xuICAgIH1cbiAgfVxuXG4gIC8vIEFwcGx5IFJMUyBwb2xpY2llc1xuICBzdGF0aWMgYXN5bmMgYXBwbHlSTFNQb2xpY2llcygpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICB0cnkge1xuICAgICAgY29uc29sZS5sb2coJ0FwcGx5aW5nIFJvdy1MZXZlbCBTZWN1cml0eSBwb2xpY2llcy4uLicpO1xuICAgICAgXG4gICAgICBjb25zdCBybHNQYXRoID0gcGF0aC5qb2luKHByb2Nlc3MuY3dkKCksICdkcml6emxlJywgJ3Jscy1wb2xpY2llcy5zcWwnKTtcbiAgICAgIFxuICAgICAgaWYgKGZzLmV4aXN0c1N5bmMocmxzUGF0aCkpIHtcbiAgICAgICAgY29uc3QgcmxzU1FMID0gZnMucmVhZEZpbGVTeW5jKHJsc1BhdGgsICd1dGY4Jyk7XG4gICAgICAgIFxuICAgICAgICAvLyBTcGxpdCBieSBzZW1pY29sb24gYW5kIGZpbHRlciBvdXQgY29tbWVudHNcbiAgICAgICAgY29uc3Qgc3RhdGVtZW50cyA9IHJsc1NRTFxuICAgICAgICAgIC5zcGxpdCgnOycpXG4gICAgICAgICAgLm1hcChzdG10ID0+IHN0bXQudHJpbSgpKVxuICAgICAgICAgIC5maWx0ZXIoc3RtdCA9PiBcbiAgICAgICAgICAgIHN0bXQubGVuZ3RoID4gMCAmJiBcbiAgICAgICAgICAgICFzdG10LnN0YXJ0c1dpdGgoJy0tJykgJiYgXG4gICAgICAgICAgICAhc3RtdC5tYXRjaCgvXlxcL1xcKi4qXFwqXFwvJC8pXG4gICAgICAgICAgKTtcblxuICAgICAgICBmb3IgKGNvbnN0IHN0YXRlbWVudCBvZiBzdGF0ZW1lbnRzKSB7XG4gICAgICAgICAgY29uc3QgY2xlYW5TdGF0ZW1lbnQgPSBzdGF0ZW1lbnQudHJpbSgpO1xuICAgICAgICAgIGlmIChjbGVhblN0YXRlbWVudCAmJiAhY2xlYW5TdGF0ZW1lbnQuc3RhcnRzV2l0aCgnLS0nKSkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgYXdhaXQgZGIuZXhlY3V0ZShzcWwucmF3KGNsZWFuU3RhdGVtZW50KSk7XG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAvLyBMb2cgYnV0IGRvbid0IGZhaWwgb24gcG9saWN5IGNvbmZsaWN0cyAodGhleSBtaWdodCBhbHJlYWR5IGV4aXN0KVxuICAgICAgICAgICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvciAmJiBlcnJvci5tZXNzYWdlLmluY2x1ZGVzKCdhbHJlYWR5IGV4aXN0cycpKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coYFBvbGljeSBhbHJlYWR5IGV4aXN0cywgc2tpcHBpbmc6ICR7Y2xlYW5TdGF0ZW1lbnQuc3Vic3RyaW5nKDAsIDUwKX0uLi5gKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGBGYWlsZWQgdG8gZXhlY3V0ZSBzdGF0ZW1lbnQ6ICR7Y2xlYW5TdGF0ZW1lbnQuc3Vic3RyaW5nKDAsIDUwKX0uLi5gKTtcbiAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgY29uc29sZS5sb2coJ1JMUyBwb2xpY2llcyBhcHBsaWVkIHN1Y2Nlc3NmdWxseScpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc29sZS53YXJuKCdSTFMgcG9saWNpZXMgZmlsZSBub3QgZm91bmQsIHNraXBwaW5nLi4uJyk7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBhcHBseSBSTFMgcG9saWNpZXM6JywgZXJyb3IpO1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gYXBwbHkgUkxTIHBvbGljaWVzJyk7XG4gICAgfVxuICB9XG5cbiAgLy8gUm9sbGJhY2sgbGFzdCBtaWdyYXRpb24gKGJhc2ljIGltcGxlbWVudGF0aW9uKVxuICBzdGF0aWMgYXN5bmMgcm9sbGJhY2tMYXN0TWlncmF0aW9uKCk6IFByb21pc2U8dm9pZD4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zb2xlLmxvZygnUm9sbGluZyBiYWNrIGxhc3QgbWlncmF0aW9uLi4uJyk7XG4gICAgICBcbiAgICAgIC8vIFRoaXMgaXMgYSBiYXNpYyBpbXBsZW1lbnRhdGlvbiAtIGluIHByb2R1Y3Rpb24geW91J2Qgd2FudCBtb3JlIHNvcGhpc3RpY2F0ZWQgcm9sbGJhY2sgbG9naWNcbiAgICAgIGNvbnNvbGUud2FybignUm9sbGJhY2sgZnVuY3Rpb25hbGl0eSByZXF1aXJlcyBtYW51YWwgaW50ZXJ2ZW50aW9uIGZvciBzYWZldHknKTtcbiAgICAgIGNvbnNvbGUubG9nKCdQbGVhc2UgcmV2aWV3IHRoZSBtaWdyYXRpb24gZmlsZXMgYW5kIG1hbnVhbGx5IHJvbGxiYWNrIGlmIG5lZWRlZCcpO1xuICAgICAgXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ1JvbGxiYWNrIGZhaWxlZDonLCBlcnJvcik7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZhaWxlZCB0byByb2xsYmFjayBtaWdyYXRpb24nKTtcbiAgICB9XG4gIH1cblxuICAvLyBDaGVjayBtaWdyYXRpb24gc3RhdHVzXG4gIHN0YXRpYyBhc3luYyBnZXRNaWdyYXRpb25TdGF0dXMoKTogUHJvbWlzZTx7XG4gICAgYXBwbGllZE1pZ3JhdGlvbnM6IG51bWJlcjtcbiAgICBwZW5kaW5nTWlncmF0aW9uczogc3RyaW5nW107XG4gIH0+IHtcbiAgICB0cnkge1xuICAgICAgLy8gR2V0IGFwcGxpZWQgbWlncmF0aW9ucyBjb3VudFxuICAgICAgY29uc3QgW3Jlc3VsdF0gPSBhd2FpdCBkYi5leGVjdXRlKHNxbGBcbiAgICAgICAgU0VMRUNUIENPVU5UKCopIGFzIGNvdW50IEZST00gX19kcml6emxlX21pZ3JhdGlvbnNcbiAgICAgIGApO1xuICAgICAgXG4gICAgICBjb25zdCBhcHBsaWVkTWlncmF0aW9ucyA9IHJlc3VsdD8uY291bnQgfHwgMDtcbiAgICAgIFxuICAgICAgLy8gR2V0IHBlbmRpbmcgbWlncmF0aW9ucyBieSBjaGVja2luZyB0aGUgZHJpenpsZSBmb2xkZXJcbiAgICAgIGNvbnN0IG1pZ3JhdGlvbnNQYXRoID0gcGF0aC5qb2luKHByb2Nlc3MuY3dkKCksICdkcml6emxlJyk7XG4gICAgICBjb25zdCBwZW5kaW5nTWlncmF0aW9uczogc3RyaW5nW10gPSBbXTtcbiAgICAgIFxuICAgICAgaWYgKGZzLmV4aXN0c1N5bmMobWlncmF0aW9uc1BhdGgpKSB7XG4gICAgICAgIGNvbnN0IGZpbGVzID0gZnMucmVhZGRpclN5bmMobWlncmF0aW9uc1BhdGgpO1xuICAgICAgICBjb25zdCBzcWxGaWxlcyA9IGZpbGVzLmZpbHRlcihmaWxlID0+IGZpbGUuZW5kc1dpdGgoJy5zcWwnKSAmJiAhZmlsZS5pbmNsdWRlcygncmxzLXBvbGljaWVzJykpO1xuICAgICAgICBwZW5kaW5nTWlncmF0aW9ucy5wdXNoKC4uLnNxbEZpbGVzKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgYXBwbGllZE1pZ3JhdGlvbnM6IE51bWJlcihhcHBsaWVkTWlncmF0aW9ucyksXG4gICAgICAgIHBlbmRpbmdNaWdyYXRpb25zXG4gICAgICB9O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gZ2V0IG1pZ3JhdGlvbiBzdGF0dXM6JywgZXJyb3IpO1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gZ2V0IG1pZ3JhdGlvbiBzdGF0dXMnKTtcbiAgICB9XG4gIH1cblxuICAvLyBTZWVkIGluaXRpYWwgZGF0YSAoZm9yIGRldmVsb3BtZW50KVxuICBzdGF0aWMgYXN5bmMgc2VlZEluaXRpYWxEYXRhKCk6IFByb21pc2U8dm9pZD4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zb2xlLmxvZygnU2VlZGluZyBpbml0aWFsIGRhdGEuLi4nKTtcbiAgICAgIFxuICAgICAgLy8gQ2hlY2sgaWYgd2UgYWxyZWFkeSBoYXZlIGRhdGFcbiAgICAgIGNvbnN0IFt1c2VyQ291bnRdID0gYXdhaXQgZGIuZXhlY3V0ZShzcWxgU0VMRUNUIENPVU5UKCopIGFzIGNvdW50IEZST00gdXNlcnNgKTtcbiAgICAgIFxuICAgICAgaWYgKE51bWJlcih1c2VyQ291bnQ/LmNvdW50KSA+IDApIHtcbiAgICAgICAgY29uc29sZS5sb2coJ0RhdGFiYXNlIGFscmVhZHkgaGFzIGRhdGEsIHNraXBwaW5nIHNlZWQnKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBBZGQgc29tZSBjb21tb24gcGxhbnQgdGF4b25vbXkgZGF0YVxuICAgICAgY29uc3QgY29tbW9uUGxhbnRzID0gW1xuICAgICAgICB7XG4gICAgICAgICAgZmFtaWx5OiAnQXJhY2VhZScsXG4gICAgICAgICAgZ2VudXM6ICdNb25zdGVyYScsXG4gICAgICAgICAgc3BlY2llczogJ2RlbGljaW9zYScsXG4gICAgICAgICAgY29tbW9uTmFtZTogJ1N3aXNzIENoZWVzZSBQbGFudCcsXG4gICAgICAgICAgY2FyZUluc3RydWN0aW9uczogJ0JyaWdodCBpbmRpcmVjdCBsaWdodCwgd2F0ZXIgd2hlbiB0b3AgaW5jaCBvZiBzb2lsIGlzIGRyeScsXG4gICAgICAgICAgaXNWZXJpZmllZDogdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgZmFtaWx5OiAnQXJhY2VhZScsXG4gICAgICAgICAgZ2VudXM6ICdQb3Rob3MnLFxuICAgICAgICAgIHNwZWNpZXM6ICdhdXJldXMnLFxuICAgICAgICAgIGNvbW1vbk5hbWU6ICdHb2xkZW4gUG90aG9zJyxcbiAgICAgICAgICBjYXJlSW5zdHJ1Y3Rpb25zOiAnTG93IHRvIGJyaWdodCBpbmRpcmVjdCBsaWdodCwgd2F0ZXIgd2hlbiBzb2lsIGlzIGRyeScsXG4gICAgICAgICAgaXNWZXJpZmllZDogdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgZmFtaWx5OiAnQXNwYXJhZ2FjZWFlJyxcbiAgICAgICAgICBnZW51czogJ1NhbnNldmllcmlhJyxcbiAgICAgICAgICBzcGVjaWVzOiAndHJpZmFzY2lhdGEnLFxuICAgICAgICAgIGNvbW1vbk5hbWU6ICdTbmFrZSBQbGFudCcsXG4gICAgICAgICAgY2FyZUluc3RydWN0aW9uczogJ0xvdyBsaWdodCB0b2xlcmFudCwgd2F0ZXIgc3BhcmluZ2x5JyxcbiAgICAgICAgICBpc1ZlcmlmaWVkOiB0cnVlXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBmYW1pbHk6ICdBcmFjZWFlJyxcbiAgICAgICAgICBnZW51czogJ1BoaWxvZGVuZHJvbicsXG4gICAgICAgICAgc3BlY2llczogJ2hlZGVyYWNldW0nLFxuICAgICAgICAgIGNvbW1vbk5hbWU6ICdIZWFydGxlYWYgUGhpbG9kZW5kcm9uJyxcbiAgICAgICAgICBjYXJlSW5zdHJ1Y3Rpb25zOiAnQnJpZ2h0IGluZGlyZWN0IGxpZ2h0LCBrZWVwIHNvaWwgbGlnaHRseSBtb2lzdCcsXG4gICAgICAgICAgaXNWZXJpZmllZDogdHJ1ZVxuICAgICAgICB9XG4gICAgICBdO1xuXG4gICAgICBmb3IgKGNvbnN0IHBsYW50IG9mIGNvbW1vblBsYW50cykge1xuICAgICAgICBhd2FpdCBkYi5leGVjdXRlKHNxbGBcbiAgICAgICAgICBJTlNFUlQgSU5UTyBwbGFudHMgKGZhbWlseSwgZ2VudXMsIHNwZWNpZXMsIGN1bHRpdmFyLCBjb21tb25fbmFtZSwgY2FyZV9pbnN0cnVjdGlvbnMsIGlzX3ZlcmlmaWVkKVxuICAgICAgICAgIFZBTFVFUyAoJHtwbGFudC5mYW1pbHl9LCAke3BsYW50LmdlbnVzfSwgJHtwbGFudC5zcGVjaWVzfSwgTlVMTCwgJHtwbGFudC5jb21tb25OYW1lfSwgJHtwbGFudC5jYXJlSW5zdHJ1Y3Rpb25zfSwgJHtwbGFudC5pc1ZlcmlmaWVkfSlcbiAgICAgICAgICBPTiBDT05GTElDVCAoZmFtaWx5LCBnZW51cywgc3BlY2llcywgY3VsdGl2YXIpIERPIE5PVEhJTkdcbiAgICAgICAgYCk7XG4gICAgICB9XG5cbiAgICAgIGNvbnNvbGUubG9nKCdJbml0aWFsIGRhdGEgc2VlZGVkIHN1Y2Nlc3NmdWxseScpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gc2VlZCBpbml0aWFsIGRhdGE6JywgZXJyb3IpO1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gc2VlZCBpbml0aWFsIGRhdGEnKTtcbiAgICB9XG4gIH1cblxuICAvLyBEYXRhYmFzZSBoZWFsdGggY2hlY2tcbiAgc3RhdGljIGFzeW5jIGhlYWx0aENoZWNrKCk6IFByb21pc2U8e1xuICAgIGNvbm5lY3RlZDogYm9vbGVhbjtcbiAgICBtaWdyYXRpb25zQXBwbGllZDogYm9vbGVhbjtcbiAgICBybHNFbmFibGVkOiBib29sZWFuO1xuICAgIHRhYmxlc0V4aXN0OiBib29sZWFuO1xuICB9PiB7XG4gICAgdHJ5IHtcbiAgICAgIC8vIENoZWNrIGNvbm5lY3Rpb25cbiAgICAgIGNvbnN0IGNvbm5lY3RlZCA9IGF3YWl0IGRiLmV4ZWN1dGUoc3FsYFNFTEVDVCAxYCkudGhlbigoKSA9PiB0cnVlKS5jYXRjaCgoKSA9PiBmYWxzZSk7XG4gICAgICBcbiAgICAgIC8vIENoZWNrIGlmIG1pZ3JhdGlvbnMgdGFibGUgZXhpc3RzXG4gICAgICBjb25zdCBbbWlncmF0aW9uVGFibGVdID0gYXdhaXQgZGIuZXhlY3V0ZShzcWxgXG4gICAgICAgIFNFTEVDVCBFWElTVFMgKFxuICAgICAgICAgIFNFTEVDVCBGUk9NIGluZm9ybWF0aW9uX3NjaGVtYS50YWJsZXMgXG4gICAgICAgICAgV0hFUkUgdGFibGVfbmFtZSA9ICdfX2RyaXp6bGVfbWlncmF0aW9ucydcbiAgICAgICAgKSBhcyBleGlzdHNcbiAgICAgIGApO1xuICAgICAgY29uc3QgbWlncmF0aW9uc0FwcGxpZWQgPSBCb29sZWFuKG1pZ3JhdGlvblRhYmxlPy5leGlzdHMpIHx8IGZhbHNlO1xuXG4gICAgICAvLyBDaGVjayBpZiBtYWluIHRhYmxlcyBleGlzdFxuICAgICAgY29uc3QgW3RhYmxlc0NoZWNrXSA9IGF3YWl0IGRiLmV4ZWN1dGUoc3FsYFxuICAgICAgICBTRUxFQ1QgXG4gICAgICAgICAgKFNFTEVDVCBDT1VOVCgqKSBGUk9NIGluZm9ybWF0aW9uX3NjaGVtYS50YWJsZXMgV0hFUkUgdGFibGVfbmFtZSBJTiAoJ3VzZXJzJywgJ3BsYW50cycsICdwbGFudF9pbnN0YW5jZXMnLCAncHJvcGFnYXRpb25zJywgJ3Nlc3Npb25zJykpIGFzIHRhYmxlX2NvdW50XG4gICAgICBgKTtcbiAgICAgIGNvbnN0IHRhYmxlc0V4aXN0ID0gTnVtYmVyKHRhYmxlc0NoZWNrPy50YWJsZV9jb3VudCkgPT09IDU7XG5cbiAgICAgIC8vIENoZWNrIGlmIFJMUyBpcyBlbmFibGVkIG9uIHVzZXIgdGFibGVzXG4gICAgICBjb25zdCBbcmxzQ2hlY2tdID0gYXdhaXQgZGIuZXhlY3V0ZShzcWxgXG4gICAgICAgIFNFTEVDVCBDT1VOVCgqKSBhcyBybHNfY291bnRcbiAgICAgICAgRlJPTSBwZ19jbGFzcyBjXG4gICAgICAgIEpPSU4gcGdfbmFtZXNwYWNlIG4gT04gbi5vaWQgPSBjLnJlbG5hbWVzcGFjZVxuICAgICAgICBXSEVSRSBjLnJlbHJvd3NlY3VyaXR5ID0gdHJ1ZSBcbiAgICAgICAgQU5EIG4ubnNwbmFtZSA9ICdwdWJsaWMnXG4gICAgICAgIEFORCBjLnJlbG5hbWUgSU4gKCdwbGFudF9pbnN0YW5jZXMnLCAncHJvcGFnYXRpb25zJywgJ3Nlc3Npb25zJylcbiAgICAgIGApO1xuICAgICAgY29uc3QgcmxzRW5hYmxlZCA9IE51bWJlcihybHNDaGVjaz8ucmxzX2NvdW50KSA9PT0gMztcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgY29ubmVjdGVkLFxuICAgICAgICBtaWdyYXRpb25zQXBwbGllZCxcbiAgICAgICAgcmxzRW5hYmxlZCxcbiAgICAgICAgdGFibGVzRXhpc3RcbiAgICAgIH07XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0hlYWx0aCBjaGVjayBmYWlsZWQ6JywgZXJyb3IpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgY29ubmVjdGVkOiBmYWxzZSxcbiAgICAgICAgbWlncmF0aW9uc0FwcGxpZWQ6IGZhbHNlLFxuICAgICAgICBybHNFbmFibGVkOiBmYWxzZSxcbiAgICAgICAgdGFibGVzRXhpc3Q6IGZhbHNlXG4gICAgICB9O1xuICAgIH1cbiAgfVxufSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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