95b2aaa0f49a9545cdf079fc70fb4473
"use strict";

/* istanbul ignore next */
function cov_23aoxm7wia() {
  var path = "/Users/stefanbekker/projects/fancy-planties/src/app/api/plants/route.ts";
  var hash = "d72ea84a66a5d0ca127fb28594ff5bce11b50fdd";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/stefanbekker/projects/fancy-planties/src/app/api/plants/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 18,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 19
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 20
        }
      },
      "6": {
        start: {
          line: 19,
          column: 16
        },
        end: {
          line: 19,
          column: 38
        }
      },
      "7": {
        start: {
          line: 20,
          column: 17
        },
        end: {
          line: 20,
          column: 52
        }
      },
      "8": {
        start: {
          line: 21,
          column: 23
        },
        end: {
          line: 21,
          column: 72
        }
      },
      "9": {
        start: {
          line: 22,
          column: 22
        },
        end: {
          line: 22,
          column: 70
        }
      },
      "10": {
        start: {
          line: 23,
          column: 13
        },
        end: {
          line: 23,
          column: 27
        }
      },
      "11": {
        start: {
          line: 25,
          column: 4
        },
        end: {
          line: 69,
          column: 5
        }
      },
      "12": {
        start: {
          line: 26,
          column: 25
        },
        end: {
          line: 26,
          column: 62
        }
      },
      "13": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 33,
          column: 9
        }
      },
      "14": {
        start: {
          line: 28,
          column: 12
        },
        end: {
          line: 32,
          column: 15
        }
      },
      "15": {
        start: {
          line: 34,
          column: 33
        },
        end: {
          line: 34,
          column: 53
        }
      },
      "16": {
        start: {
          line: 35,
          column: 29
        },
        end: {
          line: 42,
          column: 9
        }
      },
      "17": {
        start: {
          line: 43,
          column: 32
        },
        end: {
          line: 43,
          column: 83
        }
      },
      "18": {
        start: {
          line: 44,
          column: 23
        },
        end: {
          line: 44,
          column: 93
        }
      },
      "19": {
        start: {
          line: 45,
          column: 8
        },
        end: {
          line: 53,
          column: 11
        }
      },
      "20": {
        start: {
          line: 55,
          column: 8
        },
        end: {
          line: 55,
          column: 55
        }
      },
      "21": {
        start: {
          line: 56,
          column: 8
        },
        end: {
          line: 63,
          column: 9
        }
      },
      "22": {
        start: {
          line: 57,
          column: 12
        },
        end: {
          line: 62,
          column: 15
        }
      },
      "23": {
        start: {
          line: 64,
          column: 8
        },
        end: {
          line: 68,
          column: 11
        }
      },
      "24": {
        start: {
          line: 72,
          column: 4
        },
        end: {
          line: 121,
          column: 5
        }
      },
      "25": {
        start: {
          line: 73,
          column: 25
        },
        end: {
          line: 73,
          column: 62
        }
      },
      "26": {
        start: {
          line: 74,
          column: 8
        },
        end: {
          line: 80,
          column: 9
        }
      },
      "27": {
        start: {
          line: 75,
          column: 12
        },
        end: {
          line: 79,
          column: 15
        }
      },
      "28": {
        start: {
          line: 81,
          column: 21
        },
        end: {
          line: 81,
          column: 41
        }
      },
      "29": {
        start: {
          line: 82,
          column: 30
        },
        end: {
          line: 82,
          column: 73
        }
      },
      "30": {
        start: {
          line: 84,
          column: 27
        },
        end: {
          line: 84,
          column: 89
        }
      },
      "31": {
        start: {
          line: 85,
          column: 8
        },
        end: {
          line: 93,
          column: 9
        }
      },
      "32": {
        start: {
          line: 86,
          column: 12
        },
        end: {
          line: 92,
          column: 15
        }
      },
      "33": {
        start: {
          line: 94,
          column: 25
        },
        end: {
          line: 94,
          column: 86
        }
      },
      "34": {
        start: {
          line: 95,
          column: 8
        },
        end: {
          line: 105,
          column: 11
        }
      },
      "35": {
        start: {
          line: 107,
          column: 8
        },
        end: {
          line: 107,
          column: 54
        }
      },
      "36": {
        start: {
          line: 108,
          column: 8
        },
        end: {
          line: 115,
          column: 9
        }
      },
      "37": {
        start: {
          line: 109,
          column: 12
        },
        end: {
          line: 114,
          column: 15
        }
      },
      "38": {
        start: {
          line: 116,
          column: 8
        },
        end: {
          line: 120,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        },
        loc: {
          start: {
            line: 12,
            column: 15
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 16
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "GET",
        decl: {
          start: {
            line: 24,
            column: 15
          },
          end: {
            line: 24,
            column: 18
          }
        },
        loc: {
          start: {
            line: 24,
            column: 28
          },
          end: {
            line: 70,
            column: 1
          }
        },
        line: 24
      },
      "4": {
        name: "POST",
        decl: {
          start: {
            line: 71,
            column: 15
          },
          end: {
            line: 71,
            column: 19
          }
        },
        loc: {
          start: {
            line: 71,
            column: 29
          },
          end: {
            line: 122,
            column: 1
          }
        },
        line: 71
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 27,
            column: 8
          },
          end: {
            line: 33,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 27,
            column: 8
          },
          end: {
            line: 33,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 27
      },
      "1": {
        loc: {
          start: {
            line: 36,
            column: 20
          },
          end: {
            line: 36,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 36,
            column: 20
          },
          end: {
            line: 36,
            column: 46
          }
        }, {
          start: {
            line: 36,
            column: 50
          },
          end: {
            line: 36,
            column: 59
          }
        }],
        line: 36
      },
      "2": {
        loc: {
          start: {
            line: 37,
            column: 19
          },
          end: {
            line: 37,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 37,
            column: 19
          },
          end: {
            line: 37,
            column: 44
          }
        }, {
          start: {
            line: 37,
            column: 48
          },
          end: {
            line: 37,
            column: 57
          }
        }],
        line: 37
      },
      "3": {
        loc: {
          start: {
            line: 38,
            column: 24
          },
          end: {
            line: 38,
            column: 110
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 38,
            column: 57
          },
          end: {
            line: 38,
            column: 98
          }
        }, {
          start: {
            line: 38,
            column: 101
          },
          end: {
            line: 38,
            column: 110
          }
        }],
        line: 38
      },
      "4": {
        loc: {
          start: {
            line: 39,
            column: 23
          },
          end: {
            line: 39,
            column: 110
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 39,
            column: 55
          },
          end: {
            line: 39,
            column: 98
          }
        }, {
          start: {
            line: 39,
            column: 101
          },
          end: {
            line: 39,
            column: 110
          }
        }],
        line: 39
      },
      "5": {
        loc: {
          start: {
            line: 40,
            column: 19
          },
          end: {
            line: 40,
            column: 91
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 40,
            column: 47
          },
          end: {
            line: 40,
            column: 86
          }
        }, {
          start: {
            line: 40,
            column: 89
          },
          end: {
            line: 40,
            column: 91
          }
        }],
        line: 40
      },
      "6": {
        loc: {
          start: {
            line: 41,
            column: 20
          },
          end: {
            line: 41,
            column: 93
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 41,
            column: 49
          },
          end: {
            line: 41,
            column: 89
          }
        }, {
          start: {
            line: 41,
            column: 92
          },
          end: {
            line: 41,
            column: 93
          }
        }],
        line: 41
      },
      "7": {
        loc: {
          start: {
            line: 56,
            column: 8
          },
          end: {
            line: 63,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 56,
            column: 8
          },
          end: {
            line: 63,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 56
      },
      "8": {
        loc: {
          start: {
            line: 74,
            column: 8
          },
          end: {
            line: 80,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 74,
            column: 8
          },
          end: {
            line: 80,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 74
      },
      "9": {
        loc: {
          start: {
            line: 85,
            column: 8
          },
          end: {
            line: 93,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 85,
            column: 8
          },
          end: {
            line: 93,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 85
      },
      "10": {
        loc: {
          start: {
            line: 108,
            column: 8
          },
          end: {
            line: 115,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 108,
            column: 8
          },
          end: {
            line: 115,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 108
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/stefanbekker/projects/fancy-planties/src/app/api/plants/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport { validateRequest } from '@/lib/auth/server';\nimport { \n  createPlant, \n  getPlantsWithStats, \n  validatePlantTaxonomy \n} from '@/lib/db/queries/plant-taxonomy';\nimport { \n  createPlantSchema, \n  plantFilterSchema \n} from '@/lib/validation/plant-schemas';\nimport { ZodError } from 'zod';\n\n// GET /api/plants - Get plants with optional filtering\nexport async function GET(request: NextRequest) {\n  try {\n    const { user } = await validateRequest();\n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const { searchParams } = new URL(request.url);\n    const filterParams = {\n      family: searchParams.get('family') || undefined,\n      genus: searchParams.get('genus') || undefined,\n      isVerified: searchParams.get('isVerified') ? searchParams.get('isVerified') === 'true' : undefined,\n      createdBy: searchParams.get('createdBy') ? parseInt(searchParams.get('createdBy')!, 10) : undefined,\n      limit: searchParams.get('limit') ? parseInt(searchParams.get('limit')!, 10) : 20,\n      offset: searchParams.get('offset') ? parseInt(searchParams.get('offset')!, 10) : 0,\n    };\n\n    const validatedFilter = plantFilterSchema.parse(filterParams);\n    const plants = await getPlantsWithStats(validatedFilter, user.id);\n\n    return NextResponse.json({\n      success: true,\n      data: plants,\n      metadata: {\n        operation: 'search',\n        timestamp: new Date(),\n        userId: user.id,\n      },\n    });\n  } catch (error) {\n    console.error('Error fetching plants:', error);\n    \n    if (error instanceof ZodError) {\n      return NextResponse.json(\n        { \n          error: 'Invalid filter parameters', \n          details: error.issues \n        }, \n        { status: 400 }\n      );\n    }\n\n    return NextResponse.json(\n      { error: 'Internal server error' }, \n      { status: 500 }\n    );\n  }\n}\n\n// POST /api/plants - Create a new plant taxonomy entry\nexport async function POST(request: NextRequest) {\n  try {\n    const { user } = await validateRequest();\n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const body = await request.json();\n    const validatedData = createPlantSchema.parse(body);\n\n    // Validate taxonomy for duplicates\n    const validation = await validatePlantTaxonomy(validatedData);\n    if (!validation.isValid) {\n      return NextResponse.json(\n        { \n          error: 'Validation failed', \n          details: validation.errors,\n          duplicates: validation.duplicates \n        }, \n        { status: 409 }\n      );\n    }\n\n    const newPlant = await createPlant(validatedData, user.id);\n\n    return NextResponse.json({\n      success: true,\n      data: newPlant,\n      metadata: {\n        operation: 'create',\n        timestamp: new Date(),\n        userId: user.id,\n      },\n    }, { status: 201 });\n  } catch (error) {\n    console.error('Error creating plant:', error);\n    \n    if (error instanceof ZodError) {\n      return NextResponse.json(\n        { \n          error: 'Invalid plant data', \n          details: error.issues \n        }, \n        { status: 400 }\n      );\n    }\n\n    return NextResponse.json(\n      { error: 'Internal server error' }, \n      { status: 500 }\n    );\n  }\n}"],
      names: ["GET", "POST", "request", "user", "validateRequest", "NextResponse", "json", "error", "status", "searchParams", "URL", "url", "filterParams", "family", "get", "undefined", "genus", "isVerified", "createdBy", "parseInt", "limit", "offset", "validatedFilter", "plantFilterSchema", "parse", "plants", "getPlantsWithStats", "id", "success", "data", "metadata", "operation", "timestamp", "Date", "userId", "console", "ZodError", "details", "issues", "body", "validatedData", "createPlantSchema", "validation", "validatePlantTaxonomy", "isValid", "errors", "duplicates", "newPlant", "createPlant"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "d72ea84a66a5d0ca127fb28594ff5bce11b50fdd"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_23aoxm7wia = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_23aoxm7wia();
cov_23aoxm7wia().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_23aoxm7wia().f[0]++;
  cov_23aoxm7wia().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_23aoxm7wia().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_23aoxm7wia().s[3]++;
_export(exports, {
  get GET() {
    /* istanbul ignore next */
    cov_23aoxm7wia().f[1]++;
    cov_23aoxm7wia().s[4]++;
    return GET;
  },
  get POST() {
    /* istanbul ignore next */
    cov_23aoxm7wia().f[2]++;
    cov_23aoxm7wia().s[5]++;
    return POST;
  }
});
const _server =
/* istanbul ignore next */
(cov_23aoxm7wia().s[6]++, require("next/server"));
const _server1 =
/* istanbul ignore next */
(cov_23aoxm7wia().s[7]++, require("../../../lib/auth/server"));
const _planttaxonomy =
/* istanbul ignore next */
(cov_23aoxm7wia().s[8]++, require("../../../lib/db/queries/plant-taxonomy"));
const _plantschemas =
/* istanbul ignore next */
(cov_23aoxm7wia().s[9]++, require("../../../lib/validation/plant-schemas"));
const _zod =
/* istanbul ignore next */
(cov_23aoxm7wia().s[10]++, require("zod"));
async function GET(request) {
  /* istanbul ignore next */
  cov_23aoxm7wia().f[3]++;
  cov_23aoxm7wia().s[11]++;
  try {
    const {
      user
    } =
    /* istanbul ignore next */
    (cov_23aoxm7wia().s[12]++, await (0, _server1.validateRequest)());
    /* istanbul ignore next */
    cov_23aoxm7wia().s[13]++;
    if (!user) {
      /* istanbul ignore next */
      cov_23aoxm7wia().b[0][0]++;
      cov_23aoxm7wia().s[14]++;
      return _server.NextResponse.json({
        error: 'Unauthorized'
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_23aoxm7wia().b[0][1]++;
    }
    const {
      searchParams
    } =
    /* istanbul ignore next */
    (cov_23aoxm7wia().s[15]++, new URL(request.url));
    const filterParams =
    /* istanbul ignore next */
    (cov_23aoxm7wia().s[16]++, {
      family:
      /* istanbul ignore next */
      (cov_23aoxm7wia().b[1][0]++, searchParams.get('family')) ||
      /* istanbul ignore next */
      (cov_23aoxm7wia().b[1][1]++, undefined),
      genus:
      /* istanbul ignore next */
      (cov_23aoxm7wia().b[2][0]++, searchParams.get('genus')) ||
      /* istanbul ignore next */
      (cov_23aoxm7wia().b[2][1]++, undefined),
      isVerified: searchParams.get('isVerified') ?
      /* istanbul ignore next */
      (cov_23aoxm7wia().b[3][0]++, searchParams.get('isVerified') === 'true') :
      /* istanbul ignore next */
      (cov_23aoxm7wia().b[3][1]++, undefined),
      createdBy: searchParams.get('createdBy') ?
      /* istanbul ignore next */
      (cov_23aoxm7wia().b[4][0]++, parseInt(searchParams.get('createdBy'), 10)) :
      /* istanbul ignore next */
      (cov_23aoxm7wia().b[4][1]++, undefined),
      limit: searchParams.get('limit') ?
      /* istanbul ignore next */
      (cov_23aoxm7wia().b[5][0]++, parseInt(searchParams.get('limit'), 10)) :
      /* istanbul ignore next */
      (cov_23aoxm7wia().b[5][1]++, 20),
      offset: searchParams.get('offset') ?
      /* istanbul ignore next */
      (cov_23aoxm7wia().b[6][0]++, parseInt(searchParams.get('offset'), 10)) :
      /* istanbul ignore next */
      (cov_23aoxm7wia().b[6][1]++, 0)
    });
    const validatedFilter =
    /* istanbul ignore next */
    (cov_23aoxm7wia().s[17]++, _plantschemas.plantFilterSchema.parse(filterParams));
    const plants =
    /* istanbul ignore next */
    (cov_23aoxm7wia().s[18]++, await (0, _planttaxonomy.getPlantsWithStats)(validatedFilter, user.id));
    /* istanbul ignore next */
    cov_23aoxm7wia().s[19]++;
    return _server.NextResponse.json({
      success: true,
      data: plants,
      metadata: {
        operation: 'search',
        timestamp: new Date(),
        userId: user.id
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_23aoxm7wia().s[20]++;
    console.error('Error fetching plants:', error);
    /* istanbul ignore next */
    cov_23aoxm7wia().s[21]++;
    if (error instanceof _zod.ZodError) {
      /* istanbul ignore next */
      cov_23aoxm7wia().b[7][0]++;
      cov_23aoxm7wia().s[22]++;
      return _server.NextResponse.json({
        error: 'Invalid filter parameters',
        details: error.issues
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_23aoxm7wia().b[7][1]++;
    }
    cov_23aoxm7wia().s[23]++;
    return _server.NextResponse.json({
      error: 'Internal server error'
    }, {
      status: 500
    });
  }
}
async function POST(request) {
  /* istanbul ignore next */
  cov_23aoxm7wia().f[4]++;
  cov_23aoxm7wia().s[24]++;
  try {
    const {
      user
    } =
    /* istanbul ignore next */
    (cov_23aoxm7wia().s[25]++, await (0, _server1.validateRequest)());
    /* istanbul ignore next */
    cov_23aoxm7wia().s[26]++;
    if (!user) {
      /* istanbul ignore next */
      cov_23aoxm7wia().b[8][0]++;
      cov_23aoxm7wia().s[27]++;
      return _server.NextResponse.json({
        error: 'Unauthorized'
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_23aoxm7wia().b[8][1]++;
    }
    const body =
    /* istanbul ignore next */
    (cov_23aoxm7wia().s[28]++, await request.json());
    const validatedData =
    /* istanbul ignore next */
    (cov_23aoxm7wia().s[29]++, _plantschemas.createPlantSchema.parse(body));
    // Validate taxonomy for duplicates
    const validation =
    /* istanbul ignore next */
    (cov_23aoxm7wia().s[30]++, await (0, _planttaxonomy.validatePlantTaxonomy)(validatedData));
    /* istanbul ignore next */
    cov_23aoxm7wia().s[31]++;
    if (!validation.isValid) {
      /* istanbul ignore next */
      cov_23aoxm7wia().b[9][0]++;
      cov_23aoxm7wia().s[32]++;
      return _server.NextResponse.json({
        error: 'Validation failed',
        details: validation.errors,
        duplicates: validation.duplicates
      }, {
        status: 409
      });
    } else
    /* istanbul ignore next */
    {
      cov_23aoxm7wia().b[9][1]++;
    }
    const newPlant =
    /* istanbul ignore next */
    (cov_23aoxm7wia().s[33]++, await (0, _planttaxonomy.createPlant)(validatedData, user.id));
    /* istanbul ignore next */
    cov_23aoxm7wia().s[34]++;
    return _server.NextResponse.json({
      success: true,
      data: newPlant,
      metadata: {
        operation: 'create',
        timestamp: new Date(),
        userId: user.id
      }
    }, {
      status: 201
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_23aoxm7wia().s[35]++;
    console.error('Error creating plant:', error);
    /* istanbul ignore next */
    cov_23aoxm7wia().s[36]++;
    if (error instanceof _zod.ZodError) {
      /* istanbul ignore next */
      cov_23aoxm7wia().b[10][0]++;
      cov_23aoxm7wia().s[37]++;
      return _server.NextResponse.json({
        error: 'Invalid plant data',
        details: error.issues
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_23aoxm7wia().b[10][1]++;
    }
    cov_23aoxm7wia().s[38]++;
    return _server.NextResponse.json({
      error: 'Internal server error'
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,