83d1e328d4de436cdec067f5b2554d28
"use strict";

/* istanbul ignore next */
function cov_1ivckoayjy() {
  var path = "/Users/stefanbekker/projects/fancy-planties/src/app/api/plants/search/route.ts";
  var hash = "9834ec208ea19c9e96f37970e86216e634a5cba8";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/stefanbekker/projects/fancy-planties/src/app/api/plants/search/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 18,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 19
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 20
        }
      },
      "6": {
        start: {
          line: 19,
          column: 16
        },
        end: {
          line: 19,
          column: 38
        }
      },
      "7": {
        start: {
          line: 20,
          column: 17
        },
        end: {
          line: 20,
          column: 55
        }
      },
      "8": {
        start: {
          line: 21,
          column: 21
        },
        end: {
          line: 21,
          column: 69
        }
      },
      "9": {
        start: {
          line: 22,
          column: 22
        },
        end: {
          line: 22,
          column: 73
        }
      },
      "10": {
        start: {
          line: 23,
          column: 13
        },
        end: {
          line: 23,
          column: 27
        }
      },
      "11": {
        start: {
          line: 25,
          column: 4
        },
        end: {
          line: 91,
          column: 5
        }
      },
      "12": {
        start: {
          line: 26,
          column: 25
        },
        end: {
          line: 26,
          column: 62
        }
      },
      "13": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 33,
          column: 9
        }
      },
      "14": {
        start: {
          line: 28,
          column: 12
        },
        end: {
          line: 32,
          column: 15
        }
      },
      "15": {
        start: {
          line: 34,
          column: 33
        },
        end: {
          line: 34,
          column: 53
        }
      },
      "16": {
        start: {
          line: 35,
          column: 27
        },
        end: {
          line: 42,
          column: 9
        }
      },
      "17": {
        start: {
          line: 43,
          column: 8
        },
        end: {
          line: 49,
          column: 9
        }
      },
      "18": {
        start: {
          line: 44,
          column: 12
        },
        end: {
          line: 48,
          column: 15
        }
      },
      "19": {
        start: {
          line: 50,
          column: 32
        },
        end: {
          line: 50,
          column: 81
        }
      },
      "20": {
        start: {
          line: 51,
          column: 24
        },
        end: {
          line: 61,
          column: 9
        }
      },
      "21": {
        start: {
          line: 62,
          column: 24
        },
        end: {
          line: 62,
          column: 100
        }
      },
      "22": {
        start: {
          line: 63,
          column: 8
        },
        end: {
          line: 75,
          column: 11
        }
      },
      "23": {
        start: {
          line: 77,
          column: 8
        },
        end: {
          line: 77,
          column: 56
        }
      },
      "24": {
        start: {
          line: 78,
          column: 8
        },
        end: {
          line: 85,
          column: 9
        }
      },
      "25": {
        start: {
          line: 79,
          column: 12
        },
        end: {
          line: 84,
          column: 15
        }
      },
      "26": {
        start: {
          line: 86,
          column: 8
        },
        end: {
          line: 90,
          column: 11
        }
      },
      "27": {
        start: {
          line: 94,
          column: 4
        },
        end: {
          line: 128,
          column: 5
        }
      },
      "28": {
        start: {
          line: 95,
          column: 25
        },
        end: {
          line: 95,
          column: 62
        }
      },
      "29": {
        start: {
          line: 96,
          column: 8
        },
        end: {
          line: 102,
          column: 9
        }
      },
      "30": {
        start: {
          line: 97,
          column: 12
        },
        end: {
          line: 101,
          column: 15
        }
      },
      "31": {
        start: {
          line: 103,
          column: 21
        },
        end: {
          line: 103,
          column: 41
        }
      },
      "32": {
        start: {
          line: 104,
          column: 24
        },
        end: {
          line: 107,
          column: 10
        }
      },
      "33": {
        start: {
          line: 108,
          column: 8
        },
        end: {
          line: 120,
          column: 11
        }
      },
      "34": {
        start: {
          line: 122,
          column: 8
        },
        end: {
          line: 122,
          column: 58
        }
      },
      "35": {
        start: {
          line: 123,
          column: 8
        },
        end: {
          line: 127,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        },
        loc: {
          start: {
            line: 12,
            column: 15
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 16
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "GET",
        decl: {
          start: {
            line: 24,
            column: 15
          },
          end: {
            line: 24,
            column: 18
          }
        },
        loc: {
          start: {
            line: 24,
            column: 28
          },
          end: {
            line: 92,
            column: 1
          }
        },
        line: 24
      },
      "4": {
        name: "POST",
        decl: {
          start: {
            line: 93,
            column: 15
          },
          end: {
            line: 93,
            column: 19
          }
        },
        loc: {
          start: {
            line: 93,
            column: 29
          },
          end: {
            line: 129,
            column: 1
          }
        },
        line: 93
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 27,
            column: 8
          },
          end: {
            line: 33,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 27,
            column: 8
          },
          end: {
            line: 33,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 27
      },
      "1": {
        loc: {
          start: {
            line: 36,
            column: 19
          },
          end: {
            line: 36,
            column: 75
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 36,
            column: 19
          },
          end: {
            line: 36,
            column: 40
          }
        }, {
          start: {
            line: 36,
            column: 44
          },
          end: {
            line: 36,
            column: 69
          }
        }, {
          start: {
            line: 36,
            column: 73
          },
          end: {
            line: 36,
            column: 75
          }
        }],
        line: 36
      },
      "2": {
        loc: {
          start: {
            line: 37,
            column: 19
          },
          end: {
            line: 37,
            column: 91
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 37,
            column: 47
          },
          end: {
            line: 37,
            column: 86
          }
        }, {
          start: {
            line: 37,
            column: 89
          },
          end: {
            line: 37,
            column: 91
          }
        }],
        line: 37
      },
      "3": {
        loc: {
          start: {
            line: 38,
            column: 20
          },
          end: {
            line: 38,
            column: 93
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 38,
            column: 49
          },
          end: {
            line: 38,
            column: 89
          }
        }, {
          start: {
            line: 38,
            column: 92
          },
          end: {
            line: 38,
            column: 93
          }
        }],
        line: 38
      },
      "4": {
        loc: {
          start: {
            line: 40,
            column: 26
          },
          end: {
            line: 40,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 40,
            column: 26
          },
          end: {
            line: 40,
            column: 52
          }
        }, {
          start: {
            line: 40,
            column: 56
          },
          end: {
            line: 40,
            column: 65
          }
        }],
        line: 40
      },
      "5": {
        loc: {
          start: {
            line: 41,
            column: 25
          },
          end: {
            line: 41,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 41,
            column: 25
          },
          end: {
            line: 41,
            column: 50
          }
        }, {
          start: {
            line: 41,
            column: 54
          },
          end: {
            line: 41,
            column: 63
          }
        }],
        line: 41
      },
      "6": {
        loc: {
          start: {
            line: 43,
            column: 8
          },
          end: {
            line: 49,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 43,
            column: 8
          },
          end: {
            line: 49,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 43
      },
      "7": {
        loc: {
          start: {
            line: 55,
            column: 28
          },
          end: {
            line: 55,
            column: 86
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 55,
            column: 70
          },
          end: {
            line: 55,
            column: 74
          }
        }, {
          start: {
            line: 55,
            column: 77
          },
          end: {
            line: 55,
            column: 86
          }
        }],
        line: 55
      },
      "8": {
        loc: {
          start: {
            line: 78,
            column: 8
          },
          end: {
            line: 85,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 78,
            column: 8
          },
          end: {
            line: 85,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 78
      },
      "9": {
        loc: {
          start: {
            line: 96,
            column: 8
          },
          end: {
            line: 102,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 96,
            column: 8
          },
          end: {
            line: 102,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 96
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/stefanbekker/projects/fancy-planties/src/app/api/plants/search/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport { validateRequest } from '@/lib/auth/server';\nimport { plantSearchService } from '@/lib/services/plant-search';\nimport { plantSearchSchema } from '@/lib/validation/plant-schemas';\nimport { ZodError } from 'zod';\n\n// GET /api/plants/search - Search plants with fuzzy matching\nexport async function GET(request: NextRequest) {\n  try {\n    const { user } = await validateRequest();\n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const { searchParams } = new URL(request.url);\n    const searchData = {\n      query: searchParams.get('q') || searchParams.get('query') || '',\n      limit: searchParams.get('limit') ? parseInt(searchParams.get('limit')!, 10) : 20,\n      offset: searchParams.get('offset') ? parseInt(searchParams.get('offset')!, 10) : 0,\n      includeUnverified: searchParams.get('includeUnverified') !== 'false',\n      familyFilter: searchParams.get('family') || undefined,\n      genusFilter: searchParams.get('genus') || undefined,\n    };\n\n    if (!searchData.query) {\n      return NextResponse.json(\n        { error: 'Search query is required' }, \n        { status: 400 }\n      );\n    }\n\n    const validatedSearch = plantSearchSchema.parse(searchData);\n    \n    const options = {\n      filters: {\n        family: searchData.familyFilter,\n        genus: searchData.genusFilter,\n        isVerified: searchParams.get('verified') === 'true' ? true : undefined,\n      },\n      userContext: {\n        userId: user.id,\n        includeUserPlants: searchParams.get('includeUserPlants') !== 'false',\n      },\n    };\n\n    const results = await plantSearchService.hybridSearch(validatedSearch, options);\n\n    return NextResponse.json({\n      success: true,\n      data: results,\n      metadata: {\n        operation: 'search',\n        timestamp: new Date(),\n        userId: user.id,\n        performance: {\n          queryTime: results.searchTime,\n          cacheHit: !plantSearchService.getCacheStats().needsRefresh,\n        },\n      },\n    });\n  } catch (error) {\n    console.error('Error searching plants:', error);\n    \n    if (error instanceof ZodError) {\n      return NextResponse.json(\n        { \n          error: 'Invalid search parameters', \n          details: error.issues \n        }, \n        { status: 400 }\n      );\n    }\n\n    return NextResponse.json(\n      { error: 'Internal server error' }, \n      { status: 500 }\n    );\n  }\n}\n\n// POST /api/plants/search - Advanced search with multiple criteria\nexport async function POST(request: NextRequest) {\n  try {\n    const { user } = await validateRequest();\n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const body = await request.json();\n    const results = await plantSearchService.advancedSearch({\n      ...body,\n      userId: user.id,\n    });\n\n    return NextResponse.json({\n      success: true,\n      data: results,\n      metadata: {\n        operation: 'advanced_search',\n        timestamp: new Date(),\n        userId: user.id,\n        performance: {\n          queryTime: results.searchTime,\n          cacheHit: !plantSearchService.getCacheStats().needsRefresh,\n        },\n      },\n    });\n  } catch (error) {\n    console.error('Error in advanced search:', error);\n    \n    return NextResponse.json(\n      { error: 'Internal server error' }, \n      { status: 500 }\n    );\n  }\n}"],
      names: ["GET", "POST", "request", "user", "validateRequest", "NextResponse", "json", "error", "status", "searchParams", "URL", "url", "searchData", "query", "get", "limit", "parseInt", "offset", "includeUnverified", "familyFilter", "undefined", "genusFilter", "validatedSearch", "plantSearchSchema", "parse", "options", "filters", "family", "genus", "isVerified", "userContext", "userId", "id", "includeUserPlants", "results", "plantSearchService", "hybridSearch", "success", "data", "metadata", "operation", "timestamp", "Date", "performance", "queryTime", "searchTime", "cacheHit", "getCacheStats", "needsRefresh", "console", "ZodError", "details", "issues", "body", "advancedSearch"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "9834ec208ea19c9e96f37970e86216e634a5cba8"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1ivckoayjy = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1ivckoayjy();
cov_1ivckoayjy().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_1ivckoayjy().f[0]++;
  cov_1ivckoayjy().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_1ivckoayjy().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_1ivckoayjy().s[3]++;
_export(exports, {
  get GET() {
    /* istanbul ignore next */
    cov_1ivckoayjy().f[1]++;
    cov_1ivckoayjy().s[4]++;
    return GET;
  },
  get POST() {
    /* istanbul ignore next */
    cov_1ivckoayjy().f[2]++;
    cov_1ivckoayjy().s[5]++;
    return POST;
  }
});
const _server =
/* istanbul ignore next */
(cov_1ivckoayjy().s[6]++, require("next/server"));
const _server1 =
/* istanbul ignore next */
(cov_1ivckoayjy().s[7]++, require("../../../../lib/auth/server"));
const _plantsearch =
/* istanbul ignore next */
(cov_1ivckoayjy().s[8]++, require("../../../../lib/services/plant-search"));
const _plantschemas =
/* istanbul ignore next */
(cov_1ivckoayjy().s[9]++, require("../../../../lib/validation/plant-schemas"));
const _zod =
/* istanbul ignore next */
(cov_1ivckoayjy().s[10]++, require("zod"));
async function GET(request) {
  /* istanbul ignore next */
  cov_1ivckoayjy().f[3]++;
  cov_1ivckoayjy().s[11]++;
  try {
    const {
      user
    } =
    /* istanbul ignore next */
    (cov_1ivckoayjy().s[12]++, await (0, _server1.validateRequest)());
    /* istanbul ignore next */
    cov_1ivckoayjy().s[13]++;
    if (!user) {
      /* istanbul ignore next */
      cov_1ivckoayjy().b[0][0]++;
      cov_1ivckoayjy().s[14]++;
      return _server.NextResponse.json({
        error: 'Unauthorized'
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_1ivckoayjy().b[0][1]++;
    }
    const {
      searchParams
    } =
    /* istanbul ignore next */
    (cov_1ivckoayjy().s[15]++, new URL(request.url));
    const searchData =
    /* istanbul ignore next */
    (cov_1ivckoayjy().s[16]++, {
      query:
      /* istanbul ignore next */
      (cov_1ivckoayjy().b[1][0]++, searchParams.get('q')) ||
      /* istanbul ignore next */
      (cov_1ivckoayjy().b[1][1]++, searchParams.get('query')) ||
      /* istanbul ignore next */
      (cov_1ivckoayjy().b[1][2]++, ''),
      limit: searchParams.get('limit') ?
      /* istanbul ignore next */
      (cov_1ivckoayjy().b[2][0]++, parseInt(searchParams.get('limit'), 10)) :
      /* istanbul ignore next */
      (cov_1ivckoayjy().b[2][1]++, 20),
      offset: searchParams.get('offset') ?
      /* istanbul ignore next */
      (cov_1ivckoayjy().b[3][0]++, parseInt(searchParams.get('offset'), 10)) :
      /* istanbul ignore next */
      (cov_1ivckoayjy().b[3][1]++, 0),
      includeUnverified: searchParams.get('includeUnverified') !== 'false',
      familyFilter:
      /* istanbul ignore next */
      (cov_1ivckoayjy().b[4][0]++, searchParams.get('family')) ||
      /* istanbul ignore next */
      (cov_1ivckoayjy().b[4][1]++, undefined),
      genusFilter:
      /* istanbul ignore next */
      (cov_1ivckoayjy().b[5][0]++, searchParams.get('genus')) ||
      /* istanbul ignore next */
      (cov_1ivckoayjy().b[5][1]++, undefined)
    });
    /* istanbul ignore next */
    cov_1ivckoayjy().s[17]++;
    if (!searchData.query) {
      /* istanbul ignore next */
      cov_1ivckoayjy().b[6][0]++;
      cov_1ivckoayjy().s[18]++;
      return _server.NextResponse.json({
        error: 'Search query is required'
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1ivckoayjy().b[6][1]++;
    }
    const validatedSearch =
    /* istanbul ignore next */
    (cov_1ivckoayjy().s[19]++, _plantschemas.plantSearchSchema.parse(searchData));
    const options =
    /* istanbul ignore next */
    (cov_1ivckoayjy().s[20]++, {
      filters: {
        family: searchData.familyFilter,
        genus: searchData.genusFilter,
        isVerified: searchParams.get('verified') === 'true' ?
        /* istanbul ignore next */
        (cov_1ivckoayjy().b[7][0]++, true) :
        /* istanbul ignore next */
        (cov_1ivckoayjy().b[7][1]++, undefined)
      },
      userContext: {
        userId: user.id,
        includeUserPlants: searchParams.get('includeUserPlants') !== 'false'
      }
    });
    const results =
    /* istanbul ignore next */
    (cov_1ivckoayjy().s[21]++, await _plantsearch.plantSearchService.hybridSearch(validatedSearch, options));
    /* istanbul ignore next */
    cov_1ivckoayjy().s[22]++;
    return _server.NextResponse.json({
      success: true,
      data: results,
      metadata: {
        operation: 'search',
        timestamp: new Date(),
        userId: user.id,
        performance: {
          queryTime: results.searchTime,
          cacheHit: !_plantsearch.plantSearchService.getCacheStats().needsRefresh
        }
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1ivckoayjy().s[23]++;
    console.error('Error searching plants:', error);
    /* istanbul ignore next */
    cov_1ivckoayjy().s[24]++;
    if (error instanceof _zod.ZodError) {
      /* istanbul ignore next */
      cov_1ivckoayjy().b[8][0]++;
      cov_1ivckoayjy().s[25]++;
      return _server.NextResponse.json({
        error: 'Invalid search parameters',
        details: error.issues
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1ivckoayjy().b[8][1]++;
    }
    cov_1ivckoayjy().s[26]++;
    return _server.NextResponse.json({
      error: 'Internal server error'
    }, {
      status: 500
    });
  }
}
async function POST(request) {
  /* istanbul ignore next */
  cov_1ivckoayjy().f[4]++;
  cov_1ivckoayjy().s[27]++;
  try {
    const {
      user
    } =
    /* istanbul ignore next */
    (cov_1ivckoayjy().s[28]++, await (0, _server1.validateRequest)());
    /* istanbul ignore next */
    cov_1ivckoayjy().s[29]++;
    if (!user) {
      /* istanbul ignore next */
      cov_1ivckoayjy().b[9][0]++;
      cov_1ivckoayjy().s[30]++;
      return _server.NextResponse.json({
        error: 'Unauthorized'
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_1ivckoayjy().b[9][1]++;
    }
    const body =
    /* istanbul ignore next */
    (cov_1ivckoayjy().s[31]++, await request.json());
    const results =
    /* istanbul ignore next */
    (cov_1ivckoayjy().s[32]++, await _plantsearch.plantSearchService.advancedSearch({
      ...body,
      userId: user.id
    }));
    /* istanbul ignore next */
    cov_1ivckoayjy().s[33]++;
    return _server.NextResponse.json({
      success: true,
      data: results,
      metadata: {
        operation: 'advanced_search',
        timestamp: new Date(),
        userId: user.id,
        performance: {
          queryTime: results.searchTime,
          cacheHit: !_plantsearch.plantSearchService.getCacheStats().needsRefresh
        }
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1ivckoayjy().s[34]++;
    console.error('Error in advanced search:', error);
    /* istanbul ignore next */
    cov_1ivckoayjy().s[35]++;
    return _server.NextResponse.json({
      error: 'Internal server error'
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,