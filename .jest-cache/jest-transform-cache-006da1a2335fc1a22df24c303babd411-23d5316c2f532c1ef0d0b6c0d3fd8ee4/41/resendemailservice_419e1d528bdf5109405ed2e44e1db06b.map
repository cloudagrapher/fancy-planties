{"version":3,"names":["ResendEmailService","cov_2f3vt1axr1","f","s","createEmailService","constructor","config","resend","_resend","Resend","apiKey","sendVerificationEmail","email","code","name","data","error","emails","send","from","fromName","fromEmail","to","subject","html","generateVerificationEmailTemplate","text","generateVerificationEmailText","b","console","message","includes","_emailservice","EmailServiceError","log","id","Error","trim","process","env","RESEND_API_KEY","FROM_EMAIL","FROM_NAME"],"sources":["/Users/stefanbekker/projects/fancy-planties/src/lib/services/resend-email-service.ts"],"sourcesContent":["import 'server-only';\nimport { Resend } from 'resend';\nimport { EmailService, EmailConfig, EmailServiceError } from './email-service';\n\nexport class ResendEmailService implements EmailService {\n  private resend: Resend;\n  private config: EmailConfig;\n\n  constructor(config: EmailConfig) {\n    this.resend = new Resend(config.apiKey);\n    this.config = config;\n  }\n\n  async sendVerificationEmail(email: string, code: string, name: string): Promise<boolean> {\n    try {\n      const { data, error } = await this.resend.emails.send({\n        from: `${this.config.fromName} <${this.config.fromEmail}>`,\n        to: [email],\n        subject: 'Verify your email address',\n        html: this.generateVerificationEmailTemplate(code, name),\n        text: this.generateVerificationEmailText(code, name),\n      });\n\n      if (error) {\n        console.error('Resend API error:', error);\n        \n        // Map Resend errors to our error types\n        if (error.message?.includes('quota') || error.message?.includes('limit')) {\n          throw new EmailServiceError('Email quota exceeded', 'QUOTA_EXCEEDED');\n        }\n        \n        if (error.message?.includes('invalid') && error.message?.includes('email')) {\n          throw new EmailServiceError('Invalid email address', 'INVALID_EMAIL');\n        }\n        \n        throw new EmailServiceError(`Resend API error: ${error.message}`, 'API_ERROR');\n      }\n\n      console.log('Verification email sent successfully:', data?.id);\n      return true;\n      \n    } catch (error) {\n      if (error instanceof EmailServiceError) {\n        throw error;\n      }\n      \n      console.error('Network error sending email:', error);\n      throw new EmailServiceError(\n        `Network error: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        'NETWORK_ERROR'\n      );\n    }\n  }\n\n  private generateVerificationEmailTemplate(code: string, name: string): string {\n    return `\n      <!DOCTYPE html>\n      <html lang=\"en\">\n      <head>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>Verify Your Email</title>\n        <style>\n          body {\n            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n            line-height: 1.6;\n            color: #333;\n            max-width: 600px;\n            margin: 0 auto;\n            padding: 20px;\n          }\n          .header {\n            text-align: center;\n            margin-bottom: 30px;\n          }\n          .logo {\n            font-size: 24px;\n            font-weight: bold;\n            color: #22c55e;\n            margin-bottom: 10px;\n          }\n          .verification-code {\n            background: #f8f9fa;\n            border: 2px solid #e9ecef;\n            border-radius: 8px;\n            padding: 20px;\n            text-align: center;\n            margin: 30px 0;\n          }\n          .code {\n            font-size: 32px;\n            font-weight: bold;\n            letter-spacing: 4px;\n            color: #22c55e;\n            font-family: 'Courier New', monospace;\n          }\n          .footer {\n            margin-top: 30px;\n            padding-top: 20px;\n            border-top: 1px solid #e9ecef;\n            font-size: 14px;\n            color: #6c757d;\n          }\n        </style>\n      </head>\n      <body>\n        <div class=\"header\">\n          <div class=\"logo\">ðŸŒ± Fancy Planties</div>\n          <h1>Verify Your Email Address</h1>\n        </div>\n        \n        <p>Hi ${name},</p>\n        \n        <p>Welcome to Fancy Planties! To complete your account setup, please verify your email address by entering the verification code below:</p>\n        \n        <div class=\"verification-code\">\n          <div class=\"code\">${code}</div>\n          <p style=\"margin: 10px 0 0 0; font-size: 14px; color: #6c757d;\">\n            This code expires in 10 minutes\n          </p>\n        </div>\n        \n        <p>If you didn't create an account with Fancy Planties, you can safely ignore this email.</p>\n        \n        <div class=\"footer\">\n          <p>This is an automated message from Fancy Planties. Please do not reply to this email.</p>\n          <p>Need help? Contact us at support@fancy-planties.cloudagrapher.com</p>\n        </div>\n      </body>\n      </html>\n    `;\n  }\n\n  private generateVerificationEmailText(code: string, name: string): string {\n    return `\nHi ${name},\n\nWelcome to Fancy Planties! To complete your account setup, please verify your email address by entering the verification code below:\n\nVerification Code: ${code}\n\nThis code expires in 10 minutes.\n\nIf you didn't create an account with Fancy Planties, you can safely ignore this email.\n\n---\nThis is an automated message from Fancy Planties. Please do not reply to this email.\nNeed help? Contact us at support@fancy-planties.cloudagrapher.com\n    `.trim();\n  }\n}\n\n// Factory function to create email service instance\nexport function createEmailService(): EmailService {\n  const config: EmailConfig = {\n    apiKey: process.env.RESEND_API_KEY!,\n    fromEmail: process.env.FROM_EMAIL || 'send.mail.fancy-planties.cloudagrapher.com',\n    fromName: process.env.FROM_NAME || 'Fancy Planties',\n  };\n\n  if (!config.apiKey) {\n    throw new Error('RESEND_API_KEY environment variable is required');\n  }\n\n  return new ResendEmailService(config);\n}"],"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","ignoreList":[]}