{"version":3,"sources":["/Users/stefanbekker/projects/fancy-planties/src/__tests__/middleware-email-verification.test.ts"],"sourcesContent":["/**\n * @jest-environment node\n */\n\nimport { NextRequest } from 'next/server';\nimport { middleware } from '../../middleware';\n\n// Mock the auth modules\njest.mock('../lib/auth/lucia', () => ({\n  lucia: {\n    validateSession: jest.fn(),\n  },\n}));\n\njest.mock('../lib/auth/index', () => ({\n  getUserById: jest.fn(),\n}));\n\n// Mock fetch for the verification check\nglobal.fetch = jest.fn();\n\ndescribe('Middleware Email Verification', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    (global.fetch as jest.Mock).mockClear();\n  });\n\n  it('should allow access to public routes without authentication', async () => {\n    const request = new NextRequest('http://localhost:3000/api/health');\n    \n    const response = await middleware(request);\n    \n    expect(response.status).toBe(200);\n  });\n\n  it('should allow access to email verification API routes', async () => {\n    const request = new NextRequest('http://localhost:3000/api/auth/verify-email');\n    \n    const response = await middleware(request);\n    \n    expect(response.status).toBe(200);\n  });\n\n  it('should allow access to verification page for authenticated users', async () => {\n    const request = new NextRequest('http://localhost:3000/auth/verify-email');\n    request.cookies.set('auth_session', 'valid-session-id');\n    \n    const response = await middleware(request);\n    \n    expect(response.status).toBe(200);\n  });\n\n  it('should redirect unauthenticated users from protected routes', async () => {\n    const request = new NextRequest('http://localhost:3000/dashboard');\n    \n    const response = await middleware(request);\n    \n    expect(response.status).toBe(307); // Redirect status\n    expect(response.headers.get('location')).toContain('/auth/signin');\n  });\n\n  it('should return 403 for unverified users accessing API routes', async () => {\n    const request = new NextRequest('http://localhost:3000/api/plants');\n    request.cookies.set('auth_session', 'valid-session-id');\n    \n    // Mock the verification check to return unverified\n    (global.fetch as jest.Mock).mockResolvedValueOnce({\n      ok: true,\n      json: async () => ({ isVerified: false }),\n    });\n    \n    const response = await middleware(request);\n    \n    expect(response.status).toBe(403);\n    const body = await response.json();\n    expect(body.code).toBe('EMAIL_VERIFICATION_REQUIRED');\n  });\n\n  it('should redirect unverified users from protected pages to verification page', async () => {\n    const request = new NextRequest('http://localhost:3000/dashboard');\n    request.cookies.set('auth_session', 'valid-session-id');\n    \n    // Mock the verification check to return unverified\n    (global.fetch as jest.Mock).mockResolvedValueOnce({\n      ok: true,\n      json: async () => ({ isVerified: false }),\n    });\n    \n    const response = await middleware(request);\n    \n    expect(response.status).toBe(307); // Redirect status\n    expect(response.headers.get('location')).toContain('/auth/verify-email');\n  });\n\n  it('should allow verified users to access protected routes', async () => {\n    const request = new NextRequest('http://localhost:3000/dashboard');\n    request.cookies.set('auth_session', 'valid-session-id');\n    \n    // Mock the verification check to return verified\n    (global.fetch as jest.Mock).mockResolvedValueOnce({\n      ok: true,\n      json: async () => ({ isVerified: true }),\n    });\n    \n    const response = await middleware(request);\n    \n    expect(response.status).toBe(200);\n  });\n\n  it('should handle verification check errors gracefully', async () => {\n    const request = new NextRequest('http://localhost:3000/dashboard');\n    request.cookies.set('auth_session', 'valid-session-id');\n    \n    // Mock the verification check to fail\n    (global.fetch as jest.Mock).mockRejectedValueOnce(new Error('Network error'));\n    \n    const response = await middleware(request);\n    \n    // Should allow the request to continue when verification check fails\n    expect(response.status).toBe(200);\n  });\n});"],"names":["jest","mock","lucia","validateSession","fn","getUserById","global","fetch","describe","beforeEach","clearAllMocks","mockClear","it","request","NextRequest","response","middleware","expect","status","toBe","cookies","set","headers","get","toContain","mockResolvedValueOnce","ok","json","isVerified","body","code","mockRejectedValueOnce","Error"],"mappings":"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"}