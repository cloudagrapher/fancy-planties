{"version":3,"sources":["/Users/stefanbekker/projects/fancy-planties/src/lib/services/email-verification-rate-limiter.ts"],"sourcesContent":["import 'server-only';\n\n// Rate limiting configuration for email verification\nexport interface EmailVerificationRateLimitConfig {\n  // Verification attempts\n  maxVerificationAttempts: number;\n  verificationWindowMs: number;\n  \n  // Resend requests\n  maxResendRequests: number;\n  resendWindowMs: number;\n  resendCooldownMs: number;\n  \n  // Overall email verification activity\n  maxEmailVerificationRequests: number;\n  emailVerificationWindowMs: number;\n}\n\n// Default configuration based on requirements\nexport const DEFAULT_EMAIL_VERIFICATION_RATE_LIMIT_CONFIG: EmailVerificationRateLimitConfig = {\n  // Max 5 verification attempts per code (handled by service)\n  maxVerificationAttempts: 10, // Per IP per hour\n  verificationWindowMs: 60 * 60 * 1000, // 1 hour\n  \n  // Max 5 resend requests per hour per email\n  maxResendRequests: 5,\n  resendWindowMs: 60 * 60 * 1000, // 1 hour\n  resendCooldownMs: 60 * 1000, // 60 seconds between resends\n  \n  // Overall email verification activity per IP\n  maxEmailVerificationRequests: 20,\n  emailVerificationWindowMs: 60 * 60 * 1000, // 1 hour\n};\n\n// Rate limit entry structure\ninterface RateLimitEntry {\n  count: number;\n  resetTime: number;\n  firstAttempt: number;\n}\n\n// In-memory stores (in production, use Redis)\nconst verificationAttemptStore = new Map<string, RateLimitEntry>();\nconst resendRequestStore = new Map<string, RateLimitEntry>();\nconst emailVerificationStore = new Map<string, RateLimitEntry>();\nconst resendCooldownStore = new Map<string, number>(); // email -> last resend timestamp\n\n// Security event logging\nexport interface SecurityEvent {\n  type: 'RATE_LIMIT_EXCEEDED' | 'SUSPICIOUS_ACTIVITY' | 'BRUTE_FORCE_ATTEMPT';\n  identifier: string;\n  email?: string;\n  timestamp: number;\n  details: Record<string, any>;\n}\n\nconst securityEvents: SecurityEvent[] = [];\n\nexport function logSecurityEvent(event: SecurityEvent): void {\n  securityEvents.push(event);\n  \n  // Log to console (in production, send to monitoring service)\n  console.warn(`[SECURITY] ${event.type}:`, {\n    identifier: event.identifier,\n    email: event.email,\n    timestamp: new Date(event.timestamp).toISOString(),\n    details: event.details,\n  });\n  \n  // Keep only last 1000 events in memory\n  if (securityEvents.length > 1000) {\n    securityEvents.splice(0, securityEvents.length - 1000);\n  }\n}\n\n// Generic rate limiting function\nfunction checkRateLimit(\n  store: Map<string, RateLimitEntry>,\n  identifier: string,\n  maxRequests: number,\n  windowMs: number\n): { allowed: boolean; remaining: number; resetTime: number; retryAfter?: number } {\n  const now = Date.now();\n  \n  // Clean up expired entries\n  for (const [key, entry] of store.entries()) {\n    if (entry.resetTime < now) {\n      store.delete(key);\n    }\n  }\n  \n  const entry = store.get(identifier);\n  \n  if (!entry || entry.resetTime < now) {\n    // New window or expired window\n    const resetTime = now + windowMs;\n    store.set(identifier, {\n      count: 1,\n      resetTime,\n      firstAttempt: now,\n    });\n    \n    return {\n      allowed: true,\n      remaining: maxRequests - 1,\n      resetTime,\n    };\n  }\n  \n  if (entry.count >= maxRequests) {\n    // Rate limit exceeded\n    const retryAfter = Math.ceil((entry.resetTime - now) / 1000);\n    \n    return {\n      allowed: false,\n      remaining: 0,\n      resetTime: entry.resetTime,\n      retryAfter,\n    };\n  }\n  \n  // Increment count\n  entry.count++;\n  store.set(identifier, entry);\n  \n  return {\n    allowed: true,\n    remaining: maxRequests - entry.count,\n    resetTime: entry.resetTime,\n  };\n}\n\nexport class EmailVerificationRateLimiter {\n  constructor(private config: EmailVerificationRateLimitConfig = DEFAULT_EMAIL_VERIFICATION_RATE_LIMIT_CONFIG) {}\n  \n  /**\n   * Check rate limit for verification attempts\n   */\n  checkVerificationAttempts(identifier: string, email?: string): {\n    allowed: boolean;\n    remaining: number;\n    resetTime: number;\n    retryAfter?: number;\n  } {\n    const result = checkRateLimit(\n      verificationAttemptStore,\n      identifier,\n      this.config.maxVerificationAttempts,\n      this.config.verificationWindowMs\n    );\n    \n    if (!result.allowed) {\n      logSecurityEvent({\n        type: 'RATE_LIMIT_EXCEEDED',\n        identifier,\n        email,\n        timestamp: Date.now(),\n        details: {\n          limitType: 'verification_attempts',\n          maxRequests: this.config.maxVerificationAttempts,\n          windowMs: this.config.verificationWindowMs,\n        },\n      });\n    }\n    \n    return result;\n  }\n  \n  /**\n   * Check rate limit for resend requests\n   */\n  checkResendRequests(email: string, identifier: string): {\n    allowed: boolean;\n    remaining: number;\n    resetTime: number;\n    retryAfter?: number;\n    cooldownRemaining?: number;\n  } {\n    const normalizedEmail = email.toLowerCase();\n    \n    // Check cooldown first\n    const lastResendTime = resendCooldownStore.get(normalizedEmail);\n    const now = Date.now();\n    \n    if (lastResendTime && (now - lastResendTime) < this.config.resendCooldownMs) {\n      const cooldownRemaining = Math.ceil((this.config.resendCooldownMs - (now - lastResendTime)) / 1000);\n      \n      logSecurityEvent({\n        type: 'RATE_LIMIT_EXCEEDED',\n        identifier,\n        email: normalizedEmail,\n        timestamp: now,\n        details: {\n          limitType: 'resend_cooldown',\n          cooldownMs: this.config.resendCooldownMs,\n          cooldownRemaining,\n        },\n      });\n      \n      return {\n        allowed: false,\n        remaining: 0,\n        resetTime: lastResendTime + this.config.resendCooldownMs,\n        cooldownRemaining,\n      };\n    }\n    \n    // Check hourly rate limit\n    const result = checkRateLimit(\n      resendRequestStore,\n      normalizedEmail,\n      this.config.maxResendRequests,\n      this.config.resendWindowMs\n    );\n    \n    if (!result.allowed) {\n      logSecurityEvent({\n        type: 'RATE_LIMIT_EXCEEDED',\n        identifier,\n        email: normalizedEmail,\n        timestamp: now,\n        details: {\n          limitType: 'resend_requests',\n          maxRequests: this.config.maxResendRequests,\n          windowMs: this.config.resendWindowMs,\n        },\n      });\n    }\n    \n    return result;\n  }\n  \n  /**\n   * Record successful resend to update cooldown\n   */\n  recordResendSuccess(email: string): void {\n    const normalizedEmail = email.toLowerCase();\n    resendCooldownStore.set(normalizedEmail, Date.now());\n  }\n  \n  /**\n   * Check overall email verification activity rate limit\n   */\n  checkEmailVerificationActivity(identifier: string, email?: string): {\n    allowed: boolean;\n    remaining: number;\n    resetTime: number;\n    retryAfter?: number;\n  } {\n    const result = checkRateLimit(\n      emailVerificationStore,\n      identifier,\n      this.config.maxEmailVerificationRequests,\n      this.config.emailVerificationWindowMs\n    );\n    \n    if (!result.allowed) {\n      logSecurityEvent({\n        type: 'RATE_LIMIT_EXCEEDED',\n        identifier,\n        email,\n        timestamp: Date.now(),\n        details: {\n          limitType: 'email_verification_activity',\n          maxRequests: this.config.maxEmailVerificationRequests,\n          windowMs: this.config.emailVerificationWindowMs,\n        },\n      });\n    }\n    \n    return result;\n  }\n  \n  /**\n   * Detect suspicious activity patterns\n   */\n  detectSuspiciousActivity(identifier: string, email?: string): boolean {\n    const now = Date.now();\n    const oneHour = 60 * 60 * 1000;\n    \n    // Check for rapid-fire attempts from same IP\n    const verificationEntry = verificationAttemptStore.get(identifier);\n    if (verificationEntry && verificationEntry.count >= 8) {\n      const timeSpan = now - verificationEntry.firstAttempt;\n      if (timeSpan < 10 * 60 * 1000) { // 8+ attempts in 10 minutes\n        logSecurityEvent({\n          type: 'SUSPICIOUS_ACTIVITY',\n          identifier,\n          email,\n          timestamp: now,\n          details: {\n            pattern: 'rapid_verification_attempts',\n            attempts: verificationEntry.count,\n            timeSpanMs: timeSpan,\n          },\n        });\n        return true;\n      }\n    }\n    \n    // Check for multiple email addresses from same IP\n    const recentEvents = securityEvents.filter(\n      event => event.identifier === identifier && \n               event.timestamp > (now - oneHour) &&\n               event.email\n    );\n    \n    const uniqueEmails = new Set(recentEvents.map(event => event.email));\n    if (uniqueEmails.size >= 5) { // 5+ different emails in 1 hour\n      logSecurityEvent({\n        type: 'SUSPICIOUS_ACTIVITY',\n        identifier,\n        email,\n        timestamp: now,\n        details: {\n          pattern: 'multiple_email_addresses',\n          uniqueEmails: uniqueEmails.size,\n          timeSpanMs: oneHour,\n        },\n      });\n      return true;\n    }\n    \n    return false;\n  }\n  \n  /**\n   * Get security events for monitoring\n   */\n  getSecurityEvents(since?: number): SecurityEvent[] {\n    const cutoff = since || (Date.now() - 24 * 60 * 60 * 1000); // Last 24 hours\n    return securityEvents.filter(event => event.timestamp >= cutoff);\n  }\n  \n  /**\n   * Clean up expired data\n   */\n  cleanup(): void {\n    const now = Date.now();\n    const oneDayAgo = now - 24 * 60 * 60 * 1000;\n    \n    // Clean up rate limit stores\n    for (const store of [verificationAttemptStore, resendRequestStore, emailVerificationStore]) {\n      for (const [key, entry] of store.entries()) {\n        if (entry.resetTime < now) {\n          store.delete(key);\n        }\n      }\n    }\n    \n    // Clean up cooldown store\n    for (const [email, timestamp] of resendCooldownStore.entries()) {\n      if (timestamp < oneDayAgo) {\n        resendCooldownStore.delete(email);\n      }\n    }\n    \n    // Clean up old security events\n    const cutoffIndex = securityEvents.findIndex(event => event.timestamp >= oneDayAgo);\n    if (cutoffIndex > 0) {\n      securityEvents.splice(0, cutoffIndex);\n    }\n  }\n  \n  /**\n   * Get rate limit statistics\n   */\n  getStats(): {\n    verificationAttempts: number;\n    resendRequests: number;\n    emailVerificationActivity: number;\n    resendCooldowns: number;\n    securityEvents: number;\n  } {\n    return {\n      verificationAttempts: verificationAttemptStore.size,\n      resendRequests: resendRequestStore.size,\n      emailVerificationActivity: emailVerificationStore.size,\n      resendCooldowns: resendCooldownStore.size,\n      securityEvents: securityEvents.length,\n    };\n  }\n}\n\n// Export singleton instance\nexport const emailVerificationRateLimiter = new EmailVerificationRateLimiter();\n\n// Cleanup job - run every hour\nsetInterval(() => {\n  emailVerificationRateLimiter.cleanup();\n}, 60 * 60 * 1000);"],"names":["DEFAULT_EMAIL_VERIFICATION_RATE_LIMIT_CONFIG","EmailVerificationRateLimiter","emailVerificationRateLimiter","logSecurityEvent","maxVerificationAttempts","verificationWindowMs","maxResendRequests","resendWindowMs","resendCooldownMs","maxEmailVerificationRequests","emailVerificationWindowMs","verificationAttemptStore","Map","resendRequestStore","emailVerificationStore","resendCooldownStore","securityEvents","event","push","console","warn","type","identifier","email","timestamp","Date","toISOString","details","length","splice","checkRateLimit","store","maxRequests","windowMs","now","key","entry","entries","resetTime","delete","get","set","count","firstAttempt","allowed","remaining","retryAfter","Math","ceil","config","checkVerificationAttempts","result","limitType","checkResendRequests","normalizedEmail","toLowerCase","lastResendTime","cooldownRemaining","cooldownMs","recordResendSuccess","checkEmailVerificationActivity","detectSuspiciousActivity","oneHour","verificationEntry","timeSpan","pattern","attempts","timeSpanMs","recentEvents","filter","uniqueEmails","Set","map","size","getSecurityEvents","since","cutoff","cleanup","oneDayAgo","cutoffIndex","findIndex","getStats","verificationAttempts","resendRequests","emailVerificationActivity","resendCooldowns","setInterval"],"mappings":"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"}