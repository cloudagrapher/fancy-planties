acbcf079f2e35a2210141610d6cc9a3d
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get createSession () {
        return createSession;
    },
    get createUser () {
        return createUser;
    },
    get getUserByEmail () {
        return getUserByEmail;
    },
    get getUserById () {
        return getUserById;
    },
    get hashPassword () {
        return hashPassword;
    },
    get invalidateSession () {
        return invalidateSession;
    },
    get invalidateUserSessions () {
        return invalidateUserSessions;
    },
    get signIn () {
        return signIn;
    },
    get signOut () {
        return signOut;
    },
    get signUp () {
        return signUp;
    },
    get verifyPassword () {
        return verifyPassword;
    }
});
require("server-only");
const _bcryptjs = /*#__PURE__*/ _interop_require_default(require("bcryptjs"));
const _crypto = require("oslo/crypto");
const _db = require("../db");
const _schema = require("../db/schema");
const _drizzleorm = require("drizzle-orm");
const _lucia = require("./lucia");
_export_star(require("./validation"), exports);
_export_star(require("./middleware"), exports);
_export_star(require("./session"), exports);
function _export_star(from, to) {
    Object.keys(from).forEach(function(k) {
        if (k !== "default" && !Object.prototype.hasOwnProperty.call(to, k)) {
            Object.defineProperty(to, k, {
                enumerable: true,
                get: function() {
                    return from[k];
                }
            });
        }
    });
    return from;
}
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
async function hashPassword(password) {
    const saltRounds = 12;
    return await _bcryptjs.default.hash(password, saltRounds);
}
async function verifyPassword(password, hash) {
    return await _bcryptjs.default.compare(password, hash);
}
async function createSession(userId) {
    const sessionId = (0, _crypto.generateRandomString)(40, '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ');
    const expiresAt = new Date(Date.now() + 1000 * 60 * 60 * 24 * 30); // 30 days
    const [session] = await _db.db.insert(_schema.sessions).values({
        id: sessionId,
        userId,
        expiresAt
    }).returning();
    return session;
}
async function invalidateSession(sessionId) {
    await _lucia.lucia.invalidateSession(sessionId);
}
async function invalidateUserSessions(userId) {
    await _lucia.lucia.invalidateUserSessions(userId.toString());
}
async function createUser(email, password, name) {
    const hashedPassword = await hashPassword(password);
    const [user] = await _db.db.insert(_schema.users).values({
        email: email.toLowerCase(),
        hashedPassword,
        name
    }).returning();
    return user;
}
async function getUserByEmail(email) {
    const [user] = await _db.db.select().from(_schema.users).where((0, _drizzleorm.eq)(_schema.users.email, email.toLowerCase()));
    return user || null;
}
async function getUserById(id) {
    const [user] = await _db.db.select().from(_schema.users).where((0, _drizzleorm.eq)(_schema.users.id, id));
    return user || null;
}
async function signIn(email, password) {
    const user = await getUserByEmail(email);
    if (!user) {
        return null;
    }
    const validPassword = await verifyPassword(password, user.hashedPassword);
    if (!validPassword) {
        return null;
    }
    const luciaSession = await _lucia.lucia.createSession(user.id.toString(), {});
    const session = {
        id: luciaSession.id,
        userId: user.id,
        expiresAt: luciaSession.expiresAt
    };
    return {
        user,
        session
    };
}
async function signUp(email, password, name) {
    // Check if user already exists
    const existingUser = await getUserByEmail(email);
    if (existingUser) {
        throw new Error('User already exists');
    }
    // Create new user
    const user = await createUser(email, password, name);
    // Create session
    const luciaSession = await _lucia.lucia.createSession(user.id.toString(), {});
    const session = {
        id: luciaSession.id,
        userId: user.id,
        expiresAt: luciaSession.expiresAt
    };
    return {
        user,
        session
    };
}
async function signOut(sessionId) {
    await _lucia.lucia.invalidateSession(sessionId);
}

//# sourceMappingURL=data:application/json;base64,