{"version":3,"sources":["/Users/stefanbekker/projects/fancy-planties/src/app/api/dashboard/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { validateRequest } from '@/lib/auth/server';\nimport { db } from '@/lib/db';\nimport { plantInstances, propagations } from '@/lib/db/schema';\nimport { eq, and, sql, inArray } from 'drizzle-orm';\n\nexport interface FertilizerEvent {\n  id: string;\n  plantName: string;\n  plantId: string;\n  date: string;\n  type: 'fertilize';\n}\n\nexport interface DashboardStats {\n  totalPlants: number;\n  activePlants: number;\n  careDueToday: number;\n  totalPropagations: number;\n  activePropagations: number;\n  successfulPropagations: number;\n  propagationSuccessRate: number;\n  fertilizerEvents: FertilizerEvent[];\n}\n\n// GET /api/dashboard - Get dashboard statistics\nexport async function GET(request: NextRequest) {\n  try {\n    const { user } = await validateRequest();\n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const userId = user.id;\n    const today = new Date();\n    today.setHours(23, 59, 59, 999); // End of today\n\n    // Get plant statistics\n    const [plantStats] = await db\n      .select({\n        totalPlants: sql<number>`count(*)`,\n        activePlants: sql<number>`count(*) filter (where ${plantInstances.isActive} = true)`,\n        careDueToday: sql<number>`count(*) filter (where ${plantInstances.isActive} = true and ${plantInstances.fertilizerDue} <= ${today.toISOString()})`\n      })\n      .from(plantInstances)\n      .where(eq(plantInstances.userId, userId));\n\n    // Get propagation statistics\n    const [propagationStats] = await db\n      .select({\n        totalPropagations: sql<number>`count(*)`,\n        activePropagations: sql<number>`count(*) filter (where ${propagations.status} in ('started', 'rooting'))`,\n        successfulPropagations: sql<number>`count(*) filter (where ${propagations.status} in ('planted', 'established'))`\n      })\n      .from(propagations)\n      .where(eq(propagations.userId, userId));\n\n    // Calculate success rate\n    const totalCompletedPropagations = await db\n      .select({\n        count: sql<number>`count(*)`\n      })\n      .from(propagations)\n      .where(\n        and(\n          eq(propagations.userId, userId),\n          inArray(propagations.status, ['planted', 'established'])\n        )\n      );\n\n    const completedCount = totalCompletedPropagations[0]?.count || 0;\n    const successfulCount = propagationStats?.successfulPropagations || 0;\n    const propagationSuccessRate = completedCount > 0 ? Math.round((successfulCount / completedCount) * 100) : 0;\n\n    // Get fertilizer events from plant instances with due dates\n    const fertilizerEventData = await db\n      .select({\n        id: plantInstances.id,\n        nickname: plantInstances.nickname,\n        fertilizerDue: plantInstances.fertilizerDue\n      })\n      .from(plantInstances)\n      .where(\n        and(\n          eq(plantInstances.userId, userId),\n          eq(plantInstances.isActive, true)\n        )\n      );\n\n    // Convert to fertilizer events with proper date filtering (show events for next 30 days)\n    const thirtyDaysFromNow = new Date();\n    thirtyDaysFromNow.setDate(thirtyDaysFromNow.getDate() + 30);\n    \n    const fertilizerEvents: FertilizerEvent[] = fertilizerEventData\n      .filter(plant => plant.fertilizerDue && plant.fertilizerDue <= thirtyDaysFromNow)\n      .map(plant => ({\n        id: `fertilizer-${plant.id}`,\n        plantName: plant.nickname,\n        plantId: plant.id.toString(),\n        date: plant.fertilizerDue!.toISOString().split('T')[0], // Format as YYYY-MM-DD\n        type: 'fertilize' as const\n      }));\n\n    const dashboardStats: DashboardStats = {\n      totalPlants: plantStats?.totalPlants || 0,\n      activePlants: plantStats?.activePlants || 0,\n      careDueToday: plantStats?.careDueToday || 0,\n      totalPropagations: propagationStats?.totalPropagations || 0,\n      activePropagations: propagationStats?.activePropagations || 0,\n      successfulPropagations: successfulCount,\n      propagationSuccessRate,\n      fertilizerEvents\n    };\n    \n    return NextResponse.json(dashboardStats);\n  } catch (error) {\n    console.error('Failed to get dashboard stats:', error);\n    return NextResponse.json(\n      { error: 'Failed to get dashboard stats' },\n      { status: 500 }\n    );\n  }\n}"],"names":["GET","request","user","validateRequest","NextResponse","json","error","status","userId","id","today","Date","setHours","plantStats","db","select","totalPlants","sql","activePlants","plantInstances","isActive","careDueToday","fertilizerDue","toISOString","from","where","eq","propagationStats","totalPropagations","activePropagations","propagations","successfulPropagations","totalCompletedPropagations","count","and","inArray","completedCount","successfulCount","propagationSuccessRate","Math","round","fertilizerEventData","nickname","thirtyDaysFromNow","setDate","getDate","fertilizerEvents","filter","plant","map","plantName","plantId","toString","date","split","type","dashboardStats","console"],"mappings":"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"}