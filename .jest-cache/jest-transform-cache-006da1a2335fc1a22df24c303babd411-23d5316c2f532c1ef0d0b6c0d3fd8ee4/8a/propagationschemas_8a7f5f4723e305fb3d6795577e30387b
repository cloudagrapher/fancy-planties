82f7266454c7b16a604218bc652b46dd
"use strict";

/* istanbul ignore next */
function cov_2mczfogwhf() {
  var path = "/Users/stefanbekker/projects/fancy-planties/src/lib/validation/propagation-schemas.ts";
  var hash = "e581ea0c4b07f2d406c4e2e829ea0f69ba7e8d49";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/stefanbekker/projects/fancy-planties/src/lib/validation/propagation-schemas.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 42,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 47
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 46
        }
      },
      "6": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 39
        }
      },
      "7": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 43
        }
      },
      "8": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 39
        }
      },
      "9": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 33
        }
      },
      "10": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 31,
          column: 39
        }
      },
      "11": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 34,
          column: 38
        }
      },
      "12": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 37,
          column: 45
        }
      },
      "13": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 40,
          column: 39
        }
      },
      "14": {
        start: {
          line: 43,
          column: 13
        },
        end: {
          line: 43,
          column: 27
        }
      },
      "15": {
        start: {
          line: 44,
          column: 26
        },
        end: {
          line: 69,
          column: 2
        }
      },
      "16": {
        start: {
          line: 70,
          column: 32
        },
        end: {
          line: 84,
          column: 2
        }
      },
      "17": {
        start: {
          line: 74,
          column: 4
        },
        end: {
          line: 76,
          column: 5
        }
      },
      "18": {
        start: {
          line: 75,
          column: 8
        },
        end: {
          line: 75,
          column: 21
        }
      },
      "19": {
        start: {
          line: 78,
          column: 4
        },
        end: {
          line: 80,
          column: 5
        }
      },
      "20": {
        start: {
          line: 79,
          column: 8
        },
        end: {
          line: 79,
          column: 21
        }
      },
      "21": {
        start: {
          line: 81,
          column: 4
        },
        end: {
          line: 81,
          column: 16
        }
      },
      "22": {
        start: {
          line: 85,
          column: 32
        },
        end: {
          line: 100,
          column: 2
        }
      },
      "23": {
        start: {
          line: 90,
          column: 4
        },
        end: {
          line: 92,
          column: 5
        }
      },
      "24": {
        start: {
          line: 91,
          column: 8
        },
        end: {
          line: 91,
          column: 21
        }
      },
      "25": {
        start: {
          line: 94,
          column: 4
        },
        end: {
          line: 96,
          column: 5
        }
      },
      "26": {
        start: {
          line: 95,
          column: 8
        },
        end: {
          line: 95,
          column: 21
        }
      },
      "27": {
        start: {
          line: 97,
          column: 4
        },
        end: {
          line: 97,
          column: 16
        }
      },
      "28": {
        start: {
          line: 101,
          column: 38
        },
        end: {
          line: 110,
          column: 2
        }
      },
      "29": {
        start: {
          line: 111,
          column: 32
        },
        end: {
          line: 116,
          column: 2
        }
      },
      "30": {
        start: {
          line: 117,
          column: 32
        },
        end: {
          line: 155,
          column: 2
        }
      },
      "31": {
        start: {
          line: 156,
          column: 36
        },
        end: {
          line: 162,
          column: 2
        }
      },
      "32": {
        start: {
          line: 160,
          column: 137
        },
        end: {
          line: 160,
          column: 176
        }
      },
      "33": {
        start: {
          line: 163,
          column: 39
        },
        end: {
          line: 180,
          column: 2
        }
      },
      "34": {
        start: {
          line: 181,
          column: 31
        },
        end: {
          line: 192,
          column: 2
        }
      },
      "35": {
        start: {
          line: 193,
          column: 40
        },
        end: {
          line: 249,
          column: 2
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        },
        loc: {
          start: {
            line: 12,
            column: 43
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 42
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 18,
            column: 4
          },
          end: {
            line: 18,
            column: 5
          }
        },
        loc: {
          start: {
            line: 18,
            column: 35
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 18
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 21,
            column: 4
          },
          end: {
            line: 21,
            column: 5
          }
        },
        loc: {
          start: {
            line: 21,
            column: 39
          },
          end: {
            line: 23,
            column: 5
          }
        },
        line: 21
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 24,
            column: 4
          },
          end: {
            line: 24,
            column: 5
          }
        },
        loc: {
          start: {
            line: 24,
            column: 35
          },
          end: {
            line: 26,
            column: 5
          }
        },
        line: 24
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 27,
            column: 4
          },
          end: {
            line: 27,
            column: 5
          }
        },
        loc: {
          start: {
            line: 27,
            column: 29
          },
          end: {
            line: 29,
            column: 5
          }
        },
        line: 27
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 30,
            column: 4
          },
          end: {
            line: 30,
            column: 5
          }
        },
        loc: {
          start: {
            line: 30,
            column: 35
          },
          end: {
            line: 32,
            column: 5
          }
        },
        line: 30
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 33,
            column: 4
          },
          end: {
            line: 33,
            column: 5
          }
        },
        loc: {
          start: {
            line: 33,
            column: 34
          },
          end: {
            line: 35,
            column: 5
          }
        },
        line: 33
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 36,
            column: 4
          },
          end: {
            line: 36,
            column: 5
          }
        },
        loc: {
          start: {
            line: 36,
            column: 41
          },
          end: {
            line: 38,
            column: 5
          }
        },
        line: 36
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 39,
            column: 4
          },
          end: {
            line: 39,
            column: 5
          }
        },
        loc: {
          start: {
            line: 39,
            column: 35
          },
          end: {
            line: 41,
            column: 5
          }
        },
        line: 39
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 72,
            column: 10
          },
          end: {
            line: 72,
            column: 11
          }
        },
        loc: {
          start: {
            line: 72,
            column: 18
          },
          end: {
            line: 82,
            column: 1
          }
        },
        line: 72
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 88,
            column: 10
          },
          end: {
            line: 88,
            column: 11
          }
        },
        loc: {
          start: {
            line: 88,
            column: 18
          },
          end: {
            line: 98,
            column: 1
          }
        },
        line: 88
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 160,
            column: 130
          },
          end: {
            line: 160,
            column: 131
          }
        },
        loc: {
          start: {
            line: 160,
            column: 137
          },
          end: {
            line: 160,
            column: 176
          }
        },
        line: 160
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 74,
            column: 4
          },
          end: {
            line: 76,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 74,
            column: 4
          },
          end: {
            line: 76,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 74
      },
      "1": {
        loc: {
          start: {
            line: 74,
            column: 8
          },
          end: {
            line: 74,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 74,
            column: 8
          },
          end: {
            line: 74,
            column: 38
          }
        }, {
          start: {
            line: 74,
            column: 42
          },
          end: {
            line: 74,
            column: 64
          }
        }],
        line: 74
      },
      "2": {
        loc: {
          start: {
            line: 78,
            column: 4
          },
          end: {
            line: 80,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 78,
            column: 4
          },
          end: {
            line: 80,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 78
      },
      "3": {
        loc: {
          start: {
            line: 78,
            column: 8
          },
          end: {
            line: 78,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 78,
            column: 8
          },
          end: {
            line: 78,
            column: 38
          }
        }, {
          start: {
            line: 78,
            column: 42
          },
          end: {
            line: 78,
            column: 62
          }
        }],
        line: 78
      },
      "4": {
        loc: {
          start: {
            line: 90,
            column: 4
          },
          end: {
            line: 92,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 90,
            column: 4
          },
          end: {
            line: 92,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 90
      },
      "5": {
        loc: {
          start: {
            line: 90,
            column: 8
          },
          end: {
            line: 90,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 90,
            column: 8
          },
          end: {
            line: 90,
            column: 38
          }
        }, {
          start: {
            line: 90,
            column: 42
          },
          end: {
            line: 90,
            column: 77
          }
        }],
        line: 90
      },
      "6": {
        loc: {
          start: {
            line: 94,
            column: 4
          },
          end: {
            line: 96,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 94,
            column: 4
          },
          end: {
            line: 96,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 94
      },
      "7": {
        loc: {
          start: {
            line: 94,
            column: 8
          },
          end: {
            line: 94,
            column: 75
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 94,
            column: 8
          },
          end: {
            line: 94,
            column: 38
          }
        }, {
          start: {
            line: 94,
            column: 42
          },
          end: {
            line: 94,
            column: 75
          }
        }],
        line: 94
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/stefanbekker/projects/fancy-planties/src/lib/validation/propagation-schemas.ts"],
      sourcesContent: ["import { z } from 'zod';\n\n// Propagation validation schemas\nexport const propagationSchema = z.object({\n  plantId: z.number().int().positive('Plant ID is required'),\n  parentInstanceId: z.number().int().positive().optional().nullable(),\n  nickname: z.string()\n    .min(1, 'Propagation nickname is required')\n    .max(100, 'Nickname too long')\n    .trim(),\n  \n  location: z.string()\n    .min(1, 'Location is required')\n    .max(100, 'Location description too long')\n    .trim(),\n  \n  dateStarted: z.date().optional(),\n  \n  status: z.enum(['started', 'rooting', 'planted', 'established']).default('started'),\n  \n  sourceType: z.enum(['internal', 'external']).default('internal'),\n  \n  externalSource: z.enum(['gift', 'trade', 'purchase', 'other']).optional().nullable(),\n  \n  externalSourceDetails: z.string()\n    .max(500, 'External source details too long')\n    .optional()\n    .nullable(),\n  \n  notes: z.string()\n    .max(2000, 'Notes too long')\n    .optional()\n    .nullable(),\n  \n  images: z.array(z.string())\n    .max(10, 'Maximum 10 images allowed')\n    .default([]),\n});\n\nexport const createPropagationSchema = propagationSchema.extend({\n  userId: z.number().int().positive('User ID is required'),\n}).refine((data) => {\n  // If source type is internal, parent instance ID is required\n  if (data.sourceType === 'internal' && !data.parentInstanceId) {\n    return false;\n  }\n  // If source type is external, external source is required\n  if (data.sourceType === 'external' && !data.externalSource) {\n    return false;\n  }\n  return true;\n}, {\n  message: 'Internal propagations require parent instance ID, external propagations require external source',\n});\n\nexport const updatePropagationSchema = propagationSchema.partial().extend({\n  id: z.number().int().positive(),\n  userId: z.number().int().positive().optional(),\n}).refine((data) => {\n  // If source type is being changed to internal, parent instance ID is required\n  if (data.sourceType === 'internal' && data.parentInstanceId === undefined) {\n    return false;\n  }\n  // If source type is being changed to external, external source is required\n  if (data.sourceType === 'external' && data.externalSource === undefined) {\n    return false;\n  }\n  return true;\n}, {\n  message: 'Source type changes must include appropriate source information',\n});\n\n// Propagation status update schema\nexport const propagationStatusUpdateSchema = z.object({\n  id: z.number().int().positive(),\n  status: z.enum(['started', 'rooting', 'planted', 'established']),\n  notes: z.string().max(500, 'Status notes too long').optional(),\n});\n\n// Propagation search and filter schemas\nexport const propagationSearchSchema = z.object({\n  query: z.string()\n    .min(1, 'Search query is required')\n    .max(200, 'Search query too long')\n    .trim(),\n  \n  userId: z.number().int().positive('User ID is required'),\n  \n  limit: z.number()\n    .int()\n    .min(1)\n    .max(100)\n    .default(20),\n  \n  offset: z.number()\n    .int()\n    .min(0)\n    .default(0),\n});\n\nexport const propagationFilterSchema = z.object({\n  userId: z.number().int().positive('User ID is required'),\n  \n  status: z.enum(['started', 'rooting', 'planted', 'established']).optional(),\n  sourceType: z.enum(['internal', 'external']).optional(),\n  externalSource: z.enum(['gift', 'trade', 'purchase', 'other']).optional(),\n  plantId: z.number().int().positive().optional(),\n  parentInstanceId: z.number().int().positive().optional(),\n  location: z.string().optional(),\n  \n  // Date range filters\n  startedAfter: z.date().optional(),\n  startedBefore: z.date().optional(),\n  \n  limit: z.number().int().min(1).max(100).default(20),\n  offset: z.number().int().min(0).default(0),\n  \n  // Sorting options\n  sortBy: z.enum(['nickname', 'location', 'date_started', 'status', 'source_type']).default('date_started'),\n  sortOrder: z.enum(['asc', 'desc']).default('desc'),\n});\n\n// Propagation conversion to plant instance schema\nexport const propagationConversionSchema = z.object({\n  propagationId: z.number().int().positive('Propagation ID is required'),\n  nickname: z.string()\n    .min(1, 'Plant nickname is required')\n    .max(100, 'Nickname too long')\n    .trim()\n    .optional(),\n  \n  location: z.string()\n    .min(1, 'Location is required')\n    .max(100, 'Location description too long')\n    .trim()\n    .optional(),\n  \n  fertilizerSchedule: z.string()\n    .min(1, 'Fertilizer schedule is required')\n    .max(50, 'Schedule description too long')\n    .refine(\n      (val) => /^\\d+\\s*(day|week|month)s?$/i.test(val),\n      'Schedule must be in format like \"2 weeks\", \"1 month\", \"14 days\"'\n    )\n    .default('2 weeks'),\n  \n  notes: z.string()\n    .max(2000, 'Notes too long')\n    .optional(),\n});\n\n// Bulk propagation operations schema\nexport const bulkPropagationOperationSchema = z.object({\n  propagationIds: z.array(z.number().int().positive())\n    .min(1, 'At least one propagation ID is required')\n    .max(50, 'Maximum 50 propagations allowed per bulk operation'),\n  \n  operation: z.enum(['update_status', 'delete', 'convert']),\n  \n  // Optional data for specific operations\n  status: z.enum(['started', 'rooting', 'planted', 'established']).optional(),\n  notes: z.string().max(500, 'Notes too long').optional(),\n  \n  // For conversion operations\n  fertilizerSchedule: z.string().optional(),\n});\n\n// Propagation statistics schema\nexport const propagationStatsSchema = z.object({\n  userId: z.number().int().positive('User ID is required'),\n  sourceType: z.enum(['internal', 'external', 'all']).default('all'),\n  dateRange: z.object({\n    start: z.date().optional(),\n    end: z.date().optional(),\n  }).optional(),\n});\n\n// Advanced propagation search schema\nexport const advancedPropagationSearchSchema = z.object({\n  userId: z.number().int().positive('User ID is required'),\n  \n  // Text search fields\n  nickname: z.string().optional(),\n  location: z.string().optional(),\n  notes: z.string().optional(),\n  externalSourceDetails: z.string().optional(),\n  \n  // Plant taxonomy fields\n  plantName: z.string().optional(),\n  family: z.string().optional(),\n  genus: z.string().optional(),\n  species: z.string().optional(),\n  cultivar: z.string().optional(),\n  \n  // Propagation-specific fields\n  status: z.array(z.enum(['started', 'rooting', 'planted', 'established'])).optional(),\n  sourceType: z.array(z.enum(['internal', 'external'])).optional(),\n  externalSource: z.array(z.enum(['gift', 'trade', 'purchase', 'other'])).optional(),\n  \n  // Date ranges\n  dateStartedRange: z.object({\n    start: z.date().optional(),\n    end: z.date().optional(),\n  }).optional(),\n  \n  // Search logic\n  operator: z.enum(['AND', 'OR']).default('OR'),\n  \n  // Result options\n  limit: z.number().int().min(1).max(100).default(20),\n  offset: z.number().int().min(0).default(0),\n  sortBy: z.enum(['nickname', 'location', 'date_started', 'status', 'source_type', 'plant_name']).default('date_started'),\n  sortOrder: z.enum(['asc', 'desc']).default('desc'),\n  \n  includeStats: z.boolean().default(false),\n});\n\n// Export types from schemas\nexport type PropagationData = z.infer<typeof propagationSchema>;\nexport type CreatePropagation = z.infer<typeof createPropagationSchema>;\nexport type UpdatePropagation = z.infer<typeof updatePropagationSchema>;\nexport type PropagationStatusUpdate = z.infer<typeof propagationStatusUpdateSchema>;\nexport type PropagationSearch = z.infer<typeof propagationSearchSchema>;\nexport type PropagationFilter = z.infer<typeof propagationFilterSchema>;\nexport type PropagationConversion = z.infer<typeof propagationConversionSchema>;\nexport type BulkPropagationOperation = z.infer<typeof bulkPropagationOperationSchema>;\nexport type PropagationStats = z.infer<typeof propagationStatsSchema>;\nexport type AdvancedPropagationSearch = z.infer<typeof advancedPropagationSearchSchema>;"],
      names: ["advancedPropagationSearchSchema", "bulkPropagationOperationSchema", "createPropagationSchema", "propagationConversionSchema", "propagationFilterSchema", "propagationSchema", "propagationSearchSchema", "propagationStatsSchema", "propagationStatusUpdateSchema", "updatePropagationSchema", "z", "object", "plantId", "number", "int", "positive", "parentInstanceId", "optional", "nullable", "nickname", "string", "min", "max", "trim", "location", "dateStarted", "date", "status", "enum", "default", "sourceType", "externalSource", "externalSourceDetails", "notes", "images", "array", "extend", "userId", "refine", "data", "message", "partial", "id", "undefined", "query", "limit", "offset", "startedAfter", "startedBefore", "sortBy", "sortOrder", "propagationId", "fertilizerSchedule", "val", "test", "propagationIds", "operation", "dateRange", "start", "end", "plantName", "family", "genus", "species", "cultivar", "dateStartedRange", "operator", "includeStats", "boolean"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "e581ea0c4b07f2d406c4e2e829ea0f69ba7e8d49"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2mczfogwhf = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2mczfogwhf();
cov_2mczfogwhf().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_2mczfogwhf().f[0]++;
  cov_2mczfogwhf().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_2mczfogwhf().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_2mczfogwhf().s[3]++;
_export(exports, {
  get advancedPropagationSearchSchema() {
    /* istanbul ignore next */
    cov_2mczfogwhf().f[1]++;
    cov_2mczfogwhf().s[4]++;
    return advancedPropagationSearchSchema;
  },
  get bulkPropagationOperationSchema() {
    /* istanbul ignore next */
    cov_2mczfogwhf().f[2]++;
    cov_2mczfogwhf().s[5]++;
    return bulkPropagationOperationSchema;
  },
  get createPropagationSchema() {
    /* istanbul ignore next */
    cov_2mczfogwhf().f[3]++;
    cov_2mczfogwhf().s[6]++;
    return createPropagationSchema;
  },
  get propagationConversionSchema() {
    /* istanbul ignore next */
    cov_2mczfogwhf().f[4]++;
    cov_2mczfogwhf().s[7]++;
    return propagationConversionSchema;
  },
  get propagationFilterSchema() {
    /* istanbul ignore next */
    cov_2mczfogwhf().f[5]++;
    cov_2mczfogwhf().s[8]++;
    return propagationFilterSchema;
  },
  get propagationSchema() {
    /* istanbul ignore next */
    cov_2mczfogwhf().f[6]++;
    cov_2mczfogwhf().s[9]++;
    return propagationSchema;
  },
  get propagationSearchSchema() {
    /* istanbul ignore next */
    cov_2mczfogwhf().f[7]++;
    cov_2mczfogwhf().s[10]++;
    return propagationSearchSchema;
  },
  get propagationStatsSchema() {
    /* istanbul ignore next */
    cov_2mczfogwhf().f[8]++;
    cov_2mczfogwhf().s[11]++;
    return propagationStatsSchema;
  },
  get propagationStatusUpdateSchema() {
    /* istanbul ignore next */
    cov_2mczfogwhf().f[9]++;
    cov_2mczfogwhf().s[12]++;
    return propagationStatusUpdateSchema;
  },
  get updatePropagationSchema() {
    /* istanbul ignore next */
    cov_2mczfogwhf().f[10]++;
    cov_2mczfogwhf().s[13]++;
    return updatePropagationSchema;
  }
});
const _zod =
/* istanbul ignore next */
(cov_2mczfogwhf().s[14]++, require("zod"));
const propagationSchema =
/* istanbul ignore next */
(cov_2mczfogwhf().s[15]++, _zod.z.object({
  plantId: _zod.z.number().int().positive('Plant ID is required'),
  parentInstanceId: _zod.z.number().int().positive().optional().nullable(),
  nickname: _zod.z.string().min(1, 'Propagation nickname is required').max(100, 'Nickname too long').trim(),
  location: _zod.z.string().min(1, 'Location is required').max(100, 'Location description too long').trim(),
  dateStarted: _zod.z.date().optional(),
  status: _zod.z.enum(['started', 'rooting', 'planted', 'established']).default('started'),
  sourceType: _zod.z.enum(['internal', 'external']).default('internal'),
  externalSource: _zod.z.enum(['gift', 'trade', 'purchase', 'other']).optional().nullable(),
  externalSourceDetails: _zod.z.string().max(500, 'External source details too long').optional().nullable(),
  notes: _zod.z.string().max(2000, 'Notes too long').optional().nullable(),
  images: _zod.z.array(_zod.z.string()).max(10, 'Maximum 10 images allowed').default([])
}));
const createPropagationSchema =
/* istanbul ignore next */
(cov_2mczfogwhf().s[16]++, propagationSchema.extend({
  userId: _zod.z.number().int().positive('User ID is required')
}).refine(data => {
  /* istanbul ignore next */
  cov_2mczfogwhf().f[11]++;
  cov_2mczfogwhf().s[17]++;
  // If source type is internal, parent instance ID is required
  if (
  /* istanbul ignore next */
  (cov_2mczfogwhf().b[1][0]++, data.sourceType === 'internal') &&
  /* istanbul ignore next */
  (cov_2mczfogwhf().b[1][1]++, !data.parentInstanceId)) {
    /* istanbul ignore next */
    cov_2mczfogwhf().b[0][0]++;
    cov_2mczfogwhf().s[18]++;
    return false;
  } else
  /* istanbul ignore next */
  {
    cov_2mczfogwhf().b[0][1]++;
  }
  // If source type is external, external source is required
  cov_2mczfogwhf().s[19]++;
  if (
  /* istanbul ignore next */
  (cov_2mczfogwhf().b[3][0]++, data.sourceType === 'external') &&
  /* istanbul ignore next */
  (cov_2mczfogwhf().b[3][1]++, !data.externalSource)) {
    /* istanbul ignore next */
    cov_2mczfogwhf().b[2][0]++;
    cov_2mczfogwhf().s[20]++;
    return false;
  } else
  /* istanbul ignore next */
  {
    cov_2mczfogwhf().b[2][1]++;
  }
  cov_2mczfogwhf().s[21]++;
  return true;
}, {
  message: 'Internal propagations require parent instance ID, external propagations require external source'
}));
const updatePropagationSchema =
/* istanbul ignore next */
(cov_2mczfogwhf().s[22]++, propagationSchema.partial().extend({
  id: _zod.z.number().int().positive(),
  userId: _zod.z.number().int().positive().optional()
}).refine(data => {
  /* istanbul ignore next */
  cov_2mczfogwhf().f[12]++;
  cov_2mczfogwhf().s[23]++;
  // If source type is being changed to internal, parent instance ID is required
  if (
  /* istanbul ignore next */
  (cov_2mczfogwhf().b[5][0]++, data.sourceType === 'internal') &&
  /* istanbul ignore next */
  (cov_2mczfogwhf().b[5][1]++, data.parentInstanceId === undefined)) {
    /* istanbul ignore next */
    cov_2mczfogwhf().b[4][0]++;
    cov_2mczfogwhf().s[24]++;
    return false;
  } else
  /* istanbul ignore next */
  {
    cov_2mczfogwhf().b[4][1]++;
  }
  // If source type is being changed to external, external source is required
  cov_2mczfogwhf().s[25]++;
  if (
  /* istanbul ignore next */
  (cov_2mczfogwhf().b[7][0]++, data.sourceType === 'external') &&
  /* istanbul ignore next */
  (cov_2mczfogwhf().b[7][1]++, data.externalSource === undefined)) {
    /* istanbul ignore next */
    cov_2mczfogwhf().b[6][0]++;
    cov_2mczfogwhf().s[26]++;
    return false;
  } else
  /* istanbul ignore next */
  {
    cov_2mczfogwhf().b[6][1]++;
  }
  cov_2mczfogwhf().s[27]++;
  return true;
}, {
  message: 'Source type changes must include appropriate source information'
}));
const propagationStatusUpdateSchema =
/* istanbul ignore next */
(cov_2mczfogwhf().s[28]++, _zod.z.object({
  id: _zod.z.number().int().positive(),
  status: _zod.z.enum(['started', 'rooting', 'planted', 'established']),
  notes: _zod.z.string().max(500, 'Status notes too long').optional()
}));
const propagationSearchSchema =
/* istanbul ignore next */
(cov_2mczfogwhf().s[29]++, _zod.z.object({
  query: _zod.z.string().min(1, 'Search query is required').max(200, 'Search query too long').trim(),
  userId: _zod.z.number().int().positive('User ID is required'),
  limit: _zod.z.number().int().min(1).max(100).default(20),
  offset: _zod.z.number().int().min(0).default(0)
}));
const propagationFilterSchema =
/* istanbul ignore next */
(cov_2mczfogwhf().s[30]++, _zod.z.object({
  userId: _zod.z.number().int().positive('User ID is required'),
  status: _zod.z.enum(['started', 'rooting', 'planted', 'established']).optional(),
  sourceType: _zod.z.enum(['internal', 'external']).optional(),
  externalSource: _zod.z.enum(['gift', 'trade', 'purchase', 'other']).optional(),
  plantId: _zod.z.number().int().positive().optional(),
  parentInstanceId: _zod.z.number().int().positive().optional(),
  location: _zod.z.string().optional(),
  // Date range filters
  startedAfter: _zod.z.date().optional(),
  startedBefore: _zod.z.date().optional(),
  limit: _zod.z.number().int().min(1).max(100).default(20),
  offset: _zod.z.number().int().min(0).default(0),
  // Sorting options
  sortBy: _zod.z.enum(['nickname', 'location', 'date_started', 'status', 'source_type']).default('date_started'),
  sortOrder: _zod.z.enum(['asc', 'desc']).default('desc')
}));
const propagationConversionSchema =
/* istanbul ignore next */
(cov_2mczfogwhf().s[31]++, _zod.z.object({
  propagationId: _zod.z.number().int().positive('Propagation ID is required'),
  nickname: _zod.z.string().min(1, 'Plant nickname is required').max(100, 'Nickname too long').trim().optional(),
  location: _zod.z.string().min(1, 'Location is required').max(100, 'Location description too long').trim().optional(),
  fertilizerSchedule: _zod.z.string().min(1, 'Fertilizer schedule is required').max(50, 'Schedule description too long').refine(val => {
    /* istanbul ignore next */
    cov_2mczfogwhf().f[13]++;
    cov_2mczfogwhf().s[32]++;
    return /^\d+\s*(day|week|month)s?$/i.test(val);
  }, 'Schedule must be in format like "2 weeks", "1 month", "14 days"').default('2 weeks'),
  notes: _zod.z.string().max(2000, 'Notes too long').optional()
}));
const bulkPropagationOperationSchema =
/* istanbul ignore next */
(cov_2mczfogwhf().s[33]++, _zod.z.object({
  propagationIds: _zod.z.array(_zod.z.number().int().positive()).min(1, 'At least one propagation ID is required').max(50, 'Maximum 50 propagations allowed per bulk operation'),
  operation: _zod.z.enum(['update_status', 'delete', 'convert']),
  // Optional data for specific operations
  status: _zod.z.enum(['started', 'rooting', 'planted', 'established']).optional(),
  notes: _zod.z.string().max(500, 'Notes too long').optional(),
  // For conversion operations
  fertilizerSchedule: _zod.z.string().optional()
}));
const propagationStatsSchema =
/* istanbul ignore next */
(cov_2mczfogwhf().s[34]++, _zod.z.object({
  userId: _zod.z.number().int().positive('User ID is required'),
  sourceType: _zod.z.enum(['internal', 'external', 'all']).default('all'),
  dateRange: _zod.z.object({
    start: _zod.z.date().optional(),
    end: _zod.z.date().optional()
  }).optional()
}));
const advancedPropagationSearchSchema =
/* istanbul ignore next */
(cov_2mczfogwhf().s[35]++, _zod.z.object({
  userId: _zod.z.number().int().positive('User ID is required'),
  // Text search fields
  nickname: _zod.z.string().optional(),
  location: _zod.z.string().optional(),
  notes: _zod.z.string().optional(),
  externalSourceDetails: _zod.z.string().optional(),
  // Plant taxonomy fields
  plantName: _zod.z.string().optional(),
  family: _zod.z.string().optional(),
  genus: _zod.z.string().optional(),
  species: _zod.z.string().optional(),
  cultivar: _zod.z.string().optional(),
  // Propagation-specific fields
  status: _zod.z.array(_zod.z.enum(['started', 'rooting', 'planted', 'established'])).optional(),
  sourceType: _zod.z.array(_zod.z.enum(['internal', 'external'])).optional(),
  externalSource: _zod.z.array(_zod.z.enum(['gift', 'trade', 'purchase', 'other'])).optional(),
  // Date ranges
  dateStartedRange: _zod.z.object({
    start: _zod.z.date().optional(),
    end: _zod.z.date().optional()
  }).optional(),
  // Search logic
  operator: _zod.z.enum(['AND', 'OR']).default('OR'),
  // Result options
  limit: _zod.z.number().int().min(1).max(100).default(20),
  offset: _zod.z.number().int().min(0).default(0),
  sortBy: _zod.z.enum(['nickname', 'location', 'date_started', 'status', 'source_type', 'plant_name']).default('date_started'),
  sortOrder: _zod.z.enum(['asc', 'desc']).default('desc'),
  includeStats: _zod.z.boolean().default(false)
}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,