{"version":3,"names":["cov_1r6u0miuyu","actualCoverage","s","POST","request","f","_middleware","withRateLimit","req","body","json","validation","_validation","validateInput","signInSchema","success","b","_server","NextResponse","error","errors","status","email","password","data","result","_auth","signIn","_server1","setSessionCookie","session","id","user","isEmailVerified","requiresVerification","name","console"],"sources":["/Users/stefanbekker/projects/fancy-planties/src/app/api/auth/signin/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { signIn } from '@/lib/auth';\nimport { setSessionCookie } from '@/lib/auth/server';\nimport { signInSchema, validateInput } from '@/lib/auth/validation';\nimport { withRateLimit } from '@/lib/auth/middleware';\n\nexport async function POST(request: NextRequest) {\n  return withRateLimit(request, async (req) => {\n    try {\n      const body = await req.json();\n\n      // Validate input\n      const validation = validateInput(signInSchema, body);\n      if (!validation.success) {\n        return NextResponse.json(\n          { error: 'Validation failed', errors: validation.errors },\n          { status: 400 }\n        );\n      }\n\n      const { email, password } = validation.data;\n\n      // Attempt to sign in\n      const result = await signIn(email, password);\n\n      if (!result) {\n        return NextResponse.json(\n          { error: 'Invalid email or password' },\n          { status: 401 }\n        );\n      }\n\n      // Set session cookie\n      await setSessionCookie(result.session.id);\n\n      // Check if email verification is required\n      if (!result.user.isEmailVerified) {\n        return NextResponse.json({\n          success: true,\n          requiresVerification: true,\n          user: {\n            id: result.user.id,\n            email: result.user.email,\n            name: result.user.name,\n            isEmailVerified: result.user.isEmailVerified,\n          },\n        });\n      }\n\n      return NextResponse.json({\n        success: true,\n        user: {\n          id: result.user.id,\n          email: result.user.email,\n          name: result.user.name,\n          isEmailVerified: result.user.isEmailVerified,\n        },\n      });\n\n    } catch (error) {\n      console.error('Sign in error:', error);\n      return NextResponse.json(\n        { error: 'Internal server error' },\n        { status: 500 }\n      );\n    }\n  });\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAMO;IAAAA,cAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,cAAA;AAAAA,cAAA,GAAAE,CAAA;;;;;;+BAAe;;;;;;WAAAC,IAAA;;;;;kCANoB;;;kCACnB;;;kCACU;;;kCACW;;;kCACd;AAEvB,eAAeA,KAAKC,OAAoB;EAAA;EAAAJ,cAAA,GAAAK,CAAA;EAAAL,cAAA,GAAAE,CAAA;EAC7C,OAAO,IAAAI,WAAA,CAAAC,aAAa,EAACH,OAAA,EAAS,MAAOI,GAAA;IAAA;IAAAR,cAAA,GAAAK,CAAA;IAAAL,cAAA,GAAAE,CAAA;IACnC,IAAI;MACF,MAAMO,IAAA;MAAA;MAAA,CAAAT,cAAA,GAAAE,CAAA,QAAO,MAAMM,GAAA,CAAIE,IAAI;MAE3B;MACA,MAAMC,UAAA;MAAA;MAAA,CAAAX,cAAA,GAAAE,CAAA,QAAa,IAAAU,WAAA,CAAAC,aAAa,EAACD,WAAA,CAAAE,YAAY,EAAEL,IAAA;MAAA;MAAAT,cAAA,GAAAE,CAAA;MAC/C,IAAI,CAACS,UAAA,CAAWI,OAAO,EAAE;QAAA;QAAAf,cAAA,GAAAgB,CAAA;QAAAhB,cAAA,GAAAE,CAAA;QACvB,OAAOe,OAAA,CAAAC,YAAY,CAACR,IAAI,CACtB;UAAES,KAAA,EAAO;UAAqBC,MAAA,EAAQT,UAAA,CAAWS;QAAO,GACxD;UAAEC,MAAA,EAAQ;QAAI;MAElB;MAAA;MAAA;QAAArB,cAAA,GAAAgB,CAAA;MAAA;MAEA,MAAM;QAAEM,KAAK;QAAEC;MAAQ,CAAE;MAAA;MAAA,CAAAvB,cAAA,GAAAE,CAAA,QAAGS,UAAA,CAAWa,IAAI;MAE3C;MACA,MAAMC,MAAA;MAAA;MAAA,CAAAzB,cAAA,GAAAE,CAAA,QAAS,MAAM,IAAAwB,KAAA,CAAAC,MAAM,EAACL,KAAA,EAAOC,QAAA;MAAA;MAAAvB,cAAA,GAAAE,CAAA;MAEnC,IAAI,CAACuB,MAAA,EAAQ;QAAA;QAAAzB,cAAA,GAAAgB,CAAA;QAAAhB,cAAA,GAAAE,CAAA;QACX,OAAOe,OAAA,CAAAC,YAAY,CAACR,IAAI,CACtB;UAAES,KAAA,EAAO;QAA4B,GACrC;UAAEE,MAAA,EAAQ;QAAI;MAElB;MAAA;MAAA;QAAArB,cAAA,GAAAgB,CAAA;MAAA;MAEA;MAAAhB,cAAA,GAAAE,CAAA;MACA,MAAM,IAAA0B,QAAA,CAAAC,gBAAgB,EAACJ,MAAA,CAAOK,OAAO,CAACC,EAAE;MAExC;MAAA;MAAA/B,cAAA,GAAAE,CAAA;MACA,IAAI,CAACuB,MAAA,CAAOO,IAAI,CAACC,eAAe,EAAE;QAAA;QAAAjC,cAAA,GAAAgB,CAAA;QAAAhB,cAAA,GAAAE,CAAA;QAChC,OAAOe,OAAA,CAAAC,YAAY,CAACR,IAAI,CAAC;UACvBK,OAAA,EAAS;UACTmB,oBAAA,EAAsB;UACtBF,IAAA,EAAM;YACJD,EAAA,EAAIN,MAAA,CAAOO,IAAI,CAACD,EAAE;YAClBT,KAAA,EAAOG,MAAA,CAAOO,IAAI,CAACV,KAAK;YACxBa,IAAA,EAAMV,MAAA,CAAOO,IAAI,CAACG,IAAI;YACtBF,eAAA,EAAiBR,MAAA,CAAOO,IAAI,CAACC;UAC/B;QACF;MACF;MAAA;MAAA;QAAAjC,cAAA,GAAAgB,CAAA;MAAA;MAAAhB,cAAA,GAAAE,CAAA;MAEA,OAAOe,OAAA,CAAAC,YAAY,CAACR,IAAI,CAAC;QACvBK,OAAA,EAAS;QACTiB,IAAA,EAAM;UACJD,EAAA,EAAIN,MAAA,CAAOO,IAAI,CAACD,EAAE;UAClBT,KAAA,EAAOG,MAAA,CAAOO,IAAI,CAACV,KAAK;UACxBa,IAAA,EAAMV,MAAA,CAAOO,IAAI,CAACG,IAAI;UACtBF,eAAA,EAAiBR,MAAA,CAAOO,IAAI,CAACC;QAC/B;MACF;IAEF,EAAE,OAAOd,KAAA,EAAO;MAAA;MAAAnB,cAAA,GAAAE,CAAA;MACdkC,OAAA,CAAQjB,KAAK,CAAC,kBAAkBA,KAAA;MAAA;MAAAnB,cAAA,GAAAE,CAAA;MAChC,OAAOe,OAAA,CAAAC,YAAY,CAACR,IAAI,CACtB;QAAES,KAAA,EAAO;MAAwB,GACjC;QAAEE,MAAA,EAAQ;MAAI;IAElB;EACF;AACF","ignoreList":[]}