{"version":3,"names":["PlantSearchService","cov_2i6bs01ag9","f","s","plantSearchService","searchUtils","DEFAULT_FUSE_CONFIG","threshold","location","distance","minMatchCharLength","includeScore","includeMatches","keys","name","weight","constructor","config","b","fuseInstance","plantData","lastUpdate","cacheTimeout","initializeIndex","plants","_fuse","default","map","key","Date","needsRefresh","now","getTime","fuzzySearch","query","limit","length","results","search","result","item","score","matches","match","field","value","indices","tuple","hybridSearch","searchParams","options","startTime","dbResults","_planttaxonomy","searchPlants","fuzzyResults","mergedResults","mergeSearchResults","slice","offset","searchTime","resultMap","Map","forEach","plant","set","id","combinedScore","fuzzyResult","existing","get","matchedFields","m","Array","from","values","sort","a","Math","round","getSearchSuggestions","partialQuery","suggestions","Set","commonName","toLowerCase","includes","add","scientificName","genus","species","advancedSearch","criteria","includeUnverified","isVerified","undefined","filters","family","clearCache","getCacheStats","isInitialized","plantCount","highlightMatches","text","highlightedText","regex","RegExp","replace","extractKeywords","split","filter","keyword","generateQuerySuggestions","words","trim","push","calculateRelevanceScore","lowerQuery","startsWith","min"],"sources":["/Users/stefanbekker/projects/fancy-planties/src/lib/services/plant-search.ts"],"sourcesContent":["import Fuse, { type IFuseOptions } from 'fuse.js';\nimport type { \n  PlantSuggestion, \n  FuzzySearchConfig,\n  PlantSearch \n} from '@/lib/validation/plant-schemas';\nimport type { \n  FuzzyMatchResult, \n  PlantSearchResult,\n  PlantLookupOptions \n} from '@/lib/types/plant-types';\nimport { searchPlants as dbSearchPlants } from '@/lib/db/queries/plant-taxonomy';\n\n// Default fuzzy search configuration\nconst DEFAULT_FUSE_CONFIG: IFuseOptions<PlantSuggestion> = {\n  threshold: 0.4, // Lower = more strict matching\n  location: 0,\n  distance: 100,\n  minMatchCharLength: 2,\n  includeScore: true,\n  includeMatches: true,\n  keys: [\n    {\n      name: 'commonName',\n      weight: 0.4, // Highest priority for common names\n    },\n    {\n      name: 'genus',\n      weight: 0.3,\n    },\n    {\n      name: 'species',\n      weight: 0.2,\n    },\n    {\n      name: 'family',\n      weight: 0.1, // Lowest priority for family\n    },\n  ],\n};\n\nexport class PlantSearchService {\n  private fuseInstance: Fuse<PlantSuggestion> | null = null;\n  private plantData: PlantSuggestion[] = [];\n  private lastUpdate: Date | null = null;\n  private readonly cacheTimeout = 5 * 60 * 1000; // 5 minutes\n\n  constructor(private config: Partial<FuzzySearchConfig> = {}) {}\n\n  // Initialize or update the search index\n  async initializeIndex(plants: PlantSuggestion[]): Promise<void> {\n    this.plantData = plants;\n    this.fuseInstance = new Fuse(plants, {\n      ...DEFAULT_FUSE_CONFIG,\n      threshold: this.config.threshold ?? DEFAULT_FUSE_CONFIG.threshold,\n      keys: this.config.keys ? this.config.keys.map(key => ({ name: key, weight: 1 })) : DEFAULT_FUSE_CONFIG.keys,\n    });\n    this.lastUpdate = new Date();\n  }\n\n  // Check if index needs refresh\n  private needsRefresh(): boolean {\n    if (!this.lastUpdate || !this.fuseInstance) return true;\n    return Date.now() - this.lastUpdate.getTime() > this.cacheTimeout;\n  }\n\n  // Perform fuzzy search on cached data\n  fuzzySearch(query: string, limit: number = 20): FuzzyMatchResult[] {\n    if (!this.fuseInstance || this.plantData.length === 0) {\n      return [];\n    }\n\n    const results = this.fuseInstance.search(query, { limit });\n    \n    return results.map(result => ({\n      item: result.item,\n      score: result.score || 0,\n      matches: result.matches?.map(match => ({\n        field: match.key || '',\n        value: match.value || '',\n        indices: (match.indices || []).map(tuple => [tuple[0], tuple[1]]),\n      })) || [],\n    }));\n  }\n\n  // Hybrid search: combines database search with fuzzy matching\n  async hybridSearch(\n    searchParams: PlantSearch,\n    options: PlantLookupOptions = {}\n  ): Promise<PlantSearchResult> {\n    const startTime = Date.now();\n\n    // First, get results from database (handles complex filtering, pagination)\n    const dbResults = await dbSearchPlants(searchParams, options);\n\n    // If we have a small result set, enhance with fuzzy search\n    if (dbResults.plants.length < 50 && searchParams.query.length >= 2) {\n      // Initialize fuzzy search if needed\n      if (this.needsRefresh()) {\n        await this.initializeIndex(dbResults.plants);\n      }\n\n      // Perform fuzzy search on the database results\n      const fuzzyResults = this.fuzzySearch(searchParams.query, searchParams.limit);\n      \n      // Merge and re-rank results\n      const mergedResults = this.mergeSearchResults(dbResults.plants, fuzzyResults);\n      \n      return {\n        ...dbResults,\n        plants: mergedResults.slice(searchParams.offset || 0, (searchParams.offset || 0) + searchParams.limit),\n        searchTime: Date.now() - startTime,\n      };\n    }\n\n    return {\n      ...dbResults,\n      searchTime: Date.now() - startTime,\n    };\n  }\n\n  // Merge database and fuzzy search results with intelligent ranking\n  private mergeSearchResults(\n    dbResults: PlantSuggestion[],\n    fuzzyResults: FuzzyMatchResult[]\n  ): PlantSuggestion[] {\n    const resultMap = new Map<number, PlantSuggestion & { combinedScore: number }>();\n\n    // Add database results with their scores\n    dbResults.forEach(plant => {\n      resultMap.set(plant.id, {\n        ...plant,\n        combinedScore: plant.score || 0,\n      });\n    });\n\n    // Enhance with fuzzy search scores\n    fuzzyResults.forEach(fuzzyResult => {\n      const existing = resultMap.get(fuzzyResult.item.id);\n      if (existing) {\n        // Combine scores: database score (0-100) + fuzzy score (0-1) * 50\n        existing.combinedScore = (existing.combinedScore || 0) + (1 - fuzzyResult.score) * 50;\n        existing.matchedFields = fuzzyResult.matches.map(m => m.field);\n      } else {\n        // Add new fuzzy result\n        resultMap.set(fuzzyResult.item.id, {\n          ...fuzzyResult.item,\n          combinedScore: (1 - fuzzyResult.score) * 50,\n          matchedFields: fuzzyResult.matches.map(m => m.field),\n        });\n      }\n    });\n\n    // Sort by combined score and return\n    return Array.from(resultMap.values())\n      .sort((a, b) => b.combinedScore - a.combinedScore)\n      .map(({ combinedScore, ...plant }) => ({\n        ...plant,\n        score: Math.round(combinedScore),\n      }));\n  }\n\n  // Get search suggestions based on partial input\n  async getSearchSuggestions(\n    partialQuery: string,\n    limit: number = 5\n  ): Promise<string[]> {\n    if (partialQuery.length < 2) return [];\n\n    const suggestions = new Set<string>();\n    \n    // Get fuzzy matches\n    const fuzzyResults = this.fuzzySearch(partialQuery, limit * 2);\n    \n    fuzzyResults.forEach(result => {\n      // Add common name\n      if (result.item.commonName.toLowerCase().includes(partialQuery.toLowerCase())) {\n        suggestions.add(result.item.commonName);\n      }\n      \n      // Add scientific name\n      const scientificName = `${result.item.genus} ${result.item.species}`;\n      if (scientificName.toLowerCase().includes(partialQuery.toLowerCase())) {\n        suggestions.add(scientificName);\n      }\n      \n      // Add genus if it matches\n      if (result.item.genus.toLowerCase().includes(partialQuery.toLowerCase())) {\n        suggestions.add(result.item.genus);\n      }\n    });\n\n    return Array.from(suggestions).slice(0, limit);\n  }\n\n  // Advanced search with multiple criteria\n  async advancedSearch(criteria: {\n    query?: string;\n    family?: string;\n    genus?: string;\n    species?: string;\n    commonName?: string;\n    isVerified?: boolean;\n    limit?: number;\n    offset?: number;\n  }): Promise<PlantSearchResult> {\n    const searchParams: PlantSearch = {\n      query: criteria.query || '',\n      limit: criteria.limit || 20,\n      offset: criteria.offset || 0,\n      includeUnverified: criteria.isVerified === undefined ? true : !criteria.isVerified,\n    };\n\n    const options: PlantLookupOptions = {\n      filters: {\n        family: criteria.family,\n        genus: criteria.genus,\n        isVerified: criteria.isVerified,\n      },\n    };\n\n    // If we have specific field criteria, use exact matching\n    if (criteria.family || criteria.genus || criteria.species || criteria.commonName) {\n      return await dbSearchPlants(searchParams, options);\n    }\n\n    // Otherwise use hybrid search\n    return await this.hybridSearch(searchParams, options);\n  }\n\n  // Clear the search cache\n  clearCache(): void {\n    this.fuseInstance = null;\n    this.plantData = [];\n    this.lastUpdate = null;\n  }\n\n  // Get cache statistics\n  getCacheStats() {\n    return {\n      isInitialized: !!this.fuseInstance,\n      plantCount: this.plantData.length,\n      lastUpdate: this.lastUpdate,\n      needsRefresh: this.needsRefresh(),\n    };\n  }\n}\n\n// Export a singleton instance\nexport const plantSearchService = new PlantSearchService();\n\n// Utility functions for search result processing\nexport const searchUtils = {\n  // Highlight matched terms in text\n  highlightMatches(text: string, matches: string[]): string {\n    if (!matches.length) return text;\n    \n    let highlightedText = text;\n    matches.forEach(match => {\n      const regex = new RegExp(`(${match})`, 'gi');\n      highlightedText = highlightedText.replace(regex, '<mark>$1</mark>');\n    });\n    \n    return highlightedText;\n  },\n\n  // Extract search keywords from query\n  extractKeywords(query: string): string[] {\n    return query\n      .toLowerCase()\n      .split(/[\\s,\\-_]+/)\n      .filter(keyword => keyword.length > 1)\n      .slice(0, 5); // Limit to 5 keywords\n  },\n\n  // Generate search suggestions based on common patterns\n  generateQuerySuggestions(query: string): string[] {\n    const suggestions: string[] = [];\n    \n    // If query looks like scientific name (two words)\n    const words = query.trim().split(/\\s+/);\n    if (words.length === 2) {\n      suggestions.push(`${words[0]} ${words[1]}`); // Exact scientific name\n      suggestions.push(words[0]); // Just genus\n      suggestions.push(words[1]); // Just species\n    }\n    \n    // Add partial matches\n    if (query.length >= 3) {\n      suggestions.push(`${query}*`); // Prefix search\n    }\n    \n    return suggestions.filter(s => s !== query).slice(0, 3);\n  },\n\n  // Score search result relevance\n  calculateRelevanceScore(\n    plant: PlantSuggestion,\n    query: string,\n    matchedFields: string[] = []\n  ): number {\n    let score = 0;\n    const lowerQuery = query.toLowerCase();\n    \n    // Exact matches get highest scores\n    if (plant.commonName.toLowerCase() === lowerQuery) score += 100;\n    else if (plant.commonName.toLowerCase().startsWith(lowerQuery)) score += 80;\n    else if (plant.commonName.toLowerCase().includes(lowerQuery)) score += 60;\n    \n    const scientificName = `${plant.genus} ${plant.species}`.toLowerCase();\n    if (scientificName === lowerQuery) score += 90;\n    else if (scientificName.startsWith(lowerQuery)) score += 70;\n    else if (scientificName.includes(lowerQuery)) score += 50;\n    \n    if (plant.genus.toLowerCase() === lowerQuery) score += 75;\n    if (plant.species.toLowerCase() === lowerQuery) score += 65;\n    if (plant.family.toLowerCase() === lowerQuery) score += 55;\n    \n    // Boost verified plants\n    if (plant.isVerified) score += 10;\n    \n    // Boost based on matched fields\n    matchedFields.forEach(field => {\n      if (field === 'commonName') score += 5;\n      if (field === 'genus') score += 3;\n      if (field === 'species') score += 2;\n    });\n    \n    return Math.min(score, 100); // Cap at 100\n  },\n};"],"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","ignoreList":[]}