fd392314ae05dc1a89999b1bc0ce2d55
/**
 * @jest-environment jsdom
 */ "use strict";
jest.mock('next/navigation', ()=>({
        useRouter: ()=>({
                push: mockPush,
                replace: mockReplace,
                back: mockBack,
                forward: mockForward,
                refresh: mockRefresh
            }),
        usePathname: ()=>mockPathname(),
        useSearchParams: ()=>({
                get: mockSearchParams,
                toString: ()=>'param1=value1&param2=value2'
            })
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _userevent = /*#__PURE__*/ _interop_require_default(require("@testing-library/user-event"));
const _renderhelpers = require("../../../test-utils/helpers/render-helpers.js");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Mock Next.js navigation hooks
const mockPush = jest.fn();
const mockReplace = jest.fn();
const mockBack = jest.fn();
const mockForward = jest.fn();
const mockRefresh = jest.fn();
const mockPathname = jest.fn();
const mockSearchParams = jest.fn();
// Test component that uses navigation
const NavigationTestComponent = ()=>{
    const router = require('next/navigation').useRouter();
    const pathname = require('next/navigation').usePathname();
    const searchParams = require('next/navigation').useSearchParams();
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        "data-testid": "navigation-test",
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "current-path",
                children: pathname
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "search-params",
                children: searchParams.toString()
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                onClick: ()=>router.push('/dashboard/plants'),
                "data-testid": "nav-to-plants",
                children: "Go to Plants"
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                onClick: ()=>router.replace('/dashboard/care'),
                "data-testid": "nav-replace-care",
                children: "Replace with Care"
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                onClick: ()=>router.back(),
                "data-testid": "nav-back",
                children: "Go Back"
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                onClick: ()=>router.forward(),
                "data-testid": "nav-forward",
                children: "Go Forward"
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                onClick: ()=>router.refresh(),
                "data-testid": "nav-refresh",
                children: "Refresh"
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                onClick: ()=>router.push(`/dashboard/plants?filter=${searchParams.get('filter') || 'all'}`),
                "data-testid": "nav-with-params",
                children: "Navigate with Params"
            })
        ]
    });
};
describe('Page Navigation', ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
        mockPathname.mockReturnValue('/dashboard');
        mockSearchParams.mockReturnValue('all');
    });
    describe('Router Navigation Methods', ()=>{
        it('navigates using router.push', async ()=>{
            const user = _userevent.default.setup();
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(NavigationTestComponent, {}));
            await user.click(_react1.screen.getByTestId('nav-to-plants'));
            expect(mockPush).toHaveBeenCalledWith('/dashboard/plants');
        });
        it('navigates using router.replace', async ()=>{
            const user = _userevent.default.setup();
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(NavigationTestComponent, {}));
            await user.click(_react1.screen.getByTestId('nav-replace-care'));
            expect(mockReplace).toHaveBeenCalledWith('/dashboard/care');
        });
        it('navigates back using router.back', async ()=>{
            const user = _userevent.default.setup();
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(NavigationTestComponent, {}));
            await user.click(_react1.screen.getByTestId('nav-back'));
            expect(mockBack).toHaveBeenCalled();
        });
        it('navigates forward using router.forward', async ()=>{
            const user = _userevent.default.setup();
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(NavigationTestComponent, {}));
            await user.click(_react1.screen.getByTestId('nav-forward'));
            expect(mockForward).toHaveBeenCalled();
        });
        it('refreshes page using router.refresh', async ()=>{
            const user = _userevent.default.setup();
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(NavigationTestComponent, {}));
            await user.click(_react1.screen.getByTestId('nav-refresh'));
            expect(mockRefresh).toHaveBeenCalled();
        });
    });
    describe('URL Parameters and Query Strings', ()=>{
        it('reads current pathname', ()=>{
            mockPathname.mockReturnValue('/dashboard/plants');
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(NavigationTestComponent, {}));
            expect(_react1.screen.getByTestId('current-path')).toHaveTextContent('/dashboard/plants');
        });
        it('reads search parameters', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(NavigationTestComponent, {}));
            expect(_react1.screen.getByTestId('search-params')).toHaveTextContent('param1=value1&param2=value2');
        });
        it('navigates with query parameters', async ()=>{
            const user = _userevent.default.setup();
            mockSearchParams.mockReturnValue('indoor');
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(NavigationTestComponent, {}));
            await user.click(_react1.screen.getByTestId('nav-with-params'));
            expect(mockPush).toHaveBeenCalledWith('/dashboard/plants?filter=indoor');
        });
        it('handles missing query parameters gracefully', async ()=>{
            const user = _userevent.default.setup();
            mockSearchParams.mockReturnValue(null);
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(NavigationTestComponent, {}));
            await user.click(_react1.screen.getByTestId('nav-with-params'));
            expect(mockPush).toHaveBeenCalledWith('/dashboard/plants?filter=all');
        });
    });
    describe('Navigation State Management', ()=>{
        it('updates pathname when navigation occurs', ()=>{
            mockPathname.mockReturnValue('/dashboard');
            const { rerender } = (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(NavigationTestComponent, {}));
            expect(_react1.screen.getByTestId('current-path')).toHaveTextContent('/dashboard');
            // Simulate navigation
            mockPathname.mockReturnValue('/dashboard/plants');
            rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(NavigationTestComponent, {}));
            expect(_react1.screen.getByTestId('current-path')).toHaveTextContent('/dashboard/plants');
        });
        it('maintains navigation state consistency', ()=>{
            mockPathname.mockReturnValue('/dashboard/care');
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(NavigationTestComponent, {}));
            // Multiple renders should maintain consistent state
            expect(_react1.screen.getByTestId('current-path')).toHaveTextContent('/dashboard/care');
        });
        it('handles rapid navigation changes', async ()=>{
            const user = _userevent.default.setup();
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(NavigationTestComponent, {}));
            // Rapid navigation calls
            await user.click(_react1.screen.getByTestId('nav-to-plants'));
            await user.click(_react1.screen.getByTestId('nav-replace-care'));
            await user.click(_react1.screen.getByTestId('nav-back'));
            expect(mockPush).toHaveBeenCalledWith('/dashboard/plants');
            expect(mockReplace).toHaveBeenCalledWith('/dashboard/care');
            expect(mockBack).toHaveBeenCalled();
        });
    });
    describe('Route Protection Integration', ()=>{
        const ProtectedNavigationComponent = ()=>{
            const router = require('next/navigation').useRouter();
            const [isAuthenticated, setIsAuthenticated] = _react.default.useState(true);
            const handleProtectedNavigation = (path)=>{
                if (isAuthenticated) {
                    router.push(path);
                } else {
                    router.push('/auth/signin?redirect=' + encodeURIComponent(path));
                }
            };
            return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("button", {
                        onClick: ()=>setIsAuthenticated(!isAuthenticated),
                        "data-testid": "toggle-auth",
                        children: [
                            "Toggle Auth: ",
                            isAuthenticated ? 'Authenticated' : 'Not Authenticated'
                        ]
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                        onClick: ()=>handleProtectedNavigation('/dashboard/admin'),
                        "data-testid": "nav-to-admin",
                        children: "Go to Admin"
                    })
                ]
            });
        };
        it('navigates to protected route when authenticated', async ()=>{
            const user = _userevent.default.setup();
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(ProtectedNavigationComponent, {}));
            await user.click(_react1.screen.getByTestId('nav-to-admin'));
            expect(mockPush).toHaveBeenCalledWith('/dashboard/admin');
        });
        it('redirects to sign-in when not authenticated', async ()=>{
            const user = _userevent.default.setup();
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(ProtectedNavigationComponent, {}));
            // Toggle authentication off
            await user.click(_react1.screen.getByTestId('toggle-auth'));
            expect(_react1.screen.getByText(/not authenticated/i)).toBeInTheDocument();
            // Try to navigate to protected route
            await user.click(_react1.screen.getByTestId('nav-to-admin'));
            expect(mockPush).toHaveBeenCalledWith('/auth/signin?redirect=%2Fdashboard%2Fadmin');
        });
    });
    describe('Navigation Error Handling', ()=>{
        const ErrorHandlingNavigationComponent = ()=>{
            const router = require('next/navigation').useRouter();
            const [error, setError] = _react.default.useState(null);
            const handleNavigationWithError = async (path)=>{
                try {
                    // Simulate navigation that might fail
                    if (path === '/invalid-route') {
                        throw new Error('Invalid route');
                    }
                    router.push(path);
                    setError(null);
                } catch (err) {
                    setError(err.message);
                }
            };
            return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                children: [
                    error && /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        "data-testid": "navigation-error",
                        children: error
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                        onClick: ()=>handleNavigationWithError('/dashboard/plants'),
                        "data-testid": "nav-valid",
                        children: "Valid Navigation"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                        onClick: ()=>handleNavigationWithError('/invalid-route'),
                        "data-testid": "nav-invalid",
                        children: "Invalid Navigation"
                    })
                ]
            });
        };
        it('handles successful navigation without errors', async ()=>{
            const user = _userevent.default.setup();
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(ErrorHandlingNavigationComponent, {}));
            await user.click(_react1.screen.getByTestId('nav-valid'));
            expect(mockPush).toHaveBeenCalledWith('/dashboard/plants');
            expect(_react1.screen.queryByTestId('navigation-error')).not.toBeInTheDocument();
        });
        it('handles navigation errors gracefully', async ()=>{
            const user = _userevent.default.setup();
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(ErrorHandlingNavigationComponent, {}));
            await user.click(_react1.screen.getByTestId('nav-invalid'));
            expect(_react1.screen.getByTestId('navigation-error')).toHaveTextContent('Invalid route');
            expect(mockPush).not.toHaveBeenCalledWith('/invalid-route');
        });
    });
    describe('Breadcrumb Navigation', ()=>{
        const BreadcrumbComponent = ()=>{
            const pathname = require('next/navigation').usePathname();
            const router = require('next/navigation').useRouter();
            const pathSegments = pathname.split('/').filter(Boolean);
            const breadcrumbs = pathSegments.map((segment, index)=>{
                const path = '/' + pathSegments.slice(0, index + 1).join('/');
                const label = segment.charAt(0).toUpperCase() + segment.slice(1);
                return {
                    path,
                    label,
                    isLast: index === pathSegments.length - 1
                };
            });
            return /*#__PURE__*/ (0, _jsxruntime.jsx)("nav", {
                "data-testid": "breadcrumb-nav",
                "aria-label": "Breadcrumb",
                children: /*#__PURE__*/ (0, _jsxruntime.jsxs)("ol", {
                    className: "breadcrumb-list",
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("li", {
                            children: /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                                onClick: ()=>router.push('/'),
                                "data-testid": "breadcrumb-home",
                                children: "Home"
                            })
                        }),
                        breadcrumbs.map((crumb, index)=>/*#__PURE__*/ (0, _jsxruntime.jsx)("li", {
                                children: crumb.isLast ? /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                    "data-testid": `breadcrumb-current-${index}`,
                                    "aria-current": "page",
                                    children: crumb.label
                                }) : /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                                    onClick: ()=>router.push(crumb.path),
                                    "data-testid": `breadcrumb-link-${index}`,
                                    children: crumb.label
                                })
                            }, crumb.path))
                    ]
                })
            });
        };
        it('renders breadcrumb navigation correctly', ()=>{
            mockPathname.mockReturnValue('/dashboard/plants/123');
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(BreadcrumbComponent, {}));
            expect(_react1.screen.getByTestId('breadcrumb-nav')).toBeInTheDocument();
            expect(_react1.screen.getByTestId('breadcrumb-home')).toBeInTheDocument();
            expect(_react1.screen.getByTestId('breadcrumb-link-0')).toHaveTextContent('Dashboard');
            expect(_react1.screen.getByTestId('breadcrumb-link-1')).toHaveTextContent('Plants');
            expect(_react1.screen.getByTestId('breadcrumb-current-2')).toHaveTextContent('123');
        });
        it('handles breadcrumb navigation clicks', async ()=>{
            const user = _userevent.default.setup();
            mockPathname.mockReturnValue('/dashboard/plants/123');
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(BreadcrumbComponent, {}));
            await user.click(_react1.screen.getByTestId('breadcrumb-home'));
            expect(mockPush).toHaveBeenCalledWith('/');
            await user.click(_react1.screen.getByTestId('breadcrumb-link-0'));
            expect(mockPush).toHaveBeenCalledWith('/dashboard');
            await user.click(_react1.screen.getByTestId('breadcrumb-link-1'));
            expect(mockPush).toHaveBeenCalledWith('/dashboard/plants');
        });
        it('marks current page correctly in breadcrumbs', ()=>{
            mockPathname.mockReturnValue('/dashboard/plants');
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(BreadcrumbComponent, {}));
            const currentPage = _react1.screen.getByTestId('breadcrumb-current-1');
            expect(currentPage).toHaveAttribute('aria-current', 'page');
            expect(currentPage).toHaveTextContent('Plants');
        });
        it('handles root path breadcrumbs', ()=>{
            mockPathname.mockReturnValue('/');
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(BreadcrumbComponent, {}));
            expect(_react1.screen.getByTestId('breadcrumb-home')).toBeInTheDocument();
            expect(_react1.screen.queryByTestId('breadcrumb-link-0')).not.toBeInTheDocument();
        });
    });
    describe('Navigation Accessibility', ()=>{
        const AccessibleNavigationComponent = ()=>{
            const router = require('next/navigation').useRouter();
            const [isNavigating, setIsNavigating] = _react.default.useState(false);
            const handleAccessibleNavigation = async (path, label)=>{
                setIsNavigating(true);
                // Announce navigation to screen readers
                const announcement = `Navigating to ${label}`;
                // Simulate navigation delay
                setTimeout(()=>{
                    router.push(path);
                    setIsNavigating(false);
                }, 100);
                return announcement;
            };
            return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        role: "status",
                        "aria-live": "polite",
                        "data-testid": "navigation-status",
                        className: isNavigating ? '' : 'sr-only',
                        children: isNavigating ? 'Navigating...' : ''
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("nav", {
                        role: "navigation",
                        "aria-label": "Main navigation",
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                                onClick: ()=>handleAccessibleNavigation('/dashboard/plants', 'Plants page'),
                                "data-testid": "accessible-nav-plants",
                                "aria-describedby": "plants-description",
                                children: "Plants"
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                id: "plants-description",
                                className: "sr-only",
                                children: "View and manage your plant collection"
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                                onClick: ()=>handleAccessibleNavigation('/dashboard/care', 'Care page'),
                                "data-testid": "accessible-nav-care",
                                disabled: isNavigating,
                                children: "Care"
                            })
                        ]
                    })
                ]
            });
        };
        it('provides navigation status for screen readers', async ()=>{
            const user = _userevent.default.setup();
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(AccessibleNavigationComponent, {}));
            await user.click(_react1.screen.getByTestId('accessible-nav-plants'));
            expect(_react1.screen.getByTestId('navigation-status')).toHaveTextContent('Navigating...');
            await (0, _react1.waitFor)(()=>{
                expect(mockPush).toHaveBeenCalledWith('/dashboard/plants');
            });
        });
        it('has proper ARIA labels and roles', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(AccessibleNavigationComponent, {}));
            const nav = _react1.screen.getByRole('navigation');
            expect(nav).toHaveAttribute('aria-label', 'Main navigation');
            const status = _react1.screen.getByRole('status');
            expect(status).toHaveAttribute('aria-live', 'polite');
            const plantsButton = _react1.screen.getByTestId('accessible-nav-plants');
            expect(plantsButton).toHaveAttribute('aria-describedby', 'plants-description');
        });
        it('disables navigation during transitions', async ()=>{
            const user = _userevent.default.setup();
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(AccessibleNavigationComponent, {}));
            await user.click(_react1.screen.getByTestId('accessible-nav-plants'));
            const careButton = _react1.screen.getByTestId('accessible-nav-care');
            expect(careButton).toBeDisabled();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,