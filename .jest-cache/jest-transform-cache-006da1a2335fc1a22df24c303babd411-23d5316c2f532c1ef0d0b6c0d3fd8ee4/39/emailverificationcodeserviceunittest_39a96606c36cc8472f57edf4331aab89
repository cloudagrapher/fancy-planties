b7edfb404cc89be7499e3b24dabee0fa
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _globals = require("@jest/globals");
const _emailverificationcodeservice = require("../email-verification-code-service");
(0, _globals.describe)('EmailVerificationCodeService - Unit Tests', ()=>{
    (0, _globals.describe)('VerificationCodeError', ()=>{
        (0, _globals.it)('should create error with correct message and code', ()=>{
            const error = new _emailverificationcodeservice.VerificationCodeError('Test message', _emailverificationcodeservice.VerificationError.CODE_EXPIRED);
            (0, _globals.expect)(error.message).toBe('Test message');
            (0, _globals.expect)(error.code).toBe(_emailverificationcodeservice.VerificationError.CODE_EXPIRED);
            (0, _globals.expect)(error.name).toBe('VerificationCodeError');
        });
    });
    (0, _globals.describe)('VerificationError enum', ()=>{
        (0, _globals.it)('should have all required error codes', ()=>{
            (0, _globals.expect)(_emailverificationcodeservice.VerificationError.CODE_EXPIRED).toBe('CODE_EXPIRED');
            (0, _globals.expect)(_emailverificationcodeservice.VerificationError.CODE_INVALID).toBe('CODE_INVALID');
            (0, _globals.expect)(_emailverificationcodeservice.VerificationError.TOO_MANY_ATTEMPTS).toBe('TOO_MANY_ATTEMPTS');
            (0, _globals.expect)(_emailverificationcodeservice.VerificationError.USER_NOT_FOUND).toBe('USER_NOT_FOUND');
            (0, _globals.expect)(_emailverificationcodeservice.VerificationError.ALREADY_VERIFIED).toBe('ALREADY_VERIFIED');
        });
    });
    (0, _globals.describe)('Code generation security', ()=>{
        (0, _globals.it)('should generate cryptographically secure codes', ()=>{
            // Test the crypto.randomBytes functionality directly
            const crypto = require('crypto');
            const originalRandomBytes = crypto.randomBytes;
            // Mock to return predictable values for testing
            const mockBuffer = Buffer.from([
                0,
                0,
                0,
                1
            ]); // Small number
            crypto.randomBytes = _globals.jest.fn().mockReturnValue(mockBuffer);
            // Test the logic that would be in generateSecureCode
            const buffer = crypto.randomBytes(4);
            const randomNumber = buffer.readUInt32BE(0);
            const code = (randomNumber % 1000000).toString().padStart(6, '0');
            (0, _globals.expect)(code).toMatch(/^\d{6}$/);
            (0, _globals.expect)(code.length).toBe(6);
            (0, _globals.expect)(code).toBe('000001'); // Should pad with leading zeros
            // Restore original function
            crypto.randomBytes = originalRandomBytes;
        });
        (0, _globals.it)('should generate different codes with different random inputs', ()=>{
            const crypto = require('crypto');
            const originalRandomBytes = crypto.randomBytes;
            // Test with different mock values
            const testCases = [
                {
                    buffer: Buffer.from([
                        0,
                        0,
                        0,
                        1
                    ]),
                    expected: '000001'
                },
                {
                    buffer: Buffer.from([
                        0,
                        0,
                        39,
                        16
                    ]),
                    expected: '010000'
                },
                {
                    buffer: Buffer.from([
                        0,
                        15,
                        66,
                        64
                    ]),
                    expected: '999999'
                }
            ];
            testCases.forEach(({ buffer, expected })=>{
                crypto.randomBytes = _globals.jest.fn().mockReturnValue(buffer);
                const randomNumber = buffer.readUInt32BE(0);
                const code = (randomNumber % 1000000).toString().padStart(6, '0');
                (0, _globals.expect)(code).toBe(expected);
                (0, _globals.expect)(code.length).toBe(6);
            });
            // Restore original function
            crypto.randomBytes = originalRandomBytes;
        });
        (0, _globals.it)('should handle large random numbers correctly', ()=>{
            const crypto = require('crypto');
            const originalRandomBytes = crypto.randomBytes;
            // Test with maximum 32-bit value
            const maxBuffer = Buffer.from([
                255,
                255,
                255,
                255
            ]);
            crypto.randomBytes = _globals.jest.fn().mockReturnValue(maxBuffer);
            const randomNumber = maxBuffer.readUInt32BE(0);
            const code = (randomNumber % 1000000).toString().padStart(6, '0');
            (0, _globals.expect)(code).toMatch(/^\d{6}$/);
            (0, _globals.expect)(code.length).toBe(6);
            (0, _globals.expect)(parseInt(code)).toBeLessThan(1000000);
            // Restore original function
            crypto.randomBytes = originalRandomBytes;
        });
    });
    (0, _globals.describe)('Constants and configuration', ()=>{
        (0, _globals.it)('should have correct service constants', ()=>{
            // These would be the constants from the service
            const CODE_LENGTH = 6;
            const EXPIRY_MINUTES = 10;
            const MAX_ATTEMPTS = 5;
            (0, _globals.expect)(CODE_LENGTH).toBe(6);
            (0, _globals.expect)(EXPIRY_MINUTES).toBe(10);
            (0, _globals.expect)(MAX_ATTEMPTS).toBe(5);
        });
        (0, _globals.it)('should calculate correct expiration time', ()=>{
            const EXPIRY_MINUTES = 10;
            const beforeTime = Date.now();
            const expiresAt = new Date(Date.now() + EXPIRY_MINUTES * 60 * 1000);
            const afterTime = Date.now();
            const expectedMin = beforeTime + 9.5 * 60 * 1000; // 9.5 minutes
            const expectedMax = afterTime + 10.5 * 60 * 1000; // 10.5 minutes
            (0, _globals.expect)(expiresAt.getTime()).toBeGreaterThan(expectedMin);
            (0, _globals.expect)(expiresAt.getTime()).toBeLessThan(expectedMax);
        });
    });
    (0, _globals.describe)('Validation logic', ()=>{
        (0, _globals.it)('should correctly identify expired codes', ()=>{
            const now = new Date();
            const expiredCode = new Date(now.getTime() - 5 * 60 * 1000); // 5 minutes ago
            const validCode = new Date(now.getTime() + 5 * 60 * 1000); // 5 minutes from now
            (0, _globals.expect)(now > expiredCode).toBe(true);
            (0, _globals.expect)(now > validCode).toBe(false);
        });
        (0, _globals.it)('should correctly identify max attempts exceeded', ()=>{
            const MAX_ATTEMPTS = 5;
            (0, _globals.expect)(5 >= MAX_ATTEMPTS).toBe(true); // At max attempts
            (0, _globals.expect)(6 >= MAX_ATTEMPTS).toBe(true); // Over max attempts
            (0, _globals.expect)(4 >= MAX_ATTEMPTS).toBe(false); // Under max attempts
        });
    });
});

//# sourceMappingURL=data:application/json;base64,