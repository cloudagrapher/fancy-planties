{"version":3,"names":["GET","cov_1mb5wohhoe","f","s","POST","createPropagationSchema","_zod","z","object","plantId","number","int","positive","parentInstanceId","optional","nullable","nickname","string","min","max","location","dateStarted","datetime","transform","str","Date","status","enum","default","notes","images","array","request","user","_server1","validateRequest","b","_server","NextResponse","json","error","searchParams","URL","url","get","propagations","_propagations","PropagationQueries","getByStatus","id","getByParentInstance","parseInt","getByUserId","console","body","validatedData","parse","propagation","create","userId","ZodError","details","issues"],"sources":["/Users/stefanbekker/projects/fancy-planties/src/app/api/propagations/route.ts"],"sourcesContent":["import 'server-only';\n\nimport { NextRequest, NextResponse } from 'next/server';\nimport { validateRequest } from '@/lib/auth/server';\nimport { PropagationQueries } from '@/lib/db/queries/propagations';\nimport { z } from 'zod';\n\n// Validation schema for creating propagations\nconst createPropagationSchema = z.object({\n  plantId: z.number().int().positive(),\n  parentInstanceId: z.number().int().positive().optional().nullable(),\n  nickname: z.string().min(1).max(100),\n  location: z.string().min(1).max(100),\n  dateStarted: z.string().datetime().transform(str => new Date(str)),\n  status: z.enum(['started', 'rooting', 'planted', 'established']).default('started'),\n  notes: z.string().max(2000).optional().nullable(),\n  images: z.array(z.string()).max(10).default([]),\n});\n\n// GET /api/propagations - Get all propagations for the authenticated user\nexport async function GET(request: NextRequest) {\n  try {\n    const { user } = await validateRequest();\n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const { searchParams } = new URL(request.url);\n    const status = searchParams.get('status');\n    const parentInstanceId = searchParams.get('parentInstanceId');\n\n    let propagations;\n\n    if (status) {\n      // Get propagations by status\n      propagations = await PropagationQueries.getByStatus(\n        user.id, \n        status as 'started' | 'rooting' | 'planted' | 'established'\n      );\n    } else if (parentInstanceId) {\n      // Get propagations from a specific parent plant\n      propagations = await PropagationQueries.getByParentInstance(parseInt(parentInstanceId, 10));\n    } else {\n      // Get all propagations for user\n      propagations = await PropagationQueries.getByUserId(user.id);\n    }\n\n    return NextResponse.json(propagations);\n  } catch (error) {\n    console.error('Error fetching propagations:', error);\n    return NextResponse.json(\n      { error: 'Failed to fetch propagations' },\n      { status: 500 }\n    );\n  }\n}\n\n// POST /api/propagations - Create a new propagation\nexport async function POST(request: NextRequest) {\n  try {\n    const { user } = await validateRequest();\n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const body = await request.json();\n    const validatedData = createPropagationSchema.parse(body);\n\n    const propagation = await PropagationQueries.create({\n      userId: user.id,\n      plantId: validatedData.plantId,\n      parentInstanceId: validatedData.parentInstanceId,\n      nickname: validatedData.nickname,\n      location: validatedData.location,\n      dateStarted: validatedData.dateStarted,\n      status: validatedData.status,\n      notes: validatedData.notes,\n      images: validatedData.images,\n    });\n\n    return NextResponse.json(propagation, { status: 201 });\n  } catch (error) {\n    console.error('Error creating propagation:', error);\n    \n    if (error instanceof z.ZodError) {\n      return NextResponse.json(\n        { error: 'Invalid data', details: error.issues },\n        { status: 400 }\n      );\n    }\n\n    return NextResponse.json(\n      { error: 'Failed to create propagation' },\n      { status: 500 }\n    );\n  }\n}"],"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","ignoreList":[]}