b24f662c0f6e0ce07004cbe1ee02a7f6
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "POST", {
    enumerable: true,
    get: function() {
        return POST;
    }
});
const _server = require("next/server");
const _auth = require("../../../../lib/auth");
const _validation = require("../../../../lib/auth/validation");
const _middleware = require("../../../../lib/auth/middleware");
const _emailverificationcodeservice = require("../../../../lib/services/email-verification-code-service");
const _emailservice = require("../../../../lib/services/email-service");
const _resendemailservice = require("../../../../lib/services/resend-email-service");
async function POST(request) {
    return (0, _middleware.withRateLimit)(request, async (req)=>{
        try {
            const body = await req.json();
            // Validate input
            const validation = (0, _validation.validateInput)(_validation.signUpSchema, body);
            if (!validation.success) {
                return _server.NextResponse.json({
                    error: 'Validation failed',
                    errors: validation.errors
                }, {
                    status: 400
                });
            }
            const { email, password, name } = validation.data;
            // Create unverified user
            const user = await (0, _auth.signUpUnverified)(email, password, name);
            // Generate verification code
            const verificationCode = await _emailverificationcodeservice.emailVerificationCodeService.generateCode(user.id);
            // Send verification email
            try {
                const emailService = (0, _resendemailservice.createEmailService)();
                await (0, _emailservice.sendEmailWithRetry)(emailService, email, verificationCode, name);
                console.log(`Verification email sent to ${email} for user ${user.id}`);
                return _server.NextResponse.json({
                    success: true,
                    message: 'Account created successfully. Please check your email for a verification code.',
                    requiresVerification: true,
                    user: {
                        id: user.id,
                        email: user.email,
                        name: user.name,
                        isEmailVerified: user.isEmailVerified
                    }
                });
            } catch (emailError) {
                console.error('Failed to send verification email:', emailError);
                // If email sending fails, we still created the user, so let them know they can resend
                if (emailError instanceof _emailservice.EmailServiceError) {
                    let errorMessage = 'Failed to send verification email. ';
                    switch(emailError.code){
                        case 'QUOTA_EXCEEDED':
                            errorMessage += 'Email service quota exceeded. Please try again later.';
                            break;
                        case 'INVALID_EMAIL':
                            errorMessage += 'Invalid email address provided.';
                            break;
                        case 'API_ERROR':
                            errorMessage += 'Email service error. Please try resending the verification code.';
                            break;
                        case 'NETWORK_ERROR':
                            errorMessage += 'Network error. Please check your connection and try resending.';
                            break;
                        default:
                            errorMessage += 'Please try resending the verification code.';
                    }
                    return _server.NextResponse.json({
                        success: true,
                        message: 'Account created successfully.',
                        requiresVerification: true,
                        emailError: errorMessage,
                        user: {
                            id: user.id,
                            email: user.email,
                            name: user.name,
                            isEmailVerified: user.isEmailVerified
                        }
                    });
                }
                // For unknown email errors, still return success but mention the issue
                return _server.NextResponse.json({
                    success: true,
                    message: 'Account created successfully.',
                    requiresVerification: true,
                    emailError: 'Failed to send verification email. Please try resending the verification code.',
                    user: {
                        id: user.id,
                        email: user.email,
                        name: user.name,
                        isEmailVerified: user.isEmailVerified
                    }
                });
            }
        } catch (error) {
            console.error('Sign up error:', error);
            if (error instanceof Error && error.message === 'User already exists') {
                return _server.NextResponse.json({
                    error: 'An account with this email already exists'
                }, {
                    status: 409
                });
            }
            return _server.NextResponse.json({
                error: 'Internal server error'
            }, {
                status: 500
            });
        }
    });
}

//# sourceMappingURL=data:application/json;base64,