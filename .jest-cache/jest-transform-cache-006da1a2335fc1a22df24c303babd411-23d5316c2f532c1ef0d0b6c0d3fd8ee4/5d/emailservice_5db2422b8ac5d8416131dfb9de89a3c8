65c7b1d8f0abee672d1af0f27457ebf1
"use strict";

/* istanbul ignore next */
function cov_f0rqahzv8() {
  var path = "/Users/stefanbekker/projects/fancy-planties/src/lib/services/email-service.ts";
  var hash = "3d006c9040afd30220d481c77643c6d315c2a2fb";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/stefanbekker/projects/fancy-planties/src/lib/services/email-service.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 18,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 33
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 34
        }
      },
      "6": {
        start: {
          line: 19,
          column: 0
        },
        end: {
          line: 19,
          column: 23
        }
      },
      "7": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 41
        }
      },
      "8": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 23,
          column: 40
        }
      },
      "9": {
        start: {
          line: 27,
          column: 20
        },
        end: {
          line: 27,
          column: 24
        }
      },
      "10": {
        start: {
          line: 28,
          column: 4
        },
        end: {
          line: 47,
          column: 5
        }
      },
      "11": {
        start: {
          line: 28,
          column: 22
        },
        end: {
          line: 28,
          column: 23
        }
      },
      "12": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 46,
          column: 9
        }
      },
      "13": {
        start: {
          line: 30,
          column: 28
        },
        end: {
          line: 30,
          column: 87
        }
      },
      "14": {
        start: {
          line: 31,
          column: 12
        },
        end: {
          line: 33,
          column: 13
        }
      },
      "15": {
        start: {
          line: 32,
          column: 16
        },
        end: {
          line: 32,
          column: 28
        }
      },
      "16": {
        start: {
          line: 34,
          column: 12
        },
        end: {
          line: 34,
          column: 60
        }
      },
      "17": {
        start: {
          line: 36,
          column: 12
        },
        end: {
          line: 36,
          column: 30
        }
      },
      "18": {
        start: {
          line: 38,
          column: 12
        },
        end: {
          line: 40,
          column: 13
        }
      },
      "19": {
        start: {
          line: 39,
          column: 16
        },
        end: {
          line: 39,
          column: 28
        }
      },
      "20": {
        start: {
          line: 42,
          column: 12
        },
        end: {
          line: 45,
          column: 13
        }
      },
      "21": {
        start: {
          line: 43,
          column: 30
        },
        end: {
          line: 43,
          column: 61
        }
      },
      "22": {
        start: {
          line: 44,
          column: 16
        },
        end: {
          line: 44,
          column: 73
        }
      },
      "23": {
        start: {
          line: 44,
          column: 45
        },
        end: {
          line: 44,
          column: 71
        }
      },
      "24": {
        start: {
          line: 48,
          column: 4
        },
        end: {
          line: 48,
          column: 62
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        },
        loc: {
          start: {
            line: 12,
            column: 29
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 30
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 21,
            column: 4
          },
          end: {
            line: 21,
            column: 5
          }
        },
        loc: {
          start: {
            line: 21,
            column: 30
          },
          end: {
            line: 24,
            column: 5
          }
        },
        line: 21
      },
      "4": {
        name: "sendEmailWithRetry",
        decl: {
          start: {
            line: 26,
            column: 15
          },
          end: {
            line: 26,
            column: 33
          }
        },
        loc: {
          start: {
            line: 26,
            column: 83
          },
          end: {
            line: 49,
            column: 1
          }
        },
        line: 26
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 44,
            column: 34
          },
          end: {
            line: 44,
            column: 35
          }
        },
        loc: {
          start: {
            line: 44,
            column: 45
          },
          end: {
            line: 44,
            column: 71
          }
        },
        line: 44
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 26,
            column: 67
          },
          end: {
            line: 26,
            column: 81
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 26,
            column: 80
          },
          end: {
            line: 26,
            column: 81
          }
        }],
        line: 26
      },
      "1": {
        loc: {
          start: {
            line: 31,
            column: 12
          },
          end: {
            line: 33,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 31,
            column: 12
          },
          end: {
            line: 33,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 31
      },
      "2": {
        loc: {
          start: {
            line: 38,
            column: 12
          },
          end: {
            line: 40,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 38,
            column: 12
          },
          end: {
            line: 40,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 38
      },
      "3": {
        loc: {
          start: {
            line: 38,
            column: 16
          },
          end: {
            line: 38,
            column: 121
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 38,
            column: 16
          },
          end: {
            line: 38,
            column: 50
          }
        }, {
          start: {
            line: 38,
            column: 55
          },
          end: {
            line: 38,
            column: 85
          }
        }, {
          start: {
            line: 38,
            column: 89
          },
          end: {
            line: 38,
            column: 120
          }
        }],
        line: 38
      },
      "4": {
        loc: {
          start: {
            line: 42,
            column: 12
          },
          end: {
            line: 45,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 42,
            column: 12
          },
          end: {
            line: 45,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 42
      },
      "5": {
        loc: {
          start: {
            line: 48,
            column: 10
          },
          end: {
            line: 48,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 48,
            column: 10
          },
          end: {
            line: 48,
            column: 19
          }
        }, {
          start: {
            line: 48,
            column: 23
          },
          end: {
            line: 48,
            column: 61
          }
        }],
        line: 48
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0, 0],
      "4": [0, 0],
      "5": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/stefanbekker/projects/fancy-planties/src/lib/services/email-service.ts"],
      sourcesContent: ["import 'server-only';\n\nexport interface EmailService {\n  sendVerificationEmail(email: string, code: string, name: string): Promise<boolean>;\n}\n\nexport interface EmailConfig {\n  apiKey: string;\n  fromEmail: string;\n  fromName: string;\n}\n\nexport class EmailServiceError extends Error {\n  constructor(\n    message: string,\n    public code: 'QUOTA_EXCEEDED' | 'API_ERROR' | 'NETWORK_ERROR' | 'INVALID_EMAIL'\n  ) {\n    super(message);\n    this.name = 'EmailServiceError';\n  }\n}\n\n/**\n * Send email with retry logic and exponential backoff\n */\nexport async function sendEmailWithRetry(\n  emailService: EmailService,\n  email: string,\n  code: string,\n  name: string,\n  maxRetries = 3\n): Promise<boolean> {\n  let lastError: Error | null = null;\n  \n  for (let attempt = 1; attempt <= maxRetries; attempt++) {\n    try {\n      const success = await emailService.sendVerificationEmail(email, code, name);\n      if (success) {\n        return true;\n      }\n      throw new Error('Email service returned false');\n    } catch (error) {\n      lastError = error as Error;\n      \n      // Don't retry on certain errors\n      if (error instanceof EmailServiceError && \n          (error.code === 'INVALID_EMAIL' || error.code === 'QUOTA_EXCEEDED')) {\n        throw error;\n      }\n      \n      // Exponential backoff: 1s, 2s, 4s\n      if (attempt < maxRetries) {\n        const delay = Math.pow(2, attempt - 1) * 1000;\n        await new Promise(resolve => setTimeout(resolve, delay));\n      }\n    }\n  }\n  \n  throw lastError || new Error('All retry attempts failed');\n}"],
      names: ["EmailServiceError", "sendEmailWithRetry", "Error", "message", "code", "name", "emailService", "email", "maxRetries", "lastError", "attempt", "success", "sendVerificationEmail", "error", "delay", "Math", "pow", "Promise", "resolve", "setTimeout"],
      mappings: ";;;;;;;;;;;QAYaA;eAAAA;;QAaSC;eAAAA;;;QAzBf;AAYA,MAAMD,0BAA0BE;IACrC,YACEC,OAAe,EACf,AAAOC,IAAwE,CAC/E;QACA,KAAK,CAACD,eAFCC,OAAAA;QAGP,IAAI,CAACC,IAAI,GAAG;IACd;AACF;AAKO,eAAeJ,mBACpBK,YAA0B,EAC1BC,KAAa,EACbH,IAAY,EACZC,IAAY,EACZG,aAAa,CAAC;IAEd,IAAIC,YAA0B;IAE9B,IAAK,IAAIC,UAAU,GAAGA,WAAWF,YAAYE,UAAW;QACtD,IAAI;YACF,MAAMC,UAAU,MAAML,aAAaM,qBAAqB,CAACL,OAAOH,MAAMC;YACtE,IAAIM,SAAS;gBACX,OAAO;YACT;YACA,MAAM,IAAIT,MAAM;QAClB,EAAE,OAAOW,OAAO;YACdJ,YAAYI;YAEZ,gCAAgC;YAChC,IAAIA,iBAAiBb,qBAChBa,CAAAA,MAAMT,IAAI,KAAK,mBAAmBS,MAAMT,IAAI,KAAK,gBAAe,GAAI;gBACvE,MAAMS;YACR;YAEA,kCAAkC;YAClC,IAAIH,UAAUF,YAAY;gBACxB,MAAMM,QAAQC,KAAKC,GAAG,CAAC,GAAGN,UAAU,KAAK;gBACzC,MAAM,IAAIO,QAAQC,CAAAA,UAAWC,WAAWD,SAASJ;YACnD;QACF;IACF;IAEA,MAAML,aAAa,IAAIP,MAAM;AAC/B"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "3d006c9040afd30220d481c77643c6d315c2a2fb"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_f0rqahzv8 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_f0rqahzv8();
cov_f0rqahzv8().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_f0rqahzv8().f[0]++;
  cov_f0rqahzv8().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_f0rqahzv8().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_f0rqahzv8().s[3]++;
_export(exports, {
  get EmailServiceError() {
    /* istanbul ignore next */
    cov_f0rqahzv8().f[1]++;
    cov_f0rqahzv8().s[4]++;
    return EmailServiceError;
  },
  get sendEmailWithRetry() {
    /* istanbul ignore next */
    cov_f0rqahzv8().f[2]++;
    cov_f0rqahzv8().s[5]++;
    return sendEmailWithRetry;
  }
});
/* istanbul ignore next */
cov_f0rqahzv8().s[6]++;
require("server-only");
class EmailServiceError extends Error {
  constructor(message, code) {
    /* istanbul ignore next */
    cov_f0rqahzv8().f[3]++;
    cov_f0rqahzv8().s[7]++;
    super(message), this.code = code;
    /* istanbul ignore next */
    cov_f0rqahzv8().s[8]++;
    this.name = 'EmailServiceError';
  }
}
async function sendEmailWithRetry(emailService, email, code, name, maxRetries =
/* istanbul ignore next */
(cov_f0rqahzv8().b[0][0]++, 3)) {
  /* istanbul ignore next */
  cov_f0rqahzv8().f[4]++;
  let lastError =
  /* istanbul ignore next */
  (cov_f0rqahzv8().s[9]++, null);
  /* istanbul ignore next */
  cov_f0rqahzv8().s[10]++;
  for (let attempt =
  /* istanbul ignore next */
  (cov_f0rqahzv8().s[11]++, 1); attempt <= maxRetries; attempt++) {
    /* istanbul ignore next */
    cov_f0rqahzv8().s[12]++;
    try {
      const success =
      /* istanbul ignore next */
      (cov_f0rqahzv8().s[13]++, await emailService.sendVerificationEmail(email, code, name));
      /* istanbul ignore next */
      cov_f0rqahzv8().s[14]++;
      if (success) {
        /* istanbul ignore next */
        cov_f0rqahzv8().b[1][0]++;
        cov_f0rqahzv8().s[15]++;
        return true;
      } else
      /* istanbul ignore next */
      {
        cov_f0rqahzv8().b[1][1]++;
      }
      cov_f0rqahzv8().s[16]++;
      throw new Error('Email service returned false');
    } catch (error) {
      /* istanbul ignore next */
      cov_f0rqahzv8().s[17]++;
      lastError = error;
      // Don't retry on certain errors
      /* istanbul ignore next */
      cov_f0rqahzv8().s[18]++;
      if (
      /* istanbul ignore next */
      (cov_f0rqahzv8().b[3][0]++, error instanceof EmailServiceError) && (
      /* istanbul ignore next */
      (cov_f0rqahzv8().b[3][1]++, error.code === 'INVALID_EMAIL') ||
      /* istanbul ignore next */
      (cov_f0rqahzv8().b[3][2]++, error.code === 'QUOTA_EXCEEDED'))) {
        /* istanbul ignore next */
        cov_f0rqahzv8().b[2][0]++;
        cov_f0rqahzv8().s[19]++;
        throw error;
      } else
      /* istanbul ignore next */
      {
        cov_f0rqahzv8().b[2][1]++;
      }
      // Exponential backoff: 1s, 2s, 4s
      cov_f0rqahzv8().s[20]++;
      if (attempt < maxRetries) {
        /* istanbul ignore next */
        cov_f0rqahzv8().b[4][0]++;
        const delay =
        /* istanbul ignore next */
        (cov_f0rqahzv8().s[21]++, Math.pow(2, attempt - 1) * 1000);
        /* istanbul ignore next */
        cov_f0rqahzv8().s[22]++;
        await new Promise(resolve => {
          /* istanbul ignore next */
          cov_f0rqahzv8().f[5]++;
          cov_f0rqahzv8().s[23]++;
          return setTimeout(resolve, delay);
        });
      } else
      /* istanbul ignore next */
      {
        cov_f0rqahzv8().b[4][1]++;
      }
    }
  }
  /* istanbul ignore next */
  cov_f0rqahzv8().s[24]++;
  throw /* istanbul ignore next */(cov_f0rqahzv8().b[5][0]++, lastError) ||
  /* istanbul ignore next */
  (cov_f0rqahzv8().b[5][1]++, new Error('All retry attempts failed'));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJFbWFpbFNlcnZpY2VFcnJvciIsImNvdl9mMHJxYWh6djgiLCJmIiwicyIsInNlbmRFbWFpbFdpdGhSZXRyeSIsIkVycm9yIiwiY29uc3RydWN0b3IiLCJtZXNzYWdlIiwiY29kZSIsIm5hbWUiLCJlbWFpbFNlcnZpY2UiLCJlbWFpbCIsIm1heFJldHJpZXMiLCJiIiwibGFzdEVycm9yIiwiYXR0ZW1wdCIsInN1Y2Nlc3MiLCJzZW5kVmVyaWZpY2F0aW9uRW1haWwiLCJlcnJvciIsImRlbGF5IiwiTWF0aCIsInBvdyIsIlByb21pc2UiLCJyZXNvbHZlIiwic2V0VGltZW91dCJdLCJzb3VyY2VzIjpbIi9Vc2Vycy9zdGVmYW5iZWtrZXIvcHJvamVjdHMvZmFuY3ktcGxhbnRpZXMvc3JjL2xpYi9zZXJ2aWNlcy9lbWFpbC1zZXJ2aWNlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAnc2VydmVyLW9ubHknO1xuXG5leHBvcnQgaW50ZXJmYWNlIEVtYWlsU2VydmljZSB7XG4gIHNlbmRWZXJpZmljYXRpb25FbWFpbChlbWFpbDogc3RyaW5nLCBjb2RlOiBzdHJpbmcsIG5hbWU6IHN0cmluZyk6IFByb21pc2U8Ym9vbGVhbj47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRW1haWxDb25maWcge1xuICBhcGlLZXk6IHN0cmluZztcbiAgZnJvbUVtYWlsOiBzdHJpbmc7XG4gIGZyb21OYW1lOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBjbGFzcyBFbWFpbFNlcnZpY2VFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgY29uc3RydWN0b3IoXG4gICAgbWVzc2FnZTogc3RyaW5nLFxuICAgIHB1YmxpYyBjb2RlOiAnUVVPVEFfRVhDRUVERUQnIHwgJ0FQSV9FUlJPUicgfCAnTkVUV09SS19FUlJPUicgfCAnSU5WQUxJRF9FTUFJTCdcbiAgKSB7XG4gICAgc3VwZXIobWVzc2FnZSk7XG4gICAgdGhpcy5uYW1lID0gJ0VtYWlsU2VydmljZUVycm9yJztcbiAgfVxufVxuXG4vKipcbiAqIFNlbmQgZW1haWwgd2l0aCByZXRyeSBsb2dpYyBhbmQgZXhwb25lbnRpYWwgYmFja29mZlxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2VuZEVtYWlsV2l0aFJldHJ5KFxuICBlbWFpbFNlcnZpY2U6IEVtYWlsU2VydmljZSxcbiAgZW1haWw6IHN0cmluZyxcbiAgY29kZTogc3RyaW5nLFxuICBuYW1lOiBzdHJpbmcsXG4gIG1heFJldHJpZXMgPSAzXG4pOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgbGV0IGxhc3RFcnJvcjogRXJyb3IgfCBudWxsID0gbnVsbDtcbiAgXG4gIGZvciAobGV0IGF0dGVtcHQgPSAxOyBhdHRlbXB0IDw9IG1heFJldHJpZXM7IGF0dGVtcHQrKykge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBzdWNjZXNzID0gYXdhaXQgZW1haWxTZXJ2aWNlLnNlbmRWZXJpZmljYXRpb25FbWFpbChlbWFpbCwgY29kZSwgbmFtZSk7XG4gICAgICBpZiAoc3VjY2Vzcykge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHRocm93IG5ldyBFcnJvcignRW1haWwgc2VydmljZSByZXR1cm5lZCBmYWxzZScpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBsYXN0RXJyb3IgPSBlcnJvciBhcyBFcnJvcjtcbiAgICAgIFxuICAgICAgLy8gRG9uJ3QgcmV0cnkgb24gY2VydGFpbiBlcnJvcnNcbiAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVtYWlsU2VydmljZUVycm9yICYmIFxuICAgICAgICAgIChlcnJvci5jb2RlID09PSAnSU5WQUxJRF9FTUFJTCcgfHwgZXJyb3IuY29kZSA9PT0gJ1FVT1RBX0VYQ0VFREVEJykpIHtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICB9XG4gICAgICBcbiAgICAgIC8vIEV4cG9uZW50aWFsIGJhY2tvZmY6IDFzLCAycywgNHNcbiAgICAgIGlmIChhdHRlbXB0IDwgbWF4UmV0cmllcykge1xuICAgICAgICBjb25zdCBkZWxheSA9IE1hdGgucG93KDIsIGF0dGVtcHQgLSAxKSAqIDEwMDA7XG4gICAgICAgIGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCBkZWxheSkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBcbiAgdGhyb3cgbGFzdEVycm9yIHx8IG5ldyBFcnJvcignQWxsIHJldHJ5IGF0dGVtcHRzIGZhaWxlZCcpO1xufSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7TUFZYUEsa0JBQUE7SUFBQTtJQUFBQyxhQUFBLEdBQUFDLENBQUE7SUFBQUQsYUFBQSxHQUFBRSxDQUFBO1dBQUFILGlCQUFBOztNQWFTSSxtQkFBQTtJQUFBO0lBQUFILGFBQUEsR0FBQUMsQ0FBQTtJQUFBRCxhQUFBLEdBQUFFLENBQUE7V0FBQUMsa0JBQUE7Ozs7O1FBekJmO0FBWUEsTUFBTUosaUJBQUEsU0FBMEJLLEtBQUE7RUFDckNDLFlBQ0VDLE9BQWUsRUFDZkMsSUFBK0UsRUFDL0U7SUFBQTtJQUFBUCxhQUFBLEdBQUFDLENBQUE7SUFBQUQsYUFBQSxHQUFBRSxDQUFBO0lBQ0EsS0FBSyxDQUFDSSxPQUFBLFFBRkNDLElBQUEsR0FBQUEsSUFBQTtJQUFBO0lBQUFQLGFBQUEsR0FBQUUsQ0FBQTtJQUdQLElBQUksQ0FBQ00sSUFBSSxHQUFHO0VBQ2Q7QUFDRjtBQUtPLGVBQWVMLG1CQUNwQk0sWUFBMEIsRUFDMUJDLEtBQWEsRUFDYkgsSUFBWSxFQUNaQyxJQUFZLEVBQ1pHLFVBQUE7QUFBQTtBQUFBLENBQUFYLGFBQUEsR0FBQVksQ0FBQSxVQUFhLENBQUM7RUFBQTtFQUFBWixhQUFBLEdBQUFDLENBQUE7RUFFZCxJQUFJWSxTQUFBO0VBQUE7RUFBQSxDQUFBYixhQUFBLEdBQUFFLENBQUEsT0FBMEI7RUFBQTtFQUFBRixhQUFBLEdBQUFFLENBQUE7RUFFOUIsS0FBSyxJQUFJWSxPQUFBO0VBQUE7RUFBQSxDQUFBZCxhQUFBLEdBQUFFLENBQUEsUUFBVSxJQUFHWSxPQUFBLElBQVdILFVBQUEsRUFBWUcsT0FBQSxJQUFXO0lBQUE7SUFBQWQsYUFBQSxHQUFBRSxDQUFBO0lBQ3RELElBQUk7TUFDRixNQUFNYSxPQUFBO01BQUE7TUFBQSxDQUFBZixhQUFBLEdBQUFFLENBQUEsUUFBVSxNQUFNTyxZQUFBLENBQWFPLHFCQUFxQixDQUFDTixLQUFBLEVBQU9ILElBQUEsRUFBTUMsSUFBQTtNQUFBO01BQUFSLGFBQUEsR0FBQUUsQ0FBQTtNQUN0RSxJQUFJYSxPQUFBLEVBQVM7UUFBQTtRQUFBZixhQUFBLEdBQUFZLENBQUE7UUFBQVosYUFBQSxHQUFBRSxDQUFBO1FBQ1gsT0FBTztNQUNUO01BQUE7TUFBQTtRQUFBRixhQUFBLEdBQUFZLENBQUE7TUFBQTtNQUFBWixhQUFBLEdBQUFFLENBQUE7TUFDQSxNQUFNLElBQUlFLEtBQUEsQ0FBTTtJQUNsQixFQUFFLE9BQU9hLEtBQUEsRUFBTztNQUFBO01BQUFqQixhQUFBLEdBQUFFLENBQUE7TUFDZFcsU0FBQSxHQUFZSSxLQUFBO01BRVo7TUFBQTtNQUFBakIsYUFBQSxHQUFBRSxDQUFBO01BQ0E7TUFBSTtNQUFBLENBQUFGLGFBQUEsR0FBQVksQ0FBQSxVQUFBSyxLQUFBLFlBQWlCbEIsaUJBQUE7TUFDaEI7TUFBQSxDQUFBQyxhQUFBLEdBQUFZLENBQUEsVUFBQUssS0FBQSxDQUFNVixJQUFJLEtBQUs7TUFBQTtNQUFBLENBQUFQLGFBQUEsR0FBQVksQ0FBQSxVQUFtQkssS0FBQSxDQUFNVixJQUFJLEtBQUssZ0JBQWUsSUFBSTtRQUFBO1FBQUFQLGFBQUEsR0FBQVksQ0FBQTtRQUFBWixhQUFBLEdBQUFFLENBQUE7UUFDdkUsTUFBTWUsS0FBQTtNQUNSO01BQUE7TUFBQTtRQUFBakIsYUFBQSxHQUFBWSxDQUFBO01BQUE7TUFFQTtNQUFBWixhQUFBLEdBQUFFLENBQUE7TUFDQSxJQUFJWSxPQUFBLEdBQVVILFVBQUEsRUFBWTtRQUFBO1FBQUFYLGFBQUEsR0FBQVksQ0FBQTtRQUN4QixNQUFNTSxLQUFBO1FBQUE7UUFBQSxDQUFBbEIsYUFBQSxHQUFBRSxDQUFBLFFBQVFpQixJQUFBLENBQUtDLEdBQUcsQ0FBQyxHQUFHTixPQUFBLEdBQVUsS0FBSztRQUFBO1FBQUFkLGFBQUEsR0FBQUUsQ0FBQTtRQUN6QyxNQUFNLElBQUltQixPQUFBLENBQVFDLE9BQUEsSUFBVztVQUFBO1VBQUF0QixhQUFBLEdBQUFDLENBQUE7VUFBQUQsYUFBQSxHQUFBRSxDQUFBO1VBQUEsT0FBQXFCLFVBQUEsQ0FBV0QsT0FBQSxFQUFTSixLQUFBO1FBQUE7TUFDbkQ7TUFBQTtNQUFBO1FBQUFsQixhQUFBLEdBQUFZLENBQUE7TUFBQTtJQUNGO0VBQ0Y7RUFBQTtFQUFBWixhQUFBLEdBQUFFLENBQUE7RUFFQSxNQUFNLDJCQUFBRixhQUFBLEdBQUFZLENBQUEsVUFBQUMsU0FBQTtFQUFBO0VBQUEsQ0FBQWIsYUFBQSxHQUFBWSxDQUFBLFVBQWEsSUFBSVIsS0FBQSxDQUFNO0FBQy9CIiwiaWdub3JlTGlzdCI6W119