{"version":3,"names":["EmailVerificationCodeService","cov_1vv3foqs4s","f","s","VerificationCodeError","VerificationError","emailVerificationCodeService","Error","constructor","message","code","name","CODE_LENGTH","EXPIRY_MINUTES","MAX_ATTEMPTS","generateSecureCode","buffer","_crypto","randomBytes","randomNumber","readUInt32BE","toString","padStart","generateCode","userId","deleteUserCodes","expiresAt","Date","now","_db","db","insert","_schema","emailVerificationCodes","values","attemptsUsed","validateCode","email","userResult","select","id","users","isEmailVerified","from","where","_drizzleorm","eq","limit","length","b","user","codeResult","and","verificationCode","delete","transaction","tx","update","set","incrementAttempts","cleanupExpiredCodes","expiredCodes","lt","count","getUserActiveCode","result","gt","hasActiveCode","getCodeStats","activeResult","expiredResult","highAttemptResult","totalActive","expiredCount","highAttemptCount"],"sources":["/Users/stefanbekker/projects/fancy-planties/src/lib/services/email-verification-code-service.ts"],"sourcesContent":["import 'server-only';\nimport { db } from '@/lib/db';\nimport { emailVerificationCodes, users } from '@/lib/db/schema';\nimport { eq, and, lt, gt } from 'drizzle-orm';\nimport { randomBytes } from 'crypto';\n\nexport interface EmailVerificationCode {\n  id: number;\n  userId: number;\n  code: string;\n  expiresAt: Date;\n  createdAt: Date;\n  attemptsUsed: number;\n}\n\nexport enum VerificationError {\n  CODE_EXPIRED = 'CODE_EXPIRED',\n  CODE_INVALID = 'CODE_INVALID',\n  TOO_MANY_ATTEMPTS = 'TOO_MANY_ATTEMPTS',\n  USER_NOT_FOUND = 'USER_NOT_FOUND',\n  ALREADY_VERIFIED = 'ALREADY_VERIFIED'\n}\n\nexport class VerificationCodeError extends Error {\n  constructor(\n    message: string,\n    public code: VerificationError\n  ) {\n    super(message);\n    this.name = 'VerificationCodeError';\n  }\n}\n\nexport class EmailVerificationCodeService {\n  private static readonly CODE_LENGTH = 6;\n  private static readonly EXPIRY_MINUTES = 10;\n  private static readonly MAX_ATTEMPTS = 5;\n\n  /**\n   * Generate a cryptographically secure 6-digit verification code\n   */\n  private generateSecureCode(): string {\n    // Generate random bytes and convert to 6-digit number\n    const buffer = randomBytes(4);\n    const randomNumber = buffer.readUInt32BE(0);\n    // Ensure it's always 6 digits by using modulo and padding\n    const code = (randomNumber % 1000000).toString().padStart(6, '0');\n    return code;\n  }\n\n  /**\n   * Generate and store a new verification code for a user\n   * Invalidates any existing codes for the user\n   */\n  async generateCode(userId: number): Promise<string> {\n    // First, delete any existing codes for this user\n    await this.deleteUserCodes(userId);\n\n    // Generate new code\n    const code = this.generateSecureCode();\n    const expiresAt = new Date(Date.now() + EmailVerificationCodeService.EXPIRY_MINUTES * 60 * 1000);\n\n    // Store in database\n    await db.insert(emailVerificationCodes).values({\n      userId,\n      code,\n      expiresAt,\n      attemptsUsed: 0,\n    });\n\n    return code;\n  }\n\n  /**\n   * Validate a verification code for a user\n   * Returns true if valid, throws VerificationCodeError if invalid\n   */\n  async validateCode(email: string, code: string): Promise<boolean> {\n    // Find user by email\n    const userResult = await db\n      .select({ id: users.id, isEmailVerified: users.isEmailVerified })\n      .from(users)\n      .where(eq(users.email, email))\n      .limit(1);\n\n    if (userResult.length === 0) {\n      throw new VerificationCodeError('User not found', VerificationError.USER_NOT_FOUND);\n    }\n\n    const user = userResult[0];\n\n    // Check if user is already verified\n    if (user.isEmailVerified) {\n      throw new VerificationCodeError('Email already verified', VerificationError.ALREADY_VERIFIED);\n    }\n\n    // Find the verification code\n    const codeResult = await db\n      .select()\n      .from(emailVerificationCodes)\n      .where(\n        and(\n          eq(emailVerificationCodes.userId, user.id),\n          eq(emailVerificationCodes.code, code)\n        )\n      )\n      .limit(1);\n\n    if (codeResult.length === 0) {\n      throw new VerificationCodeError('Invalid verification code', VerificationError.CODE_INVALID);\n    }\n\n    const verificationCode = codeResult[0];\n\n    // Check if code has expired\n    if (new Date() > verificationCode.expiresAt) {\n      // Clean up expired code\n      await db\n        .delete(emailVerificationCodes)\n        .where(eq(emailVerificationCodes.id, verificationCode.id));\n      \n      throw new VerificationCodeError('Verification code has expired', VerificationError.CODE_EXPIRED);\n    }\n\n    // Check if too many attempts have been made\n    if (verificationCode.attemptsUsed >= EmailVerificationCodeService.MAX_ATTEMPTS) {\n      // Invalidate the code\n      await db\n        .delete(emailVerificationCodes)\n        .where(eq(emailVerificationCodes.id, verificationCode.id));\n      \n      throw new VerificationCodeError('Too many verification attempts', VerificationError.TOO_MANY_ATTEMPTS);\n    }\n\n    // Code is valid - mark user as verified and delete the code\n    await db.transaction(async (tx) => {\n      // Update user verification status\n      await tx\n        .update(users)\n        .set({ isEmailVerified: true })\n        .where(eq(users.id, user.id));\n\n      // Delete the verification code\n      await tx\n        .delete(emailVerificationCodes)\n        .where(eq(emailVerificationCodes.id, verificationCode.id));\n    });\n\n    return true;\n  }\n\n  /**\n   * Increment the attempt count for a verification code\n   * Used when validation fails but we want to track attempts\n   */\n  async incrementAttempts(email: string, code: string): Promise<void> {\n    // Find user by email\n    const userResult = await db\n      .select({ id: users.id })\n      .from(users)\n      .where(eq(users.email, email))\n      .limit(1);\n\n    if (userResult.length === 0) {\n      return; // User not found, nothing to increment\n    }\n\n    const user = userResult[0];\n\n    // Find and increment attempts for the code\n    const codeResult = await db\n      .select({ id: emailVerificationCodes.id, attemptsUsed: emailVerificationCodes.attemptsUsed })\n      .from(emailVerificationCodes)\n      .where(\n        and(\n          eq(emailVerificationCodes.userId, user.id),\n          eq(emailVerificationCodes.code, code)\n        )\n      )\n      .limit(1);\n\n    if (codeResult.length > 0) {\n      const verificationCode = codeResult[0];\n      await db\n        .update(emailVerificationCodes)\n        .set({ attemptsUsed: verificationCode.attemptsUsed + 1 })\n        .where(eq(emailVerificationCodes.id, verificationCode.id));\n    }\n  }\n\n  /**\n   * Clean up expired verification codes\n   * Should be called periodically by a cleanup job\n   */\n  async cleanupExpiredCodes(): Promise<number> {\n    const now = new Date();\n    \n    // First count the expired codes\n    const expiredCodes = await db\n      .select({ id: emailVerificationCodes.id })\n      .from(emailVerificationCodes)\n      .where(lt(emailVerificationCodes.expiresAt, now));\n\n    const count = expiredCodes.length;\n\n    // Then delete them if any exist\n    if (count > 0) {\n      await db\n        .delete(emailVerificationCodes)\n        .where(lt(emailVerificationCodes.expiresAt, now));\n    }\n\n    return count;\n  }\n\n  /**\n   * Delete all verification codes for a specific user\n   * Used when generating new codes or when user is deleted\n   */\n  async deleteUserCodes(userId: number): Promise<void> {\n    await db\n      .delete(emailVerificationCodes)\n      .where(eq(emailVerificationCodes.userId, userId));\n  }\n\n  /**\n   * Get active verification code for a user (for testing/debugging)\n   */\n  async getUserActiveCode(userId: number): Promise<EmailVerificationCode | null> {\n    const now = new Date();\n    const result = await db\n      .select()\n      .from(emailVerificationCodes)\n      .where(\n        and(\n          eq(emailVerificationCodes.userId, userId),\n          gt(emailVerificationCodes.expiresAt, now) // Not expired\n        )\n      )\n      .limit(1);\n\n    return result.length > 0 ? result[0] : null;\n  }\n\n  /**\n   * Check if a user has any active verification codes\n   */\n  async hasActiveCode(userId: number): Promise<boolean> {\n    const code = await this.getUserActiveCode(userId);\n    return code !== null;\n  }\n\n  /**\n   * Get verification code statistics for monitoring\n   */\n  async getCodeStats(): Promise<{\n    totalActive: number;\n    expiredCount: number;\n    highAttemptCount: number;\n  }> {\n    const now = new Date();\n    \n    // Count active codes\n    const activeResult = await db\n      .select({ id: emailVerificationCodes.id })\n      .from(emailVerificationCodes)\n      .where(gt(emailVerificationCodes.expiresAt, now));\n\n    // Count expired codes\n    const expiredResult = await db\n      .select({ id: emailVerificationCodes.id })\n      .from(emailVerificationCodes)\n      .where(lt(emailVerificationCodes.expiresAt, now));\n\n    // Count codes with high attempts (4 or more)\n    const highAttemptResult = await db\n      .select({ id: emailVerificationCodes.id })\n      .from(emailVerificationCodes)\n      .where(\n        and(\n          gt(emailVerificationCodes.expiresAt, now),\n          eq(emailVerificationCodes.attemptsUsed, 4) // Close to max attempts\n        )\n      );\n\n    return {\n      totalActive: activeResult.length,\n      expiredCount: expiredResult.length,\n      highAttemptCount: highAttemptResult.length,\n    };\n  }\n}\n\n// Export singleton instance\nexport const emailVerificationCodeService = new EmailVerificationCodeService();"],"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","ignoreList":[]}