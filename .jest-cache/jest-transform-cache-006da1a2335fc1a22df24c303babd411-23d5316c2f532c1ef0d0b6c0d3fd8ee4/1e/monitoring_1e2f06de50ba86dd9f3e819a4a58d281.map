{"version":3,"names":["monitoring","cov_tb2swjomz","f","s","withMonitoring","MonitoringService","constructor","metrics","isEnabled","process","env","ENABLE_METRICS","recordMetric","name","value","unit","tags","b","metric","timestamp","Date","toISOString","push","length","slice","isSignificantMetric","_logger","logger","info","startTimer","startTime","now","duration","recordDatabaseQuery","queryType","success","toString","recordApiRequest","method","path","statusCode","recordMemoryUsage","memUsage","memoryUsage","heapUsed","heapTotal","rss","getMetricsSummary","recentMetrics","dbQueries","filter","m","dbErrors","apiRequests","apiErrors","responseTimes","avgResponseTime","reduce","sum","database","queryCount","slowQueries","application","requestCount","errorCount","averageResponseTime","undefined","recent","exportMetrics","clearMetrics","handler","routeName","args","request","response","status","error"],"sources":["/Users/stefanbekker/projects/fancy-planties/src/lib/utils/monitoring.ts"],"sourcesContent":["import 'server-only';\nimport { logger } from './logger';\n\ninterface PerformanceMetric {\n  name: string;\n  value: number;\n  unit: 'ms' | 'bytes' | 'count';\n  timestamp: string;\n  tags?: Record<string, string>;\n}\n\ninterface DatabaseMetrics {\n  queryCount: number;\n  slowQueries: number;\n  connectionPoolSize: number;\n  activeConnections: number;\n}\n\ninterface ApplicationMetrics {\n  requestCount: number;\n  errorCount: number;\n  averageResponseTime: number;\n  memoryUsage: NodeJS.MemoryUsage;\n}\n\nclass MonitoringService {\n  private metrics: PerformanceMetric[] = [];\n  private isEnabled: boolean;\n\n  constructor() {\n    this.isEnabled = process.env.ENABLE_METRICS === 'true';\n  }\n\n  recordMetric(name: string, value: number, unit: 'ms' | 'bytes' | 'count', tags?: Record<string, string>): void {\n    if (!this.isEnabled) return;\n\n    const metric: PerformanceMetric = {\n      name,\n      value,\n      unit,\n      timestamp: new Date().toISOString(),\n      tags,\n    };\n\n    this.metrics.push(metric);\n    \n    // Keep only last 1000 metrics in memory\n    if (this.metrics.length > 1000) {\n      this.metrics = this.metrics.slice(-1000);\n    }\n\n    // Log significant metrics\n    if (this.isSignificantMetric(metric)) {\n      logger.info(`Metric: ${name}`, { value, unit, tags });\n    }\n  }\n\n  private isSignificantMetric(metric: PerformanceMetric): boolean {\n    // Define what constitutes a significant metric worth logging\n    switch (metric.name) {\n      case 'api_response_time':\n        return metric.value > 1000; // Log slow API responses (>1s)\n      case 'database_query_time':\n        return metric.value > 500; // Log slow database queries (>500ms)\n      case 'memory_usage':\n        return metric.value > 500 * 1024 * 1024; // Log high memory usage (>500MB)\n      case 'error_count':\n        return metric.value > 0; // Log all errors\n      default:\n        return false;\n    }\n  }\n\n  // Timing utilities\n  startTimer(name: string): () => void {\n    const startTime = Date.now();\n    return () => {\n      const duration = Date.now() - startTime;\n      this.recordMetric(name, duration, 'ms');\n    };\n  }\n\n  // Database monitoring\n  recordDatabaseQuery(queryType: string, duration: number, success: boolean): void {\n    this.recordMetric('database_query_time', duration, 'ms', { \n      queryType, \n      success: success.toString() \n    });\n    \n    if (!success) {\n      this.recordMetric('database_error_count', 1, 'count', { queryType });\n    }\n  }\n\n  // API monitoring\n  recordApiRequest(method: string, path: string, statusCode: number, duration: number): void {\n    this.recordMetric('api_response_time', duration, 'ms', {\n      method,\n      path,\n      statusCode: statusCode.toString(),\n    });\n\n    this.recordMetric('api_request_count', 1, 'count', {\n      method,\n      path,\n      statusCode: statusCode.toString(),\n    });\n\n    if (statusCode >= 400) {\n      this.recordMetric('api_error_count', 1, 'count', {\n        method,\n        path,\n        statusCode: statusCode.toString(),\n      });\n    }\n  }\n\n  // Memory monitoring\n  recordMemoryUsage(): void {\n    if (typeof process !== 'undefined') {\n      const memUsage = process.memoryUsage();\n      this.recordMetric('memory_heap_used', memUsage.heapUsed, 'bytes');\n      this.recordMetric('memory_heap_total', memUsage.heapTotal, 'bytes');\n      this.recordMetric('memory_rss', memUsage.rss, 'bytes');\n    }\n  }\n\n  // Get current metrics summary\n  getMetricsSummary(): {\n    database: Partial<DatabaseMetrics>;\n    application: Partial<ApplicationMetrics>;\n    recent: PerformanceMetric[];\n  } {\n    const recentMetrics = this.metrics.slice(-50); // Last 50 metrics\n    \n    // Calculate database metrics\n    const dbQueries = this.metrics.filter(m => m.name === 'database_query_time');\n    const dbErrors = this.metrics.filter(m => m.name === 'database_error_count');\n    \n    // Calculate application metrics\n    const apiRequests = this.metrics.filter(m => m.name === 'api_request_count');\n    const apiErrors = this.metrics.filter(m => m.name === 'api_error_count');\n    const responseTimes = this.metrics.filter(m => m.name === 'api_response_time');\n    \n    const avgResponseTime = responseTimes.length > 0\n      ? responseTimes.reduce((sum, m) => sum + m.value, 0) / responseTimes.length\n      : 0;\n\n    return {\n      database: {\n        queryCount: dbQueries.length,\n        slowQueries: dbQueries.filter(m => m.value > 500).length,\n      },\n      application: {\n        requestCount: apiRequests.length,\n        errorCount: apiErrors.length,\n        averageResponseTime: avgResponseTime,\n        memoryUsage: typeof process !== 'undefined' ? process.memoryUsage() : undefined,\n      },\n      recent: recentMetrics,\n    };\n  }\n\n  // Export metrics for external monitoring systems\n  exportMetrics(): PerformanceMetric[] {\n    return [...this.metrics];\n  }\n\n  // Clear metrics (useful for testing)\n  clearMetrics(): void {\n    this.metrics = [];\n  }\n}\n\nexport const monitoring = new MonitoringService();\n\n// Middleware helper for API route monitoring\nexport function withMonitoring<T extends (...args: any[]) => Promise<Response>>(\n  handler: T,\n  routeName: string\n): T {\n  return (async (...args: any[]) => {\n    const startTime = Date.now();\n    const request = args[0] as Request;\n    \n    try {\n      const response = await handler(...args);\n      const duration = Date.now() - startTime;\n      \n      monitoring.recordApiRequest(\n        request.method,\n        routeName,\n        response.status,\n        duration\n      );\n      \n      return response;\n    } catch (error) {\n      const duration = Date.now() - startTime;\n      \n      monitoring.recordApiRequest(\n        request.method,\n        routeName,\n        500,\n        duration\n      );\n      \n      throw error;\n    }\n  }) as T;\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}