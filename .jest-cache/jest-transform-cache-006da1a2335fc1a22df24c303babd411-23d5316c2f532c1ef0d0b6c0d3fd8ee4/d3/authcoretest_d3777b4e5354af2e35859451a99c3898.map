{"version":3,"sources":["/Users/stefanbekker/projects/fancy-planties/src/__tests__/api/auth-core.test.js"],"sourcesContent":["// Authentication Core Logic Tests\n// Tests the core authentication logic without middleware complications\n\nimport { NextRequest, NextResponse } from 'next/server';\nimport { createTestUser, createTestSession } from '@/test-utils/factories/user-factory';\n\n// Mock the auth functions\njest.mock('@/lib/auth', () => ({\n  signUp: jest.fn(),\n  signIn: jest.fn(),\n  signOut: jest.fn(),\n}));\n\njest.mock('@/lib/auth/server', () => ({\n  setSessionCookie: jest.fn(),\n  clearSessionCookie: jest.fn(),\n  validateRequest: jest.fn(),\n}));\n\njest.mock('@/lib/auth/validation', () => ({\n  validateInput: jest.fn(),\n}));\n\n// Import mocked functions\nimport { signUp, signIn, signOut } from '@/lib/auth';\nimport { setSessionCookie, clearSessionCookie, validateRequest } from '@/lib/auth/server';\nimport { validateInput } from '@/lib/auth/validation';\n\n// Create simplified handlers for testing (without middleware)\nconst createSignupHandler = () => async (request) => {\n  try {\n    const body = await request.json();\n    \n    // Validate input\n    const validation = validateInput({}, body);\n    if (!validation.success) {\n      return NextResponse.json(\n        { error: 'Validation failed', errors: validation.errors },\n        { status: 400 }\n      );\n    }\n    \n    const { email, password, name } = validation.data;\n    \n    // Attempt to sign up\n    const result = await signUp(email, password, name);\n    \n    // Set session cookie\n    await setSessionCookie(result.session.id);\n    \n    return NextResponse.json({\n      success: true,\n      user: {\n        id: result.user.id,\n        email: result.user.email,\n        name: result.user.name,\n      },\n    });\n    \n  } catch (error) {\n    console.error('Sign up error:', error);\n    \n    if (error instanceof Error && error.message === 'User already exists') {\n      return NextResponse.json(\n        { error: 'An account with this email already exists' },\n        { status: 409 }\n      );\n    }\n    \n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    );\n  }\n};\n\nconst createSigninHandler = () => async (request) => {\n  try {\n    const body = await request.json();\n\n    // Validate input\n    const validation = validateInput({}, body);\n    if (!validation.success) {\n      return NextResponse.json(\n        { error: 'Validation failed', errors: validation.errors },\n        { status: 400 }\n      );\n    }\n\n    const { email, password } = validation.data;\n\n    // Attempt to sign in\n    const result = await signIn(email, password);\n\n    if (!result) {\n      return NextResponse.json(\n        { error: 'Invalid email or password' },\n        { status: 401 }\n      );\n    }\n\n    // Set session cookie\n    await setSessionCookie(result.session.id);\n\n    return NextResponse.json({\n      success: true,\n      user: {\n        id: result.user.id,\n        email: result.user.email,\n        name: result.user.name,\n      },\n    });\n\n  } catch (error) {\n    console.error('Sign in error:', error);\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    );\n  }\n};\n\nconst createSignoutHandler = () => async (_request) => {\n  try {\n    const { session } = await validateRequest();\n    \n    if (!session) {\n      return NextResponse.json(\n        { error: 'No active session' },\n        { status: 401 }\n      );\n    }\n    \n    // Sign out and clear session\n    await signOut(session.id);\n    await clearSessionCookie();\n    \n    return NextResponse.json({\n      success: true,\n      message: 'Signed out successfully',\n    });\n    \n  } catch (error) {\n    console.error('Sign out error:', error);\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    );\n  }\n};\n\ndescribe('Authentication Core Logic', () => {\n  let signupHandler, signinHandler, signoutHandler;\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    \n    // Create handlers for each test\n    signupHandler = createSignupHandler();\n    signinHandler = createSigninHandler();\n    signoutHandler = createSignoutHandler();\n  });\n\n  afterEach(() => {\n    jest.restoreAllMocks();\n  });\n\n  describe('Signup Logic', () => {\n    it('should create new user with valid data', async () => {\n      // Arrange\n      const testUser = createTestUser({\n        name: 'John Doe',\n        email: 'john@example.com',\n      });\n      const testSession = createTestSession(testUser);\n\n      const requestBody = {\n        name: 'John Doe',\n        email: 'john@example.com',\n        password: 'SecurePass123!',\n      };\n\n      validateInput.mockReturnValue({\n        success: true,\n        data: requestBody,\n      });\n\n      signUp.mockResolvedValue({\n        user: testUser,\n        session: testSession,\n      });\n\n      setSessionCookie.mockResolvedValue(undefined);\n\n      const request = new NextRequest('http://localhost:3000/api/auth/signup', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      // Act\n      const response = await signupHandler(request);\n      const responseData = await response.json();\n\n      // Assert\n      expect(response.status).toBe(200);\n      expect(responseData).toEqual({\n        success: true,\n        user: {\n          id: testUser.id,\n          email: testUser.email,\n          name: testUser.name,\n        },\n      });\n\n      expect(validateInput).toHaveBeenCalledWith({}, requestBody);\n      expect(signUp).toHaveBeenCalledWith('john@example.com', 'SecurePass123!', 'John Doe');\n      expect(setSessionCookie).toHaveBeenCalledWith(testSession.id);\n    });\n\n    it('should return validation error for invalid input', async () => {\n      // Arrange\n      const requestBody = {\n        name: '',\n        email: 'invalid-email',\n        password: '123',\n      };\n\n      validateInput.mockReturnValue({\n        success: false,\n        errors: {\n          name: 'Name is required',\n          email: 'Please enter a valid email address',\n          password: 'Password must be at least 8 characters',\n        },\n      });\n\n      const request = new NextRequest('http://localhost:3000/api/auth/signup', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      // Act\n      const response = await signupHandler(request);\n      const responseData = await response.json();\n\n      // Assert\n      expect(response.status).toBe(400);\n      expect(responseData).toEqual({\n        error: 'Validation failed',\n        errors: {\n          name: 'Name is required',\n          email: 'Please enter a valid email address',\n          password: 'Password must be at least 8 characters',\n        },\n      });\n\n      expect(signUp).not.toHaveBeenCalled();\n      expect(setSessionCookie).not.toHaveBeenCalled();\n    });\n\n    it('should return conflict error when user already exists', async () => {\n      // Arrange\n      const requestBody = {\n        name: 'John Doe',\n        email: 'existing@example.com',\n        password: 'SecurePass123!',\n      };\n\n      validateInput.mockReturnValue({\n        success: true,\n        data: requestBody,\n      });\n\n      signUp.mockRejectedValue(new Error('User already exists'));\n\n      const request = new NextRequest('http://localhost:3000/api/auth/signup', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      // Act\n      const response = await signupHandler(request);\n      const responseData = await response.json();\n\n      // Assert\n      expect(response.status).toBe(409);\n      expect(responseData).toEqual({\n        error: 'An account with this email already exists',\n      });\n\n      expect(setSessionCookie).not.toHaveBeenCalled();\n    });\n  });\n\n  describe('Signin Logic', () => {\n    it('should authenticate user with valid credentials', async () => {\n      // Arrange\n      const testUser = createTestUser({\n        email: 'john@example.com',\n      });\n      const testSession = createTestSession(testUser);\n\n      const requestBody = {\n        email: 'john@example.com',\n        password: 'SecurePass123!',\n      };\n\n      validateInput.mockReturnValue({\n        success: true,\n        data: requestBody,\n      });\n\n      signIn.mockResolvedValue({\n        user: testUser,\n        session: testSession,\n      });\n\n      setSessionCookie.mockResolvedValue(undefined);\n\n      const request = new NextRequest('http://localhost:3000/api/auth/signin', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      // Act\n      const response = await signinHandler(request);\n      const responseData = await response.json();\n\n      // Assert\n      expect(response.status).toBe(200);\n      expect(responseData).toEqual({\n        success: true,\n        user: {\n          id: testUser.id,\n          email: testUser.email,\n          name: testUser.name,\n        },\n      });\n\n      expect(validateInput).toHaveBeenCalledWith({}, requestBody);\n      expect(signIn).toHaveBeenCalledWith('john@example.com', 'SecurePass123!');\n      expect(setSessionCookie).toHaveBeenCalledWith(testSession.id);\n    });\n\n    it('should return unauthorized error for invalid credentials', async () => {\n      // Arrange\n      const requestBody = {\n        email: 'john@example.com',\n        password: 'wrongpassword',\n      };\n\n      validateInput.mockReturnValue({\n        success: true,\n        data: requestBody,\n      });\n\n      signIn.mockResolvedValue(null); // Invalid credentials return null\n\n      const request = new NextRequest('http://localhost:3000/api/auth/signin', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      // Act\n      const response = await signinHandler(request);\n      const responseData = await response.json();\n\n      // Assert\n      expect(response.status).toBe(401);\n      expect(responseData).toEqual({\n        error: 'Invalid email or password',\n      });\n\n      expect(signIn).toHaveBeenCalledWith('john@example.com', 'wrongpassword');\n      expect(setSessionCookie).not.toHaveBeenCalled();\n    });\n  });\n\n  describe('Signout Logic', () => {\n    it('should sign out user with valid session', async () => {\n      // Arrange\n      const testUser = createTestUser();\n      const testSession = createTestSession(testUser);\n\n      validateRequest.mockResolvedValue({\n        user: testUser,\n        session: testSession,\n      });\n\n      signOut.mockResolvedValue(undefined);\n      clearSessionCookie.mockResolvedValue(undefined);\n\n      const request = new NextRequest('http://localhost:3000/api/auth/signout', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Cookie': `auth-session=${testSession.id}`,\n        },\n      });\n\n      // Act\n      const response = await signoutHandler(request);\n      const responseData = await response.json();\n\n      // Assert\n      expect(response.status).toBe(200);\n      expect(responseData).toEqual({\n        success: true,\n        message: 'Signed out successfully',\n      });\n\n      expect(validateRequest).toHaveBeenCalled();\n      expect(signOut).toHaveBeenCalledWith(testSession.id);\n      expect(clearSessionCookie).toHaveBeenCalled();\n    });\n\n    it('should return unauthorized error when no active session', async () => {\n      // Arrange\n      validateRequest.mockResolvedValue({\n        user: null,\n        session: null,\n      });\n\n      const request = new NextRequest('http://localhost:3000/api/auth/signout', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      // Act\n      const response = await signoutHandler(request);\n      const responseData = await response.json();\n\n      // Assert\n      expect(response.status).toBe(401);\n      expect(responseData).toEqual({\n        error: 'No active session',\n      });\n\n      expect(validateRequest).toHaveBeenCalled();\n      expect(signOut).not.toHaveBeenCalled();\n      expect(clearSessionCookie).not.toHaveBeenCalled();\n    });\n  });\n});"],"names":["jest","mock","signUp","fn","signIn","signOut","setSessionCookie","clearSessionCookie","validateRequest","validateInput","createSignupHandler","request","body","json","validation","success","NextResponse","error","errors","status","email","password","name","data","result","session","id","user","console","Error","message","createSigninHandler","createSignoutHandler","_request","describe","signupHandler","signinHandler","signoutHandler","beforeEach","clearAllMocks","afterEach","restoreAllMocks","it","testUser","createTestUser","testSession","createTestSession","requestBody","mockReturnValue","mockResolvedValue","undefined","NextRequest","method","JSON","stringify","headers","response","responseData","expect","toBe","toEqual","toHaveBeenCalledWith","not","toHaveBeenCalled","mockRejectedValue"],"mappings":"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"}