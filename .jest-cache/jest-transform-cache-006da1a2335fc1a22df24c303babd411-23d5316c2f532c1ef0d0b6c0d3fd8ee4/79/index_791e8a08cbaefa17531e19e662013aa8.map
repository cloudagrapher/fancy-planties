{"version":3,"sources":["/Users/stefanbekker/projects/fancy-planties/src/lib/auth/index.ts"],"sourcesContent":["import 'server-only';\n\nimport bcrypt from 'bcryptjs';\nimport { generateRandomString } from 'oslo/crypto';\nimport { db } from '../db';\nimport { users, sessions, type User as DatabaseUser, type Session as DatabaseSession } from '../db/schema';\nimport { eq } from 'drizzle-orm';\nimport { lucia } from './lucia';\n\n// Export types for use throughout the application\nexport type User = DatabaseUser;\nexport type Session = DatabaseSession;\n\n// Password hashing utilities\nexport async function hashPassword(password: string): Promise<string> {\n  const saltRounds = 12;\n  return await bcrypt.hash(password, saltRounds);\n}\n\nexport async function verifyPassword(password: string, hash: string): Promise<boolean> {\n  return await bcrypt.compare(password, hash);\n}\n\n// Session management utilities\nexport async function createSession(userId: number): Promise<Session> {\n  const sessionId = generateRandomString(40, '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ');\n  const expiresAt = new Date(Date.now() + 1000 * 60 * 60 * 24 * 30); // 30 days\n  \n  const [session] = await db.insert(sessions).values({\n    id: sessionId,\n    userId,\n    expiresAt,\n  }).returning();\n  \n  return session;\n}\n\nexport async function invalidateSession(sessionId: string): Promise<void> {\n  await lucia.invalidateSession(sessionId);\n}\n\nexport async function invalidateUserSessions(userId: number): Promise<void> {\n  await lucia.invalidateUserSessions(userId.toString());\n}\n\n\n// User management utilities\nexport async function createUser(email: string, password: string, name: string): Promise<User> {\n  const hashedPassword = await hashPassword(password);\n  \n  const [user] = await db.insert(users).values({\n    email: email.toLowerCase(),\n    hashedPassword,\n    name,\n  }).returning();\n  \n  return user;\n}\n\nexport async function getUserByEmail(email: string): Promise<User | null> {\n  const [user] = await db.select().from(users).where(eq(users.email, email.toLowerCase()));\n  return user || null;\n}\n\nexport async function getUserById(id: number): Promise<User | null> {\n  const [user] = await db.select().from(users).where(eq(users.id, id));\n  return user || null;\n}\n\n// Authentication flow helpers\nexport async function signIn(email: string, password: string): Promise<{ user: User; session: Session } | null> {\n  const user = await getUserByEmail(email);\n  \n  if (!user) {\n    return null;\n  }\n  \n  const validPassword = await verifyPassword(password, user.hashedPassword);\n  \n  if (!validPassword) {\n    return null;\n  }\n  \n  const luciaSession = await lucia.createSession(user.id.toString(), {});\n  \n  const session: Session = {\n    id: luciaSession.id,\n    userId: user.id,\n    expiresAt: luciaSession.expiresAt,\n  };\n  \n  return {\n    user,\n    session,\n  };\n}\n\nexport async function signUp(email: string, password: string, name: string): Promise<{ user: User; session: Session }> {\n  // Check if user already exists\n  const existingUser = await getUserByEmail(email);\n  \n  if (existingUser) {\n    throw new Error('User already exists');\n  }\n  \n  // Create new user\n  const user = await createUser(email, password, name);\n  \n  // Create session\n  const luciaSession = await lucia.createSession(user.id.toString(), {});\n  \n  const session: Session = {\n    id: luciaSession.id,\n    userId: user.id,\n    expiresAt: luciaSession.expiresAt,\n  };\n  \n  return {\n    user,\n    session,\n  };\n}\n\nexport async function signUpUnverified(email: string, password: string, name: string): Promise<User> {\n  // Check if user already exists\n  const existingUser = await getUserByEmail(email);\n  \n  if (existingUser) {\n    // If user exists and is already verified, don't allow re-signup\n    if (existingUser.isEmailVerified) {\n      throw new Error('User already exists');\n    }\n    \n    // If user exists but is not verified, return the existing user\n    // This allows them to resend verification email\n    return existingUser;\n  }\n  \n  // Create new unverified user (no session created)\n  const user = await createUser(email, password, name);\n  \n  return user;\n}\n\nexport async function signOut(sessionId: string): Promise<void> {\n  await lucia.invalidateSession(sessionId);\n}\n\n// Re-export utilities from other auth modules  \nexport * from './validation';\nexport * from './middleware';\nexport * from './session';"],"names":["createSession","createUser","getUserByEmail","getUserById","hashPassword","invalidateSession","invalidateUserSessions","signIn","signOut","signUp","signUpUnverified","verifyPassword","password","saltRounds","bcrypt","hash","compare","userId","sessionId","generateRandomString","expiresAt","Date","now","session","db","insert","sessions","values","id","returning","lucia","toString","email","name","hashedPassword","user","users","toLowerCase","select","from","where","eq","validPassword","luciaSession","existingUser","Error","isEmailVerified"],"mappings":"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"}