{"version":3,"sources":["/Users/stefanbekker/projects/fancy-planties/src/__tests__/integration/email-verification-flow.test.ts"],"sourcesContent":["/**\n * Email Verification Flow Integration Tests\n * Tests complete signup and verification process, resend functionality, and rate limiting\n * Requirements: 1.1, 1.4, 2.1, 2.2\n */\n\nimport { createDatabaseTestManager } from '@/test-utils/setup/database-test-manager';\nimport { createTestUser } from '@/test-utils/factories/user-factory';\nimport { emailVerificationCodeService } from '@/lib/services/email-verification-code-service';\nimport { createEmailService } from '@/lib/services/resend-email-service';\n\n// Mock email service\njest.mock('@/lib/services/resend-email-service');\njest.mock('@/lib/services/email-service');\n\nconst mockEmailService = {\n  sendVerificationEmail: jest.fn(),\n};\n\nconst mockCreateEmailService = createEmailService as jest.MockedFunction<typeof createEmailService>;\nconst mockSendEmailWithRetry = require('@/lib/services/email-service').sendEmailWithRetry as jest.MockedFunction<any>;\n\n// Mock environment variables\nconst originalEnv = process.env;\n\nbeforeAll(() => {\n  process.env = {\n    ...originalEnv,\n    RESEND_API_KEY: 'test-api-key',\n    FROM_EMAIL: 'test@example.com',\n    FROM_NAME: 'Test App',\n    VERIFICATION_CODE_EXPIRY_MINUTES: '10',\n    MAX_VERIFICATION_ATTEMPTS: '5',\n    RESEND_COOLDOWN_SECONDS: '60',\n    MAX_RESEND_PER_HOUR: '5',\n    NODE_ENV: 'test',\n  };\n});\n\nafterAll(() => {\n  process.env = originalEnv;\n});\n\ndescribe('Email Verification Flow Integration Tests', () => {\n  let dbManager: any;\n\n  beforeEach(async () => {\n    jest.clearAllMocks();\n    dbManager = createDatabaseTestManager();\n    \n    // Mock email service to always succeed\n    mockCreateEmailService.mockReturnValue(mockEmailService);\n    mockSendEmailWithRetry.mockResolvedValue(true);\n    mockEmailService.sendVerificationEmail.mockResolvedValue(true);\n  });\n\n  afterEach(async () => {\n    await dbManager.cleanup();\n  });\n\n  describe('Complete Signup and Verification Process', () => {\n    it('should complete full signup and verification workflow', async () => {\n      // Step 1: Create user and verification code directly\n      const user = await dbManager.createTestUser({\n        email: 'test@example.com',\n        name: 'Test User',\n        passwordHash: 'hashed_password',\n        isEmailVerified: false,\n      });\n\n      // Step 2: Generate verification code\n      const verificationCode = await emailVerificationCodeService.generateCode(user.id);\n      expect(verificationCode).toMatch(/^\\d{6}$/);\n\n      // Step 3: Verify the code was stored in database\n      const emailCodes = await dbManager.getEmailCodesByUserId(user.id);\n      expect(emailCodes).toHaveLength(1);\n      expect(emailCodes[0].code).toBe(verificationCode);\n\n      // Step 4: Validate the verification code\n      const isValid = await emailVerificationCodeService.validateCode('test@example.com', verificationCode);\n      expect(isValid).toBe(true);\n\n      // Step 5: Verify user is now verified in database\n      const verifiedUser = await dbManager.getUserById(user.id);\n      expect(verifiedUser.isEmailVerified).toBe(true);\n\n      // Step 6: Verify verification code was deleted\n      const remainingCodes = await dbManager.getEmailCodesByUserId(user.id);\n      expect(remainingCodes).toHaveLength(0);\n    });\n\n    it('should handle signup with email service failure gracefully', async () => {\n      // Mock email service to fail\n      mockSendEmailWithRetry.mockRejectedValue(new Error('Email service unavailable'));\n\n      const signupRequest = new NextRequest('http://localhost/api/auth/signup', {\n        method: 'POST',\n        body: JSON.stringify({\n          email: 'test@example.com',\n          password: 'SecurePass123!',\n          name: 'Test User',\n        }),\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      const signupResponse = await signupHandler(signupRequest);\n      const signupData = await signupResponse.json();\n\n      // Assert signup still succeeds but with email error\n      expect(signupResponse.status).toBe(200);\n      expect(signupData.success).toBe(true);\n      expect(signupData.requiresVerification).toBe(true);\n      expect(signupData.emailError).toContain('Failed to send verification email');\n\n      // Verify user was created but not verified\n      const user = await dbManager.getUserByEmail('test@example.com');\n      expect(user).toBeTruthy();\n      expect(user.isEmailVerified).toBe(false);\n\n      // Verify verification code was still generated\n      const emailCodes = await dbManager.getEmailCodesByUserId(user.id);\n      expect(emailCodes).toHaveLength(1);\n    });\n\n    it('should reject verification with invalid code', async () => {\n      // Create user and verification code\n      const user = await dbManager.createTestUser({\n        email: 'test@example.com',\n        name: 'Test User',\n        passwordHash: 'hashed_password',\n        isEmailVerified: false,\n      });\n\n      await dbManager.createTestEmailCode({\n        userId: user.id,\n        code: '123456',\n        expiresAt: new Date(Date.now() + 10 * 60 * 1000), // 10 minutes from now\n        attemptsUsed: 0,\n      });\n\n      // Try to verify with wrong code\n      const verifyRequest = new NextRequest('http://localhost/api/auth/verify-email', {\n        method: 'POST',\n        body: JSON.stringify({\n          email: 'test@example.com',\n          code: '654321', // Wrong code\n        }),\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      const verifyResponse = await verifyEmailHandler(verifyRequest);\n      const verifyData = await verifyResponse.json();\n\n      // Assert verification failure\n      expect(verifyResponse.status).toBe(400);\n      expect(verifyData.success).toBeFalsy();\n      expect(verifyData.error).toContain('Invalid verification code');\n\n      // Verify user is still not verified\n      const unverifiedUser = await dbManager.getUserById(user.id);\n      expect(unverifiedUser.isEmailVerified).toBe(false);\n    });\n\n    it('should reject verification with expired code', async () => {\n      // Create user and expired verification code\n      const user = await dbManager.createTestUser({\n        email: 'test@example.com',\n        name: 'Test User',\n        passwordHash: 'hashed_password',\n        isEmailVerified: false,\n      });\n\n      await dbManager.createTestEmailCode({\n        userId: user.id,\n        code: '123456',\n        expiresAt: new Date(Date.now() - 1000), // Expired 1 second ago\n        attemptsUsed: 0,\n      });\n\n      // Try to verify with expired code\n      const verifyRequest = new NextRequest('http://localhost/api/auth/verify-email', {\n        method: 'POST',\n        body: JSON.stringify({\n          email: 'test@example.com',\n          code: '123456',\n        }),\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      const verifyResponse = await verifyEmailHandler(verifyRequest);\n      const verifyData = await verifyResponse.json();\n\n      // Assert verification failure\n      expect(verifyResponse.status).toBe(400);\n      expect(verifyData.success).toBeFalsy();\n      expect(verifyData.error).toContain('Verification code has expired');\n\n      // Verify user is still not verified\n      const unverifiedUser = await dbManager.getUserById(user.id);\n      expect(unverifiedUser.isEmailVerified).toBe(false);\n    });\n  });\n\n  describe('Resend Verification Code Functionality', () => {\n    it('should resend verification code with proper cooldown behavior', async () => {\n      // Create unverified user\n      const user = await dbManager.createTestUser({\n        email: 'test@example.com',\n        name: 'Test User',\n        passwordHash: 'hashed_password',\n        isEmailVerified: false,\n      });\n\n      // Create existing verification code\n      await dbManager.createTestEmailCode({\n        userId: user.id,\n        code: '123456',\n        expiresAt: new Date(Date.now() + 10 * 60 * 1000),\n        attemptsUsed: 0,\n      });\n\n      // First resend request\n      const resendRequest1 = new NextRequest('http://localhost/api/auth/resend-verification', {\n        method: 'POST',\n        body: JSON.stringify({\n          email: 'test@example.com',\n        }),\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      const resendResponse1 = await resendVerificationHandler(resendRequest1);\n      const resendData1 = await resendResponse1.json();\n\n      // Assert first resend success\n      expect(resendResponse1.status).toBe(200);\n      expect(resendData1.success).toBe(true);\n      expect(resendData1.message).toContain('Verification code sent successfully');\n      expect(resendData1.cooldownSeconds).toBe(60);\n\n      // Verify new code was generated (old one should be invalidated)\n      const emailCodes = await dbManager.getEmailCodesByUserId(user.id);\n      expect(emailCodes).toHaveLength(1);\n      expect(emailCodes[0].code).not.toBe('123456'); // Should be a new code\n\n      // Verify email was sent\n      expect(mockSendEmailWithRetry).toHaveBeenCalledWith(\n        mockEmailService,\n        'test@example.com',\n        expect.stringMatching(/^\\d{6}$/),\n        'Test User'\n      );\n    });\n\n    it('should handle resend for already verified user', async () => {\n      // Create verified user\n      const user = await dbManager.createTestUser({\n        email: 'test@example.com',\n        name: 'Test User',\n        passwordHash: 'hashed_password',\n        isEmailVerified: true, // Already verified\n      });\n\n      const resendRequest = new NextRequest('http://localhost/api/auth/resend-verification', {\n        method: 'POST',\n        body: JSON.stringify({\n          email: 'test@example.com',\n        }),\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      const resendResponse = await resendVerificationHandler(resendRequest);\n      const resendData = await resendResponse.json();\n\n      // Assert appropriate response for already verified user\n      expect(resendResponse.status).toBe(400);\n      expect(resendData.error).toContain('Email is already verified');\n      expect(resendData.redirectTo).toBe('/auth/signin');\n\n      // Verify no email was sent\n      expect(mockSendEmailWithRetry).not.toHaveBeenCalled();\n    });\n\n    it('should handle resend for non-existent user', async () => {\n      const resendRequest = new NextRequest('http://localhost/api/auth/resend-verification', {\n        method: 'POST',\n        body: JSON.stringify({\n          email: 'nonexistent@example.com',\n        }),\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      const resendResponse = await resendVerificationHandler(resendRequest);\n      const resendData = await resendResponse.json();\n\n      // Assert user not found error\n      expect(resendResponse.status).toBe(404);\n      expect(resendData.error).toContain('User not found');\n\n      // Verify no email was sent\n      expect(mockSendEmailWithRetry).not.toHaveBeenCalled();\n    });\n  });\n\n  describe('Rate Limiting Enforcement', () => {\n    it('should enforce verification attempt limits', async () => {\n      // Create user and verification code\n      const user = await dbManager.createTestUser({\n        email: 'test@example.com',\n        name: 'Test User',\n        passwordHash: 'hashed_password',\n        isEmailVerified: false,\n      });\n\n      const emailCode = await dbManager.createTestEmailCode({\n        userId: user.id,\n        code: '123456',\n        expiresAt: new Date(Date.now() + 10 * 60 * 1000),\n        attemptsUsed: 4, // Already at 4 attempts (limit is 5)\n      });\n\n      // Make one more attempt (should still work)\n      const verifyRequest1 = new NextRequest('http://localhost/api/auth/verify-email', {\n        method: 'POST',\n        body: JSON.stringify({\n          email: 'test@example.com',\n          code: '654321', // Wrong code\n        }),\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      const verifyResponse1 = await verifyEmailHandler(verifyRequest1);\n      expect(verifyResponse1.status).toBe(400);\n\n      // Make another attempt (should be rate limited)\n      const verifyRequest2 = new NextRequest('http://localhost/api/auth/verify-email', {\n        method: 'POST',\n        body: JSON.stringify({\n          email: 'test@example.com',\n          code: '654321', // Wrong code\n        }),\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      const verifyResponse2 = await verifyEmailHandler(verifyRequest2);\n      const verifyData2 = await verifyResponse2.json();\n\n      // Assert rate limiting\n      expect(verifyResponse2.status).toBe(429);\n      expect(verifyData2.error).toContain('Too many verification attempts');\n    });\n\n    it('should handle validation errors properly', async () => {\n      // Test invalid email format\n      const verifyRequest1 = new NextRequest('http://localhost/api/auth/verify-email', {\n        method: 'POST',\n        body: JSON.stringify({\n          email: 'invalid-email',\n          code: '123456',\n        }),\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      const verifyResponse1 = await verifyEmailHandler(verifyRequest1);\n      const verifyData1 = await verifyResponse1.json();\n\n      expect(verifyResponse1.status).toBe(400);\n      expect(verifyData1.error).toBe('Validation failed');\n      expect(verifyData1.details).toEqual(\n        expect.arrayContaining([\n          expect.objectContaining({\n            field: 'email',\n            message: 'Invalid email address',\n          }),\n        ])\n      );\n\n      // Test invalid code format\n      const verifyRequest2 = new NextRequest('http://localhost/api/auth/verify-email', {\n        method: 'POST',\n        body: JSON.stringify({\n          email: 'test@example.com',\n          code: '12345', // Too short\n        }),\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      const verifyResponse2 = await verifyEmailHandler(verifyRequest2);\n      const verifyData2 = await verifyResponse2.json();\n\n      expect(verifyResponse2.status).toBe(400);\n      expect(verifyData2.error).toBe('Validation failed');\n      expect(verifyData2.details).toEqual(\n        expect.arrayContaining([\n          expect.objectContaining({\n            field: 'code',\n            message: 'Verification code must be 6 digits',\n          }),\n        ])\n      );\n\n      // Test non-numeric code\n      const verifyRequest3 = new NextRequest('http://localhost/api/auth/verify-email', {\n        method: 'POST',\n        body: JSON.stringify({\n          email: 'test@example.com',\n          code: 'ABCDEF', // Non-numeric\n        }),\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      const verifyResponse3 = await verifyEmailHandler(verifyRequest3);\n      const verifyData3 = await verifyResponse3.json();\n\n      expect(verifyResponse3.status).toBe(400);\n      expect(verifyData3.error).toBe('Validation failed');\n      expect(verifyData3.details).toEqual(\n        expect.arrayContaining([\n          expect.objectContaining({\n            field: 'code',\n            message: 'Verification code must contain only digits',\n          }),\n        ])\n      );\n    });\n  });\n\n  describe('Edge Cases and Error Scenarios', () => {\n    it('should handle duplicate signup attempts', async () => {\n      // First signup\n      const signupRequest1 = new NextRequest('http://localhost/api/auth/signup', {\n        method: 'POST',\n        body: JSON.stringify({\n          email: 'test@example.com',\n          password: 'SecurePass123!',\n          name: 'Test User',\n        }),\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      const signupResponse1 = await signupHandler(signupRequest1);\n      expect(signupResponse1.status).toBe(200);\n\n      // Second signup with same email\n      const signupRequest2 = new NextRequest('http://localhost/api/auth/signup', {\n        method: 'POST',\n        body: JSON.stringify({\n          email: 'test@example.com',\n          password: 'AnotherPass123!',\n          name: 'Another User',\n        }),\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      const signupResponse2 = await signupHandler(signupRequest2);\n      const signupData2 = await signupResponse2.json();\n\n      // Assert duplicate email error\n      expect(signupResponse2.status).toBe(409);\n      expect(signupData2.error).toContain('already exists');\n    });\n\n    it('should handle malformed request bodies', async () => {\n      // Test with invalid JSON\n      const verifyRequest = new NextRequest('http://localhost/api/auth/verify-email', {\n        method: 'POST',\n        body: 'invalid json',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      const verifyResponse = await verifyEmailHandler(verifyRequest);\n      const verifyData = await verifyResponse.json();\n\n      expect(verifyResponse.status).toBe(500);\n      expect(verifyData.error).toBe('Internal server error');\n    });\n\n    it('should handle missing request body fields', async () => {\n      // Test with missing email\n      const verifyRequest1 = new NextRequest('http://localhost/api/auth/verify-email', {\n        method: 'POST',\n        body: JSON.stringify({\n          code: '123456',\n        }),\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      const verifyResponse1 = await verifyEmailHandler(verifyRequest1);\n      const verifyData1 = await verifyResponse1.json();\n\n      expect(verifyResponse1.status).toBe(400);\n      expect(verifyData1.error).toBe('Validation failed');\n\n      // Test with missing code\n      const verifyRequest2 = new NextRequest('http://localhost/api/auth/verify-email', {\n        method: 'POST',\n        body: JSON.stringify({\n          email: 'test@example.com',\n        }),\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      const verifyResponse2 = await verifyEmailHandler(verifyRequest2);\n      const verifyData2 = await verifyResponse2.json();\n\n      expect(verifyResponse2.status).toBe(400);\n      expect(verifyData2.error).toBe('Validation failed');\n    });\n  });\n});"],"names":["jest","mock","mockEmailService","sendVerificationEmail","fn","mockCreateEmailService","createEmailService","mockSendEmailWithRetry","require","sendEmailWithRetry","originalEnv","process","env","beforeAll","RESEND_API_KEY","FROM_EMAIL","FROM_NAME","VERIFICATION_CODE_EXPIRY_MINUTES","MAX_VERIFICATION_ATTEMPTS","RESEND_COOLDOWN_SECONDS","MAX_RESEND_PER_HOUR","NODE_ENV","afterAll","describe","dbManager","beforeEach","clearAllMocks","createDatabaseTestManager","mockReturnValue","mockResolvedValue","afterEach","cleanup","it","user","createTestUser","email","name","passwordHash","isEmailVerified","verificationCode","emailVerificationCodeService","generateCode","id","expect","toMatch","emailCodes","getEmailCodesByUserId","toHaveLength","code","toBe","isValid","validateCode","verifiedUser","getUserById","remainingCodes","mockRejectedValue","Error","signupRequest","NextRequest","method","body","JSON","stringify","password","headers","signupResponse","signupHandler","signupData","json","status","success","requiresVerification","emailError","toContain","getUserByEmail","toBeTruthy","createTestEmailCode","userId","expiresAt","Date","now","attemptsUsed","verifyRequest","verifyResponse","verifyEmailHandler","verifyData","toBeFalsy","error","unverifiedUser","resendRequest1","resendResponse1","resendVerificationHandler","resendData1","message","cooldownSeconds","not","toHaveBeenCalledWith","stringMatching","resendRequest","resendResponse","resendData","redirectTo","toHaveBeenCalled","emailCode","verifyRequest1","verifyResponse1","verifyRequest2","verifyResponse2","verifyData2","verifyData1","details","toEqual","arrayContaining","objectContaining","field","verifyRequest3","verifyResponse3","verifyData3","signupRequest1","signupResponse1","signupRequest2","signupResponse2","signupData2"],"mappings":"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"}