{"version":3,"names":["cov_2qm3qgy7hl","actualCoverage","s","getCurrentUser","f","getSessionSecurityInfo","signInClient","signOutClient","signUpClient","request","userAgent","b","headers","get","ip","timestamp","Date","toISOString","email","password","response","fetch","method","body","JSON","stringify","ok","error","text","Error","json","name","console"],"sources":["/Users/stefanbekker/projects/fancy-planties/src/lib/auth/client.ts"],"sourcesContent":["// Client-safe auth utilities\nexport interface User {\n  id: number;\n  email: string;\n  name: string;\n}\n\nexport interface Session {\n  id: string;\n  userId: number;\n  expiresAt: Date;\n}\n\n// Session security helpers (client-safe)\nexport function getSessionSecurityInfo(request: Request) {\n  const userAgent = request.headers.get('user-agent') || 'Unknown';\n  const ip = request.headers.get('x-forwarded-for') || \n            request.headers.get('x-real-ip') || \n            'Unknown';\n  \n  return {\n    userAgent,\n    ip,\n    timestamp: new Date().toISOString(),\n  };\n}\n\n// Session activity tracking (for future security features)\nexport interface SessionActivity {\n  sessionId: string;\n  userId: number;\n  action: string;\n  ip: string;\n  userAgent: string;\n  timestamp: Date;\n}\n\n// Auth state types for client components\nexport interface AuthState {\n  user: User | null;\n  session: Session | null;\n  loading: boolean;\n}\n\n// Client-side auth API calls\nexport async function signInClient(email: string, password: string): Promise<{ user: User; session: Session }> {\n  const response = await fetch('/api/auth/signin', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({ email, password }),\n  });\n\n  if (!response.ok) {\n    const error = await response.text();\n    throw new Error(error || 'Sign in failed');\n  }\n\n  return response.json();\n}\n\nexport async function signUpClient(email: string, password: string, name: string): Promise<{ user: User; session: Session }> {\n  const response = await fetch('/api/auth/signup', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({ email, password, name }),\n  });\n\n  if (!response.ok) {\n    const error = await response.text();\n    throw new Error(error || 'Sign up failed');\n  }\n\n  return response.json();\n}\n\nexport async function signOutClient(): Promise<void> {\n  const response = await fetch('/api/auth/signout', {\n    method: 'POST',\n  });\n\n  if (!response.ok) {\n    throw new Error('Sign out failed');\n  }\n}\n\nexport async function getCurrentUser(): Promise<{ user: User; session: Session } | null> {\n  try {\n    const response = await fetch('/api/user/me');\n    \n    if (!response.ok) {\n      return null;\n    }\n\n    return response.json();\n  } catch (error) {\n    console.error('Failed to get current user:', error);\n    return null;\n  }\n}"],"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","ignoreList":[]}