9ad7992c82a99b71503f389187cc8d88
"use strict";

/* istanbul ignore next */
function cov_1vv3foqs4s() {
  var path = "/Users/stefanbekker/projects/fancy-planties/src/lib/services/email-verification-code-service.ts";
  var hash = "04e2025f94e83738a5df64cb5983fbab5b72cdcf";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/stefanbekker/projects/fancy-planties/src/lib/services/email-verification-code-service.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 24,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 44
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 37
        }
      },
      "6": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 33
        }
      },
      "7": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 44
        }
      },
      "8": {
        start: {
          line: 25,
          column: 0
        },
        end: {
          line: 25,
          column: 23
        }
      },
      "9": {
        start: {
          line: 26,
          column: 12
        },
        end: {
          line: 26,
          column: 28
        }
      },
      "10": {
        start: {
          line: 27,
          column: 16
        },
        end: {
          line: 27,
          column: 39
        }
      },
      "11": {
        start: {
          line: 28,
          column: 20
        },
        end: {
          line: 28,
          column: 42
        }
      },
      "12": {
        start: {
          line: 29,
          column: 16
        },
        end: {
          line: 29,
          column: 33
        }
      },
      "13": {
        start: {
          line: 30,
          column: 38
        },
        end: {
          line: 37,
          column: 5
        }
      },
      "14": {
        start: {
          line: 31,
          column: 4
        },
        end: {
          line: 31,
          column: 55
        }
      },
      "15": {
        start: {
          line: 32,
          column: 4
        },
        end: {
          line: 32,
          column: 55
        }
      },
      "16": {
        start: {
          line: 33,
          column: 4
        },
        end: {
          line: 33,
          column: 65
        }
      },
      "17": {
        start: {
          line: 34,
          column: 4
        },
        end: {
          line: 34,
          column: 59
        }
      },
      "18": {
        start: {
          line: 35,
          column: 4
        },
        end: {
          line: 35,
          column: 63
        }
      },
      "19": {
        start: {
          line: 36,
          column: 4
        },
        end: {
          line: 36,
          column: 29
        }
      },
      "20": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 40,
          column: 41
        }
      },
      "21": {
        start: {
          line: 41,
          column: 8
        },
        end: {
          line: 41,
          column: 44
        }
      },
      "22": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 46,
          column: 29
        }
      },
      "23": {
        start: {
          line: 49,
          column: 8
        },
        end: {
          line: 49,
          column: 33
        }
      },
      "24": {
        start: {
          line: 52,
          column: 8
        },
        end: {
          line: 52,
          column: 30
        }
      },
      "25": {
        start: {
          line: 58,
          column: 23
        },
        end: {
          line: 58,
          column: 50
        }
      },
      "26": {
        start: {
          line: 59,
          column: 29
        },
        end: {
          line: 59,
          column: 51
        }
      },
      "27": {
        start: {
          line: 61,
          column: 21
        },
        end: {
          line: 61,
          column: 73
        }
      },
      "28": {
        start: {
          line: 62,
          column: 8
        },
        end: {
          line: 62,
          column: 20
        }
      },
      "29": {
        start: {
          line: 69,
          column: 8
        },
        end: {
          line: 69,
          column: 43
        }
      },
      "30": {
        start: {
          line: 71,
          column: 21
        },
        end: {
          line: 71,
          column: 46
        }
      },
      "31": {
        start: {
          line: 72,
          column: 26
        },
        end: {
          line: 72,
          column: 104
        }
      },
      "32": {
        start: {
          line: 74,
          column: 8
        },
        end: {
          line: 79,
          column: 11
        }
      },
      "33": {
        start: {
          line: 80,
          column: 8
        },
        end: {
          line: 80,
          column: 20
        }
      },
      "34": {
        start: {
          line: 87,
          column: 27
        },
        end: {
          line: 90,
          column: 94
        }
      },
      "35": {
        start: {
          line: 91,
          column: 8
        },
        end: {
          line: 93,
          column: 9
        }
      },
      "36": {
        start: {
          line: 92,
          column: 12
        },
        end: {
          line: 92,
          column: 80
        }
      },
      "37": {
        start: {
          line: 94,
          column: 21
        },
        end: {
          line: 94,
          column: 34
        }
      },
      "38": {
        start: {
          line: 96,
          column: 8
        },
        end: {
          line: 98,
          column: 9
        }
      },
      "39": {
        start: {
          line: 97,
          column: 12
        },
        end: {
          line: 97,
          column: 90
        }
      },
      "40": {
        start: {
          line: 100,
          column: 27
        },
        end: {
          line: 100,
          column: 255
        }
      },
      "41": {
        start: {
          line: 101,
          column: 8
        },
        end: {
          line: 103,
          column: 9
        }
      },
      "42": {
        start: {
          line: 102,
          column: 12
        },
        end: {
          line: 102,
          column: 89
        }
      },
      "43": {
        start: {
          line: 104,
          column: 33
        },
        end: {
          line: 104,
          column: 46
        }
      },
      "44": {
        start: {
          line: 106,
          column: 8
        },
        end: {
          line: 110,
          column: 9
        }
      },
      "45": {
        start: {
          line: 108,
          column: 12
        },
        end: {
          line: 108,
          column: 147
        }
      },
      "46": {
        start: {
          line: 109,
          column: 12
        },
        end: {
          line: 109,
          column: 93
        }
      },
      "47": {
        start: {
          line: 112,
          column: 8
        },
        end: {
          line: 116,
          column: 9
        }
      },
      "48": {
        start: {
          line: 114,
          column: 12
        },
        end: {
          line: 114,
          column: 147
        }
      },
      "49": {
        start: {
          line: 115,
          column: 12
        },
        end: {
          line: 115,
          column: 99
        }
      },
      "50": {
        start: {
          line: 118,
          column: 8
        },
        end: {
          line: 125,
          column: 11
        }
      },
      "51": {
        start: {
          line: 120,
          column: 12
        },
        end: {
          line: 122,
          column: 69
        }
      },
      "52": {
        start: {
          line: 124,
          column: 12
        },
        end: {
          line: 124,
          column: 143
        }
      },
      "53": {
        start: {
          line: 126,
          column: 8
        },
        end: {
          line: 126,
          column: 20
        }
      },
      "54": {
        start: {
          line: 133,
          column: 27
        },
        end: {
          line: 135,
          column: 94
        }
      },
      "55": {
        start: {
          line: 136,
          column: 8
        },
        end: {
          line: 138,
          column: 9
        }
      },
      "56": {
        start: {
          line: 137,
          column: 12
        },
        end: {
          line: 137,
          column: 19
        }
      },
      "57": {
        start: {
          line: 139,
          column: 21
        },
        end: {
          line: 139,
          column: 34
        }
      },
      "58": {
        start: {
          line: 141,
          column: 27
        },
        end: {
          line: 144,
          column: 217
        }
      },
      "59": {
        start: {
          line: 145,
          column: 8
        },
        end: {
          line: 150,
          column: 9
        }
      },
      "60": {
        start: {
          line: 146,
          column: 37
        },
        end: {
          line: 146,
          column: 50
        }
      },
      "61": {
        start: {
          line: 147,
          column: 12
        },
        end: {
          line: 149,
          column: 98
        }
      },
      "62": {
        start: {
          line: 156,
          column: 20
        },
        end: {
          line: 156,
          column: 30
        }
      },
      "63": {
        start: {
          line: 158,
          column: 29
        },
        end: {
          line: 160,
          column: 121
        }
      },
      "64": {
        start: {
          line: 161,
          column: 22
        },
        end: {
          line: 161,
          column: 41
        }
      },
      "65": {
        start: {
          line: 163,
          column: 8
        },
        end: {
          line: 165,
          column: 9
        }
      },
      "66": {
        start: {
          line: 164,
          column: 12
        },
        end: {
          line: 164,
          column: 138
        }
      },
      "67": {
        start: {
          line: 166,
          column: 8
        },
        end: {
          line: 166,
          column: 21
        }
      },
      "68": {
        start: {
          line: 172,
          column: 8
        },
        end: {
          line: 172,
          column: 134
        }
      },
      "69": {
        start: {
          line: 177,
          column: 20
        },
        end: {
          line: 177,
          column: 30
        }
      },
      "70": {
        start: {
          line: 178,
          column: 23
        },
        end: {
          line: 179,
          column: 19
        }
      },
      "71": {
        start: {
          line: 180,
          column: 8
        },
        end: {
          line: 180,
          column: 52
        }
      },
      "72": {
        start: {
          line: 185,
          column: 21
        },
        end: {
          line: 185,
          column: 57
        }
      },
      "73": {
        start: {
          line: 186,
          column: 8
        },
        end: {
          line: 186,
          column: 29
        }
      },
      "74": {
        start: {
          line: 191,
          column: 20
        },
        end: {
          line: 191,
          column: 30
        }
      },
      "75": {
        start: {
          line: 193,
          column: 29
        },
        end: {
          line: 195,
          column: 121
        }
      },
      "76": {
        start: {
          line: 197,
          column: 30
        },
        end: {
          line: 199,
          column: 121
        }
      },
      "77": {
        start: {
          line: 201,
          column: 34
        },
        end: {
          line: 204,
          column: 10
        }
      },
      "78": {
        start: {
          line: 205,
          column: 8
        },
        end: {
          line: 209,
          column: 10
        }
      },
      "79": {
        start: {
          line: 212,
          column: 37
        },
        end: {
          line: 212,
          column: 71
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        },
        loc: {
          start: {
            line: 12,
            column: 40
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 33
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 18,
            column: 4
          },
          end: {
            line: 18,
            column: 5
          }
        },
        loc: {
          start: {
            line: 18,
            column: 29
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 18
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 21,
            column: 4
          },
          end: {
            line: 21,
            column: 5
          }
        },
        loc: {
          start: {
            line: 21,
            column: 40
          },
          end: {
            line: 23,
            column: 5
          }
        },
        line: 21
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 30,
            column: 38
          },
          end: {
            line: 30,
            column: 39
          }
        },
        loc: {
          start: {
            line: 30,
            column: 66
          },
          end: {
            line: 37,
            column: 1
          }
        },
        line: 30
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 39,
            column: 4
          },
          end: {
            line: 39,
            column: 5
          }
        },
        loc: {
          start: {
            line: 39,
            column: 30
          },
          end: {
            line: 42,
            column: 5
          }
        },
        line: 39
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 56,
            column: 6
          },
          end: {
            line: 56,
            column: 7
          }
        },
        loc: {
          start: {
            line: 56,
            column: 27
          },
          end: {
            line: 63,
            column: 5
          }
        },
        line: 56
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 67,
            column: 6
          },
          end: {
            line: 67,
            column: 7
          }
        },
        loc: {
          start: {
            line: 67,
            column: 33
          },
          end: {
            line: 81,
            column: 5
          }
        },
        line: 67
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 85,
            column: 6
          },
          end: {
            line: 85,
            column: 7
          }
        },
        loc: {
          start: {
            line: 85,
            column: 38
          },
          end: {
            line: 127,
            column: 5
          }
        },
        line: 85
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 118,
            column: 33
          },
          end: {
            line: 118,
            column: 34
          }
        },
        loc: {
          start: {
            line: 118,
            column: 45
          },
          end: {
            line: 125,
            column: 9
          }
        },
        line: 118
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 131,
            column: 6
          },
          end: {
            line: 131,
            column: 7
          }
        },
        loc: {
          start: {
            line: 131,
            column: 43
          },
          end: {
            line: 151,
            column: 5
          }
        },
        line: 131
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 155,
            column: 6
          },
          end: {
            line: 155,
            column: 7
          }
        },
        loc: {
          start: {
            line: 155,
            column: 34
          },
          end: {
            line: 167,
            column: 5
          }
        },
        line: 155
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 171,
            column: 6
          },
          end: {
            line: 171,
            column: 7
          }
        },
        loc: {
          start: {
            line: 171,
            column: 36
          },
          end: {
            line: 173,
            column: 5
          }
        },
        line: 171
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 176,
            column: 6
          },
          end: {
            line: 176,
            column: 7
          }
        },
        loc: {
          start: {
            line: 176,
            column: 38
          },
          end: {
            line: 181,
            column: 5
          }
        },
        line: 176
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 184,
            column: 6
          },
          end: {
            line: 184,
            column: 7
          }
        },
        loc: {
          start: {
            line: 184,
            column: 34
          },
          end: {
            line: 187,
            column: 5
          }
        },
        line: 184
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 190,
            column: 6
          },
          end: {
            line: 190,
            column: 7
          }
        },
        loc: {
          start: {
            line: 190,
            column: 27
          },
          end: {
            line: 210,
            column: 5
          }
        },
        line: 190
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 91,
            column: 8
          },
          end: {
            line: 93,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 91,
            column: 8
          },
          end: {
            line: 93,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 91
      },
      "1": {
        loc: {
          start: {
            line: 96,
            column: 8
          },
          end: {
            line: 98,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 96,
            column: 8
          },
          end: {
            line: 98,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 96
      },
      "2": {
        loc: {
          start: {
            line: 101,
            column: 8
          },
          end: {
            line: 103,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 101,
            column: 8
          },
          end: {
            line: 103,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 101
      },
      "3": {
        loc: {
          start: {
            line: 106,
            column: 8
          },
          end: {
            line: 110,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 106,
            column: 8
          },
          end: {
            line: 110,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 106
      },
      "4": {
        loc: {
          start: {
            line: 112,
            column: 8
          },
          end: {
            line: 116,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 112,
            column: 8
          },
          end: {
            line: 116,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 112
      },
      "5": {
        loc: {
          start: {
            line: 136,
            column: 8
          },
          end: {
            line: 138,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 136,
            column: 8
          },
          end: {
            line: 138,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 136
      },
      "6": {
        loc: {
          start: {
            line: 145,
            column: 8
          },
          end: {
            line: 150,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 145,
            column: 8
          },
          end: {
            line: 150,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 145
      },
      "7": {
        loc: {
          start: {
            line: 163,
            column: 8
          },
          end: {
            line: 165,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 163,
            column: 8
          },
          end: {
            line: 165,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 163
      },
      "8": {
        loc: {
          start: {
            line: 180,
            column: 15
          },
          end: {
            line: 180,
            column: 51
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 180,
            column: 35
          },
          end: {
            line: 180,
            column: 44
          }
        }, {
          start: {
            line: 180,
            column: 47
          },
          end: {
            line: 180,
            column: 51
          }
        }],
        line: 180
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/stefanbekker/projects/fancy-planties/src/lib/services/email-verification-code-service.ts"],
      sourcesContent: ["import 'server-only';\nimport { db } from '@/lib/db';\nimport { emailVerificationCodes, users } from '@/lib/db/schema';\nimport { eq, and, lt, gt } from 'drizzle-orm';\nimport { randomBytes } from 'crypto';\n\nexport interface EmailVerificationCode {\n  id: number;\n  userId: number;\n  code: string;\n  expiresAt: Date;\n  createdAt: Date;\n  attemptsUsed: number;\n}\n\nexport enum VerificationError {\n  CODE_EXPIRED = 'CODE_EXPIRED',\n  CODE_INVALID = 'CODE_INVALID',\n  TOO_MANY_ATTEMPTS = 'TOO_MANY_ATTEMPTS',\n  USER_NOT_FOUND = 'USER_NOT_FOUND',\n  ALREADY_VERIFIED = 'ALREADY_VERIFIED'\n}\n\nexport class VerificationCodeError extends Error {\n  constructor(\n    message: string,\n    public code: VerificationError\n  ) {\n    super(message);\n    this.name = 'VerificationCodeError';\n  }\n}\n\nexport class EmailVerificationCodeService {\n  private static readonly CODE_LENGTH = 6;\n  private static readonly EXPIRY_MINUTES = 10;\n  private static readonly MAX_ATTEMPTS = 5;\n\n  /**\n   * Generate a cryptographically secure 6-digit verification code\n   */\n  private generateSecureCode(): string {\n    // Generate random bytes and convert to 6-digit number\n    const buffer = randomBytes(4);\n    const randomNumber = buffer.readUInt32BE(0);\n    // Ensure it's always 6 digits by using modulo and padding\n    const code = (randomNumber % 1000000).toString().padStart(6, '0');\n    return code;\n  }\n\n  /**\n   * Generate and store a new verification code for a user\n   * Invalidates any existing codes for the user\n   */\n  async generateCode(userId: number): Promise<string> {\n    // First, delete any existing codes for this user\n    await this.deleteUserCodes(userId);\n\n    // Generate new code\n    const code = this.generateSecureCode();\n    const expiresAt = new Date(Date.now() + EmailVerificationCodeService.EXPIRY_MINUTES * 60 * 1000);\n\n    // Store in database\n    await db.insert(emailVerificationCodes).values({\n      userId,\n      code,\n      expiresAt,\n      attemptsUsed: 0,\n    });\n\n    return code;\n  }\n\n  /**\n   * Validate a verification code for a user\n   * Returns true if valid, throws VerificationCodeError if invalid\n   */\n  async validateCode(email: string, code: string): Promise<boolean> {\n    // Find user by email\n    const userResult = await db\n      .select({ id: users.id, isEmailVerified: users.isEmailVerified })\n      .from(users)\n      .where(eq(users.email, email))\n      .limit(1);\n\n    if (userResult.length === 0) {\n      throw new VerificationCodeError('User not found', VerificationError.USER_NOT_FOUND);\n    }\n\n    const user = userResult[0];\n\n    // Check if user is already verified\n    if (user.isEmailVerified) {\n      throw new VerificationCodeError('Email already verified', VerificationError.ALREADY_VERIFIED);\n    }\n\n    // Find the verification code\n    const codeResult = await db\n      .select()\n      .from(emailVerificationCodes)\n      .where(\n        and(\n          eq(emailVerificationCodes.userId, user.id),\n          eq(emailVerificationCodes.code, code)\n        )\n      )\n      .limit(1);\n\n    if (codeResult.length === 0) {\n      throw new VerificationCodeError('Invalid verification code', VerificationError.CODE_INVALID);\n    }\n\n    const verificationCode = codeResult[0];\n\n    // Check if code has expired\n    if (new Date() > verificationCode.expiresAt) {\n      // Clean up expired code\n      await db\n        .delete(emailVerificationCodes)\n        .where(eq(emailVerificationCodes.id, verificationCode.id));\n      \n      throw new VerificationCodeError('Verification code has expired', VerificationError.CODE_EXPIRED);\n    }\n\n    // Check if too many attempts have been made\n    if (verificationCode.attemptsUsed >= EmailVerificationCodeService.MAX_ATTEMPTS) {\n      // Invalidate the code\n      await db\n        .delete(emailVerificationCodes)\n        .where(eq(emailVerificationCodes.id, verificationCode.id));\n      \n      throw new VerificationCodeError('Too many verification attempts', VerificationError.TOO_MANY_ATTEMPTS);\n    }\n\n    // Code is valid - mark user as verified and delete the code\n    await db.transaction(async (tx) => {\n      // Update user verification status\n      await tx\n        .update(users)\n        .set({ isEmailVerified: true })\n        .where(eq(users.id, user.id));\n\n      // Delete the verification code\n      await tx\n        .delete(emailVerificationCodes)\n        .where(eq(emailVerificationCodes.id, verificationCode.id));\n    });\n\n    return true;\n  }\n\n  /**\n   * Increment the attempt count for a verification code\n   * Used when validation fails but we want to track attempts\n   */\n  async incrementAttempts(email: string, code: string): Promise<void> {\n    // Find user by email\n    const userResult = await db\n      .select({ id: users.id })\n      .from(users)\n      .where(eq(users.email, email))\n      .limit(1);\n\n    if (userResult.length === 0) {\n      return; // User not found, nothing to increment\n    }\n\n    const user = userResult[0];\n\n    // Find and increment attempts for the code\n    const codeResult = await db\n      .select({ id: emailVerificationCodes.id, attemptsUsed: emailVerificationCodes.attemptsUsed })\n      .from(emailVerificationCodes)\n      .where(\n        and(\n          eq(emailVerificationCodes.userId, user.id),\n          eq(emailVerificationCodes.code, code)\n        )\n      )\n      .limit(1);\n\n    if (codeResult.length > 0) {\n      const verificationCode = codeResult[0];\n      await db\n        .update(emailVerificationCodes)\n        .set({ attemptsUsed: verificationCode.attemptsUsed + 1 })\n        .where(eq(emailVerificationCodes.id, verificationCode.id));\n    }\n  }\n\n  /**\n   * Clean up expired verification codes\n   * Should be called periodically by a cleanup job\n   */\n  async cleanupExpiredCodes(): Promise<number> {\n    const now = new Date();\n    \n    // First count the expired codes\n    const expiredCodes = await db\n      .select({ id: emailVerificationCodes.id })\n      .from(emailVerificationCodes)\n      .where(lt(emailVerificationCodes.expiresAt, now));\n\n    const count = expiredCodes.length;\n\n    // Then delete them if any exist\n    if (count > 0) {\n      await db\n        .delete(emailVerificationCodes)\n        .where(lt(emailVerificationCodes.expiresAt, now));\n    }\n\n    return count;\n  }\n\n  /**\n   * Delete all verification codes for a specific user\n   * Used when generating new codes or when user is deleted\n   */\n  async deleteUserCodes(userId: number): Promise<void> {\n    await db\n      .delete(emailVerificationCodes)\n      .where(eq(emailVerificationCodes.userId, userId));\n  }\n\n  /**\n   * Get active verification code for a user (for testing/debugging)\n   */\n  async getUserActiveCode(userId: number): Promise<EmailVerificationCode | null> {\n    const now = new Date();\n    const result = await db\n      .select()\n      .from(emailVerificationCodes)\n      .where(\n        and(\n          eq(emailVerificationCodes.userId, userId),\n          gt(emailVerificationCodes.expiresAt, now) // Not expired\n        )\n      )\n      .limit(1);\n\n    return result.length > 0 ? result[0] : null;\n  }\n\n  /**\n   * Check if a user has any active verification codes\n   */\n  async hasActiveCode(userId: number): Promise<boolean> {\n    const code = await this.getUserActiveCode(userId);\n    return code !== null;\n  }\n\n  /**\n   * Get verification code statistics for monitoring\n   */\n  async getCodeStats(): Promise<{\n    totalActive: number;\n    expiredCount: number;\n    highAttemptCount: number;\n  }> {\n    const now = new Date();\n    \n    // Count active codes\n    const activeResult = await db\n      .select({ id: emailVerificationCodes.id })\n      .from(emailVerificationCodes)\n      .where(gt(emailVerificationCodes.expiresAt, now));\n\n    // Count expired codes\n    const expiredResult = await db\n      .select({ id: emailVerificationCodes.id })\n      .from(emailVerificationCodes)\n      .where(lt(emailVerificationCodes.expiresAt, now));\n\n    // Count codes with high attempts (4 or more)\n    const highAttemptResult = await db\n      .select({ id: emailVerificationCodes.id })\n      .from(emailVerificationCodes)\n      .where(\n        and(\n          gt(emailVerificationCodes.expiresAt, now),\n          eq(emailVerificationCodes.attemptsUsed, 4) // Close to max attempts\n        )\n      );\n\n    return {\n      totalActive: activeResult.length,\n      expiredCount: expiredResult.length,\n      highAttemptCount: highAttemptResult.length,\n    };\n  }\n}\n\n// Export singleton instance\nexport const emailVerificationCodeService = new EmailVerificationCodeService();"],
      names: ["EmailVerificationCodeService", "VerificationCodeError", "VerificationError", "emailVerificationCodeService", "Error", "message", "code", "name", "CODE_LENGTH", "EXPIRY_MINUTES", "MAX_ATTEMPTS", "generateSecureCode", "buffer", "randomBytes", "randomNumber", "readUInt32BE", "toString", "padStart", "generateCode", "userId", "deleteUserCodes", "expiresAt", "Date", "now", "db", "insert", "emailVerificationCodes", "values", "attemptsUsed", "validateCode", "email", "userResult", "select", "id", "users", "isEmailVerified", "from", "where", "eq", "limit", "length", "user", "codeResult", "and", "verificationCode", "delete", "transaction", "tx", "update", "set", "incrementAttempts", "cleanupExpiredCodes", "expiredCodes", "lt", "count", "getUserActiveCode", "result", "gt", "hasActiveCode", "getCodeStats", "activeResult", "expiredResult", "highAttemptResult", "totalActive", "expiredCount", "highAttemptCount"],
      mappings: ";;;;;;;;;;;QAiCaA;eAAAA;;QAVAC;eAAAA;;QARDC;eAAAA;;QAuRCC;eAAAA;;;QAtSN;oBACY;wBAC2B;4BACd;wBACJ;AAWrB,IAAA,AAAKD,2CAAAA;;;;;;WAAAA;;AAQL,MAAMD,8BAA8BG;IACzC,YACEC,OAAe,EACf,AAAOC,IAAuB,CAC9B;QACA,KAAK,CAACD,eAFCC,OAAAA;QAGP,IAAI,CAACC,IAAI,GAAG;IACd;AACF;AAEO,MAAMP;;aACaQ,cAAc;;;aACdC,iBAAiB;;;aACjBC,eAAe;;IAEvC;;GAEC,GACD,AAAQC,qBAA6B;QACnC,sDAAsD;QACtD,MAAMC,SAASC,IAAAA,mBAAW,EAAC;QAC3B,MAAMC,eAAeF,OAAOG,YAAY,CAAC;QACzC,0DAA0D;QAC1D,MAAMT,OAAO,AAACQ,CAAAA,eAAe,OAAM,EAAGE,QAAQ,GAAGC,QAAQ,CAAC,GAAG;QAC7D,OAAOX;IACT;IAEA;;;GAGC,GACD,MAAMY,aAAaC,MAAc,EAAmB;QAClD,iDAAiD;QACjD,MAAM,IAAI,CAACC,eAAe,CAACD;QAE3B,oBAAoB;QACpB,MAAMb,OAAO,IAAI,CAACK,kBAAkB;QACpC,MAAMU,YAAY,IAAIC,KAAKA,KAAKC,GAAG,KAAKvB,6BAA6BS,cAAc,GAAG,KAAK;QAE3F,oBAAoB;QACpB,MAAMe,MAAE,CAACC,MAAM,CAACC,8BAAsB,EAAEC,MAAM,CAAC;YAC7CR;YACAb;YACAe;YACAO,cAAc;QAChB;QAEA,OAAOtB;IACT;IAEA;;;GAGC,GACD,MAAMuB,aAAaC,KAAa,EAAExB,IAAY,EAAoB;QAChE,qBAAqB;QACrB,MAAMyB,aAAa,MAAMP,MAAE,CACxBQ,MAAM,CAAC;YAAEC,IAAIC,aAAK,CAACD,EAAE;YAAEE,iBAAiBD,aAAK,CAACC,eAAe;QAAC,GAC9DC,IAAI,CAACF,aAAK,EACVG,KAAK,CAACC,IAAAA,cAAE,EAACJ,aAAK,CAACJ,KAAK,EAAEA,QACtBS,KAAK,CAAC;QAET,IAAIR,WAAWS,MAAM,KAAK,GAAG;YAC3B,MAAM,IAAIvC,sBAAsB;QAClC;QAEA,MAAMwC,OAAOV,UAAU,CAAC,EAAE;QAE1B,oCAAoC;QACpC,IAAIU,KAAKN,eAAe,EAAE;YACxB,MAAM,IAAIlC,sBAAsB;QAClC;QAEA,6BAA6B;QAC7B,MAAMyC,aAAa,MAAMlB,MAAE,CACxBQ,MAAM,GACNI,IAAI,CAACV,8BAAsB,EAC3BW,KAAK,CACJM,IAAAA,eAAG,EACDL,IAAAA,cAAE,EAACZ,8BAAsB,CAACP,MAAM,EAAEsB,KAAKR,EAAE,GACzCK,IAAAA,cAAE,EAACZ,8BAAsB,CAACpB,IAAI,EAAEA,QAGnCiC,KAAK,CAAC;QAET,IAAIG,WAAWF,MAAM,KAAK,GAAG;YAC3B,MAAM,IAAIvC,sBAAsB;QAClC;QAEA,MAAM2C,mBAAmBF,UAAU,CAAC,EAAE;QAEtC,4BAA4B;QAC5B,IAAI,IAAIpB,SAASsB,iBAAiBvB,SAAS,EAAE;YAC3C,wBAAwB;YACxB,MAAMG,MAAE,CACLqB,MAAM,CAACnB,8BAAsB,EAC7BW,KAAK,CAACC,IAAAA,cAAE,EAACZ,8BAAsB,CAACO,EAAE,EAAEW,iBAAiBX,EAAE;YAE1D,MAAM,IAAIhC,sBAAsB;QAClC;QAEA,4CAA4C;QAC5C,IAAI2C,iBAAiBhB,YAAY,IAAI5B,6BAA6BU,YAAY,EAAE;YAC9E,sBAAsB;YACtB,MAAMc,MAAE,CACLqB,MAAM,CAACnB,8BAAsB,EAC7BW,KAAK,CAACC,IAAAA,cAAE,EAACZ,8BAAsB,CAACO,EAAE,EAAEW,iBAAiBX,EAAE;YAE1D,MAAM,IAAIhC,sBAAsB;QAClC;QAEA,4DAA4D;QAC5D,MAAMuB,MAAE,CAACsB,WAAW,CAAC,OAAOC;YAC1B,kCAAkC;YAClC,MAAMA,GACHC,MAAM,CAACd,aAAK,EACZe,GAAG,CAAC;gBAAEd,iBAAiB;YAAK,GAC5BE,KAAK,CAACC,IAAAA,cAAE,EAACJ,aAAK,CAACD,EAAE,EAAEQ,KAAKR,EAAE;YAE7B,+BAA+B;YAC/B,MAAMc,GACHF,MAAM,CAACnB,8BAAsB,EAC7BW,KAAK,CAACC,IAAAA,cAAE,EAACZ,8BAAsB,CAACO,EAAE,EAAEW,iBAAiBX,EAAE;QAC5D;QAEA,OAAO;IACT;IAEA;;;GAGC,GACD,MAAMiB,kBAAkBpB,KAAa,EAAExB,IAAY,EAAiB;QAClE,qBAAqB;QACrB,MAAMyB,aAAa,MAAMP,MAAE,CACxBQ,MAAM,CAAC;YAAEC,IAAIC,aAAK,CAACD,EAAE;QAAC,GACtBG,IAAI,CAACF,aAAK,EACVG,KAAK,CAACC,IAAAA,cAAE,EAACJ,aAAK,CAACJ,KAAK,EAAEA,QACtBS,KAAK,CAAC;QAET,IAAIR,WAAWS,MAAM,KAAK,GAAG;YAC3B,QAAQ,uCAAuC;QACjD;QAEA,MAAMC,OAAOV,UAAU,CAAC,EAAE;QAE1B,2CAA2C;QAC3C,MAAMW,aAAa,MAAMlB,MAAE,CACxBQ,MAAM,CAAC;YAAEC,IAAIP,8BAAsB,CAACO,EAAE;YAAEL,cAAcF,8BAAsB,CAACE,YAAY;QAAC,GAC1FQ,IAAI,CAACV,8BAAsB,EAC3BW,KAAK,CACJM,IAAAA,eAAG,EACDL,IAAAA,cAAE,EAACZ,8BAAsB,CAACP,MAAM,EAAEsB,KAAKR,EAAE,GACzCK,IAAAA,cAAE,EAACZ,8BAAsB,CAACpB,IAAI,EAAEA,QAGnCiC,KAAK,CAAC;QAET,IAAIG,WAAWF,MAAM,GAAG,GAAG;YACzB,MAAMI,mBAAmBF,UAAU,CAAC,EAAE;YACtC,MAAMlB,MAAE,CACLwB,MAAM,CAACtB,8BAAsB,EAC7BuB,GAAG,CAAC;gBAAErB,cAAcgB,iBAAiBhB,YAAY,GAAG;YAAE,GACtDS,KAAK,CAACC,IAAAA,cAAE,EAACZ,8BAAsB,CAACO,EAAE,EAAEW,iBAAiBX,EAAE;QAC5D;IACF;IAEA;;;GAGC,GACD,MAAMkB,sBAAuC;QAC3C,MAAM5B,MAAM,IAAID;QAEhB,gCAAgC;QAChC,MAAM8B,eAAe,MAAM5B,MAAE,CAC1BQ,MAAM,CAAC;YAAEC,IAAIP,8BAAsB,CAACO,EAAE;QAAC,GACvCG,IAAI,CAACV,8BAAsB,EAC3BW,KAAK,CAACgB,IAAAA,cAAE,EAAC3B,8BAAsB,CAACL,SAAS,EAAEE;QAE9C,MAAM+B,QAAQF,aAAaZ,MAAM;QAEjC,gCAAgC;QAChC,IAAIc,QAAQ,GAAG;YACb,MAAM9B,MAAE,CACLqB,MAAM,CAACnB,8BAAsB,EAC7BW,KAAK,CAACgB,IAAAA,cAAE,EAAC3B,8BAAsB,CAACL,SAAS,EAAEE;QAChD;QAEA,OAAO+B;IACT;IAEA;;;GAGC,GACD,MAAMlC,gBAAgBD,MAAc,EAAiB;QACnD,MAAMK,MAAE,CACLqB,MAAM,CAACnB,8BAAsB,EAC7BW,KAAK,CAACC,IAAAA,cAAE,EAACZ,8BAAsB,CAACP,MAAM,EAAEA;IAC7C;IAEA;;GAEC,GACD,MAAMoC,kBAAkBpC,MAAc,EAAyC;QAC7E,MAAMI,MAAM,IAAID;QAChB,MAAMkC,SAAS,MAAMhC,MAAE,CACpBQ,MAAM,GACNI,IAAI,CAACV,8BAAsB,EAC3BW,KAAK,CACJM,IAAAA,eAAG,EACDL,IAAAA,cAAE,EAACZ,8BAAsB,CAACP,MAAM,EAAEA,SAClCsC,IAAAA,cAAE,EAAC/B,8BAAsB,CAACL,SAAS,EAAEE,KAAK,cAAc;WAG3DgB,KAAK,CAAC;QAET,OAAOiB,OAAOhB,MAAM,GAAG,IAAIgB,MAAM,CAAC,EAAE,GAAG;IACzC;IAEA;;GAEC,GACD,MAAME,cAAcvC,MAAc,EAAoB;QACpD,MAAMb,OAAO,MAAM,IAAI,CAACiD,iBAAiB,CAACpC;QAC1C,OAAOb,SAAS;IAClB;IAEA;;GAEC,GACD,MAAMqD,eAIH;QACD,MAAMpC,MAAM,IAAID;QAEhB,qBAAqB;QACrB,MAAMsC,eAAe,MAAMpC,MAAE,CAC1BQ,MAAM,CAAC;YAAEC,IAAIP,8BAAsB,CAACO,EAAE;QAAC,GACvCG,IAAI,CAACV,8BAAsB,EAC3BW,KAAK,CAACoB,IAAAA,cAAE,EAAC/B,8BAAsB,CAACL,SAAS,EAAEE;QAE9C,sBAAsB;QACtB,MAAMsC,gBAAgB,MAAMrC,MAAE,CAC3BQ,MAAM,CAAC;YAAEC,IAAIP,8BAAsB,CAACO,EAAE;QAAC,GACvCG,IAAI,CAACV,8BAAsB,EAC3BW,KAAK,CAACgB,IAAAA,cAAE,EAAC3B,8BAAsB,CAACL,SAAS,EAAEE;QAE9C,6CAA6C;QAC7C,MAAMuC,oBAAoB,MAAMtC,MAAE,CAC/BQ,MAAM,CAAC;YAAEC,IAAIP,8BAAsB,CAACO,EAAE;QAAC,GACvCG,IAAI,CAACV,8BAAsB,EAC3BW,KAAK,CACJM,IAAAA,eAAG,EACDc,IAAAA,cAAE,EAAC/B,8BAAsB,CAACL,SAAS,EAAEE,MACrCe,IAAAA,cAAE,EAACZ,8BAAsB,CAACE,YAAY,EAAE,GAAG,wBAAwB;;QAIzE,OAAO;YACLmC,aAAaH,aAAapB,MAAM;YAChCwB,cAAcH,cAAcrB,MAAM;YAClCyB,kBAAkBH,kBAAkBtB,MAAM;QAC5C;IACF;AACF;AAGO,MAAMrC,+BAA+B,IAAIH"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "04e2025f94e83738a5df64cb5983fbab5b72cdcf"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1vv3foqs4s = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1vv3foqs4s();
cov_1vv3foqs4s().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_1vv3foqs4s().f[0]++;
  cov_1vv3foqs4s().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_1vv3foqs4s().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_1vv3foqs4s().s[3]++;
_export(exports, {
  get EmailVerificationCodeService() {
    /* istanbul ignore next */
    cov_1vv3foqs4s().f[1]++;
    cov_1vv3foqs4s().s[4]++;
    return EmailVerificationCodeService;
  },
  get VerificationCodeError() {
    /* istanbul ignore next */
    cov_1vv3foqs4s().f[2]++;
    cov_1vv3foqs4s().s[5]++;
    return VerificationCodeError;
  },
  get VerificationError() {
    /* istanbul ignore next */
    cov_1vv3foqs4s().f[3]++;
    cov_1vv3foqs4s().s[6]++;
    return VerificationError;
  },
  get emailVerificationCodeService() {
    /* istanbul ignore next */
    cov_1vv3foqs4s().f[4]++;
    cov_1vv3foqs4s().s[7]++;
    return emailVerificationCodeService;
  }
});
/* istanbul ignore next */
cov_1vv3foqs4s().s[8]++;
require("server-only");
const _db =
/* istanbul ignore next */
(cov_1vv3foqs4s().s[9]++, require("../db"));
const _schema =
/* istanbul ignore next */
(cov_1vv3foqs4s().s[10]++, require("../db/schema"));
const _drizzleorm =
/* istanbul ignore next */
(cov_1vv3foqs4s().s[11]++, require("drizzle-orm"));
const _crypto =
/* istanbul ignore next */
(cov_1vv3foqs4s().s[12]++, require("crypto"));
var VerificationError =
/* istanbul ignore next */
(/*#__PURE__*/cov_1vv3foqs4s().s[13]++, function (VerificationError) {
  /* istanbul ignore next */
  cov_1vv3foqs4s().f[5]++;
  cov_1vv3foqs4s().s[14]++;
  VerificationError["CODE_EXPIRED"] = "CODE_EXPIRED";
  /* istanbul ignore next */
  cov_1vv3foqs4s().s[15]++;
  VerificationError["CODE_INVALID"] = "CODE_INVALID";
  /* istanbul ignore next */
  cov_1vv3foqs4s().s[16]++;
  VerificationError["TOO_MANY_ATTEMPTS"] = "TOO_MANY_ATTEMPTS";
  /* istanbul ignore next */
  cov_1vv3foqs4s().s[17]++;
  VerificationError["USER_NOT_FOUND"] = "USER_NOT_FOUND";
  /* istanbul ignore next */
  cov_1vv3foqs4s().s[18]++;
  VerificationError["ALREADY_VERIFIED"] = "ALREADY_VERIFIED";
  /* istanbul ignore next */
  cov_1vv3foqs4s().s[19]++;
  return VerificationError;
}({}));
class VerificationCodeError extends Error {
  constructor(message, code) {
    /* istanbul ignore next */
    cov_1vv3foqs4s().f[6]++;
    cov_1vv3foqs4s().s[20]++;
    super(message), this.code = code;
    /* istanbul ignore next */
    cov_1vv3foqs4s().s[21]++;
    this.name = 'VerificationCodeError';
  }
}
class EmailVerificationCodeService {
  static {
    /* istanbul ignore next */
    cov_1vv3foqs4s().s[22]++;
    this.CODE_LENGTH = 6;
  }
  static {
    /* istanbul ignore next */
    cov_1vv3foqs4s().s[23]++;
    this.EXPIRY_MINUTES = 10;
  }
  static {
    /* istanbul ignore next */
    cov_1vv3foqs4s().s[24]++;
    this.MAX_ATTEMPTS = 5;
  }
  /**
  * Generate a cryptographically secure 6-digit verification code
  */
  generateSecureCode() {
    /* istanbul ignore next */
    cov_1vv3foqs4s().f[7]++;
    // Generate random bytes and convert to 6-digit number
    const buffer =
    /* istanbul ignore next */
    (cov_1vv3foqs4s().s[25]++, (0, _crypto.randomBytes)(4));
    const randomNumber =
    /* istanbul ignore next */
    (cov_1vv3foqs4s().s[26]++, buffer.readUInt32BE(0));
    // Ensure it's always 6 digits by using modulo and padding
    const code =
    /* istanbul ignore next */
    (cov_1vv3foqs4s().s[27]++, (randomNumber % 1000000).toString().padStart(6, '0'));
    /* istanbul ignore next */
    cov_1vv3foqs4s().s[28]++;
    return code;
  }
  /**
  * Generate and store a new verification code for a user
  * Invalidates any existing codes for the user
  */
  async generateCode(userId) {
    /* istanbul ignore next */
    cov_1vv3foqs4s().f[8]++;
    cov_1vv3foqs4s().s[29]++;
    // First, delete any existing codes for this user
    await this.deleteUserCodes(userId);
    // Generate new code
    const code =
    /* istanbul ignore next */
    (cov_1vv3foqs4s().s[30]++, this.generateSecureCode());
    const expiresAt =
    /* istanbul ignore next */
    (cov_1vv3foqs4s().s[31]++, new Date(Date.now() + EmailVerificationCodeService.EXPIRY_MINUTES * 60 * 1000));
    // Store in database
    /* istanbul ignore next */
    cov_1vv3foqs4s().s[32]++;
    await _db.db.insert(_schema.emailVerificationCodes).values({
      userId,
      code,
      expiresAt,
      attemptsUsed: 0
    });
    /* istanbul ignore next */
    cov_1vv3foqs4s().s[33]++;
    return code;
  }
  /**
  * Validate a verification code for a user
  * Returns true if valid, throws VerificationCodeError if invalid
  */
  async validateCode(email, code) {
    /* istanbul ignore next */
    cov_1vv3foqs4s().f[9]++;
    // Find user by email
    const userResult =
    /* istanbul ignore next */
    (cov_1vv3foqs4s().s[34]++, await _db.db.select({
      id: _schema.users.id,
      isEmailVerified: _schema.users.isEmailVerified
    }).from(_schema.users).where((0, _drizzleorm.eq)(_schema.users.email, email)).limit(1));
    /* istanbul ignore next */
    cov_1vv3foqs4s().s[35]++;
    if (userResult.length === 0) {
      /* istanbul ignore next */
      cov_1vv3foqs4s().b[0][0]++;
      cov_1vv3foqs4s().s[36]++;
      throw new VerificationCodeError('User not found', "USER_NOT_FOUND");
    } else
    /* istanbul ignore next */
    {
      cov_1vv3foqs4s().b[0][1]++;
    }
    const user =
    /* istanbul ignore next */
    (cov_1vv3foqs4s().s[37]++, userResult[0]);
    // Check if user is already verified
    /* istanbul ignore next */
    cov_1vv3foqs4s().s[38]++;
    if (user.isEmailVerified) {
      /* istanbul ignore next */
      cov_1vv3foqs4s().b[1][0]++;
      cov_1vv3foqs4s().s[39]++;
      throw new VerificationCodeError('Email already verified', "ALREADY_VERIFIED");
    } else
    /* istanbul ignore next */
    {
      cov_1vv3foqs4s().b[1][1]++;
    }
    // Find the verification code
    const codeResult =
    /* istanbul ignore next */
    (cov_1vv3foqs4s().s[40]++, await _db.db.select().from(_schema.emailVerificationCodes).where((0, _drizzleorm.and)((0, _drizzleorm.eq)(_schema.emailVerificationCodes.userId, user.id), (0, _drizzleorm.eq)(_schema.emailVerificationCodes.code, code))).limit(1));
    /* istanbul ignore next */
    cov_1vv3foqs4s().s[41]++;
    if (codeResult.length === 0) {
      /* istanbul ignore next */
      cov_1vv3foqs4s().b[2][0]++;
      cov_1vv3foqs4s().s[42]++;
      throw new VerificationCodeError('Invalid verification code', "CODE_INVALID");
    } else
    /* istanbul ignore next */
    {
      cov_1vv3foqs4s().b[2][1]++;
    }
    const verificationCode =
    /* istanbul ignore next */
    (cov_1vv3foqs4s().s[43]++, codeResult[0]);
    // Check if code has expired
    /* istanbul ignore next */
    cov_1vv3foqs4s().s[44]++;
    if (new Date() > verificationCode.expiresAt) {
      /* istanbul ignore next */
      cov_1vv3foqs4s().b[3][0]++;
      cov_1vv3foqs4s().s[45]++;
      // Clean up expired code
      await _db.db.delete(_schema.emailVerificationCodes).where((0, _drizzleorm.eq)(_schema.emailVerificationCodes.id, verificationCode.id));
      /* istanbul ignore next */
      cov_1vv3foqs4s().s[46]++;
      throw new VerificationCodeError('Verification code has expired', "CODE_EXPIRED");
    } else
    /* istanbul ignore next */
    {
      cov_1vv3foqs4s().b[3][1]++;
    }
    // Check if too many attempts have been made
    cov_1vv3foqs4s().s[47]++;
    if (verificationCode.attemptsUsed >= EmailVerificationCodeService.MAX_ATTEMPTS) {
      /* istanbul ignore next */
      cov_1vv3foqs4s().b[4][0]++;
      cov_1vv3foqs4s().s[48]++;
      // Invalidate the code
      await _db.db.delete(_schema.emailVerificationCodes).where((0, _drizzleorm.eq)(_schema.emailVerificationCodes.id, verificationCode.id));
      /* istanbul ignore next */
      cov_1vv3foqs4s().s[49]++;
      throw new VerificationCodeError('Too many verification attempts', "TOO_MANY_ATTEMPTS");
    } else
    /* istanbul ignore next */
    {
      cov_1vv3foqs4s().b[4][1]++;
    }
    // Code is valid - mark user as verified and delete the code
    cov_1vv3foqs4s().s[50]++;
    await _db.db.transaction(async tx => {
      /* istanbul ignore next */
      cov_1vv3foqs4s().f[10]++;
      cov_1vv3foqs4s().s[51]++;
      // Update user verification status
      await tx.update(_schema.users).set({
        isEmailVerified: true
      }).where((0, _drizzleorm.eq)(_schema.users.id, user.id));
      // Delete the verification code
      /* istanbul ignore next */
      cov_1vv3foqs4s().s[52]++;
      await tx.delete(_schema.emailVerificationCodes).where((0, _drizzleorm.eq)(_schema.emailVerificationCodes.id, verificationCode.id));
    });
    /* istanbul ignore next */
    cov_1vv3foqs4s().s[53]++;
    return true;
  }
  /**
  * Increment the attempt count for a verification code
  * Used when validation fails but we want to track attempts
  */
  async incrementAttempts(email, code) {
    /* istanbul ignore next */
    cov_1vv3foqs4s().f[11]++;
    // Find user by email
    const userResult =
    /* istanbul ignore next */
    (cov_1vv3foqs4s().s[54]++, await _db.db.select({
      id: _schema.users.id
    }).from(_schema.users).where((0, _drizzleorm.eq)(_schema.users.email, email)).limit(1));
    /* istanbul ignore next */
    cov_1vv3foqs4s().s[55]++;
    if (userResult.length === 0) {
      /* istanbul ignore next */
      cov_1vv3foqs4s().b[5][0]++;
      cov_1vv3foqs4s().s[56]++;
      return; // User not found, nothing to increment
    } else
    /* istanbul ignore next */
    {
      cov_1vv3foqs4s().b[5][1]++;
    }
    const user =
    /* istanbul ignore next */
    (cov_1vv3foqs4s().s[57]++, userResult[0]);
    // Find and increment attempts for the code
    const codeResult =
    /* istanbul ignore next */
    (cov_1vv3foqs4s().s[58]++, await _db.db.select({
      id: _schema.emailVerificationCodes.id,
      attemptsUsed: _schema.emailVerificationCodes.attemptsUsed
    }).from(_schema.emailVerificationCodes).where((0, _drizzleorm.and)((0, _drizzleorm.eq)(_schema.emailVerificationCodes.userId, user.id), (0, _drizzleorm.eq)(_schema.emailVerificationCodes.code, code))).limit(1));
    /* istanbul ignore next */
    cov_1vv3foqs4s().s[59]++;
    if (codeResult.length > 0) {
      /* istanbul ignore next */
      cov_1vv3foqs4s().b[6][0]++;
      const verificationCode =
      /* istanbul ignore next */
      (cov_1vv3foqs4s().s[60]++, codeResult[0]);
      /* istanbul ignore next */
      cov_1vv3foqs4s().s[61]++;
      await _db.db.update(_schema.emailVerificationCodes).set({
        attemptsUsed: verificationCode.attemptsUsed + 1
      }).where((0, _drizzleorm.eq)(_schema.emailVerificationCodes.id, verificationCode.id));
    } else
    /* istanbul ignore next */
    {
      cov_1vv3foqs4s().b[6][1]++;
    }
  }
  /**
  * Clean up expired verification codes
  * Should be called periodically by a cleanup job
  */
  async cleanupExpiredCodes() {
    /* istanbul ignore next */
    cov_1vv3foqs4s().f[12]++;
    const now =
    /* istanbul ignore next */
    (cov_1vv3foqs4s().s[62]++, new Date());
    // First count the expired codes
    const expiredCodes =
    /* istanbul ignore next */
    (cov_1vv3foqs4s().s[63]++, await _db.db.select({
      id: _schema.emailVerificationCodes.id
    }).from(_schema.emailVerificationCodes).where((0, _drizzleorm.lt)(_schema.emailVerificationCodes.expiresAt, now)));
    const count =
    /* istanbul ignore next */
    (cov_1vv3foqs4s().s[64]++, expiredCodes.length);
    // Then delete them if any exist
    /* istanbul ignore next */
    cov_1vv3foqs4s().s[65]++;
    if (count > 0) {
      /* istanbul ignore next */
      cov_1vv3foqs4s().b[7][0]++;
      cov_1vv3foqs4s().s[66]++;
      await _db.db.delete(_schema.emailVerificationCodes).where((0, _drizzleorm.lt)(_schema.emailVerificationCodes.expiresAt, now));
    } else
    /* istanbul ignore next */
    {
      cov_1vv3foqs4s().b[7][1]++;
    }
    cov_1vv3foqs4s().s[67]++;
    return count;
  }
  /**
  * Delete all verification codes for a specific user
  * Used when generating new codes or when user is deleted
  */
  async deleteUserCodes(userId) {
    /* istanbul ignore next */
    cov_1vv3foqs4s().f[13]++;
    cov_1vv3foqs4s().s[68]++;
    await _db.db.delete(_schema.emailVerificationCodes).where((0, _drizzleorm.eq)(_schema.emailVerificationCodes.userId, userId));
  }
  /**
  * Get active verification code for a user (for testing/debugging)
  */
  async getUserActiveCode(userId) {
    /* istanbul ignore next */
    cov_1vv3foqs4s().f[14]++;
    const now =
    /* istanbul ignore next */
    (cov_1vv3foqs4s().s[69]++, new Date());
    const result =
    /* istanbul ignore next */
    (cov_1vv3foqs4s().s[70]++, await _db.db.select().from(_schema.emailVerificationCodes).where((0, _drizzleorm.and)((0, _drizzleorm.eq)(_schema.emailVerificationCodes.userId, userId), (0, _drizzleorm.gt)(_schema.emailVerificationCodes.expiresAt, now) // Not expired
    )).limit(1));
    /* istanbul ignore next */
    cov_1vv3foqs4s().s[71]++;
    return result.length > 0 ?
    /* istanbul ignore next */
    (cov_1vv3foqs4s().b[8][0]++, result[0]) :
    /* istanbul ignore next */
    (cov_1vv3foqs4s().b[8][1]++, null);
  }
  /**
  * Check if a user has any active verification codes
  */
  async hasActiveCode(userId) {
    /* istanbul ignore next */
    cov_1vv3foqs4s().f[15]++;
    const code =
    /* istanbul ignore next */
    (cov_1vv3foqs4s().s[72]++, await this.getUserActiveCode(userId));
    /* istanbul ignore next */
    cov_1vv3foqs4s().s[73]++;
    return code !== null;
  }
  /**
  * Get verification code statistics for monitoring
  */
  async getCodeStats() {
    /* istanbul ignore next */
    cov_1vv3foqs4s().f[16]++;
    const now =
    /* istanbul ignore next */
    (cov_1vv3foqs4s().s[74]++, new Date());
    // Count active codes
    const activeResult =
    /* istanbul ignore next */
    (cov_1vv3foqs4s().s[75]++, await _db.db.select({
      id: _schema.emailVerificationCodes.id
    }).from(_schema.emailVerificationCodes).where((0, _drizzleorm.gt)(_schema.emailVerificationCodes.expiresAt, now)));
    // Count expired codes
    const expiredResult =
    /* istanbul ignore next */
    (cov_1vv3foqs4s().s[76]++, await _db.db.select({
      id: _schema.emailVerificationCodes.id
    }).from(_schema.emailVerificationCodes).where((0, _drizzleorm.lt)(_schema.emailVerificationCodes.expiresAt, now)));
    // Count codes with high attempts (4 or more)
    const highAttemptResult =
    /* istanbul ignore next */
    (cov_1vv3foqs4s().s[77]++, await _db.db.select({
      id: _schema.emailVerificationCodes.id
    }).from(_schema.emailVerificationCodes).where((0, _drizzleorm.and)((0, _drizzleorm.gt)(_schema.emailVerificationCodes.expiresAt, now), (0, _drizzleorm.eq)(_schema.emailVerificationCodes.attemptsUsed, 4) // Close to max attempts
    )));
    /* istanbul ignore next */
    cov_1vv3foqs4s().s[78]++;
    return {
      totalActive: activeResult.length,
      expiredCount: expiredResult.length,
      highAttemptCount: highAttemptResult.length
    };
  }
}
const emailVerificationCodeService =
/* istanbul ignore next */
(cov_1vv3foqs4s().s[79]++, new EmailVerificationCodeService());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJFbWFpbFZlcmlmaWNhdGlvbkNvZGVTZXJ2aWNlIiwiY292XzF2djNmb3FzNHMiLCJmIiwicyIsIlZlcmlmaWNhdGlvbkNvZGVFcnJvciIsIlZlcmlmaWNhdGlvbkVycm9yIiwiZW1haWxWZXJpZmljYXRpb25Db2RlU2VydmljZSIsIkVycm9yIiwiY29uc3RydWN0b3IiLCJtZXNzYWdlIiwiY29kZSIsIm5hbWUiLCJDT0RFX0xFTkdUSCIsIkVYUElSWV9NSU5VVEVTIiwiTUFYX0FUVEVNUFRTIiwiZ2VuZXJhdGVTZWN1cmVDb2RlIiwiYnVmZmVyIiwiX2NyeXB0byIsInJhbmRvbUJ5dGVzIiwicmFuZG9tTnVtYmVyIiwicmVhZFVJbnQzMkJFIiwidG9TdHJpbmciLCJwYWRTdGFydCIsImdlbmVyYXRlQ29kZSIsInVzZXJJZCIsImRlbGV0ZVVzZXJDb2RlcyIsImV4cGlyZXNBdCIsIkRhdGUiLCJub3ciLCJfZGIiLCJkYiIsImluc2VydCIsIl9zY2hlbWEiLCJlbWFpbFZlcmlmaWNhdGlvbkNvZGVzIiwidmFsdWVzIiwiYXR0ZW1wdHNVc2VkIiwidmFsaWRhdGVDb2RlIiwiZW1haWwiLCJ1c2VyUmVzdWx0Iiwic2VsZWN0IiwiaWQiLCJ1c2VycyIsImlzRW1haWxWZXJpZmllZCIsImZyb20iLCJ3aGVyZSIsIl9kcml6emxlb3JtIiwiZXEiLCJsaW1pdCIsImxlbmd0aCIsImIiLCJ1c2VyIiwiY29kZVJlc3VsdCIsImFuZCIsInZlcmlmaWNhdGlvbkNvZGUiLCJkZWxldGUiLCJ0cmFuc2FjdGlvbiIsInR4IiwidXBkYXRlIiwic2V0IiwiaW5jcmVtZW50QXR0ZW1wdHMiLCJjbGVhbnVwRXhwaXJlZENvZGVzIiwiZXhwaXJlZENvZGVzIiwibHQiLCJjb3VudCIsImdldFVzZXJBY3RpdmVDb2RlIiwicmVzdWx0IiwiZ3QiLCJoYXNBY3RpdmVDb2RlIiwiZ2V0Q29kZVN0YXRzIiwiYWN0aXZlUmVzdWx0IiwiZXhwaXJlZFJlc3VsdCIsImhpZ2hBdHRlbXB0UmVzdWx0IiwidG90YWxBY3RpdmUiLCJleHBpcmVkQ291bnQiLCJoaWdoQXR0ZW1wdENvdW50Il0sInNvdXJjZXMiOlsiL1VzZXJzL3N0ZWZhbmJla2tlci9wcm9qZWN0cy9mYW5jeS1wbGFudGllcy9zcmMvbGliL3NlcnZpY2VzL2VtYWlsLXZlcmlmaWNhdGlvbi1jb2RlLXNlcnZpY2UudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICdzZXJ2ZXItb25seSc7XG5pbXBvcnQgeyBkYiB9IGZyb20gJ0AvbGliL2RiJztcbmltcG9ydCB7IGVtYWlsVmVyaWZpY2F0aW9uQ29kZXMsIHVzZXJzIH0gZnJvbSAnQC9saWIvZGIvc2NoZW1hJztcbmltcG9ydCB7IGVxLCBhbmQsIGx0LCBndCB9IGZyb20gJ2RyaXp6bGUtb3JtJztcbmltcG9ydCB7IHJhbmRvbUJ5dGVzIH0gZnJvbSAnY3J5cHRvJztcblxuZXhwb3J0IGludGVyZmFjZSBFbWFpbFZlcmlmaWNhdGlvbkNvZGUge1xuICBpZDogbnVtYmVyO1xuICB1c2VySWQ6IG51bWJlcjtcbiAgY29kZTogc3RyaW5nO1xuICBleHBpcmVzQXQ6IERhdGU7XG4gIGNyZWF0ZWRBdDogRGF0ZTtcbiAgYXR0ZW1wdHNVc2VkOiBudW1iZXI7XG59XG5cbmV4cG9ydCBlbnVtIFZlcmlmaWNhdGlvbkVycm9yIHtcbiAgQ09ERV9FWFBJUkVEID0gJ0NPREVfRVhQSVJFRCcsXG4gIENPREVfSU5WQUxJRCA9ICdDT0RFX0lOVkFMSUQnLFxuICBUT09fTUFOWV9BVFRFTVBUUyA9ICdUT09fTUFOWV9BVFRFTVBUUycsXG4gIFVTRVJfTk9UX0ZPVU5EID0gJ1VTRVJfTk9UX0ZPVU5EJyxcbiAgQUxSRUFEWV9WRVJJRklFRCA9ICdBTFJFQURZX1ZFUklGSUVEJ1xufVxuXG5leHBvcnQgY2xhc3MgVmVyaWZpY2F0aW9uQ29kZUVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICBjb25zdHJ1Y3RvcihcbiAgICBtZXNzYWdlOiBzdHJpbmcsXG4gICAgcHVibGljIGNvZGU6IFZlcmlmaWNhdGlvbkVycm9yXG4gICkge1xuICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgIHRoaXMubmFtZSA9ICdWZXJpZmljYXRpb25Db2RlRXJyb3InO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBFbWFpbFZlcmlmaWNhdGlvbkNvZGVTZXJ2aWNlIHtcbiAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgQ09ERV9MRU5HVEggPSA2O1xuICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBFWFBJUllfTUlOVVRFUyA9IDEwO1xuICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBNQVhfQVRURU1QVFMgPSA1O1xuXG4gIC8qKlxuICAgKiBHZW5lcmF0ZSBhIGNyeXB0b2dyYXBoaWNhbGx5IHNlY3VyZSA2LWRpZ2l0IHZlcmlmaWNhdGlvbiBjb2RlXG4gICAqL1xuICBwcml2YXRlIGdlbmVyYXRlU2VjdXJlQ29kZSgpOiBzdHJpbmcge1xuICAgIC8vIEdlbmVyYXRlIHJhbmRvbSBieXRlcyBhbmQgY29udmVydCB0byA2LWRpZ2l0IG51bWJlclxuICAgIGNvbnN0IGJ1ZmZlciA9IHJhbmRvbUJ5dGVzKDQpO1xuICAgIGNvbnN0IHJhbmRvbU51bWJlciA9IGJ1ZmZlci5yZWFkVUludDMyQkUoMCk7XG4gICAgLy8gRW5zdXJlIGl0J3MgYWx3YXlzIDYgZGlnaXRzIGJ5IHVzaW5nIG1vZHVsbyBhbmQgcGFkZGluZ1xuICAgIGNvbnN0IGNvZGUgPSAocmFuZG9tTnVtYmVyICUgMTAwMDAwMCkudG9TdHJpbmcoKS5wYWRTdGFydCg2LCAnMCcpO1xuICAgIHJldHVybiBjb2RlO1xuICB9XG5cbiAgLyoqXG4gICAqIEdlbmVyYXRlIGFuZCBzdG9yZSBhIG5ldyB2ZXJpZmljYXRpb24gY29kZSBmb3IgYSB1c2VyXG4gICAqIEludmFsaWRhdGVzIGFueSBleGlzdGluZyBjb2RlcyBmb3IgdGhlIHVzZXJcbiAgICovXG4gIGFzeW5jIGdlbmVyYXRlQ29kZSh1c2VySWQ6IG51bWJlcik6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgLy8gRmlyc3QsIGRlbGV0ZSBhbnkgZXhpc3RpbmcgY29kZXMgZm9yIHRoaXMgdXNlclxuICAgIGF3YWl0IHRoaXMuZGVsZXRlVXNlckNvZGVzKHVzZXJJZCk7XG5cbiAgICAvLyBHZW5lcmF0ZSBuZXcgY29kZVxuICAgIGNvbnN0IGNvZGUgPSB0aGlzLmdlbmVyYXRlU2VjdXJlQ29kZSgpO1xuICAgIGNvbnN0IGV4cGlyZXNBdCA9IG5ldyBEYXRlKERhdGUubm93KCkgKyBFbWFpbFZlcmlmaWNhdGlvbkNvZGVTZXJ2aWNlLkVYUElSWV9NSU5VVEVTICogNjAgKiAxMDAwKTtcblxuICAgIC8vIFN0b3JlIGluIGRhdGFiYXNlXG4gICAgYXdhaXQgZGIuaW5zZXJ0KGVtYWlsVmVyaWZpY2F0aW9uQ29kZXMpLnZhbHVlcyh7XG4gICAgICB1c2VySWQsXG4gICAgICBjb2RlLFxuICAgICAgZXhwaXJlc0F0LFxuICAgICAgYXR0ZW1wdHNVc2VkOiAwLFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGNvZGU7XG4gIH1cblxuICAvKipcbiAgICogVmFsaWRhdGUgYSB2ZXJpZmljYXRpb24gY29kZSBmb3IgYSB1c2VyXG4gICAqIFJldHVybnMgdHJ1ZSBpZiB2YWxpZCwgdGhyb3dzIFZlcmlmaWNhdGlvbkNvZGVFcnJvciBpZiBpbnZhbGlkXG4gICAqL1xuICBhc3luYyB2YWxpZGF0ZUNvZGUoZW1haWw6IHN0cmluZywgY29kZTogc3RyaW5nKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgLy8gRmluZCB1c2VyIGJ5IGVtYWlsXG4gICAgY29uc3QgdXNlclJlc3VsdCA9IGF3YWl0IGRiXG4gICAgICAuc2VsZWN0KHsgaWQ6IHVzZXJzLmlkLCBpc0VtYWlsVmVyaWZpZWQ6IHVzZXJzLmlzRW1haWxWZXJpZmllZCB9KVxuICAgICAgLmZyb20odXNlcnMpXG4gICAgICAud2hlcmUoZXEodXNlcnMuZW1haWwsIGVtYWlsKSlcbiAgICAgIC5saW1pdCgxKTtcblxuICAgIGlmICh1c2VyUmVzdWx0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhyb3cgbmV3IFZlcmlmaWNhdGlvbkNvZGVFcnJvcignVXNlciBub3QgZm91bmQnLCBWZXJpZmljYXRpb25FcnJvci5VU0VSX05PVF9GT1VORCk7XG4gICAgfVxuXG4gICAgY29uc3QgdXNlciA9IHVzZXJSZXN1bHRbMF07XG5cbiAgICAvLyBDaGVjayBpZiB1c2VyIGlzIGFscmVhZHkgdmVyaWZpZWRcbiAgICBpZiAodXNlci5pc0VtYWlsVmVyaWZpZWQpIHtcbiAgICAgIHRocm93IG5ldyBWZXJpZmljYXRpb25Db2RlRXJyb3IoJ0VtYWlsIGFscmVhZHkgdmVyaWZpZWQnLCBWZXJpZmljYXRpb25FcnJvci5BTFJFQURZX1ZFUklGSUVEKTtcbiAgICB9XG5cbiAgICAvLyBGaW5kIHRoZSB2ZXJpZmljYXRpb24gY29kZVxuICAgIGNvbnN0IGNvZGVSZXN1bHQgPSBhd2FpdCBkYlxuICAgICAgLnNlbGVjdCgpXG4gICAgICAuZnJvbShlbWFpbFZlcmlmaWNhdGlvbkNvZGVzKVxuICAgICAgLndoZXJlKFxuICAgICAgICBhbmQoXG4gICAgICAgICAgZXEoZW1haWxWZXJpZmljYXRpb25Db2Rlcy51c2VySWQsIHVzZXIuaWQpLFxuICAgICAgICAgIGVxKGVtYWlsVmVyaWZpY2F0aW9uQ29kZXMuY29kZSwgY29kZSlcbiAgICAgICAgKVxuICAgICAgKVxuICAgICAgLmxpbWl0KDEpO1xuXG4gICAgaWYgKGNvZGVSZXN1bHQubGVuZ3RoID09PSAwKSB7XG4gICAgICB0aHJvdyBuZXcgVmVyaWZpY2F0aW9uQ29kZUVycm9yKCdJbnZhbGlkIHZlcmlmaWNhdGlvbiBjb2RlJywgVmVyaWZpY2F0aW9uRXJyb3IuQ09ERV9JTlZBTElEKTtcbiAgICB9XG5cbiAgICBjb25zdCB2ZXJpZmljYXRpb25Db2RlID0gY29kZVJlc3VsdFswXTtcblxuICAgIC8vIENoZWNrIGlmIGNvZGUgaGFzIGV4cGlyZWRcbiAgICBpZiAobmV3IERhdGUoKSA+IHZlcmlmaWNhdGlvbkNvZGUuZXhwaXJlc0F0KSB7XG4gICAgICAvLyBDbGVhbiB1cCBleHBpcmVkIGNvZGVcbiAgICAgIGF3YWl0IGRiXG4gICAgICAgIC5kZWxldGUoZW1haWxWZXJpZmljYXRpb25Db2RlcylcbiAgICAgICAgLndoZXJlKGVxKGVtYWlsVmVyaWZpY2F0aW9uQ29kZXMuaWQsIHZlcmlmaWNhdGlvbkNvZGUuaWQpKTtcbiAgICAgIFxuICAgICAgdGhyb3cgbmV3IFZlcmlmaWNhdGlvbkNvZGVFcnJvcignVmVyaWZpY2F0aW9uIGNvZGUgaGFzIGV4cGlyZWQnLCBWZXJpZmljYXRpb25FcnJvci5DT0RFX0VYUElSRUQpO1xuICAgIH1cblxuICAgIC8vIENoZWNrIGlmIHRvbyBtYW55IGF0dGVtcHRzIGhhdmUgYmVlbiBtYWRlXG4gICAgaWYgKHZlcmlmaWNhdGlvbkNvZGUuYXR0ZW1wdHNVc2VkID49IEVtYWlsVmVyaWZpY2F0aW9uQ29kZVNlcnZpY2UuTUFYX0FUVEVNUFRTKSB7XG4gICAgICAvLyBJbnZhbGlkYXRlIHRoZSBjb2RlXG4gICAgICBhd2FpdCBkYlxuICAgICAgICAuZGVsZXRlKGVtYWlsVmVyaWZpY2F0aW9uQ29kZXMpXG4gICAgICAgIC53aGVyZShlcShlbWFpbFZlcmlmaWNhdGlvbkNvZGVzLmlkLCB2ZXJpZmljYXRpb25Db2RlLmlkKSk7XG4gICAgICBcbiAgICAgIHRocm93IG5ldyBWZXJpZmljYXRpb25Db2RlRXJyb3IoJ1RvbyBtYW55IHZlcmlmaWNhdGlvbiBhdHRlbXB0cycsIFZlcmlmaWNhdGlvbkVycm9yLlRPT19NQU5ZX0FUVEVNUFRTKTtcbiAgICB9XG5cbiAgICAvLyBDb2RlIGlzIHZhbGlkIC0gbWFyayB1c2VyIGFzIHZlcmlmaWVkIGFuZCBkZWxldGUgdGhlIGNvZGVcbiAgICBhd2FpdCBkYi50cmFuc2FjdGlvbihhc3luYyAodHgpID0+IHtcbiAgICAgIC8vIFVwZGF0ZSB1c2VyIHZlcmlmaWNhdGlvbiBzdGF0dXNcbiAgICAgIGF3YWl0IHR4XG4gICAgICAgIC51cGRhdGUodXNlcnMpXG4gICAgICAgIC5zZXQoeyBpc0VtYWlsVmVyaWZpZWQ6IHRydWUgfSlcbiAgICAgICAgLndoZXJlKGVxKHVzZXJzLmlkLCB1c2VyLmlkKSk7XG5cbiAgICAgIC8vIERlbGV0ZSB0aGUgdmVyaWZpY2F0aW9uIGNvZGVcbiAgICAgIGF3YWl0IHR4XG4gICAgICAgIC5kZWxldGUoZW1haWxWZXJpZmljYXRpb25Db2RlcylcbiAgICAgICAgLndoZXJlKGVxKGVtYWlsVmVyaWZpY2F0aW9uQ29kZXMuaWQsIHZlcmlmaWNhdGlvbkNvZGUuaWQpKTtcbiAgICB9KTtcblxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIEluY3JlbWVudCB0aGUgYXR0ZW1wdCBjb3VudCBmb3IgYSB2ZXJpZmljYXRpb24gY29kZVxuICAgKiBVc2VkIHdoZW4gdmFsaWRhdGlvbiBmYWlscyBidXQgd2Ugd2FudCB0byB0cmFjayBhdHRlbXB0c1xuICAgKi9cbiAgYXN5bmMgaW5jcmVtZW50QXR0ZW1wdHMoZW1haWw6IHN0cmluZywgY29kZTogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgLy8gRmluZCB1c2VyIGJ5IGVtYWlsXG4gICAgY29uc3QgdXNlclJlc3VsdCA9IGF3YWl0IGRiXG4gICAgICAuc2VsZWN0KHsgaWQ6IHVzZXJzLmlkIH0pXG4gICAgICAuZnJvbSh1c2VycylcbiAgICAgIC53aGVyZShlcSh1c2Vycy5lbWFpbCwgZW1haWwpKVxuICAgICAgLmxpbWl0KDEpO1xuXG4gICAgaWYgKHVzZXJSZXN1bHQubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm47IC8vIFVzZXIgbm90IGZvdW5kLCBub3RoaW5nIHRvIGluY3JlbWVudFxuICAgIH1cblxuICAgIGNvbnN0IHVzZXIgPSB1c2VyUmVzdWx0WzBdO1xuXG4gICAgLy8gRmluZCBhbmQgaW5jcmVtZW50IGF0dGVtcHRzIGZvciB0aGUgY29kZVxuICAgIGNvbnN0IGNvZGVSZXN1bHQgPSBhd2FpdCBkYlxuICAgICAgLnNlbGVjdCh7IGlkOiBlbWFpbFZlcmlmaWNhdGlvbkNvZGVzLmlkLCBhdHRlbXB0c1VzZWQ6IGVtYWlsVmVyaWZpY2F0aW9uQ29kZXMuYXR0ZW1wdHNVc2VkIH0pXG4gICAgICAuZnJvbShlbWFpbFZlcmlmaWNhdGlvbkNvZGVzKVxuICAgICAgLndoZXJlKFxuICAgICAgICBhbmQoXG4gICAgICAgICAgZXEoZW1haWxWZXJpZmljYXRpb25Db2Rlcy51c2VySWQsIHVzZXIuaWQpLFxuICAgICAgICAgIGVxKGVtYWlsVmVyaWZpY2F0aW9uQ29kZXMuY29kZSwgY29kZSlcbiAgICAgICAgKVxuICAgICAgKVxuICAgICAgLmxpbWl0KDEpO1xuXG4gICAgaWYgKGNvZGVSZXN1bHQubGVuZ3RoID4gMCkge1xuICAgICAgY29uc3QgdmVyaWZpY2F0aW9uQ29kZSA9IGNvZGVSZXN1bHRbMF07XG4gICAgICBhd2FpdCBkYlxuICAgICAgICAudXBkYXRlKGVtYWlsVmVyaWZpY2F0aW9uQ29kZXMpXG4gICAgICAgIC5zZXQoeyBhdHRlbXB0c1VzZWQ6IHZlcmlmaWNhdGlvbkNvZGUuYXR0ZW1wdHNVc2VkICsgMSB9KVxuICAgICAgICAud2hlcmUoZXEoZW1haWxWZXJpZmljYXRpb25Db2Rlcy5pZCwgdmVyaWZpY2F0aW9uQ29kZS5pZCkpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDbGVhbiB1cCBleHBpcmVkIHZlcmlmaWNhdGlvbiBjb2Rlc1xuICAgKiBTaG91bGQgYmUgY2FsbGVkIHBlcmlvZGljYWxseSBieSBhIGNsZWFudXAgam9iXG4gICAqL1xuICBhc3luYyBjbGVhbnVwRXhwaXJlZENvZGVzKCk6IFByb21pc2U8bnVtYmVyPiB7XG4gICAgY29uc3Qgbm93ID0gbmV3IERhdGUoKTtcbiAgICBcbiAgICAvLyBGaXJzdCBjb3VudCB0aGUgZXhwaXJlZCBjb2Rlc1xuICAgIGNvbnN0IGV4cGlyZWRDb2RlcyA9IGF3YWl0IGRiXG4gICAgICAuc2VsZWN0KHsgaWQ6IGVtYWlsVmVyaWZpY2F0aW9uQ29kZXMuaWQgfSlcbiAgICAgIC5mcm9tKGVtYWlsVmVyaWZpY2F0aW9uQ29kZXMpXG4gICAgICAud2hlcmUobHQoZW1haWxWZXJpZmljYXRpb25Db2Rlcy5leHBpcmVzQXQsIG5vdykpO1xuXG4gICAgY29uc3QgY291bnQgPSBleHBpcmVkQ29kZXMubGVuZ3RoO1xuXG4gICAgLy8gVGhlbiBkZWxldGUgdGhlbSBpZiBhbnkgZXhpc3RcbiAgICBpZiAoY291bnQgPiAwKSB7XG4gICAgICBhd2FpdCBkYlxuICAgICAgICAuZGVsZXRlKGVtYWlsVmVyaWZpY2F0aW9uQ29kZXMpXG4gICAgICAgIC53aGVyZShsdChlbWFpbFZlcmlmaWNhdGlvbkNvZGVzLmV4cGlyZXNBdCwgbm93KSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvdW50O1xuICB9XG5cbiAgLyoqXG4gICAqIERlbGV0ZSBhbGwgdmVyaWZpY2F0aW9uIGNvZGVzIGZvciBhIHNwZWNpZmljIHVzZXJcbiAgICogVXNlZCB3aGVuIGdlbmVyYXRpbmcgbmV3IGNvZGVzIG9yIHdoZW4gdXNlciBpcyBkZWxldGVkXG4gICAqL1xuICBhc3luYyBkZWxldGVVc2VyQ29kZXModXNlcklkOiBudW1iZXIpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBhd2FpdCBkYlxuICAgICAgLmRlbGV0ZShlbWFpbFZlcmlmaWNhdGlvbkNvZGVzKVxuICAgICAgLndoZXJlKGVxKGVtYWlsVmVyaWZpY2F0aW9uQ29kZXMudXNlcklkLCB1c2VySWQpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgYWN0aXZlIHZlcmlmaWNhdGlvbiBjb2RlIGZvciBhIHVzZXIgKGZvciB0ZXN0aW5nL2RlYnVnZ2luZylcbiAgICovXG4gIGFzeW5jIGdldFVzZXJBY3RpdmVDb2RlKHVzZXJJZDogbnVtYmVyKTogUHJvbWlzZTxFbWFpbFZlcmlmaWNhdGlvbkNvZGUgfCBudWxsPiB7XG4gICAgY29uc3Qgbm93ID0gbmV3IERhdGUoKTtcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBkYlxuICAgICAgLnNlbGVjdCgpXG4gICAgICAuZnJvbShlbWFpbFZlcmlmaWNhdGlvbkNvZGVzKVxuICAgICAgLndoZXJlKFxuICAgICAgICBhbmQoXG4gICAgICAgICAgZXEoZW1haWxWZXJpZmljYXRpb25Db2Rlcy51c2VySWQsIHVzZXJJZCksXG4gICAgICAgICAgZ3QoZW1haWxWZXJpZmljYXRpb25Db2Rlcy5leHBpcmVzQXQsIG5vdykgLy8gTm90IGV4cGlyZWRcbiAgICAgICAgKVxuICAgICAgKVxuICAgICAgLmxpbWl0KDEpO1xuXG4gICAgcmV0dXJuIHJlc3VsdC5sZW5ndGggPiAwID8gcmVzdWx0WzBdIDogbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhIHVzZXIgaGFzIGFueSBhY3RpdmUgdmVyaWZpY2F0aW9uIGNvZGVzXG4gICAqL1xuICBhc3luYyBoYXNBY3RpdmVDb2RlKHVzZXJJZDogbnVtYmVyKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgY29uc3QgY29kZSA9IGF3YWl0IHRoaXMuZ2V0VXNlckFjdGl2ZUNvZGUodXNlcklkKTtcbiAgICByZXR1cm4gY29kZSAhPT0gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdmVyaWZpY2F0aW9uIGNvZGUgc3RhdGlzdGljcyBmb3IgbW9uaXRvcmluZ1xuICAgKi9cbiAgYXN5bmMgZ2V0Q29kZVN0YXRzKCk6IFByb21pc2U8e1xuICAgIHRvdGFsQWN0aXZlOiBudW1iZXI7XG4gICAgZXhwaXJlZENvdW50OiBudW1iZXI7XG4gICAgaGlnaEF0dGVtcHRDb3VudDogbnVtYmVyO1xuICB9PiB7XG4gICAgY29uc3Qgbm93ID0gbmV3IERhdGUoKTtcbiAgICBcbiAgICAvLyBDb3VudCBhY3RpdmUgY29kZXNcbiAgICBjb25zdCBhY3RpdmVSZXN1bHQgPSBhd2FpdCBkYlxuICAgICAgLnNlbGVjdCh7IGlkOiBlbWFpbFZlcmlmaWNhdGlvbkNvZGVzLmlkIH0pXG4gICAgICAuZnJvbShlbWFpbFZlcmlmaWNhdGlvbkNvZGVzKVxuICAgICAgLndoZXJlKGd0KGVtYWlsVmVyaWZpY2F0aW9uQ29kZXMuZXhwaXJlc0F0LCBub3cpKTtcblxuICAgIC8vIENvdW50IGV4cGlyZWQgY29kZXNcbiAgICBjb25zdCBleHBpcmVkUmVzdWx0ID0gYXdhaXQgZGJcbiAgICAgIC5zZWxlY3QoeyBpZDogZW1haWxWZXJpZmljYXRpb25Db2Rlcy5pZCB9KVxuICAgICAgLmZyb20oZW1haWxWZXJpZmljYXRpb25Db2RlcylcbiAgICAgIC53aGVyZShsdChlbWFpbFZlcmlmaWNhdGlvbkNvZGVzLmV4cGlyZXNBdCwgbm93KSk7XG5cbiAgICAvLyBDb3VudCBjb2RlcyB3aXRoIGhpZ2ggYXR0ZW1wdHMgKDQgb3IgbW9yZSlcbiAgICBjb25zdCBoaWdoQXR0ZW1wdFJlc3VsdCA9IGF3YWl0IGRiXG4gICAgICAuc2VsZWN0KHsgaWQ6IGVtYWlsVmVyaWZpY2F0aW9uQ29kZXMuaWQgfSlcbiAgICAgIC5mcm9tKGVtYWlsVmVyaWZpY2F0aW9uQ29kZXMpXG4gICAgICAud2hlcmUoXG4gICAgICAgIGFuZChcbiAgICAgICAgICBndChlbWFpbFZlcmlmaWNhdGlvbkNvZGVzLmV4cGlyZXNBdCwgbm93KSxcbiAgICAgICAgICBlcShlbWFpbFZlcmlmaWNhdGlvbkNvZGVzLmF0dGVtcHRzVXNlZCwgNCkgLy8gQ2xvc2UgdG8gbWF4IGF0dGVtcHRzXG4gICAgICAgIClcbiAgICAgICk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgdG90YWxBY3RpdmU6IGFjdGl2ZVJlc3VsdC5sZW5ndGgsXG4gICAgICBleHBpcmVkQ291bnQ6IGV4cGlyZWRSZXN1bHQubGVuZ3RoLFxuICAgICAgaGlnaEF0dGVtcHRDb3VudDogaGlnaEF0dGVtcHRSZXN1bHQubGVuZ3RoLFxuICAgIH07XG4gIH1cbn1cblxuLy8gRXhwb3J0IHNpbmdsZXRvbiBpbnN0YW5jZVxuZXhwb3J0IGNvbnN0IGVtYWlsVmVyaWZpY2F0aW9uQ29kZVNlcnZpY2UgPSBuZXcgRW1haWxWZXJpZmljYXRpb25Db2RlU2VydmljZSgpOyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O01BaUNhQSw2QkFBQTtJQUFBO0lBQUFDLGNBQUEsR0FBQUMsQ0FBQTtJQUFBRCxjQUFBLEdBQUFFLENBQUE7V0FBQUgsNEJBQUE7O01BVkFJLHNCQUFBO0lBQUE7SUFBQUgsY0FBQSxHQUFBQyxDQUFBO0lBQUFELGNBQUEsR0FBQUUsQ0FBQTtXQUFB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