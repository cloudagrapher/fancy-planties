894ea4f9c90e957fa98d831efed0175e
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get EmailVerificationCodeService () {
        return EmailVerificationCodeService;
    },
    get VerificationCodeError () {
        return VerificationCodeError;
    },
    get VerificationError () {
        return VerificationError;
    },
    get emailVerificationCodeService () {
        return emailVerificationCodeService;
    }
});
require("server-only");
const _db = require("../db");
const _schema = require("../db/schema");
const _drizzleorm = require("drizzle-orm");
const _crypto = require("crypto");
var VerificationError = /*#__PURE__*/ function(VerificationError) {
    VerificationError["CODE_EXPIRED"] = "CODE_EXPIRED";
    VerificationError["CODE_INVALID"] = "CODE_INVALID";
    VerificationError["TOO_MANY_ATTEMPTS"] = "TOO_MANY_ATTEMPTS";
    VerificationError["USER_NOT_FOUND"] = "USER_NOT_FOUND";
    VerificationError["ALREADY_VERIFIED"] = "ALREADY_VERIFIED";
    return VerificationError;
}({});
class VerificationCodeError extends Error {
    constructor(message, code){
        super(message), this.code = code;
        this.name = 'VerificationCodeError';
    }
}
class EmailVerificationCodeService {
    static{
        this.CODE_LENGTH = 6;
    }
    static{
        this.EXPIRY_MINUTES = 10;
    }
    static{
        this.MAX_ATTEMPTS = 5;
    }
    /**
   * Generate a cryptographically secure 6-digit verification code
   */ generateSecureCode() {
        // Generate random bytes and convert to 6-digit number
        const buffer = (0, _crypto.randomBytes)(4);
        const randomNumber = buffer.readUInt32BE(0);
        // Ensure it's always 6 digits by using modulo and padding
        const code = (randomNumber % 1000000).toString().padStart(6, '0');
        return code;
    }
    /**
   * Generate and store a new verification code for a user
   * Invalidates any existing codes for the user
   */ async generateCode(userId) {
        // First, delete any existing codes for this user
        await this.deleteUserCodes(userId);
        // Generate new code
        const code = this.generateSecureCode();
        const expiresAt = new Date(Date.now() + EmailVerificationCodeService.EXPIRY_MINUTES * 60 * 1000);
        // Store in database
        await _db.db.insert(_schema.emailVerificationCodes).values({
            userId,
            code,
            expiresAt,
            attemptsUsed: 0
        });
        return code;
    }
    /**
   * Validate a verification code for a user
   * Returns true if valid, throws VerificationCodeError if invalid
   */ async validateCode(email, code) {
        // Find user by email
        const userResult = await _db.db.select({
            id: _schema.users.id,
            isEmailVerified: _schema.users.isEmailVerified
        }).from(_schema.users).where((0, _drizzleorm.eq)(_schema.users.email, email)).limit(1);
        if (userResult.length === 0) {
            throw new VerificationCodeError('User not found', "USER_NOT_FOUND");
        }
        const user = userResult[0];
        // Check if user is already verified
        if (user.isEmailVerified) {
            throw new VerificationCodeError('Email already verified', "ALREADY_VERIFIED");
        }
        // Find the verification code
        const codeResult = await _db.db.select().from(_schema.emailVerificationCodes).where((0, _drizzleorm.and)((0, _drizzleorm.eq)(_schema.emailVerificationCodes.userId, user.id), (0, _drizzleorm.eq)(_schema.emailVerificationCodes.code, code))).limit(1);
        if (codeResult.length === 0) {
            throw new VerificationCodeError('Invalid verification code', "CODE_INVALID");
        }
        const verificationCode = codeResult[0];
        // Check if code has expired
        if (new Date() > verificationCode.expiresAt) {
            // Clean up expired code
            await _db.db.delete(_schema.emailVerificationCodes).where((0, _drizzleorm.eq)(_schema.emailVerificationCodes.id, verificationCode.id));
            throw new VerificationCodeError('Verification code has expired', "CODE_EXPIRED");
        }
        // Check if too many attempts have been made
        if (verificationCode.attemptsUsed >= EmailVerificationCodeService.MAX_ATTEMPTS) {
            // Invalidate the code
            await _db.db.delete(_schema.emailVerificationCodes).where((0, _drizzleorm.eq)(_schema.emailVerificationCodes.id, verificationCode.id));
            throw new VerificationCodeError('Too many verification attempts', "TOO_MANY_ATTEMPTS");
        }
        // Code is valid - mark user as verified and delete the code
        await _db.db.transaction(async (tx)=>{
            // Update user verification status
            await tx.update(_schema.users).set({
                isEmailVerified: true
            }).where((0, _drizzleorm.eq)(_schema.users.id, user.id));
            // Delete the verification code
            await tx.delete(_schema.emailVerificationCodes).where((0, _drizzleorm.eq)(_schema.emailVerificationCodes.id, verificationCode.id));
        });
        return true;
    }
    /**
   * Increment the attempt count for a verification code
   * Used when validation fails but we want to track attempts
   */ async incrementAttempts(email, code) {
        // Find user by email
        const userResult = await _db.db.select({
            id: _schema.users.id
        }).from(_schema.users).where((0, _drizzleorm.eq)(_schema.users.email, email)).limit(1);
        if (userResult.length === 0) {
            return; // User not found, nothing to increment
        }
        const user = userResult[0];
        // Find and increment attempts for the code
        const codeResult = await _db.db.select({
            id: _schema.emailVerificationCodes.id,
            attemptsUsed: _schema.emailVerificationCodes.attemptsUsed
        }).from(_schema.emailVerificationCodes).where((0, _drizzleorm.and)((0, _drizzleorm.eq)(_schema.emailVerificationCodes.userId, user.id), (0, _drizzleorm.eq)(_schema.emailVerificationCodes.code, code))).limit(1);
        if (codeResult.length > 0) {
            const verificationCode = codeResult[0];
            await _db.db.update(_schema.emailVerificationCodes).set({
                attemptsUsed: verificationCode.attemptsUsed + 1
            }).where((0, _drizzleorm.eq)(_schema.emailVerificationCodes.id, verificationCode.id));
        }
    }
    /**
   * Clean up expired verification codes
   * Should be called periodically by a cleanup job
   */ async cleanupExpiredCodes() {
        const now = new Date();
        // First count the expired codes
        const expiredCodes = await _db.db.select({
            id: _schema.emailVerificationCodes.id
        }).from(_schema.emailVerificationCodes).where((0, _drizzleorm.lt)(_schema.emailVerificationCodes.expiresAt, now));
        const count = expiredCodes.length;
        // Then delete them if any exist
        if (count > 0) {
            await _db.db.delete(_schema.emailVerificationCodes).where((0, _drizzleorm.lt)(_schema.emailVerificationCodes.expiresAt, now));
        }
        return count;
    }
    /**
   * Delete all verification codes for a specific user
   * Used when generating new codes or when user is deleted
   */ async deleteUserCodes(userId) {
        await _db.db.delete(_schema.emailVerificationCodes).where((0, _drizzleorm.eq)(_schema.emailVerificationCodes.userId, userId));
    }
    /**
   * Get active verification code for a user (for testing/debugging)
   */ async getUserActiveCode(userId) {
        const now = new Date();
        const result = await _db.db.select().from(_schema.emailVerificationCodes).where((0, _drizzleorm.and)((0, _drizzleorm.eq)(_schema.emailVerificationCodes.userId, userId), (0, _drizzleorm.gt)(_schema.emailVerificationCodes.expiresAt, now) // Not expired
        )).limit(1);
        return result.length > 0 ? result[0] : null;
    }
    /**
   * Check if a user has any active verification codes
   */ async hasActiveCode(userId) {
        const code = await this.getUserActiveCode(userId);
        return code !== null;
    }
    /**
   * Get verification code statistics for monitoring
   */ async getCodeStats() {
        const now = new Date();
        // Count active codes
        const activeResult = await _db.db.select({
            id: _schema.emailVerificationCodes.id
        }).from(_schema.emailVerificationCodes).where((0, _drizzleorm.gt)(_schema.emailVerificationCodes.expiresAt, now));
        // Count expired codes
        const expiredResult = await _db.db.select({
            id: _schema.emailVerificationCodes.id
        }).from(_schema.emailVerificationCodes).where((0, _drizzleorm.lt)(_schema.emailVerificationCodes.expiresAt, now));
        // Count codes with high attempts (4 or more)
        const highAttemptResult = await _db.db.select({
            id: _schema.emailVerificationCodes.id
        }).from(_schema.emailVerificationCodes).where((0, _drizzleorm.and)((0, _drizzleorm.gt)(_schema.emailVerificationCodes.expiresAt, now), (0, _drizzleorm.eq)(_schema.emailVerificationCodes.attemptsUsed, 4) // Close to max attempts
        ));
        return {
            totalActive: activeResult.length,
            expiredCount: expiredResult.length,
            highAttemptCount: highAttemptResult.length
        };
    }
}
const emailVerificationCodeService = new EmailVerificationCodeService();

//# sourceMappingURL=data:application/json;base64,