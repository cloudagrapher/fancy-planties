1f5aeb5b4a2b4c3b7bbd5ba3d60d759d
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _emailverificationratelimiter = require("../../lib/services/email-verification-rate-limiter");
describe('EmailVerificationRateLimiter', ()=>{
    let rateLimiter;
    beforeEach(()=>{
        // Create a new instance with shorter windows for testing
        rateLimiter = new _emailverificationratelimiter.EmailVerificationRateLimiter({
            maxVerificationAttempts: 3,
            verificationWindowMs: 1000,
            maxResendRequests: 2,
            resendWindowMs: 1000,
            resendCooldownMs: 500,
            maxEmailVerificationRequests: 5,
            emailVerificationWindowMs: 1000
        });
    });
    afterEach(()=>{
        // Clean up after each test
        rateLimiter.cleanup();
    });
    describe('checkVerificationAttempts', ()=>{
        it('should allow requests within limit', ()=>{
            const identifier = '192.168.1.1';
            // First request should be allowed
            const result1 = rateLimiter.checkVerificationAttempts(identifier);
            expect(result1.allowed).toBe(true);
            expect(result1.remaining).toBe(2);
            // Second request should be allowed
            const result2 = rateLimiter.checkVerificationAttempts(identifier);
            expect(result2.allowed).toBe(true);
            expect(result2.remaining).toBe(1);
            // Third request should be allowed
            const result3 = rateLimiter.checkVerificationAttempts(identifier);
            expect(result3.allowed).toBe(true);
            expect(result3.remaining).toBe(0);
        });
        it('should block requests over limit', ()=>{
            const identifier = '192.168.1.1';
            // Use up the limit
            for(let i = 0; i < 3; i++){
                rateLimiter.checkVerificationAttempts(identifier);
            }
            // Fourth request should be blocked
            const result = rateLimiter.checkVerificationAttempts(identifier);
            expect(result.allowed).toBe(false);
            expect(result.remaining).toBe(0);
            expect(result.retryAfter).toBeGreaterThan(0);
        });
        it('should reset after window expires', async ()=>{
            const identifier = '192.168.1.1';
            // Use up the limit
            for(let i = 0; i < 3; i++){
                rateLimiter.checkVerificationAttempts(identifier);
            }
            // Should be blocked
            expect(rateLimiter.checkVerificationAttempts(identifier).allowed).toBe(false);
            // Wait for window to expire
            await new Promise((resolve)=>setTimeout(resolve, 1100));
            // Should be allowed again
            const result = rateLimiter.checkVerificationAttempts(identifier);
            expect(result.allowed).toBe(true);
            expect(result.remaining).toBe(2);
        });
    });
    describe('checkResendRequests', ()=>{
        it('should allow requests within limit', ()=>{
            const email = 'test@example.com';
            const identifier = '192.168.1.1';
            // First request should be allowed
            const result1 = rateLimiter.checkResendRequests(email, identifier);
            expect(result1.allowed).toBe(true);
            expect(result1.remaining).toBe(1);
            // Record success to update cooldown
            rateLimiter.recordResendSuccess(email);
            // Wait for cooldown
            return new Promise((resolve)=>{
                setTimeout(()=>{
                    // Second request should be allowed after cooldown
                    const result2 = rateLimiter.checkResendRequests(email, identifier);
                    expect(result2.allowed).toBe(true);
                    expect(result2.remaining).toBe(0);
                    resolve(undefined);
                }, 600); // Wait for cooldown to expire
            });
        });
        it('should enforce cooldown period', ()=>{
            const email = 'test@example.com';
            const identifier = '192.168.1.1';
            // First request
            rateLimiter.checkResendRequests(email, identifier);
            rateLimiter.recordResendSuccess(email);
            // Immediate second request should be blocked by cooldown
            const result = rateLimiter.checkResendRequests(email, identifier);
            expect(result.allowed).toBe(false);
            expect(result.cooldownRemaining).toBeGreaterThan(0);
        });
        it('should block requests over hourly limit', ()=>{
            const email = 'test@example.com';
            const identifier = '192.168.1.1';
            // Use up the limit (with cooldown waits)
            rateLimiter.checkResendRequests(email, identifier);
            rateLimiter.recordResendSuccess(email);
            // Wait for cooldown
            return new Promise((resolve)=>{
                setTimeout(()=>{
                    rateLimiter.checkResendRequests(email, identifier);
                    rateLimiter.recordResendSuccess(email);
                    setTimeout(()=>{
                        // Third request should be blocked by hourly limit
                        const result = rateLimiter.checkResendRequests(email, identifier);
                        expect(result.allowed).toBe(false);
                        expect(result.retryAfter).toBeGreaterThan(0);
                        resolve(undefined);
                    }, 600);
                }, 600);
            });
        });
    });
    describe('checkEmailVerificationActivity', ()=>{
        it('should allow requests within limit', ()=>{
            const identifier = '192.168.1.1';
            for(let i = 0; i < 5; i++){
                const result = rateLimiter.checkEmailVerificationActivity(identifier);
                expect(result.allowed).toBe(true);
                expect(result.remaining).toBe(4 - i);
            }
        });
        it('should block requests over limit', ()=>{
            const identifier = '192.168.1.1';
            // Use up the limit
            for(let i = 0; i < 5; i++){
                rateLimiter.checkEmailVerificationActivity(identifier);
            }
            // Sixth request should be blocked
            const result = rateLimiter.checkEmailVerificationActivity(identifier);
            expect(result.allowed).toBe(false);
            expect(result.remaining).toBe(0);
        });
    });
    describe('detectSuspiciousActivity', ()=>{
        it('should detect rapid verification attempts', ()=>{
            const identifier = '192.168.1.1';
            const email = 'test@example.com';
            // Make rapid attempts
            for(let i = 0; i < 8; i++){
                rateLimiter.checkVerificationAttempts(identifier, email);
            }
            const isSuspicious = rateLimiter.detectSuspiciousActivity(identifier, email);
            expect(isSuspicious).toBe(true);
        });
        it('should not detect normal activity as suspicious', ()=>{
            const identifier = '192.168.1.1';
            const email = 'test@example.com';
            // Make normal attempts
            for(let i = 0; i < 2; i++){
                rateLimiter.checkVerificationAttempts(identifier, email);
            }
            const isSuspicious = rateLimiter.detectSuspiciousActivity(identifier, email);
            expect(isSuspicious).toBe(false);
        });
    });
    describe('getSecurityEvents', ()=>{
        it('should return security events', ()=>{
            const identifier = '192.168.1.1';
            // Trigger rate limit to generate security event
            for(let i = 0; i < 4; i++){
                rateLimiter.checkVerificationAttempts(identifier);
            }
            const events = rateLimiter.getSecurityEvents();
            expect(events.length).toBeGreaterThan(0);
            expect(events[0].type).toBe('RATE_LIMIT_EXCEEDED');
            expect(events[0].identifier).toBe(identifier);
        });
        it('should filter events by timestamp', ()=>{
            const identifier = '192.168.1.1';
            const now = Date.now();
            // Trigger rate limit
            for(let i = 0; i < 4; i++){
                rateLimiter.checkVerificationAttempts(identifier);
            }
            // Get events since future timestamp (should be empty)
            const futureEvents = rateLimiter.getSecurityEvents(now + 1000);
            expect(futureEvents.length).toBe(0);
            // Get events since past timestamp (should include events)
            const pastEvents = rateLimiter.getSecurityEvents(now - 1000);
            expect(pastEvents.length).toBeGreaterThan(0);
        });
    });
    describe('cleanup', ()=>{
        it('should clean up expired data', async ()=>{
            const identifier = '192.168.1.1';
            // Generate some data
            rateLimiter.checkVerificationAttempts(identifier);
            rateLimiter.checkEmailVerificationActivity(identifier);
            // Check stats before cleanup
            const statsBefore = rateLimiter.getStats();
            expect(statsBefore.verificationAttempts).toBeGreaterThan(0);
            expect(statsBefore.emailVerificationActivity).toBeGreaterThan(0);
            // Wait for data to expire
            await new Promise((resolve)=>setTimeout(resolve, 1100));
            // Run cleanup
            rateLimiter.cleanup();
            // Check stats after cleanup
            const statsAfter = rateLimiter.getStats();
            expect(statsAfter.verificationAttempts).toBe(0);
            expect(statsAfter.emailVerificationActivity).toBe(0);
        });
    });
    describe('getStats', ()=>{
        it('should return current statistics', ()=>{
            const identifier = '192.168.1.1';
            const email = 'test@example.com';
            // Generate some activity
            rateLimiter.checkVerificationAttempts(identifier);
            rateLimiter.checkResendRequests(email, identifier);
            rateLimiter.checkEmailVerificationActivity(identifier);
            const stats = rateLimiter.getStats();
            expect(stats.verificationAttempts).toBe(1);
            expect(stats.resendRequests).toBe(1);
            expect(stats.emailVerificationActivity).toBe(1);
            expect(stats.resendCooldowns).toBe(0); // No successful resends yet
            expect(stats.securityEvents).toBe(0); // No rate limits exceeded yet
        });
    });
});

//# sourceMappingURL=data:application/json;base64,