cfd33b38a446cd549f335634d7e5892c
"use strict";

/* istanbul ignore next */
function cov_1fa02au14e() {
  var path = "/Users/stefanbekker/projects/fancy-planties/src/lib/db/queries/plants.ts";
  var hash = "e62d7a54bd1970b8ef29de884e0c2fd5c75a427a";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/stefanbekker/projects/fancy-planties/src/lib/db/queries/plants.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 28
        }
      },
      "3": {
        start: {
          line: 11,
          column: 20
        },
        end: {
          line: 11,
          column: 42
        }
      },
      "4": {
        start: {
          line: 12,
          column: 15
        },
        end: {
          line: 12,
          column: 34
        }
      },
      "5": {
        start: {
          line: 13,
          column: 16
        },
        end: {
          line: 13,
          column: 36
        }
      },
      "6": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 23,
          column: 9
        }
      },
      "7": {
        start: {
          line: 18,
          column: 28
        },
        end: {
          line: 18,
          column: 96
        }
      },
      "8": {
        start: {
          line: 19,
          column: 12
        },
        end: {
          line: 19,
          column: 25
        }
      },
      "9": {
        start: {
          line: 21,
          column: 12
        },
        end: {
          line: 21,
          column: 60
        }
      },
      "10": {
        start: {
          line: 22,
          column: 12
        },
        end: {
          line: 22,
          column: 54
        }
      },
      "11": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 33,
          column: 9
        }
      },
      "12": {
        start: {
          line: 28,
          column: 28
        },
        end: {
          line: 28,
          column: 123
        }
      },
      "13": {
        start: {
          line: 29,
          column: 12
        },
        end: {
          line: 29,
          column: 33
        }
      },
      "14": {
        start: {
          line: 31,
          column: 12
        },
        end: {
          line: 31,
          column: 63
        }
      },
      "15": {
        start: {
          line: 32,
          column: 12
        },
        end: {
          line: 32,
          column: 51
        }
      },
      "16": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 43,
          column: 9
        }
      },
      "17": {
        start: {
          line: 38,
          column: 31
        },
        end: {
          line: 38,
          column: 57
        }
      },
      "18": {
        start: {
          line: 39,
          column: 12
        },
        end: {
          line: 39,
          column: 491
        }
      },
      "19": {
        start: {
          line: 41,
          column: 12
        },
        end: {
          line: 41,
          column: 61
        }
      },
      "20": {
        start: {
          line: 42,
          column: 12
        },
        end: {
          line: 42,
          column: 55
        }
      },
      "21": {
        start: {
          line: 47,
          column: 8
        },
        end: {
          line: 52,
          column: 9
        }
      },
      "22": {
        start: {
          line: 48,
          column: 12
        },
        end: {
          line: 48,
          column: 178
        }
      },
      "23": {
        start: {
          line: 50,
          column: 12
        },
        end: {
          line: 50,
          column: 58
        }
      },
      "24": {
        start: {
          line: 51,
          column: 12
        },
        end: {
          line: 51,
          column: 52
        }
      },
      "25": {
        start: {
          line: 56,
          column: 8
        },
        end: {
          line: 61,
          column: 9
        }
      },
      "26": {
        start: {
          line: 57,
          column: 12
        },
        end: {
          line: 57,
          column: 177
        }
      },
      "27": {
        start: {
          line: 59,
          column: 12
        },
        end: {
          line: 59,
          column: 68
        }
      },
      "28": {
        start: {
          line: 60,
          column: 12
        },
        end: {
          line: 60,
          column: 62
        }
      },
      "29": {
        start: {
          line: 65,
          column: 8
        },
        end: {
          line: 82,
          column: 9
        }
      },
      "30": {
        start: {
          line: 66,
          column: 31
        },
        end: {
          line: 70,
          column: 13
        }
      },
      "31": {
        start: {
          line: 72,
          column: 12
        },
        end: {
          line: 76,
          column: 13
        }
      },
      "32": {
        start: {
          line: 73,
          column: 16
        },
        end: {
          line: 73,
          column: 88
        }
      },
      "33": {
        start: {
          line: 75,
          column: 16
        },
        end: {
          line: 75,
          column: 90
        }
      },
      "34": {
        start: {
          line: 77,
          column: 28
        },
        end: {
          line: 77,
          column: 116
        }
      },
      "35": {
        start: {
          line: 78,
          column: 12
        },
        end: {
          line: 78,
          column: 33
        }
      },
      "36": {
        start: {
          line: 80,
          column: 12
        },
        end: {
          line: 80,
          column: 72
        }
      },
      "37": {
        start: {
          line: 81,
          column: 12
        },
        end: {
          line: 81,
          column: 56
        }
      },
      "38": {
        start: {
          line: 86,
          column: 8
        },
        end: {
          line: 98,
          column: 9
        }
      },
      "39": {
        start: {
          line: 87,
          column: 28
        },
        end: {
          line: 90,
          column: 76
        }
      },
      "40": {
        start: {
          line: 91,
          column: 12
        },
        end: {
          line: 93,
          column: 13
        }
      },
      "41": {
        start: {
          line: 92,
          column: 16
        },
        end: {
          line: 92,
          column: 51
        }
      },
      "42": {
        start: {
          line: 94,
          column: 12
        },
        end: {
          line: 94,
          column: 25
        }
      },
      "43": {
        start: {
          line: 96,
          column: 12
        },
        end: {
          line: 96,
          column: 60
        }
      },
      "44": {
        start: {
          line: 97,
          column: 12
        },
        end: {
          line: 97,
          column: 54
        }
      },
      "45": {
        start: {
          line: 102,
          column: 8
        },
        end: {
          line: 108,
          column: 9
        }
      },
      "46": {
        start: {
          line: 103,
          column: 27
        },
        end: {
          line: 103,
          column: 115
        }
      },
      "47": {
        start: {
          line: 104,
          column: 12
        },
        end: {
          line: 104,
          column: 37
        }
      },
      "48": {
        start: {
          line: 106,
          column: 12
        },
        end: {
          line: 106,
          column: 60
        }
      },
      "49": {
        start: {
          line: 107,
          column: 12
        },
        end: {
          line: 107,
          column: 54
        }
      },
      "50": {
        start: {
          line: 112,
          column: 8
        },
        end: {
          line: 130,
          column: 9
        }
      },
      "51": {
        start: {
          line: 113,
          column: 12
        },
        end: {
          line: 126,
          column: 134
        }
      },
      "52": {
        start: {
          line: 128,
          column: 12
        },
        end: {
          line: 128,
          column: 66
        }
      },
      "53": {
        start: {
          line: 129,
          column: 12
        },
        end: {
          line: 129,
          column: 60
        }
      },
      "54": {
        start: {
          line: 134,
          column: 8
        },
        end: {
          line: 140,
          column: 9
        }
      },
      "55": {
        start: {
          line: 135,
          column: 12
        },
        end: {
          line: 135,
          column: 441
        }
      },
      "56": {
        start: {
          line: 137,
          column: 12
        },
        end: {
          line: 137,
          column: 72
        }
      },
      "57": {
        start: {
          line: 139,
          column: 12
        },
        end: {
          line: 139,
          column: 45
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 16,
            column: 4
          },
          end: {
            line: 16,
            column: 5
          }
        },
        loc: {
          start: {
            line: 16,
            column: 35
          },
          end: {
            line: 24,
            column: 5
          }
        },
        line: 16
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 26,
            column: 4
          },
          end: {
            line: 26,
            column: 5
          }
        },
        loc: {
          start: {
            line: 26,
            column: 29
          },
          end: {
            line: 34,
            column: 5
          }
        },
        line: 26
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 36,
            column: 4
          },
          end: {
            line: 36,
            column: 5
          }
        },
        loc: {
          start: {
            line: 36,
            column: 43
          },
          end: {
            line: 44,
            column: 5
          }
        },
        line: 36
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 46,
            column: 4
          },
          end: {
            line: 46,
            column: 5
          }
        },
        loc: {
          start: {
            line: 46,
            column: 48
          },
          end: {
            line: 53,
            column: 5
          }
        },
        line: 46
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 55,
            column: 4
          },
          end: {
            line: 55,
            column: 5
          }
        },
        loc: {
          start: {
            line: 55,
            column: 37
          },
          end: {
            line: 62,
            column: 5
          }
        },
        line: 55
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 64,
            column: 4
          },
          end: {
            line: 64,
            column: 5
          }
        },
        loc: {
          start: {
            line: 64,
            column: 66
          },
          end: {
            line: 83,
            column: 5
          }
        },
        line: 64
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 85,
            column: 4
          },
          end: {
            line: 85,
            column: 5
          }
        },
        loc: {
          start: {
            line: 85,
            column: 39
          },
          end: {
            line: 99,
            column: 5
          }
        },
        line: 85
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 101,
            column: 4
          },
          end: {
            line: 101,
            column: 5
          }
        },
        loc: {
          start: {
            line: 101,
            column: 28
          },
          end: {
            line: 109,
            column: 5
          }
        },
        line: 101
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 111,
            column: 4
          },
          end: {
            line: 111,
            column: 5
          }
        },
        loc: {
          start: {
            line: 111,
            column: 40
          },
          end: {
            line: 131,
            column: 5
          }
        },
        line: 111
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 133,
            column: 4
          },
          end: {
            line: 133,
            column: 5
          }
        },
        loc: {
          start: {
            line: 133,
            column: 51
          },
          end: {
            line: 141,
            column: 5
          }
        },
        line: 133
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 29,
            column: 19
          },
          end: {
            line: 29,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 29,
            column: 19
          },
          end: {
            line: 29,
            column: 24
          }
        }, {
          start: {
            line: 29,
            column: 28
          },
          end: {
            line: 29,
            column: 32
          }
        }],
        line: 29
      },
      "1": {
        loc: {
          start: {
            line: 36,
            column: 31
          },
          end: {
            line: 36,
            column: 41
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 36,
            column: 39
          },
          end: {
            line: 36,
            column: 41
          }
        }],
        line: 36
      },
      "2": {
        loc: {
          start: {
            line: 46,
            column: 24
          },
          end: {
            line: 46,
            column: 34
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 46,
            column: 33
          },
          end: {
            line: 46,
            column: 34
          }
        }],
        line: 46
      },
      "3": {
        loc: {
          start: {
            line: 46,
            column: 36
          },
          end: {
            line: 46,
            column: 46
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 46,
            column: 44
          },
          end: {
            line: 46,
            column: 46
          }
        }],
        line: 46
      },
      "4": {
        loc: {
          start: {
            line: 72,
            column: 12
          },
          end: {
            line: 76,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 72,
            column: 12
          },
          end: {
            line: 76,
            column: 13
          }
        }, {
          start: {
            line: 74,
            column: 19
          },
          end: {
            line: 76,
            column: 13
          }
        }],
        line: 72
      },
      "5": {
        loc: {
          start: {
            line: 78,
            column: 19
          },
          end: {
            line: 78,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 78,
            column: 19
          },
          end: {
            line: 78,
            column: 24
          }
        }, {
          start: {
            line: 78,
            column: 28
          },
          end: {
            line: 78,
            column: 32
          }
        }],
        line: 78
      },
      "6": {
        loc: {
          start: {
            line: 91,
            column: 12
          },
          end: {
            line: 93,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 91,
            column: 12
          },
          end: {
            line: 93,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 91
      },
      "7": {
        loc: {
          start: {
            line: 111,
            column: 28
          },
          end: {
            line: 111,
            column: 38
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 111,
            column: 36
          },
          end: {
            line: 111,
            column: 38
          }
        }],
        line: 111
      },
      "8": {
        loc: {
          start: {
            line: 133,
            column: 39
          },
          end: {
            line: 133,
            column: 49
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 133,
            column: 47
          },
          end: {
            line: 133,
            column: 49
          }
        }],
        line: 133
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0
    },
    b: {
      "0": [0, 0],
      "1": [0],
      "2": [0],
      "3": [0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0],
      "8": [0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/stefanbekker/projects/fancy-planties/src/lib/db/queries/plants.ts"],
      sourcesContent: ["import { eq, ilike, or, and, desc, sql } from 'drizzle-orm';\nimport { db } from '../index';\nimport { plants, type Plant, type NewPlant } from '../schema';\n\n// Plant taxonomy CRUD operations\nexport class PlantQueries {\n  // Create a new plant taxonomy entry\n  static async create(plantData: NewPlant): Promise<Plant> {\n    try {\n      const [plant] = await db.insert(plants).values(plantData).returning();\n      return plant;\n    } catch (error) {\n      console.error('Failed to create plant:', error);\n      throw new Error('Failed to create plant');\n    }\n  }\n\n  // Get plant by ID\n  static async getById(id: number): Promise<Plant | null> {\n    try {\n      const [plant] = await db.select().from(plants).where(eq(plants.id, id));\n      return plant || null;\n    } catch (error) {\n      console.error('Failed to get plant by ID:', error);\n      throw new Error('Failed to get plant');\n    }\n  }\n\n  // Search plants by taxonomy or common name (fuzzy search)\n  static async search(query: string, limit: number = 20): Promise<Plant[]> {\n    try {\n      const searchTerm = `%${query.toLowerCase()}%`;\n      \n      return await db\n        .select()\n        .from(plants)\n        .where(\n          or(\n            ilike(plants.family, searchTerm),\n            ilike(plants.genus, searchTerm),\n            ilike(plants.species, searchTerm),\n            ilike(plants.cultivar, searchTerm),\n            ilike(plants.commonName, searchTerm)\n          )\n        )\n        .orderBy(desc(plants.isVerified), plants.commonName)\n        .limit(limit);\n    } catch (error) {\n      console.error('Failed to search plants:', error);\n      throw new Error('Failed to search plants');\n    }\n  }\n\n  // Get all plants with pagination\n  static async getAll(offset: number = 0, limit: number = 50): Promise<Plant[]> {\n    try {\n      return await db\n        .select()\n        .from(plants)\n        .orderBy(desc(plants.isVerified), plants.commonName)\n        .offset(offset)\n        .limit(limit);\n    } catch (error) {\n      console.error('Failed to get plants:', error);\n      throw new Error('Failed to get plants');\n    }\n  }\n\n  // Get plants by family\n  static async getByFamily(family: string): Promise<Plant[]> {\n    try {\n      return await db\n        .select()\n        .from(plants)\n        .where(eq(plants.family, family))\n        .orderBy(plants.genus, plants.species);\n    } catch (error) {\n      console.error('Failed to get plants by family:', error);\n      throw new Error('Failed to get plants by family');\n    }\n  }\n\n  // Check if plant taxonomy already exists (including cultivar)\n  static async taxonomyExists(family: string, genus: string, species: string, cultivar?: string): Promise<Plant | null> {\n    try {\n      const conditions = [\n        eq(plants.family, family),\n        eq(plants.genus, genus),\n        eq(plants.species, species)\n      ];\n      \n      // Add cultivar condition - both null or both matching\n      if (cultivar) {\n        conditions.push(eq(plants.cultivar, cultivar));\n      } else {\n        conditions.push(sql`${plants.cultivar} IS NULL`);\n      }\n      \n      const [plant] = await db\n        .select()\n        .from(plants)\n        .where(and(...conditions));\n      return plant || null;\n    } catch (error) {\n      console.error('Failed to check taxonomy existence:', error);\n      throw new Error('Failed to check taxonomy');\n    }\n  }\n\n  // Update plant\n  static async update(id: number, plantData: Partial<NewPlant>): Promise<Plant> {\n    try {\n      const [plant] = await db\n        .update(plants)\n        .set({ ...plantData, updatedAt: new Date() })\n        .where(eq(plants.id, id))\n        .returning();\n      \n      if (!plant) {\n        throw new Error('Plant not found');\n      }\n      \n      return plant;\n    } catch (error) {\n      console.error('Failed to update plant:', error);\n      throw new Error('Failed to update plant');\n    }\n  }\n\n  // Delete plant (only if no instances exist)\n  static async delete(id: number): Promise<boolean> {\n    try {\n      const result = await db.delete(plants).where(eq(plants.id, id));\n      return result.length > 0;\n    } catch (error) {\n      console.error('Failed to delete plant:', error);\n      throw new Error('Failed to delete plant');\n    }\n  }\n\n  // Get popular plants (most used in instances)\n  static async getPopular(limit: number = 10): Promise<Plant[]> {\n    try {\n      return await db\n        .select({\n          id: plants.id,\n          family: plants.family,\n          genus: plants.genus,\n          species: plants.species,\n          cultivar: plants.cultivar,\n          commonName: plants.commonName,\n          careInstructions: plants.careInstructions,\n          defaultImage: plants.defaultImage,\n          createdBy: plants.createdBy,\n          isVerified: plants.isVerified,\n          createdAt: plants.createdAt,\n          updatedAt: plants.updatedAt,\n        })\n        .from(plants)\n        .orderBy(desc(plants.isVerified), plants.commonName)\n        .limit(limit);\n    } catch (error) {\n      console.error('Failed to get popular plants:', error);\n      throw new Error('Failed to get popular plants');\n    }\n  }\n\n  // Full-text search using PostgreSQL's built-in search\n  static async fullTextSearch(query: string, limit: number = 20): Promise<Plant[]> {\n    try {\n      return await db\n        .select()\n        .from(plants)\n        .where(\n          sql`to_tsvector('english', ${plants.family} || ' ' || ${plants.genus} || ' ' || ${plants.species} || ' ' || COALESCE(${plants.cultivar}, '') || ' ' || ${plants.commonName}) @@ plainto_tsquery('english', ${query})`\n        )\n        .orderBy(desc(plants.isVerified), plants.commonName)\n        .limit(limit);\n    } catch (error) {\n      console.error('Failed to perform full-text search:', error);\n      // Fallback to regular search\n      return this.search(query, limit);\n    }\n  }\n}"],
      names: ["PlantQueries", "create", "plantData", "plant", "db", "insert", "plants", "values", "returning", "error", "console", "Error", "getById", "id", "select", "from", "where", "eq", "search", "query", "limit", "searchTerm", "toLowerCase", "or", "ilike", "family", "genus", "species", "cultivar", "commonName", "orderBy", "desc", "isVerified", "getAll", "offset", "getByFamily", "taxonomyExists", "conditions", "push", "sql", "and", "update", "set", "updatedAt", "Date", "delete", "result", "length", "getPopular", "careInstructions", "defaultImage", "createdBy", "createdAt", "fullTextSearch"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "e62d7a54bd1970b8ef29de884e0c2fd5c75a427a"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1fa02au14e = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1fa02au14e();
cov_1fa02au14e().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1fa02au14e().s[1]++;
Object.defineProperty(exports, "PlantQueries", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_1fa02au14e().f[0]++;
    cov_1fa02au14e().s[2]++;
    return PlantQueries;
  }
});
const _drizzleorm =
/* istanbul ignore next */
(cov_1fa02au14e().s[3]++, require("drizzle-orm"));
const _index =
/* istanbul ignore next */
(cov_1fa02au14e().s[4]++, require("../index"));
const _schema =
/* istanbul ignore next */
(cov_1fa02au14e().s[5]++, require("../schema"));
class PlantQueries {
  // Create a new plant taxonomy entry
  static async create(plantData) {
    /* istanbul ignore next */
    cov_1fa02au14e().f[1]++;
    cov_1fa02au14e().s[6]++;
    try {
      const [plant] =
      /* istanbul ignore next */
      (cov_1fa02au14e().s[7]++, await _index.db.insert(_schema.plants).values(plantData).returning());
      /* istanbul ignore next */
      cov_1fa02au14e().s[8]++;
      return plant;
    } catch (error) {
      /* istanbul ignore next */
      cov_1fa02au14e().s[9]++;
      console.error('Failed to create plant:', error);
      /* istanbul ignore next */
      cov_1fa02au14e().s[10]++;
      throw new Error('Failed to create plant');
    }
  }
  // Get plant by ID
  static async getById(id) {
    /* istanbul ignore next */
    cov_1fa02au14e().f[2]++;
    cov_1fa02au14e().s[11]++;
    try {
      const [plant] =
      /* istanbul ignore next */
      (cov_1fa02au14e().s[12]++, await _index.db.select().from(_schema.plants).where((0, _drizzleorm.eq)(_schema.plants.id, id)));
      /* istanbul ignore next */
      cov_1fa02au14e().s[13]++;
      return /* istanbul ignore next */(cov_1fa02au14e().b[0][0]++, plant) ||
      /* istanbul ignore next */
      (cov_1fa02au14e().b[0][1]++, null);
    } catch (error) {
      /* istanbul ignore next */
      cov_1fa02au14e().s[14]++;
      console.error('Failed to get plant by ID:', error);
      /* istanbul ignore next */
      cov_1fa02au14e().s[15]++;
      throw new Error('Failed to get plant');
    }
  }
  // Search plants by taxonomy or common name (fuzzy search)
  static async search(query, limit =
  /* istanbul ignore next */
  (cov_1fa02au14e().b[1][0]++, 20)) {
    /* istanbul ignore next */
    cov_1fa02au14e().f[3]++;
    cov_1fa02au14e().s[16]++;
    try {
      const searchTerm =
      /* istanbul ignore next */
      (cov_1fa02au14e().s[17]++, `%${query.toLowerCase()}%`);
      /* istanbul ignore next */
      cov_1fa02au14e().s[18]++;
      return await _index.db.select().from(_schema.plants).where((0, _drizzleorm.or)((0, _drizzleorm.ilike)(_schema.plants.family, searchTerm), (0, _drizzleorm.ilike)(_schema.plants.genus, searchTerm), (0, _drizzleorm.ilike)(_schema.plants.species, searchTerm), (0, _drizzleorm.ilike)(_schema.plants.cultivar, searchTerm), (0, _drizzleorm.ilike)(_schema.plants.commonName, searchTerm))).orderBy((0, _drizzleorm.desc)(_schema.plants.isVerified), _schema.plants.commonName).limit(limit);
    } catch (error) {
      /* istanbul ignore next */
      cov_1fa02au14e().s[19]++;
      console.error('Failed to search plants:', error);
      /* istanbul ignore next */
      cov_1fa02au14e().s[20]++;
      throw new Error('Failed to search plants');
    }
  }
  // Get all plants with pagination
  static async getAll(offset =
  /* istanbul ignore next */
  (cov_1fa02au14e().b[2][0]++, 0), limit =
  /* istanbul ignore next */
  (cov_1fa02au14e().b[3][0]++, 50)) {
    /* istanbul ignore next */
    cov_1fa02au14e().f[4]++;
    cov_1fa02au14e().s[21]++;
    try {
      /* istanbul ignore next */
      cov_1fa02au14e().s[22]++;
      return await _index.db.select().from(_schema.plants).orderBy((0, _drizzleorm.desc)(_schema.plants.isVerified), _schema.plants.commonName).offset(offset).limit(limit);
    } catch (error) {
      /* istanbul ignore next */
      cov_1fa02au14e().s[23]++;
      console.error('Failed to get plants:', error);
      /* istanbul ignore next */
      cov_1fa02au14e().s[24]++;
      throw new Error('Failed to get plants');
    }
  }
  // Get plants by family
  static async getByFamily(family) {
    /* istanbul ignore next */
    cov_1fa02au14e().f[5]++;
    cov_1fa02au14e().s[25]++;
    try {
      /* istanbul ignore next */
      cov_1fa02au14e().s[26]++;
      return await _index.db.select().from(_schema.plants).where((0, _drizzleorm.eq)(_schema.plants.family, family)).orderBy(_schema.plants.genus, _schema.plants.species);
    } catch (error) {
      /* istanbul ignore next */
      cov_1fa02au14e().s[27]++;
      console.error('Failed to get plants by family:', error);
      /* istanbul ignore next */
      cov_1fa02au14e().s[28]++;
      throw new Error('Failed to get plants by family');
    }
  }
  // Check if plant taxonomy already exists (including cultivar)
  static async taxonomyExists(family, genus, species, cultivar) {
    /* istanbul ignore next */
    cov_1fa02au14e().f[6]++;
    cov_1fa02au14e().s[29]++;
    try {
      const conditions =
      /* istanbul ignore next */
      (cov_1fa02au14e().s[30]++, [(0, _drizzleorm.eq)(_schema.plants.family, family), (0, _drizzleorm.eq)(_schema.plants.genus, genus), (0, _drizzleorm.eq)(_schema.plants.species, species)]);
      // Add cultivar condition - both null or both matching
      /* istanbul ignore next */
      cov_1fa02au14e().s[31]++;
      if (cultivar) {
        /* istanbul ignore next */
        cov_1fa02au14e().b[4][0]++;
        cov_1fa02au14e().s[32]++;
        conditions.push((0, _drizzleorm.eq)(_schema.plants.cultivar, cultivar));
      } else {
        /* istanbul ignore next */
        cov_1fa02au14e().b[4][1]++;
        cov_1fa02au14e().s[33]++;
        conditions.push((0, _drizzleorm.sql)`${_schema.plants.cultivar} IS NULL`);
      }
      const [plant] =
      /* istanbul ignore next */
      (cov_1fa02au14e().s[34]++, await _index.db.select().from(_schema.plants).where((0, _drizzleorm.and)(...conditions)));
      /* istanbul ignore next */
      cov_1fa02au14e().s[35]++;
      return /* istanbul ignore next */(cov_1fa02au14e().b[5][0]++, plant) ||
      /* istanbul ignore next */
      (cov_1fa02au14e().b[5][1]++, null);
    } catch (error) {
      /* istanbul ignore next */
      cov_1fa02au14e().s[36]++;
      console.error('Failed to check taxonomy existence:', error);
      /* istanbul ignore next */
      cov_1fa02au14e().s[37]++;
      throw new Error('Failed to check taxonomy');
    }
  }
  // Update plant
  static async update(id, plantData) {
    /* istanbul ignore next */
    cov_1fa02au14e().f[7]++;
    cov_1fa02au14e().s[38]++;
    try {
      const [plant] =
      /* istanbul ignore next */
      (cov_1fa02au14e().s[39]++, await _index.db.update(_schema.plants).set({
        ...plantData,
        updatedAt: new Date()
      }).where((0, _drizzleorm.eq)(_schema.plants.id, id)).returning());
      /* istanbul ignore next */
      cov_1fa02au14e().s[40]++;
      if (!plant) {
        /* istanbul ignore next */
        cov_1fa02au14e().b[6][0]++;
        cov_1fa02au14e().s[41]++;
        throw new Error('Plant not found');
      } else
      /* istanbul ignore next */
      {
        cov_1fa02au14e().b[6][1]++;
      }
      cov_1fa02au14e().s[42]++;
      return plant;
    } catch (error) {
      /* istanbul ignore next */
      cov_1fa02au14e().s[43]++;
      console.error('Failed to update plant:', error);
      /* istanbul ignore next */
      cov_1fa02au14e().s[44]++;
      throw new Error('Failed to update plant');
    }
  }
  // Delete plant (only if no instances exist)
  static async delete(id) {
    /* istanbul ignore next */
    cov_1fa02au14e().f[8]++;
    cov_1fa02au14e().s[45]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_1fa02au14e().s[46]++, await _index.db.delete(_schema.plants).where((0, _drizzleorm.eq)(_schema.plants.id, id)));
      /* istanbul ignore next */
      cov_1fa02au14e().s[47]++;
      return result.length > 0;
    } catch (error) {
      /* istanbul ignore next */
      cov_1fa02au14e().s[48]++;
      console.error('Failed to delete plant:', error);
      /* istanbul ignore next */
      cov_1fa02au14e().s[49]++;
      throw new Error('Failed to delete plant');
    }
  }
  // Get popular plants (most used in instances)
  static async getPopular(limit =
  /* istanbul ignore next */
  (cov_1fa02au14e().b[7][0]++, 10)) {
    /* istanbul ignore next */
    cov_1fa02au14e().f[9]++;
    cov_1fa02au14e().s[50]++;
    try {
      /* istanbul ignore next */
      cov_1fa02au14e().s[51]++;
      return await _index.db.select({
        id: _schema.plants.id,
        family: _schema.plants.family,
        genus: _schema.plants.genus,
        species: _schema.plants.species,
        cultivar: _schema.plants.cultivar,
        commonName: _schema.plants.commonName,
        careInstructions: _schema.plants.careInstructions,
        defaultImage: _schema.plants.defaultImage,
        createdBy: _schema.plants.createdBy,
        isVerified: _schema.plants.isVerified,
        createdAt: _schema.plants.createdAt,
        updatedAt: _schema.plants.updatedAt
      }).from(_schema.plants).orderBy((0, _drizzleorm.desc)(_schema.plants.isVerified), _schema.plants.commonName).limit(limit);
    } catch (error) {
      /* istanbul ignore next */
      cov_1fa02au14e().s[52]++;
      console.error('Failed to get popular plants:', error);
      /* istanbul ignore next */
      cov_1fa02au14e().s[53]++;
      throw new Error('Failed to get popular plants');
    }
  }
  // Full-text search using PostgreSQL's built-in search
  static async fullTextSearch(query, limit =
  /* istanbul ignore next */
  (cov_1fa02au14e().b[8][0]++, 20)) {
    /* istanbul ignore next */
    cov_1fa02au14e().f[10]++;
    cov_1fa02au14e().s[54]++;
    try {
      /* istanbul ignore next */
      cov_1fa02au14e().s[55]++;
      return await _index.db.select().from(_schema.plants).where((0, _drizzleorm.sql)`to_tsvector('english', ${_schema.plants.family} || ' ' || ${_schema.plants.genus} || ' ' || ${_schema.plants.species} || ' ' || COALESCE(${_schema.plants.cultivar}, '') || ' ' || ${_schema.plants.commonName}) @@ plainto_tsquery('english', ${query})`).orderBy((0, _drizzleorm.desc)(_schema.plants.isVerified), _schema.plants.commonName).limit(limit);
    } catch (error) {
      /* istanbul ignore next */
      cov_1fa02au14e().s[56]++;
      console.error('Failed to perform full-text search:', error);
      // Fallback to regular search
      /* istanbul ignore next */
      cov_1fa02au14e().s[57]++;
      return this.search(query, limit);
    }
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,