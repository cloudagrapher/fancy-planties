{"version":3,"sources":["/Users/stefanbekker/projects/fancy-planties/src/__tests__/components/forms/QuickCareForm.test.js"],"sourcesContent":["/**\n * @jest-environment jsdom\n */\n\nimport React from 'react';\nimport { screen, waitFor } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport { renderWithProviders, mockApiResponses, mockApiError } from '@/test-utils/helpers/render-helpers';\nimport QuickCareForm from '@/components/care/QuickCareForm';\n\n// Mock the offline hook\nconst mockAddPendingCareEntry = jest.fn();\nconst mockRegisterBackgroundSync = jest.fn();\nconst mockUseOffline = jest.fn(() => ({\n  isOnline: true,\n  addPendingCareEntry: mockAddPendingCareEntry,\n}));\n\njest.mock('@/hooks/useOffline', () => ({\n  useOffline: mockUseOffline,\n}));\n\njest.mock('@/lib/utils/service-worker', () => ({\n  useServiceWorker: () => ({\n    registerBackgroundSync: mockRegisterBackgroundSync,\n  }),\n}));\n\ndescribe('QuickCareForm', () => {\n  const defaultProps = {\n    plantInstanceId: 1,\n    onSuccess: jest.fn(),\n    onCancel: jest.fn(),\n    defaultCareType: 'fertilizer',\n  };\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    \n    // Mock successful API response by default\n    mockApiResponses({\n      '/api/care/log': { success: true, data: { id: 1 } },\n    });\n\n    // Reset offline hook to online state\n    mockUseOffline.mockReturnValue({\n      isOnline: true,\n      addPendingCareEntry: mockAddPendingCareEntry,\n    });\n  });\n\n  describe('Form Rendering', () => {\n    it('renders all care type options', () => {\n      renderWithProviders(<QuickCareForm {...defaultProps} />);\n\n      expect(screen.getByText('🌱')).toBeInTheDocument(); // Fertilizer\n      expect(screen.getByText('💧')).toBeInTheDocument(); // Water\n      expect(screen.getByText('🪴')).toBeInTheDocument(); // Repot\n      expect(screen.getByText('✂️')).toBeInTheDocument(); // Prune\n      expect(screen.getByText('🔍')).toBeInTheDocument(); // Inspect\n      expect(screen.getByText('📝')).toBeInTheDocument(); // Other\n\n      expect(screen.getByText('Fertilizer')).toBeInTheDocument();\n      expect(screen.getByText('Water')).toBeInTheDocument();\n      expect(screen.getByText('Repot')).toBeInTheDocument();\n      expect(screen.getByText('Prune')).toBeInTheDocument();\n      expect(screen.getByText('Inspect')).toBeInTheDocument();\n      expect(screen.getByText('Other')).toBeInTheDocument();\n    });\n\n    it('renders care date field with today as default', () => {\n      renderWithProviders(<QuickCareForm {...defaultProps} />);\n\n      const dateInput = screen.getByLabelText(/care date/i);\n      const today = new Date().toISOString().split('T')[0];\n      \n      expect(dateInput).toBeInTheDocument();\n      expect(dateInput).toHaveValue(today);\n      expect(dateInput).toHaveAttribute('max', today); // Cannot be in future\n    });\n\n    it('renders notes field', () => {\n      renderWithProviders(<QuickCareForm {...defaultProps} />);\n\n      const notesField = screen.getByLabelText(/notes/i);\n      expect(notesField).toBeInTheDocument();\n      expect(notesField).toHaveAttribute('placeholder', 'Any additional observations or notes...');\n    });\n\n    it('renders submit button', () => {\n      renderWithProviders(<QuickCareForm {...defaultProps} />);\n\n      expect(screen.getByRole('button', { name: /log care/i })).toBeInTheDocument();\n    });\n\n    it('selects default care type', () => {\n      renderWithProviders(<QuickCareForm {...defaultProps} defaultCareType=\"water\" />);\n\n      const waterButton = screen.getByRole('button', { name: /water/i });\n      expect(waterButton).toHaveClass('btn--primary');\n    });\n  });\n\n  describe('Care Type Selection', () => {\n    it('allows selecting different care types', async () => {\n      const user = userEvent.setup();\n      renderWithProviders(<QuickCareForm {...defaultProps} />);\n\n      const waterButton = screen.getByRole('button', { name: /water/i });\n      await user.click(waterButton);\n\n      expect(waterButton).toHaveClass('btn--primary');\n    });\n\n    it('shows conditional fields for fertilizer type', async () => {\n      const user = userEvent.setup();\n      renderWithProviders(<QuickCareForm {...defaultProps} defaultCareType=\"fertilizer\" />);\n\n      expect(screen.getByLabelText(/fertilizer type/i)).toBeInTheDocument();\n      expect(screen.getByPlaceholderText(/liquid fertilizer, slow-release pellets/i)).toBeInTheDocument();\n    });\n\n    it('shows conditional fields for repotting', async () => {\n      const user = userEvent.setup();\n      renderWithProviders(<QuickCareForm {...defaultProps} />);\n\n      const repotButton = screen.getByRole('button', { name: /repot/i });\n      await user.click(repotButton);\n\n      await waitFor(() => {\n        expect(screen.getByLabelText(/pot size/i)).toBeInTheDocument();\n        expect(screen.getByLabelText(/soil type/i)).toBeInTheDocument();\n      });\n    });\n\n    it('hides conditional fields when switching care types', async () => {\n      const user = userEvent.setup();\n      renderWithProviders(<QuickCareForm {...defaultProps} defaultCareType=\"fertilizer\" />);\n\n      // Initially shows fertilizer field\n      expect(screen.getByLabelText(/fertilizer type/i)).toBeInTheDocument();\n\n      // Switch to water\n      const waterButton = screen.getByRole('button', { name: /water/i });\n      await user.click(waterButton);\n\n      // Fertilizer field should be hidden\n      expect(screen.queryByLabelText(/fertilizer type/i)).not.toBeInTheDocument();\n    });\n\n    it('shows care type description', () => {\n      renderWithProviders(<QuickCareForm {...defaultProps} defaultCareType=\"fertilizer\" />);\n\n      const description = screen.getByText(/🌱 fertilizer:/i);\n      expect(description).toBeInTheDocument();\n    });\n  });\n\n  describe('Date Validation', () => {\n    it('prevents selecting future dates', () => {\n      renderWithProviders(<QuickCareForm {...defaultProps} />);\n\n      const dateInput = screen.getByLabelText(/care date/i);\n      const today = new Date().toISOString().split('T')[0];\n      \n      expect(dateInput).toHaveAttribute('max', today);\n    });\n\n    it('allows selecting past dates', async () => {\n      const user = userEvent.setup();\n      renderWithProviders(<QuickCareForm {...defaultProps} />);\n\n      const dateInput = screen.getByLabelText(/care date/i);\n      const yesterday = new Date();\n      yesterday.setDate(yesterday.getDate() - 1);\n      const yesterdayString = yesterday.toISOString().split('T')[0];\n\n      await user.clear(dateInput);\n      await user.type(dateInput, yesterdayString);\n\n      expect(dateInput).toHaveValue(yesterdayString);\n    });\n  });\n\n  describe('Form Submission', () => {\n    it('submits form with correct data', async () => {\n      const user = userEvent.setup();\n      renderWithProviders(<QuickCareForm {...defaultProps} />);\n\n      // Fill form\n      await user.type(screen.getByLabelText(/notes/i), 'Plant looks healthy');\n      \n      // Submit\n      await user.click(screen.getByRole('button', { name: /log care/i }));\n\n      await waitFor(() => {\n        expect(global.fetch).toHaveBeenCalledWith(\n          '/api/care/log',\n          expect.objectContaining({\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: expect.stringContaining('fertilizer'),\n          })\n        );\n      });\n\n      expect(defaultProps.onSuccess).toHaveBeenCalled();\n    });\n\n    it('includes conditional field data in submission', async () => {\n      const user = userEvent.setup();\n      renderWithProviders(<QuickCareForm {...defaultProps} defaultCareType=\"fertilizer\" />);\n\n      await user.type(screen.getByLabelText(/fertilizer type/i), 'Liquid fertilizer');\n      await user.click(screen.getByRole('button', { name: /log care/i }));\n\n      await waitFor(() => {\n        const fetchCall = global.fetch.mock.calls[0];\n        const requestBody = JSON.parse(fetchCall[1].body);\n        expect(requestBody.fertilizerType).toBe('Liquid fertilizer');\n      });\n    });\n\n    it('includes repot-specific data in submission', async () => {\n      const user = userEvent.setup();\n      renderWithProviders(<QuickCareForm {...defaultProps} />);\n\n      // Select repot care type\n      await user.click(screen.getByRole('button', { name: /repot/i }));\n\n      await waitFor(() => {\n        expect(screen.getByLabelText(/pot size/i)).toBeInTheDocument();\n      });\n\n      await user.type(screen.getByLabelText(/pot size/i), '6 inch');\n      await user.type(screen.getByLabelText(/soil type/i), 'Potting mix');\n      await user.click(screen.getByRole('button', { name: /log care/i }));\n\n      await waitFor(() => {\n        const fetchCall = global.fetch.mock.calls[0];\n        const requestBody = JSON.parse(fetchCall[1].body);\n        expect(requestBody.potSize).toBe('6 inch');\n        expect(requestBody.soilType).toBe('Potting mix');\n      });\n    });\n\n    it('resets form after successful submission', async () => {\n      const user = userEvent.setup();\n      renderWithProviders(<QuickCareForm {...defaultProps} />);\n\n      // Fill form\n      await user.type(screen.getByLabelText(/notes/i), 'Test notes');\n      \n      // Submit\n      await user.click(screen.getByRole('button', { name: /log care/i }));\n\n      await waitFor(() => {\n        expect(defaultProps.onSuccess).toHaveBeenCalled();\n      });\n\n      // Form should be reset\n      expect(screen.getByLabelText(/notes/i)).toHaveValue('');\n    });\n\n    it('shows loading state during submission', async () => {\n      const user = userEvent.setup();\n      \n      // Mock delayed response\n      global.fetch = jest.fn(() => \n        new Promise(resolve => \n          setTimeout(() => resolve({\n            ok: true,\n            json: () => Promise.resolve({ success: true })\n          }), 100)\n        )\n      );\n\n      renderWithProviders(<QuickCareForm {...defaultProps} />);\n\n      const submitButton = screen.getByRole('button', { name: /log care/i });\n      await user.click(submitButton);\n\n      // Check loading state\n      expect(submitButton).toBeDisabled();\n      expect(screen.getByText(/logging/i)).toBeInTheDocument();\n    });\n  });\n\n  describe('Offline Mode', () => {\n    beforeEach(() => {\n      // Mock offline state\n      jest.mocked(require('@/hooks/useOffline').useOffline).mockReturnValue({\n        isOnline: false,\n        addPendingCareEntry: mockAddPendingCareEntry,\n      });\n    });\n\n    it('shows offline mode indicator', () => {\n      renderWithProviders(<QuickCareForm {...defaultProps} />);\n\n      expect(screen.getByText(/offline mode/i)).toBeInTheDocument();\n      expect(screen.getByText(/care will be logged when you're back online/i)).toBeInTheDocument();\n    });\n\n    it('changes submit button text in offline mode', () => {\n      renderWithProviders(<QuickCareForm {...defaultProps} />);\n\n      expect(screen.getByRole('button', { name: /queue for sync/i })).toBeInTheDocument();\n    });\n\n    it('queues care entry when offline', async () => {\n      const user = userEvent.setup();\n      renderWithProviders(<QuickCareForm {...defaultProps} />);\n\n      await user.type(screen.getByLabelText(/notes/i), 'Offline care entry');\n      await user.click(screen.getByRole('button', { name: /queue for sync/i }));\n\n      expect(mockAddPendingCareEntry).toHaveBeenCalledWith({\n        plantInstanceId: 1,\n        careType: 'fertilizer',\n        notes: 'Offline care entry',\n      });\n\n      expect(mockRegisterBackgroundSync).toHaveBeenCalled();\n      expect(defaultProps.onSuccess).toHaveBeenCalled();\n    });\n\n    it('does not make API call when offline', async () => {\n      const user = userEvent.setup();\n      renderWithProviders(<QuickCareForm {...defaultProps} />);\n\n      await user.click(screen.getByRole('button', { name: /queue for sync/i }));\n\n      expect(global.fetch).not.toHaveBeenCalled();\n    });\n  });\n\n  describe('Error Handling', () => {\n    it('displays API error messages', async () => {\n      const user = userEvent.setup();\n      mockApiError('/api/care/log', 400, { error: 'Invalid care data' });\n\n      renderWithProviders(<QuickCareForm {...defaultProps} />);\n\n      await user.click(screen.getByRole('button', { name: /log care/i }));\n\n      await waitFor(() => {\n        expect(screen.getByText('Invalid care data')).toBeInTheDocument();\n      });\n\n      expect(defaultProps.onSuccess).not.toHaveBeenCalled();\n    });\n\n    it('handles network errors gracefully', async () => {\n      const user = userEvent.setup();\n      \n      // Mock network error\n      global.fetch = jest.fn(() => Promise.reject(new Error('Network error')));\n\n      renderWithProviders(<QuickCareForm {...defaultProps} />);\n\n      await user.click(screen.getByRole('button', { name: /log care/i }));\n\n      await waitFor(() => {\n        expect(screen.getByText(/failed to log care/i)).toBeInTheDocument();\n      });\n    });\n\n    it('clears errors on retry', async () => {\n      const user = userEvent.setup();\n      mockApiError('/api/care/log', 400, { error: 'Invalid care data' });\n\n      renderWithProviders(<QuickCareForm {...defaultProps} />);\n\n      // First submission with error\n      await user.click(screen.getByRole('button', { name: /log care/i }));\n\n      await waitFor(() => {\n        expect(screen.getByText('Invalid care data')).toBeInTheDocument();\n      });\n\n      // Mock successful response for retry\n      mockApiResponses({\n        '/api/care/log': { success: true },\n      });\n\n      // Retry submission\n      await user.click(screen.getByRole('button', { name: /log care/i }));\n\n      // Error should be cleared\n      expect(screen.queryByText('Invalid care data')).not.toBeInTheDocument();\n    });\n  });\n\n  describe('Plant Selection (when no plantInstanceId provided)', () => {\n    it('shows plant selection dropdown when plantInstanceId not provided', () => {\n      const propsWithoutPlant = { ...defaultProps };\n      delete propsWithoutPlant.plantInstanceId;\n\n      renderWithProviders(<QuickCareForm {...propsWithoutPlant} />);\n\n      expect(screen.getByLabelText(/plant/i)).toBeInTheDocument();\n      expect(screen.getByText(/select a plant/i)).toBeInTheDocument();\n    });\n\n    it('disables submit button when no plant selected', () => {\n      const propsWithoutPlant = { ...defaultProps };\n      delete propsWithoutPlant.plantInstanceId;\n\n      renderWithProviders(<QuickCareForm {...propsWithoutPlant} />);\n\n      const submitButton = screen.getByRole('button', { name: /log care/i });\n      expect(submitButton).toBeDisabled();\n    });\n\n    it('shows implementation note for plant selection', () => {\n      const propsWithoutPlant = { ...defaultProps };\n      delete propsWithoutPlant.plantInstanceId;\n\n      renderWithProviders(<QuickCareForm {...propsWithoutPlant} />);\n\n      expect(screen.getByText(/plant selection will be implemented when plant instances are available/i)).toBeInTheDocument();\n    });\n  });\n\n  describe('Cancel Functionality', () => {\n    it('shows cancel button when onCancel provided', () => {\n      renderWithProviders(<QuickCareForm {...defaultProps} />);\n\n      expect(screen.getByRole('button', { name: /cancel/i })).toBeInTheDocument();\n    });\n\n    it('calls onCancel when cancel button clicked', async () => {\n      const user = userEvent.setup();\n      renderWithProviders(<QuickCareForm {...defaultProps} />);\n\n      await user.click(screen.getByRole('button', { name: /cancel/i }));\n\n      expect(defaultProps.onCancel).toHaveBeenCalled();\n    });\n\n    it('does not show cancel button when onCancel not provided', () => {\n      const propsWithoutCancel = { ...defaultProps };\n      delete propsWithoutCancel.onCancel;\n\n      renderWithProviders(<QuickCareForm {...propsWithoutCancel} />);\n\n      expect(screen.queryByRole('button', { name: /cancel/i })).not.toBeInTheDocument();\n    });\n  });\n\n  describe('Accessibility', () => {\n    it('has proper form structure', () => {\n      renderWithProviders(<QuickCareForm {...defaultProps} />);\n\n      expect(screen.getByRole('form', { hidden: true })).toBeInTheDocument();\n    });\n\n    it('has proper labels for all inputs', () => {\n      renderWithProviders(<QuickCareForm {...defaultProps} />);\n\n      expect(screen.getByLabelText(/care type/i)).toBeInTheDocument();\n      expect(screen.getByLabelText(/care date/i)).toBeInTheDocument();\n      expect(screen.getByLabelText(/notes/i)).toBeInTheDocument();\n    });\n\n    it('has required attribute on date field', () => {\n      renderWithProviders(<QuickCareForm {...defaultProps} />);\n\n      const dateInput = screen.getByLabelText(/care date/i);\n      expect(dateInput).toHaveAttribute('required');\n    });\n\n    it('disables form elements during submission', async () => {\n      const user = userEvent.setup();\n      \n      // Mock delayed response\n      global.fetch = jest.fn(() => \n        new Promise(resolve => \n          setTimeout(() => resolve({\n            ok: true,\n            json: () => Promise.resolve({ success: true })\n          }), 100)\n        )\n      );\n\n      renderWithProviders(<QuickCareForm {...defaultProps} />);\n\n      const submitButton = screen.getByRole('button', { name: /log care/i });\n      await user.click(submitButton);\n\n      // All care type buttons should be disabled\n      const careTypeButtons = screen.getAllByRole('button').filter(btn => \n        btn.textContent?.includes('Fertilizer') || \n        btn.textContent?.includes('Water') ||\n        btn.textContent?.includes('Repot')\n      );\n\n      careTypeButtons.forEach(button => {\n        expect(button).toBeDisabled();\n      });\n\n      // Date input should be disabled\n      expect(screen.getByLabelText(/care date/i)).toBeDisabled();\n    });\n  });\n});"],"names":["jest","mock","useOffline","mockUseOffline","useServiceWorker","registerBackgroundSync","mockRegisterBackgroundSync","mockAddPendingCareEntry","fn","isOnline","addPendingCareEntry","describe","defaultProps","plantInstanceId","onSuccess","onCancel","defaultCareType","beforeEach","clearAllMocks","mockApiResponses","success","data","id","mockReturnValue","it","renderWithProviders","QuickCareForm","expect","screen","getByText","toBeInTheDocument","dateInput","getByLabelText","today","Date","toISOString","split","toHaveValue","toHaveAttribute","notesField","getByRole","name","waterButton","toHaveClass","user","userEvent","setup","click","getByPlaceholderText","repotButton","waitFor","queryByLabelText","not","description","yesterday","setDate","getDate","yesterdayString","clear","type","global","fetch","toHaveBeenCalledWith","objectContaining","method","headers","body","stringContaining","toHaveBeenCalled","fetchCall","calls","requestBody","JSON","parse","fertilizerType","toBe","potSize","soilType","Promise","resolve","setTimeout","ok","json","submitButton","toBeDisabled","mocked","require","careType","notes","mockApiError","error","reject","Error","queryByText","propsWithoutPlant","propsWithoutCancel","queryByRole","hidden","careTypeButtons","getAllByRole","filter","btn","textContent","includes","forEach","button"],"mappings":"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"}