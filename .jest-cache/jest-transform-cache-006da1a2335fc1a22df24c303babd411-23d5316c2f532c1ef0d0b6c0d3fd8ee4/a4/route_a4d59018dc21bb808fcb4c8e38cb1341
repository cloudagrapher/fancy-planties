dc06931a9fffb734cf94c38eac0e983a
"use strict";

/* istanbul ignore next */
function cov_1alv8wx5m1() {
  var path = "/Users/stefanbekker/projects/fancy-planties/src/app/api/import/csv/[importId]/route.ts";
  var hash = "80c3350daf70e8f1abb2b58dabfd134dfebc0913";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/stefanbekker/projects/fancy-planties/src/app/api/import/csv/[importId]/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 18,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 22
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 19
        }
      },
      "6": {
        start: {
          line: 19,
          column: 16
        },
        end: {
          line: 19,
          column: 38
        }
      },
      "7": {
        start: {
          line: 20,
          column: 17
        },
        end: {
          line: 20,
          column: 58
        }
      },
      "8": {
        start: {
          line: 21,
          column: 26
        },
        end: {
          line: 21,
          column: 83
        }
      },
      "9": {
        start: {
          line: 22,
          column: 25
        },
        end: {
          line: 22,
          column: 65
        }
      },
      "10": {
        start: {
          line: 24,
          column: 4
        },
        end: {
          line: 64,
          column: 5
        }
      },
      "11": {
        start: {
          line: 25,
          column: 25
        },
        end: {
          line: 25,
          column: 62
        }
      },
      "12": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 32,
          column: 9
        }
      },
      "13": {
        start: {
          line: 27,
          column: 12
        },
        end: {
          line: 31,
          column: 15
        }
      },
      "14": {
        start: {
          line: 33,
          column: 31
        },
        end: {
          line: 33,
          column: 43
        }
      },
      "15": {
        start: {
          line: 34,
          column: 25
        },
        end: {
          line: 34,
          column: 84
        }
      },
      "16": {
        start: {
          line: 35,
          column: 8
        },
        end: {
          line: 46,
          column: 9
        }
      },
      "17": {
        start: {
          line: 39,
          column: 12
        },
        end: {
          line: 45,
          column: 15
        }
      },
      "18": {
        start: {
          line: 47,
          column: 8
        },
        end: {
          line: 53,
          column: 9
        }
      },
      "19": {
        start: {
          line: 48,
          column: 12
        },
        end: {
          line: 52,
          column: 15
        }
      },
      "20": {
        start: {
          line: 54,
          column: 8
        },
        end: {
          line: 56,
          column: 11
        }
      },
      "21": {
        start: {
          line: 58,
          column: 8
        },
        end: {
          line: 58,
          column: 59
        }
      },
      "22": {
        start: {
          line: 59,
          column: 8
        },
        end: {
          line: 63,
          column: 11
        }
      },
      "23": {
        start: {
          line: 67,
          column: 4
        },
        end: {
          line: 110,
          column: 5
        }
      },
      "24": {
        start: {
          line: 68,
          column: 25
        },
        end: {
          line: 68,
          column: 62
        }
      },
      "25": {
        start: {
          line: 69,
          column: 8
        },
        end: {
          line: 75,
          column: 9
        }
      },
      "26": {
        start: {
          line: 70,
          column: 12
        },
        end: {
          line: 74,
          column: 15
        }
      },
      "27": {
        start: {
          line: 76,
          column: 31
        },
        end: {
          line: 76,
          column: 43
        }
      },
      "28": {
        start: {
          line: 77,
          column: 25
        },
        end: {
          line: 77,
          column: 84
        }
      },
      "29": {
        start: {
          line: 78,
          column: 8
        },
        end: {
          line: 84,
          column: 9
        }
      },
      "30": {
        start: {
          line: 79,
          column: 12
        },
        end: {
          line: 83,
          column: 15
        }
      },
      "31": {
        start: {
          line: 85,
          column: 8
        },
        end: {
          line: 91,
          column: 9
        }
      },
      "32": {
        start: {
          line: 86,
          column: 12
        },
        end: {
          line: 90,
          column: 15
        }
      },
      "33": {
        start: {
          line: 92,
          column: 26
        },
        end: {
          line: 92,
          column: 80
        }
      },
      "34": {
        start: {
          line: 93,
          column: 8
        },
        end: {
          line: 99,
          column: 9
        }
      },
      "35": {
        start: {
          line: 94,
          column: 12
        },
        end: {
          line: 98,
          column: 15
        }
      },
      "36": {
        start: {
          line: 100,
          column: 8
        },
        end: {
          line: 102,
          column: 11
        }
      },
      "37": {
        start: {
          line: 104,
          column: 8
        },
        end: {
          line: 104,
          column: 53
        }
      },
      "38": {
        start: {
          line: 105,
          column: 8
        },
        end: {
          line: 109,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        },
        loc: {
          start: {
            line: 12,
            column: 18
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 15
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "GET",
        decl: {
          start: {
            line: 23,
            column: 15
          },
          end: {
            line: 23,
            column: 18
          }
        },
        loc: {
          start: {
            line: 23,
            column: 40
          },
          end: {
            line: 65,
            column: 1
          }
        },
        line: 23
      },
      "4": {
        name: "DELETE",
        decl: {
          start: {
            line: 66,
            column: 15
          },
          end: {
            line: 66,
            column: 21
          }
        },
        loc: {
          start: {
            line: 66,
            column: 43
          },
          end: {
            line: 111,
            column: 1
          }
        },
        line: 66
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 26,
            column: 8
          },
          end: {
            line: 32,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 26,
            column: 8
          },
          end: {
            line: 32,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 26
      },
      "1": {
        loc: {
          start: {
            line: 35,
            column: 8
          },
          end: {
            line: 46,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 35,
            column: 8
          },
          end: {
            line: 46,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 35
      },
      "2": {
        loc: {
          start: {
            line: 47,
            column: 8
          },
          end: {
            line: 53,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 47,
            column: 8
          },
          end: {
            line: 53,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 47
      },
      "3": {
        loc: {
          start: {
            line: 69,
            column: 8
          },
          end: {
            line: 75,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 69,
            column: 8
          },
          end: {
            line: 75,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 69
      },
      "4": {
        loc: {
          start: {
            line: 78,
            column: 8
          },
          end: {
            line: 84,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 78,
            column: 8
          },
          end: {
            line: 84,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 78
      },
      "5": {
        loc: {
          start: {
            line: 85,
            column: 8
          },
          end: {
            line: 91,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 85,
            column: 8
          },
          end: {
            line: 91,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 85
      },
      "6": {
        loc: {
          start: {
            line: 93,
            column: 8
          },
          end: {
            line: 99,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 93,
            column: 8
          },
          end: {
            line: 99,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 93
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/stefanbekker/projects/fancy-planties/src/app/api/import/csv/[importId]/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport { validateRequest } from '@/lib/auth/server';\nimport { CSVImportService } from '@/lib/services/csv-import-service';\n\nconst csvImportService = new CSVImportService();\n\n// GET /api/import/csv/[importId] - Get import progress\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: Promise<{ importId: string }> }\n) {\n  try {\n    const { user } = await validateRequest();\n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const resolvedParams = await params;\n    const progress = csvImportService.getImportProgress(resolvedParams.importId);\n    \n    if (!progress) {\n      // Import might have completed and been cleaned up\n      // For now, return a generic \"not found\" response\n      // In production, we'd want to persist this to database\n      return NextResponse.json({ \n        error: 'Import not found',\n        message: 'Import may have completed successfully but progress record is no longer available',\n        importId: resolvedParams.importId\n      }, { status: 404 });\n    }\n\n    if (progress.userId !== user.id) {\n      return NextResponse.json({ error: 'Forbidden' }, { status: 403 });\n    }\n\n    return NextResponse.json({ progress });\n\n  } catch (error) {\n    console.error('Get import progress error:', error);\n    return NextResponse.json(\n      { error: 'Failed to get import progress' },\n      { status: 500 }\n    );\n  }\n}\n\n// DELETE /api/import/csv/[importId] - Cancel import\nexport async function DELETE(\n  request: NextRequest,\n  { params }: { params: Promise<{ importId: string }> }\n) {\n  try {\n    const { user } = await validateRequest();\n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const resolvedParams = await params;\n    const progress = csvImportService.getImportProgress(resolvedParams.importId);\n    \n    if (!progress) {\n      return NextResponse.json({ error: 'Import not found' }, { status: 404 });\n    }\n\n    if (progress.userId !== user.id) {\n      return NextResponse.json({ error: 'Forbidden' }, { status: 403 });\n    }\n\n    const cancelled = csvImportService.cancelImport(resolvedParams.importId);\n    \n    if (!cancelled) {\n      return NextResponse.json(\n        { error: 'Cannot cancel import in current state' },\n        { status: 400 }\n      );\n    }\n\n    return NextResponse.json({ success: true });\n\n  } catch (error) {\n    console.error('Cancel import error:', error);\n    return NextResponse.json(\n      { error: 'Failed to cancel import' },\n      { status: 500 }\n    );\n  }\n}"],
      names: ["DELETE", "GET", "csvImportService", "CSVImportService", "request", "params", "user", "validateRequest", "NextResponse", "json", "error", "status", "resolvedParams", "progress", "getImportProgress", "importId", "message", "userId", "id", "console", "cancelled", "cancelImport", "success"],
      mappings: ";;;;;;;;;;;QA+CsBA;eAAAA;;QAxCAC;eAAAA;;;wBAPoB;yBACV;kCACC;AAEjC,MAAMC,mBAAmB,IAAIC,kCAAgB;AAGtC,eAAeF,IACpBG,OAAoB,EACpB,EAAEC,MAAM,EAA6C;IAErD,IAAI;QACF,MAAM,EAAEC,IAAI,EAAE,GAAG,MAAMC,IAAAA,wBAAe;QACtC,IAAI,CAACD,MAAM;YACT,OAAOE,oBAAY,CAACC,IAAI,CAAC;gBAAEC,OAAO;YAAe,GAAG;gBAAEC,QAAQ;YAAI;QACpE;QAEA,MAAMC,iBAAiB,MAAMP;QAC7B,MAAMQ,WAAWX,iBAAiBY,iBAAiB,CAACF,eAAeG,QAAQ;QAE3E,IAAI,CAACF,UAAU;YACb,kDAAkD;YAClD,iDAAiD;YACjD,uDAAuD;YACvD,OAAOL,oBAAY,CAACC,IAAI,CAAC;gBACvBC,OAAO;gBACPM,SAAS;gBACTD,UAAUH,eAAeG,QAAQ;YACnC,GAAG;gBAAEJ,QAAQ;YAAI;QACnB;QAEA,IAAIE,SAASI,MAAM,KAAKX,KAAKY,EAAE,EAAE;YAC/B,OAAOV,oBAAY,CAACC,IAAI,CAAC;gBAAEC,OAAO;YAAY,GAAG;gBAAEC,QAAQ;YAAI;QACjE;QAEA,OAAOH,oBAAY,CAACC,IAAI,CAAC;YAAEI;QAAS;IAEtC,EAAE,OAAOH,OAAO;QACdS,QAAQT,KAAK,CAAC,8BAA8BA;QAC5C,OAAOF,oBAAY,CAACC,IAAI,CACtB;YAAEC,OAAO;QAAgC,GACzC;YAAEC,QAAQ;QAAI;IAElB;AACF;AAGO,eAAeX,OACpBI,OAAoB,EACpB,EAAEC,MAAM,EAA6C;IAErD,IAAI;QACF,MAAM,EAAEC,IAAI,EAAE,GAAG,MAAMC,IAAAA,wBAAe;QACtC,IAAI,CAACD,MAAM;YACT,OAAOE,oBAAY,CAACC,IAAI,CAAC;gBAAEC,OAAO;YAAe,GAAG;gBAAEC,QAAQ;YAAI;QACpE;QAEA,MAAMC,iBAAiB,MAAMP;QAC7B,MAAMQ,WAAWX,iBAAiBY,iBAAiB,CAACF,eAAeG,QAAQ;QAE3E,IAAI,CAACF,UAAU;YACb,OAAOL,oBAAY,CAACC,IAAI,CAAC;gBAAEC,OAAO;YAAmB,GAAG;gBAAEC,QAAQ;YAAI;QACxE;QAEA,IAAIE,SAASI,MAAM,KAAKX,KAAKY,EAAE,EAAE;YAC/B,OAAOV,oBAAY,CAACC,IAAI,CAAC;gBAAEC,OAAO;YAAY,GAAG;gBAAEC,QAAQ;YAAI;QACjE;QAEA,MAAMS,YAAYlB,iBAAiBmB,YAAY,CAACT,eAAeG,QAAQ;QAEvE,IAAI,CAACK,WAAW;YACd,OAAOZ,oBAAY,CAACC,IAAI,CACtB;gBAAEC,OAAO;YAAwC,GACjD;gBAAEC,QAAQ;YAAI;QAElB;QAEA,OAAOH,oBAAY,CAACC,IAAI,CAAC;YAAEa,SAAS;QAAK;IAE3C,EAAE,OAAOZ,OAAO;QACdS,QAAQT,KAAK,CAAC,wBAAwBA;QACtC,OAAOF,oBAAY,CAACC,IAAI,CACtB;YAAEC,OAAO;QAA0B,GACnC;YAAEC,QAAQ;QAAI;IAElB;AACF"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "80c3350daf70e8f1abb2b58dabfd134dfebc0913"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1alv8wx5m1 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1alv8wx5m1();
cov_1alv8wx5m1().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_1alv8wx5m1().f[0]++;
  cov_1alv8wx5m1().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_1alv8wx5m1().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_1alv8wx5m1().s[3]++;
_export(exports, {
  get DELETE() {
    /* istanbul ignore next */
    cov_1alv8wx5m1().f[1]++;
    cov_1alv8wx5m1().s[4]++;
    return DELETE;
  },
  get GET() {
    /* istanbul ignore next */
    cov_1alv8wx5m1().f[2]++;
    cov_1alv8wx5m1().s[5]++;
    return GET;
  }
});
const _server =
/* istanbul ignore next */
(cov_1alv8wx5m1().s[6]++, require("next/server"));
const _server1 =
/* istanbul ignore next */
(cov_1alv8wx5m1().s[7]++, require("../../../../../lib/auth/server"));
const _csvimportservice =
/* istanbul ignore next */
(cov_1alv8wx5m1().s[8]++, require("../../../../../lib/services/csv-import-service"));
const csvImportService =
/* istanbul ignore next */
(cov_1alv8wx5m1().s[9]++, new _csvimportservice.CSVImportService());
async function GET(request, {
  params
}) {
  /* istanbul ignore next */
  cov_1alv8wx5m1().f[3]++;
  cov_1alv8wx5m1().s[10]++;
  try {
    const {
      user
    } =
    /* istanbul ignore next */
    (cov_1alv8wx5m1().s[11]++, await (0, _server1.validateRequest)());
    /* istanbul ignore next */
    cov_1alv8wx5m1().s[12]++;
    if (!user) {
      /* istanbul ignore next */
      cov_1alv8wx5m1().b[0][0]++;
      cov_1alv8wx5m1().s[13]++;
      return _server.NextResponse.json({
        error: 'Unauthorized'
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_1alv8wx5m1().b[0][1]++;
    }
    const resolvedParams =
    /* istanbul ignore next */
    (cov_1alv8wx5m1().s[14]++, await params);
    const progress =
    /* istanbul ignore next */
    (cov_1alv8wx5m1().s[15]++, csvImportService.getImportProgress(resolvedParams.importId));
    /* istanbul ignore next */
    cov_1alv8wx5m1().s[16]++;
    if (!progress) {
      /* istanbul ignore next */
      cov_1alv8wx5m1().b[1][0]++;
      cov_1alv8wx5m1().s[17]++;
      // Import might have completed and been cleaned up
      // For now, return a generic "not found" response
      // In production, we'd want to persist this to database
      return _server.NextResponse.json({
        error: 'Import not found',
        message: 'Import may have completed successfully but progress record is no longer available',
        importId: resolvedParams.importId
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_1alv8wx5m1().b[1][1]++;
    }
    cov_1alv8wx5m1().s[18]++;
    if (progress.userId !== user.id) {
      /* istanbul ignore next */
      cov_1alv8wx5m1().b[2][0]++;
      cov_1alv8wx5m1().s[19]++;
      return _server.NextResponse.json({
        error: 'Forbidden'
      }, {
        status: 403
      });
    } else
    /* istanbul ignore next */
    {
      cov_1alv8wx5m1().b[2][1]++;
    }
    cov_1alv8wx5m1().s[20]++;
    return _server.NextResponse.json({
      progress
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1alv8wx5m1().s[21]++;
    console.error('Get import progress error:', error);
    /* istanbul ignore next */
    cov_1alv8wx5m1().s[22]++;
    return _server.NextResponse.json({
      error: 'Failed to get import progress'
    }, {
      status: 500
    });
  }
}
async function DELETE(request, {
  params
}) {
  /* istanbul ignore next */
  cov_1alv8wx5m1().f[4]++;
  cov_1alv8wx5m1().s[23]++;
  try {
    const {
      user
    } =
    /* istanbul ignore next */
    (cov_1alv8wx5m1().s[24]++, await (0, _server1.validateRequest)());
    /* istanbul ignore next */
    cov_1alv8wx5m1().s[25]++;
    if (!user) {
      /* istanbul ignore next */
      cov_1alv8wx5m1().b[3][0]++;
      cov_1alv8wx5m1().s[26]++;
      return _server.NextResponse.json({
        error: 'Unauthorized'
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_1alv8wx5m1().b[3][1]++;
    }
    const resolvedParams =
    /* istanbul ignore next */
    (cov_1alv8wx5m1().s[27]++, await params);
    const progress =
    /* istanbul ignore next */
    (cov_1alv8wx5m1().s[28]++, csvImportService.getImportProgress(resolvedParams.importId));
    /* istanbul ignore next */
    cov_1alv8wx5m1().s[29]++;
    if (!progress) {
      /* istanbul ignore next */
      cov_1alv8wx5m1().b[4][0]++;
      cov_1alv8wx5m1().s[30]++;
      return _server.NextResponse.json({
        error: 'Import not found'
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_1alv8wx5m1().b[4][1]++;
    }
    cov_1alv8wx5m1().s[31]++;
    if (progress.userId !== user.id) {
      /* istanbul ignore next */
      cov_1alv8wx5m1().b[5][0]++;
      cov_1alv8wx5m1().s[32]++;
      return _server.NextResponse.json({
        error: 'Forbidden'
      }, {
        status: 403
      });
    } else
    /* istanbul ignore next */
    {
      cov_1alv8wx5m1().b[5][1]++;
    }
    const cancelled =
    /* istanbul ignore next */
    (cov_1alv8wx5m1().s[33]++, csvImportService.cancelImport(resolvedParams.importId));
    /* istanbul ignore next */
    cov_1alv8wx5m1().s[34]++;
    if (!cancelled) {
      /* istanbul ignore next */
      cov_1alv8wx5m1().b[6][0]++;
      cov_1alv8wx5m1().s[35]++;
      return _server.NextResponse.json({
        error: 'Cannot cancel import in current state'
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1alv8wx5m1().b[6][1]++;
    }
    cov_1alv8wx5m1().s[36]++;
    return _server.NextResponse.json({
      success: true
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1alv8wx5m1().s[37]++;
    console.error('Cancel import error:', error);
    /* istanbul ignore next */
    cov_1alv8wx5m1().s[38]++;
    return _server.NextResponse.json({
      error: 'Failed to cancel import'
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,