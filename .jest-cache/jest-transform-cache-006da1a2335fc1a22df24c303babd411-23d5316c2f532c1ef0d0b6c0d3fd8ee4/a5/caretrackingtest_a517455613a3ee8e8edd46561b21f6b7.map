{"version":3,"sources":["/Users/stefanbekker/projects/fancy-planties/src/__tests__/api/care-tracking.test.js"],"sourcesContent":["// Care Tracking API Endpoint Tests\n// Tests POST /api/care, GET /api/care/history, GET /api/dashboard endpoints\n\nimport { NextRequest, NextResponse } from 'next/server';\nimport { POST as logCareHandler } from '@/app/api/care/log/route';\nimport { POST as quickLogCareHandler } from '@/app/api/care/quick-log/route';\nimport { GET as getCareHistoryHandler } from '@/app/api/care/history/[plantInstanceId]/route';\nimport { GET as getCareDashboardHandler } from '@/app/api/care/dashboard/route';\nimport { GET as getDashboardHandler } from '@/app/api/dashboard/route';\nimport { createTestUser, createTestSession } from '@/test-utils/factories/user-factory';\nimport { createTestPlantInstance, createTestCareRecord } from '@/test-utils/factories/plant-factory';\nimport { resetApiMocks } from '@/test-utils/helpers/api-helpers';\n\n// Mock the auth functions\njest.mock('@/lib/auth/server', () => ({\n  requireAuthSession: jest.fn(),\n  validateRequest: jest.fn(),\n}));\n\n// Mock the care service\njest.mock('@/lib/services/care-service', () => ({\n  CareService: {\n    logCareEvent: jest.fn(),\n    quickCareLog: jest.fn(),\n    getCareDashboard: jest.fn(),\n  },\n}));\n\n// Mock care history queries\njest.mock('@/lib/db/queries/care-history', () => ({\n  CareHistoryQueries: {\n    getCareHistoryForPlant: jest.fn(),\n  },\n}));\n\n// Mock database and schema\njest.mock('@/lib/db', () => ({\n  db: {\n    select: jest.fn().mockReturnThis(),\n    from: jest.fn().mockReturnThis(),\n    where: jest.fn().mockReturnThis(),\n  },\n}));\n\njest.mock('@/lib/db/schema', () => ({\n  plantInstances: {\n    id: 'id',\n    userId: 'userId',\n    isActive: 'isActive',\n    fertilizerDue: 'fertilizerDue',\n    nickname: 'nickname',\n  },\n  propagations: {\n    userId: 'userId',\n    status: 'status',\n  },\n}));\n\n// Mock care validation\njest.mock('@/lib/validation/care-schemas', () => ({\n  careValidation: {\n    validateCareForm: jest.fn(),\n    validateQuickCareLog: jest.fn(),\n  },\n}));\n\n// Import mocked functions\nimport { requireAuthSession, validateRequest } from '@/lib/auth/server';\nimport { CareService } from '@/lib/services/care-service';\nimport { CareHistoryQueries } from '@/lib/db/queries/care-history';\nimport { careValidation } from '@/lib/validation/care-schemas';\nimport { db } from '@/lib/db';\n\ndescribe('Care Tracking API Endpoints', () => {\n  let testUser;\n  let testSession;\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    resetApiMocks();\n    \n    testUser = createTestUser();\n    testSession = createTestSession(testUser);\n    \n    // Default auth mocks\n    requireAuthSession.mockResolvedValue({\n      user: testUser,\n      session: testSession,\n    });\n    \n    validateRequest.mockResolvedValue({\n      user: testUser,\n      session: testSession,\n    });\n  });\n\n  afterEach(() => {\n    jest.restoreAllMocks();\n  });\n\n  describe('POST /api/care/log - Care record creation', () => {\n    it('should create care record with valid data', async () => {\n      // Arrange\n      const testPlantInstance = createTestPlantInstance({ userId: testUser.id });\n      const requestBody = {\n        plantInstanceId: testPlantInstance.id,\n        careType: 'watering',\n        careDate: '2024-01-15T10:00:00.000Z',\n        notes: 'Regular watering',\n      };\n\n      const validatedData = {\n        ...requestBody,\n        careDate: new Date(requestBody.careDate),\n      };\n\n      const createdCareRecord = createTestCareRecord({\n        ...validatedData,\n        id: 1,\n        userId: testUser.id,\n      });\n\n      careValidation.validateCareForm.mockReturnValue({\n        success: true,\n        data: validatedData,\n      });\n\n      CareService.logCareEvent.mockResolvedValue({\n        success: true,\n        careHistory: createdCareRecord,\n      });\n\n      const request = new NextRequest('http://localhost:3000/api/care/log', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      // Act\n      const response = await logCareHandler(request);\n      const responseData = await response.json();\n\n      // Assert\n      expect(response.status).toBe(200);\n      expect(responseData).toEqual({\n        ...createdCareRecord,\n        // JSON serializes dates to strings\n        careDate: createdCareRecord.careDate.toISOString(),\n        createdAt: createdCareRecord.createdAt.toISOString(),\n        updatedAt: createdCareRecord.updatedAt.toISOString(),\n      });\n\n      expect(requireAuthSession).toHaveBeenCalled();\n      expect(careValidation.validateCareForm).toHaveBeenCalledWith(validatedData);\n      expect(CareService.logCareEvent).toHaveBeenCalledWith(testUser.id, validatedData);\n    });\n\n    it('should return validation error for invalid care data', async () => {\n      // Arrange\n      const requestBody = {\n        plantInstanceId: 'invalid',\n        careType: 'invalid_type',\n        careDate: 'invalid_date',\n      };\n\n      careValidation.validateCareForm.mockReturnValue({\n        success: false,\n        error: {\n          issues: [\n            { message: 'Plant instance ID must be a number' },\n            { message: 'Invalid care type' },\n            { message: 'Invalid date format' },\n          ],\n        },\n      });\n\n      const request = new NextRequest('http://localhost:3000/api/care/log', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      // Act\n      const response = await logCareHandler(request);\n      const responseData = await response.json();\n\n      // Assert\n      expect(response.status).toBe(400);\n      expect(responseData).toEqual({\n        error: 'Plant instance ID must be a number',\n      });\n\n      expect(CareService.logCareEvent).not.toHaveBeenCalled();\n    });\n\n    it('should return error when care service fails', async () => {\n      // Arrange\n      const requestBody = {\n        plantInstanceId: 1,\n        careType: 'watering',\n        careDate: '2024-01-15T10:00:00.000Z',\n      };\n\n      careValidation.validateCareForm.mockReturnValue({\n        success: true,\n        data: {\n          ...requestBody,\n          careDate: new Date(requestBody.careDate),\n        },\n      });\n\n      CareService.logCareEvent.mockResolvedValue({\n        success: false,\n        error: 'Plant instance not found',\n      });\n\n      const request = new NextRequest('http://localhost:3000/api/care/log', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      // Act\n      const response = await logCareHandler(request);\n      const responseData = await response.json();\n\n      // Assert\n      expect(response.status).toBe(400);\n      expect(responseData).toEqual({\n        error: 'Plant instance not found',\n      });\n    });\n\n    it('should return unauthorized error when user not authenticated', async () => {\n      // Arrange\n      requireAuthSession.mockRejectedValue(new Error('Unauthorized'));\n\n      const request = new NextRequest('http://localhost:3000/api/care/log', {\n        method: 'POST',\n        body: JSON.stringify({}),\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      // Act\n      const response = await logCareHandler(request);\n      const responseData = await response.json();\n\n      // Assert\n      expect(response.status).toBe(500);\n      expect(responseData).toEqual({\n        error: 'Failed to log care event',\n      });\n\n      expect(CareService.logCareEvent).not.toHaveBeenCalled();\n    });\n\n    it('should handle malformed JSON request', async () => {\n      // Arrange\n      const request = new NextRequest('http://localhost:3000/api/care/log', {\n        method: 'POST',\n        body: 'invalid json',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      // Act\n      const response = await logCareHandler(request);\n      const responseData = await response.json();\n\n      // Assert\n      expect(response.status).toBe(500);\n      expect(responseData).toEqual({\n        error: 'Failed to log care event',\n      });\n\n      expect(CareService.logCareEvent).not.toHaveBeenCalled();\n    });\n  });\n\n  describe('POST /api/care/quick-log - Quick care logging', () => {\n    it('should create quick care log with valid data', async () => {\n      // Arrange\n      const requestBody = {\n        plantInstanceIds: [1, 2, 3],\n        careType: 'watering',\n        notes: 'Quick watering session',\n      };\n\n      const validatedData = {\n        ...requestBody,\n        careDate: expect.any(Date),\n      };\n\n      const careRecords = [\n        createTestCareRecord({ id: 1, plantInstanceId: 1 }),\n        createTestCareRecord({ id: 2, plantInstanceId: 2 }),\n        createTestCareRecord({ id: 3, plantInstanceId: 3 }),\n      ];\n\n      careValidation.validateQuickCareLog.mockReturnValue({\n        success: true,\n        data: validatedData,\n      });\n\n      CareService.quickCareLog.mockResolvedValue({\n        success: true,\n        careHistory: careRecords,\n      });\n\n      const request = new NextRequest('http://localhost:3000/api/care/quick-log', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      // Act\n      const response = await quickLogCareHandler(request);\n      const responseData = await response.json();\n\n      // Assert\n      expect(response.status).toBe(200);\n      expect(responseData).toEqual(careRecords.map(record => ({\n        ...record,\n        // JSON serializes dates to strings\n        careDate: record.careDate.toISOString(),\n        createdAt: record.createdAt.toISOString(),\n        updatedAt: record.updatedAt.toISOString(),\n      })));\n\n      expect(requireAuthSession).toHaveBeenCalled();\n      expect(careValidation.validateQuickCareLog).toHaveBeenCalledWith(validatedData);\n      expect(CareService.quickCareLog).toHaveBeenCalledWith(testUser.id, validatedData);\n    });\n\n    it('should return validation error with detailed issues', async () => {\n      // Arrange\n      const requestBody = {\n        plantInstanceIds: [],\n        careType: 'invalid',\n      };\n\n      careValidation.validateQuickCareLog.mockReturnValue({\n        success: false,\n        error: {\n          issues: [\n            { message: 'At least one plant instance is required' },\n            { message: 'Invalid care type' },\n          ],\n        },\n      });\n\n      const request = new NextRequest('http://localhost:3000/api/care/quick-log', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      // Act\n      const response = await quickLogCareHandler(request);\n      const responseData = await response.json();\n\n      // Assert\n      expect(response.status).toBe(400);\n      expect(responseData).toEqual({\n        error: 'At least one plant instance is required',\n        details: [\n          { message: 'At least one plant instance is required' },\n          { message: 'Invalid care type' },\n        ],\n      });\n\n      expect(CareService.quickCareLog).not.toHaveBeenCalled();\n    });\n\n    it('should handle quick care service errors', async () => {\n      // Arrange\n      const requestBody = {\n        plantInstanceIds: [999],\n        careType: 'watering',\n      };\n\n      careValidation.validateQuickCareLog.mockReturnValue({\n        success: true,\n        data: {\n          ...requestBody,\n          careDate: new Date(),\n        },\n      });\n\n      CareService.quickCareLog.mockResolvedValue({\n        success: false,\n        error: 'Some plant instances not found',\n      });\n\n      const request = new NextRequest('http://localhost:3000/api/care/quick-log', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      // Act\n      const response = await quickLogCareHandler(request);\n      const responseData = await response.json();\n\n      // Assert\n      expect(response.status).toBe(400);\n      expect(responseData).toEqual({\n        error: 'Some plant instances not found',\n      });\n    });\n  });\n\n  describe('GET /api/care/history/[plantInstanceId] - Care history retrieval and filtering', () => {\n    it('should return care history with default filters', async () => {\n      // Arrange\n      const plantInstanceId = 1;\n      const careHistory = [\n        createTestCareRecord({ id: 1, plantInstanceId, careType: 'watering' }),\n        createTestCareRecord({ id: 2, plantInstanceId, careType: 'fertilizing' }),\n      ];\n\n      CareHistoryQueries.getCareHistoryForPlant.mockResolvedValue(careHistory);\n\n      const request = new NextRequest(`http://localhost:3000/api/care/history/${plantInstanceId}`);\n      const params = Promise.resolve({ plantInstanceId: plantInstanceId.toString() });\n\n      // Act\n      const response = await getCareHistoryHandler(request, { params });\n      const responseData = await response.json();\n\n      // Assert\n      expect(response.status).toBe(200);\n      expect(responseData).toEqual(careHistory);\n\n      expect(validateRequest).toHaveBeenCalled();\n      expect(CareHistoryQueries.getCareHistoryForPlant).toHaveBeenCalledWith(\n        plantInstanceId,\n        testUser.id,\n        {\n          careType: undefined,\n          startDate: undefined,\n          endDate: undefined,\n          limit: 50,\n          offset: 0,\n          sortBy: 'care_date',\n          sortOrder: 'desc',\n        }\n      );\n    });\n\n    it('should return care history with custom filters', async () => {\n      // Arrange\n      const plantInstanceId = 1;\n      const careHistory = [\n        createTestCareRecord({ id: 1, plantInstanceId, careType: 'watering' }),\n      ];\n\n      CareHistoryQueries.getCareHistoryForPlant.mockResolvedValue(careHistory);\n\n      const queryParams = new URLSearchParams({\n        careType: 'watering',\n        startDate: '2024-01-01',\n        endDate: '2024-01-31',\n        limit: '10',\n        offset: '5',\n        sortBy: 'care_type',\n        sortOrder: 'asc',\n      });\n\n      const request = new NextRequest(`http://localhost:3000/api/care/history/${plantInstanceId}?${queryParams}`);\n      const params = Promise.resolve({ plantInstanceId: plantInstanceId.toString() });\n\n      // Act\n      const response = await getCareHistoryHandler(request, { params });\n      const responseData = await response.json();\n\n      // Assert\n      expect(response.status).toBe(200);\n      expect(responseData).toEqual(careHistory);\n\n      expect(CareHistoryQueries.getCareHistoryForPlant).toHaveBeenCalledWith(\n        plantInstanceId,\n        testUser.id,\n        {\n          careType: 'watering',\n          startDate: new Date('2024-01-01'),\n          endDate: new Date('2024-01-31'),\n          limit: 10,\n          offset: 5,\n          sortBy: 'care_type',\n          sortOrder: 'asc',\n        }\n      );\n    });\n\n    it('should return bad request error for invalid plant instance ID', async () => {\n      // Arrange\n      const request = new NextRequest('http://localhost:3000/api/care/history/invalid');\n      const params = Promise.resolve({ plantInstanceId: 'invalid' });\n\n      // Act\n      const response = await getCareHistoryHandler(request, { params });\n      const responseData = await response.json();\n\n      // Assert\n      expect(response.status).toBe(400);\n      expect(responseData).toEqual({\n        error: 'Invalid plant instance ID',\n      });\n\n      expect(CareHistoryQueries.getCareHistoryForPlant).not.toHaveBeenCalled();\n    });\n\n    it('should return unauthorized error when user not authenticated', async () => {\n      // Arrange\n      validateRequest.mockResolvedValue({\n        user: null,\n        session: null,\n      });\n\n      const request = new NextRequest('http://localhost:3000/api/care/history/1');\n      const params = Promise.resolve({ plantInstanceId: '1' });\n\n      // Act\n      const response = await getCareHistoryHandler(request, { params });\n      const responseData = await response.json();\n\n      // Assert\n      expect(response.status).toBe(401);\n      expect(responseData).toEqual({\n        error: 'Unauthorized',\n      });\n\n      expect(CareHistoryQueries.getCareHistoryForPlant).not.toHaveBeenCalled();\n    });\n\n    it('should handle database errors gracefully', async () => {\n      // Arrange\n      CareHistoryQueries.getCareHistoryForPlant.mockRejectedValue(new Error('Database connection failed'));\n\n      const request = new NextRequest('http://localhost:3000/api/care/history/1');\n      const params = Promise.resolve({ plantInstanceId: '1' });\n\n      // Act\n      const response = await getCareHistoryHandler(request, { params });\n      const responseData = await response.json();\n\n      // Assert\n      expect(response.status).toBe(500);\n      expect(responseData).toEqual({\n        error: 'Failed to get care history',\n      });\n    });\n  });\n\n  describe('GET /api/dashboard - Dashboard statistics calculation', () => {\n    it('should return dashboard statistics with plant and propagation data', async () => {\n      // Arrange\n      const mockStats = {\n        totalPlants: 15,\n        activePlants: 12,\n        careDueToday: 3,\n        totalPropagations: 8,\n        activePropagations: 5,\n        successfulPropagations: 6,\n        propagationSuccessRate: 75,\n        fertilizerEvents: [\n          {\n            id: 'fertilizer-1',\n            plantName: 'Monstera Deliciosa',\n            plantId: '1',\n            date: '2024-01-15',\n            type: 'fertilize',\n          },\n          {\n            id: 'fertilizer-2',\n            plantName: 'Fiddle Leaf Fig',\n            plantId: '2',\n            date: '2024-01-16',\n            type: 'fertilize',\n          },\n        ],\n      };\n\n      // Mock database queries\n      db.select.mockReturnValue({\n        from: jest.fn().mockReturnValue({\n          where: jest.fn().mockResolvedValue([\n            {\n              totalPlants: 15,\n              activePlants: 12,\n              careDueToday: 3,\n            },\n          ]),\n        }),\n      });\n\n      // Mock propagation stats query\n      db.select\n        .mockReturnValueOnce({\n          from: jest.fn().mockReturnValue({\n            where: jest.fn().mockResolvedValue([\n              {\n                totalPlants: 15,\n                activePlants: 12,\n                careDueToday: 3,\n              },\n            ]),\n          }),\n        })\n        .mockReturnValueOnce({\n          from: jest.fn().mockReturnValue({\n            where: jest.fn().mockResolvedValue([\n              {\n                totalPropagations: 8,\n                activePropagations: 5,\n                successfulPropagations: 6,\n              },\n            ]),\n          }),\n        })\n        .mockReturnValueOnce({\n          from: jest.fn().mockReturnValue({\n            where: jest.fn().mockResolvedValue([\n              {\n                count: 8,\n              },\n            ]),\n          }),\n        })\n        .mockReturnValueOnce({\n          from: jest.fn().mockReturnValue({\n            where: jest.fn().mockResolvedValue([\n              {\n                id: 1,\n                nickname: 'Monstera Deliciosa',\n                fertilizerDue: new Date('2024-01-15'),\n              },\n              {\n                id: 2,\n                nickname: 'Fiddle Leaf Fig',\n                fertilizerDue: new Date('2024-01-16'),\n              },\n            ]),\n          }),\n        });\n\n      const request = new NextRequest('http://localhost:3000/api/dashboard');\n\n      // Act\n      const response = await getDashboardHandler(request);\n      const responseData = await response.json();\n\n      // Assert\n      expect(response.status).toBe(200);\n      expect(responseData).toMatchObject({\n        totalPlants: expect.any(Number),\n        activePlants: expect.any(Number),\n        careDueToday: expect.any(Number),\n        totalPropagations: expect.any(Number),\n        activePropagations: expect.any(Number),\n        successfulPropagations: expect.any(Number),\n        propagationSuccessRate: expect.any(Number),\n        fertilizerEvents: expect.any(Array),\n      });\n\n      expect(validateRequest).toHaveBeenCalled();\n    });\n\n    it('should return unauthorized error when user not authenticated', async () => {\n      // Arrange\n      validateRequest.mockResolvedValue({\n        user: null,\n        session: null,\n      });\n\n      const request = new NextRequest('http://localhost:3000/api/dashboard');\n\n      // Act\n      const response = await getDashboardHandler(request);\n      const responseData = await response.json();\n\n      // Assert\n      expect(response.status).toBe(401);\n      expect(responseData).toEqual({\n        error: 'Unauthorized',\n      });\n    });\n\n    it('should handle database errors gracefully', async () => {\n      // Arrange\n      db.select.mockImplementation(() => {\n        throw new Error('Database connection failed');\n      });\n\n      const request = new NextRequest('http://localhost:3000/api/dashboard');\n\n      // Act\n      const response = await getDashboardHandler(request);\n      const responseData = await response.json();\n\n      // Assert\n      expect(response.status).toBe(500);\n      expect(responseData).toEqual({\n        error: 'Failed to get dashboard stats',\n      });\n    });\n  });\n\n  describe('GET /api/care/dashboard - Care-specific dashboard', () => {\n    it('should return care dashboard data', async () => {\n      // Arrange\n      const mockCareDashboard = {\n        upcomingCare: [\n          {\n            plantInstanceId: 1,\n            plantName: 'Monstera',\n            careType: 'watering',\n            dueDate: '2024-01-15',\n            overdue: false,\n          },\n        ],\n        recentCare: [\n          {\n            id: 1,\n            plantInstanceId: 1,\n            careType: 'watering',\n            careDate: '2024-01-10',\n            notes: 'Regular watering',\n          },\n        ],\n        careStats: {\n          totalCareEvents: 25,\n          thisWeekCare: 5,\n          overdueCare: 2,\n        },\n      };\n\n      CareService.getCareDashboard.mockResolvedValue(mockCareDashboard);\n\n      const request = new NextRequest('http://localhost:3000/api/care/dashboard');\n\n      // Act\n      const response = await getCareDashboardHandler(request);\n      const responseData = await response.json();\n\n      // Assert\n      expect(response.status).toBe(200);\n      expect(responseData).toEqual(mockCareDashboard);\n\n      expect(requireAuthSession).toHaveBeenCalled();\n      expect(CareService.getCareDashboard).toHaveBeenCalledWith(testUser.id);\n    });\n\n    it('should return unauthorized error when user not authenticated', async () => {\n      // Arrange\n      requireAuthSession.mockRejectedValue(new Error('Unauthorized'));\n\n      const request = new NextRequest('http://localhost:3000/api/care/dashboard');\n\n      // Act\n      const response = await getCareDashboardHandler(request);\n      const responseData = await response.json();\n\n      // Assert\n      expect(response.status).toBe(500);\n      expect(responseData).toEqual({\n        error: 'Failed to fetch care dashboard',\n      });\n\n      expect(CareService.getCareDashboard).not.toHaveBeenCalled();\n    });\n\n    it('should handle care service errors', async () => {\n      // Arrange\n      CareService.getCareDashboard.mockRejectedValue(new Error('Care service failed'));\n\n      const request = new NextRequest('http://localhost:3000/api/care/dashboard');\n\n      // Act\n      const response = await getCareDashboardHandler(request);\n      const responseData = await response.json();\n\n      // Assert\n      expect(response.status).toBe(500);\n      expect(responseData).toEqual({\n        error: 'Failed to fetch care dashboard',\n      });\n    });\n  });\n\n  describe('Care Tracking Integration Tests', () => {\n    it('should handle complete care workflow: log -> history -> dashboard', async () => {\n      const plantInstanceId = 1;\n      \n      // Step 1: Log care event\n      const careData = {\n        plantInstanceId,\n        careType: 'watering',\n        careDate: '2024-01-15T10:00:00.000Z',\n        notes: 'Regular watering',\n      };\n\n      const careRecord = createTestCareRecord({\n        id: 1,\n        ...careData,\n        careDate: new Date(careData.careDate),\n        userId: testUser.id,\n      });\n\n      careValidation.validateCareForm.mockReturnValue({\n        success: true,\n        data: {\n          ...careData,\n          careDate: new Date(careData.careDate),\n        },\n      });\n\n      CareService.logCareEvent.mockResolvedValue({\n        success: true,\n        careHistory: careRecord,\n      });\n\n      const logRequest = new NextRequest('http://localhost:3000/api/care/log', {\n        method: 'POST',\n        body: JSON.stringify(careData),\n        headers: { 'Content-Type': 'application/json' },\n      });\n\n      const logResponse = await logCareHandler(logRequest);\n      const logResponseData = await logResponse.json();\n\n      expect(logResponse.status).toBe(200);\n      expect(logResponseData).toEqual(careRecord);\n\n      // Step 2: Get care history\n      const careHistory = [careRecord];\n      CareHistoryQueries.getCareHistoryForPlant.mockResolvedValue(careHistory);\n\n      const historyRequest = new NextRequest(`http://localhost:3000/api/care/history/${plantInstanceId}`);\n      const historyParams = Promise.resolve({ plantInstanceId: plantInstanceId.toString() });\n\n      const historyResponse = await getCareHistoryHandler(historyRequest, { params: historyParams });\n      const historyResponseData = await historyResponse.json();\n\n      expect(historyResponse.status).toBe(200);\n      expect(historyResponseData).toEqual(careHistory);\n\n      // Step 3: Get care dashboard\n      const careDashboard = {\n        upcomingCare: [],\n        recentCare: [careRecord],\n        careStats: {\n          totalCareEvents: 1,\n          thisWeekCare: 1,\n          overdueCare: 0,\n        },\n      };\n\n      CareService.getCareDashboard.mockResolvedValue(careDashboard);\n\n      const dashboardRequest = new NextRequest('http://localhost:3000/api/care/dashboard');\n      const dashboardResponse = await getCareDashboardHandler(dashboardRequest);\n      const dashboardResponseData = await dashboardResponse.json();\n\n      expect(dashboardResponse.status).toBe(200);\n      expect(dashboardResponseData).toEqual(careDashboard);\n\n      // Verify all services were called correctly\n      expect(CareService.logCareEvent).toHaveBeenCalledWith(testUser.id, expect.any(Object));\n      expect(CareHistoryQueries.getCareHistoryForPlant).toHaveBeenCalledWith(plantInstanceId, testUser.id, expect.any(Object));\n      expect(CareService.getCareDashboard).toHaveBeenCalledWith(testUser.id);\n    });\n\n    it('should handle authorization across all care endpoints', async () => {\n      // Test unauthorized access to all care endpoints\n      requireAuthSession.mockRejectedValue(new Error('Unauthorized'));\n      validateRequest.mockResolvedValue({ user: null, session: null });\n\n      // POST /api/care/log\n      const logRequest = new NextRequest('http://localhost:3000/api/care/log', {\n        method: 'POST',\n        body: JSON.stringify({}),\n        headers: { 'Content-Type': 'application/json' },\n      });\n      const logResponse = await logCareHandler(logRequest);\n      expect(logResponse.status).toBe(500); // Service error due to auth failure\n\n      // POST /api/care/quick-log\n      const quickLogRequest = new NextRequest('http://localhost:3000/api/care/quick-log', {\n        method: 'POST',\n        body: JSON.stringify({}),\n        headers: { 'Content-Type': 'application/json' },\n      });\n      const quickLogResponse = await quickLogCareHandler(quickLogRequest);\n      expect(quickLogResponse.status).toBe(500); // Service error due to auth failure\n\n      // GET /api/care/history/1\n      const historyRequest = new NextRequest('http://localhost:3000/api/care/history/1');\n      const historyParams = Promise.resolve({ plantInstanceId: '1' });\n      const historyResponse = await getCareHistoryHandler(historyRequest, { params: historyParams });\n      expect(historyResponse.status).toBe(401);\n\n      // GET /api/care/dashboard\n      const careDashboardRequest = new NextRequest('http://localhost:3000/api/care/dashboard');\n      const careDashboardResponse = await getCareDashboardHandler(careDashboardRequest);\n      expect(careDashboardResponse.status).toBe(500); // Service error due to auth failure\n\n      // GET /api/dashboard\n      const dashboardRequest = new NextRequest('http://localhost:3000/api/dashboard');\n      const dashboardResponse = await getDashboardHandler(dashboardRequest);\n      expect(dashboardResponse.status).toBe(401);\n    });\n  });\n});"],"names":["jest","mock","requireAuthSession","fn","validateRequest","CareService","logCareEvent","quickCareLog","getCareDashboard","CareHistoryQueries","getCareHistoryForPlant","db","select","mockReturnThis","from","where","plantInstances","id","userId","isActive","fertilizerDue","nickname","propagations","status","careValidation","validateCareForm","validateQuickCareLog","describe","testUser","testSession","beforeEach","clearAllMocks","resetApiMocks","createTestUser","createTestSession","mockResolvedValue","user","session","afterEach","restoreAllMocks","it","testPlantInstance","createTestPlantInstance","requestBody","plantInstanceId","careType","careDate","notes","validatedData","Date","createdCareRecord","createTestCareRecord","mockReturnValue","success","data","careHistory","request","NextRequest","method","body","JSON","stringify","headers","response","logCareHandler","responseData","json","expect","toBe","toEqual","toISOString","createdAt","updatedAt","toHaveBeenCalled","toHaveBeenCalledWith","error","issues","message","not","mockRejectedValue","Error","plantInstanceIds","any","careRecords","quickLogCareHandler","map","record","details","params","Promise","resolve","toString","getCareHistoryHandler","undefined","startDate","endDate","limit","offset","sortBy","sortOrder","queryParams","URLSearchParams","mockStats","totalPlants","activePlants","careDueToday","totalPropagations","activePropagations","successfulPropagations","propagationSuccessRate","fertilizerEvents","plantName","plantId","date","type","mockReturnValueOnce","count","getDashboardHandler","toMatchObject","Number","Array","mockImplementation","mockCareDashboard","upcomingCare","dueDate","overdue","recentCare","careStats","totalCareEvents","thisWeekCare","overdueCare","getCareDashboardHandler","careData","careRecord","logRequest","logResponse","logResponseData","historyRequest","historyParams","historyResponse","historyResponseData","careDashboard","dashboardRequest","dashboardResponse","dashboardResponseData","Object","quickLogRequest","quickLogResponse","careDashboardRequest","careDashboardResponse"],"mappings":"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"}