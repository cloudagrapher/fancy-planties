b523bc8f04606ea9eb64474a144fa90e
"use strict";

/* istanbul ignore next */
function cov_rl6k8yh80() {
  var path = "/Users/stefanbekker/projects/fancy-planties/src/app/api/admin/email-verification-monitor/route.ts";
  var hash = "19ee7f6583480e0685e0477700407e5914502aea";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/stefanbekker/projects/fancy-planties/src/app/api/admin/email-verification-monitor/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 18,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 19
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 20
        }
      },
      "6": {
        start: {
          line: 19,
          column: 0
        },
        end: {
          line: 19,
          column: 23
        }
      },
      "7": {
        start: {
          line: 20,
          column: 16
        },
        end: {
          line: 20,
          column: 38
        }
      },
      "8": {
        start: {
          line: 21,
          column: 34
        },
        end: {
          line: 21,
          column: 96
        }
      },
      "9": {
        start: {
          line: 22,
          column: 29
        },
        end: {
          line: 22,
          column: 86
        }
      },
      "10": {
        start: {
          line: 23,
          column: 20
        },
        end: {
          line: 23,
          column: 62
        }
      },
      "11": {
        start: {
          line: 25,
          column: 4
        },
        end: {
          line: 68,
          column: 5
        }
      },
      "12": {
        start: {
          line: 27,
          column: 27
        },
        end: {
          line: 27,
          column: 63
        }
      },
      "13": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 34,
          column: 9
        }
      },
      "14": {
        start: {
          line: 29,
          column: 12
        },
        end: {
          line: 33,
          column: 15
        }
      },
      "15": {
        start: {
          line: 35,
          column: 25
        },
        end: {
          line: 35,
          column: 35
        }
      },
      "16": {
        start: {
          line: 37,
          column: 29
        },
        end: {
          line: 37,
          column: 110
        }
      },
      "17": {
        start: {
          line: 39,
          column: 27
        },
        end: {
          line: 39,
          column: 78
        }
      },
      "18": {
        start: {
          line: 40,
          column: 28
        },
        end: {
          line: 40,
          column: 86
        }
      },
      "19": {
        start: {
          line: 41,
          column: 29
        },
        end: {
          line: 41,
          column: 89
        }
      },
      "20": {
        start: {
          line: 42,
          column: 29
        },
        end: {
          line: 42,
          column: 87
        }
      },
      "21": {
        start: {
          line: 44,
          column: 29
        },
        end: {
          line: 44,
          column: 104
        }
      },
      "22": {
        start: {
          line: 45,
          column: 31
        },
        end: {
          line: 58,
          column: 9
        }
      },
      "23": {
        start: {
          line: 59,
          column: 8
        },
        end: {
          line: 59,
          column: 57
        }
      },
      "24": {
        start: {
          line: 61,
          column: 8
        },
        end: {
          line: 61,
          column: 83
        }
      },
      "25": {
        start: {
          line: 62,
          column: 8
        },
        end: {
          line: 67,
          column: 11
        }
      },
      "26": {
        start: {
          line: 71,
          column: 4
        },
        end: {
          line: 121,
          column: 5
        }
      },
      "27": {
        start: {
          line: 73,
          column: 27
        },
        end: {
          line: 73,
          column: 63
        }
      },
      "28": {
        start: {
          line: 74,
          column: 8
        },
        end: {
          line: 80,
          column: 9
        }
      },
      "29": {
        start: {
          line: 75,
          column: 12
        },
        end: {
          line: 79,
          column: 15
        }
      },
      "30": {
        start: {
          line: 81,
          column: 25
        },
        end: {
          line: 81,
          column: 35
        }
      },
      "31": {
        start: {
          line: 82,
          column: 21
        },
        end: {
          line: 82,
          column: 41
        }
      },
      "32": {
        start: {
          line: 83,
          column: 27
        },
        end: {
          line: 83,
          column: 31
        }
      },
      "33": {
        start: {
          line: 84,
          column: 8
        },
        end: {
          line: 112,
          column: 9
        }
      },
      "34": {
        start: {
          line: 86,
          column: 38
        },
        end: {
          line: 86,
          column: 116
        }
      },
      "35": {
        start: {
          line: 87,
          column: 16
        },
        end: {
          line: 91,
          column: 19
        }
      },
      "36": {
        start: {
          line: 93,
          column: 16
        },
        end: {
          line: 93,
          column: 70
        }
      },
      "37": {
        start: {
          line: 94,
          column: 16
        },
        end: {
          line: 97,
          column: 19
        }
      },
      "38": {
        start: {
          line: 99,
          column: 37
        },
        end: {
          line: 99,
          column: 95
        }
      },
      "39": {
        start: {
          line: 100,
          column: 37
        },
        end: {
          line: 100,
          column: 98
        }
      },
      "40": {
        start: {
          line: 101,
          column: 16
        },
        end: {
          line: 105,
          column: 19
        }
      },
      "41": {
        start: {
          line: 107,
          column: 16
        },
        end: {
          line: 111,
          column: 19
        }
      },
      "42": {
        start: {
          line: 114,
          column: 8
        },
        end: {
          line: 114,
          column: 63
        }
      },
      "43": {
        start: {
          line: 115,
          column: 8
        },
        end: {
          line: 120,
          column: 11
        }
      },
      "44": {
        start: {
          line: 126,
          column: 19
        },
        end: {
          line: 126,
          column: 21
        }
      },
      "45": {
        start: {
          line: 127,
          column: 16
        },
        end: {
          line: 127,
          column: 26
        }
      },
      "46": {
        start: {
          line: 129,
          column: 4
        },
        end: {
          line: 143,
          column: 5
        }
      },
      "47": {
        start: {
          line: 130,
          column: 8
        },
        end: {
          line: 135,
          column: 11
        }
      },
      "48": {
        start: {
          line: 136,
          column: 11
        },
        end: {
          line: 143,
          column: 5
        }
      },
      "49": {
        start: {
          line: 137,
          column: 8
        },
        end: {
          line: 142,
          column: 11
        }
      },
      "50": {
        start: {
          line: 145,
          column: 4
        },
        end: {
          line: 159,
          column: 5
        }
      },
      "51": {
        start: {
          line: 146,
          column: 8
        },
        end: {
          line: 151,
          column: 11
        }
      },
      "52": {
        start: {
          line: 152,
          column: 11
        },
        end: {
          line: 159,
          column: 5
        }
      },
      "53": {
        start: {
          line: 153,
          column: 8
        },
        end: {
          line: 158,
          column: 11
        }
      },
      "54": {
        start: {
          line: 161,
          column: 4
        },
        end: {
          line: 175,
          column: 5
        }
      },
      "55": {
        start: {
          line: 162,
          column: 8
        },
        end: {
          line: 167,
          column: 11
        }
      },
      "56": {
        start: {
          line: 168,
          column: 11
        },
        end: {
          line: 175,
          column: 5
        }
      },
      "57": {
        start: {
          line: 169,
          column: 8
        },
        end: {
          line: 174,
          column: 11
        }
      },
      "58": {
        start: {
          line: 177,
          column: 33
        },
        end: {
          line: 177,
          column: 71
        }
      },
      "59": {
        start: {
          line: 178,
          column: 32
        },
        end: {
          line: 178,
          column: 71
        }
      },
      "60": {
        start: {
          line: 179,
          column: 4
        },
        end: {
          line: 186,
          column: 5
        }
      },
      "61": {
        start: {
          line: 180,
          column: 8
        },
        end: {
          line: 185,
          column: 11
        }
      },
      "62": {
        start: {
          line: 188,
          column: 4
        },
        end: {
          line: 195,
          column: 5
        }
      },
      "63": {
        start: {
          line: 189,
          column: 8
        },
        end: {
          line: 194,
          column: 11
        }
      },
      "64": {
        start: {
          line: 196,
          column: 4
        },
        end: {
          line: 196,
          column: 18
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        },
        loc: {
          start: {
            line: 12,
            column: 15
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 16
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "GET",
        decl: {
          start: {
            line: 24,
            column: 15
          },
          end: {
            line: 24,
            column: 18
          }
        },
        loc: {
          start: {
            line: 24,
            column: 28
          },
          end: {
            line: 69,
            column: 1
          }
        },
        line: 24
      },
      "4": {
        name: "POST",
        decl: {
          start: {
            line: 70,
            column: 15
          },
          end: {
            line: 70,
            column: 19
          }
        },
        loc: {
          start: {
            line: 70,
            column: 29
          },
          end: {
            line: 122,
            column: 1
          }
        },
        line: 70
      },
      "5": {
        name: "generateAlerts",
        decl: {
          start: {
            line: 125,
            column: 13
          },
          end: {
            line: 125,
            column: 27
          }
        },
        loc: {
          start: {
            line: 125,
            column: 55
          },
          end: {
            line: 197,
            column: 1
          }
        },
        line: 125
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 28,
            column: 8
          },
          end: {
            line: 34,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 28,
            column: 8
          },
          end: {
            line: 34,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 28
      },
      "1": {
        loc: {
          start: {
            line: 64,
            column: 21
          },
          end: {
            line: 64,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 64,
            column: 46
          },
          end: {
            line: 64,
            column: 59
          }
        }, {
          start: {
            line: 64,
            column: 62
          },
          end: {
            line: 64,
            column: 77
          }
        }],
        line: 64
      },
      "2": {
        loc: {
          start: {
            line: 74,
            column: 8
          },
          end: {
            line: 80,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 74,
            column: 8
          },
          end: {
            line: 80,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 74
      },
      "3": {
        loc: {
          start: {
            line: 84,
            column: 8
          },
          end: {
            line: 112,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 85,
            column: 12
          },
          end: {
            line: 91,
            column: 19
          }
        }, {
          start: {
            line: 92,
            column: 12
          },
          end: {
            line: 97,
            column: 19
          }
        }, {
          start: {
            line: 98,
            column: 12
          },
          end: {
            line: 105,
            column: 19
          }
        }, {
          start: {
            line: 106,
            column: 12
          },
          end: {
            line: 111,
            column: 19
          }
        }],
        line: 84
      },
      "4": {
        loc: {
          start: {
            line: 117,
            column: 21
          },
          end: {
            line: 117,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 117,
            column: 46
          },
          end: {
            line: 117,
            column: 59
          }
        }, {
          start: {
            line: 117,
            column: 62
          },
          end: {
            line: 117,
            column: 77
          }
        }],
        line: 117
      },
      "5": {
        loc: {
          start: {
            line: 129,
            column: 4
          },
          end: {
            line: 143,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 129,
            column: 4
          },
          end: {
            line: 143,
            column: 5
          }
        }, {
          start: {
            line: 136,
            column: 11
          },
          end: {
            line: 143,
            column: 5
          }
        }],
        line: 129
      },
      "6": {
        loc: {
          start: {
            line: 136,
            column: 11
          },
          end: {
            line: 143,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 136,
            column: 11
          },
          end: {
            line: 143,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 136
      },
      "7": {
        loc: {
          start: {
            line: 145,
            column: 4
          },
          end: {
            line: 159,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 145,
            column: 4
          },
          end: {
            line: 159,
            column: 5
          }
        }, {
          start: {
            line: 152,
            column: 11
          },
          end: {
            line: 159,
            column: 5
          }
        }],
        line: 145
      },
      "8": {
        loc: {
          start: {
            line: 152,
            column: 11
          },
          end: {
            line: 159,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 152,
            column: 11
          },
          end: {
            line: 159,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 152
      },
      "9": {
        loc: {
          start: {
            line: 161,
            column: 4
          },
          end: {
            line: 175,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 161,
            column: 4
          },
          end: {
            line: 175,
            column: 5
          }
        }, {
          start: {
            line: 168,
            column: 11
          },
          end: {
            line: 175,
            column: 5
          }
        }],
        line: 161
      },
      "10": {
        loc: {
          start: {
            line: 168,
            column: 11
          },
          end: {
            line: 175,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 168,
            column: 11
          },
          end: {
            line: 175,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 168
      },
      "11": {
        loc: {
          start: {
            line: 179,
            column: 4
          },
          end: {
            line: 186,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 179,
            column: 4
          },
          end: {
            line: 186,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 179
      },
      "12": {
        loc: {
          start: {
            line: 188,
            column: 4
          },
          end: {
            line: 195,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 188,
            column: 4
          },
          end: {
            line: 195,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 188
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0, 0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/stefanbekker/projects/fancy-planties/src/app/api/admin/email-verification-monitor/route.ts"],
      sourcesContent: ["import 'server-only';\nimport { NextRequest, NextResponse } from 'next/server';\nimport { emailVerificationCleanupService } from '@/lib/services/email-verification-cleanup';\nimport { emailServiceMonitor } from '@/lib/services/email-service-monitor';\nimport { requireAuth } from '@/lib/auth/middleware';\n\n/**\n * GET /api/admin/email-verification-monitor\n * \n * Get comprehensive monitoring data for the email verification system.\n * This endpoint provides detailed statistics about:\n * - Email service performance and quota usage\n * - Verification code statistics\n * - Rate limiting status\n * - System health indicators\n * \n * This endpoint should be protected and only accessible to administrators.\n */\nexport async function GET(request: NextRequest) {\n  try {\n    // Require authentication (in a real app, you'd also check for admin role)\n    const authResult = await requireAuth();\n    if (!authResult) {\n      return NextResponse.json(\n        { error: 'Authentication required' },\n        { status: 401 }\n      );\n    }\n    const { user } = authResult;\n    \n    // Get comprehensive system status\n    const systemStatus = await emailVerificationCleanupService.getSystemStatus();\n    \n    // Get detailed email service statistics\n    const emailStats = emailServiceMonitor.getStats();\n    const emailHealth = emailServiceMonitor.getHealthStatus();\n    const recentEvents = emailServiceMonitor.getRecentEvents(50);\n    const errorSummary = emailServiceMonitor.getErrorSummary();\n    \n    // Get cleanup statistics\n    const cleanupStats = emailVerificationCleanupService.getCleanupStats();\n    \n    const monitoringData = {\n      timestamp: Date.now(),\n      systemStatus,\n      emailService: {\n        stats: emailStats,\n        health: emailHealth,\n        recentEvents,\n        errorSummary,\n        quotaWarning: emailServiceMonitor.isQuotaNearLimit(0.8),\n        quotaCritical: emailServiceMonitor.isQuotaNearLimit(0.95),\n      },\n      cleanup: cleanupStats,\n      alerts: generateAlerts(systemStatus, emailHealth),\n    };\n    \n    return NextResponse.json(monitoringData);\n    \n  } catch (error) {\n    console.error('Error fetching email verification monitoring data:', error);\n    \n    return NextResponse.json(\n      { \n        error: 'Failed to fetch monitoring data',\n        details: error instanceof Error ? error.message : 'Unknown error'\n      },\n      { status: 500 }\n    );\n  }\n}\n\n/**\n * POST /api/admin/email-verification-monitor\n * \n * Perform administrative actions on the email verification system:\n * - Force cleanup\n * - Reset email service statistics\n * - Get detailed error reports\n */\nexport async function POST(request: NextRequest) {\n  try {\n    // Require authentication (in a real app, you'd also check for admin role)\n    const authResult = await requireAuth();\n    if (!authResult) {\n      return NextResponse.json(\n        { error: 'Authentication required' },\n        { status: 401 }\n      );\n    }\n    const { user } = authResult;\n    \n    const body = await request.json();\n    const { action } = body;\n    \n    switch (action) {\n      case 'force-cleanup':\n        const cleanupResult = await emailVerificationCleanupService.forceCleanup();\n        return NextResponse.json({\n          success: true,\n          message: 'Cleanup completed successfully',\n          result: cleanupResult,\n        });\n        \n      case 'reset-email-stats':\n        emailServiceMonitor.forceReset();\n        return NextResponse.json({\n          success: true,\n          message: 'Email service statistics reset successfully',\n        });\n        \n      case 'get-error-details':\n        const errorDetails = emailServiceMonitor.getErrorSummary();\n        const recentEvents = emailServiceMonitor.getRecentEvents(200);\n        return NextResponse.json({\n          success: true,\n          errorDetails,\n          recentEvents,\n        });\n        \n      default:\n        return NextResponse.json(\n          { error: 'Invalid action specified' },\n          { status: 400 }\n        );\n    }\n    \n  } catch (error) {\n    console.error('Error performing admin action:', error);\n    \n    return NextResponse.json(\n      { \n        error: 'Failed to perform admin action',\n        details: error instanceof Error ? error.message : 'Unknown error'\n      },\n      { status: 500 }\n    );\n  }\n}\n\n/**\n * Generate alerts based on system status\n */\nfunction generateAlerts(\n  systemStatus: any,\n  emailHealth: { status: string; issues: string[]; recommendations: string[] }\n): Array<{\n  level: 'info' | 'warning' | 'critical';\n  message: string;\n  recommendation?: string;\n  timestamp: number;\n}> {\n  const alerts = [];\n  const now = Date.now();\n  \n  // Email service alerts\n  if (emailHealth.status === 'critical') {\n    alerts.push({\n      level: 'critical' as const,\n      message: 'Email service is in critical state',\n      recommendation: emailHealth.recommendations[0],\n      timestamp: now,\n    });\n  } else if (emailHealth.status === 'warning') {\n    alerts.push({\n      level: 'warning' as const,\n      message: 'Email service requires attention',\n      recommendation: emailHealth.recommendations[0],\n      timestamp: now,\n    });\n  }\n  \n  // Quota alerts\n  if (systemStatus.emailService.quotaUsage >= 95) {\n    alerts.push({\n      level: 'critical' as const,\n      message: `Email quota critically high: ${systemStatus.emailService.quotaUsage}%`,\n      recommendation: 'Immediate action required - consider upgrading plan or implementing throttling',\n      timestamp: now,\n    });\n  } else if (systemStatus.emailService.quotaUsage >= 80) {\n    alerts.push({\n      level: 'warning' as const,\n      message: `Email quota usage high: ${systemStatus.emailService.quotaUsage}%`,\n      recommendation: 'Monitor usage closely and consider upgrading plan',\n      timestamp: now,\n    });\n  }\n  \n  // Success rate alerts\n  if (systemStatus.emailService.successRate < 80) {\n    alerts.push({\n      level: 'critical' as const,\n      message: `Email success rate critically low: ${systemStatus.emailService.successRate.toFixed(1)}%`,\n      recommendation: 'Check email service configuration and network connectivity',\n      timestamp: now,\n    });\n  } else if (systemStatus.emailService.successRate < 95) {\n    alerts.push({\n      level: 'warning' as const,\n      message: `Email success rate below optimal: ${systemStatus.emailService.successRate.toFixed(1)}%`,\n      recommendation: 'Monitor email delivery and check for configuration issues',\n      timestamp: now,\n    });\n  }\n  \n  // Cleanup alerts\n  const timeSinceLastCleanup = now - systemStatus.cleanup.lastCleanup;\n  const hoursWithoutCleanup = timeSinceLastCleanup / (60 * 60 * 1000);\n  \n  if (hoursWithoutCleanup > 25) { // More than 25 hours\n    alerts.push({\n      level: 'warning' as const,\n      message: `Cleanup hasn't run for ${Math.round(hoursWithoutCleanup)} hours`,\n      recommendation: 'Check cleanup service status and logs',\n      timestamp: now,\n    });\n  }\n  \n  // Rate limiting alerts\n  if (systemStatus.rateLimits.securityEvents > 10) {\n    alerts.push({\n      level: 'warning' as const,\n      message: `High number of security events: ${systemStatus.rateLimits.securityEvents}`,\n      recommendation: 'Review security logs for potential abuse',\n      timestamp: now,\n    });\n  }\n  \n  return alerts;\n}"],
      names: ["GET", "POST", "request", "authResult", "requireAuth", "NextResponse", "json", "error", "status", "user", "systemStatus", "emailVerificationCleanupService", "getSystemStatus", "emailStats", "emailServiceMonitor", "getStats", "emailHealth", "getHealthStatus", "recentEvents", "getRecentEvents", "errorSummary", "getErrorSummary", "cleanupStats", "getCleanupStats", "monitoringData", "timestamp", "Date", "now", "emailService", "stats", "health", "quotaWarning", "isQuotaNearLimit", "quotaCritical", "cleanup", "alerts", "generateAlerts", "console", "details", "Error", "message", "body", "action", "cleanupResult", "forceCleanup", "success", "result", "forceReset", "errorDetails", "push", "level", "recommendation", "recommendations", "quotaUsage", "successRate", "toFixed", "timeSinceLastCleanup", "lastCleanup", "hoursWithoutCleanup", "Math", "round", "rateLimits", "securityEvents"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "19ee7f6583480e0685e0477700407e5914502aea"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_rl6k8yh80 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_rl6k8yh80();
cov_rl6k8yh80().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_rl6k8yh80().f[0]++;
  cov_rl6k8yh80().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_rl6k8yh80().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_rl6k8yh80().s[3]++;
_export(exports, {
  get GET() {
    /* istanbul ignore next */
    cov_rl6k8yh80().f[1]++;
    cov_rl6k8yh80().s[4]++;
    return GET;
  },
  get POST() {
    /* istanbul ignore next */
    cov_rl6k8yh80().f[2]++;
    cov_rl6k8yh80().s[5]++;
    return POST;
  }
});
/* istanbul ignore next */
cov_rl6k8yh80().s[6]++;
require("server-only");
const _server =
/* istanbul ignore next */
(cov_rl6k8yh80().s[7]++, require("next/server"));
const _emailverificationcleanup =
/* istanbul ignore next */
(cov_rl6k8yh80().s[8]++, require("../../../../lib/services/email-verification-cleanup"));
const _emailservicemonitor =
/* istanbul ignore next */
(cov_rl6k8yh80().s[9]++, require("../../../../lib/services/email-service-monitor"));
const _middleware =
/* istanbul ignore next */
(cov_rl6k8yh80().s[10]++, require("../../../../lib/auth/middleware"));
async function GET(request) {
  /* istanbul ignore next */
  cov_rl6k8yh80().f[3]++;
  cov_rl6k8yh80().s[11]++;
  try {
    // Require authentication (in a real app, you'd also check for admin role)
    const authResult =
    /* istanbul ignore next */
    (cov_rl6k8yh80().s[12]++, await (0, _middleware.requireAuth)());
    /* istanbul ignore next */
    cov_rl6k8yh80().s[13]++;
    if (!authResult) {
      /* istanbul ignore next */
      cov_rl6k8yh80().b[0][0]++;
      cov_rl6k8yh80().s[14]++;
      return _server.NextResponse.json({
        error: 'Authentication required'
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_rl6k8yh80().b[0][1]++;
    }
    const {
      user
    } =
    /* istanbul ignore next */
    (cov_rl6k8yh80().s[15]++, authResult);
    // Get comprehensive system status
    const systemStatus =
    /* istanbul ignore next */
    (cov_rl6k8yh80().s[16]++, await _emailverificationcleanup.emailVerificationCleanupService.getSystemStatus());
    // Get detailed email service statistics
    const emailStats =
    /* istanbul ignore next */
    (cov_rl6k8yh80().s[17]++, _emailservicemonitor.emailServiceMonitor.getStats());
    const emailHealth =
    /* istanbul ignore next */
    (cov_rl6k8yh80().s[18]++, _emailservicemonitor.emailServiceMonitor.getHealthStatus());
    const recentEvents =
    /* istanbul ignore next */
    (cov_rl6k8yh80().s[19]++, _emailservicemonitor.emailServiceMonitor.getRecentEvents(50));
    const errorSummary =
    /* istanbul ignore next */
    (cov_rl6k8yh80().s[20]++, _emailservicemonitor.emailServiceMonitor.getErrorSummary());
    // Get cleanup statistics
    const cleanupStats =
    /* istanbul ignore next */
    (cov_rl6k8yh80().s[21]++, _emailverificationcleanup.emailVerificationCleanupService.getCleanupStats());
    const monitoringData =
    /* istanbul ignore next */
    (cov_rl6k8yh80().s[22]++, {
      timestamp: Date.now(),
      systemStatus,
      emailService: {
        stats: emailStats,
        health: emailHealth,
        recentEvents,
        errorSummary,
        quotaWarning: _emailservicemonitor.emailServiceMonitor.isQuotaNearLimit(0.8),
        quotaCritical: _emailservicemonitor.emailServiceMonitor.isQuotaNearLimit(0.95)
      },
      cleanup: cleanupStats,
      alerts: generateAlerts(systemStatus, emailHealth)
    });
    /* istanbul ignore next */
    cov_rl6k8yh80().s[23]++;
    return _server.NextResponse.json(monitoringData);
  } catch (error) {
    /* istanbul ignore next */
    cov_rl6k8yh80().s[24]++;
    console.error('Error fetching email verification monitoring data:', error);
    /* istanbul ignore next */
    cov_rl6k8yh80().s[25]++;
    return _server.NextResponse.json({
      error: 'Failed to fetch monitoring data',
      details: error instanceof Error ?
      /* istanbul ignore next */
      (cov_rl6k8yh80().b[1][0]++, error.message) :
      /* istanbul ignore next */
      (cov_rl6k8yh80().b[1][1]++, 'Unknown error')
    }, {
      status: 500
    });
  }
}
async function POST(request) {
  /* istanbul ignore next */
  cov_rl6k8yh80().f[4]++;
  cov_rl6k8yh80().s[26]++;
  try {
    // Require authentication (in a real app, you'd also check for admin role)
    const authResult =
    /* istanbul ignore next */
    (cov_rl6k8yh80().s[27]++, await (0, _middleware.requireAuth)());
    /* istanbul ignore next */
    cov_rl6k8yh80().s[28]++;
    if (!authResult) {
      /* istanbul ignore next */
      cov_rl6k8yh80().b[2][0]++;
      cov_rl6k8yh80().s[29]++;
      return _server.NextResponse.json({
        error: 'Authentication required'
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_rl6k8yh80().b[2][1]++;
    }
    const {
      user
    } =
    /* istanbul ignore next */
    (cov_rl6k8yh80().s[30]++, authResult);
    const body =
    /* istanbul ignore next */
    (cov_rl6k8yh80().s[31]++, await request.json());
    const {
      action
    } =
    /* istanbul ignore next */
    (cov_rl6k8yh80().s[32]++, body);
    /* istanbul ignore next */
    cov_rl6k8yh80().s[33]++;
    switch (action) {
      case 'force-cleanup':
        /* istanbul ignore next */
        cov_rl6k8yh80().b[3][0]++;
        const cleanupResult =
        /* istanbul ignore next */
        (cov_rl6k8yh80().s[34]++, await _emailverificationcleanup.emailVerificationCleanupService.forceCleanup());
        /* istanbul ignore next */
        cov_rl6k8yh80().s[35]++;
        return _server.NextResponse.json({
          success: true,
          message: 'Cleanup completed successfully',
          result: cleanupResult
        });
      case 'reset-email-stats':
        /* istanbul ignore next */
        cov_rl6k8yh80().b[3][1]++;
        cov_rl6k8yh80().s[36]++;
        _emailservicemonitor.emailServiceMonitor.forceReset();
        /* istanbul ignore next */
        cov_rl6k8yh80().s[37]++;
        return _server.NextResponse.json({
          success: true,
          message: 'Email service statistics reset successfully'
        });
      case 'get-error-details':
        /* istanbul ignore next */
        cov_rl6k8yh80().b[3][2]++;
        const errorDetails =
        /* istanbul ignore next */
        (cov_rl6k8yh80().s[38]++, _emailservicemonitor.emailServiceMonitor.getErrorSummary());
        const recentEvents =
        /* istanbul ignore next */
        (cov_rl6k8yh80().s[39]++, _emailservicemonitor.emailServiceMonitor.getRecentEvents(200));
        /* istanbul ignore next */
        cov_rl6k8yh80().s[40]++;
        return _server.NextResponse.json({
          success: true,
          errorDetails,
          recentEvents
        });
      default:
        /* istanbul ignore next */
        cov_rl6k8yh80().b[3][3]++;
        cov_rl6k8yh80().s[41]++;
        return _server.NextResponse.json({
          error: 'Invalid action specified'
        }, {
          status: 400
        });
    }
  } catch (error) {
    /* istanbul ignore next */
    cov_rl6k8yh80().s[42]++;
    console.error('Error performing admin action:', error);
    /* istanbul ignore next */
    cov_rl6k8yh80().s[43]++;
    return _server.NextResponse.json({
      error: 'Failed to perform admin action',
      details: error instanceof Error ?
      /* istanbul ignore next */
      (cov_rl6k8yh80().b[4][0]++, error.message) :
      /* istanbul ignore next */
      (cov_rl6k8yh80().b[4][1]++, 'Unknown error')
    }, {
      status: 500
    });
  }
}
/**
 * Generate alerts based on system status
 */
function generateAlerts(systemStatus, emailHealth) {
  /* istanbul ignore next */
  cov_rl6k8yh80().f[5]++;
  const alerts =
  /* istanbul ignore next */
  (cov_rl6k8yh80().s[44]++, []);
  const now =
  /* istanbul ignore next */
  (cov_rl6k8yh80().s[45]++, Date.now());
  // Email service alerts
  /* istanbul ignore next */
  cov_rl6k8yh80().s[46]++;
  if (emailHealth.status === 'critical') {
    /* istanbul ignore next */
    cov_rl6k8yh80().b[5][0]++;
    cov_rl6k8yh80().s[47]++;
    alerts.push({
      level: 'critical',
      message: 'Email service is in critical state',
      recommendation: emailHealth.recommendations[0],
      timestamp: now
    });
  } else {
    /* istanbul ignore next */
    cov_rl6k8yh80().b[5][1]++;
    cov_rl6k8yh80().s[48]++;
    if (emailHealth.status === 'warning') {
      /* istanbul ignore next */
      cov_rl6k8yh80().b[6][0]++;
      cov_rl6k8yh80().s[49]++;
      alerts.push({
        level: 'warning',
        message: 'Email service requires attention',
        recommendation: emailHealth.recommendations[0],
        timestamp: now
      });
    } else
    /* istanbul ignore next */
    {
      cov_rl6k8yh80().b[6][1]++;
    }
  }
  // Quota alerts
  /* istanbul ignore next */
  cov_rl6k8yh80().s[50]++;
  if (systemStatus.emailService.quotaUsage >= 95) {
    /* istanbul ignore next */
    cov_rl6k8yh80().b[7][0]++;
    cov_rl6k8yh80().s[51]++;
    alerts.push({
      level: 'critical',
      message: `Email quota critically high: ${systemStatus.emailService.quotaUsage}%`,
      recommendation: 'Immediate action required - consider upgrading plan or implementing throttling',
      timestamp: now
    });
  } else {
    /* istanbul ignore next */
    cov_rl6k8yh80().b[7][1]++;
    cov_rl6k8yh80().s[52]++;
    if (systemStatus.emailService.quotaUsage >= 80) {
      /* istanbul ignore next */
      cov_rl6k8yh80().b[8][0]++;
      cov_rl6k8yh80().s[53]++;
      alerts.push({
        level: 'warning',
        message: `Email quota usage high: ${systemStatus.emailService.quotaUsage}%`,
        recommendation: 'Monitor usage closely and consider upgrading plan',
        timestamp: now
      });
    } else
    /* istanbul ignore next */
    {
      cov_rl6k8yh80().b[8][1]++;
    }
  }
  // Success rate alerts
  /* istanbul ignore next */
  cov_rl6k8yh80().s[54]++;
  if (systemStatus.emailService.successRate < 80) {
    /* istanbul ignore next */
    cov_rl6k8yh80().b[9][0]++;
    cov_rl6k8yh80().s[55]++;
    alerts.push({
      level: 'critical',
      message: `Email success rate critically low: ${systemStatus.emailService.successRate.toFixed(1)}%`,
      recommendation: 'Check email service configuration and network connectivity',
      timestamp: now
    });
  } else {
    /* istanbul ignore next */
    cov_rl6k8yh80().b[9][1]++;
    cov_rl6k8yh80().s[56]++;
    if (systemStatus.emailService.successRate < 95) {
      /* istanbul ignore next */
      cov_rl6k8yh80().b[10][0]++;
      cov_rl6k8yh80().s[57]++;
      alerts.push({
        level: 'warning',
        message: `Email success rate below optimal: ${systemStatus.emailService.successRate.toFixed(1)}%`,
        recommendation: 'Monitor email delivery and check for configuration issues',
        timestamp: now
      });
    } else
    /* istanbul ignore next */
    {
      cov_rl6k8yh80().b[10][1]++;
    }
  }
  // Cleanup alerts
  const timeSinceLastCleanup =
  /* istanbul ignore next */
  (cov_rl6k8yh80().s[58]++, now - systemStatus.cleanup.lastCleanup);
  const hoursWithoutCleanup =
  /* istanbul ignore next */
  (cov_rl6k8yh80().s[59]++, timeSinceLastCleanup / (60 * 60 * 1000));
  /* istanbul ignore next */
  cov_rl6k8yh80().s[60]++;
  if (hoursWithoutCleanup > 25) {
    /* istanbul ignore next */
    cov_rl6k8yh80().b[11][0]++;
    cov_rl6k8yh80().s[61]++;
    alerts.push({
      level: 'warning',
      message: `Cleanup hasn't run for ${Math.round(hoursWithoutCleanup)} hours`,
      recommendation: 'Check cleanup service status and logs',
      timestamp: now
    });
  } else
  /* istanbul ignore next */
  {
    cov_rl6k8yh80().b[11][1]++;
  }
  // Rate limiting alerts
  cov_rl6k8yh80().s[62]++;
  if (systemStatus.rateLimits.securityEvents > 10) {
    /* istanbul ignore next */
    cov_rl6k8yh80().b[12][0]++;
    cov_rl6k8yh80().s[63]++;
    alerts.push({
      level: 'warning',
      message: `High number of security events: ${systemStatus.rateLimits.securityEvents}`,
      recommendation: 'Review security logs for potential abuse',
      timestamp: now
    });
  } else
  /* istanbul ignore next */
  {
    cov_rl6k8yh80().b[12][1]++;
  }
  cov_rl6k8yh80().s[64]++;
  return alerts;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,