{"version":3,"sources":["/Users/stefanbekker/projects/fancy-planties/src/test-utils/helpers/api-helpers.js"],"sourcesContent":["// API test helpers\n\nimport { createTestUser, createTestSession } from '../factories/user-factory';\n\n// Store original fetch for restoration\nconst originalFetch = global.fetch;\n\n/**\n * Mock fetch responses for API testing\n * @param {Object} responses - Object mapping URL patterns to response data\n * @param {Object} options - Mock options\n */\nexport const mockApiResponse = (responses, options = {}) => {\n  const { defaultStatus = 200, defaultHeaders = { 'Content-Type': 'application/json' } } = options;\n  \n  global.fetch = jest.fn((url, requestOptions = {}) => {\n    const urlString = url.toString();\n    const method = requestOptions.method || 'GET';\n    \n    // Find matching response pattern\n    for (const [pattern, responseConfig] of Object.entries(responses)) {\n      const [patternMethod, patternUrl] = pattern.includes(' ') \n        ? pattern.split(' ', 2) \n        : ['GET', pattern];\n      \n      if (method === patternMethod && urlString.includes(patternUrl)) {\n        const response = typeof responseConfig === 'function' \n          ? responseConfig(url, requestOptions)\n          : responseConfig;\n        \n        return Promise.resolve({\n          ok: response.status ? response.status < 400 : true,\n          status: response.status || defaultStatus,\n          statusText: response.statusText || 'OK',\n          headers: new Headers(response.headers || defaultHeaders),\n          json: () => Promise.resolve(response.data || response),\n          text: () => Promise.resolve(JSON.stringify(response.data || response)),\n          blob: () => Promise.resolve(new Blob([JSON.stringify(response.data || response)])),\n        });\n      }\n    }\n    \n    // Default 404 response for unmatched requests\n    return Promise.resolve({\n      ok: false,\n      status: 404,\n      statusText: 'Not Found',\n      headers: new Headers(defaultHeaders),\n      json: () => Promise.resolve({ error: 'Not found' }),\n      text: () => Promise.resolve(JSON.stringify({ error: 'Not found' })),\n    });\n  });\n};\n\n/**\n * Mock API error responses\n * @param {string} urlPattern - URL pattern to match\n * @param {number} status - HTTP status code\n * @param {Object} errorData - Error response data\n * @param {string} method - HTTP method (default: 'GET')\n */\nexport const mockApiError = (urlPattern, status = 500, errorData = { error: 'Internal server error' }, method = 'GET') => {\n  const pattern = `${method} ${urlPattern}`;\n  \n  mockApiResponse({\n    [pattern]: {\n      status,\n      statusText: getStatusText(status),\n      data: errorData,\n    }\n  });\n};\n\n/**\n * Mock successful API responses\n * @param {Object} responses - Object mapping URL patterns to success data\n */\nexport const mockApiSuccess = (responses) => {\n  const successResponses = {};\n  \n  for (const [pattern, data] of Object.entries(responses)) {\n    successResponses[pattern] = {\n      status: 200,\n      statusText: 'OK',\n      data,\n    };\n  }\n  \n  mockApiResponse(successResponses);\n};\n\n/**\n * Create authenticated API request headers\n * @param {Object} user - User object (optional, will create test user if not provided)\n * @param {Object} session - Session object (optional, will create test session if not provided)\n * @returns {Object} Headers object with authentication\n */\nexport const createAuthHeaders = (user = null, session = null) => {\n  const testUser = user || createTestUser();\n  const testSession = session || createTestSession(testUser);\n  \n  return {\n    'Content-Type': 'application/json',\n    'Cookie': `auth-session=${testSession.id}`,\n    'Authorization': `Bearer ${testSession.id}`,\n  };\n};\n\n/**\n * Mock authenticated API requests\n * @param {Object} responses - Response configurations\n * @param {Object} user - User object for authentication\n * @param {Object} session - Session object for authentication\n */\nexport const mockAuthenticatedApi = (responses, user = null, session = null) => {\n  const authHeaders = createAuthHeaders(user, session);\n  \n  global.fetch = jest.fn((url, requestOptions = {}) => {\n    const urlString = url.toString();\n    const method = requestOptions.method || 'GET';\n    const hasAuthHeader = requestOptions.headers && \n      (requestOptions.headers['Cookie'] || requestOptions.headers['Authorization']);\n    \n    // Check if request has authentication\n    if (!hasAuthHeader) {\n      return Promise.resolve({\n        ok: false,\n        status: 401,\n        statusText: 'Unauthorized',\n        headers: new Headers({ 'Content-Type': 'application/json' }),\n        json: () => Promise.resolve({ error: 'Authentication required' }),\n        text: () => Promise.resolve(JSON.stringify({ error: 'Authentication required' })),\n      });\n    }\n    \n    // Find matching response\n    for (const [pattern, responseConfig] of Object.entries(responses)) {\n      const [patternMethod, patternUrl] = pattern.includes(' ') \n        ? pattern.split(' ', 2) \n        : ['GET', pattern];\n      \n      if (method === patternMethod && urlString.includes(patternUrl)) {\n        const response = typeof responseConfig === 'function' \n          ? responseConfig(url, requestOptions)\n          : responseConfig;\n        \n        return Promise.resolve({\n          ok: response.status ? response.status < 400 : true,\n          status: response.status || 200,\n          statusText: response.statusText || 'OK',\n          headers: new Headers(response.headers || { 'Content-Type': 'application/json' }),\n          json: () => Promise.resolve(response.data || response),\n          text: () => Promise.resolve(JSON.stringify(response.data || response)),\n        });\n      }\n    }\n    \n    // Default 404 for unmatched authenticated requests\n    return Promise.resolve({\n      ok: false,\n      status: 404,\n      statusText: 'Not Found',\n      headers: new Headers({ 'Content-Type': 'application/json' }),\n      json: () => Promise.resolve({ error: 'Endpoint not found' }),\n      text: () => Promise.resolve(JSON.stringify({ error: 'Endpoint not found' })),\n    });\n  });\n};\n\n/**\n * Verify that an API call was made with expected parameters\n * @param {string} expectedUrl - Expected URL or URL pattern\n * @param {Object} expectedOptions - Expected request options\n * @param {string} method - Expected HTTP method\n */\nexport const expectApiCall = (expectedUrl, expectedOptions = {}, method = 'GET') => {\n  expect(global.fetch).toHaveBeenCalledWith(\n    expect.stringContaining(expectedUrl),\n    expect.objectContaining({\n      method,\n      ...expectedOptions,\n    })\n  );\n};\n\n/**\n * Verify that an authenticated API call was made\n * @param {string} expectedUrl - Expected URL or URL pattern\n * @param {Object} expectedOptions - Expected request options\n * @param {string} method - Expected HTTP method\n */\nexport const expectAuthenticatedApiCall = (expectedUrl, expectedOptions = {}, method = 'GET') => {\n  expect(global.fetch).toHaveBeenCalledWith(\n    expect.stringContaining(expectedUrl),\n    expect.objectContaining({\n      method,\n      headers: expect.objectContaining({\n        'Content-Type': 'application/json',\n      }),\n      ...expectedOptions,\n    })\n  );\n};\n\n/**\n * Verify that an API call was made with specific request body\n * @param {string} expectedUrl - Expected URL or URL pattern\n * @param {Object} expectedBody - Expected request body data\n * @param {string} method - Expected HTTP method\n */\nexport const expectApiCallWithBody = (expectedUrl, expectedBody, method = 'POST') => {\n  expect(global.fetch).toHaveBeenCalledWith(\n    expect.stringContaining(expectedUrl),\n    expect.objectContaining({\n      method,\n      headers: expect.objectContaining({\n        'Content-Type': 'application/json',\n      }),\n      body: JSON.stringify(expectedBody),\n    })\n  );\n};\n\n/**\n * Get the number of times an API endpoint was called\n * @param {string} urlPattern - URL pattern to match\n * @param {string} method - HTTP method (optional)\n * @returns {number} Number of matching calls\n */\nexport const getApiCallCount = (urlPattern, method = null) => {\n  if (!global.fetch || !global.fetch.mock) {\n    return 0;\n  }\n  \n  return global.fetch.mock.calls.filter(([url, options]) => {\n    const urlMatches = url.toString().includes(urlPattern);\n    const methodMatches = !method || (options && options.method === method) || (!options && method === 'GET');\n    return urlMatches && methodMatches;\n  }).length;\n};\n\n/**\n * Get all API calls made during testing\n * @returns {Array} Array of call information objects\n */\nexport const getAllApiCalls = () => {\n  if (!global.fetch || !global.fetch.mock) {\n    return [];\n  }\n  \n  return global.fetch.mock.calls.map(([url, options = {}]) => ({\n    url: url.toString(),\n    method: options.method || 'GET',\n    headers: options.headers || {},\n    body: options.body ? JSON.parse(options.body) : null,\n  }));\n};\n\n/**\n * Reset API mocks and restore original fetch\n */\nexport const resetApiMocks = () => {\n  if (global.fetch && global.fetch.mockRestore) {\n    global.fetch.mockRestore();\n  }\n  \n  if (originalFetch) {\n    global.fetch = originalFetch;\n  }\n  \n  jest.clearAllMocks();\n};\n\n/**\n * Database test helpers for API testing\n */\nexport const databaseTestHelpers = {\n  /**\n   * Mock database operations for testing\n   * @param {Object} mockData - Mock data to return from database operations\n   */\n  mockDatabaseOperations: (mockData = {}) => {\n    // Mock common database operations\n    const mockDb = {\n      select: jest.fn().mockReturnThis(),\n      from: jest.fn().mockReturnThis(),\n      where: jest.fn().mockReturnThis(),\n      insert: jest.fn().mockReturnThis(),\n      values: jest.fn().mockReturnThis(),\n      update: jest.fn().mockReturnThis(),\n      set: jest.fn().mockReturnThis(),\n      delete: jest.fn().mockReturnThis(),\n      returning: jest.fn().mockResolvedValue(mockData.returning || []),\n      execute: jest.fn().mockResolvedValue(mockData.execute || []),\n    };\n    \n    // Mock the database module\n    jest.doMock('@/lib/db', () => ({\n      db: mockDb,\n    }));\n    \n    return mockDb;\n  },\n\n  /**\n   * Create test database transaction mock\n   * @returns {Object} Mock transaction object\n   */\n  createMockTransaction: () => {\n    return {\n      select: jest.fn().mockReturnThis(),\n      from: jest.fn().mockReturnThis(),\n      where: jest.fn().mockReturnThis(),\n      insert: jest.fn().mockReturnThis(),\n      values: jest.fn().mockReturnThis(),\n      update: jest.fn().mockReturnThis(),\n      set: jest.fn().mockReturnThis(),\n      delete: jest.fn().mockReturnThis(),\n      returning: jest.fn().mockResolvedValue([]),\n      execute: jest.fn().mockResolvedValue([]),\n      rollback: jest.fn().mockResolvedValue(undefined),\n      commit: jest.fn().mockResolvedValue(undefined),\n    };\n  },\n\n  /**\n   * Mock authentication functions for API testing\n   * @param {Object} user - User object to return from auth functions\n   * @param {Object} session - Session object to return from auth functions\n   */\n  mockAuthFunctions: (user = null, session = null) => {\n    const testUser = user || createTestUser();\n    const testSession = session || createTestSession(testUser);\n    \n    jest.doMock('@/lib/auth/server', () => ({\n      validateRequest: jest.fn().mockResolvedValue({\n        user: testUser,\n        session: testSession,\n      }),\n      requireAuthSession: jest.fn().mockResolvedValue({\n        user: testUser,\n        session: testSession,\n      }),\n      isAuthenticated: jest.fn().mockResolvedValue(true),\n    }));\n    \n    return { user: testUser, session: testSession };\n  },\n\n  /**\n   * Mock unauthenticated state for API testing\n   */\n  mockUnauthenticatedState: () => {\n    jest.doMock('@/lib/auth/server', () => ({\n      validateRequest: jest.fn().mockResolvedValue({\n        user: null,\n        session: null,\n      }),\n      requireAuthSession: jest.fn().mockRejectedValue(new Error('Unauthorized')),\n      isAuthenticated: jest.fn().mockResolvedValue(false),\n    }));\n  },\n};\n\n/**\n * Common API response patterns for testing\n */\nexport const apiResponsePatterns = {\n  /**\n   * Success response pattern\n   * @param {*} data - Response data\n   * @param {string} message - Success message\n   */\n  success: (data, message = 'Success') => ({\n    success: true,\n    message,\n    data,\n  }),\n\n  /**\n   * Error response pattern\n   * @param {string} message - Error message\n   * @param {string} code - Error code\n   * @param {*} details - Additional error details\n   */\n  error: (message, code = 'ERROR', details = null) => ({\n    success: false,\n    error: message,\n    code,\n    details,\n  }),\n\n  /**\n   * Validation error response pattern\n   * @param {Array} errors - Array of validation errors\n   */\n  validationError: (errors) => ({\n    success: false,\n    error: 'Validation failed',\n    code: 'VALIDATION_ERROR',\n    details: errors,\n  }),\n\n  /**\n   * Paginated response pattern\n   * @param {Array} items - Array of items\n   * @param {number} page - Current page\n   * @param {number} limit - Items per page\n   * @param {number} total - Total number of items\n   */\n  paginated: (items, page = 1, limit = 10, total = null) => ({\n    success: true,\n    data: items,\n    pagination: {\n      page,\n      limit,\n      total: total || items.length,\n      totalPages: Math.ceil((total || items.length) / limit),\n    },\n  }),\n};\n\n/**\n * Get HTTP status text for status codes\n * @param {number} status - HTTP status code\n * @returns {string} Status text\n */\nfunction getStatusText(status) {\n  const statusTexts = {\n    200: 'OK',\n    201: 'Created',\n    204: 'No Content',\n    400: 'Bad Request',\n    401: 'Unauthorized',\n    403: 'Forbidden',\n    404: 'Not Found',\n    409: 'Conflict',\n    422: 'Unprocessable Entity',\n    500: 'Internal Server Error',\n  };\n  \n  return statusTexts[status] || 'Unknown';\n}"],"names":["apiResponsePatterns","createAuthHeaders","databaseTestHelpers","expectApiCall","expectApiCallWithBody","expectAuthenticatedApiCall","getAllApiCalls","getApiCallCount","mockApiError","mockApiResponse","mockApiSuccess","mockAuthenticatedApi","resetApiMocks","originalFetch","global","fetch","responses","options","defaultStatus","defaultHeaders","jest","fn","url","requestOptions","urlString","toString","method","pattern","responseConfig","Object","entries","patternMethod","patternUrl","includes","split","response","Promise","resolve","ok","status","statusText","headers","Headers","json","data","text","JSON","stringify","blob","Blob","error","urlPattern","errorData","getStatusText","successResponses","user","session","testUser","createTestUser","testSession","createTestSession","id","authHeaders","hasAuthHeader","expectedUrl","expectedOptions","expect","toHaveBeenCalledWith","stringContaining","objectContaining","expectedBody","body","mock","calls","filter","urlMatches","methodMatches","length","map","parse","mockRestore","clearAllMocks","mockDatabaseOperations","mockData","mockDb","select","mockReturnThis","from","where","insert","values","update","set","delete","returning","mockResolvedValue","execute","doMock","db","createMockTransaction","rollback","undefined","commit","mockAuthFunctions","validateRequest","requireAuthSession","isAuthenticated","mockUnauthenticatedState","mockRejectedValue","Error","success","message","code","details","validationError","errors","paginated","items","page","limit","total","pagination","totalPages","Math","ceil","statusTexts"],"mappings":"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"}