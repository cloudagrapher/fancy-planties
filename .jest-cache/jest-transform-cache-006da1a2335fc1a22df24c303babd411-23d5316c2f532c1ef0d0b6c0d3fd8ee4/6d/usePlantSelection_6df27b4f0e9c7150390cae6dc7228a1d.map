{"version":3,"names":["cov_1x8k4f7lf2","actualCoverage","s","useMultiplePlantSelection","f","usePlantSelection","initialPlant","b","onSelectionChange","selectedPlant","setSelectedPlant","_react","useState","selectPlant","useCallback","plant","clearSelection","isSelected","plantId","id","initialPlants","maxSelections","selectedPlants","setSelectedPlants","prev","some","p","length","newSelection","deselectPlant","filter","togglePlant","isCurrentlySelected","clearSelections","canSelectMore","selectionCount"],"sources":["/Users/stefanbekker/projects/fancy-planties/src/hooks/usePlantSelection.ts"],"sourcesContent":["'use client';\n\nimport { useState, useCallback } from 'react';\nimport type { PlantSuggestion } from '@/lib/validation/plant-schemas';\n\ninterface UsePlantSelectionOptions {\n  initialPlant?: PlantSuggestion | null;\n  onSelectionChange?: (plant: PlantSuggestion | null) => void;\n}\n\ninterface UsePlantSelectionReturn {\n  selectedPlant: PlantSuggestion | null;\n  selectPlant: (plant: PlantSuggestion | null) => void;\n  clearSelection: () => void;\n  isSelected: (plantId: number) => boolean;\n}\n\nexport function usePlantSelection({\n  initialPlant = null,\n  onSelectionChange,\n}: UsePlantSelectionOptions = {}): UsePlantSelectionReturn {\n  const [selectedPlant, setSelectedPlant] = useState<PlantSuggestion | null>(initialPlant);\n\n  const selectPlant = useCallback((plant: PlantSuggestion | null) => {\n    setSelectedPlant(plant);\n    onSelectionChange?.(plant);\n  }, [onSelectionChange]);\n\n  const clearSelection = useCallback(() => {\n    selectPlant(null);\n  }, [selectPlant]);\n\n  const isSelected = useCallback((plantId: number) => {\n    return selectedPlant?.id === plantId;\n  }, [selectedPlant]);\n\n  return {\n    selectedPlant,\n    selectPlant,\n    clearSelection,\n    isSelected,\n  };\n}\n\n// Hook for managing multiple plant selections\ninterface UseMultiplePlantSelectionOptions {\n  initialPlants?: PlantSuggestion[];\n  maxSelections?: number;\n  onSelectionChange?: (plants: PlantSuggestion[]) => void;\n}\n\ninterface UseMultiplePlantSelectionReturn {\n  selectedPlants: PlantSuggestion[];\n  selectPlant: (plant: PlantSuggestion) => void;\n  deselectPlant: (plantId: number) => void;\n  togglePlant: (plant: PlantSuggestion) => void;\n  clearSelections: () => void;\n  isSelected: (plantId: number) => boolean;\n  canSelectMore: boolean;\n  selectionCount: number;\n}\n\nexport function useMultiplePlantSelection({\n  initialPlants = [],\n  maxSelections,\n  onSelectionChange,\n}: UseMultiplePlantSelectionOptions = {}): UseMultiplePlantSelectionReturn {\n  const [selectedPlants, setSelectedPlants] = useState<PlantSuggestion[]>(initialPlants);\n\n  const selectPlant = useCallback((plant: PlantSuggestion) => {\n    setSelectedPlants(prev => {\n      // Don't add if already selected\n      if (prev.some(p => p.id === plant.id)) {\n        return prev;\n      }\n\n      // Don't add if at max capacity\n      if (maxSelections && prev.length >= maxSelections) {\n        return prev;\n      }\n\n      const newSelection = [...prev, plant];\n      onSelectionChange?.(newSelection);\n      return newSelection;\n    });\n  }, [maxSelections, onSelectionChange]);\n\n  const deselectPlant = useCallback((plantId: number) => {\n    setSelectedPlants(prev => {\n      const newSelection = prev.filter(p => p.id !== plantId);\n      onSelectionChange?.(newSelection);\n      return newSelection;\n    });\n  }, [onSelectionChange]);\n\n  const togglePlant = useCallback((plant: PlantSuggestion) => {\n    setSelectedPlants(prev => {\n      const isCurrentlySelected = prev.some(p => p.id === plant.id);\n      \n      if (isCurrentlySelected) {\n        const newSelection = prev.filter(p => p.id !== plant.id);\n        onSelectionChange?.(newSelection);\n        return newSelection;\n      } else {\n        // Don't add if at max capacity\n        if (maxSelections && prev.length >= maxSelections) {\n          return prev;\n        }\n\n        const newSelection = [...prev, plant];\n        onSelectionChange?.(newSelection);\n        return newSelection;\n      }\n    });\n  }, [maxSelections, onSelectionChange]);\n\n  const clearSelections = useCallback(() => {\n    setSelectedPlants([]);\n    onSelectionChange?.([]);\n  }, [onSelectionChange]);\n\n  const isSelected = useCallback((plantId: number) => {\n    return selectedPlants.some(p => p.id === plantId);\n  }, [selectedPlants]);\n\n  const canSelectMore = !maxSelections || selectedPlants.length < maxSelections;\n  const selectionCount = selectedPlants.length;\n\n  return {\n    selectedPlants,\n    selectPlant,\n    deselectPlant,\n    togglePlant,\n    clearSelections,\n    isSelected,\n    canSelectMore,\n    selectionCount,\n  };\n}"],"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","ignoreList":[]}