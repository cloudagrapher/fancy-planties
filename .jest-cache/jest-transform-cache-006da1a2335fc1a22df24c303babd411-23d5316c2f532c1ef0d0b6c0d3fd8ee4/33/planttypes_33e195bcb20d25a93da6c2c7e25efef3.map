{"version":3,"names":["cov_cr2bsrwva","actualCoverage","s","plantHelpers","createDisplayName","plant","f","b","commonName","genus","species","createScientificName","createFullTaxonomy","family","enhancePlant","displayName","scientificName","fullTaxonomy","areTaxonomicallyEqual","plant1","plant2","toLowerCase","generateSearchKeywords","keywords","commonNameParts","split","filter","part","length","push","Set"],"sources":["/Users/stefanbekker/projects/fancy-planties/src/lib/types/plant-types.ts"],"sourcesContent":["import type { Plant } from '@/lib/db/schema';\nimport type { PlantSuggestion, FuzzySearchConfig } from '@/lib/validation/plant-schemas';\n\n// Enhanced Plant interface with computed properties\nexport interface EnhancedPlant extends Plant {\n  // Computed display name\n  displayName: string;\n  // Scientific name (Genus species)\n  scientificName: string;\n  // Full taxonomy string\n  fullTaxonomy: string;\n  // Search relevance score (for search results)\n  relevanceScore?: number;\n  // Matched search terms (for highlighting)\n  matchedTerms?: string[];\n}\n\n// Plant with usage statistics\nexport interface PlantWithStats extends EnhancedPlant {\n  instanceCount: number;\n  propagationCount: number;\n  popularityScore: number;\n  lastUsed?: Date;\n}\n\n// Plant search result interface\nexport interface PlantSearchResult {\n  plants: PlantSuggestion[];\n  totalCount: number;\n  hasMore: boolean;\n  searchTime: number;\n  suggestions?: string[]; // Alternative search suggestions\n}\n\n// Plant taxonomy hierarchy for browsing\nexport interface TaxonomyHierarchy {\n  families: Array<{\n    name: string;\n    count: number;\n    genera: Array<{\n      name: string;\n      count: number;\n      species: Array<{\n        name: string;\n        count: number;\n        plants: PlantSuggestion[];\n      }>;\n    }>;\n  }>;\n}\n\n// Recent and popular plants for quick selection\nexport interface QuickSelectPlants {\n  recent: PlantSuggestion[];\n  popular: PlantSuggestion[];\n  verified: PlantSuggestion[];\n}\n\n// Plant creation context for tracking user contributions\nexport interface PlantCreationContext {\n  userId: number;\n  source: 'manual' | 'csv_import' | 'api_import';\n  confidence: number; // 0-1 scale for data quality\n  needsVerification: boolean;\n}\n\n// Fuzzy search match result\nexport interface FuzzyMatchResult {\n  item: PlantSuggestion;\n  score: number;\n  matches: Array<{\n    field: string;\n    value: string;\n    indices: number[][];\n  }>;\n}\n\n// Plant lookup options\nexport interface PlantLookupOptions {\n  fuzzyConfig?: Partial<FuzzySearchConfig>;\n  includeStats?: boolean;\n  userContext?: {\n    userId: number;\n    includeUserPlants?: boolean;\n  };\n  filters?: {\n    family?: string;\n    genus?: string;\n    isVerified?: boolean;\n    minPopularity?: number;\n  };\n}\n\n// Plant taxonomy validation result\nexport interface TaxonomyValidationResult {\n  isValid: boolean;\n  errors: string[];\n  warnings: string[];\n  suggestions: {\n    family?: string[];\n    genus?: string[];\n    species?: string[];\n    commonName?: string[];\n  };\n  duplicates: PlantSuggestion[];\n}\n\n// Plant import/export interfaces\nexport interface PlantImportData {\n  family: string;\n  genus: string;\n  species: string;\n  commonName: string;\n  careInstructions?: string;\n  source: string;\n  confidence: number;\n}\n\nexport interface PlantExportData extends Plant {\n  instanceCount: number;\n  propagationCount: number;\n  createdByName?: string;\n}\n\n// Utility type for plant operations\nexport type PlantOperation = 'create' | 'update' | 'delete' | 'search' | 'import';\n\n// Plant service response wrapper\nexport interface PlantServiceResponse<T> {\n  success: boolean;\n  data?: T;\n  error?: string;\n  metadata?: {\n    operation: PlantOperation;\n    timestamp: Date;\n    userId?: number;\n    performance?: {\n      queryTime: number;\n      cacheHit: boolean;\n    };\n  };\n}\n\n// Helper functions for plant data manipulation\nexport const plantHelpers = {\n  // Create display name from plant data\n  createDisplayName: (plant: Pick<Plant, 'commonName' | 'genus' | 'species'>): string => {\n    return plant.commonName || `${plant.genus} ${plant.species}`;\n  },\n\n  // Create scientific name\n  createScientificName: (plant: Pick<Plant, 'genus' | 'species'>): string => {\n    return `${plant.genus} ${plant.species}`;\n  },\n\n  // Create full taxonomy string\n  createFullTaxonomy: (plant: Pick<Plant, 'family' | 'genus' | 'species'>): string => {\n    return `${plant.family} > ${plant.genus} > ${plant.species}`;\n  },\n\n  // Enhance plant with computed properties\n  enhancePlant: (plant: Plant): EnhancedPlant => ({\n    ...plant,\n    displayName: plantHelpers.createDisplayName(plant),\n    scientificName: plantHelpers.createScientificName(plant),\n    fullTaxonomy: plantHelpers.createFullTaxonomy(plant),\n  }),\n\n  // Check if two plants are taxonomically identical\n  areTaxonomicallyEqual: (\n    plant1: Pick<Plant, 'family' | 'genus' | 'species'>,\n    plant2: Pick<Plant, 'family' | 'genus' | 'species'>\n  ): boolean => {\n    return (\n      plant1.family.toLowerCase() === plant2.family.toLowerCase() &&\n      plant1.genus.toLowerCase() === plant2.genus.toLowerCase() &&\n      plant1.species.toLowerCase() === plant2.species.toLowerCase()\n    );\n  },\n\n  // Generate search keywords for a plant\n  generateSearchKeywords: (plant: Plant): string[] => {\n    const keywords = [\n      plant.family.toLowerCase(),\n      plant.genus.toLowerCase(),\n      plant.species.toLowerCase(),\n      plant.commonName.toLowerCase(),\n      plantHelpers.createScientificName(plant).toLowerCase(),\n    ];\n\n    // Add common name variations (split by spaces, commas, etc.)\n    const commonNameParts = plant.commonName\n      .toLowerCase()\n      .split(/[\\s,\\-_]+/)\n      .filter(part => part.length > 2);\n    \n    keywords.push(...commonNameParts);\n\n    return [...new Set(keywords)]; // Remove duplicates\n  },\n};"],"mappings":"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","ignoreList":[]}