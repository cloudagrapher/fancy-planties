{"version":3,"names":["GET","cov_z7detecsf","f","s","POST","user","_server1","validateRequest","b","_server","NextResponse","json","error","status","presets","_advancedsearch","advancedSearchService","getUserSearchPresets","id","success","data","console","request","body","presetData","_plantschemas","searchPresetSchema","parse","userId","preset","saveSearchPreset","name","description","filters","sortBy","sortOrder","isDefault","_zod","z","ZodError","details","issues"],"sources":["/Users/stefanbekker/projects/fancy-planties/src/app/api/search/presets/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { z } from 'zod';\nimport { validateRequest } from '@/lib/auth/server';\nimport { advancedSearchService } from '@/lib/services/advanced-search';\nimport { searchPresetSchema } from '@/lib/validation/plant-schemas';\n\n// GET /api/search/presets - Get user's search presets\nexport async function GET() {\n  try {\n    const { user } = await validateRequest();\n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    // Get user's search presets\n    const presets = await advancedSearchService.getUserSearchPresets(user.id);\n\n    return NextResponse.json({\n      success: true,\n      data: { presets },\n    });\n\n  } catch (error) {\n    console.error('Get search presets error:', error);\n    \n    return NextResponse.json(\n      { error: 'Failed to get search presets' },\n      { status: 500 }\n    );\n  }\n}\n\n// POST /api/search/presets - Save a new search preset\nexport async function POST(request: NextRequest) {\n  try {\n    const { user } = await validateRequest();\n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const body = await request.json();\n    const presetData = searchPresetSchema.parse({\n      ...body,\n      userId: user.id,\n    });\n\n    // Save search preset\n    const preset = await advancedSearchService.saveSearchPreset(\n      presetData.name,\n      presetData.description || '',\n      presetData.filters,\n      presetData.sortBy,\n      presetData.sortOrder,\n      user.id,\n      presetData.isDefault\n    );\n\n    return NextResponse.json({\n      success: true,\n      data: { preset },\n    });\n\n  } catch (error) {\n    console.error('Save search preset error:', error);\n    \n    if (error instanceof z.ZodError) {\n      return NextResponse.json(\n        { error: 'Invalid preset data', details: error.issues },\n        { status: 400 }\n      );\n    }\n\n    return NextResponse.json(\n      { error: 'Failed to save search preset' },\n      { status: 500 }\n    );\n  }\n}"],"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","ignoreList":[]}