625fb868815fe292706bf9ab7345718a
"use strict";

/* istanbul ignore next */
function cov_9mhcvvbe6() {
  var path = "/Users/stefanbekker/projects/fancy-planties/src/lib/services/csv-import-processor.ts";
  var hash = "551ea11fdcfd9f9bc5c3d47d523cce5b491840f8";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/stefanbekker/projects/fancy-planties/src/lib/services/csv-import-processor.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 34
        }
      },
      "3": {
        start: {
          line: 11,
          column: 12
        },
        end: {
          line: 11,
          column: 28
        }
      },
      "4": {
        start: {
          line: 12,
          column: 16
        },
        end: {
          line: 12,
          column: 39
        }
      },
      "5": {
        start: {
          line: 13,
          column: 19
        },
        end: {
          line: 13,
          column: 42
        }
      },
      "6": {
        start: {
          line: 14,
          column: 23
        },
        end: {
          line: 14,
          column: 50
        }
      },
      "7": {
        start: {
          line: 15,
          column: 20
        },
        end: {
          line: 15,
          column: 56
        }
      },
      "8": {
        start: {
          line: 16,
          column: 20
        },
        end: {
          line: 16,
          column: 42
        }
      },
      "9": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 25
        }
      },
      "10": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 20,
          column: 28
        }
      },
      "11": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 21,
          column: 27
        }
      },
      "12": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 29
        }
      },
      "13": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 23,
          column: 86
        }
      },
      "14": {
        start: {
          line: 28,
          column: 26
        },
        end: {
          line: 28,
          column: 36
        }
      },
      "15": {
        start: {
          line: 29,
          column: 24
        },
        end: {
          line: 40,
          column: 9
        }
      },
      "16": {
        start: {
          line: 41,
          column: 8
        },
        end: {
          line: 88,
          column: 9
        }
      },
      "17": {
        start: {
          line: 43,
          column: 25
        },
        end: {
          line: 43,
          column: 66
        }
      },
      "18": {
        start: {
          line: 44,
          column: 12
        },
        end: {
          line: 46,
          column: 13
        }
      },
      "19": {
        start: {
          line: 45,
          column: 16
        },
        end: {
          line: 45,
          column: 53
        }
      },
      "20": {
        start: {
          line: 47,
          column: 28
        },
        end: {
          line: 47,
          column: 68
        }
      },
      "21": {
        start: {
          line: 48,
          column: 12
        },
        end: {
          line: 48,
          column: 47
        }
      },
      "22": {
        start: {
          line: 50,
          column: 12
        },
        end: {
          line: 85,
          column: 13
        }
      },
      "23": {
        start: {
          line: 50,
          column: 24
        },
        end: {
          line: 50,
          column: 25
        }
      },
      "24": {
        start: {
          line: 51,
          column: 32
        },
        end: {
          line: 51,
          column: 42
        }
      },
      "25": {
        start: {
          line: 52,
          column: 16
        },
        end: {
          line: 84,
          column: 17
        }
      },
      "26": {
        start: {
          line: 54,
          column: 36
        },
        end: {
          line: 54,
          column: 88
        }
      },
      "27": {
        start: {
          line: 56,
          column: 20
        },
        end: {
          line: 59,
          column: 21
        }
      },
      "28": {
        start: {
          line: 57,
          column: 24
        },
        end: {
          line: 57,
          column: 46
        }
      },
      "29": {
        start: {
          line: 58,
          column: 24
        },
        end: {
          line: 58,
          column: 33
        }
      },
      "30": {
        start: {
          line: 61,
          column: 38
        },
        end: {
          line: 61,
          column: 78
        }
      },
      "31": {
        start: {
          line: 62,
          column: 42
        },
        end: {
          line: 62,
          column: 99
        }
      },
      "32": {
        start: {
          line: 64,
          column: 37
        },
        end: {
          line: 64,
          column: 80
        }
      },
      "33": {
        start: {
          line: 65,
          column: 20
        },
        end: {
          line: 68,
          column: 21
        }
      },
      "34": {
        start: {
          line: 66,
          column: 24
        },
        end: {
          line: 66,
          column: 78
        }
      },
      "35": {
        start: {
          line: 67,
          column: 24
        },
        end: {
          line: 67,
          column: 33
        }
      },
      "36": {
        start: {
          line: 70,
          column: 20
        },
        end: {
          line: 78,
          column: 23
        }
      },
      "37": {
        start: {
          line: 79,
          column: 20
        },
        end: {
          line: 79,
          column: 48
        }
      },
      "38": {
        start: {
          line: 80,
          column: 20
        },
        end: {
          line: 80,
          column: 44
        }
      },
      "39": {
        start: {
          line: 82,
          column: 20
        },
        end: {
          line: 82,
          column: 104
        }
      },
      "40": {
        start: {
          line: 83,
          column: 20
        },
        end: {
          line: 83,
          column: 44
        }
      },
      "41": {
        start: {
          line: 87,
          column: 12
        },
        end: {
          line: 87,
          column: 104
        }
      },
      "42": {
        start: {
          line: 89,
          column: 8
        },
        end: {
          line: 89,
          column: 37
        }
      },
      "43": {
        start: {
          line: 90,
          column: 8
        },
        end: {
          line: 90,
          column: 37
        }
      },
      "44": {
        start: {
          line: 91,
          column: 8
        },
        end: {
          line: 91,
          column: 43
        }
      },
      "45": {
        start: {
          line: 92,
          column: 8
        },
        end: {
          line: 92,
          column: 41
        }
      },
      "46": {
        start: {
          line: 93,
          column: 8
        },
        end: {
          line: 93,
          column: 23
        }
      },
      "47": {
        start: {
          line: 98,
          column: 26
        },
        end: {
          line: 98,
          column: 36
        }
      },
      "48": {
        start: {
          line: 99,
          column: 24
        },
        end: {
          line: 110,
          column: 9
        }
      },
      "49": {
        start: {
          line: 111,
          column: 8
        },
        end: {
          line: 159,
          column: 9
        }
      },
      "50": {
        start: {
          line: 113,
          column: 25
        },
        end: {
          line: 113,
          column: 66
        }
      },
      "51": {
        start: {
          line: 114,
          column: 12
        },
        end: {
          line: 116,
          column: 13
        }
      },
      "52": {
        start: {
          line: 115,
          column: 16
        },
        end: {
          line: 115,
          column: 53
        }
      },
      "53": {
        start: {
          line: 117,
          column: 28
        },
        end: {
          line: 117,
          column: 68
        }
      },
      "54": {
        start: {
          line: 118,
          column: 12
        },
        end: {
          line: 118,
          column: 47
        }
      },
      "55": {
        start: {
          line: 120,
          column: 12
        },
        end: {
          line: 156,
          column: 13
        }
      },
      "56": {
        start: {
          line: 120,
          column: 24
        },
        end: {
          line: 120,
          column: 25
        }
      },
      "57": {
        start: {
          line: 121,
          column: 32
        },
        end: {
          line: 121,
          column: 42
        }
      },
      "58": {
        start: {
          line: 122,
          column: 16
        },
        end: {
          line: 155,
          column: 17
        }
      },
      "59": {
        start: {
          line: 124,
          column: 36
        },
        end: {
          line: 124,
          column: 93
        }
      },
      "60": {
        start: {
          line: 126,
          column: 20
        },
        end: {
          line: 129,
          column: 21
        }
      },
      "61": {
        start: {
          line: 127,
          column: 24
        },
        end: {
          line: 127,
          column: 46
        }
      },
      "62": {
        start: {
          line: 128,
          column: 24
        },
        end: {
          line: 128,
          column: 33
        }
      },
      "63": {
        start: {
          line: 131,
          column: 38
        },
        end: {
          line: 131,
          column: 84
        }
      },
      "64": {
        start: {
          line: 132,
          column: 42
        },
        end: {
          line: 132,
          column: 99
        }
      },
      "65": {
        start: {
          line: 134,
          column: 36
        },
        end: {
          line: 134,
          column: 93
        }
      },
      "66": {
        start: {
          line: 135,
          column: 20
        },
        end: {
          line: 137,
          column: 21
        }
      },
      "67": {
        start: {
          line: 136,
          column: 24
        },
        end: {
          line: 136,
          column: 33
        }
      },
      "68": {
        start: {
          line: 139,
          column: 20
        },
        end: {
          line: 149,
          column: 23
        }
      },
      "69": {
        start: {
          line: 150,
          column: 20
        },
        end: {
          line: 150,
          column: 48
        }
      },
      "70": {
        start: {
          line: 151,
          column: 20
        },
        end: {
          line: 151,
          column: 44
        }
      },
      "71": {
        start: {
          line: 153,
          column: 20
        },
        end: {
          line: 153,
          column: 104
        }
      },
      "72": {
        start: {
          line: 154,
          column: 20
        },
        end: {
          line: 154,
          column: 44
        }
      },
      "73": {
        start: {
          line: 158,
          column: 12
        },
        end: {
          line: 158,
          column: 104
        }
      },
      "74": {
        start: {
          line: 160,
          column: 8
        },
        end: {
          line: 160,
          column: 37
        }
      },
      "75": {
        start: {
          line: 161,
          column: 8
        },
        end: {
          line: 161,
          column: 37
        }
      },
      "76": {
        start: {
          line: 162,
          column: 8
        },
        end: {
          line: 162,
          column: 43
        }
      },
      "77": {
        start: {
          line: 163,
          column: 8
        },
        end: {
          line: 163,
          column: 41
        }
      },
      "78": {
        start: {
          line: 164,
          column: 8
        },
        end: {
          line: 164,
          column: 23
        }
      },
      "79": {
        start: {
          line: 169,
          column: 26
        },
        end: {
          line: 169,
          column: 36
        }
      },
      "80": {
        start: {
          line: 170,
          column: 24
        },
        end: {
          line: 181,
          column: 9
        }
      },
      "81": {
        start: {
          line: 182,
          column: 8
        },
        end: {
          line: 249,
          column: 9
        }
      },
      "82": {
        start: {
          line: 184,
          column: 25
        },
        end: {
          line: 184,
          column: 66
        }
      },
      "83": {
        start: {
          line: 185,
          column: 12
        },
        end: {
          line: 187,
          column: 13
        }
      },
      "84": {
        start: {
          line: 186,
          column: 16
        },
        end: {
          line: 186,
          column: 53
        }
      },
      "85": {
        start: {
          line: 188,
          column: 28
        },
        end: {
          line: 188,
          column: 68
        }
      },
      "86": {
        start: {
          line: 189,
          column: 12
        },
        end: {
          line: 189,
          column: 47
        }
      },
      "87": {
        start: {
          line: 191,
          column: 12
        },
        end: {
          line: 246,
          column: 13
        }
      },
      "88": {
        start: {
          line: 191,
          column: 24
        },
        end: {
          line: 191,
          column: 25
        }
      },
      "89": {
        start: {
          line: 192,
          column: 32
        },
        end: {
          line: 192,
          column: 42
        }
      },
      "90": {
        start: {
          line: 193,
          column: 16
        },
        end: {
          line: 245,
          column: 17
        }
      },
      "91": {
        start: {
          line: 195,
          column: 36
        },
        end: {
          line: 195,
          column: 86
        }
      },
      "92": {
        start: {
          line: 197,
          column: 20
        },
        end: {
          line: 200,
          column: 21
        }
      },
      "93": {
        start: {
          line: 198,
          column: 24
        },
        end: {
          line: 198,
          column: 46
        }
      },
      "94": {
        start: {
          line: 199,
          column: 24
        },
        end: {
          line: 199,
          column: 33
        }
      },
      "95": {
        start: {
          line: 202,
          column: 38
        },
        end: {
          line: 202,
          column: 82
        }
      },
      "96": {
        start: {
          line: 203,
          column: 42
        },
        end: {
          line: 203,
          column: 97
        }
      },
      "97": {
        start: {
          line: 205,
          column: 36
        },
        end: {
          line: 205,
          column: 88
        }
      },
      "98": {
        start: {
          line: 206,
          column: 20
        },
        end: {
          line: 208,
          column: 21
        }
      },
      "99": {
        start: {
          line: 207,
          column: 24
        },
        end: {
          line: 207,
          column: 33
        }
      },
      "100": {
        start: {
          line: 210,
          column: 43
        },
        end: {
          line: 210,
          column: 47
        }
      },
      "101": {
        start: {
          line: 211,
          column: 20
        },
        end: {
          line: 226,
          column: 21
        }
      },
      "102": {
        start: {
          line: 212,
          column: 24
        },
        end: {
          line: 212,
          column: 97
        }
      },
      "103": {
        start: {
          line: 213,
          column: 24
        },
        end: {
          line: 225,
          column: 25
        }
      },
      "104": {
        start: {
          line: 214,
          column: 47
        },
        end: {
          line: 214,
          column: 138
        }
      },
      "105": {
        start: {
          line: 215,
          column: 28
        },
        end: {
          line: 215,
          column: 192
        }
      },
      "106": {
        start: {
          line: 217,
          column: 28
        },
        end: {
          line: 217,
          column: 66
        }
      },
      "107": {
        start: {
          line: 218,
          column: 28
        },
        end: {
          line: 218,
          column: 67
        }
      },
      "108": {
        start: {
          line: 219,
          column: 28
        },
        end: {
          line: 219,
          column: 169
        }
      },
      "109": {
        start: {
          line: 222,
          column: 28
        },
        end: {
          line: 224,
          column: 29
        }
      },
      "110": {
        start: {
          line: 223,
          column: 32
        },
        end: {
          line: 223,
          column: 177
        }
      },
      "111": {
        start: {
          line: 228,
          column: 20
        },
        end: {
          line: 239,
          column: 23
        }
      },
      "112": {
        start: {
          line: 240,
          column: 20
        },
        end: {
          line: 240,
          column: 48
        }
      },
      "113": {
        start: {
          line: 241,
          column: 20
        },
        end: {
          line: 241,
          column: 44
        }
      },
      "114": {
        start: {
          line: 243,
          column: 20
        },
        end: {
          line: 243,
          column: 104
        }
      },
      "115": {
        start: {
          line: 244,
          column: 20
        },
        end: {
          line: 244,
          column: 44
        }
      },
      "116": {
        start: {
          line: 248,
          column: 12
        },
        end: {
          line: 248,
          column: 104
        }
      },
      "117": {
        start: {
          line: 250,
          column: 8
        },
        end: {
          line: 250,
          column: 37
        }
      },
      "118": {
        start: {
          line: 251,
          column: 8
        },
        end: {
          line: 251,
          column: 37
        }
      },
      "119": {
        start: {
          line: 252,
          column: 8
        },
        end: {
          line: 252,
          column: 43
        }
      },
      "120": {
        start: {
          line: 253,
          column: 8
        },
        end: {
          line: 253,
          column: 41
        }
      },
      "121": {
        start: {
          line: 254,
          column: 8
        },
        end: {
          line: 254,
          column: 23
        }
      },
      "122": {
        start: {
          line: 259,
          column: 25
        },
        end: {
          line: 259,
          column: 69
        }
      },
      "123": {
        start: {
          line: 260,
          column: 27
        },
        end: {
          line: 260,
          column: 117
        }
      },
      "124": {
        start: {
          line: 261,
          column: 8
        },
        end: {
          line: 268,
          column: 10
        }
      },
      "125": {
        start: {
          line: 271,
          column: 31
        },
        end: {
          line: 271,
          column: 90
        }
      },
      "126": {
        start: {
          line: 272,
          column: 35
        },
        end: {
          line: 272,
          column: 106
        }
      },
      "127": {
        start: {
          line: 273,
          column: 30
        },
        end: {
          line: 273,
          column: 170
        }
      },
      "128": {
        start: {
          line: 274,
          column: 26
        },
        end: {
          line: 274,
          column: 80
        }
      },
      "129": {
        start: {
          line: 276,
          column: 25
        },
        end: {
          line: 276,
          column: 69
        }
      },
      "130": {
        start: {
          line: 277,
          column: 27
        },
        end: {
          line: 277,
          column: 117
        }
      },
      "131": {
        start: {
          line: 278,
          column: 8
        },
        end: {
          line: 291,
          column: 10
        }
      },
      "132": {
        start: {
          line: 294,
          column: 28
        },
        end: {
          line: 294,
          column: 84
        }
      },
      "133": {
        start: {
          line: 295,
          column: 8
        },
        end: {
          line: 297,
          column: 9
        }
      },
      "134": {
        start: {
          line: 296,
          column: 12
        },
        end: {
          line: 296,
          column: 63
        }
      },
      "135": {
        start: {
          line: 299,
          column: 25
        },
        end: {
          line: 299,
          column: 69
        }
      },
      "136": {
        start: {
          line: 300,
          column: 27
        },
        end: {
          line: 300,
          column: 117
        }
      },
      "137": {
        start: {
          line: 302,
          column: 28
        },
        end: {
          line: 302,
          column: 76
        }
      },
      "138": {
        start: {
          line: 303,
          column: 30
        },
        end: {
          line: 303,
          column: 80
        }
      },
      "139": {
        start: {
          line: 304,
          column: 32
        },
        end: {
          line: 304,
          column: 80
        }
      },
      "140": {
        start: {
          line: 306,
          column: 25
        },
        end: {
          line: 306,
          column: 35
        }
      },
      "141": {
        start: {
          line: 307,
          column: 29
        },
        end: {
          line: 307,
          column: 33
        }
      },
      "142": {
        start: {
          line: 308,
          column: 8
        },
        end: {
          line: 325,
          column: 9
        }
      },
      "143": {
        start: {
          line: 309,
          column: 12
        },
        end: {
          line: 309,
          column: 36
        }
      },
      "144": {
        start: {
          line: 310,
          column: 15
        },
        end: {
          line: 325,
          column: 9
        }
      },
      "145": {
        start: {
          line: 311,
          column: 12
        },
        end: {
          line: 311,
          column: 36
        }
      },
      "146": {
        start: {
          line: 313,
          column: 12
        },
        end: {
          line: 321,
          column: 13
        }
      },
      "147": {
        start: {
          line: 314,
          column: 16
        },
        end: {
          line: 314,
          column: 40
        }
      },
      "148": {
        start: {
          line: 315,
          column: 19
        },
        end: {
          line: 321,
          column: 13
        }
      },
      "149": {
        start: {
          line: 316,
          column: 16
        },
        end: {
          line: 316,
          column: 41
        }
      },
      "150": {
        start: {
          line: 317,
          column: 19
        },
        end: {
          line: 321,
          column: 13
        }
      },
      "151": {
        start: {
          line: 318,
          column: 16
        },
        end: {
          line: 318,
          column: 44
        }
      },
      "152": {
        start: {
          line: 320,
          column: 16
        },
        end: {
          line: 320,
          column: 41
        }
      },
      "153": {
        start: {
          line: 324,
          column: 12
        },
        end: {
          line: 324,
          column: 37
        }
      },
      "154": {
        start: {
          line: 326,
          column: 8
        },
        end: {
          line: 340,
          column: 10
        }
      },
      "155": {
        start: {
          line: 344,
          column: 8
        },
        end: {
          line: 344,
          column: 125
        }
      },
      "156": {
        start: {
          line: 347,
          column: 8
        },
        end: {
          line: 347,
          column: 89
        }
      },
      "157": {
        start: {
          line: 350,
          column: 8
        },
        end: {
          line: 350,
          column: 114
        }
      },
      "158": {
        start: {
          line: 353,
          column: 8
        },
        end: {
          line: 353,
          column: 30
        }
      },
      "159": {
        start: {
          line: 353,
          column: 20
        },
        end: {
          line: 353,
          column: 30
        }
      },
      "160": {
        start: {
          line: 354,
          column: 8
        },
        end: {
          line: 354,
          column: 71
        }
      },
      "161": {
        start: {
          line: 357,
          column: 24
        },
        end: {
          line: 357,
          column: 46
        }
      },
      "162": {
        start: {
          line: 358,
          column: 8
        },
        end: {
          line: 358,
          column: 80
        }
      },
      "163": {
        start: {
          line: 361,
          column: 8
        },
        end: {
          line: 361,
          column: 266
        }
      },
      "164": {
        start: {
          line: 365,
          column: 28
        },
        end: {
          line: 370,
          column: 10
        }
      },
      "165": {
        start: {
          line: 371,
          column: 8
        },
        end: {
          line: 373,
          column: 9
        }
      },
      "166": {
        start: {
          line: 372,
          column: 12
        },
        end: {
          line: 372,
          column: 49
        }
      },
      "167": {
        start: {
          line: 375,
          column: 8
        },
        end: {
          line: 386,
          column: 9
        }
      },
      "168": {
        start: {
          line: 376,
          column: 29
        },
        end: {
          line: 381,
          column: 34
        }
      },
      "169": {
        start: {
          line: 382,
          column: 12
        },
        end: {
          line: 385,
          column: 13
        }
      },
      "170": {
        start: {
          line: 383,
          column: 16
        },
        end: {
          line: 383,
          column: 120
        }
      },
      "171": {
        start: {
          line: 384,
          column: 16
        },
        end: {
          line: 384,
          column: 35
        }
      },
      "172": {
        start: {
          line: 387,
          column: 8
        },
        end: {
          line: 387,
          column: 99
        }
      },
      "173": {
        start: {
          line: 388,
          column: 8
        },
        end: {
          line: 388,
          column: 20
        }
      },
      "174": {
        start: {
          line: 391,
          column: 28
        },
        end: {
          line: 397,
          column: 10
        }
      },
      "175": {
        start: {
          line: 399,
          column: 45
        },
        end: {
          line: 399,
          column: 89
        }
      },
      "176": {
        start: {
          line: 400,
          column: 8
        },
        end: {
          line: 402,
          column: 9
        }
      },
      "177": {
        start: {
          line: 401,
          column: 12
        },
        end: {
          line: 401,
          column: 49
        }
      },
      "178": {
        start: {
          line: 404,
          column: 8
        },
        end: {
          line: 416,
          column: 9
        }
      },
      "179": {
        start: {
          line: 405,
          column: 40
        },
        end: {
          line: 411,
          column: 14
        }
      },
      "180": {
        start: {
          line: 412,
          column: 12
        },
        end: {
          line: 415,
          column: 13
        }
      },
      "181": {
        start: {
          line: 413,
          column: 16
        },
        end: {
          line: 413,
          column: 166
        }
      },
      "182": {
        start: {
          line: 414,
          column: 16
        },
        end: {
          line: 414,
          column: 61
        }
      },
      "183": {
        start: {
          line: 418,
          column: 8
        },
        end: {
          line: 437,
          column: 9
        }
      },
      "184": {
        start: {
          line: 419,
          column: 12
        },
        end: {
          line: 436,
          column: 13
        }
      },
      "185": {
        start: {
          line: 420,
          column: 33
        },
        end: {
          line: 430,
          column: 18
        }
      },
      "186": {
        start: {
          line: 431,
          column: 16
        },
        end: {
          line: 431,
          column: 142
        }
      },
      "187": {
        start: {
          line: 432,
          column: 16
        },
        end: {
          line: 432,
          column: 38
        }
      },
      "188": {
        start: {
          line: 434,
          column: 16
        },
        end: {
          line: 434,
          column: 122
        }
      },
      "189": {
        start: {
          line: 435,
          column: 16
        },
        end: {
          line: 435,
          column: 28
        }
      },
      "190": {
        start: {
          line: 438,
          column: 8
        },
        end: {
          line: 438,
          column: 184
        }
      },
      "191": {
        start: {
          line: 439,
          column: 8
        },
        end: {
          line: 439,
          column: 20
        }
      },
      "192": {
        start: {
          line: 443,
          column: 8
        },
        end: {
          line: 459,
          column: 9
        }
      },
      "193": {
        start: {
          line: 444,
          column: 40
        },
        end: {
          line: 448,
          column: 203
        }
      },
      "194": {
        start: {
          line: 450,
          column: 31
        },
        end: {
          line: 450,
          column: 139
        }
      },
      "195": {
        start: {
          line: 450,
          column: 68
        },
        end: {
          line: 450,
          column: 138
        }
      },
      "196": {
        start: {
          line: 451,
          column: 12
        },
        end: {
          line: 453,
          column: 13
        }
      },
      "197": {
        start: {
          line: 452,
          column: 16
        },
        end: {
          line: 452,
          column: 37
        }
      },
      "198": {
        start: {
          line: 455,
          column: 33
        },
        end: {
          line: 455,
          column: 227
        }
      },
      "199": {
        start: {
          line: 455,
          column: 70
        },
        end: {
          line: 455,
          column: 226
        }
      },
      "200": {
        start: {
          line: 456,
          column: 12
        },
        end: {
          line: 458,
          column: 13
        }
      },
      "201": {
        start: {
          line: 457,
          column: 16
        },
        end: {
          line: 457,
          column: 39
        }
      },
      "202": {
        start: {
          line: 461,
          column: 26
        },
        end: {
          line: 463,
          column: 270
        }
      },
      "203": {
        start: {
          line: 464,
          column: 8
        },
        end: {
          line: 464,
          column: 40
        }
      },
      "204": {
        start: {
          line: 467,
          column: 8
        },
        end: {
          line: 473,
          column: 11
        }
      },
      "205": {
        start: {
          line: 476,
          column: 22
        },
        end: {
          line: 481,
          column: 9
        }
      },
      "206": {
        start: {
          line: 482,
          column: 8
        },
        end: {
          line: 486,
          column: 9
        }
      },
      "207": {
        start: {
          line: 483,
          column: 12
        },
        end: {
          line: 483,
          column: 36
        }
      },
      "208": {
        start: {
          line: 485,
          column: 12
        },
        end: {
          line: 485,
          column: 38
        }
      },
      "209": {
        start: {
          line: 489,
          column: 8
        },
        end: {
          line: 489,
          column: 58
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 18,
            column: 4
          },
          end: {
            line: 18,
            column: 5
          }
        },
        loc: {
          start: {
            line: 18,
            column: 23
          },
          end: {
            line: 24,
            column: 5
          }
        },
        line: 18
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 27,
            column: 6
          },
          end: {
            line: 27,
            column: 7
          }
        },
        loc: {
          start: {
            line: 27,
            column: 51
          },
          end: {
            line: 94,
            column: 5
          }
        },
        line: 27
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 97,
            column: 6
          },
          end: {
            line: 97,
            column: 7
          }
        },
        loc: {
          start: {
            line: 97,
            column: 52
          },
          end: {
            line: 165,
            column: 5
          }
        },
        line: 97
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 168,
            column: 6
          },
          end: {
            line: 168,
            column: 7
          }
        },
        loc: {
          start: {
            line: 168,
            column: 50
          },
          end: {
            line: 255,
            column: 5
          }
        },
        line: 168
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 257,
            column: 4
          },
          end: {
            line: 257,
            column: 5
          }
        },
        loc: {
          start: {
            line: 257,
            column: 47
          },
          end: {
            line: 269,
            column: 5
          }
        },
        line: 257
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 270,
            column: 4
          },
          end: {
            line: 270,
            column: 5
          }
        },
        loc: {
          start: {
            line: 270,
            column: 53
          },
          end: {
            line: 292,
            column: 5
          }
        },
        line: 270
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 293,
            column: 4
          },
          end: {
            line: 293,
            column: 5
          }
        },
        loc: {
          start: {
            line: 293,
            column: 51
          },
          end: {
            line: 341,
            column: 5
          }
        },
        line: 293
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 343,
            column: 4
          },
          end: {
            line: 343,
            column: 5
          }
        },
        loc: {
          start: {
            line: 343,
            column: 26
          },
          end: {
            line: 345,
            column: 5
          }
        },
        line: 343
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 346,
            column: 4
          },
          end: {
            line: 346,
            column: 5
          }
        },
        loc: {
          start: {
            line: 346,
            column: 29
          },
          end: {
            line: 348,
            column: 5
          }
        },
        line: 346
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 349,
            column: 4
          },
          end: {
            line: 349,
            column: 5
          }
        },
        loc: {
          start: {
            line: 349,
            column: 32
          },
          end: {
            line: 351,
            column: 5
          }
        },
        line: 349
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 352,
            column: 4
          },
          end: {
            line: 352,
            column: 5
          }
        },
        loc: {
          start: {
            line: 352,
            column: 22
          },
          end: {
            line: 355,
            column: 5
          }
        },
        line: 352
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 356,
            column: 4
          },
          end: {
            line: 356,
            column: 5
          }
        },
        loc: {
          start: {
            line: 356,
            column: 30
          },
          end: {
            line: 359,
            column: 5
          }
        },
        line: 356
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 360,
            column: 4
          },
          end: {
            line: 360,
            column: 5
          }
        },
        loc: {
          start: {
            line: 360,
            column: 34
          },
          end: {
            line: 362,
            column: 5
          }
        },
        line: 360
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 363,
            column: 4
          },
          end: {
            line: 363,
            column: 5
          }
        },
        loc: {
          start: {
            line: 363,
            column: 55
          },
          end: {
            line: 389,
            column: 5
          }
        },
        line: 363
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 390,
            column: 4
          },
          end: {
            line: 390,
            column: 5
          }
        },
        loc: {
          start: {
            line: 390,
            column: 50
          },
          end: {
            line: 440,
            column: 5
          }
        },
        line: 390
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 441,
            column: 4
          },
          end: {
            line: 441,
            column: 5
          }
        },
        loc: {
          start: {
            line: 441,
            column: 44
          },
          end: {
            line: 465,
            column: 5
          }
        },
        line: 441
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 450,
            column: 56
          },
          end: {
            line: 450,
            column: 57
          }
        },
        loc: {
          start: {
            line: 450,
            column: 68
          },
          end: {
            line: 450,
            column: 138
          }
        },
        line: 450
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 455,
            column: 58
          },
          end: {
            line: 455,
            column: 59
          }
        },
        loc: {
          start: {
            line: 455,
            column: 70
          },
          end: {
            line: 455,
            column: 226
          }
        },
        line: 455
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 466,
            column: 4
          },
          end: {
            line: 466,
            column: 5
          }
        },
        loc: {
          start: {
            line: 466,
            column: 51
          },
          end: {
            line: 474,
            column: 5
          }
        },
        line: 466
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 475,
            column: 4
          },
          end: {
            line: 475,
            column: 5
          }
        },
        loc: {
          start: {
            line: 475,
            column: 49
          },
          end: {
            line: 487,
            column: 5
          }
        },
        line: 475
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 488,
            column: 4
          },
          end: {
            line: 488,
            column: 5
          }
        },
        loc: {
          start: {
            line: 488,
            column: 51
          },
          end: {
            line: 490,
            column: 5
          }
        },
        line: 488
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 44,
            column: 12
          },
          end: {
            line: 46,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 44,
            column: 12
          },
          end: {
            line: 46,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 44
      },
      "1": {
        loc: {
          start: {
            line: 56,
            column: 20
          },
          end: {
            line: 59,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 56,
            column: 20
          },
          end: {
            line: 59,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 56
      },
      "2": {
        loc: {
          start: {
            line: 56,
            column: 24
          },
          end: {
            line: 56,
            column: 82
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 56,
            column: 24
          },
          end: {
            line: 56,
            column: 49
          }
        }, {
          start: {
            line: 56,
            column: 53
          },
          end: {
            line: 56,
            column: 82
          }
        }],
        line: 56
      },
      "3": {
        loc: {
          start: {
            line: 65,
            column: 20
          },
          end: {
            line: 68,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 65,
            column: 20
          },
          end: {
            line: 68,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 65
      },
      "4": {
        loc: {
          start: {
            line: 82,
            column: 37
          },
          end: {
            line: 82,
            column: 93
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 82,
            column: 62
          },
          end: {
            line: 82,
            column: 75
          }
        }, {
          start: {
            line: 82,
            column: 78
          },
          end: {
            line: 82,
            column: 93
          }
        }],
        line: 82
      },
      "5": {
        loc: {
          start: {
            line: 87,
            column: 29
          },
          end: {
            line: 87,
            column: 93
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 87,
            column: 54
          },
          end: {
            line: 87,
            column: 67
          }
        }, {
          start: {
            line: 87,
            column: 70
          },
          end: {
            line: 87,
            column: 93
          }
        }],
        line: 87
      },
      "6": {
        loc: {
          start: {
            line: 114,
            column: 12
          },
          end: {
            line: 116,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 114,
            column: 12
          },
          end: {
            line: 116,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 114
      },
      "7": {
        loc: {
          start: {
            line: 126,
            column: 20
          },
          end: {
            line: 129,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 126,
            column: 20
          },
          end: {
            line: 129,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 126
      },
      "8": {
        loc: {
          start: {
            line: 126,
            column: 24
          },
          end: {
            line: 126,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 126,
            column: 24
          },
          end: {
            line: 126,
            column: 49
          }
        }, {
          start: {
            line: 126,
            column: 53
          },
          end: {
            line: 126,
            column: 85
          }
        }],
        line: 126
      },
      "9": {
        loc: {
          start: {
            line: 135,
            column: 20
          },
          end: {
            line: 137,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 135,
            column: 20
          },
          end: {
            line: 137,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 135
      },
      "10": {
        loc: {
          start: {
            line: 153,
            column: 37
          },
          end: {
            line: 153,
            column: 93
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 153,
            column: 62
          },
          end: {
            line: 153,
            column: 75
          }
        }, {
          start: {
            line: 153,
            column: 78
          },
          end: {
            line: 153,
            column: 93
          }
        }],
        line: 153
      },
      "11": {
        loc: {
          start: {
            line: 158,
            column: 29
          },
          end: {
            line: 158,
            column: 93
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 158,
            column: 54
          },
          end: {
            line: 158,
            column: 67
          }
        }, {
          start: {
            line: 158,
            column: 70
          },
          end: {
            line: 158,
            column: 93
          }
        }],
        line: 158
      },
      "12": {
        loc: {
          start: {
            line: 185,
            column: 12
          },
          end: {
            line: 187,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 185,
            column: 12
          },
          end: {
            line: 187,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 185
      },
      "13": {
        loc: {
          start: {
            line: 197,
            column: 20
          },
          end: {
            line: 200,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 197,
            column: 20
          },
          end: {
            line: 200,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 197
      },
      "14": {
        loc: {
          start: {
            line: 197,
            column: 24
          },
          end: {
            line: 197,
            column: 88
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 197,
            column: 24
          },
          end: {
            line: 197,
            column: 49
          }
        }, {
          start: {
            line: 197,
            column: 53
          },
          end: {
            line: 197,
            column: 88
          }
        }],
        line: 197
      },
      "15": {
        loc: {
          start: {
            line: 206,
            column: 20
          },
          end: {
            line: 208,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 206,
            column: 20
          },
          end: {
            line: 208,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 206
      },
      "16": {
        loc: {
          start: {
            line: 211,
            column: 20
          },
          end: {
            line: 226,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 211,
            column: 20
          },
          end: {
            line: 226,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 211
      },
      "17": {
        loc: {
          start: {
            line: 213,
            column: 24
          },
          end: {
            line: 225,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 213,
            column: 24
          },
          end: {
            line: 225,
            column: 25
          }
        }, {
          start: {
            line: 220,
            column: 31
          },
          end: {
            line: 225,
            column: 25
          }
        }],
        line: 213
      },
      "18": {
        loc: {
          start: {
            line: 214,
            column: 47
          },
          end: {
            line: 214,
            column: 138
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 214,
            column: 79
          },
          end: {
            line: 214,
            column: 115
          }
        }, {
          start: {
            line: 214,
            column: 118
          },
          end: {
            line: 214,
            column: 138
          }
        }],
        line: 214
      },
      "19": {
        loc: {
          start: {
            line: 219,
            column: 117
          },
          end: {
            line: 219,
            column: 166
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 219,
            column: 117
          },
          end: {
            line: 219,
            column: 146
          }
        }, {
          start: {
            line: 219,
            column: 150
          },
          end: {
            line: 219,
            column: 166
          }
        }],
        line: 219
      },
      "20": {
        loc: {
          start: {
            line: 222,
            column: 28
          },
          end: {
            line: 224,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 222,
            column: 28
          },
          end: {
            line: 224,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 222
      },
      "21": {
        loc: {
          start: {
            line: 243,
            column: 37
          },
          end: {
            line: 243,
            column: 93
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 243,
            column: 62
          },
          end: {
            line: 243,
            column: 75
          }
        }, {
          start: {
            line: 243,
            column: 78
          },
          end: {
            line: 243,
            column: 93
          }
        }],
        line: 243
      },
      "22": {
        loc: {
          start: {
            line: 248,
            column: 29
          },
          end: {
            line: 248,
            column: 93
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 248,
            column: 54
          },
          end: {
            line: 248,
            column: 67
          }
        }, {
          start: {
            line: 248,
            column: 70
          },
          end: {
            line: 248,
            column: 93
          }
        }],
        line: 248
      },
      "23": {
        loc: {
          start: {
            line: 259,
            column: 25
          },
          end: {
            line: 259,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 259,
            column: 25
          },
          end: {
            line: 259,
            column: 61
          }
        }, {
          start: {
            line: 259,
            column: 65
          },
          end: {
            line: 259,
            column: 69
          }
        }],
        line: 259
      },
      "24": {
        loc: {
          start: {
            line: 260,
            column: 27
          },
          end: {
            line: 260,
            column: 117
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 260,
            column: 27
          },
          end: {
            line: 260,
            column: 66
          }
        }, {
          start: {
            line: 260,
            column: 70
          },
          end: {
            line: 260,
            column: 117
          }
        }],
        line: 260
      },
      "25": {
        loc: {
          start: {
            line: 273,
            column: 30
          },
          end: {
            line: 273,
            column: 170
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 273,
            column: 30
          },
          end: {
            line: 273,
            column: 88
          }
        }, {
          start: {
            line: 273,
            column: 92
          },
          end: {
            line: 273,
            column: 170
          }
        }],
        line: 273
      },
      "26": {
        loc: {
          start: {
            line: 276,
            column: 25
          },
          end: {
            line: 276,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 276,
            column: 25
          },
          end: {
            line: 276,
            column: 61
          }
        }, {
          start: {
            line: 276,
            column: 65
          },
          end: {
            line: 276,
            column: 69
          }
        }],
        line: 276
      },
      "27": {
        loc: {
          start: {
            line: 277,
            column: 27
          },
          end: {
            line: 277,
            column: 117
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 277,
            column: 27
          },
          end: {
            line: 277,
            column: 66
          }
        }, {
          start: {
            line: 277,
            column: 70
          },
          end: {
            line: 277,
            column: 117
          }
        }],
        line: 277
      },
      "28": {
        loc: {
          start: {
            line: 295,
            column: 8
          },
          end: {
            line: 297,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 295,
            column: 8
          },
          end: {
            line: 297,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 295
      },
      "29": {
        loc: {
          start: {
            line: 299,
            column: 25
          },
          end: {
            line: 299,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 299,
            column: 25
          },
          end: {
            line: 299,
            column: 61
          }
        }, {
          start: {
            line: 299,
            column: 65
          },
          end: {
            line: 299,
            column: 69
          }
        }],
        line: 299
      },
      "30": {
        loc: {
          start: {
            line: 300,
            column: 27
          },
          end: {
            line: 300,
            column: 117
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 300,
            column: 27
          },
          end: {
            line: 300,
            column: 66
          }
        }, {
          start: {
            line: 300,
            column: 70
          },
          end: {
            line: 300,
            column: 117
          }
        }],
        line: 300
      },
      "31": {
        loc: {
          start: {
            line: 303,
            column: 30
          },
          end: {
            line: 303,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 303,
            column: 30
          },
          end: {
            line: 303,
            column: 72
          }
        }, {
          start: {
            line: 303,
            column: 76
          },
          end: {
            line: 303,
            column: 80
          }
        }],
        line: 303
      },
      "32": {
        loc: {
          start: {
            line: 304,
            column: 32
          },
          end: {
            line: 304,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 304,
            column: 32
          },
          end: {
            line: 304,
            column: 72
          }
        }, {
          start: {
            line: 304,
            column: 76
          },
          end: {
            line: 304,
            column: 80
          }
        }],
        line: 304
      },
      "33": {
        loc: {
          start: {
            line: 308,
            column: 8
          },
          end: {
            line: 325,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 308,
            column: 8
          },
          end: {
            line: 325,
            column: 9
          }
        }, {
          start: {
            line: 310,
            column: 15
          },
          end: {
            line: 325,
            column: 9
          }
        }],
        line: 308
      },
      "34": {
        loc: {
          start: {
            line: 310,
            column: 15
          },
          end: {
            line: 325,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 310,
            column: 15
          },
          end: {
            line: 325,
            column: 9
          }
        }, {
          start: {
            line: 322,
            column: 15
          },
          end: {
            line: 325,
            column: 9
          }
        }],
        line: 310
      },
      "35": {
        loc: {
          start: {
            line: 313,
            column: 12
          },
          end: {
            line: 321,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 313,
            column: 12
          },
          end: {
            line: 321,
            column: 13
          }
        }, {
          start: {
            line: 315,
            column: 19
          },
          end: {
            line: 321,
            column: 13
          }
        }],
        line: 313
      },
      "36": {
        loc: {
          start: {
            line: 313,
            column: 16
          },
          end: {
            line: 313,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 313,
            column: 16
          },
          end: {
            line: 313,
            column: 44
          }
        }, {
          start: {
            line: 313,
            column: 48
          },
          end: {
            line: 313,
            column: 77
          }
        }],
        line: 313
      },
      "37": {
        loc: {
          start: {
            line: 315,
            column: 19
          },
          end: {
            line: 321,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 315,
            column: 19
          },
          end: {
            line: 321,
            column: 13
          }
        }, {
          start: {
            line: 317,
            column: 19
          },
          end: {
            line: 321,
            column: 13
          }
        }],
        line: 315
      },
      "38": {
        loc: {
          start: {
            line: 315,
            column: 23
          },
          end: {
            line: 315,
            column: 120
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 315,
            column: 23
          },
          end: {
            line: 315,
            column: 52
          }
        }, {
          start: {
            line: 315,
            column: 56
          },
          end: {
            line: 315,
            column: 84
          }
        }, {
          start: {
            line: 315,
            column: 88
          },
          end: {
            line: 315,
            column: 120
          }
        }],
        line: 315
      },
      "39": {
        loc: {
          start: {
            line: 317,
            column: 19
          },
          end: {
            line: 321,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 317,
            column: 19
          },
          end: {
            line: 321,
            column: 13
          }
        }, {
          start: {
            line: 319,
            column: 19
          },
          end: {
            line: 321,
            column: 13
          }
        }],
        line: 317
      },
      "40": {
        loc: {
          start: {
            line: 317,
            column: 23
          },
          end: {
            line: 317,
            column: 120
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 317,
            column: 23
          },
          end: {
            line: 317,
            column: 55
          }
        }, {
          start: {
            line: 317,
            column: 59
          },
          end: {
            line: 317,
            column: 89
          }
        }, {
          start: {
            line: 317,
            column: 93
          },
          end: {
            line: 317,
            column: 120
          }
        }],
        line: 317
      },
      "41": {
        loc: {
          start: {
            line: 344,
            column: 15
          },
          end: {
            line: 344,
            column: 124
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 344,
            column: 15
          },
          end: {
            line: 344,
            column: 30
          }
        }, {
          start: {
            line: 344,
            column: 34
          },
          end: {
            line: 344,
            column: 48
          }
        }, {
          start: {
            line: 344,
            column: 52
          },
          end: {
            line: 344,
            column: 68
          }
        }, {
          start: {
            line: 344,
            column: 72
          },
          end: {
            line: 344,
            column: 92
          }
        }, {
          start: {
            line: 344,
            column: 96
          },
          end: {
            line: 344,
            column: 124
          }
        }],
        line: 344
      },
      "42": {
        loc: {
          start: {
            line: 347,
            column: 15
          },
          end: {
            line: 347,
            column: 88
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 347,
            column: 15
          },
          end: {
            line: 347,
            column: 35
          }
        }, {
          start: {
            line: 347,
            column: 39
          },
          end: {
            line: 347,
            column: 67
          }
        }, {
          start: {
            line: 347,
            column: 71
          },
          end: {
            line: 347,
            column: 88
          }
        }],
        line: 347
      },
      "43": {
        loc: {
          start: {
            line: 350,
            column: 15
          },
          end: {
            line: 350,
            column: 113
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 350,
            column: 15
          },
          end: {
            line: 350,
            column: 35
          }
        }, {
          start: {
            line: 350,
            column: 39
          },
          end: {
            line: 350,
            column: 67
          }
        }, {
          start: {
            line: 350,
            column: 71
          },
          end: {
            line: 350,
            column: 88
          }
        }, {
          start: {
            line: 350,
            column: 92
          },
          end: {
            line: 350,
            column: 113
          }
        }],
        line: 350
      },
      "44": {
        loc: {
          start: {
            line: 353,
            column: 8
          },
          end: {
            line: 353,
            column: 30
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 353,
            column: 8
          },
          end: {
            line: 353,
            column: 30
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 353
      },
      "45": {
        loc: {
          start: {
            line: 366,
            column: 20
          },
          end: {
            line: 366,
            column: 37
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 366,
            column: 20
          },
          end: {
            line: 366,
            column: 31
          }
        }, {
          start: {
            line: 366,
            column: 35
          },
          end: {
            line: 366,
            column: 37
          }
        }],
        line: 366
      },
      "46": {
        loc: {
          start: {
            line: 367,
            column: 19
          },
          end: {
            line: 367,
            column: 35
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 367,
            column: 19
          },
          end: {
            line: 367,
            column: 29
          }
        }, {
          start: {
            line: 367,
            column: 33
          },
          end: {
            line: 367,
            column: 35
          }
        }],
        line: 367
      },
      "47": {
        loc: {
          start: {
            line: 368,
            column: 21
          },
          end: {
            line: 368,
            column: 39
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 368,
            column: 21
          },
          end: {
            line: 368,
            column: 33
          }
        }, {
          start: {
            line: 368,
            column: 37
          },
          end: {
            line: 368,
            column: 39
          }
        }],
        line: 368
      },
      "48": {
        loc: {
          start: {
            line: 371,
            column: 8
          },
          end: {
            line: 373,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 371,
            column: 8
          },
          end: {
            line: 373,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 371
      },
      "49": {
        loc: {
          start: {
            line: 371,
            column: 12
          },
          end: {
            line: 371,
            column: 91
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 371,
            column: 12
          },
          end: {
            line: 371,
            column: 33
          }
        }, {
          start: {
            line: 371,
            column: 37
          },
          end: {
            line: 371,
            column: 91
          }
        }],
        line: 371
      },
      "50": {
        loc: {
          start: {
            line: 375,
            column: 8
          },
          end: {
            line: 386,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 375,
            column: 8
          },
          end: {
            line: 386,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 375
      },
      "51": {
        loc: {
          start: {
            line: 375,
            column: 12
          },
          end: {
            line: 375,
            column: 88
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 375,
            column: 12
          },
          end: {
            line: 375,
            column: 43
          }
        }, {
          start: {
            line: 375,
            column: 47
          },
          end: {
            line: 375,
            column: 58
          }
        }, {
          start: {
            line: 375,
            column: 62
          },
          end: {
            line: 375,
            column: 72
          }
        }, {
          start: {
            line: 375,
            column: 76
          },
          end: {
            line: 375,
            column: 88
          }
        }],
        line: 375
      },
      "52": {
        loc: {
          start: {
            line: 382,
            column: 12
          },
          end: {
            line: 385,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 382,
            column: 12
          },
          end: {
            line: 385,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 382
      },
      "53": {
        loc: {
          start: {
            line: 392,
            column: 22
          },
          end: {
            line: 392,
            column: 39
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 392,
            column: 22
          },
          end: {
            line: 392,
            column: 33
          }
        }, {
          start: {
            line: 392,
            column: 37
          },
          end: {
            line: 392,
            column: 39
          }
        }],
        line: 392
      },
      "54": {
        loc: {
          start: {
            line: 393,
            column: 21
          },
          end: {
            line: 393,
            column: 37
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 393,
            column: 21
          },
          end: {
            line: 393,
            column: 31
          }
        }, {
          start: {
            line: 393,
            column: 35
          },
          end: {
            line: 393,
            column: 37
          }
        }],
        line: 393
      },
      "55": {
        loc: {
          start: {
            line: 394,
            column: 23
          },
          end: {
            line: 394,
            column: 41
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 394,
            column: 23
          },
          end: {
            line: 394,
            column: 35
          }
        }, {
          start: {
            line: 394,
            column: 39
          },
          end: {
            line: 394,
            column: 41
          }
        }],
        line: 394
      },
      "56": {
        loc: {
          start: {
            line: 395,
            column: 24
          },
          end: {
            line: 395,
            column: 43
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 395,
            column: 24
          },
          end: {
            line: 395,
            column: 37
          }
        }, {
          start: {
            line: 395,
            column: 41
          },
          end: {
            line: 395,
            column: 43
          }
        }],
        line: 395
      },
      "57": {
        loc: {
          start: {
            line: 400,
            column: 8
          },
          end: {
            line: 402,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 400,
            column: 8
          },
          end: {
            line: 402,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 400
      },
      "58": {
        loc: {
          start: {
            line: 400,
            column: 12
          },
          end: {
            line: 400,
            column: 90
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 400,
            column: 12
          },
          end: {
            line: 400,
            column: 33
          }
        }, {
          start: {
            line: 400,
            column: 37
          },
          end: {
            line: 400,
            column: 90
          }
        }],
        line: 400
      },
      "59": {
        loc: {
          start: {
            line: 404,
            column: 8
          },
          end: {
            line: 416,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 404,
            column: 8
          },
          end: {
            line: 416,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 404
      },
      "60": {
        loc: {
          start: {
            line: 404,
            column: 12
          },
          end: {
            line: 404,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 404,
            column: 12
          },
          end: {
            line: 404,
            column: 23
          }
        }, {
          start: {
            line: 404,
            column: 27
          },
          end: {
            line: 404,
            column: 37
          }
        }, {
          start: {
            line: 404,
            column: 41
          },
          end: {
            line: 404,
            column: 53
          }
        }],
        line: 404
      },
      "61": {
        loc: {
          start: {
            line: 409,
            column: 28
          },
          end: {
            line: 409,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 409,
            column: 28
          },
          end: {
            line: 409,
            column: 41
          }
        }, {
          start: {
            line: 409,
            column: 45
          },
          end: {
            line: 409,
            column: 47
          }
        }],
        line: 409
      },
      "62": {
        loc: {
          start: {
            line: 412,
            column: 12
          },
          end: {
            line: 415,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 412,
            column: 12
          },
          end: {
            line: 415,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 412
      },
      "63": {
        loc: {
          start: {
            line: 412,
            column: 16
          },
          end: {
            line: 412,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 412,
            column: 16
          },
          end: {
            line: 412,
            column: 45
          }
        }, {
          start: {
            line: 412,
            column: 49
          },
          end: {
            line: 412,
            column: 85
          }
        }],
        line: 412
      },
      "64": {
        loc: {
          start: {
            line: 418,
            column: 8
          },
          end: {
            line: 437,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 418,
            column: 8
          },
          end: {
            line: 437,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 418
      },
      "65": {
        loc: {
          start: {
            line: 418,
            column: 12
          },
          end: {
            line: 418,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 418,
            column: 12
          },
          end: {
            line: 418,
            column: 23
          }
        }, {
          start: {
            line: 418,
            column: 27
          },
          end: {
            line: 418,
            column: 37
          }
        }, {
          start: {
            line: 418,
            column: 41
          },
          end: {
            line: 418,
            column: 53
          }
        }, {
          start: {
            line: 418,
            column: 57
          },
          end: {
            line: 418,
            column: 72
          }
        }],
        line: 418
      },
      "66": {
        loc: {
          start: {
            line: 424,
            column: 30
          },
          end: {
            line: 424,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 424,
            column: 30
          },
          end: {
            line: 424,
            column: 43
          }
        }, {
          start: {
            line: 424,
            column: 47
          },
          end: {
            line: 424,
            column: 51
          }
        }],
        line: 424
      },
      "67": {
        loc: {
          start: {
            line: 443,
            column: 8
          },
          end: {
            line: 459,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 443,
            column: 8
          },
          end: {
            line: 459,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 443
      },
      "68": {
        loc: {
          start: {
            line: 451,
            column: 12
          },
          end: {
            line: 453,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 451,
            column: 12
          },
          end: {
            line: 453,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 451
      },
      "69": {
        loc: {
          start: {
            line: 455,
            column: 70
          },
          end: {
            line: 455,
            column: 226
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 455,
            column: 70
          },
          end: {
            line: 455,
            column: 146
          }
        }, {
          start: {
            line: 455,
            column: 150
          },
          end: {
            line: 455,
            column: 226
          }
        }],
        line: 455
      },
      "70": {
        loc: {
          start: {
            line: 456,
            column: 12
          },
          end: {
            line: 458,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 456,
            column: 12
          },
          end: {
            line: 458,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 456
      },
      "71": {
        loc: {
          start: {
            line: 464,
            column: 15
          },
          end: {
            line: 464,
            column: 39
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 464,
            column: 15
          },
          end: {
            line: 464,
            column: 31
          }
        }, {
          start: {
            line: 464,
            column: 35
          },
          end: {
            line: 464,
            column: 39
          }
        }],
        line: 464
      },
      "72": {
        loc: {
          start: {
            line: 482,
            column: 8
          },
          end: {
            line: 486,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 482,
            column: 8
          },
          end: {
            line: 486,
            column: 9
          }
        }, {
          start: {
            line: 484,
            column: 15
          },
          end: {
            line: 486,
            column: 9
          }
        }],
        line: 482
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0, 0],
      "39": [0, 0],
      "40": [0, 0, 0],
      "41": [0, 0, 0, 0, 0],
      "42": [0, 0, 0],
      "43": [0, 0, 0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0, 0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0],
      "57": [0, 0],
      "58": [0, 0],
      "59": [0, 0],
      "60": [0, 0, 0],
      "61": [0, 0],
      "62": [0, 0],
      "63": [0, 0],
      "64": [0, 0],
      "65": [0, 0, 0, 0],
      "66": [0, 0],
      "67": [0, 0],
      "68": [0, 0],
      "69": [0, 0],
      "70": [0, 0],
      "71": [0, 0],
      "72": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/stefanbekker/projects/fancy-planties/src/lib/services/csv-import-processor.ts"],
      sourcesContent: ["import { db } from '@/lib/db';\nimport { plants, plantInstances, propagations } from '@/lib/db/schema';\nimport { CSVParser, DateParser, ScheduleParser } from './csv-import';\nimport { PlantMatcher } from './plant-matching';\nimport {\n  rawPlantTaxonomyRowSchema,\n  rawFertilizerScheduleRowSchema,\n  rawPropagationRowSchema,\n  processedPlantTaxonomySchema,\n  processedPlantInstanceSchema,\n  processedPropagationSchema,\n  type ImportSummary,\n  type ImportError,\n  type ImportConflict,\n  type CSVImportConfig,\n  type ProcessedPlantTaxonomy,\n  type ProcessedPlantInstance,\n  type ProcessedPropagation,\n} from '@/lib/validation/csv-schemas';\nimport { eq, and } from 'drizzle-orm';\n\nexport class CSVImportProcessor {\n  private config: CSVImportConfig;\n  private plantMatcher: PlantMatcher;\n  private errors: ImportError[] = [];\n  private conflicts: ImportConflict[] = [];\n  private warnings: ImportError[] = [];\n\n  constructor(config: CSVImportConfig) {\n    this.config = config;\n    this.plantMatcher = new PlantMatcher(config.matchingThreshold);\n  }\n\n  /**\n   * Process plant taxonomy CSV import\n   */\n  async processPlantTaxonomyImport(csvContent: string): Promise<ImportSummary> {\n    const startTime = new Date();\n    const summary: ImportSummary = {\n      totalRows: 0,\n      processedRows: 0,\n      successfulImports: 0,\n      errors: [],\n      conflicts: [],\n      warnings: [],\n      skippedRows: 0,\n      importType: 'plant_taxonomy',\n      startTime,\n      userId: this.config.userId,\n    };\n\n    try {\n      // Parse CSV\n      const rows = CSVParser.parseCSV(csvContent);\n      if (rows.length === 0) {\n        throw new Error('CSV file is empty');\n      }\n\n      const objects = CSVParser.rowsToObjects(rows);\n      summary.totalRows = objects.length;\n\n      // Process each row\n      for (let i = 0; i < objects.length; i++) {\n        const rowData = objects[i];\n        \n        try {\n          // Validate raw data\n          const rawData = rawPlantTaxonomyRowSchema.parse(rowData);\n          \n          // Skip empty rows if configured\n          if (this.config.skipEmptyRows && this.isEmptyPlantRow(rawData)) {\n            summary.skippedRows++;\n            continue;\n          }\n\n          // Process and validate\n          const processed = this.processPlantTaxonomyRow(rawData, i);\n          const validatedData = processedPlantTaxonomySchema.parse(processed);\n\n          // Check for duplicates\n          const existing = await this.findExistingPlant(validatedData);\n          if (existing) {\n            this.handleDuplicatePlant(validatedData, existing, i);\n            continue;\n          }\n\n          // Create new plant\n          await db.insert(plants).values({\n            family: validatedData.family,\n            genus: validatedData.genus,\n            species: validatedData.species,\n            cultivar: validatedData.cultivar,\n            commonName: validatedData.commonName,\n            createdBy: this.config.userId,\n            isVerified: false,\n          });\n\n          summary.successfulImports++;\n          summary.processedRows++;\n\n        } catch (error) {\n          this.addError(i, error instanceof Error ? error.message : 'Unknown error', 'error');\n          summary.processedRows++;\n        }\n      }\n\n    } catch (error) {\n      this.addError(0, error instanceof Error ? error.message : 'Failed to process CSV', 'error');\n    }\n\n    summary.endTime = new Date();\n    summary.errors = this.errors;\n    summary.conflicts = this.conflicts;\n    summary.warnings = this.warnings;\n\n    return summary;\n  }\n\n  /**\n   * Process plant instances (fertilizer schedule) CSV import\n   */\n  async processPlantInstancesImport(csvContent: string): Promise<ImportSummary> {\n    const startTime = new Date();\n    const summary: ImportSummary = {\n      totalRows: 0,\n      processedRows: 0,\n      successfulImports: 0,\n      errors: [],\n      conflicts: [],\n      warnings: [],\n      skippedRows: 0,\n      importType: 'plant_instances',\n      startTime,\n      userId: this.config.userId,\n    };\n\n    try {\n      // Parse CSV\n      const rows = CSVParser.parseCSV(csvContent);\n      if (rows.length === 0) {\n        throw new Error('CSV file is empty');\n      }\n\n      const objects = CSVParser.rowsToObjects(rows);\n      summary.totalRows = objects.length;\n\n      // Process each row\n      for (let i = 0; i < objects.length; i++) {\n        const rowData = objects[i];\n        \n        try {\n          // Validate raw data\n          const rawData = rawFertilizerScheduleRowSchema.parse(rowData);\n          \n          // Skip empty rows if configured\n          if (this.config.skipEmptyRows && this.isEmptyInstanceRow(rawData)) {\n            summary.skippedRows++;\n            continue;\n          }\n\n          // Process and validate\n          const processed = await this.processPlantInstanceRow(rawData, i);\n          const validatedData = processedPlantInstanceSchema.parse(processed);\n\n          // Find or create matching plant\n          const plantId = await this.findOrCreatePlantForInstance(validatedData, i);\n          if (!plantId) {\n            continue; // Error already logged\n          }\n\n          // Create plant instance\n          await db.insert(plantInstances).values({\n            userId: this.config.userId,\n            plantId,\n            nickname: validatedData.nickname,\n            location: validatedData.location,\n            lastFertilized: validatedData.lastFertilized,\n            fertilizerSchedule: validatedData.fertilizerSchedule,\n            fertilizerDue: validatedData.fertilizerDue,\n            lastRepot: validatedData.lastRepot,\n            isActive: true,\n          });\n\n          summary.successfulImports++;\n          summary.processedRows++;\n\n        } catch (error) {\n          this.addError(i, error instanceof Error ? error.message : 'Unknown error', 'error');\n          summary.processedRows++;\n        }\n      }\n\n    } catch (error) {\n      this.addError(0, error instanceof Error ? error.message : 'Failed to process CSV', 'error');\n    }\n\n    summary.endTime = new Date();\n    summary.errors = this.errors;\n    summary.conflicts = this.conflicts;\n    summary.warnings = this.warnings;\n\n    return summary;\n  }\n\n  /**\n   * Process propagations CSV import\n   */\n  async processPropagationsImport(csvContent: string): Promise<ImportSummary> {\n    const startTime = new Date();\n    const summary: ImportSummary = {\n      totalRows: 0,\n      processedRows: 0,\n      successfulImports: 0,\n      errors: [],\n      conflicts: [],\n      warnings: [],\n      skippedRows: 0,\n      importType: 'propagations',\n      startTime,\n      userId: this.config.userId,\n    };\n\n    try {\n      // Parse CSV\n      const rows = CSVParser.parseCSV(csvContent);\n      if (rows.length === 0) {\n        throw new Error('CSV file is empty');\n      }\n\n      const objects = CSVParser.rowsToObjects(rows);\n      summary.totalRows = objects.length;\n\n      // Process each row\n      for (let i = 0; i < objects.length; i++) {\n        const rowData = objects[i];\n        \n        try {\n          // Validate raw data\n          const rawData = rawPropagationRowSchema.parse(rowData);\n          \n          // Skip empty rows if configured\n          if (this.config.skipEmptyRows && this.isEmptyPropagationRow(rawData)) {\n            summary.skippedRows++;\n            continue;\n          }\n\n          // Process and validate\n          const processed = await this.processPropagationRow(rawData, i);\n          const validatedData = processedPropagationSchema.parse(processed);\n\n          // Find matching plant\n          const plantId = await this.findPlantForPropagation(validatedData, i);\n          if (!plantId) {\n            continue; // Error already logged\n          }\n\n          // Try to find parent instance for internal propagations\n          let parentInstanceId: number | null = null;\n          if (validatedData.sourceType === 'internal') {\n            parentInstanceId = await this.findParentInstance(validatedData, plantId);\n            if (!parentInstanceId) {\n              const parentInfo = validatedData.parentPlantName ? `\"${validatedData.parentPlantName}\"` : 'unspecified parent';\n              this.addWarning(i, `Could not find parent plant ${parentInfo} for internal propagation: ${validatedData.nickname}. Converting to external propagation.`, 'warning');\n              // Convert to external propagation\n              validatedData.sourceType = 'external';\n              validatedData.externalSource = 'other';\n              validatedData.externalSourceDetails = `Originally marked as internal propagation from: ${validatedData.parentPlantName || 'unknown parent'}`;\n            } else {\n              // Log successful parent plant matching\n              if (validatedData.parentPlantName) {\n                this.addWarning(i, `Successfully matched parent plant \"${validatedData.parentPlantName}\" for propagation: ${validatedData.nickname}`, 'warning');\n              }\n            }\n          }\n\n          // Create propagation\n          await db.insert(propagations).values({\n            userId: this.config.userId,\n            plantId,\n            parentInstanceId,\n            nickname: validatedData.nickname,\n            location: validatedData.location,\n            dateStarted: validatedData.dateStarted,\n            status: 'started',\n            sourceType: validatedData.sourceType,\n            externalSource: validatedData.externalSource,\n            externalSourceDetails: validatedData.externalSourceDetails,\n          });\n\n          summary.successfulImports++;\n          summary.processedRows++;\n\n        } catch (error) {\n          this.addError(i, error instanceof Error ? error.message : 'Unknown error', 'error');\n          summary.processedRows++;\n        }\n      }\n\n    } catch (error) {\n      this.addError(0, error instanceof Error ? error.message : 'Failed to process CSV', 'error');\n    }\n\n    summary.endTime = new Date();\n    summary.errors = this.errors;\n    summary.conflicts = this.conflicts;\n    summary.warnings = this.warnings;\n\n    return summary;\n  }\n\n  // Helper methods for processing different row types\n\n  private processPlantTaxonomyRow(rawData: any, rowIndex: number): ProcessedPlantTaxonomy {\n    // Handle both new separate fields and legacy combined field\n    const cultivar = this.cleanField(rawData['Cultivar']) || null;\n    const commonName = this.cleanField(rawData['Common Name']) || \n                      this.cleanField(rawData['Common Name/Variety']);\n\n    return {\n      family: this.cleanAndCapitalize(rawData['Family']),\n      genus: this.cleanAndCapitalize(rawData['Genus']),\n      species: this.cleanField(rawData['Species']).toLowerCase(),\n      cultivar,\n      commonName,\n      rowIndex,\n    };\n  }\n\n  private async processPlantInstanceRow(rawData: any, rowIndex: number): Promise<ProcessedPlantInstance> {\n    const lastFertilized = DateParser.parseDate(rawData['Last Fertilized']);\n    const fertilizerSchedule = ScheduleParser.parseSchedule(rawData['Fertilizer Schedule']);\n    const fertilizerDue = DateParser.parseDate(rawData['Fertilizer Due']) || \n                         ScheduleParser.calculateNextDue(lastFertilized, fertilizerSchedule);\n    const lastRepot = DateParser.parseDate(rawData['Last Repot']);\n\n    // Handle both new separate fields and legacy combined field\n    const cultivar = this.cleanField(rawData['Cultivar']) || null;\n    const commonName = this.cleanField(rawData['Common Name']) || \n                      this.cleanField(rawData['Common Name/Variety']);\n\n    return {\n      family: this.cleanField(rawData['Family']),\n      genus: this.cleanField(rawData['Genus']),\n      species: this.cleanField(rawData['Species']),\n      cultivar,\n      commonName,\n      nickname: commonName, // Use common name as nickname\n      location: this.cleanField(rawData['Location']),\n      lastFertilized,\n      fertilizerSchedule,\n      fertilizerDue,\n      lastRepot,\n      rowIndex,\n    };\n  }\n\n  private async processPropagationRow(rawData: any, rowIndex: number): Promise<ProcessedPropagation> {\n    const dateStarted = DateParser.parseDate(rawData['Date Started']);\n    if (!dateStarted) {\n      throw new Error('Invalid or missing date started');\n    }\n\n    // Handle both new separate fields and legacy combined field\n    const cultivar = this.cleanField(rawData['Cultivar']) || null;\n    const commonName = this.cleanField(rawData['Common Name']) || \n                      this.cleanField(rawData['Common Name/Variety']);\n\n    // Detect external source information\n    const sourceField = this.cleanField(rawData['Source']).toLowerCase();\n    const sourceDetails = this.cleanField(rawData['Source Details']) || null;\n    const parentPlantName = this.cleanField(rawData['Parent Plant']) || null;\n\n    // Determine source type and external source\n    let sourceType: 'internal' | 'external' = 'external'; // Default to external for CSV imports\n    let externalSource: 'gift' | 'trade' | 'purchase' | 'other' | null = null;\n\n    if (parentPlantName) {\n      sourceType = 'internal';\n    } else if (sourceField) {\n      sourceType = 'external';\n      // Map common source terms to our enum values\n      if (sourceField.includes('gift') || sourceField.includes('given')) {\n        externalSource = 'gift';\n      } else if (sourceField.includes('trade') || sourceField.includes('swap') || sourceField.includes('exchange')) {\n        externalSource = 'trade';\n      } else if (sourceField.includes('purchase') || sourceField.includes('bought') || sourceField.includes('buy')) {\n        externalSource = 'purchase';\n      } else {\n        externalSource = 'other';\n      }\n    } else {\n      // No source information provided, default to external/other\n      externalSource = 'other';\n    }\n\n    return {\n      family: this.cleanField(rawData['Family']),\n      genus: this.cleanField(rawData['Genus']),\n      species: this.cleanField(rawData['Species']),\n      cultivar,\n      commonName,\n      nickname: commonName,\n      location: this.cleanField(rawData['Location']),\n      dateStarted,\n      sourceType,\n      externalSource,\n      externalSourceDetails: sourceDetails,\n      parentPlantName,\n      rowIndex,\n    };\n  }\n\n  // Helper methods for data validation and processing\n\n  private isEmptyPlantRow(data: any): boolean {\n    return !data['Family'] && !data['Genus'] && !data['Species'] && \n           !data['Common Name'] && !data['Common Name/Variety'];\n  }\n\n  private isEmptyInstanceRow(data: any): boolean {\n    return !data['Common Name'] && !data['Common Name/Variety'] && !data['Location'];\n  }\n\n  private isEmptyPropagationRow(data: any): boolean {\n    return !data['Common Name'] && !data['Common Name/Variety'] && \n           !data['Location'] && !data['Date Started'];\n  }\n\n  private cleanField(value: string): string {\n    if (!value) return '';\n    return value.trim().replace(/[\"\"]/g, '\"').replace(/\\s+/g, ' ');\n  }\n\n  private cleanAndCapitalize(value: string): string {\n    const cleaned = this.cleanField(value);\n    return cleaned.charAt(0).toUpperCase() + cleaned.slice(1).toLowerCase();\n  }\n\n  private async findExistingPlant(data: ProcessedPlantTaxonomy) {\n    return await db\n      .select()\n      .from(plants)\n      .where(\n        and(\n          eq(plants.family, data.family),\n          eq(plants.genus, data.genus),\n          eq(plants.species, data.species)\n        )\n      )\n      .limit(1);\n  }\n\n  private async findOrCreatePlantForInstance(data: ProcessedPlantInstance, rowIndex: number): Promise<number | null> {\n    // Try to match with existing plant\n    const matchResult = await this.plantMatcher.findMatches({\n      Family: data.family || '',\n      Genus: data.genus || '',\n      Species: data.species || '',\n      'Common Name/Variety': data.commonName,\n    });\n\n    if (matchResult.bestMatch && matchResult.confidence > this.config.matchingThreshold) {\n      return matchResult.bestMatch.plantId;\n    }\n\n    // Create new plant if configured to do so\n    if (this.config.createMissingPlants && data.family && data.genus && data.species) {\n      const newPlant = await this.plantMatcher.createPlantFromCSV({\n        Family: data.family,\n        Genus: data.genus,\n        Species: data.species,\n        'Common Name/Variety': data.commonName,\n      }, this.config.userId);\n\n      if (newPlant) {\n        this.addWarning(rowIndex, `Created new plant: ${data.family} ${data.genus} ${data.species}`, 'warning');\n        return newPlant.id;\n      }\n    }\n\n    this.addError(rowIndex, `Could not find or create plant for: ${data.commonName}`, 'error');\n    return null;\n  }\n\n  private async findPlantForPropagation(data: ProcessedPropagation, rowIndex: number): Promise<number | null> {\n    const matchResult = await this.plantMatcher.findMatches({\n      'Family': data.family || '',\n      'Genus': data.genus || '',\n      'Species': data.species || '',\n      'Cultivar': data.cultivar || '',\n      'Common Name': data.commonName,\n    });\n\n    // Use a lower threshold for propagations since we want to be more permissive\n    const propagationMatchingThreshold = Math.min(0.6, this.config.matchingThreshold);\n    \n    if (matchResult.bestMatch && matchResult.confidence > propagationMatchingThreshold) {\n      return matchResult.bestMatch.plantId;\n    }\n\n    // If no match found, try again with just taxonomy (family, genus, species)\n    if (data.family && data.genus && data.species) {\n      const taxonomyMatchResult = await this.plantMatcher.findMatches({\n        'Family': data.family,\n        'Genus': data.genus,\n        'Species': data.species,\n        'Cultivar': data.cultivar || '',\n        'Common Name': '',\n      });\n      \n      if (taxonomyMatchResult.bestMatch && taxonomyMatchResult.confidence > 0.8) {\n        this.addWarning(rowIndex, `Using taxonomy match for propagation: ${data.commonName} -> ${taxonomyMatchResult.bestMatch.plant.commonName}`, 'warning');\n        return taxonomyMatchResult.bestMatch.plantId;\n      }\n    }\n\n    // If we still can't find a match, create a new plant entry for propagations import\n    if (data.family && data.genus && data.species && data.commonName) {\n      try {\n        const newPlant = await db.insert(plants).values({\n          family: data.family,\n          genus: data.genus,\n          species: data.species.toLowerCase(),\n          cultivar: data.cultivar || null,\n          commonName: data.commonName,\n          createdBy: this.config.userId,\n          isVerified: false,\n        }).returning({ id: plants.id });\n\n        this.addWarning(rowIndex, `Created new plant for propagation: ${data.commonName} (${data.genus} ${data.species})`, 'warning');\n        return newPlant[0].id;\n      } catch (error) {\n        this.addError(rowIndex, `Could not create plant for propagation: ${data.commonName} - ${error}`, 'error');\n        return null;\n      }\n    }\n\n    this.addError(rowIndex, `Could not find or create plant for propagation: ${data.commonName} (Family: ${data.family}, Genus: ${data.genus}, Species: ${data.species})`, 'error');\n    return null;\n  }\n\n  private async findParentInstance(data: ProcessedPropagation, plantId: number): Promise<number | null> {\n    // If we have a parent plant name from CSV, try to find it by nickname first\n    if (data.parentPlantName) {\n      const instancesByNickname = await db\n        .select({ \n          id: plantInstances.id, \n          nickname: plantInstances.nickname,\n          plantId: plantInstances.plantId\n        })\n        .from(plantInstances)\n        .where(\n          and(\n            eq(plantInstances.userId, this.config.userId),\n            eq(plantInstances.isActive, true)\n          )\n        );\n\n      // Try exact nickname match first\n      const exactMatch = instancesByNickname.find(instance => \n        instance.nickname.toLowerCase() === data.parentPlantName!.toLowerCase()\n      );\n      \n      if (exactMatch) {\n        return exactMatch.id;\n      }\n\n      // Try partial nickname match\n      const partialMatch = instancesByNickname.find(instance => \n        instance.nickname.toLowerCase().includes(data.parentPlantName!.toLowerCase()) ||\n        data.parentPlantName!.toLowerCase().includes(instance.nickname.toLowerCase())\n      );\n      \n      if (partialMatch) {\n        return partialMatch.id;\n      }\n    }\n\n    // Fallback: Find any instance of the same plant type\n    const instances = await db\n      .select({ id: plantInstances.id })\n      .from(plantInstances)\n      .where(\n        and(\n          eq(plantInstances.userId, this.config.userId),\n          eq(plantInstances.plantId, plantId),\n          eq(plantInstances.isActive, true)\n        )\n      )\n      .limit(1);\n\n    return instances[0]?.id || null;\n  }\n\n  private handleDuplicatePlant(data: ProcessedPlantTaxonomy, existing: any, rowIndex: number) {\n    this.conflicts.push({\n      type: 'duplicate_plant',\n      rowIndex,\n      message: `Plant already exists: ${data.family} ${data.genus} ${data.species}`,\n      existingRecord: existing[0],\n      suggestedAction: this.config.handleDuplicates,\n    });\n  }\n\n  private addError(rowIndex: number, message: string, severity: 'error' | 'warning', field?: string) {\n    const error: ImportError = {\n      rowIndex,\n      field,\n      message,\n      severity,\n    };\n\n    if (severity === 'error') {\n      this.errors.push(error);\n    } else {\n      this.warnings.push(error);\n    }\n  }\n\n  private addWarning(rowIndex: number, message: string, severity: 'warning', field?: string) {\n    this.addError(rowIndex, message, severity, field);\n  }\n}"],
      names: ["CSVImportProcessor", "config", "errors", "conflicts", "warnings", "plantMatcher", "PlantMatcher", "matchingThreshold", "processPlantTaxonomyImport", "csvContent", "startTime", "Date", "summary", "totalRows", "processedRows", "successfulImports", "skippedRows", "importType", "userId", "rows", "CSVParser", "parseCSV", "length", "Error", "objects", "rowsToObjects", "i", "rowData", "rawData", "rawPlantTaxonomyRowSchema", "parse", "skipEmptyRows", "isEmptyPlantRow", "processed", "processPlantTaxonomyRow", "validatedData", "processedPlantTaxonomySchema", "existing", "findExistingPlant", "handleDuplicatePlant", "db", "insert", "plants", "values", "family", "genus", "species", "cultivar", "commonName", "createdBy", "isVerified", "error", "addError", "message", "endTime", "processPlantInstancesImport", "rawFertilizerScheduleRowSchema", "isEmptyInstanceRow", "processPlantInstanceRow", "processedPlantInstanceSchema", "plantId", "findOrCreatePlantForInstance", "plantInstances", "nickname", "location", "lastFertilized", "fertilizerSchedule", "fertilizerDue", "lastRepot", "isActive", "processPropagationsImport", "rawPropagationRowSchema", "isEmptyPropagationRow", "processPropagationRow", "processedPropagationSchema", "findPlantForPropagation", "parentInstanceId", "sourceType", "findParentInstance", "parentInfo", "parentPlantName", "addWarning", "externalSource", "externalSourceDetails", "propagations", "dateStarted", "status", "rowIndex", "cleanField", "cleanAndCapitalize", "toLowerCase", "DateParser", "parseDate", "ScheduleParser", "parseSchedule", "calculateNextDue", "sourceField", "sourceDetails", "includes", "data", "value", "trim", "replace", "cleaned", "charAt", "toUpperCase", "slice", "select", "from", "where", "and", "eq", "limit", "matchResult", "findMatches", "Family", "Genus", "Species", "bestMatch", "confidence", "createMissingPlants", "newPlant", "createPlantFromCSV", "id", "propagationMatchingThreshold", "Math", "min", "taxonomyMatchResult", "plant", "returning", "instancesByNickname", "exactMatch", "find", "instance", "partialMatch", "instances", "push", "type", "existingRecord", "suggestedAction", "handleDuplicates", "severity", "field"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "551ea11fdcfd9f9bc5c3d47d523cce5b491840f8"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_9mhcvvbe6 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_9mhcvvbe6();
cov_9mhcvvbe6().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_9mhcvvbe6().s[1]++;
Object.defineProperty(exports, "CSVImportProcessor", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_9mhcvvbe6().f[0]++;
    cov_9mhcvvbe6().s[2]++;
    return CSVImportProcessor;
  }
});
const _db =
/* istanbul ignore next */
(cov_9mhcvvbe6().s[3]++, require("../db"));
const _schema =
/* istanbul ignore next */
(cov_9mhcvvbe6().s[4]++, require("../db/schema"));
const _csvimport =
/* istanbul ignore next */
(cov_9mhcvvbe6().s[5]++, require("./csv-import"));
const _plantmatching =
/* istanbul ignore next */
(cov_9mhcvvbe6().s[6]++, require("./plant-matching"));
const _csvschemas =
/* istanbul ignore next */
(cov_9mhcvvbe6().s[7]++, require("../validation/csv-schemas"));
const _drizzleorm =
/* istanbul ignore next */
(cov_9mhcvvbe6().s[8]++, require("drizzle-orm"));
class CSVImportProcessor {
  constructor(config) {
    /* istanbul ignore next */
    cov_9mhcvvbe6().f[1]++;
    cov_9mhcvvbe6().s[9]++;
    this.errors = [];
    /* istanbul ignore next */
    cov_9mhcvvbe6().s[10]++;
    this.conflicts = [];
    /* istanbul ignore next */
    cov_9mhcvvbe6().s[11]++;
    this.warnings = [];
    /* istanbul ignore next */
    cov_9mhcvvbe6().s[12]++;
    this.config = config;
    /* istanbul ignore next */
    cov_9mhcvvbe6().s[13]++;
    this.plantMatcher = new _plantmatching.PlantMatcher(config.matchingThreshold);
  }
  /**
  * Process plant taxonomy CSV import
  */
  async processPlantTaxonomyImport(csvContent) {
    /* istanbul ignore next */
    cov_9mhcvvbe6().f[2]++;
    const startTime =
    /* istanbul ignore next */
    (cov_9mhcvvbe6().s[14]++, new Date());
    const summary =
    /* istanbul ignore next */
    (cov_9mhcvvbe6().s[15]++, {
      totalRows: 0,
      processedRows: 0,
      successfulImports: 0,
      errors: [],
      conflicts: [],
      warnings: [],
      skippedRows: 0,
      importType: 'plant_taxonomy',
      startTime,
      userId: this.config.userId
    });
    /* istanbul ignore next */
    cov_9mhcvvbe6().s[16]++;
    try {
      // Parse CSV
      const rows =
      /* istanbul ignore next */
      (cov_9mhcvvbe6().s[17]++, _csvimport.CSVParser.parseCSV(csvContent));
      /* istanbul ignore next */
      cov_9mhcvvbe6().s[18]++;
      if (rows.length === 0) {
        /* istanbul ignore next */
        cov_9mhcvvbe6().b[0][0]++;
        cov_9mhcvvbe6().s[19]++;
        throw new Error('CSV file is empty');
      } else
      /* istanbul ignore next */
      {
        cov_9mhcvvbe6().b[0][1]++;
      }
      const objects =
      /* istanbul ignore next */
      (cov_9mhcvvbe6().s[20]++, _csvimport.CSVParser.rowsToObjects(rows));
      /* istanbul ignore next */
      cov_9mhcvvbe6().s[21]++;
      summary.totalRows = objects.length;
      // Process each row
      /* istanbul ignore next */
      cov_9mhcvvbe6().s[22]++;
      for (let i =
      /* istanbul ignore next */
      (cov_9mhcvvbe6().s[23]++, 0); i < objects.length; i++) {
        const rowData =
        /* istanbul ignore next */
        (cov_9mhcvvbe6().s[24]++, objects[i]);
        /* istanbul ignore next */
        cov_9mhcvvbe6().s[25]++;
        try {
          // Validate raw data
          const rawData =
          /* istanbul ignore next */
          (cov_9mhcvvbe6().s[26]++, _csvschemas.rawPlantTaxonomyRowSchema.parse(rowData));
          // Skip empty rows if configured
          /* istanbul ignore next */
          cov_9mhcvvbe6().s[27]++;
          if (
          /* istanbul ignore next */
          (cov_9mhcvvbe6().b[2][0]++, this.config.skipEmptyRows) &&
          /* istanbul ignore next */
          (cov_9mhcvvbe6().b[2][1]++, this.isEmptyPlantRow(rawData))) {
            /* istanbul ignore next */
            cov_9mhcvvbe6().b[1][0]++;
            cov_9mhcvvbe6().s[28]++;
            summary.skippedRows++;
            /* istanbul ignore next */
            cov_9mhcvvbe6().s[29]++;
            continue;
          } else
          /* istanbul ignore next */
          {
            cov_9mhcvvbe6().b[1][1]++;
          }
          // Process and validate
          const processed =
          /* istanbul ignore next */
          (cov_9mhcvvbe6().s[30]++, this.processPlantTaxonomyRow(rawData, i));
          const validatedData =
          /* istanbul ignore next */
          (cov_9mhcvvbe6().s[31]++, _csvschemas.processedPlantTaxonomySchema.parse(processed));
          // Check for duplicates
          const existing =
          /* istanbul ignore next */
          (cov_9mhcvvbe6().s[32]++, await this.findExistingPlant(validatedData));
          /* istanbul ignore next */
          cov_9mhcvvbe6().s[33]++;
          if (existing) {
            /* istanbul ignore next */
            cov_9mhcvvbe6().b[3][0]++;
            cov_9mhcvvbe6().s[34]++;
            this.handleDuplicatePlant(validatedData, existing, i);
            /* istanbul ignore next */
            cov_9mhcvvbe6().s[35]++;
            continue;
          } else
          /* istanbul ignore next */
          {
            cov_9mhcvvbe6().b[3][1]++;
          }
          // Create new plant
          cov_9mhcvvbe6().s[36]++;
          await _db.db.insert(_schema.plants).values({
            family: validatedData.family,
            genus: validatedData.genus,
            species: validatedData.species,
            cultivar: validatedData.cultivar,
            commonName: validatedData.commonName,
            createdBy: this.config.userId,
            isVerified: false
          });
          /* istanbul ignore next */
          cov_9mhcvvbe6().s[37]++;
          summary.successfulImports++;
          /* istanbul ignore next */
          cov_9mhcvvbe6().s[38]++;
          summary.processedRows++;
        } catch (error) {
          /* istanbul ignore next */
          cov_9mhcvvbe6().s[39]++;
          this.addError(i, error instanceof Error ?
          /* istanbul ignore next */
          (cov_9mhcvvbe6().b[4][0]++, error.message) :
          /* istanbul ignore next */
          (cov_9mhcvvbe6().b[4][1]++, 'Unknown error'), 'error');
          /* istanbul ignore next */
          cov_9mhcvvbe6().s[40]++;
          summary.processedRows++;
        }
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_9mhcvvbe6().s[41]++;
      this.addError(0, error instanceof Error ?
      /* istanbul ignore next */
      (cov_9mhcvvbe6().b[5][0]++, error.message) :
      /* istanbul ignore next */
      (cov_9mhcvvbe6().b[5][1]++, 'Failed to process CSV'), 'error');
    }
    /* istanbul ignore next */
    cov_9mhcvvbe6().s[42]++;
    summary.endTime = new Date();
    /* istanbul ignore next */
    cov_9mhcvvbe6().s[43]++;
    summary.errors = this.errors;
    /* istanbul ignore next */
    cov_9mhcvvbe6().s[44]++;
    summary.conflicts = this.conflicts;
    /* istanbul ignore next */
    cov_9mhcvvbe6().s[45]++;
    summary.warnings = this.warnings;
    /* istanbul ignore next */
    cov_9mhcvvbe6().s[46]++;
    return summary;
  }
  /**
  * Process plant instances (fertilizer schedule) CSV import
  */
  async processPlantInstancesImport(csvContent) {
    /* istanbul ignore next */
    cov_9mhcvvbe6().f[3]++;
    const startTime =
    /* istanbul ignore next */
    (cov_9mhcvvbe6().s[47]++, new Date());
    const summary =
    /* istanbul ignore next */
    (cov_9mhcvvbe6().s[48]++, {
      totalRows: 0,
      processedRows: 0,
      successfulImports: 0,
      errors: [],
      conflicts: [],
      warnings: [],
      skippedRows: 0,
      importType: 'plant_instances',
      startTime,
      userId: this.config.userId
    });
    /* istanbul ignore next */
    cov_9mhcvvbe6().s[49]++;
    try {
      // Parse CSV
      const rows =
      /* istanbul ignore next */
      (cov_9mhcvvbe6().s[50]++, _csvimport.CSVParser.parseCSV(csvContent));
      /* istanbul ignore next */
      cov_9mhcvvbe6().s[51]++;
      if (rows.length === 0) {
        /* istanbul ignore next */
        cov_9mhcvvbe6().b[6][0]++;
        cov_9mhcvvbe6().s[52]++;
        throw new Error('CSV file is empty');
      } else
      /* istanbul ignore next */
      {
        cov_9mhcvvbe6().b[6][1]++;
      }
      const objects =
      /* istanbul ignore next */
      (cov_9mhcvvbe6().s[53]++, _csvimport.CSVParser.rowsToObjects(rows));
      /* istanbul ignore next */
      cov_9mhcvvbe6().s[54]++;
      summary.totalRows = objects.length;
      // Process each row
      /* istanbul ignore next */
      cov_9mhcvvbe6().s[55]++;
      for (let i =
      /* istanbul ignore next */
      (cov_9mhcvvbe6().s[56]++, 0); i < objects.length; i++) {
        const rowData =
        /* istanbul ignore next */
        (cov_9mhcvvbe6().s[57]++, objects[i]);
        /* istanbul ignore next */
        cov_9mhcvvbe6().s[58]++;
        try {
          // Validate raw data
          const rawData =
          /* istanbul ignore next */
          (cov_9mhcvvbe6().s[59]++, _csvschemas.rawFertilizerScheduleRowSchema.parse(rowData));
          // Skip empty rows if configured
          /* istanbul ignore next */
          cov_9mhcvvbe6().s[60]++;
          if (
          /* istanbul ignore next */
          (cov_9mhcvvbe6().b[8][0]++, this.config.skipEmptyRows) &&
          /* istanbul ignore next */
          (cov_9mhcvvbe6().b[8][1]++, this.isEmptyInstanceRow(rawData))) {
            /* istanbul ignore next */
            cov_9mhcvvbe6().b[7][0]++;
            cov_9mhcvvbe6().s[61]++;
            summary.skippedRows++;
            /* istanbul ignore next */
            cov_9mhcvvbe6().s[62]++;
            continue;
          } else
          /* istanbul ignore next */
          {
            cov_9mhcvvbe6().b[7][1]++;
          }
          // Process and validate
          const processed =
          /* istanbul ignore next */
          (cov_9mhcvvbe6().s[63]++, await this.processPlantInstanceRow(rawData, i));
          const validatedData =
          /* istanbul ignore next */
          (cov_9mhcvvbe6().s[64]++, _csvschemas.processedPlantInstanceSchema.parse(processed));
          // Find or create matching plant
          const plantId =
          /* istanbul ignore next */
          (cov_9mhcvvbe6().s[65]++, await this.findOrCreatePlantForInstance(validatedData, i));
          /* istanbul ignore next */
          cov_9mhcvvbe6().s[66]++;
          if (!plantId) {
            /* istanbul ignore next */
            cov_9mhcvvbe6().b[9][0]++;
            cov_9mhcvvbe6().s[67]++;
            continue; // Error already logged
          } else
          /* istanbul ignore next */
          {
            cov_9mhcvvbe6().b[9][1]++;
          }
          // Create plant instance
          cov_9mhcvvbe6().s[68]++;
          await _db.db.insert(_schema.plantInstances).values({
            userId: this.config.userId,
            plantId,
            nickname: validatedData.nickname,
            location: validatedData.location,
            lastFertilized: validatedData.lastFertilized,
            fertilizerSchedule: validatedData.fertilizerSchedule,
            fertilizerDue: validatedData.fertilizerDue,
            lastRepot: validatedData.lastRepot,
            isActive: true
          });
          /* istanbul ignore next */
          cov_9mhcvvbe6().s[69]++;
          summary.successfulImports++;
          /* istanbul ignore next */
          cov_9mhcvvbe6().s[70]++;
          summary.processedRows++;
        } catch (error) {
          /* istanbul ignore next */
          cov_9mhcvvbe6().s[71]++;
          this.addError(i, error instanceof Error ?
          /* istanbul ignore next */
          (cov_9mhcvvbe6().b[10][0]++, error.message) :
          /* istanbul ignore next */
          (cov_9mhcvvbe6().b[10][1]++, 'Unknown error'), 'error');
          /* istanbul ignore next */
          cov_9mhcvvbe6().s[72]++;
          summary.processedRows++;
        }
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_9mhcvvbe6().s[73]++;
      this.addError(0, error instanceof Error ?
      /* istanbul ignore next */
      (cov_9mhcvvbe6().b[11][0]++, error.message) :
      /* istanbul ignore next */
      (cov_9mhcvvbe6().b[11][1]++, 'Failed to process CSV'), 'error');
    }
    /* istanbul ignore next */
    cov_9mhcvvbe6().s[74]++;
    summary.endTime = new Date();
    /* istanbul ignore next */
    cov_9mhcvvbe6().s[75]++;
    summary.errors = this.errors;
    /* istanbul ignore next */
    cov_9mhcvvbe6().s[76]++;
    summary.conflicts = this.conflicts;
    /* istanbul ignore next */
    cov_9mhcvvbe6().s[77]++;
    summary.warnings = this.warnings;
    /* istanbul ignore next */
    cov_9mhcvvbe6().s[78]++;
    return summary;
  }
  /**
  * Process propagations CSV import
  */
  async processPropagationsImport(csvContent) {
    /* istanbul ignore next */
    cov_9mhcvvbe6().f[4]++;
    const startTime =
    /* istanbul ignore next */
    (cov_9mhcvvbe6().s[79]++, new Date());
    const summary =
    /* istanbul ignore next */
    (cov_9mhcvvbe6().s[80]++, {
      totalRows: 0,
      processedRows: 0,
      successfulImports: 0,
      errors: [],
      conflicts: [],
      warnings: [],
      skippedRows: 0,
      importType: 'propagations',
      startTime,
      userId: this.config.userId
    });
    /* istanbul ignore next */
    cov_9mhcvvbe6().s[81]++;
    try {
      // Parse CSV
      const rows =
      /* istanbul ignore next */
      (cov_9mhcvvbe6().s[82]++, _csvimport.CSVParser.parseCSV(csvContent));
      /* istanbul ignore next */
      cov_9mhcvvbe6().s[83]++;
      if (rows.length === 0) {
        /* istanbul ignore next */
        cov_9mhcvvbe6().b[12][0]++;
        cov_9mhcvvbe6().s[84]++;
        throw new Error('CSV file is empty');
      } else
      /* istanbul ignore next */
      {
        cov_9mhcvvbe6().b[12][1]++;
      }
      const objects =
      /* istanbul ignore next */
      (cov_9mhcvvbe6().s[85]++, _csvimport.CSVParser.rowsToObjects(rows));
      /* istanbul ignore next */
      cov_9mhcvvbe6().s[86]++;
      summary.totalRows = objects.length;
      // Process each row
      /* istanbul ignore next */
      cov_9mhcvvbe6().s[87]++;
      for (let i =
      /* istanbul ignore next */
      (cov_9mhcvvbe6().s[88]++, 0); i < objects.length; i++) {
        const rowData =
        /* istanbul ignore next */
        (cov_9mhcvvbe6().s[89]++, objects[i]);
        /* istanbul ignore next */
        cov_9mhcvvbe6().s[90]++;
        try {
          // Validate raw data
          const rawData =
          /* istanbul ignore next */
          (cov_9mhcvvbe6().s[91]++, _csvschemas.rawPropagationRowSchema.parse(rowData));
          // Skip empty rows if configured
          /* istanbul ignore next */
          cov_9mhcvvbe6().s[92]++;
          if (
          /* istanbul ignore next */
          (cov_9mhcvvbe6().b[14][0]++, this.config.skipEmptyRows) &&
          /* istanbul ignore next */
          (cov_9mhcvvbe6().b[14][1]++, this.isEmptyPropagationRow(rawData))) {
            /* istanbul ignore next */
            cov_9mhcvvbe6().b[13][0]++;
            cov_9mhcvvbe6().s[93]++;
            summary.skippedRows++;
            /* istanbul ignore next */
            cov_9mhcvvbe6().s[94]++;
            continue;
          } else
          /* istanbul ignore next */
          {
            cov_9mhcvvbe6().b[13][1]++;
          }
          // Process and validate
          const processed =
          /* istanbul ignore next */
          (cov_9mhcvvbe6().s[95]++, await this.processPropagationRow(rawData, i));
          const validatedData =
          /* istanbul ignore next */
          (cov_9mhcvvbe6().s[96]++, _csvschemas.processedPropagationSchema.parse(processed));
          // Find matching plant
          const plantId =
          /* istanbul ignore next */
          (cov_9mhcvvbe6().s[97]++, await this.findPlantForPropagation(validatedData, i));
          /* istanbul ignore next */
          cov_9mhcvvbe6().s[98]++;
          if (!plantId) {
            /* istanbul ignore next */
            cov_9mhcvvbe6().b[15][0]++;
            cov_9mhcvvbe6().s[99]++;
            continue; // Error already logged
          } else
          /* istanbul ignore next */
          {
            cov_9mhcvvbe6().b[15][1]++;
          }
          // Try to find parent instance for internal propagations
          let parentInstanceId =
          /* istanbul ignore next */
          (cov_9mhcvvbe6().s[100]++, null);
          /* istanbul ignore next */
          cov_9mhcvvbe6().s[101]++;
          if (validatedData.sourceType === 'internal') {
            /* istanbul ignore next */
            cov_9mhcvvbe6().b[16][0]++;
            cov_9mhcvvbe6().s[102]++;
            parentInstanceId = await this.findParentInstance(validatedData, plantId);
            /* istanbul ignore next */
            cov_9mhcvvbe6().s[103]++;
            if (!parentInstanceId) {
              /* istanbul ignore next */
              cov_9mhcvvbe6().b[17][0]++;
              const parentInfo =
              /* istanbul ignore next */
              (cov_9mhcvvbe6().s[104]++, validatedData.parentPlantName ?
              /* istanbul ignore next */
              (cov_9mhcvvbe6().b[18][0]++, `"${validatedData.parentPlantName}"`) :
              /* istanbul ignore next */
              (cov_9mhcvvbe6().b[18][1]++, 'unspecified parent'));
              /* istanbul ignore next */
              cov_9mhcvvbe6().s[105]++;
              this.addWarning(i, `Could not find parent plant ${parentInfo} for internal propagation: ${validatedData.nickname}. Converting to external propagation.`, 'warning');
              // Convert to external propagation
              /* istanbul ignore next */
              cov_9mhcvvbe6().s[106]++;
              validatedData.sourceType = 'external';
              /* istanbul ignore next */
              cov_9mhcvvbe6().s[107]++;
              validatedData.externalSource = 'other';
              /* istanbul ignore next */
              cov_9mhcvvbe6().s[108]++;
              validatedData.externalSourceDetails = `Originally marked as internal propagation from: ${
              /* istanbul ignore next */
              (cov_9mhcvvbe6().b[19][0]++, validatedData.parentPlantName) ||
              /* istanbul ignore next */
              (cov_9mhcvvbe6().b[19][1]++, 'unknown parent')}`;
            } else {
              /* istanbul ignore next */
              cov_9mhcvvbe6().b[17][1]++;
              cov_9mhcvvbe6().s[109]++;
              // Log successful parent plant matching
              if (validatedData.parentPlantName) {
                /* istanbul ignore next */
                cov_9mhcvvbe6().b[20][0]++;
                cov_9mhcvvbe6().s[110]++;
                this.addWarning(i, `Successfully matched parent plant "${validatedData.parentPlantName}" for propagation: ${validatedData.nickname}`, 'warning');
              } else
              /* istanbul ignore next */
              {
                cov_9mhcvvbe6().b[20][1]++;
              }
            }
          } else
          /* istanbul ignore next */
          {
            cov_9mhcvvbe6().b[16][1]++;
          }
          // Create propagation
          cov_9mhcvvbe6().s[111]++;
          await _db.db.insert(_schema.propagations).values({
            userId: this.config.userId,
            plantId,
            parentInstanceId,
            nickname: validatedData.nickname,
            location: validatedData.location,
            dateStarted: validatedData.dateStarted,
            status: 'started',
            sourceType: validatedData.sourceType,
            externalSource: validatedData.externalSource,
            externalSourceDetails: validatedData.externalSourceDetails
          });
          /* istanbul ignore next */
          cov_9mhcvvbe6().s[112]++;
          summary.successfulImports++;
          /* istanbul ignore next */
          cov_9mhcvvbe6().s[113]++;
          summary.processedRows++;
        } catch (error) {
          /* istanbul ignore next */
          cov_9mhcvvbe6().s[114]++;
          this.addError(i, error instanceof Error ?
          /* istanbul ignore next */
          (cov_9mhcvvbe6().b[21][0]++, error.message) :
          /* istanbul ignore next */
          (cov_9mhcvvbe6().b[21][1]++, 'Unknown error'), 'error');
          /* istanbul ignore next */
          cov_9mhcvvbe6().s[115]++;
          summary.processedRows++;
        }
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_9mhcvvbe6().s[116]++;
      this.addError(0, error instanceof Error ?
      /* istanbul ignore next */
      (cov_9mhcvvbe6().b[22][0]++, error.message) :
      /* istanbul ignore next */
      (cov_9mhcvvbe6().b[22][1]++, 'Failed to process CSV'), 'error');
    }
    /* istanbul ignore next */
    cov_9mhcvvbe6().s[117]++;
    summary.endTime = new Date();
    /* istanbul ignore next */
    cov_9mhcvvbe6().s[118]++;
    summary.errors = this.errors;
    /* istanbul ignore next */
    cov_9mhcvvbe6().s[119]++;
    summary.conflicts = this.conflicts;
    /* istanbul ignore next */
    cov_9mhcvvbe6().s[120]++;
    summary.warnings = this.warnings;
    /* istanbul ignore next */
    cov_9mhcvvbe6().s[121]++;
    return summary;
  }
  // Helper methods for processing different row types
  processPlantTaxonomyRow(rawData, rowIndex) {
    /* istanbul ignore next */
    cov_9mhcvvbe6().f[5]++;
    // Handle both new separate fields and legacy combined field
    const cultivar =
    /* istanbul ignore next */
    (cov_9mhcvvbe6().s[122]++,
    /* istanbul ignore next */
    (cov_9mhcvvbe6().b[23][0]++, this.cleanField(rawData['Cultivar'])) ||
    /* istanbul ignore next */
    (cov_9mhcvvbe6().b[23][1]++, null));
    const commonName =
    /* istanbul ignore next */
    (cov_9mhcvvbe6().s[123]++,
    /* istanbul ignore next */
    (cov_9mhcvvbe6().b[24][0]++, this.cleanField(rawData['Common Name'])) ||
    /* istanbul ignore next */
    (cov_9mhcvvbe6().b[24][1]++, this.cleanField(rawData['Common Name/Variety'])));
    /* istanbul ignore next */
    cov_9mhcvvbe6().s[124]++;
    return {
      family: this.cleanAndCapitalize(rawData['Family']),
      genus: this.cleanAndCapitalize(rawData['Genus']),
      species: this.cleanField(rawData['Species']).toLowerCase(),
      cultivar,
      commonName,
      rowIndex
    };
  }
  async processPlantInstanceRow(rawData, rowIndex) {
    /* istanbul ignore next */
    cov_9mhcvvbe6().f[6]++;
    const lastFertilized =
    /* istanbul ignore next */
    (cov_9mhcvvbe6().s[125]++, _csvimport.DateParser.parseDate(rawData['Last Fertilized']));
    const fertilizerSchedule =
    /* istanbul ignore next */
    (cov_9mhcvvbe6().s[126]++, _csvimport.ScheduleParser.parseSchedule(rawData['Fertilizer Schedule']));
    const fertilizerDue =
    /* istanbul ignore next */
    (cov_9mhcvvbe6().s[127]++,
    /* istanbul ignore next */
    (cov_9mhcvvbe6().b[25][0]++, _csvimport.DateParser.parseDate(rawData['Fertilizer Due'])) ||
    /* istanbul ignore next */
    (cov_9mhcvvbe6().b[25][1]++, _csvimport.ScheduleParser.calculateNextDue(lastFertilized, fertilizerSchedule)));
    const lastRepot =
    /* istanbul ignore next */
    (cov_9mhcvvbe6().s[128]++, _csvimport.DateParser.parseDate(rawData['Last Repot']));
    // Handle both new separate fields and legacy combined field
    const cultivar =
    /* istanbul ignore next */
    (cov_9mhcvvbe6().s[129]++,
    /* istanbul ignore next */
    (cov_9mhcvvbe6().b[26][0]++, this.cleanField(rawData['Cultivar'])) ||
    /* istanbul ignore next */
    (cov_9mhcvvbe6().b[26][1]++, null));
    const commonName =
    /* istanbul ignore next */
    (cov_9mhcvvbe6().s[130]++,
    /* istanbul ignore next */
    (cov_9mhcvvbe6().b[27][0]++, this.cleanField(rawData['Common Name'])) ||
    /* istanbul ignore next */
    (cov_9mhcvvbe6().b[27][1]++, this.cleanField(rawData['Common Name/Variety'])));
    /* istanbul ignore next */
    cov_9mhcvvbe6().s[131]++;
    return {
      family: this.cleanField(rawData['Family']),
      genus: this.cleanField(rawData['Genus']),
      species: this.cleanField(rawData['Species']),
      cultivar,
      commonName,
      nickname: commonName,
      location: this.cleanField(rawData['Location']),
      lastFertilized,
      fertilizerSchedule,
      fertilizerDue,
      lastRepot,
      rowIndex
    };
  }
  async processPropagationRow(rawData, rowIndex) {
    /* istanbul ignore next */
    cov_9mhcvvbe6().f[7]++;
    const dateStarted =
    /* istanbul ignore next */
    (cov_9mhcvvbe6().s[132]++, _csvimport.DateParser.parseDate(rawData['Date Started']));
    /* istanbul ignore next */
    cov_9mhcvvbe6().s[133]++;
    if (!dateStarted) {
      /* istanbul ignore next */
      cov_9mhcvvbe6().b[28][0]++;
      cov_9mhcvvbe6().s[134]++;
      throw new Error('Invalid or missing date started');
    } else
    /* istanbul ignore next */
    {
      cov_9mhcvvbe6().b[28][1]++;
    }
    // Handle both new separate fields and legacy combined field
    const cultivar =
    /* istanbul ignore next */
    (cov_9mhcvvbe6().s[135]++,
    /* istanbul ignore next */
    (cov_9mhcvvbe6().b[29][0]++, this.cleanField(rawData['Cultivar'])) ||
    /* istanbul ignore next */
    (cov_9mhcvvbe6().b[29][1]++, null));
    const commonName =
    /* istanbul ignore next */
    (cov_9mhcvvbe6().s[136]++,
    /* istanbul ignore next */
    (cov_9mhcvvbe6().b[30][0]++, this.cleanField(rawData['Common Name'])) ||
    /* istanbul ignore next */
    (cov_9mhcvvbe6().b[30][1]++, this.cleanField(rawData['Common Name/Variety'])));
    // Detect external source information
    const sourceField =
    /* istanbul ignore next */
    (cov_9mhcvvbe6().s[137]++, this.cleanField(rawData['Source']).toLowerCase());
    const sourceDetails =
    /* istanbul ignore next */
    (cov_9mhcvvbe6().s[138]++,
    /* istanbul ignore next */
    (cov_9mhcvvbe6().b[31][0]++, this.cleanField(rawData['Source Details'])) ||
    /* istanbul ignore next */
    (cov_9mhcvvbe6().b[31][1]++, null));
    const parentPlantName =
    /* istanbul ignore next */
    (cov_9mhcvvbe6().s[139]++,
    /* istanbul ignore next */
    (cov_9mhcvvbe6().b[32][0]++, this.cleanField(rawData['Parent Plant'])) ||
    /* istanbul ignore next */
    (cov_9mhcvvbe6().b[32][1]++, null));
    // Determine source type and external source
    let sourceType =
    /* istanbul ignore next */
    (cov_9mhcvvbe6().s[140]++, 'external'); // Default to external for CSV imports
    let externalSource =
    /* istanbul ignore next */
    (cov_9mhcvvbe6().s[141]++, null);
    /* istanbul ignore next */
    cov_9mhcvvbe6().s[142]++;
    if (parentPlantName) {
      /* istanbul ignore next */
      cov_9mhcvvbe6().b[33][0]++;
      cov_9mhcvvbe6().s[143]++;
      sourceType = 'internal';
    } else {
      /* istanbul ignore next */
      cov_9mhcvvbe6().b[33][1]++;
      cov_9mhcvvbe6().s[144]++;
      if (sourceField) {
        /* istanbul ignore next */
        cov_9mhcvvbe6().b[34][0]++;
        cov_9mhcvvbe6().s[145]++;
        sourceType = 'external';
        // Map common source terms to our enum values
        /* istanbul ignore next */
        cov_9mhcvvbe6().s[146]++;
        if (
        /* istanbul ignore next */
        (cov_9mhcvvbe6().b[36][0]++, sourceField.includes('gift')) ||
        /* istanbul ignore next */
        (cov_9mhcvvbe6().b[36][1]++, sourceField.includes('given'))) {
          /* istanbul ignore next */
          cov_9mhcvvbe6().b[35][0]++;
          cov_9mhcvvbe6().s[147]++;
          externalSource = 'gift';
        } else {
          /* istanbul ignore next */
          cov_9mhcvvbe6().b[35][1]++;
          cov_9mhcvvbe6().s[148]++;
          if (
          /* istanbul ignore next */
          (cov_9mhcvvbe6().b[38][0]++, sourceField.includes('trade')) ||
          /* istanbul ignore next */
          (cov_9mhcvvbe6().b[38][1]++, sourceField.includes('swap')) ||
          /* istanbul ignore next */
          (cov_9mhcvvbe6().b[38][2]++, sourceField.includes('exchange'))) {
            /* istanbul ignore next */
            cov_9mhcvvbe6().b[37][0]++;
            cov_9mhcvvbe6().s[149]++;
            externalSource = 'trade';
          } else {
            /* istanbul ignore next */
            cov_9mhcvvbe6().b[37][1]++;
            cov_9mhcvvbe6().s[150]++;
            if (
            /* istanbul ignore next */
            (cov_9mhcvvbe6().b[40][0]++, sourceField.includes('purchase')) ||
            /* istanbul ignore next */
            (cov_9mhcvvbe6().b[40][1]++, sourceField.includes('bought')) ||
            /* istanbul ignore next */
            (cov_9mhcvvbe6().b[40][2]++, sourceField.includes('buy'))) {
              /* istanbul ignore next */
              cov_9mhcvvbe6().b[39][0]++;
              cov_9mhcvvbe6().s[151]++;
              externalSource = 'purchase';
            } else {
              /* istanbul ignore next */
              cov_9mhcvvbe6().b[39][1]++;
              cov_9mhcvvbe6().s[152]++;
              externalSource = 'other';
            }
          }
        }
      } else {
        /* istanbul ignore next */
        cov_9mhcvvbe6().b[34][1]++;
        cov_9mhcvvbe6().s[153]++;
        // No source information provided, default to external/other
        externalSource = 'other';
      }
    }
    /* istanbul ignore next */
    cov_9mhcvvbe6().s[154]++;
    return {
      family: this.cleanField(rawData['Family']),
      genus: this.cleanField(rawData['Genus']),
      species: this.cleanField(rawData['Species']),
      cultivar,
      commonName,
      nickname: commonName,
      location: this.cleanField(rawData['Location']),
      dateStarted,
      sourceType,
      externalSource,
      externalSourceDetails: sourceDetails,
      parentPlantName,
      rowIndex
    };
  }
  // Helper methods for data validation and processing
  isEmptyPlantRow(data) {
    /* istanbul ignore next */
    cov_9mhcvvbe6().f[8]++;
    cov_9mhcvvbe6().s[155]++;
    return /* istanbul ignore next */(cov_9mhcvvbe6().b[41][0]++, !data['Family']) &&
    /* istanbul ignore next */
    (cov_9mhcvvbe6().b[41][1]++, !data['Genus']) &&
    /* istanbul ignore next */
    (cov_9mhcvvbe6().b[41][2]++, !data['Species']) &&
    /* istanbul ignore next */
    (cov_9mhcvvbe6().b[41][3]++, !data['Common Name']) &&
    /* istanbul ignore next */
    (cov_9mhcvvbe6().b[41][4]++, !data['Common Name/Variety']);
  }
  isEmptyInstanceRow(data) {
    /* istanbul ignore next */
    cov_9mhcvvbe6().f[9]++;
    cov_9mhcvvbe6().s[156]++;
    return /* istanbul ignore next */(cov_9mhcvvbe6().b[42][0]++, !data['Common Name']) &&
    /* istanbul ignore next */
    (cov_9mhcvvbe6().b[42][1]++, !data['Common Name/Variety']) &&
    /* istanbul ignore next */
    (cov_9mhcvvbe6().b[42][2]++, !data['Location']);
  }
  isEmptyPropagationRow(data) {
    /* istanbul ignore next */
    cov_9mhcvvbe6().f[10]++;
    cov_9mhcvvbe6().s[157]++;
    return /* istanbul ignore next */(cov_9mhcvvbe6().b[43][0]++, !data['Common Name']) &&
    /* istanbul ignore next */
    (cov_9mhcvvbe6().b[43][1]++, !data['Common Name/Variety']) &&
    /* istanbul ignore next */
    (cov_9mhcvvbe6().b[43][2]++, !data['Location']) &&
    /* istanbul ignore next */
    (cov_9mhcvvbe6().b[43][3]++, !data['Date Started']);
  }
  cleanField(value) {
    /* istanbul ignore next */
    cov_9mhcvvbe6().f[11]++;
    cov_9mhcvvbe6().s[158]++;
    if (!value) {
      /* istanbul ignore next */
      cov_9mhcvvbe6().b[44][0]++;
      cov_9mhcvvbe6().s[159]++;
      return '';
    } else
    /* istanbul ignore next */
    {
      cov_9mhcvvbe6().b[44][1]++;
    }
    cov_9mhcvvbe6().s[160]++;
    return value.trim().replace(/[""]/g, '"').replace(/\s+/g, ' ');
  }
  cleanAndCapitalize(value) {
    /* istanbul ignore next */
    cov_9mhcvvbe6().f[12]++;
    const cleaned =
    /* istanbul ignore next */
    (cov_9mhcvvbe6().s[161]++, this.cleanField(value));
    /* istanbul ignore next */
    cov_9mhcvvbe6().s[162]++;
    return cleaned.charAt(0).toUpperCase() + cleaned.slice(1).toLowerCase();
  }
  async findExistingPlant(data) {
    /* istanbul ignore next */
    cov_9mhcvvbe6().f[13]++;
    cov_9mhcvvbe6().s[163]++;
    return await _db.db.select().from(_schema.plants).where((0, _drizzleorm.and)((0, _drizzleorm.eq)(_schema.plants.family, data.family), (0, _drizzleorm.eq)(_schema.plants.genus, data.genus), (0, _drizzleorm.eq)(_schema.plants.species, data.species))).limit(1);
  }
  async findOrCreatePlantForInstance(data, rowIndex) {
    /* istanbul ignore next */
    cov_9mhcvvbe6().f[14]++;
    // Try to match with existing plant
    const matchResult =
    /* istanbul ignore next */
    (cov_9mhcvvbe6().s[164]++, await this.plantMatcher.findMatches({
      Family:
      /* istanbul ignore next */
      (cov_9mhcvvbe6().b[45][0]++, data.family) ||
      /* istanbul ignore next */
      (cov_9mhcvvbe6().b[45][1]++, ''),
      Genus:
      /* istanbul ignore next */
      (cov_9mhcvvbe6().b[46][0]++, data.genus) ||
      /* istanbul ignore next */
      (cov_9mhcvvbe6().b[46][1]++, ''),
      Species:
      /* istanbul ignore next */
      (cov_9mhcvvbe6().b[47][0]++, data.species) ||
      /* istanbul ignore next */
      (cov_9mhcvvbe6().b[47][1]++, ''),
      'Common Name/Variety': data.commonName
    }));
    /* istanbul ignore next */
    cov_9mhcvvbe6().s[165]++;
    if (
    /* istanbul ignore next */
    (cov_9mhcvvbe6().b[49][0]++, matchResult.bestMatch) &&
    /* istanbul ignore next */
    (cov_9mhcvvbe6().b[49][1]++, matchResult.confidence > this.config.matchingThreshold)) {
      /* istanbul ignore next */
      cov_9mhcvvbe6().b[48][0]++;
      cov_9mhcvvbe6().s[166]++;
      return matchResult.bestMatch.plantId;
    } else
    /* istanbul ignore next */
    {
      cov_9mhcvvbe6().b[48][1]++;
    }
    // Create new plant if configured to do so
    cov_9mhcvvbe6().s[167]++;
    if (
    /* istanbul ignore next */
    (cov_9mhcvvbe6().b[51][0]++, this.config.createMissingPlants) &&
    /* istanbul ignore next */
    (cov_9mhcvvbe6().b[51][1]++, data.family) &&
    /* istanbul ignore next */
    (cov_9mhcvvbe6().b[51][2]++, data.genus) &&
    /* istanbul ignore next */
    (cov_9mhcvvbe6().b[51][3]++, data.species)) {
      /* istanbul ignore next */
      cov_9mhcvvbe6().b[50][0]++;
      const newPlant =
      /* istanbul ignore next */
      (cov_9mhcvvbe6().s[168]++, await this.plantMatcher.createPlantFromCSV({
        Family: data.family,
        Genus: data.genus,
        Species: data.species,
        'Common Name/Variety': data.commonName
      }, this.config.userId));
      /* istanbul ignore next */
      cov_9mhcvvbe6().s[169]++;
      if (newPlant) {
        /* istanbul ignore next */
        cov_9mhcvvbe6().b[52][0]++;
        cov_9mhcvvbe6().s[170]++;
        this.addWarning(rowIndex, `Created new plant: ${data.family} ${data.genus} ${data.species}`, 'warning');
        /* istanbul ignore next */
        cov_9mhcvvbe6().s[171]++;
        return newPlant.id;
      } else
      /* istanbul ignore next */
      {
        cov_9mhcvvbe6().b[52][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_9mhcvvbe6().b[50][1]++;
    }
    cov_9mhcvvbe6().s[172]++;
    this.addError(rowIndex, `Could not find or create plant for: ${data.commonName}`, 'error');
    /* istanbul ignore next */
    cov_9mhcvvbe6().s[173]++;
    return null;
  }
  async findPlantForPropagation(data, rowIndex) {
    /* istanbul ignore next */
    cov_9mhcvvbe6().f[15]++;
    const matchResult =
    /* istanbul ignore next */
    (cov_9mhcvvbe6().s[174]++, await this.plantMatcher.findMatches({
      'Family':
      /* istanbul ignore next */
      (cov_9mhcvvbe6().b[53][0]++, data.family) ||
      /* istanbul ignore next */
      (cov_9mhcvvbe6().b[53][1]++, ''),
      'Genus':
      /* istanbul ignore next */
      (cov_9mhcvvbe6().b[54][0]++, data.genus) ||
      /* istanbul ignore next */
      (cov_9mhcvvbe6().b[54][1]++, ''),
      'Species':
      /* istanbul ignore next */
      (cov_9mhcvvbe6().b[55][0]++, data.species) ||
      /* istanbul ignore next */
      (cov_9mhcvvbe6().b[55][1]++, ''),
      'Cultivar':
      /* istanbul ignore next */
      (cov_9mhcvvbe6().b[56][0]++, data.cultivar) ||
      /* istanbul ignore next */
      (cov_9mhcvvbe6().b[56][1]++, ''),
      'Common Name': data.commonName
    }));
    // Use a lower threshold for propagations since we want to be more permissive
    const propagationMatchingThreshold =
    /* istanbul ignore next */
    (cov_9mhcvvbe6().s[175]++, Math.min(0.6, this.config.matchingThreshold));
    /* istanbul ignore next */
    cov_9mhcvvbe6().s[176]++;
    if (
    /* istanbul ignore next */
    (cov_9mhcvvbe6().b[58][0]++, matchResult.bestMatch) &&
    /* istanbul ignore next */
    (cov_9mhcvvbe6().b[58][1]++, matchResult.confidence > propagationMatchingThreshold)) {
      /* istanbul ignore next */
      cov_9mhcvvbe6().b[57][0]++;
      cov_9mhcvvbe6().s[177]++;
      return matchResult.bestMatch.plantId;
    } else
    /* istanbul ignore next */
    {
      cov_9mhcvvbe6().b[57][1]++;
    }
    // If no match found, try again with just taxonomy (family, genus, species)
    cov_9mhcvvbe6().s[178]++;
    if (
    /* istanbul ignore next */
    (cov_9mhcvvbe6().b[60][0]++, data.family) &&
    /* istanbul ignore next */
    (cov_9mhcvvbe6().b[60][1]++, data.genus) &&
    /* istanbul ignore next */
    (cov_9mhcvvbe6().b[60][2]++, data.species)) {
      /* istanbul ignore next */
      cov_9mhcvvbe6().b[59][0]++;
      const taxonomyMatchResult =
      /* istanbul ignore next */
      (cov_9mhcvvbe6().s[179]++, await this.plantMatcher.findMatches({
        'Family': data.family,
        'Genus': data.genus,
        'Species': data.species,
        'Cultivar':
        /* istanbul ignore next */
        (cov_9mhcvvbe6().b[61][0]++, data.cultivar) ||
        /* istanbul ignore next */
        (cov_9mhcvvbe6().b[61][1]++, ''),
        'Common Name': ''
      }));
      /* istanbul ignore next */
      cov_9mhcvvbe6().s[180]++;
      if (
      /* istanbul ignore next */
      (cov_9mhcvvbe6().b[63][0]++, taxonomyMatchResult.bestMatch) &&
      /* istanbul ignore next */
      (cov_9mhcvvbe6().b[63][1]++, taxonomyMatchResult.confidence > 0.8)) {
        /* istanbul ignore next */
        cov_9mhcvvbe6().b[62][0]++;
        cov_9mhcvvbe6().s[181]++;
        this.addWarning(rowIndex, `Using taxonomy match for propagation: ${data.commonName} -> ${taxonomyMatchResult.bestMatch.plant.commonName}`, 'warning');
        /* istanbul ignore next */
        cov_9mhcvvbe6().s[182]++;
        return taxonomyMatchResult.bestMatch.plantId;
      } else
      /* istanbul ignore next */
      {
        cov_9mhcvvbe6().b[62][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_9mhcvvbe6().b[59][1]++;
    }
    // If we still can't find a match, create a new plant entry for propagations import
    cov_9mhcvvbe6().s[183]++;
    if (
    /* istanbul ignore next */
    (cov_9mhcvvbe6().b[65][0]++, data.family) &&
    /* istanbul ignore next */
    (cov_9mhcvvbe6().b[65][1]++, data.genus) &&
    /* istanbul ignore next */
    (cov_9mhcvvbe6().b[65][2]++, data.species) &&
    /* istanbul ignore next */
    (cov_9mhcvvbe6().b[65][3]++, data.commonName)) {
      /* istanbul ignore next */
      cov_9mhcvvbe6().b[64][0]++;
      cov_9mhcvvbe6().s[184]++;
      try {
        const newPlant =
        /* istanbul ignore next */
        (cov_9mhcvvbe6().s[185]++, await _db.db.insert(_schema.plants).values({
          family: data.family,
          genus: data.genus,
          species: data.species.toLowerCase(),
          cultivar:
          /* istanbul ignore next */
          (cov_9mhcvvbe6().b[66][0]++, data.cultivar) ||
          /* istanbul ignore next */
          (cov_9mhcvvbe6().b[66][1]++, null),
          commonName: data.commonName,
          createdBy: this.config.userId,
          isVerified: false
        }).returning({
          id: _schema.plants.id
        }));
        /* istanbul ignore next */
        cov_9mhcvvbe6().s[186]++;
        this.addWarning(rowIndex, `Created new plant for propagation: ${data.commonName} (${data.genus} ${data.species})`, 'warning');
        /* istanbul ignore next */
        cov_9mhcvvbe6().s[187]++;
        return newPlant[0].id;
      } catch (error) {
        /* istanbul ignore next */
        cov_9mhcvvbe6().s[188]++;
        this.addError(rowIndex, `Could not create plant for propagation: ${data.commonName} - ${error}`, 'error');
        /* istanbul ignore next */
        cov_9mhcvvbe6().s[189]++;
        return null;
      }
    } else
    /* istanbul ignore next */
    {
      cov_9mhcvvbe6().b[64][1]++;
    }
    cov_9mhcvvbe6().s[190]++;
    this.addError(rowIndex, `Could not find or create plant for propagation: ${data.commonName} (Family: ${data.family}, Genus: ${data.genus}, Species: ${data.species})`, 'error');
    /* istanbul ignore next */
    cov_9mhcvvbe6().s[191]++;
    return null;
  }
  async findParentInstance(data, plantId) {
    /* istanbul ignore next */
    cov_9mhcvvbe6().f[16]++;
    cov_9mhcvvbe6().s[192]++;
    // If we have a parent plant name from CSV, try to find it by nickname first
    if (data.parentPlantName) {
      /* istanbul ignore next */
      cov_9mhcvvbe6().b[67][0]++;
      const instancesByNickname =
      /* istanbul ignore next */
      (cov_9mhcvvbe6().s[193]++, await _db.db.select({
        id: _schema.plantInstances.id,
        nickname: _schema.plantInstances.nickname,
        plantId: _schema.plantInstances.plantId
      }).from(_schema.plantInstances).where((0, _drizzleorm.and)((0, _drizzleorm.eq)(_schema.plantInstances.userId, this.config.userId), (0, _drizzleorm.eq)(_schema.plantInstances.isActive, true))));
      // Try exact nickname match first
      const exactMatch =
      /* istanbul ignore next */
      (cov_9mhcvvbe6().s[194]++, instancesByNickname.find(instance => {
        /* istanbul ignore next */
        cov_9mhcvvbe6().f[17]++;
        cov_9mhcvvbe6().s[195]++;
        return instance.nickname.toLowerCase() === data.parentPlantName.toLowerCase();
      }));
      /* istanbul ignore next */
      cov_9mhcvvbe6().s[196]++;
      if (exactMatch) {
        /* istanbul ignore next */
        cov_9mhcvvbe6().b[68][0]++;
        cov_9mhcvvbe6().s[197]++;
        return exactMatch.id;
      } else
      /* istanbul ignore next */
      {
        cov_9mhcvvbe6().b[68][1]++;
      }
      // Try partial nickname match
      const partialMatch =
      /* istanbul ignore next */
      (cov_9mhcvvbe6().s[198]++, instancesByNickname.find(instance => {
        /* istanbul ignore next */
        cov_9mhcvvbe6().f[18]++;
        cov_9mhcvvbe6().s[199]++;
        return /* istanbul ignore next */(cov_9mhcvvbe6().b[69][0]++, instance.nickname.toLowerCase().includes(data.parentPlantName.toLowerCase())) ||
        /* istanbul ignore next */
        (cov_9mhcvvbe6().b[69][1]++, data.parentPlantName.toLowerCase().includes(instance.nickname.toLowerCase()));
      }));
      /* istanbul ignore next */
      cov_9mhcvvbe6().s[200]++;
      if (partialMatch) {
        /* istanbul ignore next */
        cov_9mhcvvbe6().b[70][0]++;
        cov_9mhcvvbe6().s[201]++;
        return partialMatch.id;
      } else
      /* istanbul ignore next */
      {
        cov_9mhcvvbe6().b[70][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_9mhcvvbe6().b[67][1]++;
    }
    // Fallback: Find any instance of the same plant type
    const instances =
    /* istanbul ignore next */
    (cov_9mhcvvbe6().s[202]++, await _db.db.select({
      id: _schema.plantInstances.id
    }).from(_schema.plantInstances).where((0, _drizzleorm.and)((0, _drizzleorm.eq)(_schema.plantInstances.userId, this.config.userId), (0, _drizzleorm.eq)(_schema.plantInstances.plantId, plantId), (0, _drizzleorm.eq)(_schema.plantInstances.isActive, true))).limit(1));
    /* istanbul ignore next */
    cov_9mhcvvbe6().s[203]++;
    return /* istanbul ignore next */(cov_9mhcvvbe6().b[71][0]++, instances[0]?.id) ||
    /* istanbul ignore next */
    (cov_9mhcvvbe6().b[71][1]++, null);
  }
  handleDuplicatePlant(data, existing, rowIndex) {
    /* istanbul ignore next */
    cov_9mhcvvbe6().f[19]++;
    cov_9mhcvvbe6().s[204]++;
    this.conflicts.push({
      type: 'duplicate_plant',
      rowIndex,
      message: `Plant already exists: ${data.family} ${data.genus} ${data.species}`,
      existingRecord: existing[0],
      suggestedAction: this.config.handleDuplicates
    });
  }
  addError(rowIndex, message, severity, field) {
    /* istanbul ignore next */
    cov_9mhcvvbe6().f[20]++;
    const error =
    /* istanbul ignore next */
    (cov_9mhcvvbe6().s[205]++, {
      rowIndex,
      field,
      message,
      severity
    });
    /* istanbul ignore next */
    cov_9mhcvvbe6().s[206]++;
    if (severity === 'error') {
      /* istanbul ignore next */
      cov_9mhcvvbe6().b[72][0]++;
      cov_9mhcvvbe6().s[207]++;
      this.errors.push(error);
    } else {
      /* istanbul ignore next */
      cov_9mhcvvbe6().b[72][1]++;
      cov_9mhcvvbe6().s[208]++;
      this.warnings.push(error);
    }
  }
  addWarning(rowIndex, message, severity, field) {
    /* istanbul ignore next */
    cov_9mhcvvbe6().f[21]++;
    cov_9mhcvvbe6().s[209]++;
    this.addError(rowIndex, message, severity, field);
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,