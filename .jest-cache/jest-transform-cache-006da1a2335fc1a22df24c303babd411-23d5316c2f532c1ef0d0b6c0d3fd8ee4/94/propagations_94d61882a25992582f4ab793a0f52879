1f4146e7371d165caee413f5adda3361
"use strict";

/* istanbul ignore next */
function cov_2kxhofaget() {
  var path = "/Users/stefanbekker/projects/fancy-planties/src/lib/db/queries/propagations.ts";
  var hash = "540edfd2a3250675d4fb7c4b90be1a52cf033cf8";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/stefanbekker/projects/fancy-planties/src/lib/db/queries/propagations.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 34
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 11,
          column: 23
        }
      },
      "4": {
        start: {
          line: 12,
          column: 20
        },
        end: {
          line: 12,
          column: 42
        }
      },
      "5": {
        start: {
          line: 13,
          column: 15
        },
        end: {
          line: 13,
          column: 34
        }
      },
      "6": {
        start: {
          line: 14,
          column: 16
        },
        end: {
          line: 14,
          column: 36
        }
      },
      "7": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 24,
          column: 9
        }
      },
      "8": {
        start: {
          line: 19,
          column: 34
        },
        end: {
          line: 19,
          column: 114
        }
      },
      "9": {
        start: {
          line: 20,
          column: 12
        },
        end: {
          line: 20,
          column: 31
        }
      },
      "10": {
        start: {
          line: 22,
          column: 12
        },
        end: {
          line: 22,
          column: 66
        }
      },
      "11": {
        start: {
          line: 23,
          column: 12
        },
        end: {
          line: 23,
          column: 60
        }
      },
      "12": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 39,
          column: 9
        }
      },
      "13": {
        start: {
          line: 29,
          column: 34
        },
        end: {
          line: 29,
          column: 356
        }
      },
      "14": {
        start: {
          line: 30,
          column: 12
        },
        end: {
          line: 30,
          column: 42
        }
      },
      "15": {
        start: {
          line: 30,
          column: 30
        },
        end: {
          line: 30,
          column: 42
        }
      },
      "16": {
        start: {
          line: 31,
          column: 12
        },
        end: {
          line: 35,
          column: 14
        }
      },
      "17": {
        start: {
          line: 37,
          column: 12
        },
        end: {
          line: 37,
          column: 69
        }
      },
      "18": {
        start: {
          line: 38,
          column: 12
        },
        end: {
          line: 38,
          column: 57
        }
      },
      "19": {
        start: {
          line: 43,
          column: 8
        },
        end: {
          line: 53,
          column: 9
        }
      },
      "20": {
        start: {
          line: 44,
          column: 36
        },
        end: {
          line: 44,
          column: 431
        }
      },
      "21": {
        start: {
          line: 45,
          column: 12
        },
        end: {
          line: 49,
          column: 20
        }
      },
      "22": {
        start: {
          line: 45,
          column: 48
        },
        end: {
          line: 49,
          column: 17
        }
      },
      "23": {
        start: {
          line: 51,
          column: 12
        },
        end: {
          line: 51,
          column: 75
        }
      },
      "24": {
        start: {
          line: 52,
          column: 12
        },
        end: {
          line: 52,
          column: 58
        }
      },
      "25": {
        start: {
          line: 57,
          column: 8
        },
        end: {
          line: 67,
          column: 9
        }
      },
      "26": {
        start: {
          line: 58,
          column: 36
        },
        end: {
          line: 58,
          column: 511
        }
      },
      "27": {
        start: {
          line: 59,
          column: 12
        },
        end: {
          line: 63,
          column: 20
        }
      },
      "28": {
        start: {
          line: 59,
          column: 48
        },
        end: {
          line: 63,
          column: 17
        }
      },
      "29": {
        start: {
          line: 65,
          column: 12
        },
        end: {
          line: 65,
          column: 74
        }
      },
      "30": {
        start: {
          line: 66,
          column: 12
        },
        end: {
          line: 66,
          column: 68
        }
      },
      "31": {
        start: {
          line: 71,
          column: 8
        },
        end: {
          line: 81,
          column: 9
        }
      },
      "32": {
        start: {
          line: 72,
          column: 36
        },
        end: {
          line: 72,
          column: 519
        }
      },
      "33": {
        start: {
          line: 73,
          column: 12
        },
        end: {
          line: 77,
          column: 20
        }
      },
      "34": {
        start: {
          line: 73,
          column: 48
        },
        end: {
          line: 77,
          column: 17
        }
      },
      "35": {
        start: {
          line: 79,
          column: 12
        },
        end: {
          line: 79,
          column: 79
        }
      },
      "36": {
        start: {
          line: 80,
          column: 12
        },
        end: {
          line: 80,
          column: 73
        }
      },
      "37": {
        start: {
          line: 85,
          column: 8
        },
        end: {
          line: 94,
          column: 9
        }
      },
      "38": {
        start: {
          line: 86,
          column: 36
        },
        end: {
          line: 86,
          column: 473
        }
      },
      "39": {
        start: {
          line: 87,
          column: 12
        },
        end: {
          line: 90,
          column: 20
        }
      },
      "40": {
        start: {
          line: 87,
          column: 48
        },
        end: {
          line: 90,
          column: 17
        }
      },
      "41": {
        start: {
          line: 92,
          column: 12
        },
        end: {
          line: 92,
          column: 83
        }
      },
      "42": {
        start: {
          line: 93,
          column: 12
        },
        end: {
          line: 93,
          column: 77
        }
      },
      "43": {
        start: {
          line: 98,
          column: 8
        },
        end: {
          line: 107,
          column: 9
        }
      },
      "44": {
        start: {
          line: 99,
          column: 36
        },
        end: {
          line: 99,
          column: 331
        }
      },
      "45": {
        start: {
          line: 100,
          column: 12
        },
        end: {
          line: 103,
          column: 20
        }
      },
      "46": {
        start: {
          line: 100,
          column: 48
        },
        end: {
          line: 103,
          column: 17
        }
      },
      "47": {
        start: {
          line: 105,
          column: 12
        },
        end: {
          line: 105,
          column: 83
        }
      },
      "48": {
        start: {
          line: 106,
          column: 12
        },
        end: {
          line: 106,
          column: 77
        }
      },
      "49": {
        start: {
          line: 111,
          column: 8
        },
        end: {
          line: 122,
          column: 9
        }
      },
      "50": {
        start: {
          line: 112,
          column: 31
        },
        end: {
          line: 112,
          column: 57
        }
      },
      "51": {
        start: {
          line: 113,
          column: 36
        },
        end: {
          line: 113,
          column: 853
        }
      },
      "52": {
        start: {
          line: 114,
          column: 12
        },
        end: {
          line: 118,
          column: 20
        }
      },
      "53": {
        start: {
          line: 114,
          column: 48
        },
        end: {
          line: 118,
          column: 17
        }
      },
      "54": {
        start: {
          line: 120,
          column: 12
        },
        end: {
          line: 120,
          column: 67
        }
      },
      "55": {
        start: {
          line: 121,
          column: 12
        },
        end: {
          line: 121,
          column: 61
        }
      },
      "56": {
        start: {
          line: 126,
          column: 8
        },
        end: {
          line: 138,
          column: 9
        }
      },
      "57": {
        start: {
          line: 127,
          column: 34
        },
        end: {
          line: 130,
          column: 82
        }
      },
      "58": {
        start: {
          line: 131,
          column: 12
        },
        end: {
          line: 133,
          column: 13
        }
      },
      "59": {
        start: {
          line: 132,
          column: 16
        },
        end: {
          line: 132,
          column: 57
        }
      },
      "60": {
        start: {
          line: 134,
          column: 12
        },
        end: {
          line: 134,
          column: 31
        }
      },
      "61": {
        start: {
          line: 136,
          column: 12
        },
        end: {
          line: 136,
          column: 66
        }
      },
      "62": {
        start: {
          line: 137,
          column: 12
        },
        end: {
          line: 137,
          column: 60
        }
      },
      "63": {
        start: {
          line: 142,
          column: 8
        },
        end: {
          line: 164,
          column: 9
        }
      },
      "64": {
        start: {
          line: 143,
          column: 31
        },
        end: {
          line: 146,
          column: 13
        }
      },
      "65": {
        start: {
          line: 147,
          column: 12
        },
        end: {
          line: 155,
          column: 13
        }
      },
      "66": {
        start: {
          line: 149,
          column: 38
        },
        end: {
          line: 149,
          column: 145
        }
      },
      "67": {
        start: {
          line: 150,
          column: 16
        },
        end: {
          line: 154,
          column: 17
        }
      },
      "68": {
        start: {
          line: 151,
          column: 42
        },
        end: {
          line: 151,
          column: 65
        }
      },
      "69": {
        start: {
          line: 152,
          column: 39
        },
        end: {
          line: 152,
          column: 110
        }
      },
      "70": {
        start: {
          line: 153,
          column: 20
        },
        end: {
          line: 153,
          column: 102
        }
      },
      "71": {
        start: {
          line: 156,
          column: 34
        },
        end: {
          line: 156,
          column: 162
        }
      },
      "72": {
        start: {
          line: 157,
          column: 12
        },
        end: {
          line: 159,
          column: 13
        }
      },
      "73": {
        start: {
          line: 158,
          column: 16
        },
        end: {
          line: 158,
          column: 57
        }
      },
      "74": {
        start: {
          line: 160,
          column: 12
        },
        end: {
          line: 160,
          column: 31
        }
      },
      "75": {
        start: {
          line: 162,
          column: 12
        },
        end: {
          line: 162,
          column: 73
        }
      },
      "76": {
        start: {
          line: 163,
          column: 12
        },
        end: {
          line: 163,
          column: 67
        }
      },
      "77": {
        start: {
          line: 168,
          column: 8
        },
        end: {
          line: 200,
          column: 9
        }
      },
      "78": {
        start: {
          line: 169,
          column: 12
        },
        end: {
          line: 196,
          column: 15
        }
      },
      "79": {
        start: {
          line: 171,
          column: 38
        },
        end: {
          line: 171,
          column: 149
        }
      },
      "80": {
        start: {
          line: 172,
          column: 16
        },
        end: {
          line: 174,
          column: 17
        }
      },
      "81": {
        start: {
          line: 173,
          column: 20
        },
        end: {
          line: 173,
          column: 61
        }
      },
      "82": {
        start: {
          line: 176,
          column: 38
        },
        end: {
          line: 185,
          column: 30
        }
      },
      "83": {
        start: {
          line: 187,
          column: 45
        },
        end: {
          line: 191,
          column: 97
        }
      },
      "84": {
        start: {
          line: 192,
          column: 16
        },
        end: {
          line: 195,
          column: 18
        }
      },
      "85": {
        start: {
          line: 198,
          column: 12
        },
        end: {
          line: 198,
          column: 85
        }
      },
      "86": {
        start: {
          line: 199,
          column: 12
        },
        end: {
          line: 199,
          column: 61
        }
      },
      "87": {
        start: {
          line: 204,
          column: 8
        },
        end: {
          line: 210,
          column: 9
        }
      },
      "88": {
        start: {
          line: 205,
          column: 27
        },
        end: {
          line: 205,
          column: 139
        }
      },
      "89": {
        start: {
          line: 206,
          column: 12
        },
        end: {
          line: 206,
          column: 37
        }
      },
      "90": {
        start: {
          line: 208,
          column: 12
        },
        end: {
          line: 208,
          column: 66
        }
      },
      "91": {
        start: {
          line: 209,
          column: 12
        },
        end: {
          line: 209,
          column: 60
        }
      },
      "92": {
        start: {
          line: 214,
          column: 8
        },
        end: {
          line: 268,
          column: 9
        }
      },
      "93": {
        start: {
          line: 215,
          column: 28
        },
        end: {
          line: 230,
          column: 105
        }
      },
      "94": {
        start: {
          line: 231,
          column: 26
        },
        end: {
          line: 231,
          column: 57
        }
      },
      "95": {
        start: {
          line: 232,
          column: 32
        },
        end: {
          line: 232,
          column: 57
        }
      },
      "96": {
        start: {
          line: 233,
          column: 29
        },
        end: {
          line: 233,
          column: 51
        }
      },
      "97": {
        start: {
          line: 234,
          column: 29
        },
        end: {
          line: 234,
          column: 51
        }
      },
      "98": {
        start: {
          line: 235,
          column: 40
        },
        end: {
          line: 235,
          column: 73
        }
      },
      "99": {
        start: {
          line: 236,
          column: 40
        },
        end: {
          line: 236,
          column: 73
        }
      },
      "100": {
        start: {
          line: 237,
          column: 32
        },
        end: {
          line: 237,
          column: 73
        }
      },
      "101": {
        start: {
          line: 238,
          column: 40
        },
        end: {
          line: 238,
          column: 95
        }
      },
      "102": {
        start: {
          line: 239,
          column: 40
        },
        end: {
          line: 239,
          column: 95
        }
      },
      "103": {
        start: {
          line: 240,
          column: 12
        },
        end: {
          line: 264,
          column: 14
        }
      },
      "104": {
        start: {
          line: 266,
          column: 12
        },
        end: {
          line: 266,
          column: 69
        }
      },
      "105": {
        start: {
          line: 267,
          column: 12
        },
        end: {
          line: 267,
          column: 63
        }
      },
      "106": {
        start: {
          line: 272,
          column: 8
        },
        end: {
          line: 282,
          column: 9
        }
      },
      "107": {
        start: {
          line: 273,
          column: 36
        },
        end: {
          line: 273,
          column: 523
        }
      },
      "108": {
        start: {
          line: 274,
          column: 12
        },
        end: {
          line: 278,
          column: 20
        }
      },
      "109": {
        start: {
          line: 274,
          column: 48
        },
        end: {
          line: 278,
          column: 17
        }
      },
      "110": {
        start: {
          line: 280,
          column: 12
        },
        end: {
          line: 280,
          column: 71
        }
      },
      "111": {
        start: {
          line: 281,
          column: 12
        },
        end: {
          line: 281,
          column: 65
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 17,
            column: 4
          },
          end: {
            line: 17,
            column: 5
          }
        },
        loc: {
          start: {
            line: 17,
            column: 41
          },
          end: {
            line: 25,
            column: 5
          }
        },
        line: 17
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 27,
            column: 4
          },
          end: {
            line: 27,
            column: 5
          }
        },
        loc: {
          start: {
            line: 27,
            column: 29
          },
          end: {
            line: 40,
            column: 5
          }
        },
        line: 27
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 42,
            column: 4
          },
          end: {
            line: 42,
            column: 5
          }
        },
        loc: {
          start: {
            line: 42,
            column: 37
          },
          end: {
            line: 54,
            column: 5
          }
        },
        line: 42
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 45,
            column: 39
          },
          end: {
            line: 45,
            column: 40
          }
        },
        loc: {
          start: {
            line: 45,
            column: 48
          },
          end: {
            line: 49,
            column: 17
          }
        },
        line: 45
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 56,
            column: 4
          },
          end: {
            line: 56,
            column: 5
          }
        },
        loc: {
          start: {
            line: 56,
            column: 45
          },
          end: {
            line: 68,
            column: 5
          }
        },
        line: 56
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 59,
            column: 39
          },
          end: {
            line: 59,
            column: 40
          }
        },
        loc: {
          start: {
            line: 59,
            column: 48
          },
          end: {
            line: 63,
            column: 17
          }
        },
        line: 59
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 70,
            column: 4
          },
          end: {
            line: 70,
            column: 5
          }
        },
        loc: {
          start: {
            line: 70,
            column: 53
          },
          end: {
            line: 82,
            column: 5
          }
        },
        line: 70
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 73,
            column: 39
          },
          end: {
            line: 73,
            column: 40
          }
        },
        loc: {
          start: {
            line: 73,
            column: 48
          },
          end: {
            line: 77,
            column: 17
          }
        },
        line: 73
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 84,
            column: 4
          },
          end: {
            line: 84,
            column: 5
          }
        },
        loc: {
          start: {
            line: 84,
            column: 61
          },
          end: {
            line: 95,
            column: 5
          }
        },
        line: 84
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 87,
            column: 39
          },
          end: {
            line: 87,
            column: 40
          }
        },
        loc: {
          start: {
            line: 87,
            column: 48
          },
          end: {
            line: 90,
            column: 17
          }
        },
        line: 87
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 97,
            column: 4
          },
          end: {
            line: 97,
            column: 5
          }
        },
        loc: {
          start: {
            line: 97,
            column: 55
          },
          end: {
            line: 108,
            column: 5
          }
        },
        line: 97
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 100,
            column: 39
          },
          end: {
            line: 100,
            column: 40
          }
        },
        loc: {
          start: {
            line: 100,
            column: 48
          },
          end: {
            line: 103,
            column: 17
          }
        },
        line: 100
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 110,
            column: 4
          },
          end: {
            line: 110,
            column: 5
          }
        },
        loc: {
          start: {
            line: 110,
            column: 39
          },
          end: {
            line: 123,
            column: 5
          }
        },
        line: 110
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 114,
            column: 39
          },
          end: {
            line: 114,
            column: 40
          }
        },
        loc: {
          start: {
            line: 114,
            column: 48
          },
          end: {
            line: 118,
            column: 17
          }
        },
        line: 114
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 125,
            column: 4
          },
          end: {
            line: 125,
            column: 5
          }
        },
        loc: {
          start: {
            line: 125,
            column: 45
          },
          end: {
            line: 139,
            column: 5
          }
        },
        line: 125
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 141,
            column: 4
          },
          end: {
            line: 141,
            column: 5
          }
        },
        loc: {
          start: {
            line: 141,
            column: 49
          },
          end: {
            line: 165,
            column: 5
          }
        },
        line: 141
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 167,
            column: 4
          },
          end: {
            line: 167,
            column: 5
          }
        },
        loc: {
          start: {
            line: 167,
            column: 69
          },
          end: {
            line: 201,
            column: 5
          }
        },
        line: 167
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 169,
            column: 47
          },
          end: {
            line: 169,
            column: 48
          }
        },
        loc: {
          start: {
            line: 169,
            column: 59
          },
          end: {
            line: 196,
            column: 13
          }
        },
        line: 169
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 203,
            column: 4
          },
          end: {
            line: 203,
            column: 5
          }
        },
        loc: {
          start: {
            line: 203,
            column: 28
          },
          end: {
            line: 211,
            column: 5
          }
        },
        line: 203
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 213,
            column: 4
          },
          end: {
            line: 213,
            column: 5
          }
        },
        loc: {
          start: {
            line: 213,
            column: 34
          },
          end: {
            line: 269,
            column: 5
          }
        },
        line: 213
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 271,
            column: 4
          },
          end: {
            line: 271,
            column: 5
          }
        },
        loc: {
          start: {
            line: 271,
            column: 35
          },
          end: {
            line: 283,
            column: 5
          }
        },
        line: 271
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 274,
            column: 39
          },
          end: {
            line: 274,
            column: 40
          }
        },
        loc: {
          start: {
            line: 274,
            column: 48
          },
          end: {
            line: 278,
            column: 17
          }
        },
        line: 274
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 30,
            column: 12
          },
          end: {
            line: 30,
            column: 42
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 12
          },
          end: {
            line: 30,
            column: 42
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 30
      },
      "1": {
        loc: {
          start: {
            line: 34,
            column: 32
          },
          end: {
            line: 34,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 34,
            column: 32
          },
          end: {
            line: 34,
            column: 59
          }
        }, {
          start: {
            line: 34,
            column: 63
          },
          end: {
            line: 34,
            column: 72
          }
        }],
        line: 34
      },
      "2": {
        loc: {
          start: {
            line: 48,
            column: 36
          },
          end: {
            line: 48,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 48,
            column: 36
          },
          end: {
            line: 48,
            column: 56
          }
        }, {
          start: {
            line: 48,
            column: 60
          },
          end: {
            line: 48,
            column: 69
          }
        }],
        line: 48
      },
      "3": {
        loc: {
          start: {
            line: 62,
            column: 36
          },
          end: {
            line: 62,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 62,
            column: 36
          },
          end: {
            line: 62,
            column: 56
          }
        }, {
          start: {
            line: 62,
            column: 60
          },
          end: {
            line: 62,
            column: 69
          }
        }],
        line: 62
      },
      "4": {
        loc: {
          start: {
            line: 76,
            column: 36
          },
          end: {
            line: 76,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 76,
            column: 36
          },
          end: {
            line: 76,
            column: 56
          }
        }, {
          start: {
            line: 76,
            column: 60
          },
          end: {
            line: 76,
            column: 69
          }
        }],
        line: 76
      },
      "5": {
        loc: {
          start: {
            line: 117,
            column: 36
          },
          end: {
            line: 117,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 117,
            column: 36
          },
          end: {
            line: 117,
            column: 56
          }
        }, {
          start: {
            line: 117,
            column: 60
          },
          end: {
            line: 117,
            column: 69
          }
        }],
        line: 117
      },
      "6": {
        loc: {
          start: {
            line: 131,
            column: 12
          },
          end: {
            line: 133,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 131,
            column: 12
          },
          end: {
            line: 133,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 131
      },
      "7": {
        loc: {
          start: {
            line: 147,
            column: 12
          },
          end: {
            line: 155,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 147,
            column: 12
          },
          end: {
            line: 155,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 147
      },
      "8": {
        loc: {
          start: {
            line: 150,
            column: 16
          },
          end: {
            line: 154,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 150,
            column: 16
          },
          end: {
            line: 154,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 150
      },
      "9": {
        loc: {
          start: {
            line: 151,
            column: 42
          },
          end: {
            line: 151,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 151,
            column: 42
          },
          end: {
            line: 151,
            column: 59
          }
        }, {
          start: {
            line: 151,
            column: 63
          },
          end: {
            line: 151,
            column: 65
          }
        }],
        line: 151
      },
      "10": {
        loc: {
          start: {
            line: 153,
            column: 39
          },
          end: {
            line: 153,
            column: 101
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 153,
            column: 55
          },
          end: {
            line: 153,
            column: 88
          }
        }, {
          start: {
            line: 153,
            column: 91
          },
          end: {
            line: 153,
            column: 101
          }
        }],
        line: 153
      },
      "11": {
        loc: {
          start: {
            line: 157,
            column: 12
          },
          end: {
            line: 159,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 157,
            column: 12
          },
          end: {
            line: 159,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 157
      },
      "12": {
        loc: {
          start: {
            line: 172,
            column: 16
          },
          end: {
            line: 174,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 172,
            column: 16
          },
          end: {
            line: 174,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 172
      },
      "13": {
        loc: {
          start: {
            line: 179,
            column: 30
          },
          end: {
            line: 179,
            column: 75
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 179,
            column: 30
          },
          end: {
            line: 179,
            column: 51
          }
        }, {
          start: {
            line: 179,
            column: 55
          },
          end: {
            line: 179,
            column: 75
          }
        }],
        line: 179
      },
      "14": {
        loc: {
          start: {
            line: 180,
            column: 30
          },
          end: {
            line: 180,
            column: 75
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 180,
            column: 30
          },
          end: {
            line: 180,
            column: 51
          }
        }, {
          start: {
            line: 180,
            column: 55
          },
          end: {
            line: 180,
            column: 75
          }
        }],
        line: 180
      },
      "15": {
        loc: {
          start: {
            line: 182,
            column: 118
          },
          end: {
            line: 182,
            column: 145
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 182,
            column: 118
          },
          end: {
            line: 182,
            column: 135
          }
        }, {
          start: {
            line: 182,
            column: 139
          },
          end: {
            line: 182,
            column: 145
          }
        }],
        line: 182
      },
      "16": {
        loc: {
          start: {
            line: 189,
            column: 30
          },
          end: {
            line: 189,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 189,
            column: 30
          },
          end: {
            line: 189,
            column: 47
          }
        }, {
          start: {
            line: 189,
            column: 51
          },
          end: {
            line: 189,
            column: 53
          }
        }],
        line: 189
      },
      "17": {
        loc: {
          start: {
            line: 237,
            column: 32
          },
          end: {
            line: 237,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 237,
            column: 44
          },
          end: {
            line: 237,
            column: 69
          }
        }, {
          start: {
            line: 237,
            column: 72
          },
          end: {
            line: 237,
            column: 73
          }
        }],
        line: 237
      },
      "18": {
        loc: {
          start: {
            line: 238,
            column: 40
          },
          end: {
            line: 238,
            column: 95
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 238,
            column: 55
          },
          end: {
            line: 238,
            column: 91
          }
        }, {
          start: {
            line: 238,
            column: 94
          },
          end: {
            line: 238,
            column: 95
          }
        }],
        line: 238
      },
      "19": {
        loc: {
          start: {
            line: 239,
            column: 40
          },
          end: {
            line: 239,
            column: 95
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 239,
            column: 55
          },
          end: {
            line: 239,
            column: 91
          }
        }, {
          start: {
            line: 239,
            column: 94
          },
          end: {
            line: 239,
            column: 95
          }
        }],
        line: 239
      },
      "20": {
        loc: {
          start: {
            line: 263,
            column: 54
          },
          end: {
            line: 263,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 263,
            column: 54
          },
          end: {
            line: 263,
            column: 75
          }
        }, {
          start: {
            line: 263,
            column: 79
          },
          end: {
            line: 263,
            column: 80
          }
        }],
        line: 263
      },
      "21": {
        loc: {
          start: {
            line: 277,
            column: 36
          },
          end: {
            line: 277,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 277,
            column: 36
          },
          end: {
            line: 277,
            column: 56
          }
        }, {
          start: {
            line: 277,
            column: 60
          },
          end: {
            line: 277,
            column: 69
          }
        }],
        line: 277
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/stefanbekker/projects/fancy-planties/src/lib/db/queries/propagations.ts"],
      sourcesContent: ["import 'server-only';\n\nimport { eq, and, desc, asc, ilike, or, sql } from 'drizzle-orm';\nimport { db } from '../index';\nimport { propagations, plants, plantInstances, type Propagation, type NewPropagation } from '../schema';\n\n// Propagation CRUD operations\nexport class PropagationQueries {\n  // Create a new propagation\n  static async create(propagationData: NewPropagation): Promise<Propagation> {\n    try {\n      const [propagation] = await db.insert(propagations).values(propagationData).returning();\n      return propagation;\n    } catch (error) {\n      console.error('Failed to create propagation:', error);\n      throw new Error('Failed to create propagation');\n    }\n  }\n\n  // Get propagation by ID with related data\n  static async getById(id: number): Promise<(Propagation & { \n    plant: typeof plants.$inferSelect;\n    parentInstance?: typeof plantInstances.$inferSelect;\n  }) | null> {\n    try {\n      const [propagation] = await db\n        .select()\n        .from(propagations)\n        .leftJoin(plants, eq(propagations.plantId, plants.id))\n        .leftJoin(plantInstances, eq(propagations.parentInstanceId, plantInstances.id))\n        .where(eq(propagations.id, id));\n      \n      if (!propagation) return null;\n      \n      return {\n        ...propagation.propagations,\n        plant: propagation.plants!,\n        parentInstance: propagation.plant_instances || undefined\n      };\n    } catch (error) {\n      console.error('Failed to get propagation by ID:', error);\n      throw new Error('Failed to get propagation');\n    }\n  }\n\n  // Get all propagations for a user\n  static async getByUserId(userId: number): Promise<(Propagation & { \n    plant: typeof plants.$inferSelect;\n    parentInstance?: typeof plantInstances.$inferSelect;\n  })[]> {\n    try {\n      const propagationList = await db\n        .select()\n        .from(propagations)\n        .leftJoin(plants, eq(propagations.plantId, plants.id))\n        .leftJoin(plantInstances, eq(propagations.parentInstanceId, plantInstances.id))\n        .where(eq(propagations.userId, userId))\n        .orderBy(desc(propagations.dateStarted));\n\n      return propagationList.map(prop => ({\n        ...prop.propagations,\n        plant: prop.plants!,\n        parentInstance: prop.plant_instances || undefined\n      }));\n    } catch (error) {\n      console.error('Failed to get propagations by user ID:', error);\n      throw new Error('Failed to get propagations');\n    }\n  }\n\n  // Get propagations by status\n  static async getByStatus(userId: number, status: 'started' | 'rooting' | 'planted' | 'established'): Promise<(Propagation & { \n    plant: typeof plants.$inferSelect;\n    parentInstance?: typeof plantInstances.$inferSelect;\n  })[]> {\n    try {\n      const propagationList = await db\n        .select()\n        .from(propagations)\n        .leftJoin(plants, eq(propagations.plantId, plants.id))\n        .leftJoin(plantInstances, eq(propagations.parentInstanceId, plantInstances.id))\n        .where(\n          and(\n            eq(propagations.userId, userId),\n            eq(propagations.status, status)\n          )\n        )\n        .orderBy(desc(propagations.dateStarted));\n\n      return propagationList.map(prop => ({\n        ...prop.propagations,\n        plant: prop.plants!,\n        parentInstance: prop.plant_instances || undefined\n      }));\n    } catch (error) {\n      console.error('Failed to get propagations by status:', error);\n      throw new Error('Failed to get propagations by status');\n    }\n  }\n\n  // Get propagations by source type\n  static async getBySourceType(userId: number, sourceType: 'internal' | 'external'): Promise<(Propagation & { \n    plant: typeof plants.$inferSelect;\n    parentInstance?: typeof plantInstances.$inferSelect;\n  })[]> {\n    try {\n      const propagationList = await db\n        .select()\n        .from(propagations)\n        .leftJoin(plants, eq(propagations.plantId, plants.id))\n        .leftJoin(plantInstances, eq(propagations.parentInstanceId, plantInstances.id))\n        .where(\n          and(\n            eq(propagations.userId, userId),\n            eq(propagations.sourceType, sourceType)\n          )\n        )\n        .orderBy(desc(propagations.dateStarted));\n\n      return propagationList.map(prop => ({\n        ...prop.propagations,\n        plant: prop.plants!,\n        parentInstance: prop.plant_instances || undefined\n      }));\n    } catch (error) {\n      console.error('Failed to get propagations by source type:', error);\n      throw new Error('Failed to get propagations by source type');\n    }\n  }\n\n  // Get external propagations by source\n  static async getByExternalSource(userId: number, externalSource: 'gift' | 'trade' | 'purchase' | 'other'): Promise<(Propagation & { \n    plant: typeof plants.$inferSelect;\n  })[]> {\n    try {\n      const propagationList = await db\n        .select()\n        .from(propagations)\n        .leftJoin(plants, eq(propagations.plantId, plants.id))\n        .where(\n          and(\n            eq(propagations.userId, userId),\n            eq(propagations.sourceType, 'external'),\n            eq(propagations.externalSource, externalSource)\n          )\n        )\n        .orderBy(desc(propagations.dateStarted));\n\n      return propagationList.map(prop => ({\n        ...prop.propagations,\n        plant: prop.plants!\n      }));\n    } catch (error) {\n      console.error('Failed to get propagations by external source:', error);\n      throw new Error('Failed to get propagations by external source');\n    }\n  }\n\n  // Get propagations from a specific parent plant instance\n  static async getByParentInstance(parentInstanceId: number): Promise<(Propagation & { \n    plant: typeof plants.$inferSelect;\n  })[]> {\n    try {\n      const propagationList = await db\n        .select()\n        .from(propagations)\n        .leftJoin(plants, eq(propagations.plantId, plants.id))\n        .where(eq(propagations.parentInstanceId, parentInstanceId))\n        .orderBy(desc(propagations.dateStarted));\n\n      return propagationList.map(prop => ({\n        ...prop.propagations,\n        plant: prop.plants!\n      }));\n    } catch (error) {\n      console.error('Failed to get propagations by parent instance:', error);\n      throw new Error('Failed to get propagations by parent instance');\n    }\n  }\n\n  // Search propagations by nickname, location, or notes\n  static async search(userId: number, query: string): Promise<(Propagation & { \n    plant: typeof plants.$inferSelect;\n    parentInstance?: typeof plantInstances.$inferSelect;\n  })[]> {\n    try {\n      const searchTerm = `%${query.toLowerCase()}%`;\n      \n      const propagationList = await db\n        .select()\n        .from(propagations)\n        .leftJoin(plants, eq(propagations.plantId, plants.id))\n        .leftJoin(plantInstances, eq(propagations.parentInstanceId, plantInstances.id))\n        .where(\n          and(\n            eq(propagations.userId, userId),\n            or(\n              ilike(propagations.nickname, searchTerm),\n              ilike(propagations.location, searchTerm),\n              ilike(propagations.notes, searchTerm),\n              ilike(plants.commonName, searchTerm),\n              ilike(plants.genus, searchTerm),\n              ilike(plants.species, searchTerm)\n            )\n          )\n        )\n        .orderBy(desc(propagations.dateStarted));\n\n      return propagationList.map(prop => ({\n        ...prop.propagations,\n        plant: prop.plants!,\n        parentInstance: prop.plant_instances || undefined\n      }));\n    } catch (error) {\n      console.error('Failed to search propagations:', error);\n      throw new Error('Failed to search propagations');\n    }\n  }\n\n  // Update propagation\n  static async update(id: number, propagationData: Partial<NewPropagation>): Promise<Propagation> {\n    try {\n      const [propagation] = await db\n        .update(propagations)\n        .set({ ...propagationData, updatedAt: new Date() })\n        .where(eq(propagations.id, id))\n        .returning();\n      \n      if (!propagation) {\n        throw new Error('Propagation not found');\n      }\n      \n      return propagation;\n    } catch (error) {\n      console.error('Failed to update propagation:', error);\n      throw new Error('Failed to update propagation');\n    }\n  }\n\n  // Update propagation status\n  static async updateStatus(id: number, status: 'started' | 'rooting' | 'planted' | 'established', notes?: string): Promise<Propagation> {\n    try {\n      const updateData: Partial<NewPropagation> = {\n        status,\n        updatedAt: new Date()\n      };\n\n      if (notes) {\n        // Get current propagation to append notes\n        const [currentProp] = await db\n          .select()\n          .from(propagations)\n          .where(eq(propagations.id, id));\n        \n        if (currentProp) {\n          const existingNotes = currentProp.notes || '';\n          const statusNote = `Status changed to ${status} on ${new Date().toDateString()}: ${notes}`;\n          updateData.notes = existingNotes ? `${existingNotes}\\n${statusNote}` : statusNote;\n        }\n      }\n\n      const [propagation] = await db\n        .update(propagations)\n        .set(updateData)\n        .where(eq(propagations.id, id))\n        .returning();\n      \n      if (!propagation) {\n        throw new Error('Propagation not found');\n      }\n      \n      return propagation;\n    } catch (error) {\n      console.error('Failed to update propagation status:', error);\n      throw new Error('Failed to update propagation status');\n    }\n  }\n\n  // Convert propagation to plant instance\n  static async convertToPlantInstance(\n    propagationId: number, \n    instanceData: Omit<NewPropagation, 'userId' | 'plantId'>\n  ): Promise<{ propagation: Propagation; plantInstanceId: number }> {\n    try {\n      return await db.transaction(async (tx) => {\n        // Get the propagation\n        const [propagation] = await tx\n          .select()\n          .from(propagations)\n          .where(eq(propagations.id, propagationId));\n        \n        if (!propagation) {\n          throw new Error('Propagation not found');\n        }\n\n        // Create new plant instance\n        const [newInstance] = await tx\n          .insert(plantInstances)\n          .values({\n            userId: propagation.userId,\n            plantId: propagation.plantId,\n            nickname: instanceData.nickname || propagation.nickname,\n            location: instanceData.location || propagation.location,\n            fertilizerSchedule: '2 weeks', // Default schedule\n            notes: `Converted from propagation on ${new Date().toDateString()}. Original propagation notes: ${propagation.notes || 'None'}`,\n            images: propagation.images,\n            isActive: true\n          })\n          .returning();\n\n        // Update propagation status to established\n        const [updatedPropagation] = await tx\n          .update(propagations)\n          .set({\n            status: 'established',\n            notes: `${propagation.notes || ''}\\nConverted to plant instance #${newInstance.id} on ${new Date().toDateString()}`,\n            updatedAt: new Date()\n          })\n          .where(eq(propagations.id, propagationId))\n          .returning();\n\n        return {\n          propagation: updatedPropagation,\n          plantInstanceId: newInstance.id\n        };\n      });\n    } catch (error) {\n      console.error('Failed to convert propagation to plant instance:', error);\n      throw new Error('Failed to convert propagation');\n    }\n  }\n\n  // Delete propagation\n  static async delete(id: number): Promise<boolean> {\n    try {\n      const result = await db.delete(propagations).where(eq(propagations.id, id)).returning();\n      return result.length > 0;\n    } catch (error) {\n      console.error('Failed to delete propagation:', error);\n      throw new Error('Failed to delete propagation');\n    }\n  }\n\n  // Get propagation statistics for a user\n  static async getStats(userId: number): Promise<{\n    totalPropagations: number;\n    byStatus: Record<string, number>;\n    bySourceType: Record<string, number>;\n    byExternalSource: Record<string, number>;\n    successRate: number;\n    successRateBySource: Record<string, number>;\n    averageDaysToEstablished: number;\n  }> {\n    try {\n      const [stats] = await db\n        .select({\n          totalPropagations: sql<number>`count(*)`,\n          started: sql<number>`count(*) filter (where status = 'started')`,\n          rooting: sql<number>`count(*) filter (where status = 'rooting')`,\n          planted: sql<number>`count(*) filter (where status = 'planted')`,\n          established: sql<number>`count(*) filter (where status = 'established')`,\n          internal: sql<number>`count(*) filter (where source_type = 'internal')`,\n          external: sql<number>`count(*) filter (where source_type = 'external')`,\n          gift: sql<number>`count(*) filter (where external_source = 'gift')`,\n          trade: sql<number>`count(*) filter (where external_source = 'trade')`,\n          purchase: sql<number>`count(*) filter (where external_source = 'purchase')`,\n          other: sql<number>`count(*) filter (where external_source = 'other')`,\n          internalEstablished: sql<number>`count(*) filter (where source_type = 'internal' and status = 'established')`,\n          externalEstablished: sql<number>`count(*) filter (where source_type = 'external' and status = 'established')`,\n          avgDays: sql<number>`avg(extract(day from (updated_at - date_started))) filter (where status = 'established')`\n        })\n        .from(propagations)\n        .where(eq(propagations.userId, userId));\n\n      const total = Number(stats.totalPropagations);\n      const established = Number(stats.established);\n      const internal = Number(stats.internal);\n      const external = Number(stats.external);\n      const internalEstablished = Number(stats.internalEstablished);\n      const externalEstablished = Number(stats.externalEstablished);\n      \n      const successRate = total > 0 ? (established / total) * 100 : 0;\n      const internalSuccessRate = internal > 0 ? (internalEstablished / internal) * 100 : 0;\n      const externalSuccessRate = external > 0 ? (externalEstablished / external) * 100 : 0;\n\n      return {\n        totalPropagations: total,\n        byStatus: {\n          started: Number(stats.started),\n          rooting: Number(stats.rooting),\n          planted: Number(stats.planted),\n          established: established\n        },\n        bySourceType: {\n          internal: internal,\n          external: external\n        },\n        byExternalSource: {\n          gift: Number(stats.gift),\n          trade: Number(stats.trade),\n          purchase: Number(stats.purchase),\n          other: Number(stats.other)\n        },\n        successRate: Math.round(successRate * 100) / 100,\n        successRateBySource: {\n          internal: Math.round(internalSuccessRate * 100) / 100,\n          external: Math.round(externalSuccessRate * 100) / 100\n        },\n        averageDaysToEstablished: Math.round((Number(stats.avgDays) || 0) * 100) / 100\n      };\n    } catch (error) {\n      console.error('Failed to get propagation stats:', error);\n      throw new Error('Failed to get propagation stats');\n    }\n  }\n\n  // Get active propagations (not established)\n  static async getActive(userId: number): Promise<(Propagation & { \n    plant: typeof plants.$inferSelect;\n    parentInstance?: typeof plantInstances.$inferSelect;\n  })[]> {\n    try {\n      const propagationList = await db\n        .select()\n        .from(propagations)\n        .leftJoin(plants, eq(propagations.plantId, plants.id))\n        .leftJoin(plantInstances, eq(propagations.parentInstanceId, plantInstances.id))\n        .where(\n          and(\n            eq(propagations.userId, userId),\n            sql`${propagations.status} != 'established'`\n          )\n        )\n        .orderBy(asc(propagations.dateStarted));\n\n      return propagationList.map(prop => ({\n        ...prop.propagations,\n        plant: prop.plants!,\n        parentInstance: prop.plant_instances || undefined\n      }));\n    } catch (error) {\n      console.error('Failed to get active propagations:', error);\n      throw new Error('Failed to get active propagations');\n    }\n  }\n}"],
      names: ["PropagationQueries", "create", "propagationData", "propagation", "db", "insert", "propagations", "values", "returning", "error", "console", "Error", "getById", "id", "select", "from", "leftJoin", "plants", "eq", "plantId", "plantInstances", "parentInstanceId", "where", "plant", "parentInstance", "plant_instances", "undefined", "getByUserId", "userId", "propagationList", "orderBy", "desc", "dateStarted", "map", "prop", "getByStatus", "status", "and", "getBySourceType", "sourceType", "getByExternalSource", "externalSource", "getByParentInstance", "search", "query", "searchTerm", "toLowerCase", "or", "ilike", "nickname", "location", "notes", "commonName", "genus", "species", "update", "set", "updatedAt", "Date", "updateStatus", "updateData", "currentProp", "existingNotes", "statusNote", "toDateString", "convertToPlantInstance", "propagationId", "instanceData", "transaction", "tx", "newInstance", "fertilizerSchedule", "images", "isActive", "updatedPropagation", "plantInstanceId", "delete", "result", "length", "getStats", "stats", "totalPropagations", "sql", "started", "rooting", "planted", "established", "internal", "external", "gift", "trade", "purchase", "other", "internalEstablished", "externalEstablished", "avgDays", "total", "Number", "successRate", "internalSuccessRate", "externalSuccessRate", "byStatus", "bySourceType", "byExternalSource", "Math", "round", "successRateBySource", "averageDaysToEstablished", "getActive", "asc"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "540edfd2a3250675d4fb7c4b90be1a52cf033cf8"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2kxhofaget = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2kxhofaget();
cov_2kxhofaget().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_2kxhofaget().s[1]++;
Object.defineProperty(exports, "PropagationQueries", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_2kxhofaget().f[0]++;
    cov_2kxhofaget().s[2]++;
    return PropagationQueries;
  }
});
/* istanbul ignore next */
cov_2kxhofaget().s[3]++;
require("server-only");
const _drizzleorm =
/* istanbul ignore next */
(cov_2kxhofaget().s[4]++, require("drizzle-orm"));
const _index =
/* istanbul ignore next */
(cov_2kxhofaget().s[5]++, require("../index"));
const _schema =
/* istanbul ignore next */
(cov_2kxhofaget().s[6]++, require("../schema"));
class PropagationQueries {
  // Create a new propagation
  static async create(propagationData) {
    /* istanbul ignore next */
    cov_2kxhofaget().f[1]++;
    cov_2kxhofaget().s[7]++;
    try {
      const [propagation] =
      /* istanbul ignore next */
      (cov_2kxhofaget().s[8]++, await _index.db.insert(_schema.propagations).values(propagationData).returning());
      /* istanbul ignore next */
      cov_2kxhofaget().s[9]++;
      return propagation;
    } catch (error) {
      /* istanbul ignore next */
      cov_2kxhofaget().s[10]++;
      console.error('Failed to create propagation:', error);
      /* istanbul ignore next */
      cov_2kxhofaget().s[11]++;
      throw new Error('Failed to create propagation');
    }
  }
  // Get propagation by ID with related data
  static async getById(id) {
    /* istanbul ignore next */
    cov_2kxhofaget().f[2]++;
    cov_2kxhofaget().s[12]++;
    try {
      const [propagation] =
      /* istanbul ignore next */
      (cov_2kxhofaget().s[13]++, await _index.db.select().from(_schema.propagations).leftJoin(_schema.plants, (0, _drizzleorm.eq)(_schema.propagations.plantId, _schema.plants.id)).leftJoin(_schema.plantInstances, (0, _drizzleorm.eq)(_schema.propagations.parentInstanceId, _schema.plantInstances.id)).where((0, _drizzleorm.eq)(_schema.propagations.id, id)));
      /* istanbul ignore next */
      cov_2kxhofaget().s[14]++;
      if (!propagation) {
        /* istanbul ignore next */
        cov_2kxhofaget().b[0][0]++;
        cov_2kxhofaget().s[15]++;
        return null;
      } else
      /* istanbul ignore next */
      {
        cov_2kxhofaget().b[0][1]++;
      }
      cov_2kxhofaget().s[16]++;
      return {
        ...propagation.propagations,
        plant: propagation.plants,
        parentInstance:
        /* istanbul ignore next */
        (cov_2kxhofaget().b[1][0]++, propagation.plant_instances) ||
        /* istanbul ignore next */
        (cov_2kxhofaget().b[1][1]++, undefined)
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_2kxhofaget().s[17]++;
      console.error('Failed to get propagation by ID:', error);
      /* istanbul ignore next */
      cov_2kxhofaget().s[18]++;
      throw new Error('Failed to get propagation');
    }
  }
  // Get all propagations for a user
  static async getByUserId(userId) {
    /* istanbul ignore next */
    cov_2kxhofaget().f[3]++;
    cov_2kxhofaget().s[19]++;
    try {
      const propagationList =
      /* istanbul ignore next */
      (cov_2kxhofaget().s[20]++, await _index.db.select().from(_schema.propagations).leftJoin(_schema.plants, (0, _drizzleorm.eq)(_schema.propagations.plantId, _schema.plants.id)).leftJoin(_schema.plantInstances, (0, _drizzleorm.eq)(_schema.propagations.parentInstanceId, _schema.plantInstances.id)).where((0, _drizzleorm.eq)(_schema.propagations.userId, userId)).orderBy((0, _drizzleorm.desc)(_schema.propagations.dateStarted)));
      /* istanbul ignore next */
      cov_2kxhofaget().s[21]++;
      return propagationList.map(prop => {
        /* istanbul ignore next */
        cov_2kxhofaget().f[4]++;
        cov_2kxhofaget().s[22]++;
        return {
          ...prop.propagations,
          plant: prop.plants,
          parentInstance:
          /* istanbul ignore next */
          (cov_2kxhofaget().b[2][0]++, prop.plant_instances) ||
          /* istanbul ignore next */
          (cov_2kxhofaget().b[2][1]++, undefined)
        };
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_2kxhofaget().s[23]++;
      console.error('Failed to get propagations by user ID:', error);
      /* istanbul ignore next */
      cov_2kxhofaget().s[24]++;
      throw new Error('Failed to get propagations');
    }
  }
  // Get propagations by status
  static async getByStatus(userId, status) {
    /* istanbul ignore next */
    cov_2kxhofaget().f[5]++;
    cov_2kxhofaget().s[25]++;
    try {
      const propagationList =
      /* istanbul ignore next */
      (cov_2kxhofaget().s[26]++, await _index.db.select().from(_schema.propagations).leftJoin(_schema.plants, (0, _drizzleorm.eq)(_schema.propagations.plantId, _schema.plants.id)).leftJoin(_schema.plantInstances, (0, _drizzleorm.eq)(_schema.propagations.parentInstanceId, _schema.plantInstances.id)).where((0, _drizzleorm.and)((0, _drizzleorm.eq)(_schema.propagations.userId, userId), (0, _drizzleorm.eq)(_schema.propagations.status, status))).orderBy((0, _drizzleorm.desc)(_schema.propagations.dateStarted)));
      /* istanbul ignore next */
      cov_2kxhofaget().s[27]++;
      return propagationList.map(prop => {
        /* istanbul ignore next */
        cov_2kxhofaget().f[6]++;
        cov_2kxhofaget().s[28]++;
        return {
          ...prop.propagations,
          plant: prop.plants,
          parentInstance:
          /* istanbul ignore next */
          (cov_2kxhofaget().b[3][0]++, prop.plant_instances) ||
          /* istanbul ignore next */
          (cov_2kxhofaget().b[3][1]++, undefined)
        };
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_2kxhofaget().s[29]++;
      console.error('Failed to get propagations by status:', error);
      /* istanbul ignore next */
      cov_2kxhofaget().s[30]++;
      throw new Error('Failed to get propagations by status');
    }
  }
  // Get propagations by source type
  static async getBySourceType(userId, sourceType) {
    /* istanbul ignore next */
    cov_2kxhofaget().f[7]++;
    cov_2kxhofaget().s[31]++;
    try {
      const propagationList =
      /* istanbul ignore next */
      (cov_2kxhofaget().s[32]++, await _index.db.select().from(_schema.propagations).leftJoin(_schema.plants, (0, _drizzleorm.eq)(_schema.propagations.plantId, _schema.plants.id)).leftJoin(_schema.plantInstances, (0, _drizzleorm.eq)(_schema.propagations.parentInstanceId, _schema.plantInstances.id)).where((0, _drizzleorm.and)((0, _drizzleorm.eq)(_schema.propagations.userId, userId), (0, _drizzleorm.eq)(_schema.propagations.sourceType, sourceType))).orderBy((0, _drizzleorm.desc)(_schema.propagations.dateStarted)));
      /* istanbul ignore next */
      cov_2kxhofaget().s[33]++;
      return propagationList.map(prop => {
        /* istanbul ignore next */
        cov_2kxhofaget().f[8]++;
        cov_2kxhofaget().s[34]++;
        return {
          ...prop.propagations,
          plant: prop.plants,
          parentInstance:
          /* istanbul ignore next */
          (cov_2kxhofaget().b[4][0]++, prop.plant_instances) ||
          /* istanbul ignore next */
          (cov_2kxhofaget().b[4][1]++, undefined)
        };
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_2kxhofaget().s[35]++;
      console.error('Failed to get propagations by source type:', error);
      /* istanbul ignore next */
      cov_2kxhofaget().s[36]++;
      throw new Error('Failed to get propagations by source type');
    }
  }
  // Get external propagations by source
  static async getByExternalSource(userId, externalSource) {
    /* istanbul ignore next */
    cov_2kxhofaget().f[9]++;
    cov_2kxhofaget().s[37]++;
    try {
      const propagationList =
      /* istanbul ignore next */
      (cov_2kxhofaget().s[38]++, await _index.db.select().from(_schema.propagations).leftJoin(_schema.plants, (0, _drizzleorm.eq)(_schema.propagations.plantId, _schema.plants.id)).where((0, _drizzleorm.and)((0, _drizzleorm.eq)(_schema.propagations.userId, userId), (0, _drizzleorm.eq)(_schema.propagations.sourceType, 'external'), (0, _drizzleorm.eq)(_schema.propagations.externalSource, externalSource))).orderBy((0, _drizzleorm.desc)(_schema.propagations.dateStarted)));
      /* istanbul ignore next */
      cov_2kxhofaget().s[39]++;
      return propagationList.map(prop => {
        /* istanbul ignore next */
        cov_2kxhofaget().f[10]++;
        cov_2kxhofaget().s[40]++;
        return {
          ...prop.propagations,
          plant: prop.plants
        };
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_2kxhofaget().s[41]++;
      console.error('Failed to get propagations by external source:', error);
      /* istanbul ignore next */
      cov_2kxhofaget().s[42]++;
      throw new Error('Failed to get propagations by external source');
    }
  }
  // Get propagations from a specific parent plant instance
  static async getByParentInstance(parentInstanceId) {
    /* istanbul ignore next */
    cov_2kxhofaget().f[11]++;
    cov_2kxhofaget().s[43]++;
    try {
      const propagationList =
      /* istanbul ignore next */
      (cov_2kxhofaget().s[44]++, await _index.db.select().from(_schema.propagations).leftJoin(_schema.plants, (0, _drizzleorm.eq)(_schema.propagations.plantId, _schema.plants.id)).where((0, _drizzleorm.eq)(_schema.propagations.parentInstanceId, parentInstanceId)).orderBy((0, _drizzleorm.desc)(_schema.propagations.dateStarted)));
      /* istanbul ignore next */
      cov_2kxhofaget().s[45]++;
      return propagationList.map(prop => {
        /* istanbul ignore next */
        cov_2kxhofaget().f[12]++;
        cov_2kxhofaget().s[46]++;
        return {
          ...prop.propagations,
          plant: prop.plants
        };
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_2kxhofaget().s[47]++;
      console.error('Failed to get propagations by parent instance:', error);
      /* istanbul ignore next */
      cov_2kxhofaget().s[48]++;
      throw new Error('Failed to get propagations by parent instance');
    }
  }
  // Search propagations by nickname, location, or notes
  static async search(userId, query) {
    /* istanbul ignore next */
    cov_2kxhofaget().f[13]++;
    cov_2kxhofaget().s[49]++;
    try {
      const searchTerm =
      /* istanbul ignore next */
      (cov_2kxhofaget().s[50]++, `%${query.toLowerCase()}%`);
      const propagationList =
      /* istanbul ignore next */
      (cov_2kxhofaget().s[51]++, await _index.db.select().from(_schema.propagations).leftJoin(_schema.plants, (0, _drizzleorm.eq)(_schema.propagations.plantId, _schema.plants.id)).leftJoin(_schema.plantInstances, (0, _drizzleorm.eq)(_schema.propagations.parentInstanceId, _schema.plantInstances.id)).where((0, _drizzleorm.and)((0, _drizzleorm.eq)(_schema.propagations.userId, userId), (0, _drizzleorm.or)((0, _drizzleorm.ilike)(_schema.propagations.nickname, searchTerm), (0, _drizzleorm.ilike)(_schema.propagations.location, searchTerm), (0, _drizzleorm.ilike)(_schema.propagations.notes, searchTerm), (0, _drizzleorm.ilike)(_schema.plants.commonName, searchTerm), (0, _drizzleorm.ilike)(_schema.plants.genus, searchTerm), (0, _drizzleorm.ilike)(_schema.plants.species, searchTerm)))).orderBy((0, _drizzleorm.desc)(_schema.propagations.dateStarted)));
      /* istanbul ignore next */
      cov_2kxhofaget().s[52]++;
      return propagationList.map(prop => {
        /* istanbul ignore next */
        cov_2kxhofaget().f[14]++;
        cov_2kxhofaget().s[53]++;
        return {
          ...prop.propagations,
          plant: prop.plants,
          parentInstance:
          /* istanbul ignore next */
          (cov_2kxhofaget().b[5][0]++, prop.plant_instances) ||
          /* istanbul ignore next */
          (cov_2kxhofaget().b[5][1]++, undefined)
        };
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_2kxhofaget().s[54]++;
      console.error('Failed to search propagations:', error);
      /* istanbul ignore next */
      cov_2kxhofaget().s[55]++;
      throw new Error('Failed to search propagations');
    }
  }
  // Update propagation
  static async update(id, propagationData) {
    /* istanbul ignore next */
    cov_2kxhofaget().f[15]++;
    cov_2kxhofaget().s[56]++;
    try {
      const [propagation] =
      /* istanbul ignore next */
      (cov_2kxhofaget().s[57]++, await _index.db.update(_schema.propagations).set({
        ...propagationData,
        updatedAt: new Date()
      }).where((0, _drizzleorm.eq)(_schema.propagations.id, id)).returning());
      /* istanbul ignore next */
      cov_2kxhofaget().s[58]++;
      if (!propagation) {
        /* istanbul ignore next */
        cov_2kxhofaget().b[6][0]++;
        cov_2kxhofaget().s[59]++;
        throw new Error('Propagation not found');
      } else
      /* istanbul ignore next */
      {
        cov_2kxhofaget().b[6][1]++;
      }
      cov_2kxhofaget().s[60]++;
      return propagation;
    } catch (error) {
      /* istanbul ignore next */
      cov_2kxhofaget().s[61]++;
      console.error('Failed to update propagation:', error);
      /* istanbul ignore next */
      cov_2kxhofaget().s[62]++;
      throw new Error('Failed to update propagation');
    }
  }
  // Update propagation status
  static async updateStatus(id, status, notes) {
    /* istanbul ignore next */
    cov_2kxhofaget().f[16]++;
    cov_2kxhofaget().s[63]++;
    try {
      const updateData =
      /* istanbul ignore next */
      (cov_2kxhofaget().s[64]++, {
        status,
        updatedAt: new Date()
      });
      /* istanbul ignore next */
      cov_2kxhofaget().s[65]++;
      if (notes) {
        /* istanbul ignore next */
        cov_2kxhofaget().b[7][0]++;
        // Get current propagation to append notes
        const [currentProp] =
        /* istanbul ignore next */
        (cov_2kxhofaget().s[66]++, await _index.db.select().from(_schema.propagations).where((0, _drizzleorm.eq)(_schema.propagations.id, id)));
        /* istanbul ignore next */
        cov_2kxhofaget().s[67]++;
        if (currentProp) {
          /* istanbul ignore next */
          cov_2kxhofaget().b[8][0]++;
          const existingNotes =
          /* istanbul ignore next */
          (cov_2kxhofaget().s[68]++,
          /* istanbul ignore next */
          (cov_2kxhofaget().b[9][0]++, currentProp.notes) ||
          /* istanbul ignore next */
          (cov_2kxhofaget().b[9][1]++, ''));
          const statusNote =
          /* istanbul ignore next */
          (cov_2kxhofaget().s[69]++, `Status changed to ${status} on ${new Date().toDateString()}: ${notes}`);
          /* istanbul ignore next */
          cov_2kxhofaget().s[70]++;
          updateData.notes = existingNotes ?
          /* istanbul ignore next */
          (cov_2kxhofaget().b[10][0]++, `${existingNotes}\n${statusNote}`) :
          /* istanbul ignore next */
          (cov_2kxhofaget().b[10][1]++, statusNote);
        } else
        /* istanbul ignore next */
        {
          cov_2kxhofaget().b[8][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_2kxhofaget().b[7][1]++;
      }
      const [propagation] =
      /* istanbul ignore next */
      (cov_2kxhofaget().s[71]++, await _index.db.update(_schema.propagations).set(updateData).where((0, _drizzleorm.eq)(_schema.propagations.id, id)).returning());
      /* istanbul ignore next */
      cov_2kxhofaget().s[72]++;
      if (!propagation) {
        /* istanbul ignore next */
        cov_2kxhofaget().b[11][0]++;
        cov_2kxhofaget().s[73]++;
        throw new Error('Propagation not found');
      } else
      /* istanbul ignore next */
      {
        cov_2kxhofaget().b[11][1]++;
      }
      cov_2kxhofaget().s[74]++;
      return propagation;
    } catch (error) {
      /* istanbul ignore next */
      cov_2kxhofaget().s[75]++;
      console.error('Failed to update propagation status:', error);
      /* istanbul ignore next */
      cov_2kxhofaget().s[76]++;
      throw new Error('Failed to update propagation status');
    }
  }
  // Convert propagation to plant instance
  static async convertToPlantInstance(propagationId, instanceData) {
    /* istanbul ignore next */
    cov_2kxhofaget().f[17]++;
    cov_2kxhofaget().s[77]++;
    try {
      /* istanbul ignore next */
      cov_2kxhofaget().s[78]++;
      return await _index.db.transaction(async tx => {
        /* istanbul ignore next */
        cov_2kxhofaget().f[18]++;
        // Get the propagation
        const [propagation] =
        /* istanbul ignore next */
        (cov_2kxhofaget().s[79]++, await tx.select().from(_schema.propagations).where((0, _drizzleorm.eq)(_schema.propagations.id, propagationId)));
        /* istanbul ignore next */
        cov_2kxhofaget().s[80]++;
        if (!propagation) {
          /* istanbul ignore next */
          cov_2kxhofaget().b[12][0]++;
          cov_2kxhofaget().s[81]++;
          throw new Error('Propagation not found');
        } else
        /* istanbul ignore next */
        {
          cov_2kxhofaget().b[12][1]++;
        }
        // Create new plant instance
        const [newInstance] =
        /* istanbul ignore next */
        (cov_2kxhofaget().s[82]++, await tx.insert(_schema.plantInstances).values({
          userId: propagation.userId,
          plantId: propagation.plantId,
          nickname:
          /* istanbul ignore next */
          (cov_2kxhofaget().b[13][0]++, instanceData.nickname) ||
          /* istanbul ignore next */
          (cov_2kxhofaget().b[13][1]++, propagation.nickname),
          location:
          /* istanbul ignore next */
          (cov_2kxhofaget().b[14][0]++, instanceData.location) ||
          /* istanbul ignore next */
          (cov_2kxhofaget().b[14][1]++, propagation.location),
          fertilizerSchedule: '2 weeks',
          notes: `Converted from propagation on ${new Date().toDateString()}. Original propagation notes: ${
          /* istanbul ignore next */
          (cov_2kxhofaget().b[15][0]++, propagation.notes) ||
          /* istanbul ignore next */
          (cov_2kxhofaget().b[15][1]++, 'None')}`,
          images: propagation.images,
          isActive: true
        }).returning());
        // Update propagation status to established
        const [updatedPropagation] =
        /* istanbul ignore next */
        (cov_2kxhofaget().s[83]++, await tx.update(_schema.propagations).set({
          status: 'established',
          notes: `${
          /* istanbul ignore next */
          (cov_2kxhofaget().b[16][0]++, propagation.notes) ||
          /* istanbul ignore next */
          (cov_2kxhofaget().b[16][1]++, '')}\nConverted to plant instance #${newInstance.id} on ${new Date().toDateString()}`,
          updatedAt: new Date()
        }).where((0, _drizzleorm.eq)(_schema.propagations.id, propagationId)).returning());
        /* istanbul ignore next */
        cov_2kxhofaget().s[84]++;
        return {
          propagation: updatedPropagation,
          plantInstanceId: newInstance.id
        };
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_2kxhofaget().s[85]++;
      console.error('Failed to convert propagation to plant instance:', error);
      /* istanbul ignore next */
      cov_2kxhofaget().s[86]++;
      throw new Error('Failed to convert propagation');
    }
  }
  // Delete propagation
  static async delete(id) {
    /* istanbul ignore next */
    cov_2kxhofaget().f[19]++;
    cov_2kxhofaget().s[87]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_2kxhofaget().s[88]++, await _index.db.delete(_schema.propagations).where((0, _drizzleorm.eq)(_schema.propagations.id, id)).returning());
      /* istanbul ignore next */
      cov_2kxhofaget().s[89]++;
      return result.length > 0;
    } catch (error) {
      /* istanbul ignore next */
      cov_2kxhofaget().s[90]++;
      console.error('Failed to delete propagation:', error);
      /* istanbul ignore next */
      cov_2kxhofaget().s[91]++;
      throw new Error('Failed to delete propagation');
    }
  }
  // Get propagation statistics for a user
  static async getStats(userId) {
    /* istanbul ignore next */
    cov_2kxhofaget().f[20]++;
    cov_2kxhofaget().s[92]++;
    try {
      const [stats] =
      /* istanbul ignore next */
      (cov_2kxhofaget().s[93]++, await _index.db.select({
        totalPropagations: (0, _drizzleorm.sql)`count(*)`,
        started: (0, _drizzleorm.sql)`count(*) filter (where status = 'started')`,
        rooting: (0, _drizzleorm.sql)`count(*) filter (where status = 'rooting')`,
        planted: (0, _drizzleorm.sql)`count(*) filter (where status = 'planted')`,
        established: (0, _drizzleorm.sql)`count(*) filter (where status = 'established')`,
        internal: (0, _drizzleorm.sql)`count(*) filter (where source_type = 'internal')`,
        external: (0, _drizzleorm.sql)`count(*) filter (where source_type = 'external')`,
        gift: (0, _drizzleorm.sql)`count(*) filter (where external_source = 'gift')`,
        trade: (0, _drizzleorm.sql)`count(*) filter (where external_source = 'trade')`,
        purchase: (0, _drizzleorm.sql)`count(*) filter (where external_source = 'purchase')`,
        other: (0, _drizzleorm.sql)`count(*) filter (where external_source = 'other')`,
        internalEstablished: (0, _drizzleorm.sql)`count(*) filter (where source_type = 'internal' and status = 'established')`,
        externalEstablished: (0, _drizzleorm.sql)`count(*) filter (where source_type = 'external' and status = 'established')`,
        avgDays: (0, _drizzleorm.sql)`avg(extract(day from (updated_at - date_started))) filter (where status = 'established')`
      }).from(_schema.propagations).where((0, _drizzleorm.eq)(_schema.propagations.userId, userId)));
      const total =
      /* istanbul ignore next */
      (cov_2kxhofaget().s[94]++, Number(stats.totalPropagations));
      const established =
      /* istanbul ignore next */
      (cov_2kxhofaget().s[95]++, Number(stats.established));
      const internal =
      /* istanbul ignore next */
      (cov_2kxhofaget().s[96]++, Number(stats.internal));
      const external =
      /* istanbul ignore next */
      (cov_2kxhofaget().s[97]++, Number(stats.external));
      const internalEstablished =
      /* istanbul ignore next */
      (cov_2kxhofaget().s[98]++, Number(stats.internalEstablished));
      const externalEstablished =
      /* istanbul ignore next */
      (cov_2kxhofaget().s[99]++, Number(stats.externalEstablished));
      const successRate =
      /* istanbul ignore next */
      (cov_2kxhofaget().s[100]++, total > 0 ?
      /* istanbul ignore next */
      (cov_2kxhofaget().b[17][0]++, established / total * 100) :
      /* istanbul ignore next */
      (cov_2kxhofaget().b[17][1]++, 0));
      const internalSuccessRate =
      /* istanbul ignore next */
      (cov_2kxhofaget().s[101]++, internal > 0 ?
      /* istanbul ignore next */
      (cov_2kxhofaget().b[18][0]++, internalEstablished / internal * 100) :
      /* istanbul ignore next */
      (cov_2kxhofaget().b[18][1]++, 0));
      const externalSuccessRate =
      /* istanbul ignore next */
      (cov_2kxhofaget().s[102]++, external > 0 ?
      /* istanbul ignore next */
      (cov_2kxhofaget().b[19][0]++, externalEstablished / external * 100) :
      /* istanbul ignore next */
      (cov_2kxhofaget().b[19][1]++, 0));
      /* istanbul ignore next */
      cov_2kxhofaget().s[103]++;
      return {
        totalPropagations: total,
        byStatus: {
          started: Number(stats.started),
          rooting: Number(stats.rooting),
          planted: Number(stats.planted),
          established: established
        },
        bySourceType: {
          internal: internal,
          external: external
        },
        byExternalSource: {
          gift: Number(stats.gift),
          trade: Number(stats.trade),
          purchase: Number(stats.purchase),
          other: Number(stats.other)
        },
        successRate: Math.round(successRate * 100) / 100,
        successRateBySource: {
          internal: Math.round(internalSuccessRate * 100) / 100,
          external: Math.round(externalSuccessRate * 100) / 100
        },
        averageDaysToEstablished: Math.round((
        /* istanbul ignore next */
        (cov_2kxhofaget().b[20][0]++, Number(stats.avgDays)) ||
        /* istanbul ignore next */
        (cov_2kxhofaget().b[20][1]++, 0)) * 100) / 100
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_2kxhofaget().s[104]++;
      console.error('Failed to get propagation stats:', error);
      /* istanbul ignore next */
      cov_2kxhofaget().s[105]++;
      throw new Error('Failed to get propagation stats');
    }
  }
  // Get active propagations (not established)
  static async getActive(userId) {
    /* istanbul ignore next */
    cov_2kxhofaget().f[21]++;
    cov_2kxhofaget().s[106]++;
    try {
      const propagationList =
      /* istanbul ignore next */
      (cov_2kxhofaget().s[107]++, await _index.db.select().from(_schema.propagations).leftJoin(_schema.plants, (0, _drizzleorm.eq)(_schema.propagations.plantId, _schema.plants.id)).leftJoin(_schema.plantInstances, (0, _drizzleorm.eq)(_schema.propagations.parentInstanceId, _schema.plantInstances.id)).where((0, _drizzleorm.and)((0, _drizzleorm.eq)(_schema.propagations.userId, userId), (0, _drizzleorm.sql)`${_schema.propagations.status} != 'established'`)).orderBy((0, _drizzleorm.asc)(_schema.propagations.dateStarted)));
      /* istanbul ignore next */
      cov_2kxhofaget().s[108]++;
      return propagationList.map(prop => {
        /* istanbul ignore next */
        cov_2kxhofaget().f[22]++;
        cov_2kxhofaget().s[109]++;
        return {
          ...prop.propagations,
          plant: prop.plants,
          parentInstance:
          /* istanbul ignore next */
          (cov_2kxhofaget().b[21][0]++, prop.plant_instances) ||
          /* istanbul ignore next */
          (cov_2kxhofaget().b[21][1]++, undefined)
        };
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_2kxhofaget().s[110]++;
      console.error('Failed to get active propagations:', error);
      /* istanbul ignore next */
      cov_2kxhofaget().s[111]++;
      throw new Error('Failed to get active propagations');
    }
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,