{"version":3,"names":["MigrationUtils","runMigrations","cov_2qq23xl0ws","f","s","console","log","_scriptconnection","db","execute","_drizzleorm","sql","migrationsPath","_path","default","join","process","cwd","_fs","existsSync","b","files","readdirSync","sqlFiles","filter","file","endsWith","includes","sort","filePath","migrationSQL","readFileSync","existing","Number","count","statements","split","map","stmt","trim","length","startsWith","statement","cleanStatement","raw","Date","now","error","Error","applyRLSPolicies","rlsPath","rlsSQL","match","message","substring","warn","getMigrationStatus","appliedResults","appliedMigrations","appliedHashes","Set","r","hash","pendingMigrations","has","push","seedInitialData","userCount","commonPlants","family","genus","species","commonName","careInstructions","isVerified","plant","healthCheck","connected","then","catch","migrationTable","migrationsApplied","Boolean","exists","tablesCheck","tablesExist","table_count","rlsCheck","rlsEnabled","rls_count"],"sources":["/Users/stefanbekker/projects/fancy-planties/src/lib/db/script-migrations.ts"],"sourcesContent":["// Migration utilities for Node.js scripts (without server-only)\nimport { db } from './script-connection';\nimport { sql } from 'drizzle-orm';\nimport fs from 'fs';\nimport path from 'path';\n\n// Migration utilities\nexport class MigrationUtils {\n  // Run all pending migrations\n  static async runMigrations(): Promise<void> {\n    try {\n      console.log('Starting database migrations...');\n      \n      // Create migrations table if it doesn't exist\n      await db.execute(sql`\n        CREATE TABLE IF NOT EXISTS __drizzle_migrations (\n          id SERIAL PRIMARY KEY,\n          hash text NOT NULL,\n          created_at bigint\n        );\n      `);\n\n      // Apply migration files from drizzle directory\n      const migrationsPath = path.join(process.cwd(), 'drizzle');\n      \n      if (fs.existsSync(migrationsPath)) {\n        const files = fs.readdirSync(migrationsPath);\n        const sqlFiles = files\n          .filter(file => file.endsWith('.sql') && !file.includes('rls-policies'))\n          .sort(); // Ensure migrations are applied in order\n\n        for (const file of sqlFiles) {\n          const filePath = path.join(migrationsPath, file);\n          const migrationSQL = fs.readFileSync(filePath, 'utf8');\n          \n          // Check if migration was already applied\n          const [existing] = await db.execute(sql`\n            SELECT COUNT(*) as count FROM __drizzle_migrations \n            WHERE hash = ${file}\n          `);\n          \n          if (Number(existing?.count) === 0) {\n            console.log(`  üìã Applying migration: ${file}`);\n            \n            // Split migration into individual statements\n            const statements = migrationSQL\n              .split('--> statement-breakpoint')\n              .map(stmt => stmt.trim())\n              .filter(stmt => stmt.length > 0 && !stmt.startsWith('--'));\n\n            for (const statement of statements) {\n              const cleanStatement = statement.trim();\n              if (cleanStatement && !cleanStatement.startsWith('--')) {\n                await db.execute(sql.raw(cleanStatement));\n              }\n            }\n            \n            // Record migration as applied\n            await db.execute(sql`\n              INSERT INTO __drizzle_migrations (hash, created_at) \n              VALUES (${file}, ${Date.now()})\n            `);\n            \n            console.log(`  ‚úÖ Applied migration: ${file}`);\n          } else {\n            console.log(`  ‚è≠Ô∏è  Skipping already applied migration: ${file}`);\n          }\n        }\n      }\n\n      console.log('Migrations completed successfully');\n    } catch (error) {\n      console.error('Migration failed:', error);\n      throw new Error('Failed to run migrations');\n    }\n  }\n\n  // Apply RLS policies\n  static async applyRLSPolicies(): Promise<void> {\n    try {\n      console.log('Applying Row-Level Security policies...');\n      \n      const rlsPath = path.join(process.cwd(), 'drizzle', 'rls-policies.sql');\n      \n      if (fs.existsSync(rlsPath)) {\n        const rlsSQL = fs.readFileSync(rlsPath, 'utf8');\n        \n        // Split by semicolon and filter out comments\n        const statements = rlsSQL\n          .split(';')\n          .map(stmt => stmt.trim())\n          .filter(stmt => \n            stmt.length > 0 && \n            !stmt.startsWith('--') && \n            !stmt.match(/^\\/\\*.*\\*\\/$/)\n          );\n\n        for (const statement of statements) {\n          const cleanStatement = statement.trim();\n          if (cleanStatement && !cleanStatement.startsWith('--')) {\n            try {\n              await db.execute(sql.raw(cleanStatement));\n            } catch (error) {\n              // Log but don't fail on policy conflicts (they might already exist)\n              if (error instanceof Error && error.message.includes('already exists')) {\n                console.log(`Policy already exists, skipping: ${cleanStatement.substring(0, 50)}...`);\n              } else {\n                console.error(`Failed to execute statement: ${cleanStatement.substring(0, 50)}...`);\n                throw error;\n              }\n            }\n          }\n        }\n        \n        console.log('RLS policies applied successfully');\n      } else {\n        console.warn('RLS policies file not found, skipping...');\n      }\n    } catch (error) {\n      console.error('Failed to apply RLS policies:', error);\n      throw new Error('Failed to apply RLS policies');\n    }\n  }\n\n  // Check migration status\n  static async getMigrationStatus(): Promise<{\n    appliedMigrations: number;\n    pendingMigrations: string[];\n  }> {\n    try {\n      // Get applied migrations\n      const appliedResults = await db.execute(sql`\n        SELECT hash FROM __drizzle_migrations ORDER BY created_at\n      `);\n      \n      const appliedMigrations = appliedResults.length;\n      const appliedHashes = new Set(appliedResults.map(r => r.hash));\n      \n      // Get all migration files\n      const migrationsPath = path.join(process.cwd(), 'drizzle');\n      const pendingMigrations: string[] = [];\n      \n      if (fs.existsSync(migrationsPath)) {\n        const files = fs.readdirSync(migrationsPath);\n        const sqlFiles = files\n          .filter(file => file.endsWith('.sql') && !file.includes('rls-policies'))\n          .sort();\n        \n        // Find pending migrations\n        for (const file of sqlFiles) {\n          if (!appliedHashes.has(file)) {\n            pendingMigrations.push(file);\n          }\n        }\n      }\n\n      return {\n        appliedMigrations,\n        pendingMigrations\n      };\n    } catch (error) {\n      console.error('Failed to get migration status:', error);\n      throw new Error('Failed to get migration status');\n    }\n  }\n\n  // Seed initial data (for development)\n  static async seedInitialData(): Promise<void> {\n    try {\n      console.log('Seeding initial data...');\n      \n      // Check if we already have data\n      const [userCount] = await db.execute(sql`SELECT COUNT(*) as count FROM users`);\n      \n      if (Number(userCount?.count) > 0) {\n        console.log('Database already has data, skipping seed');\n        return;\n      }\n\n      // Add some common plant taxonomy data\n      const commonPlants = [\n        {\n          family: 'Araceae',\n          genus: 'Monstera',\n          species: 'deliciosa',\n          commonName: 'Swiss Cheese Plant',\n          careInstructions: 'Bright indirect light, water when top inch of soil is dry',\n          isVerified: true\n        },\n        {\n          family: 'Araceae',\n          genus: 'Pothos',\n          species: 'aureus',\n          commonName: 'Golden Pothos',\n          careInstructions: 'Low to bright indirect light, water when soil is dry',\n          isVerified: true\n        },\n        {\n          family: 'Asparagaceae',\n          genus: 'Sansevieria',\n          species: 'trifasciata',\n          commonName: 'Snake Plant',\n          careInstructions: 'Low light tolerant, water sparingly',\n          isVerified: true\n        },\n        {\n          family: 'Araceae',\n          genus: 'Philodendron',\n          species: 'hederaceum',\n          commonName: 'Heartleaf Philodendron',\n          careInstructions: 'Bright indirect light, keep soil lightly moist',\n          isVerified: true\n        }\n      ];\n\n      for (const plant of commonPlants) {\n        await db.execute(sql`\n          INSERT INTO plants (family, genus, species, cultivar, common_name, care_instructions, is_verified)\n          VALUES (${plant.family}, ${plant.genus}, ${plant.species}, NULL, ${plant.commonName}, ${plant.careInstructions}, ${plant.isVerified})\n          ON CONFLICT (family, genus, species, cultivar) DO NOTHING\n        `);\n      }\n\n      console.log('Initial data seeded successfully');\n    } catch (error) {\n      console.error('Failed to seed initial data:', error);\n      throw new Error('Failed to seed initial data');\n    }\n  }\n\n  // Database health check\n  static async healthCheck(): Promise<{\n    connected: boolean;\n    migrationsApplied: boolean;\n    rlsEnabled: boolean;\n    tablesExist: boolean;\n  }> {\n    try {\n      // Check connection\n      const connected = await db.execute(sql`SELECT 1`).then(() => true).catch(() => false);\n      \n      // Check if migrations table exists\n      const [migrationTable] = await db.execute(sql`\n        SELECT EXISTS (\n          SELECT FROM information_schema.tables \n          WHERE table_name = '__drizzle_migrations'\n        ) as exists\n      `);\n      const migrationsApplied = Boolean(migrationTable?.exists) || false;\n\n      // Check if main tables exist (including email verification)\n      const [tablesCheck] = await db.execute(sql`\n        SELECT \n          (SELECT COUNT(*) FROM information_schema.tables WHERE table_name IN ('users', 'plants', 'plant_instances', 'propagations', 'sessions', 'email_verification_codes')) as table_count\n      `);\n      const tablesExist = Number(tablesCheck?.table_count) === 6;\n\n      // Check if RLS is enabled on user tables\n      const [rlsCheck] = await db.execute(sql`\n        SELECT COUNT(*) as rls_count\n        FROM pg_class c\n        JOIN pg_namespace n ON n.oid = c.relnamespace\n        WHERE c.relrowsecurity = true \n        AND n.nspname = 'public'\n        AND c.relname IN ('plant_instances', 'propagations', 'sessions', 'care_history', 'care_guides', 'email_verification_codes')\n      `);\n      const rlsEnabled = Number(rlsCheck?.rls_count) === 6;\n\n      return {\n        connected,\n        migrationsApplied,\n        rlsEnabled,\n        tablesExist\n      };\n    } catch (error) {\n      console.error('Health check failed:', error);\n      return {\n        connected: false,\n        migrationsApplied: false,\n        rlsEnabled: false,\n        tablesExist: false\n      };\n    }\n  }\n}"],"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","ignoreList":[]}