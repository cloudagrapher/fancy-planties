e9c5660eeae52fbf8af3c67ba68006de
// Migration utilities for Node.js scripts (without server-only)
"use strict";

/* istanbul ignore next */
function cov_2qq23xl0ws() {
  var path = "/Users/stefanbekker/projects/fancy-planties/src/lib/db/script-migrations.ts";
  var hash = "b72f5552f452c2cf6016cc6440e13067cbd2b05e";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/stefanbekker/projects/fancy-planties/src/lib/db/script-migrations.ts",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 5,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 11,
          column: 3
        }
      },
      "2": {
        start: {
          line: 9,
          column: 8
        },
        end: {
          line: 9,
          column: 30
        }
      },
      "3": {
        start: {
          line: 12,
          column: 26
        },
        end: {
          line: 12,
          column: 56
        }
      },
      "4": {
        start: {
          line: 13,
          column: 20
        },
        end: {
          line: 13,
          column: 42
        }
      },
      "5": {
        start: {
          line: 14,
          column: 26
        },
        end: {
          line: 14,
          column: 65
        }
      },
      "6": {
        start: {
          line: 15,
          column: 28
        },
        end: {
          line: 15,
          column: 69
        }
      },
      "7": {
        start: {
          line: 17,
          column: 4
        },
        end: {
          line: 19,
          column: 6
        }
      },
      "8": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 72,
          column: 9
        }
      },
      "9": {
        start: {
          line: 25,
          column: 12
        },
        end: {
          line: 25,
          column: 59
        }
      },
      "10": {
        start: {
          line: 27,
          column: 12
        },
        end: {
          line: 33,
          column: 9
        }
      },
      "11": {
        start: {
          line: 35,
          column: 35
        },
        end: {
          line: 35,
          column: 79
        }
      },
      "12": {
        start: {
          line: 36,
          column: 12
        },
        end: {
          line: 67,
          column: 13
        }
      },
      "13": {
        start: {
          line: 37,
          column: 30
        },
        end: {
          line: 37,
          column: 69
        }
      },
      "14": {
        start: {
          line: 38,
          column: 33
        },
        end: {
          line: 38,
          column: 117
        }
      },
      "15": {
        start: {
          line: 38,
          column: 54
        },
        end: {
          line: 38,
          column: 109
        }
      },
      "16": {
        start: {
          line: 39,
          column: 16
        },
        end: {
          line: 66,
          column: 17
        }
      },
      "17": {
        start: {
          line: 40,
          column: 37
        },
        end: {
          line: 40,
          column: 77
        }
      },
      "18": {
        start: {
          line: 41,
          column: 41
        },
        end: {
          line: 41,
          column: 83
        }
      },
      "19": {
        start: {
          line: 43,
          column: 39
        },
        end: {
          line: 46,
          column: 12
        }
      },
      "20": {
        start: {
          line: 47,
          column: 20
        },
        end: {
          line: 65,
          column: 21
        }
      },
      "21": {
        start: {
          line: 48,
          column: 24
        },
        end: {
          line: 48,
          column: 72
        }
      },
      "22": {
        start: {
          line: 50,
          column: 43
        },
        end: {
          line: 50,
          column: 172
        }
      },
      "23": {
        start: {
          line: 50,
          column: 102
        },
        end: {
          line: 50,
          column: 113
        }
      },
      "24": {
        start: {
          line: 50,
          column: 130
        },
        end: {
          line: 50,
          column: 171
        }
      },
      "25": {
        start: {
          line: 51,
          column: 24
        },
        end: {
          line: 56,
          column: 25
        }
      },
      "26": {
        start: {
          line: 52,
          column: 51
        },
        end: {
          line: 52,
          column: 67
        }
      },
      "27": {
        start: {
          line: 53,
          column: 28
        },
        end: {
          line: 55,
          column: 29
        }
      },
      "28": {
        start: {
          line: 54,
          column: 32
        },
        end: {
          line: 54,
          column: 104
        }
      },
      "29": {
        start: {
          line: 58,
          column: 24
        },
        end: {
          line: 61,
          column: 15
        }
      },
      "30": {
        start: {
          line: 62,
          column: 24
        },
        end: {
          line: 62,
          column: 70
        }
      },
      "31": {
        start: {
          line: 64,
          column: 24
        },
        end: {
          line: 64,
          column: 89
        }
      },
      "32": {
        start: {
          line: 68,
          column: 12
        },
        end: {
          line: 68,
          column: 61
        }
      },
      "33": {
        start: {
          line: 70,
          column: 12
        },
        end: {
          line: 70,
          column: 54
        }
      },
      "34": {
        start: {
          line: 71,
          column: 12
        },
        end: {
          line: 71,
          column: 56
        }
      },
      "35": {
        start: {
          line: 76,
          column: 8
        },
        end: {
          line: 106,
          column: 9
        }
      },
      "36": {
        start: {
          line: 77,
          column: 12
        },
        end: {
          line: 77,
          column: 67
        }
      },
      "37": {
        start: {
          line: 78,
          column: 28
        },
        end: {
          line: 78,
          column: 92
        }
      },
      "38": {
        start: {
          line: 79,
          column: 12
        },
        end: {
          line: 102,
          column: 13
        }
      },
      "39": {
        start: {
          line: 80,
          column: 31
        },
        end: {
          line: 80,
          column: 72
        }
      },
      "40": {
        start: {
          line: 82,
          column: 35
        },
        end: {
          line: 82,
          column: 166
        }
      },
      "41": {
        start: {
          line: 82,
          column: 65
        },
        end: {
          line: 82,
          column: 76
        }
      },
      "42": {
        start: {
          line: 82,
          column: 93
        },
        end: {
          line: 82,
          column: 165
        }
      },
      "43": {
        start: {
          line: 83,
          column: 16
        },
        end: {
          line: 98,
          column: 17
        }
      },
      "44": {
        start: {
          line: 84,
          column: 43
        },
        end: {
          line: 84,
          column: 59
        }
      },
      "45": {
        start: {
          line: 85,
          column: 20
        },
        end: {
          line: 97,
          column: 21
        }
      },
      "46": {
        start: {
          line: 86,
          column: 24
        },
        end: {
          line: 96,
          column: 25
        }
      },
      "47": {
        start: {
          line: 87,
          column: 28
        },
        end: {
          line: 87,
          column: 100
        }
      },
      "48": {
        start: {
          line: 90,
          column: 28
        },
        end: {
          line: 95,
          column: 29
        }
      },
      "49": {
        start: {
          line: 91,
          column: 32
        },
        end: {
          line: 91,
          column: 118
        }
      },
      "50": {
        start: {
          line: 93,
          column: 32
        },
        end: {
          line: 93,
          column: 116
        }
      },
      "51": {
        start: {
          line: 94,
          column: 32
        },
        end: {
          line: 94,
          column: 44
        }
      },
      "52": {
        start: {
          line: 99,
          column: 16
        },
        end: {
          line: 99,
          column: 65
        }
      },
      "53": {
        start: {
          line: 101,
          column: 16
        },
        end: {
          line: 101,
          column: 73
        }
      },
      "54": {
        start: {
          line: 104,
          column: 12
        },
        end: {
          line: 104,
          column: 66
        }
      },
      "55": {
        start: {
          line: 105,
          column: 12
        },
        end: {
          line: 105,
          column: 60
        }
      },
      "56": {
        start: {
          line: 110,
          column: 8
        },
        end: {
          line: 137,
          column: 9
        }
      },
      "57": {
        start: {
          line: 112,
          column: 35
        },
        end: {
          line: 114,
          column: 8
        }
      },
      "58": {
        start: {
          line: 115,
          column: 38
        },
        end: {
          line: 115,
          column: 59
        }
      },
      "59": {
        start: {
          line: 116,
          column: 34
        },
        end: {
          line: 116,
          column: 74
        }
      },
      "60": {
        start: {
          line: 116,
          column: 66
        },
        end: {
          line: 116,
          column: 72
        }
      },
      "61": {
        start: {
          line: 118,
          column: 35
        },
        end: {
          line: 118,
          column: 79
        }
      },
      "62": {
        start: {
          line: 119,
          column: 38
        },
        end: {
          line: 119,
          column: 40
        }
      },
      "63": {
        start: {
          line: 120,
          column: 12
        },
        end: {
          line: 129,
          column: 13
        }
      },
      "64": {
        start: {
          line: 121,
          column: 30
        },
        end: {
          line: 121,
          column: 69
        }
      },
      "65": {
        start: {
          line: 122,
          column: 33
        },
        end: {
          line: 122,
          column: 117
        }
      },
      "66": {
        start: {
          line: 122,
          column: 54
        },
        end: {
          line: 122,
          column: 109
        }
      },
      "67": {
        start: {
          line: 124,
          column: 16
        },
        end: {
          line: 128,
          column: 17
        }
      },
      "68": {
        start: {
          line: 125,
          column: 20
        },
        end: {
          line: 127,
          column: 21
        }
      },
      "69": {
        start: {
          line: 126,
          column: 24
        },
        end: {
          line: 126,
          column: 53
        }
      },
      "70": {
        start: {
          line: 130,
          column: 12
        },
        end: {
          line: 133,
          column: 14
        }
      },
      "71": {
        start: {
          line: 135,
          column: 12
        },
        end: {
          line: 135,
          column: 68
        }
      },
      "72": {
        start: {
          line: 136,
          column: 12
        },
        end: {
          line: 136,
          column: 62
        }
      },
      "73": {
        start: {
          line: 141,
          column: 8
        },
        end: {
          line: 195,
          column: 9
        }
      },
      "74": {
        start: {
          line: 142,
          column: 12
        },
        end: {
          line: 142,
          column: 51
        }
      },
      "75": {
        start: {
          line: 144,
          column: 32
        },
        end: {
          line: 144,
          column: 125
        }
      },
      "76": {
        start: {
          line: 145,
          column: 12
        },
        end: {
          line: 148,
          column: 13
        }
      },
      "77": {
        start: {
          line: 146,
          column: 16
        },
        end: {
          line: 146,
          column: 72
        }
      },
      "78": {
        start: {
          line: 147,
          column: 16
        },
        end: {
          line: 147,
          column: 23
        }
      },
      "79": {
        start: {
          line: 150,
          column: 33
        },
        end: {
          line: 183,
          column: 13
        }
      },
      "80": {
        start: {
          line: 184,
          column: 12
        },
        end: {
          line: 190,
          column: 13
        }
      },
      "81": {
        start: {
          line: 185,
          column: 16
        },
        end: {
          line: 189,
          column: 11
        }
      },
      "82": {
        start: {
          line: 191,
          column: 12
        },
        end: {
          line: 191,
          column: 60
        }
      },
      "83": {
        start: {
          line: 193,
          column: 12
        },
        end: {
          line: 193,
          column: 65
        }
      },
      "84": {
        start: {
          line: 194,
          column: 12
        },
        end: {
          line: 194,
          column: 59
        }
      },
      "85": {
        start: {
          line: 199,
          column: 8
        },
        end: {
          line: 240,
          column: 9
        }
      },
      "86": {
        start: {
          line: 201,
          column: 30
        },
        end: {
          line: 201,
          column: 128
        }
      },
      "87": {
        start: {
          line: 201,
          column: 106
        },
        end: {
          line: 201,
          column: 110
        }
      },
      "88": {
        start: {
          line: 201,
          column: 122
        },
        end: {
          line: 201,
          column: 127
        }
      },
      "89": {
        start: {
          line: 203,
          column: 37
        },
        end: {
          line: 208,
          column: 8
        }
      },
      "90": {
        start: {
          line: 209,
          column: 38
        },
        end: {
          line: 209,
          column: 78
        }
      },
      "91": {
        start: {
          line: 211,
          column: 34
        },
        end: {
          line: 214,
          column: 8
        }
      },
      "92": {
        start: {
          line: 215,
          column: 32
        },
        end: {
          line: 215,
          column: 70
        }
      },
      "93": {
        start: {
          line: 217,
          column: 31
        },
        end: {
          line: 224,
          column: 8
        }
      },
      "94": {
        start: {
          line: 225,
          column: 31
        },
        end: {
          line: 225,
          column: 64
        }
      },
      "95": {
        start: {
          line: 226,
          column: 12
        },
        end: {
          line: 231,
          column: 14
        }
      },
      "96": {
        start: {
          line: 233,
          column: 12
        },
        end: {
          line: 233,
          column: 57
        }
      },
      "97": {
        start: {
          line: 234,
          column: 12
        },
        end: {
          line: 239,
          column: 14
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 8,
            column: 9
          },
          end: {
            line: 8,
            column: 10
          }
        },
        loc: {
          start: {
            line: 8,
            column: 20
          },
          end: {
            line: 10,
            column: 5
          }
        },
        line: 8
      },
      "1": {
        name: "_interop_require_default",
        decl: {
          start: {
            line: 16,
            column: 9
          },
          end: {
            line: 16,
            column: 33
          }
        },
        loc: {
          start: {
            line: 16,
            column: 39
          },
          end: {
            line: 20,
            column: 1
          }
        },
        line: 16
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 23,
            column: 4
          },
          end: {
            line: 23,
            column: 5
          }
        },
        loc: {
          start: {
            line: 23,
            column: 33
          },
          end: {
            line: 73,
            column: 5
          }
        },
        line: 23
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 38,
            column: 46
          },
          end: {
            line: 38,
            column: 47
          }
        },
        loc: {
          start: {
            line: 38,
            column: 54
          },
          end: {
            line: 38,
            column: 109
          }
        },
        line: 38
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 50,
            column: 94
          },
          end: {
            line: 50,
            column: 95
          }
        },
        loc: {
          start: {
            line: 50,
            column: 102
          },
          end: {
            line: 50,
            column: 113
          }
        },
        line: 50
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 50,
            column: 122
          },
          end: {
            line: 50,
            column: 123
          }
        },
        loc: {
          start: {
            line: 50,
            column: 130
          },
          end: {
            line: 50,
            column: 171
          }
        },
        line: 50
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 75,
            column: 4
          },
          end: {
            line: 75,
            column: 5
          }
        },
        loc: {
          start: {
            line: 75,
            column: 36
          },
          end: {
            line: 107,
            column: 5
          }
        },
        line: 75
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 82,
            column: 57
          },
          end: {
            line: 82,
            column: 58
          }
        },
        loc: {
          start: {
            line: 82,
            column: 65
          },
          end: {
            line: 82,
            column: 76
          }
        },
        line: 82
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 82,
            column: 85
          },
          end: {
            line: 82,
            column: 86
          }
        },
        loc: {
          start: {
            line: 82,
            column: 93
          },
          end: {
            line: 82,
            column: 165
          }
        },
        line: 82
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 109,
            column: 4
          },
          end: {
            line: 109,
            column: 5
          }
        },
        loc: {
          start: {
            line: 109,
            column: 38
          },
          end: {
            line: 138,
            column: 5
          }
        },
        line: 109
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 116,
            column: 61
          },
          end: {
            line: 116,
            column: 62
          }
        },
        loc: {
          start: {
            line: 116,
            column: 66
          },
          end: {
            line: 116,
            column: 72
          }
        },
        line: 116
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 122,
            column: 46
          },
          end: {
            line: 122,
            column: 47
          }
        },
        loc: {
          start: {
            line: 122,
            column: 54
          },
          end: {
            line: 122,
            column: 109
          }
        },
        line: 122
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 140,
            column: 4
          },
          end: {
            line: 140,
            column: 5
          }
        },
        loc: {
          start: {
            line: 140,
            column: 35
          },
          end: {
            line: 196,
            column: 5
          }
        },
        line: 140
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 198,
            column: 4
          },
          end: {
            line: 198,
            column: 5
          }
        },
        loc: {
          start: {
            line: 198,
            column: 31
          },
          end: {
            line: 241,
            column: 5
          }
        },
        line: 198
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 201,
            column: 102
          },
          end: {
            line: 201,
            column: 103
          }
        },
        loc: {
          start: {
            line: 201,
            column: 106
          },
          end: {
            line: 201,
            column: 110
          }
        },
        line: 201
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 201,
            column: 118
          },
          end: {
            line: 201,
            column: 119
          }
        },
        loc: {
          start: {
            line: 201,
            column: 122
          },
          end: {
            line: 201,
            column: 127
          }
        },
        line: 201
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 17,
            column: 11
          },
          end: {
            line: 19,
            column: 5
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 17,
            column: 35
          },
          end: {
            line: 17,
            column: 38
          }
        }, {
          start: {
            line: 17,
            column: 41
          },
          end: {
            line: 19,
            column: 5
          }
        }],
        line: 17
      },
      "1": {
        loc: {
          start: {
            line: 17,
            column: 11
          },
          end: {
            line: 17,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 17,
            column: 11
          },
          end: {
            line: 17,
            column: 14
          }
        }, {
          start: {
            line: 17,
            column: 18
          },
          end: {
            line: 17,
            column: 32
          }
        }],
        line: 17
      },
      "2": {
        loc: {
          start: {
            line: 36,
            column: 12
          },
          end: {
            line: 67,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 36,
            column: 12
          },
          end: {
            line: 67,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 36
      },
      "3": {
        loc: {
          start: {
            line: 38,
            column: 54
          },
          end: {
            line: 38,
            column: 109
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 38,
            column: 54
          },
          end: {
            line: 38,
            column: 75
          }
        }, {
          start: {
            line: 38,
            column: 79
          },
          end: {
            line: 38,
            column: 109
          }
        }],
        line: 38
      },
      "4": {
        loc: {
          start: {
            line: 47,
            column: 20
          },
          end: {
            line: 65,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 47,
            column: 20
          },
          end: {
            line: 65,
            column: 21
          }
        }, {
          start: {
            line: 63,
            column: 27
          },
          end: {
            line: 65,
            column: 21
          }
        }],
        line: 47
      },
      "5": {
        loc: {
          start: {
            line: 50,
            column: 130
          },
          end: {
            line: 50,
            column: 171
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 50,
            column: 130
          },
          end: {
            line: 50,
            column: 145
          }
        }, {
          start: {
            line: 50,
            column: 149
          },
          end: {
            line: 50,
            column: 171
          }
        }],
        line: 50
      },
      "6": {
        loc: {
          start: {
            line: 53,
            column: 28
          },
          end: {
            line: 55,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 53,
            column: 28
          },
          end: {
            line: 55,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 53
      },
      "7": {
        loc: {
          start: {
            line: 53,
            column: 32
          },
          end: {
            line: 53,
            column: 82
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 53,
            column: 32
          },
          end: {
            line: 53,
            column: 46
          }
        }, {
          start: {
            line: 53,
            column: 50
          },
          end: {
            line: 53,
            column: 82
          }
        }],
        line: 53
      },
      "8": {
        loc: {
          start: {
            line: 79,
            column: 12
          },
          end: {
            line: 102,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 79,
            column: 12
          },
          end: {
            line: 102,
            column: 13
          }
        }, {
          start: {
            line: 100,
            column: 19
          },
          end: {
            line: 102,
            column: 13
          }
        }],
        line: 79
      },
      "9": {
        loc: {
          start: {
            line: 82,
            column: 93
          },
          end: {
            line: 82,
            column: 165
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 82,
            column: 93
          },
          end: {
            line: 82,
            column: 108
          }
        }, {
          start: {
            line: 82,
            column: 112
          },
          end: {
            line: 82,
            column: 134
          }
        }, {
          start: {
            line: 82,
            column: 138
          },
          end: {
            line: 82,
            column: 165
          }
        }],
        line: 82
      },
      "10": {
        loc: {
          start: {
            line: 85,
            column: 20
          },
          end: {
            line: 97,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 85,
            column: 20
          },
          end: {
            line: 97,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 85
      },
      "11": {
        loc: {
          start: {
            line: 85,
            column: 24
          },
          end: {
            line: 85,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 85,
            column: 24
          },
          end: {
            line: 85,
            column: 38
          }
        }, {
          start: {
            line: 85,
            column: 42
          },
          end: {
            line: 85,
            column: 74
          }
        }],
        line: 85
      },
      "12": {
        loc: {
          start: {
            line: 90,
            column: 28
          },
          end: {
            line: 95,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 90,
            column: 28
          },
          end: {
            line: 95,
            column: 29
          }
        }, {
          start: {
            line: 92,
            column: 35
          },
          end: {
            line: 95,
            column: 29
          }
        }],
        line: 90
      },
      "13": {
        loc: {
          start: {
            line: 90,
            column: 32
          },
          end: {
            line: 90,
            column: 98
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 90,
            column: 32
          },
          end: {
            line: 90,
            column: 54
          }
        }, {
          start: {
            line: 90,
            column: 58
          },
          end: {
            line: 90,
            column: 98
          }
        }],
        line: 90
      },
      "14": {
        loc: {
          start: {
            line: 120,
            column: 12
          },
          end: {
            line: 129,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 120,
            column: 12
          },
          end: {
            line: 129,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 120
      },
      "15": {
        loc: {
          start: {
            line: 122,
            column: 54
          },
          end: {
            line: 122,
            column: 109
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 122,
            column: 54
          },
          end: {
            line: 122,
            column: 75
          }
        }, {
          start: {
            line: 122,
            column: 79
          },
          end: {
            line: 122,
            column: 109
          }
        }],
        line: 122
      },
      "16": {
        loc: {
          start: {
            line: 125,
            column: 20
          },
          end: {
            line: 127,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 125,
            column: 20
          },
          end: {
            line: 127,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 125
      },
      "17": {
        loc: {
          start: {
            line: 145,
            column: 12
          },
          end: {
            line: 148,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 145,
            column: 12
          },
          end: {
            line: 148,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 145
      },
      "18": {
        loc: {
          start: {
            line: 209,
            column: 38
          },
          end: {
            line: 209,
            column: 78
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 209,
            column: 38
          },
          end: {
            line: 209,
            column: 69
          }
        }, {
          start: {
            line: 209,
            column: 73
          },
          end: {
            line: 209,
            column: 78
          }
        }],
        line: 209
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/stefanbekker/projects/fancy-planties/src/lib/db/script-migrations.ts"],
      sourcesContent: ["// Migration utilities for Node.js scripts (without server-only)\nimport { db } from './script-connection';\nimport { sql } from 'drizzle-orm';\nimport fs from 'fs';\nimport path from 'path';\n\n// Migration utilities\nexport class MigrationUtils {\n  // Run all pending migrations\n  static async runMigrations(): Promise<void> {\n    try {\n      console.log('Starting database migrations...');\n      \n      // Create migrations table if it doesn't exist\n      await db.execute(sql`\n        CREATE TABLE IF NOT EXISTS __drizzle_migrations (\n          id SERIAL PRIMARY KEY,\n          hash text NOT NULL,\n          created_at bigint\n        );\n      `);\n\n      // Apply migration files from drizzle directory\n      const migrationsPath = path.join(process.cwd(), 'drizzle');\n      \n      if (fs.existsSync(migrationsPath)) {\n        const files = fs.readdirSync(migrationsPath);\n        const sqlFiles = files\n          .filter(file => file.endsWith('.sql') && !file.includes('rls-policies'))\n          .sort(); // Ensure migrations are applied in order\n\n        for (const file of sqlFiles) {\n          const filePath = path.join(migrationsPath, file);\n          const migrationSQL = fs.readFileSync(filePath, 'utf8');\n          \n          // Check if migration was already applied\n          const [existing] = await db.execute(sql`\n            SELECT COUNT(*) as count FROM __drizzle_migrations \n            WHERE hash = ${file}\n          `);\n          \n          if (Number(existing?.count) === 0) {\n            console.log(`  \uD83D\uDCCB Applying migration: ${file}`);\n            \n            // Split migration into individual statements\n            const statements = migrationSQL\n              .split('--> statement-breakpoint')\n              .map(stmt => stmt.trim())\n              .filter(stmt => stmt.length > 0 && !stmt.startsWith('--'));\n\n            for (const statement of statements) {\n              const cleanStatement = statement.trim();\n              if (cleanStatement && !cleanStatement.startsWith('--')) {\n                await db.execute(sql.raw(cleanStatement));\n              }\n            }\n            \n            // Record migration as applied\n            await db.execute(sql`\n              INSERT INTO __drizzle_migrations (hash, created_at) \n              VALUES (${file}, ${Date.now()})\n            `);\n            \n            console.log(`  \u2705 Applied migration: ${file}`);\n          } else {\n            console.log(`  \u23ED\uFE0F  Skipping already applied migration: ${file}`);\n          }\n        }\n      }\n\n      console.log('Migrations completed successfully');\n    } catch (error) {\n      console.error('Migration failed:', error);\n      throw new Error('Failed to run migrations');\n    }\n  }\n\n  // Apply RLS policies\n  static async applyRLSPolicies(): Promise<void> {\n    try {\n      console.log('Applying Row-Level Security policies...');\n      \n      const rlsPath = path.join(process.cwd(), 'drizzle', 'rls-policies.sql');\n      \n      if (fs.existsSync(rlsPath)) {\n        const rlsSQL = fs.readFileSync(rlsPath, 'utf8');\n        \n        // Split by semicolon and filter out comments\n        const statements = rlsSQL\n          .split(';')\n          .map(stmt => stmt.trim())\n          .filter(stmt => \n            stmt.length > 0 && \n            !stmt.startsWith('--') && \n            !stmt.match(/^\\/\\*.*\\*\\/$/)\n          );\n\n        for (const statement of statements) {\n          const cleanStatement = statement.trim();\n          if (cleanStatement && !cleanStatement.startsWith('--')) {\n            try {\n              await db.execute(sql.raw(cleanStatement));\n            } catch (error) {\n              // Log but don't fail on policy conflicts (they might already exist)\n              if (error instanceof Error && error.message.includes('already exists')) {\n                console.log(`Policy already exists, skipping: ${cleanStatement.substring(0, 50)}...`);\n              } else {\n                console.error(`Failed to execute statement: ${cleanStatement.substring(0, 50)}...`);\n                throw error;\n              }\n            }\n          }\n        }\n        \n        console.log('RLS policies applied successfully');\n      } else {\n        console.warn('RLS policies file not found, skipping...');\n      }\n    } catch (error) {\n      console.error('Failed to apply RLS policies:', error);\n      throw new Error('Failed to apply RLS policies');\n    }\n  }\n\n  // Check migration status\n  static async getMigrationStatus(): Promise<{\n    appliedMigrations: number;\n    pendingMigrations: string[];\n  }> {\n    try {\n      // Get applied migrations\n      const appliedResults = await db.execute(sql`\n        SELECT hash FROM __drizzle_migrations ORDER BY created_at\n      `);\n      \n      const appliedMigrations = appliedResults.length;\n      const appliedHashes = new Set(appliedResults.map(r => r.hash));\n      \n      // Get all migration files\n      const migrationsPath = path.join(process.cwd(), 'drizzle');\n      const pendingMigrations: string[] = [];\n      \n      if (fs.existsSync(migrationsPath)) {\n        const files = fs.readdirSync(migrationsPath);\n        const sqlFiles = files\n          .filter(file => file.endsWith('.sql') && !file.includes('rls-policies'))\n          .sort();\n        \n        // Find pending migrations\n        for (const file of sqlFiles) {\n          if (!appliedHashes.has(file)) {\n            pendingMigrations.push(file);\n          }\n        }\n      }\n\n      return {\n        appliedMigrations,\n        pendingMigrations\n      };\n    } catch (error) {\n      console.error('Failed to get migration status:', error);\n      throw new Error('Failed to get migration status');\n    }\n  }\n\n  // Seed initial data (for development)\n  static async seedInitialData(): Promise<void> {\n    try {\n      console.log('Seeding initial data...');\n      \n      // Check if we already have data\n      const [userCount] = await db.execute(sql`SELECT COUNT(*) as count FROM users`);\n      \n      if (Number(userCount?.count) > 0) {\n        console.log('Database already has data, skipping seed');\n        return;\n      }\n\n      // Add some common plant taxonomy data\n      const commonPlants = [\n        {\n          family: 'Araceae',\n          genus: 'Monstera',\n          species: 'deliciosa',\n          commonName: 'Swiss Cheese Plant',\n          careInstructions: 'Bright indirect light, water when top inch of soil is dry',\n          isVerified: true\n        },\n        {\n          family: 'Araceae',\n          genus: 'Pothos',\n          species: 'aureus',\n          commonName: 'Golden Pothos',\n          careInstructions: 'Low to bright indirect light, water when soil is dry',\n          isVerified: true\n        },\n        {\n          family: 'Asparagaceae',\n          genus: 'Sansevieria',\n          species: 'trifasciata',\n          commonName: 'Snake Plant',\n          careInstructions: 'Low light tolerant, water sparingly',\n          isVerified: true\n        },\n        {\n          family: 'Araceae',\n          genus: 'Philodendron',\n          species: 'hederaceum',\n          commonName: 'Heartleaf Philodendron',\n          careInstructions: 'Bright indirect light, keep soil lightly moist',\n          isVerified: true\n        }\n      ];\n\n      for (const plant of commonPlants) {\n        await db.execute(sql`\n          INSERT INTO plants (family, genus, species, cultivar, common_name, care_instructions, is_verified)\n          VALUES (${plant.family}, ${plant.genus}, ${plant.species}, NULL, ${plant.commonName}, ${plant.careInstructions}, ${plant.isVerified})\n          ON CONFLICT (family, genus, species, cultivar) DO NOTHING\n        `);\n      }\n\n      console.log('Initial data seeded successfully');\n    } catch (error) {\n      console.error('Failed to seed initial data:', error);\n      throw new Error('Failed to seed initial data');\n    }\n  }\n\n  // Database health check\n  static async healthCheck(): Promise<{\n    connected: boolean;\n    migrationsApplied: boolean;\n    rlsEnabled: boolean;\n    tablesExist: boolean;\n  }> {\n    try {\n      // Check connection\n      const connected = await db.execute(sql`SELECT 1`).then(() => true).catch(() => false);\n      \n      // Check if migrations table exists\n      const [migrationTable] = await db.execute(sql`\n        SELECT EXISTS (\n          SELECT FROM information_schema.tables \n          WHERE table_name = '__drizzle_migrations'\n        ) as exists\n      `);\n      const migrationsApplied = Boolean(migrationTable?.exists) || false;\n\n      // Check if main tables exist (including email verification)\n      const [tablesCheck] = await db.execute(sql`\n        SELECT \n          (SELECT COUNT(*) FROM information_schema.tables WHERE table_name IN ('users', 'plants', 'plant_instances', 'propagations', 'sessions', 'email_verification_codes')) as table_count\n      `);\n      const tablesExist = Number(tablesCheck?.table_count) === 6;\n\n      // Check if RLS is enabled on user tables\n      const [rlsCheck] = await db.execute(sql`\n        SELECT COUNT(*) as rls_count\n        FROM pg_class c\n        JOIN pg_namespace n ON n.oid = c.relnamespace\n        WHERE c.relrowsecurity = true \n        AND n.nspname = 'public'\n        AND c.relname IN ('plant_instances', 'propagations', 'sessions', 'care_history', 'care_guides', 'email_verification_codes')\n      `);\n      const rlsEnabled = Number(rlsCheck?.rls_count) === 6;\n\n      return {\n        connected,\n        migrationsApplied,\n        rlsEnabled,\n        tablesExist\n      };\n    } catch (error) {\n      console.error('Health check failed:', error);\n      return {\n        connected: false,\n        migrationsApplied: false,\n        rlsEnabled: false,\n        tablesExist: false\n      };\n    }\n  }\n}"],
      names: ["MigrationUtils", "runMigrations", "console", "log", "db", "execute", "sql", "migrationsPath", "path", "join", "process", "cwd", "fs", "existsSync", "files", "readdirSync", "sqlFiles", "filter", "file", "endsWith", "includes", "sort", "filePath", "migrationSQL", "readFileSync", "existing", "Number", "count", "statements", "split", "map", "stmt", "trim", "length", "startsWith", "statement", "cleanStatement", "raw", "Date", "now", "error", "Error", "applyRLSPolicies", "rlsPath", "rlsSQL", "match", "message", "substring", "warn", "getMigrationStatus", "appliedResults", "appliedMigrations", "appliedHashes", "Set", "r", "hash", "pendingMigrations", "has", "push", "seedInitialData", "userCount", "commonPlants", "family", "genus", "species", "commonName", "careInstructions", "isVerified", "plant", "healthCheck", "connected", "then", "catch", "migrationTable", "migrationsApplied", "Boolean", "exists", "tablesCheck", "tablesExist", "table_count", "rlsCheck", "rlsEnabled", "rls_count"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "b72f5552f452c2cf6016cc6440e13067cbd2b05e"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2qq23xl0ws = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2qq23xl0ws();
cov_2qq23xl0ws().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_2qq23xl0ws().s[1]++;
Object.defineProperty(exports, "MigrationUtils", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_2qq23xl0ws().f[0]++;
    cov_2qq23xl0ws().s[2]++;
    return MigrationUtils;
  }
});
const _scriptconnection =
/* istanbul ignore next */
(cov_2qq23xl0ws().s[3]++, require("./script-connection"));
const _drizzleorm =
/* istanbul ignore next */
(cov_2qq23xl0ws().s[4]++, require("drizzle-orm"));
const _fs =
/* istanbul ignore next */
(/*#__PURE__*/cov_2qq23xl0ws().s[5]++, _interop_require_default(require("fs")));
const _path =
/* istanbul ignore next */
(/*#__PURE__*/cov_2qq23xl0ws().s[6]++, _interop_require_default(require("path")));
function _interop_require_default(obj) {
  /* istanbul ignore next */
  cov_2qq23xl0ws().f[1]++;
  cov_2qq23xl0ws().s[7]++;
  return /* istanbul ignore next */(cov_2qq23xl0ws().b[1][0]++, obj) &&
  /* istanbul ignore next */
  (cov_2qq23xl0ws().b[1][1]++, obj.__esModule) ?
  /* istanbul ignore next */
  (cov_2qq23xl0ws().b[0][0]++, obj) :
  /* istanbul ignore next */
  (cov_2qq23xl0ws().b[0][1]++, {
    default: obj
  });
}
class MigrationUtils {
  // Run all pending migrations
  static async runMigrations() {
    /* istanbul ignore next */
    cov_2qq23xl0ws().f[2]++;
    cov_2qq23xl0ws().s[8]++;
    try {
      /* istanbul ignore next */
      cov_2qq23xl0ws().s[9]++;
      console.log('Starting database migrations...');
      // Create migrations table if it doesn't exist
      /* istanbul ignore next */
      cov_2qq23xl0ws().s[10]++;
      await _scriptconnection.db.execute((0, _drizzleorm.sql)`
        CREATE TABLE IF NOT EXISTS __drizzle_migrations (
          id SERIAL PRIMARY KEY,
          hash text NOT NULL,
          created_at bigint
        );
      `);
      // Apply migration files from drizzle directory
      const migrationsPath =
      /* istanbul ignore next */
      (cov_2qq23xl0ws().s[11]++, _path.default.join(process.cwd(), 'drizzle'));
      /* istanbul ignore next */
      cov_2qq23xl0ws().s[12]++;
      if (_fs.default.existsSync(migrationsPath)) {
        /* istanbul ignore next */
        cov_2qq23xl0ws().b[2][0]++;
        const files =
        /* istanbul ignore next */
        (cov_2qq23xl0ws().s[13]++, _fs.default.readdirSync(migrationsPath));
        const sqlFiles =
        /* istanbul ignore next */
        (cov_2qq23xl0ws().s[14]++, files.filter(file => {
          /* istanbul ignore next */
          cov_2qq23xl0ws().f[3]++;
          cov_2qq23xl0ws().s[15]++;
          return /* istanbul ignore next */(cov_2qq23xl0ws().b[3][0]++, file.endsWith('.sql')) &&
          /* istanbul ignore next */
          (cov_2qq23xl0ws().b[3][1]++, !file.includes('rls-policies'));
        }).sort()); // Ensure migrations are applied in order
        /* istanbul ignore next */
        cov_2qq23xl0ws().s[16]++;
        for (const file of sqlFiles) {
          const filePath =
          /* istanbul ignore next */
          (cov_2qq23xl0ws().s[17]++, _path.default.join(migrationsPath, file));
          const migrationSQL =
          /* istanbul ignore next */
          (cov_2qq23xl0ws().s[18]++, _fs.default.readFileSync(filePath, 'utf8'));
          // Check if migration was already applied
          const [existing] =
          /* istanbul ignore next */
          (cov_2qq23xl0ws().s[19]++, await _scriptconnection.db.execute((0, _drizzleorm.sql)`
            SELECT COUNT(*) as count FROM __drizzle_migrations 
            WHERE hash = ${file}
          `));
          /* istanbul ignore next */
          cov_2qq23xl0ws().s[20]++;
          if (Number(existing?.count) === 0) {
            /* istanbul ignore next */
            cov_2qq23xl0ws().b[4][0]++;
            cov_2qq23xl0ws().s[21]++;
            console.log(`  📋 Applying migration: ${file}`);
            // Split migration into individual statements
            const statements =
            /* istanbul ignore next */
            (cov_2qq23xl0ws().s[22]++, migrationSQL.split('--> statement-breakpoint').map(stmt => {
              /* istanbul ignore next */
              cov_2qq23xl0ws().f[4]++;
              cov_2qq23xl0ws().s[23]++;
              return stmt.trim();
            }).filter(stmt => {
              /* istanbul ignore next */
              cov_2qq23xl0ws().f[5]++;
              cov_2qq23xl0ws().s[24]++;
              return /* istanbul ignore next */(cov_2qq23xl0ws().b[5][0]++, stmt.length > 0) &&
              /* istanbul ignore next */
              (cov_2qq23xl0ws().b[5][1]++, !stmt.startsWith('--'));
            }));
            /* istanbul ignore next */
            cov_2qq23xl0ws().s[25]++;
            for (const statement of statements) {
              const cleanStatement =
              /* istanbul ignore next */
              (cov_2qq23xl0ws().s[26]++, statement.trim());
              /* istanbul ignore next */
              cov_2qq23xl0ws().s[27]++;
              if (
              /* istanbul ignore next */
              (cov_2qq23xl0ws().b[7][0]++, cleanStatement) &&
              /* istanbul ignore next */
              (cov_2qq23xl0ws().b[7][1]++, !cleanStatement.startsWith('--'))) {
                /* istanbul ignore next */
                cov_2qq23xl0ws().b[6][0]++;
                cov_2qq23xl0ws().s[28]++;
                await _scriptconnection.db.execute(_drizzleorm.sql.raw(cleanStatement));
              } else
              /* istanbul ignore next */
              {
                cov_2qq23xl0ws().b[6][1]++;
              }
            }
            // Record migration as applied
            /* istanbul ignore next */
            cov_2qq23xl0ws().s[29]++;
            await _scriptconnection.db.execute((0, _drizzleorm.sql)`
              INSERT INTO __drizzle_migrations (hash, created_at) 
              VALUES (${file}, ${Date.now()})
            `);
            /* istanbul ignore next */
            cov_2qq23xl0ws().s[30]++;
            console.log(`  ✅ Applied migration: ${file}`);
          } else {
            /* istanbul ignore next */
            cov_2qq23xl0ws().b[4][1]++;
            cov_2qq23xl0ws().s[31]++;
            console.log(`  ⏭️  Skipping already applied migration: ${file}`);
          }
        }
      } else
      /* istanbul ignore next */
      {
        cov_2qq23xl0ws().b[2][1]++;
      }
      cov_2qq23xl0ws().s[32]++;
      console.log('Migrations completed successfully');
    } catch (error) {
      /* istanbul ignore next */
      cov_2qq23xl0ws().s[33]++;
      console.error('Migration failed:', error);
      /* istanbul ignore next */
      cov_2qq23xl0ws().s[34]++;
      throw new Error('Failed to run migrations');
    }
  }
  // Apply RLS policies
  static async applyRLSPolicies() {
    /* istanbul ignore next */
    cov_2qq23xl0ws().f[6]++;
    cov_2qq23xl0ws().s[35]++;
    try {
      /* istanbul ignore next */
      cov_2qq23xl0ws().s[36]++;
      console.log('Applying Row-Level Security policies...');
      const rlsPath =
      /* istanbul ignore next */
      (cov_2qq23xl0ws().s[37]++, _path.default.join(process.cwd(), 'drizzle', 'rls-policies.sql'));
      /* istanbul ignore next */
      cov_2qq23xl0ws().s[38]++;
      if (_fs.default.existsSync(rlsPath)) {
        /* istanbul ignore next */
        cov_2qq23xl0ws().b[8][0]++;
        const rlsSQL =
        /* istanbul ignore next */
        (cov_2qq23xl0ws().s[39]++, _fs.default.readFileSync(rlsPath, 'utf8'));
        // Split by semicolon and filter out comments
        const statements =
        /* istanbul ignore next */
        (cov_2qq23xl0ws().s[40]++, rlsSQL.split(';').map(stmt => {
          /* istanbul ignore next */
          cov_2qq23xl0ws().f[7]++;
          cov_2qq23xl0ws().s[41]++;
          return stmt.trim();
        }).filter(stmt => {
          /* istanbul ignore next */
          cov_2qq23xl0ws().f[8]++;
          cov_2qq23xl0ws().s[42]++;
          return /* istanbul ignore next */(cov_2qq23xl0ws().b[9][0]++, stmt.length > 0) &&
          /* istanbul ignore next */
          (cov_2qq23xl0ws().b[9][1]++, !stmt.startsWith('--')) &&
          /* istanbul ignore next */
          (cov_2qq23xl0ws().b[9][2]++, !stmt.match(/^\/\*.*\*\/$/));
        }));
        /* istanbul ignore next */
        cov_2qq23xl0ws().s[43]++;
        for (const statement of statements) {
          const cleanStatement =
          /* istanbul ignore next */
          (cov_2qq23xl0ws().s[44]++, statement.trim());
          /* istanbul ignore next */
          cov_2qq23xl0ws().s[45]++;
          if (
          /* istanbul ignore next */
          (cov_2qq23xl0ws().b[11][0]++, cleanStatement) &&
          /* istanbul ignore next */
          (cov_2qq23xl0ws().b[11][1]++, !cleanStatement.startsWith('--'))) {
            /* istanbul ignore next */
            cov_2qq23xl0ws().b[10][0]++;
            cov_2qq23xl0ws().s[46]++;
            try {
              /* istanbul ignore next */
              cov_2qq23xl0ws().s[47]++;
              await _scriptconnection.db.execute(_drizzleorm.sql.raw(cleanStatement));
            } catch (error) {
              /* istanbul ignore next */
              cov_2qq23xl0ws().s[48]++;
              // Log but don't fail on policy conflicts (they might already exist)
              if (
              /* istanbul ignore next */
              (cov_2qq23xl0ws().b[13][0]++, error instanceof Error) &&
              /* istanbul ignore next */
              (cov_2qq23xl0ws().b[13][1]++, error.message.includes('already exists'))) {
                /* istanbul ignore next */
                cov_2qq23xl0ws().b[12][0]++;
                cov_2qq23xl0ws().s[49]++;
                console.log(`Policy already exists, skipping: ${cleanStatement.substring(0, 50)}...`);
              } else {
                /* istanbul ignore next */
                cov_2qq23xl0ws().b[12][1]++;
                cov_2qq23xl0ws().s[50]++;
                console.error(`Failed to execute statement: ${cleanStatement.substring(0, 50)}...`);
                /* istanbul ignore next */
                cov_2qq23xl0ws().s[51]++;
                throw error;
              }
            }
          } else
          /* istanbul ignore next */
          {
            cov_2qq23xl0ws().b[10][1]++;
          }
        }
        /* istanbul ignore next */
        cov_2qq23xl0ws().s[52]++;
        console.log('RLS policies applied successfully');
      } else {
        /* istanbul ignore next */
        cov_2qq23xl0ws().b[8][1]++;
        cov_2qq23xl0ws().s[53]++;
        console.warn('RLS policies file not found, skipping...');
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_2qq23xl0ws().s[54]++;
      console.error('Failed to apply RLS policies:', error);
      /* istanbul ignore next */
      cov_2qq23xl0ws().s[55]++;
      throw new Error('Failed to apply RLS policies');
    }
  }
  // Check migration status
  static async getMigrationStatus() {
    /* istanbul ignore next */
    cov_2qq23xl0ws().f[9]++;
    cov_2qq23xl0ws().s[56]++;
    try {
      // Get applied migrations
      const appliedResults =
      /* istanbul ignore next */
      (cov_2qq23xl0ws().s[57]++, await _scriptconnection.db.execute((0, _drizzleorm.sql)`
        SELECT hash FROM __drizzle_migrations ORDER BY created_at
      `));
      const appliedMigrations =
      /* istanbul ignore next */
      (cov_2qq23xl0ws().s[58]++, appliedResults.length);
      const appliedHashes =
      /* istanbul ignore next */
      (cov_2qq23xl0ws().s[59]++, new Set(appliedResults.map(r => {
        /* istanbul ignore next */
        cov_2qq23xl0ws().f[10]++;
        cov_2qq23xl0ws().s[60]++;
        return r.hash;
      })));
      // Get all migration files
      const migrationsPath =
      /* istanbul ignore next */
      (cov_2qq23xl0ws().s[61]++, _path.default.join(process.cwd(), 'drizzle'));
      const pendingMigrations =
      /* istanbul ignore next */
      (cov_2qq23xl0ws().s[62]++, []);
      /* istanbul ignore next */
      cov_2qq23xl0ws().s[63]++;
      if (_fs.default.existsSync(migrationsPath)) {
        /* istanbul ignore next */
        cov_2qq23xl0ws().b[14][0]++;
        const files =
        /* istanbul ignore next */
        (cov_2qq23xl0ws().s[64]++, _fs.default.readdirSync(migrationsPath));
        const sqlFiles =
        /* istanbul ignore next */
        (cov_2qq23xl0ws().s[65]++, files.filter(file => {
          /* istanbul ignore next */
          cov_2qq23xl0ws().f[11]++;
          cov_2qq23xl0ws().s[66]++;
          return /* istanbul ignore next */(cov_2qq23xl0ws().b[15][0]++, file.endsWith('.sql')) &&
          /* istanbul ignore next */
          (cov_2qq23xl0ws().b[15][1]++, !file.includes('rls-policies'));
        }).sort());
        // Find pending migrations
        /* istanbul ignore next */
        cov_2qq23xl0ws().s[67]++;
        for (const file of sqlFiles) {
          /* istanbul ignore next */
          cov_2qq23xl0ws().s[68]++;
          if (!appliedHashes.has(file)) {
            /* istanbul ignore next */
            cov_2qq23xl0ws().b[16][0]++;
            cov_2qq23xl0ws().s[69]++;
            pendingMigrations.push(file);
          } else
          /* istanbul ignore next */
          {
            cov_2qq23xl0ws().b[16][1]++;
          }
        }
      } else
      /* istanbul ignore next */
      {
        cov_2qq23xl0ws().b[14][1]++;
      }
      cov_2qq23xl0ws().s[70]++;
      return {
        appliedMigrations,
        pendingMigrations
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_2qq23xl0ws().s[71]++;
      console.error('Failed to get migration status:', error);
      /* istanbul ignore next */
      cov_2qq23xl0ws().s[72]++;
      throw new Error('Failed to get migration status');
    }
  }
  // Seed initial data (for development)
  static async seedInitialData() {
    /* istanbul ignore next */
    cov_2qq23xl0ws().f[12]++;
    cov_2qq23xl0ws().s[73]++;
    try {
      /* istanbul ignore next */
      cov_2qq23xl0ws().s[74]++;
      console.log('Seeding initial data...');
      // Check if we already have data
      const [userCount] =
      /* istanbul ignore next */
      (cov_2qq23xl0ws().s[75]++, await _scriptconnection.db.execute((0, _drizzleorm.sql)`SELECT COUNT(*) as count FROM users`));
      /* istanbul ignore next */
      cov_2qq23xl0ws().s[76]++;
      if (Number(userCount?.count) > 0) {
        /* istanbul ignore next */
        cov_2qq23xl0ws().b[17][0]++;
        cov_2qq23xl0ws().s[77]++;
        console.log('Database already has data, skipping seed');
        /* istanbul ignore next */
        cov_2qq23xl0ws().s[78]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_2qq23xl0ws().b[17][1]++;
      }
      // Add some common plant taxonomy data
      const commonPlants =
      /* istanbul ignore next */
      (cov_2qq23xl0ws().s[79]++, [{
        family: 'Araceae',
        genus: 'Monstera',
        species: 'deliciosa',
        commonName: 'Swiss Cheese Plant',
        careInstructions: 'Bright indirect light, water when top inch of soil is dry',
        isVerified: true
      }, {
        family: 'Araceae',
        genus: 'Pothos',
        species: 'aureus',
        commonName: 'Golden Pothos',
        careInstructions: 'Low to bright indirect light, water when soil is dry',
        isVerified: true
      }, {
        family: 'Asparagaceae',
        genus: 'Sansevieria',
        species: 'trifasciata',
        commonName: 'Snake Plant',
        careInstructions: 'Low light tolerant, water sparingly',
        isVerified: true
      }, {
        family: 'Araceae',
        genus: 'Philodendron',
        species: 'hederaceum',
        commonName: 'Heartleaf Philodendron',
        careInstructions: 'Bright indirect light, keep soil lightly moist',
        isVerified: true
      }]);
      /* istanbul ignore next */
      cov_2qq23xl0ws().s[80]++;
      for (const plant of commonPlants) {
        /* istanbul ignore next */
        cov_2qq23xl0ws().s[81]++;
        await _scriptconnection.db.execute((0, _drizzleorm.sql)`
          INSERT INTO plants (family, genus, species, cultivar, common_name, care_instructions, is_verified)
          VALUES (${plant.family}, ${plant.genus}, ${plant.species}, NULL, ${plant.commonName}, ${plant.careInstructions}, ${plant.isVerified})
          ON CONFLICT (family, genus, species, cultivar) DO NOTHING
        `);
      }
      /* istanbul ignore next */
      cov_2qq23xl0ws().s[82]++;
      console.log('Initial data seeded successfully');
    } catch (error) {
      /* istanbul ignore next */
      cov_2qq23xl0ws().s[83]++;
      console.error('Failed to seed initial data:', error);
      /* istanbul ignore next */
      cov_2qq23xl0ws().s[84]++;
      throw new Error('Failed to seed initial data');
    }
  }
  // Database health check
  static async healthCheck() {
    /* istanbul ignore next */
    cov_2qq23xl0ws().f[13]++;
    cov_2qq23xl0ws().s[85]++;
    try {
      // Check connection
      const connected =
      /* istanbul ignore next */
      (cov_2qq23xl0ws().s[86]++, await _scriptconnection.db.execute((0, _drizzleorm.sql)`SELECT 1`).then(() => {
        /* istanbul ignore next */
        cov_2qq23xl0ws().f[14]++;
        cov_2qq23xl0ws().s[87]++;
        return true;
      }).catch(() => {
        /* istanbul ignore next */
        cov_2qq23xl0ws().f[15]++;
        cov_2qq23xl0ws().s[88]++;
        return false;
      }));
      // Check if migrations table exists
      const [migrationTable] =
      /* istanbul ignore next */
      (cov_2qq23xl0ws().s[89]++, await _scriptconnection.db.execute((0, _drizzleorm.sql)`
        SELECT EXISTS (
          SELECT FROM information_schema.tables 
          WHERE table_name = '__drizzle_migrations'
        ) as exists
      `));
      const migrationsApplied =
      /* istanbul ignore next */
      (cov_2qq23xl0ws().s[90]++,
      /* istanbul ignore next */
      (cov_2qq23xl0ws().b[18][0]++, Boolean(migrationTable?.exists)) ||
      /* istanbul ignore next */
      (cov_2qq23xl0ws().b[18][1]++, false));
      // Check if main tables exist (including email verification)
      const [tablesCheck] =
      /* istanbul ignore next */
      (cov_2qq23xl0ws().s[91]++, await _scriptconnection.db.execute((0, _drizzleorm.sql)`
        SELECT 
          (SELECT COUNT(*) FROM information_schema.tables WHERE table_name IN ('users', 'plants', 'plant_instances', 'propagations', 'sessions', 'email_verification_codes')) as table_count
      `));
      const tablesExist =
      /* istanbul ignore next */
      (cov_2qq23xl0ws().s[92]++, Number(tablesCheck?.table_count) === 6);
      // Check if RLS is enabled on user tables
      const [rlsCheck] =
      /* istanbul ignore next */
      (cov_2qq23xl0ws().s[93]++, await _scriptconnection.db.execute((0, _drizzleorm.sql)`
        SELECT COUNT(*) as rls_count
        FROM pg_class c
        JOIN pg_namespace n ON n.oid = c.relnamespace
        WHERE c.relrowsecurity = true 
        AND n.nspname = 'public'
        AND c.relname IN ('plant_instances', 'propagations', 'sessions', 'care_history', 'care_guides', 'email_verification_codes')
      `));
      const rlsEnabled =
      /* istanbul ignore next */
      (cov_2qq23xl0ws().s[94]++, Number(rlsCheck?.rls_count) === 6);
      /* istanbul ignore next */
      cov_2qq23xl0ws().s[95]++;
      return {
        connected,
        migrationsApplied,
        rlsEnabled,
        tablesExist
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_2qq23xl0ws().s[96]++;
      console.error('Health check failed:', error);
      /* istanbul ignore next */
      cov_2qq23xl0ws().s[97]++;
      return {
        connected: false,
        migrationsApplied: false,
        rlsEnabled: false,
        tablesExist: false
      };
    }
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,