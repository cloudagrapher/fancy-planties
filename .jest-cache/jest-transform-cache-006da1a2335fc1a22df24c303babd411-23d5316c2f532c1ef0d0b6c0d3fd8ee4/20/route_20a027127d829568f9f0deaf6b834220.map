{"version":3,"names":["POST","request","cov_1fc4pd2a28","f","s","_middleware","withRateLimit","req","body","json","validation","_validation","validateInput","signUpSchema","success","b","_server","NextResponse","error","errors","status","email","password","name","data","user","_auth","signUpUnverified","verificationCode","_emailverificationcodeservice","emailVerificationCodeService","generateCode","id","emailService","_resendemailservice","createEmailService","_emailservice","sendEmailWithRetry","console","log","message","requiresVerification","isEmailVerified","emailError","EmailServiceError","errorMessage","code","Error"],"sources":["/Users/stefanbekker/projects/fancy-planties/src/app/api/auth/signup/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { signUpUnverified } from '@/lib/auth';\nimport { signUpSchema, validateInput } from '@/lib/auth/validation';\nimport { withRateLimit } from '@/lib/auth/middleware';\nimport { emailVerificationCodeService } from '@/lib/services/email-verification-code-service';\nimport { sendEmailWithRetry, EmailServiceError } from '@/lib/services/email-service';\nimport { createEmailService } from '@/lib/services/resend-email-service';\n\nexport async function POST(request: NextRequest) {\n  return withRateLimit(request, async (req) => {\n    try {\n      const body = await req.json();\n      \n      // Validate input\n      const validation = validateInput(signUpSchema, body);\n      if (!validation.success) {\n        return NextResponse.json(\n          { error: 'Validation failed', errors: validation.errors },\n          { status: 400 }\n        );\n      }\n      \n      const { email, password, name } = validation.data;\n      \n      // Create unverified user\n      const user = await signUpUnverified(email, password, name);\n      \n      // Generate verification code\n      const verificationCode = await emailVerificationCodeService.generateCode(user.id);\n      \n      // Send verification email\n      try {\n        const emailService = createEmailService();\n        await sendEmailWithRetry(emailService, email, verificationCode, name);\n        \n        console.log(`Verification email sent to ${email} for user ${user.id}`);\n        \n        return NextResponse.json({\n          success: true,\n          message: 'Account created successfully. Please check your email for a verification code.',\n          requiresVerification: true,\n          user: {\n            id: user.id,\n            email: user.email,\n            name: user.name,\n            isEmailVerified: user.isEmailVerified,\n          },\n        });\n        \n      } catch (emailError) {\n        console.error('Failed to send verification email:', emailError);\n        \n        // If email sending fails, we still created the user, so let them know they can resend\n        if (emailError instanceof EmailServiceError) {\n          let errorMessage = 'Failed to send verification email. ';\n          \n          switch (emailError.code) {\n            case 'QUOTA_EXCEEDED':\n              errorMessage += 'Email service quota exceeded. Please try again later.';\n              break;\n            case 'INVALID_EMAIL':\n              errorMessage += 'Invalid email address provided.';\n              break;\n            case 'API_ERROR':\n              errorMessage += 'Email service error. Please try resending the verification code.';\n              break;\n            case 'NETWORK_ERROR':\n              errorMessage += 'Network error. Please check your connection and try resending.';\n              break;\n            default:\n              errorMessage += 'Please try resending the verification code.';\n          }\n          \n          return NextResponse.json({\n            success: true,\n            message: 'Account created successfully.',\n            requiresVerification: true,\n            emailError: errorMessage,\n            user: {\n              id: user.id,\n              email: user.email,\n              name: user.name,\n              isEmailVerified: user.isEmailVerified,\n            },\n          });\n        }\n        \n        // For unknown email errors, still return success but mention the issue\n        return NextResponse.json({\n          success: true,\n          message: 'Account created successfully.',\n          requiresVerification: true,\n          emailError: 'Failed to send verification email. Please try resending the verification code.',\n          user: {\n            id: user.id,\n            email: user.email,\n            name: user.name,\n            isEmailVerified: user.isEmailVerified,\n          },\n        });\n      }\n      \n    } catch (error) {\n      console.error('Sign up error:', error);\n      \n      if (error instanceof Error && error.message === 'User already exists') {\n        return NextResponse.json(\n          { error: 'An account with this email already exists' },\n          { status: 409 }\n        );\n      }\n      \n      return NextResponse.json(\n        { error: 'Internal server error' },\n        { status: 500 }\n      );\n    }\n  });\n}"],"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","ignoreList":[]}