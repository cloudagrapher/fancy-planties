{"version":3,"sources":["/Users/stefanbekker/projects/fancy-planties/src/components/auth/SignInForm.tsx"],"sourcesContent":["'use client';\n\nimport { useState } from 'react';\nimport { useRouter, useSearchParams } from 'next/navigation';\nimport { signInSchema, type SignInInput } from '@/lib/auth/validation';\n\nexport default function SignInForm() {\n  const router = useRouter();\n  const searchParams = useSearchParams();\n  const redirectTo = searchParams.get('redirect') || '/dashboard';\n  \n  const [formData, setFormData] = useState<SignInInput>({\n    email: '',\n    password: '',\n  });\n  \n  const [errors, setErrors] = useState<Record<string, string>>({});\n  const [isLoading, setIsLoading] = useState(false);\n  const [generalError, setGeneralError] = useState('');\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n    setErrors({});\n    setGeneralError('');\n\n    try {\n      // Validate form data\n      const validation = signInSchema.safeParse(formData);\n      if (!validation.success) {\n        const fieldErrors: Record<string, string> = {};\n        validation.error.issues.forEach((issue) => {\n          const field = issue.path.join('.');\n          fieldErrors[field] = issue.message;\n        });\n        setErrors(fieldErrors);\n        return;\n      }\n\n      // Submit to API\n      const response = await fetch('/api/auth/signin', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(validation.data),\n      });\n\n      const result = await response.json();\n\n      if (!response.ok) {\n        if (result.errors) {\n          setErrors(result.errors);\n        } else {\n          setGeneralError(result.error || 'Sign in failed');\n        }\n        return;\n      }\n\n      // Success - check if email verification is required\n      if (result.requiresVerification) {\n        // Redirect to email verification page\n        router.push('/auth/verify-email');\n        router.refresh();\n      } else {\n        // Success - redirect to dashboard or intended page\n        router.push(redirectTo);\n        router.refresh();\n      }\n      \n    } catch (error) {\n      console.error('Sign in error:', error);\n      setGeneralError('An unexpected error occurred. Please try again.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({ ...prev, [name]: value }));\n    \n    // Clear error when user starts typing\n    if (errors[name]) {\n      setErrors(prev => ({ ...prev, [name]: '' }));\n    }\n  };\n\n  return (\n    <div className={`${isLoading ? 'form--loading' : ''}`}>\n      <form onSubmit={handleSubmit} className=\"space-y-6\" autoComplete=\"on\" noValidate>\n        {generalError && (\n          <div className=\"form-validation-summary\">\n            <div className=\"form-validation-summary-title\">\n              Sign In Failed\n            </div>\n            <ul className=\"form-validation-summary-list\">\n              <li className=\"form-validation-summary-item\">{generalError}</li>\n            </ul>\n          </div>\n        )}\n\n        <div className=\"form-group\">\n          <label htmlFor=\"signin-email\" className=\"form-label form-label--required\">\n            Email Address\n          </label>\n          <input\n            id=\"signin-email\"\n            name=\"email\"\n            type=\"email\"\n            autoComplete=\"email\"\n            required\n            value={formData.email}\n            onChange={handleChange}\n            className={`form-input ${errors.email ? 'form-input--error' : ''}`}\n            placeholder=\"Enter your email address\"\n            aria-describedby={errors.email ? 'signin-email-error' : undefined}\n          />\n          {errors.email && (\n            <div id=\"signin-email-error\" className=\"form-error\" role=\"alert\">\n              {errors.email}\n            </div>\n          )}\n        </div>\n\n        <div className=\"form-group\">\n          <label htmlFor=\"signin-password\" className=\"form-label form-label--required\">\n            Password\n          </label>\n          <input\n            id=\"signin-password\"\n            name=\"password\"\n            type=\"password\"\n            autoComplete=\"current-password\"\n            required\n            value={formData.password}\n            onChange={handleChange}\n            className={`form-input ${errors.password ? 'form-input--error' : ''}`}\n            placeholder=\"Enter your password\"\n            aria-describedby={errors.password ? 'signin-password-error' : undefined}\n          />\n          {errors.password && (\n            <div id=\"signin-password-error\" className=\"form-error\" role=\"alert\">\n              {errors.password}\n            </div>\n          )}\n        </div>\n\n        <div className=\"form-actions form-actions--full\">\n          <button\n            type=\"submit\"\n            disabled={isLoading}\n            className={`btn btn--primary btn--full ${isLoading ? 'btn--loading' : ''}`}\n            aria-describedby={isLoading ? 'signin-loading' : undefined}\n          >\n            {isLoading ? 'Signing in...' : 'Sign In'}\n          </button>\n          {isLoading && (\n            <span id=\"signin-loading\" className=\"sr-only\">\n              Please wait while we sign you in\n            </span>\n          )}\n        </div>\n      </form>\n    </div>\n  );\n}"],"names":["SignInForm","router","useRouter","searchParams","useSearchParams","redirectTo","get","formData","setFormData","useState","email","password","errors","setErrors","isLoading","setIsLoading","generalError","setGeneralError","handleSubmit","e","preventDefault","validation","signInSchema","safeParse","success","fieldErrors","error","issues","forEach","issue","field","path","join","message","response","fetch","method","headers","body","JSON","stringify","data","result","json","ok","requiresVerification","push","refresh","console","handleChange","name","value","target","prev","div","className","form","onSubmit","autoComplete","noValidate","ul","li","label","htmlFor","input","id","type","required","onChange","placeholder","aria-describedby","undefined","role","button","disabled","span"],"mappings":"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"}