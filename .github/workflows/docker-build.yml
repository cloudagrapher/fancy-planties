name: Docker Build & Test

on:
  push:
    branches: [ main ]  # Only push images from main branch
  pull_request:
    branches: [ main ]  # Build-only for PR validation
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  check-skip:
    runs-on: ubuntu-latest
    outputs:
      skip: ${{ steps.check.outputs.skip }}
    steps:
    - name: Check if build should be skipped
      id: check
      env:
        PR_TITLE: ${{ github.event.pull_request.title }}
        COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
      run: |
        # Get the commit message (handle both push and PR events)
        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          COMMIT_MSG="$PR_TITLE"
        else
          COMMIT_MSG="$COMMIT_MESSAGE"
        fi

        # Handle empty commit message
        if [[ -z "$COMMIT_MSG" ]]; then
          COMMIT_MSG="No commit message"
        fi

        # Get first line only to avoid issues with multiline messages
        COMMIT_MSG_FIRST_LINE=$(echo "$COMMIT_MSG" | head -n 1)

        echo "Checking commit message: $COMMIT_MSG_FIRST_LINE"
        
        # Check if commit message starts with skip keywords (case insensitive)
        if [[ "$COMMIT_MSG" =~ ^(\[skip ci\]|\[ci skip\]|\[skip build\]|\[build skip\]|\[docs\]|\[readme\]|\[Skip CI\]|\[CI Skip\]|\[Skip Build\]|\[Build Skip\]|\[Docs\]|\[README\]) ]]; then
          echo "skip=true" >> $GITHUB_OUTPUT
          echo "🚫 Build skipped due to commit message: $COMMIT_MSG"
        else
          echo "skip=false" >> $GITHUB_OUTPUT
          echo "✅ Build will proceed for commit: $COMMIT_MSG"
        fi

  build-and-push:
    runs-on: ubuntu-latest
    needs: check-skip
    if: needs.check-skip.outputs.skip != 'true'
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    # Cache Node.js dependencies
    - name: Cache Node modules
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=raw,value=latest,enable={{is_default_branch}}
          type=sha,prefix=main-

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        # Single platform for speed (add arm64 later if needed)
        platforms: linux/amd64
        # Only push on main branch, otherwise just build for validation
        push: ${{ github.event_name != 'pull_request' && github.ref == 'refs/heads/main' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        # Multi-layer caching for maximum performance
        cache-from: |
          type=gha
          type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
          type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        cache-to: |
          type=gha,mode=max
        target: runner
        build-args: |
          BUILDKIT_INLINE_CACHE=1
          NODE_ENV=production
          NEXT_PUBLIC_AWS_API_ENDPOINT=${{ secrets.AWS_API_ENDPOINT }}
          NEXT_PUBLIC_CLOUDFRONT_DOMAIN=${{ secrets.CLOUDFRONT_DOMAIN }}

    - name: Generate deployment summary
      run: |
        echo "## ⚡ Fast Build Complete!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Docker Image Built and Pushed Successfully!**" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📦 Image Details" >> $GITHUB_STEP_SUMMARY
        echo "- **Registry:** \`${{ env.REGISTRY }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Repository:** \`${{ env.IMAGE_NAME }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Tags:** \`${{ steps.meta.outputs.tags }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🚀 Quick Deploy" >> $GITHUB_STEP_SUMMARY
        echo "Use the deployment script:" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
        echo "./deploy.sh" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ⚡ Performance Optimizations" >> $GITHUB_STEP_SUMMARY
        echo "- Single platform build (amd64 only)" >> $GITHUB_STEP_SUMMARY
        echo "- Multi-layer Docker caching" >> $GITHUB_STEP_SUMMARY  
        echo "- Node.js dependency caching" >> $GITHUB_STEP_SUMMARY
        echo "- Build optimizations enabled" >> $GITHUB_STEP_SUMMARY

  skip-notification:
    runs-on: ubuntu-latest
    needs: check-skip
    if: needs.check-skip.outputs.skip == 'true'
    steps:
    - name: Generate skip summary
      run: |
        echo "## 🚫 Build Skipped" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Build was skipped due to commit message.**" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📝 Commit Message" >> $GITHUB_STEP_SUMMARY
        echo "\`${{ github.event.head_commit.message }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🏷️ Skip Keywords" >> $GITHUB_STEP_SUMMARY
        echo "Builds are skipped when commit messages start with:" >> $GITHUB_STEP_SUMMARY
        echo "- \`[skip ci]\` or \`[ci skip]\`" >> $GITHUB_STEP_SUMMARY
        echo "- \`[skip build]\` or \`[build skip]\`" >> $GITHUB_STEP_SUMMARY
        echo "- \`[docs]\` - for documentation changes" >> $GITHUB_STEP_SUMMARY
        echo "- \`[readme]\` - for README updates" >> $GITHUB_STEP_SUMMARY