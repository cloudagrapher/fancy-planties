{"version":3,"names":["logger","cov_bqsm7vxpu","f","s","setupErrorHandling","Logger","constructor","logLevel","b","process","env","LOG_LEVEL","shouldLog","level","levels","debug","info","warn","error","formatLog","entry","message","timestamp","context","userId","requestId","logData","toUpperCase","name","stack","JSON","stringify","log","Date","toISOString","formattedLog","NODE_ENV","sendToExternalLogger","console","authEvent","event","databaseEvent","apiRequest","method","path","duration","securityEvent","window","on","exit","reason","promise","Error","String","toString"],"sources":["/Users/stefanbekker/projects/fancy-planties/src/lib/utils/logger.ts"],"sourcesContent":["import 'server-only';\n\nexport type LogLevel = 'debug' | 'info' | 'warn' | 'error';\n\ninterface LogEntry {\n  level: LogLevel;\n  message: string;\n  timestamp: string;\n  context?: Record<string, any>;\n  error?: Error;\n  userId?: number;\n  requestId?: string;\n}\n\nclass Logger {\n  private logLevel: LogLevel;\n\n  constructor() {\n    this.logLevel = (process.env.LOG_LEVEL as LogLevel) || 'info';\n  }\n\n  private shouldLog(level: LogLevel): boolean {\n    const levels: Record<LogLevel, number> = {\n      debug: 0,\n      info: 1,\n      warn: 2,\n      error: 3,\n    };\n    return levels[level] >= levels[this.logLevel];\n  }\n\n  private formatLog(entry: LogEntry): string {\n    const { level, message, timestamp, context, error, userId, requestId } = entry;\n    \n    const logData = {\n      level: level.toUpperCase(),\n      timestamp,\n      message,\n      ...(userId && { userId }),\n      ...(requestId && { requestId }),\n      ...(context && { context }),\n      ...(error && { \n        error: {\n          name: error.name,\n          message: error.message,\n          stack: error.stack,\n        }\n      }),\n    };\n\n    return JSON.stringify(logData);\n  }\n\n  private log(level: LogLevel, message: string, context?: Record<string, any>, error?: Error): void {\n    if (!this.shouldLog(level)) return;\n\n    const entry: LogEntry = {\n      level,\n      message,\n      timestamp: new Date().toISOString(),\n      context,\n      error,\n    };\n\n    const formattedLog = this.formatLog(entry);\n\n    // In production, you might want to send logs to external service\n    if (process.env.NODE_ENV === 'production') {\n      // Send to external logging service (e.g., DataDog, LogRocket, etc.)\n      this.sendToExternalLogger(entry);\n    }\n\n    // Console output for development and as fallback\n    switch (level) {\n      case 'debug':\n        console.debug(formattedLog);\n        break;\n      case 'info':\n        console.info(formattedLog);\n        break;\n      case 'warn':\n        console.warn(formattedLog);\n        break;\n      case 'error':\n        console.error(formattedLog);\n        break;\n    }\n  }\n\n  private async sendToExternalLogger(entry: LogEntry): Promise<void> {\n    // Implement external logging service integration here\n    // Example: Send to DataDog, LogRocket, Sentry, etc.\n    try {\n      // await externalLoggingService.send(entry);\n    } catch (error) {\n      // Fallback to console if external service fails\n      console.error('Failed to send log to external service:', error);\n      console.error('Original log entry:', this.formatLog(entry));\n    }\n  }\n\n  debug(message: string, context?: Record<string, any>): void {\n    this.log('debug', message, context);\n  }\n\n  info(message: string, context?: Record<string, any>): void {\n    this.log('info', message, context);\n  }\n\n  warn(message: string, context?: Record<string, any>): void {\n    this.log('warn', message, context);\n  }\n\n  error(message: string, error?: Error, context?: Record<string, any>): void {\n    this.log('error', message, context, error);\n  }\n\n  // Specific logging methods for common scenarios\n  authEvent(event: string, userId?: number, context?: Record<string, any>): void {\n    this.info(`Auth: ${event}`, { ...context, userId });\n  }\n\n  databaseEvent(event: string, context?: Record<string, any>): void {\n    this.debug(`Database: ${event}`, context);\n  }\n\n  apiRequest(method: string, path: string, userId?: number, duration?: number): void {\n    this.info(`API: ${method} ${path}`, { userId, duration });\n  }\n\n  securityEvent(event: string, context?: Record<string, any>): void {\n    this.warn(`Security: ${event}`, context);\n  }\n}\n\nexport const logger = new Logger();\n\n// Error boundary for catching unhandled errors\nexport function setupErrorHandling(): void {\n  if (typeof window === 'undefined') {\n    // Server-side error handling\n    process.on('uncaughtException', (error) => {\n      logger.error('Uncaught Exception', error);\n      process.exit(1);\n    });\n\n    process.on('unhandledRejection', (reason, promise) => {\n      logger.error('Unhandled Rejection', reason instanceof Error ? reason : new Error(String(reason)), {\n        promise: promise.toString(),\n      });\n    });\n  }\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}