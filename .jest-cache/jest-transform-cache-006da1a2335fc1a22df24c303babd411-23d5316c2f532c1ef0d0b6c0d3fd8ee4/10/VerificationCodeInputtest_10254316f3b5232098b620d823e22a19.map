{"version":3,"sources":["/Users/stefanbekker/projects/fancy-planties/src/components/auth/__tests__/VerificationCodeInput.test.tsx"],"sourcesContent":["import { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport VerificationCodeInput from '../VerificationCodeInput';\n\ndescribe('VerificationCodeInput', () => {\n  const mockOnChange = jest.fn();\n\n  beforeEach(() => {\n    mockOnChange.mockClear();\n  });\n\n  it('renders 6 input fields by default', () => {\n    render(<VerificationCodeInput value=\"\" onChange={mockOnChange} />);\n    \n    const inputs = screen.getAllByRole('textbox');\n    expect(inputs).toHaveLength(6);\n  });\n\n  it('renders custom number of input fields', () => {\n    render(<VerificationCodeInput value=\"\" onChange={mockOnChange} length={4} />);\n    \n    const inputs = screen.getAllByRole('textbox');\n    expect(inputs).toHaveLength(4);\n  });\n\n  it('displays the current value correctly', () => {\n    render(<VerificationCodeInput value=\"123\" onChange={mockOnChange} />);\n    \n    const inputs = screen.getAllByRole('textbox') as HTMLInputElement[];\n    expect(inputs[0].value).toBe('1');\n    expect(inputs[1].value).toBe('2');\n    expect(inputs[2].value).toBe('3');\n    expect(inputs[3].value).toBe('');\n  });\n\n  it('calls onChange when typing a digit', async () => {\n    const user = userEvent.setup();\n    render(<VerificationCodeInput value=\"\" onChange={mockOnChange} />);\n    \n    const firstInput = screen.getAllByRole('textbox')[0];\n    await user.type(firstInput, '5');\n    \n    expect(mockOnChange).toHaveBeenCalledWith('5');\n  });\n\n  it('moves focus to next input after entering a digit', async () => {\n    const user = userEvent.setup();\n    render(<VerificationCodeInput value=\"\" onChange={mockOnChange} />);\n    \n    const inputs = screen.getAllByRole('textbox');\n    await user.type(inputs[0], '1');\n    \n    await waitFor(() => {\n      expect(inputs[1]).toHaveFocus();\n    });\n  });\n\n  it('only allows numeric input', async () => {\n    const user = userEvent.setup();\n    render(<VerificationCodeInput value=\"\" onChange={mockOnChange} />);\n    \n    const firstInput = screen.getAllByRole('textbox')[0];\n    await user.type(firstInput, 'a');\n    \n    expect(mockOnChange).not.toHaveBeenCalled();\n  });\n\n  it('handles backspace correctly', async () => {\n    const user = userEvent.setup();\n    render(<VerificationCodeInput value=\"123\" onChange={mockOnChange} />);\n    \n    const thirdInput = screen.getAllByRole('textbox')[2];\n    thirdInput.focus();\n    \n    await user.keyboard('{Backspace}');\n    \n    expect(mockOnChange).toHaveBeenCalledWith('12');\n  });\n\n  it('moves to previous input on backspace when current is empty', async () => {\n    const user = userEvent.setup();\n    render(<VerificationCodeInput value=\"12\" onChange={mockOnChange} />);\n    \n    const thirdInput = screen.getAllByRole('textbox')[2];\n    thirdInput.focus();\n    \n    await user.keyboard('{Backspace}');\n    \n    const secondInput = screen.getAllByRole('textbox')[1];\n    await waitFor(() => {\n      expect(secondInput).toHaveFocus();\n    });\n    expect(mockOnChange).toHaveBeenCalledWith('1');\n  });\n\n  it('handles arrow key navigation', async () => {\n    const user = userEvent.setup();\n    render(<VerificationCodeInput value=\"123\" onChange={mockOnChange} />);\n    \n    const secondInput = screen.getAllByRole('textbox')[1];\n    secondInput.focus();\n    \n    await user.keyboard('{ArrowRight}');\n    \n    const thirdInput = screen.getAllByRole('textbox')[2];\n    await waitFor(() => {\n      expect(thirdInput).toHaveFocus();\n    });\n    \n    await user.keyboard('{ArrowLeft}');\n    \n    await waitFor(() => {\n      expect(secondInput).toHaveFocus();\n    });\n  });\n\n  it('handles paste functionality', async () => {\n    render(<VerificationCodeInput value=\"\" onChange={mockOnChange} />);\n    \n    const firstInput = screen.getAllByRole('textbox')[0];\n    firstInput.focus();\n    \n    // Simulate paste event\n    const pasteEvent = new Event('paste', { bubbles: true });\n    Object.defineProperty(pasteEvent, 'clipboardData', {\n      value: {\n        getData: () => '123456'\n      }\n    });\n    \n    fireEvent(firstInput, pasteEvent);\n    \n    expect(mockOnChange).toHaveBeenCalledWith('123456');\n  });\n\n  it('filters non-numeric characters from paste', async () => {\n    render(<VerificationCodeInput value=\"\" onChange={mockOnChange} />);\n    \n    const firstInput = screen.getAllByRole('textbox')[0];\n    firstInput.focus();\n    \n    const pasteEvent = new Event('paste', { bubbles: true });\n    Object.defineProperty(pasteEvent, 'clipboardData', {\n      value: {\n        getData: () => 'a1b2c3d4e5f6'\n      }\n    });\n    \n    fireEvent(firstInput, pasteEvent);\n    \n    expect(mockOnChange).toHaveBeenCalledWith('123456');\n  });\n\n  it('limits paste to input length', async () => {\n    render(<VerificationCodeInput value=\"\" onChange={mockOnChange} length={4} />);\n    \n    const firstInput = screen.getAllByRole('textbox')[0];\n    firstInput.focus();\n    \n    const pasteEvent = new Event('paste', { bubbles: true });\n    Object.defineProperty(pasteEvent, 'clipboardData', {\n      value: {\n        getData: () => '123456789'\n      }\n    });\n    \n    fireEvent(firstInput, pasteEvent);\n    \n    expect(mockOnChange).toHaveBeenCalledWith('1234');\n  });\n\n  it('shows error state correctly', () => {\n    render(\n      <VerificationCodeInput \n        value=\"123\" \n        onChange={mockOnChange} \n        error=\"Invalid code\" \n      />\n    );\n    \n    const errorMessage = screen.getByRole('alert');\n    expect(errorMessage).toHaveTextContent('Invalid code');\n    \n    const inputs = screen.getAllByRole('textbox');\n    inputs.forEach(input => {\n      expect(input).toHaveClass('border-red-300');\n    });\n  });\n\n  it('disables inputs when disabled prop is true', () => {\n    render(<VerificationCodeInput value=\"123\" onChange={mockOnChange} disabled />);\n    \n    const inputs = screen.getAllByRole('textbox');\n    inputs.forEach(input => {\n      expect(input).toBeDisabled();\n      expect(input).toHaveClass('opacity-50', 'cursor-not-allowed');\n    });\n  });\n\n  it('does not call onChange when disabled', async () => {\n    const user = userEvent.setup();\n    render(<VerificationCodeInput value=\"\" onChange={mockOnChange} disabled />);\n    \n    const firstInput = screen.getAllByRole('textbox')[0];\n    await user.type(firstInput, '1');\n    \n    expect(mockOnChange).not.toHaveBeenCalled();\n  });\n\n  it('focuses first empty input on click', async () => {\n    const user = userEvent.setup();\n    render(<VerificationCodeInput value=\"12\" onChange={mockOnChange} />);\n    \n    const fifthInput = screen.getAllByRole('textbox')[4];\n    await user.click(fifthInput);\n    \n    const thirdInput = screen.getAllByRole('textbox')[2];\n    await waitFor(() => {\n      expect(thirdInput).toHaveFocus();\n    });\n  });\n\n  it('has proper accessibility attributes', () => {\n    render(\n      <VerificationCodeInput \n        value=\"123\" \n        onChange={mockOnChange} \n        error=\"Invalid code\" \n      />\n    );\n    \n    const inputs = screen.getAllByRole('textbox');\n    inputs.forEach((input, index) => {\n      expect(input).toHaveAttribute('aria-label', `Verification code digit ${index + 1}`);\n      expect(input).toHaveAttribute('aria-describedby', 'verification-code-error');\n      expect(input).toHaveAttribute('inputMode', 'numeric');\n      expect(input).toHaveAttribute('pattern', '[0-9]*');\n    });\n  });\n});"],"names":["describe","mockOnChange","jest","fn","beforeEach","mockClear","it","render","VerificationCodeInput","value","onChange","inputs","screen","getAllByRole","expect","toHaveLength","length","toBe","user","userEvent","setup","firstInput","type","toHaveBeenCalledWith","waitFor","toHaveFocus","not","toHaveBeenCalled","thirdInput","focus","keyboard","secondInput","pasteEvent","Event","bubbles","Object","defineProperty","getData","fireEvent","error","errorMessage","getByRole","toHaveTextContent","forEach","input","toHaveClass","disabled","toBeDisabled","fifthInput","click","index","toHaveAttribute"],"mappings":"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"}