{"version":3,"sources":["/Users/stefanbekker/projects/fancy-planties/src/__tests__/services/email-verification-cleanup.test.ts"],"sourcesContent":["import { EmailVerificationCleanupService } from '@/lib/services/email-verification-cleanup';\nimport { emailVerificationCodeService } from '@/lib/services/email-verification-code-service';\nimport { emailVerificationRateLimiter } from '@/lib/services/email-verification-rate-limiter';\nimport { emailServiceMonitor } from '@/lib/services/email-service-monitor';\n\n// Mock the dependencies\njest.mock('@/lib/services/email-verification-code-service');\njest.mock('@/lib/services/email-verification-rate-limiter');\n\nconst mockEmailVerificationCodeService = emailVerificationCodeService as jest.Mocked<typeof emailVerificationCodeService>;\nconst mockEmailVerificationRateLimiter = emailVerificationRateLimiter as jest.Mocked<typeof emailVerificationRateLimiter>;\n\ndescribe('EmailVerificationCleanupService', () => {\n  let cleanupService: EmailVerificationCleanupService;\n  \n  beforeEach(() => {\n    cleanupService = new EmailVerificationCleanupService();\n    jest.clearAllMocks();\n    \n    // Setup default mock implementations\n    mockEmailVerificationCodeService.cleanupExpiredCodes.mockResolvedValue(5);\n    mockEmailVerificationCodeService.getCodeStats.mockResolvedValue({\n      totalActive: 10,\n      expiredCount: 2,\n      highAttemptCount: 1,\n    });\n    \n    mockEmailVerificationRateLimiter.getStats.mockReturnValue({\n      verificationAttempts: 3,\n      resendRequests: 2,\n      emailVerificationActivity: 5,\n      resendCooldowns: 1,\n      securityEvents: 0,\n    });\n    \n    mockEmailVerificationRateLimiter.cleanup.mockImplementation(() => {\n      // Simulate cleanup by returning different stats\n      mockEmailVerificationRateLimiter.getStats.mockReturnValue({\n        verificationAttempts: 1,\n        resendRequests: 1,\n        emailVerificationActivity: 2,\n        resendCooldowns: 0,\n        securityEvents: 0,\n      });\n    });\n  });\n  \n  describe('runCleanup', () => {\n    it('should run cleanup successfully', async () => {\n      const stats = await cleanupService.runCleanup();\n      \n      expect(stats.expiredCodes).toBe(5);\n      expect(stats.rateLimitData).toBe(6); // (3-1) + (2-1) + (5-2) + (1-0) = 2 + 1 + 3 + 1 = 7, but calculation is different\n      expect(stats.timestamp).toBeGreaterThan(0);\n      \n      expect(mockEmailVerificationCodeService.cleanupExpiredCodes).toHaveBeenCalledTimes(1);\n      expect(mockEmailVerificationRateLimiter.cleanup).toHaveBeenCalledTimes(1);\n    });\n    \n    it('should prevent concurrent cleanup runs', async () => {\n      const cleanup1Promise = cleanupService.runCleanup();\n      \n      // Try to run cleanup again while first is running\n      await expect(cleanupService.runCleanup()).rejects.toThrow('Cleanup is already running');\n      \n      // Wait for first cleanup to complete\n      await cleanup1Promise;\n      \n      // Now should be able to run again\n      await expect(cleanupService.runCleanup()).resolves.toBeDefined();\n    });\n    \n    it('should handle cleanup errors', async () => {\n      mockEmailVerificationCodeService.cleanupExpiredCodes.mockRejectedValue(new Error('Database error'));\n      \n      await expect(cleanupService.runCleanup()).rejects.toThrow('Database error');\n    });\n  });\n  \n  describe('getCleanupStats', () => {\n    it('should return cleanup statistics', async () => {\n      // Run cleanup to generate stats\n      await cleanupService.runCleanup();\n      \n      const stats = cleanupService.getCleanupStats();\n      \n      expect(stats.lastCleanup).toBeGreaterThan(0);\n      expect(stats.isRunning).toBe(false);\n      expect(stats.recentStats).toHaveLength(1);\n      expect(stats.totalExpiredCodes).toBe(5);\n      expect(stats.totalRateLimitData).toBeGreaterThan(0);\n    });\n    \n    it('should limit recent stats to 24 entries', async () => {\n      // Run cleanup 25 times\n      for (let i = 0; i < 25; i++) {\n        await cleanupService.runCleanup();\n      }\n      \n      const stats = cleanupService.getCleanupStats();\n      expect(stats.recentStats).toHaveLength(24);\n    });\n  });\n  \n  describe('getSystemStatus', () => {\n    it('should return comprehensive system status', async () => {\n      const status = await cleanupService.getSystemStatus();\n      \n      expect(status.verificationCodes).toEqual({\n        totalActive: 10,\n        expiredCount: 2,\n        highAttemptCount: 1,\n      });\n      \n      expect(status.rateLimits).toEqual({\n        verificationAttempts: 3,\n        resendRequests: 2,\n        emailVerificationActivity: 5,\n        resendCooldowns: 1,\n        securityEvents: 0,\n      });\n      \n      expect(status.cleanup).toHaveProperty('lastCleanup');\n      expect(status.cleanup).toHaveProperty('isRunning');\n      expect(status.cleanup).toHaveProperty('nextCleanupDue');\n    });\n  });\n  \n  describe('forceCleanup', () => {\n    it('should run cleanup when not already running', async () => {\n      const stats = await cleanupService.forceCleanup();\n      \n      expect(stats.expiredCodes).toBe(5);\n      expect(mockEmailVerificationCodeService.cleanupExpiredCodes).toHaveBeenCalledTimes(1);\n    });\n    \n    it('should reject if cleanup is already running', async () => {\n      // Start a cleanup\n      const cleanupPromise = cleanupService.runCleanup();\n      \n      // Try to force cleanup while running\n      await expect(cleanupService.forceCleanup()).rejects.toThrow('Cleanup is already running');\n      \n      // Wait for original cleanup to complete\n      await cleanupPromise;\n    });\n  });\n  \n  describe('runStartupCleanup', () => {\n    it('should run startup cleanup successfully', async () => {\n      const stats = await cleanupService.runStartupCleanup();\n      \n      expect(stats.expiredCodes).toBe(5);\n      expect(mockEmailVerificationCodeService.cleanupExpiredCodes).toHaveBeenCalledTimes(1);\n    });\n    \n    it('should handle startup cleanup errors', async () => {\n      mockEmailVerificationCodeService.cleanupExpiredCodes.mockRejectedValue(new Error('Startup error'));\n      \n      await expect(cleanupService.runStartupCleanup()).rejects.toThrow('Startup error');\n    });\n  });\n  \n  describe('scheduleCleanup', () => {\n    beforeEach(() => {\n      jest.useFakeTimers();\n    });\n    \n    afterEach(() => {\n      jest.useRealTimers();\n    });\n    \n    it('should schedule periodic cleanup', () => {\n      const intervalMs = 1000; // 1 second for testing\n      \n      cleanupService.scheduleCleanup(intervalMs);\n      \n      // Fast-forward past initial delay\n      jest.advanceTimersByTime(6000);\n      \n      // Should have run initial cleanup\n      expect(mockEmailVerificationCodeService.cleanupExpiredCodes).toHaveBeenCalledTimes(1);\n      \n      // Fast-forward to next interval\n      jest.advanceTimersByTime(intervalMs);\n      \n      // Should have run periodic cleanup\n      expect(mockEmailVerificationCodeService.cleanupExpiredCodes).toHaveBeenCalledTimes(2);\n    });\n    \n    it('should handle scheduled cleanup errors gracefully', () => {\n      mockEmailVerificationCodeService.cleanupExpiredCodes.mockRejectedValue(new Error('Scheduled error'));\n      \n      const intervalMs = 1000;\n      cleanupService.scheduleCleanup(intervalMs);\n      \n      // Fast-forward past initial delay\n      expect(() => {\n        jest.advanceTimersByTime(6000);\n      }).not.toThrow();\n      \n      // Should have attempted cleanup despite error\n      expect(mockEmailVerificationCodeService.cleanupExpiredCodes).toHaveBeenCalledTimes(1);\n    });\n  });\n});"],"names":["jest","mock","mockEmailVerificationCodeService","emailVerificationCodeService","mockEmailVerificationRateLimiter","emailVerificationRateLimiter","describe","cleanupService","beforeEach","EmailVerificationCleanupService","clearAllMocks","cleanupExpiredCodes","mockResolvedValue","getCodeStats","totalActive","expiredCount","highAttemptCount","getStats","mockReturnValue","verificationAttempts","resendRequests","emailVerificationActivity","resendCooldowns","securityEvents","cleanup","mockImplementation","it","stats","runCleanup","expect","expiredCodes","toBe","rateLimitData","timestamp","toBeGreaterThan","toHaveBeenCalledTimes","cleanup1Promise","rejects","toThrow","resolves","toBeDefined","mockRejectedValue","Error","getCleanupStats","lastCleanup","isRunning","recentStats","toHaveLength","totalExpiredCodes","totalRateLimitData","i","status","getSystemStatus","verificationCodes","toEqual","rateLimits","toHaveProperty","forceCleanup","cleanupPromise","runStartupCleanup","useFakeTimers","afterEach","useRealTimers","intervalMs","scheduleCleanup","advanceTimersByTime","not"],"mappings":"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"}