b58ec2d469502f54988826a43f624ef0
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get careGuides () {
        return careGuides;
    },
    get careGuidesRelations () {
        return careGuidesRelations;
    },
    get careHistory () {
        return careHistory;
    },
    get careHistoryRelations () {
        return careHistoryRelations;
    },
    get emailVerificationCodes () {
        return emailVerificationCodes;
    },
    get emailVerificationCodesRelations () {
        return emailVerificationCodesRelations;
    },
    get passwordResetTokens () {
        return passwordResetTokens;
    },
    get plantInstances () {
        return plantInstances;
    },
    get plantInstancesRelations () {
        return plantInstancesRelations;
    },
    get plants () {
        return plants;
    },
    get plantsRelations () {
        return plantsRelations;
    },
    get propagations () {
        return propagations;
    },
    get propagationsRelations () {
        return propagationsRelations;
    },
    get sessions () {
        return sessions;
    },
    get sessionsRelations () {
        return sessionsRelations;
    },
    get users () {
        return users;
    },
    get usersRelations () {
        return usersRelations;
    }
});
const _pgcore = require("drizzle-orm/pg-core");
const _drizzleorm = require("drizzle-orm");
const users = (0, _pgcore.pgTable)('users', {
    id: (0, _pgcore.serial)('id').primaryKey(),
    email: (0, _pgcore.text)('email').notNull().unique(),
    hashedPassword: (0, _pgcore.text)('hashed_password').notNull(),
    name: (0, _pgcore.text)('name').notNull(),
    isCurator: (0, _pgcore.boolean)('is_curator').default(false).notNull(),
    isEmailVerified: (0, _pgcore.boolean)('is_email_verified').default(false).notNull(),
    createdAt: (0, _pgcore.timestamp)('created_at').defaultNow().notNull(),
    updatedAt: (0, _pgcore.timestamp)('updated_at').defaultNow().notNull()
}, (table)=>({
        // Index for email verification status
        emailVerifiedIdx: (0, _pgcore.index)('users_email_verified_idx').on(table.isEmailVerified)
    }));
const emailVerificationCodes = (0, _pgcore.pgTable)('email_verification_codes', {
    id: (0, _pgcore.serial)('id').primaryKey(),
    userId: (0, _pgcore.integer)('user_id').notNull().references(()=>users.id, {
        onDelete: 'cascade'
    }),
    code: (0, _pgcore.text)('code').notNull(),
    expiresAt: (0, _pgcore.timestamp)('expires_at').notNull(),
    createdAt: (0, _pgcore.timestamp)('created_at').defaultNow().notNull(),
    attemptsUsed: (0, _pgcore.integer)('attempts_used').default(0).notNull()
}, (table)=>({
        // Indexes for email verification code queries
        userIdIdx: (0, _pgcore.index)('email_verification_codes_user_id_idx').on(table.userId),
        expiresAtIdx: (0, _pgcore.index)('email_verification_codes_expires_at_idx').on(table.expiresAt),
        // Unique constraint to ensure one active code per user
        userActiveCodeUnique: (0, _pgcore.uniqueIndex)('email_verification_codes_user_active_unique').on(table.userId, table.expiresAt)
    }));
const passwordResetTokens = (0, _pgcore.pgTable)('password_reset_tokens', {
    id: (0, _pgcore.serial)('id').primaryKey(),
    userId: (0, _pgcore.integer)('user_id').notNull().references(()=>users.id, {
        onDelete: 'cascade'
    }),
    token: (0, _pgcore.text)('token').notNull(),
    expiresAt: (0, _pgcore.timestamp)('expires_at').notNull(),
    createdAt: (0, _pgcore.timestamp)('created_at').defaultNow().notNull(),
    usedAt: (0, _pgcore.timestamp)('used_at')
}, (table)=>({
        // Indexes for password reset token queries
        userIdIdx: (0, _pgcore.index)('password_reset_tokens_user_id_idx').on(table.userId),
        tokenIdx: (0, _pgcore.index)('password_reset_tokens_token_idx').on(table.token),
        expiresAtIdx: (0, _pgcore.index)('password_reset_tokens_expires_at_idx').on(table.expiresAt),
        // Unique constraint to ensure one active token per user
        userActiveTokenUnique: (0, _pgcore.uniqueIndex)('password_reset_tokens_user_active_unique').on(table.userId, table.expiresAt)
    }));
const sessions = (0, _pgcore.pgTable)('sessions', {
    id: (0, _pgcore.text)('id').primaryKey(),
    userId: (0, _pgcore.integer)('user_id').notNull().references(()=>users.id),
    expiresAt: (0, _pgcore.timestamp)('expires_at', {
        withTimezone: true,
        mode: 'date'
    }).notNull()
}, (table)=>({
        // Indexes for session management
        userIdIdx: (0, _pgcore.index)('sessions_user_id_idx').on(table.userId),
        expiresAtIdx: (0, _pgcore.index)('sessions_expires_at_idx').on(table.expiresAt)
    }));
const plants = (0, _pgcore.pgTable)('plants', {
    id: (0, _pgcore.serial)('id').primaryKey(),
    family: (0, _pgcore.text)('family').notNull(),
    genus: (0, _pgcore.text)('genus').notNull(),
    species: (0, _pgcore.text)('species').notNull(),
    cultivar: (0, _pgcore.text)('cultivar'),
    commonName: (0, _pgcore.text)('common_name').notNull(),
    careInstructions: (0, _pgcore.text)('care_instructions'),
    defaultImage: (0, _pgcore.text)('default_image'),
    createdBy: (0, _pgcore.integer)('created_by').references(()=>users.id),
    isVerified: (0, _pgcore.boolean)('is_verified').default(false).notNull(),
    createdAt: (0, _pgcore.timestamp)('created_at').defaultNow().notNull(),
    updatedAt: (0, _pgcore.timestamp)('updated_at').defaultNow().notNull()
}, (table)=>({
        // Indexes for plant taxonomy search
        familyIdx: (0, _pgcore.index)('plants_family_idx').on(table.family),
        genusIdx: (0, _pgcore.index)('plants_genus_idx').on(table.genus),
        speciesIdx: (0, _pgcore.index)('plants_species_idx').on(table.species),
        cultivarIdx: (0, _pgcore.index)('plants_cultivar_idx').on(table.cultivar),
        commonNameIdx: (0, _pgcore.index)('plants_common_name_idx').on(table.commonName),
        // Unique constraint for taxonomy combination (including cultivar)
        taxonomyUnique: (0, _pgcore.uniqueIndex)('plants_taxonomy_unique').on(table.family, table.genus, table.species, table.cultivar),
        // Index for verified plants
        verifiedIdx: (0, _pgcore.index)('plants_verified_idx').on(table.isVerified)
    }));
const plantInstances = (0, _pgcore.pgTable)('plant_instances', {
    id: (0, _pgcore.serial)('id').primaryKey(),
    userId: (0, _pgcore.integer)('user_id').notNull().references(()=>users.id),
    plantId: (0, _pgcore.integer)('plant_id').notNull().references(()=>plants.id),
    nickname: (0, _pgcore.text)('nickname').notNull(),
    location: (0, _pgcore.text)('location').notNull(),
    lastFertilized: (0, _pgcore.timestamp)('last_fertilized'),
    fertilizerSchedule: (0, _pgcore.text)('fertilizer_schedule').notNull(),
    fertilizerDue: (0, _pgcore.timestamp)('fertilizer_due'),
    lastRepot: (0, _pgcore.timestamp)('last_repot'),
    notes: (0, _pgcore.text)('notes'),
    images: (0, _pgcore.jsonb)('images').$type().default([]).notNull(),
    isActive: (0, _pgcore.boolean)('is_active').default(true).notNull(),
    createdAt: (0, _pgcore.timestamp)('created_at').defaultNow().notNull(),
    updatedAt: (0, _pgcore.timestamp)('updated_at').defaultNow().notNull()
}, (table)=>({
        // Indexes for performance optimization
        userIdIdx: (0, _pgcore.index)('plant_instances_user_id_idx').on(table.userId),
        plantIdIdx: (0, _pgcore.index)('plant_instances_plant_id_idx').on(table.plantId),
        fertilizerDueIdx: (0, _pgcore.index)('plant_instances_fertilizer_due_idx').on(table.fertilizerDue),
        isActiveIdx: (0, _pgcore.index)('plant_instances_is_active_idx').on(table.isActive),
        userActiveIdx: (0, _pgcore.index)('plant_instances_user_active_idx').on(table.userId, table.isActive),
        locationIdx: (0, _pgcore.index)('plant_instances_location_idx').on(table.location)
    }));
const propagations = (0, _pgcore.pgTable)('propagations', {
    id: (0, _pgcore.serial)('id').primaryKey(),
    userId: (0, _pgcore.integer)('user_id').notNull().references(()=>users.id),
    plantId: (0, _pgcore.integer)('plant_id').notNull().references(()=>plants.id),
    parentInstanceId: (0, _pgcore.integer)('parent_instance_id').references(()=>plantInstances.id),
    nickname: (0, _pgcore.text)('nickname').notNull(),
    location: (0, _pgcore.text)('location').notNull(),
    dateStarted: (0, _pgcore.timestamp)('date_started').defaultNow().notNull(),
    status: (0, _pgcore.text)('status', {
        enum: [
            'started',
            'rooting',
            'planted',
            'established'
        ]
    }).default('started').notNull(),
    sourceType: (0, _pgcore.text)('source_type', {
        enum: [
            'internal',
            'external'
        ]
    }).default('internal').notNull(),
    externalSource: (0, _pgcore.text)('external_source', {
        enum: [
            'gift',
            'trade',
            'purchase',
            'other'
        ]
    }),
    externalSourceDetails: (0, _pgcore.text)('external_source_details'),
    notes: (0, _pgcore.text)('notes'),
    images: (0, _pgcore.jsonb)('images').$type().default([]).notNull(),
    createdAt: (0, _pgcore.timestamp)('created_at').defaultNow().notNull(),
    updatedAt: (0, _pgcore.timestamp)('updated_at').defaultNow().notNull()
}, (table)=>({
        // Indexes for propagation queries
        userIdIdx: (0, _pgcore.index)('propagations_user_id_idx').on(table.userId),
        plantIdIdx: (0, _pgcore.index)('propagations_plant_id_idx').on(table.plantId),
        parentInstanceIdIdx: (0, _pgcore.index)('propagations_parent_instance_id_idx').on(table.parentInstanceId),
        statusIdx: (0, _pgcore.index)('propagations_status_idx').on(table.status),
        sourceTypeIdx: (0, _pgcore.index)('propagations_source_type_idx').on(table.sourceType),
        externalSourceIdx: (0, _pgcore.index)('propagations_external_source_idx').on(table.externalSource),
        dateStartedIdx: (0, _pgcore.index)('propagations_date_started_idx').on(table.dateStarted),
        userStatusIdx: (0, _pgcore.index)('propagations_user_status_idx').on(table.userId, table.status),
        userSourceTypeIdx: (0, _pgcore.index)('propagations_user_source_type_idx').on(table.userId, table.sourceType)
    }));
const careHistory = (0, _pgcore.pgTable)('care_history', {
    id: (0, _pgcore.serial)('id').primaryKey(),
    userId: (0, _pgcore.integer)('user_id').notNull().references(()=>users.id),
    plantInstanceId: (0, _pgcore.integer)('plant_instance_id').notNull().references(()=>plantInstances.id),
    careType: (0, _pgcore.text)('care_type', {
        enum: [
            'fertilizer',
            'water',
            'repot',
            'prune',
            'inspect',
            'other'
        ]
    }).notNull(),
    careDate: (0, _pgcore.timestamp)('care_date').notNull(),
    notes: (0, _pgcore.text)('notes'),
    fertilizerType: (0, _pgcore.text)('fertilizer_type'),
    potSize: (0, _pgcore.text)('pot_size'),
    soilType: (0, _pgcore.text)('soil_type'),
    images: (0, _pgcore.jsonb)('images').$type().default([]).notNull(),
    createdAt: (0, _pgcore.timestamp)('created_at').defaultNow().notNull(),
    updatedAt: (0, _pgcore.timestamp)('updated_at').defaultNow().notNull()
}, (table)=>({
        // Indexes for care history queries
        userIdIdx: (0, _pgcore.index)('care_history_user_id_idx').on(table.userId),
        plantInstanceIdIdx: (0, _pgcore.index)('care_history_plant_instance_id_idx').on(table.plantInstanceId),
        careTypeIdx: (0, _pgcore.index)('care_history_care_type_idx').on(table.careType),
        careDateIdx: (0, _pgcore.index)('care_history_care_date_idx').on(table.careDate),
        userPlantIdx: (0, _pgcore.index)('care_history_user_plant_idx').on(table.userId, table.plantInstanceId),
        userCareTypeIdx: (0, _pgcore.index)('care_history_user_care_type_idx').on(table.userId, table.careType),
        plantCareDateIdx: (0, _pgcore.index)('care_history_plant_care_date_idx').on(table.plantInstanceId, table.careDate)
    }));
const careGuides = (0, _pgcore.pgTable)('care_guides', {
    id: (0, _pgcore.serial)('id').primaryKey(),
    userId: (0, _pgcore.integer)('user_id').notNull().references(()=>users.id),
    // Taxonomy level - determines which level this guide applies to
    taxonomyLevel: (0, _pgcore.text)('taxonomy_level', {
        enum: [
            'family',
            'genus',
            'species',
            'cultivar'
        ]
    }).notNull(),
    // Taxonomy identifiers
    family: (0, _pgcore.text)('family'),
    genus: (0, _pgcore.text)('genus'),
    species: (0, _pgcore.text)('species'),
    cultivar: (0, _pgcore.text)('cultivar'),
    commonName: (0, _pgcore.text)('common_name'),
    // Care guide content
    title: (0, _pgcore.text)('title').notNull(),
    description: (0, _pgcore.text)('description'),
    // Care categories
    watering: (0, _pgcore.jsonb)('watering').$type(),
    fertilizing: (0, _pgcore.jsonb)('fertilizing').$type(),
    lighting: (0, _pgcore.jsonb)('lighting').$type(),
    humidity: (0, _pgcore.jsonb)('humidity').$type(),
    temperature: (0, _pgcore.jsonb)('temperature').$type(),
    soil: (0, _pgcore.jsonb)('soil').$type(),
    repotting: (0, _pgcore.jsonb)('repotting').$type(),
    pruning: (0, _pgcore.jsonb)('pruning').$type(),
    propagation: (0, _pgcore.jsonb)('propagation').$type(),
    commonIssues: (0, _pgcore.jsonb)('common_issues').$type(),
    generalTips: (0, _pgcore.text)('general_tips'),
    additionalNotes: (0, _pgcore.text)('additional_notes'),
    tags: (0, _pgcore.jsonb)('tags').$type().default([]).notNull(),
    images: (0, _pgcore.jsonb)('images').$type().default([]).notNull(),
    // Metadata
    isPublic: (0, _pgcore.boolean)('is_public').default(false).notNull(),
    isVerified: (0, _pgcore.boolean)('is_verified').default(false).notNull(),
    createdAt: (0, _pgcore.timestamp)('created_at').defaultNow().notNull(),
    updatedAt: (0, _pgcore.timestamp)('updated_at').defaultNow().notNull()
}, (table)=>({
        // Indexes for care guide queries
        userIdIdx: (0, _pgcore.index)('care_guides_user_id_idx').on(table.userId),
        taxonomyLevelIdx: (0, _pgcore.index)('care_guides_taxonomy_level_idx').on(table.taxonomyLevel),
        familyIdx: (0, _pgcore.index)('care_guides_family_idx').on(table.family),
        genusIdx: (0, _pgcore.index)('care_guides_genus_idx').on(table.genus),
        speciesIdx: (0, _pgcore.index)('care_guides_species_idx').on(table.species),
        cultivarIdx: (0, _pgcore.index)('care_guides_cultivar_idx').on(table.cultivar),
        commonNameIdx: (0, _pgcore.index)('care_guides_common_name_idx').on(table.commonName),
        isPublicIdx: (0, _pgcore.index)('care_guides_is_public_idx').on(table.isPublic),
        isVerifiedIdx: (0, _pgcore.index)('care_guides_is_verified_idx').on(table.isVerified),
        // Composite indexes for taxonomy matching
        familyGenusIdx: (0, _pgcore.index)('care_guides_family_genus_idx').on(table.family, table.genus),
        genusSpeciesIdx: (0, _pgcore.index)('care_guides_genus_species_idx').on(table.genus, table.species),
        speciesCultivarIdx: (0, _pgcore.index)('care_guides_species_cultivar_idx').on(table.species, table.cultivar),
        // Unique constraint for user + taxonomy combination
        userTaxonomyUnique: (0, _pgcore.uniqueIndex)('care_guides_user_taxonomy_unique').on(table.userId, table.taxonomyLevel, table.family, table.genus, table.species, table.cultivar)
    }));
const usersRelations = (0, _drizzleorm.relations)(users, ({ many })=>({
        plantInstances: many(plantInstances),
        propagations: many(propagations),
        sessions: many(sessions),
        createdPlants: many(plants),
        careHistory: many(careHistory),
        careGuides: many(careGuides),
        emailVerificationCodes: many(emailVerificationCodes)
    }));
const plantsRelations = (0, _drizzleorm.relations)(plants, ({ many, one })=>({
        instances: many(plantInstances),
        propagations: many(propagations),
        createdBy: one(users, {
            fields: [
                plants.createdBy
            ],
            references: [
                users.id
            ]
        })
    }));
const plantInstancesRelations = (0, _drizzleorm.relations)(plantInstances, ({ one, many })=>({
        user: one(users, {
            fields: [
                plantInstances.userId
            ],
            references: [
                users.id
            ]
        }),
        plant: one(plants, {
            fields: [
                plantInstances.plantId
            ],
            references: [
                plants.id
            ]
        }),
        propagations: many(propagations),
        careHistory: many(careHistory)
    }));
const propagationsRelations = (0, _drizzleorm.relations)(propagations, ({ one })=>({
        user: one(users, {
            fields: [
                propagations.userId
            ],
            references: [
                users.id
            ]
        }),
        plant: one(plants, {
            fields: [
                propagations.plantId
            ],
            references: [
                plants.id
            ]
        }),
        parentInstance: one(plantInstances, {
            fields: [
                propagations.parentInstanceId
            ],
            references: [
                plantInstances.id
            ]
        })
    }));
const careHistoryRelations = (0, _drizzleorm.relations)(careHistory, ({ one })=>({
        user: one(users, {
            fields: [
                careHistory.userId
            ],
            references: [
                users.id
            ]
        }),
        plantInstance: one(plantInstances, {
            fields: [
                careHistory.plantInstanceId
            ],
            references: [
                plantInstances.id
            ]
        })
    }));
const sessionsRelations = (0, _drizzleorm.relations)(sessions, ({ one })=>({
        user: one(users, {
            fields: [
                sessions.userId
            ],
            references: [
                users.id
            ]
        })
    }));
const emailVerificationCodesRelations = (0, _drizzleorm.relations)(emailVerificationCodes, ({ one })=>({
        user: one(users, {
            fields: [
                emailVerificationCodes.userId
            ],
            references: [
                users.id
            ]
        })
    }));
const careGuidesRelations = (0, _drizzleorm.relations)(careGuides, ({ one })=>({
        user: one(users, {
            fields: [
                careGuides.userId
            ],
            references: [
                users.id
            ]
        })
    }));

//# sourceMappingURL=data:application/json;base64,