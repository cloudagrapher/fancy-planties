81b01a8aecfa22959480969337ca0835
'use client';
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return ImageUpload;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("react");
const _reactdropzone = require("react-dropzone");
function ImageUpload({ onImagesChange, onUpload, maxImages = 6, maxSizePerImage = 5 * 1024 * 1024, acceptedTypes = [
    'image/jpeg',
    'image/png',
    'image/webp'
], className = '', showUploadProgress = false }) {
    const [selectedFiles, setSelectedFiles] = (0, _react.useState)([]);
    const [previews, setPreviews] = (0, _react.useState)([]);
    const [errors, setErrors] = (0, _react.useState)([]);
    const [uploadProgress, setUploadProgress] = (0, _react.useState)({});
    const [isUploading, setIsUploading] = (0, _react.useState)(false);
    const fileInputRef = (0, _react.useRef)(null);
    // Manual click handler for better reliability
    const handleClick = (0, _react.useCallback)(()=>{
        if (fileInputRef.current && selectedFiles.length < maxImages) {
            fileInputRef.current.click();
        }
    }, [
        selectedFiles.length,
        maxImages
    ]);
    // Handle file selection
    const handleFiles = (0, _react.useCallback)((files)=>{
        const newErrors = [];
        const validFiles = [];
        const newPreviews = [];
        // Check if adding these files would exceed the limit
        if (selectedFiles.length + files.length > maxImages) {
            newErrors.push(`Maximum ${maxImages} images allowed`);
            return;
        }
        files.forEach((file)=>{
            // Check file type
            if (!acceptedTypes.includes(file.type)) {
                newErrors.push(`${file.name}: Invalid file type. Please use JPEG, PNG, or WebP.`);
                return;
            }
            // Check file size
            if (file.size > maxSizePerImage) {
                const maxSizeMB = Math.round(maxSizePerImage / (1024 * 1024));
                newErrors.push(`${file.name}: File too large. Maximum size is ${maxSizeMB}MB.`);
                return;
            }
            // Check for duplicates
            if (selectedFiles.some((existing)=>existing.name === file.name && existing.size === file.size)) {
                newErrors.push(`${file.name}: File already selected.`);
                return;
            }
            validFiles.push(file);
            // Create preview
            const reader = new FileReader();
            reader.onload = (e)=>{
                if (e.target?.result) {
                    newPreviews.push(e.target.result);
                    // Update previews when all files are processed
                    if (newPreviews.length === validFiles.length) {
                        setPreviews((prev)=>[
                                ...prev,
                                ...newPreviews
                            ]);
                    }
                }
            };
            reader.onerror = ()=>{
                newErrors.push(`${file.name}: Failed to read file.`);
                setErrors((prev)=>[
                        ...prev,
                        ...newErrors
                    ]);
            };
            reader.readAsDataURL(file);
        });
        if (validFiles.length > 0) {
            const updatedFiles = [
                ...selectedFiles,
                ...validFiles
            ];
            setSelectedFiles(updatedFiles);
            onImagesChange(updatedFiles);
        }
        setErrors(newErrors);
    }, [
        selectedFiles,
        maxImages,
        maxSizePerImage,
        acceptedTypes,
        onImagesChange
    ]);
    // Dropzone configuration
    const { getRootProps, getInputProps, isDragActive } = (0, _reactdropzone.useDropzone)({
        onDrop: handleFiles,
        accept: acceptedTypes.reduce((acc, type)=>({
                ...acc,
                [type]: []
            }), {}),
        maxFiles: maxImages - selectedFiles.length,
        disabled: selectedFiles.length >= maxImages
    });
    // Remove file
    const removeFile = (index)=>{
        const newFiles = selectedFiles.filter((_, i)=>i !== index);
        const newPreviews = previews.filter((_, i)=>i !== index);
        setSelectedFiles(newFiles);
        setPreviews(newPreviews);
        onImagesChange(newFiles);
        setErrors([]);
    };
    // Upload files
    const uploadFiles = async ()=>{
        if (!onUpload || selectedFiles.length === 0) return;
        setIsUploading(true);
        setErrors([]);
        try {
            // Simulate upload progress for each file
            selectedFiles.forEach((file, index)=>{
                const fileKey = `${file.name}-${index}`;
                setUploadProgress((prev)=>({
                        ...prev,
                        [fileKey]: 0
                    }));
                // Simulate progress
                const interval = setInterval(()=>{
                    setUploadProgress((prev)=>{
                        const currentProgress = prev[fileKey] || 0;
                        if (currentProgress >= 100) {
                            clearInterval(interval);
                            return prev;
                        }
                        return {
                            ...prev,
                            [fileKey]: Math.min(currentProgress + 10, 100)
                        };
                    });
                }, 100);
            });
            const uploadedUrls = await onUpload(selectedFiles);
            // Clear progress after successful upload
            setUploadProgress({});
        // Optionally clear files after upload
        // setSelectedFiles([]);
        // setPreviews([]);
        } catch (error) {
            setErrors([
                'Upload failed. Please try again.'
            ]);
        } finally{
            setIsUploading(false);
        }
    };
    // Clear all files
    const clearAll = ()=>{
        setSelectedFiles([]);
        setPreviews([]);
        onImagesChange([]);
        setErrors([]);
        setUploadProgress({});
        if (fileInputRef.current) {
            fileInputRef.current.value = '';
        }
    };
    // Format file size
    const formatFileSize = (bytes)=>{
        if (bytes === 0) return '0 Bytes';
        const k = 1024;
        const sizes = [
            'Bytes',
            'KB',
            'MB',
            'GB'
        ];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        className: `space-y-4 ${className}`,
        children: [
            selectedFiles.length < maxImages && /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                ...getRootProps(),
                className: `border-2 border-dashed rounded-lg p-6 text-center cursor-pointer transition-colors ${isDragActive ? 'border-primary-400 bg-primary-50' : 'border-gray-300 hover:border-gray-400 hover:bg-gray-50'}`,
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("input", {
                        ...getInputProps(),
                        ref: fileInputRef
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        className: "space-y-2",
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                className: "text-4xl",
                                children: "\uD83D\uDCF7"
                            }),
                            isDragActive ? /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                                className: "text-primary-600 font-medium",
                                children: "Drop images here..."
                            }) : /*#__PURE__*/ (0, _jsxruntime.jsxs)(_jsxruntime.Fragment, {
                                children: [
                                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("p", {
                                        className: "text-gray-600",
                                        children: [
                                            /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                                                type: "button",
                                                onClick: handleClick,
                                                className: "font-medium text-primary-600 hover:text-primary-700 underline focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2 rounded",
                                                "aria-label": "Click to select images for upload",
                                                title: "Select images to upload",
                                                children: "Click to upload"
                                            }),
                                            ' ',
                                            "or drag and drop"
                                        ]
                                    }),
                                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("p", {
                                        className: "text-sm text-gray-500",
                                        children: [
                                            "JPEG, PNG, or WebP up to ",
                                            Math.round(maxSizePerImage / (1024 * 1024)),
                                            "MB each"
                                        ]
                                    }),
                                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("p", {
                                        className: "text-xs text-gray-400",
                                        children: [
                                            selectedFiles.length,
                                            " of ",
                                            maxImages,
                                            " images selected"
                                        ]
                                    })
                                ]
                            })
                        ]
                    })
                ]
            }),
            errors.length > 0 && /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                className: "bg-red-50 border border-red-200 rounded-lg p-3",
                children: /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    className: "flex items-start",
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("svg", {
                            className: "w-5 h-5 text-red-400 mt-0.5 mr-2 flex-shrink-0",
                            fill: "currentColor",
                            viewBox: "0 0 20 20",
                            children: /*#__PURE__*/ (0, _jsxruntime.jsx)("path", {
                                fillRule: "evenodd",
                                d: "M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z",
                                clipRule: "evenodd"
                            })
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                            className: "flex-1",
                            children: [
                                /*#__PURE__*/ (0, _jsxruntime.jsx)("h4", {
                                    className: "text-sm font-medium text-red-800 mb-1",
                                    children: "Upload Errors"
                                }),
                                /*#__PURE__*/ (0, _jsxruntime.jsx)("ul", {
                                    className: "text-sm text-red-700 space-y-1",
                                    children: errors.map((error, index)=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("li", {
                                            children: [
                                                "• ",
                                                error
                                            ]
                                        }, index))
                                })
                            ]
                        })
                    ]
                })
            }),
            selectedFiles.length > 0 && /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                className: "space-y-3",
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        className: "flex items-center justify-between",
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("h4", {
                                className: "text-sm font-medium text-gray-700",
                                children: [
                                    "Selected Images (",
                                    selectedFiles.length,
                                    ")"
                                ]
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                className: "flex items-center space-x-2",
                                children: [
                                    showUploadProgress && onUpload && selectedFiles.length > 0 && /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                                        type: "button",
                                        onClick: uploadFiles,
                                        disabled: isUploading,
                                        className: `px-3 py-1 text-sm rounded ${isUploading ? 'bg-gray-300 text-gray-500 cursor-not-allowed' : 'bg-primary-600 text-white hover:bg-primary-700'}`,
                                        "aria-label": isUploading ? 'Uploading images' : 'Upload selected images',
                                        title: isUploading ? 'Uploading images...' : 'Upload selected images',
                                        children: isUploading ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_jsxruntime.Fragment, {
                                            children: /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                                role: "status",
                                                "aria-live": "polite",
                                                children: "Uploading..."
                                            })
                                        }) : 'Upload'
                                    }),
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                                        type: "button",
                                        onClick: clearAll,
                                        className: "text-sm text-red-600 hover:text-red-700",
                                        disabled: isUploading,
                                        "aria-label": "Clear all selected images",
                                        title: "Remove all selected images",
                                        children: "Clear All"
                                    })
                                ]
                            })
                        ]
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        className: "grid grid-cols-2 sm:grid-cols-3 gap-3",
                        children: selectedFiles.map((file, index)=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                className: "relative group",
                                children: [
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                        className: "aspect-square rounded-lg overflow-hidden bg-gray-100",
                                        children: previews[index] ? /*#__PURE__*/ (0, _jsxruntime.jsx)("img", {
                                            src: previews[index],
                                            alt: `Preview ${index + 1}`,
                                            className: "w-full h-full object-cover"
                                        }) : /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                            className: "w-full h-full flex items-center justify-center",
                                            children: [
                                                /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                                    className: "animate-spin rounded-full h-6 w-6 border-b-2 border-primary-500",
                                                    role: "status",
                                                    "aria-label": "Loading image preview"
                                                }),
                                                /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                                    className: "sr-only",
                                                    children: "Loading image preview..."
                                                })
                                            ]
                                        })
                                    }),
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                                        type: "button",
                                        onClick: ()=>removeFile(index),
                                        className: "absolute top-1 right-1 p-1 bg-red-500 text-white rounded-full opacity-0 group-hover:opacity-100 transition-opacity",
                                        title: "Remove image",
                                        "aria-label": `Remove image ${index + 1}`,
                                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)("svg", {
                                            className: "w-3 h-3",
                                            fill: "currentColor",
                                            viewBox: "0 0 20 20",
                                            children: /*#__PURE__*/ (0, _jsxruntime.jsx)("path", {
                                                fillRule: "evenodd",
                                                d: "M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z",
                                                clipRule: "evenodd"
                                            })
                                        })
                                    }),
                                    index === 0 && /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                        className: "absolute bottom-1 left-1 bg-primary-500 text-white text-xs px-1 py-0.5 rounded",
                                        children: "Primary"
                                    }),
                                    index !== 0 && /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                                        type: "button",
                                        onClick: ()=>{
                                            // Move this image to the front
                                            const newFiles = [
                                                ...selectedFiles
                                            ];
                                            const newPreviews = [
                                                ...previews
                                            ];
                                            const selectedFile = newFiles[index];
                                            const selectedPreview = newPreviews[index];
                                            // Remove from current position
                                            newFiles.splice(index, 1);
                                            newPreviews.splice(index, 1);
                                            // Add to front
                                            newFiles.unshift(selectedFile);
                                            newPreviews.unshift(selectedPreview);
                                            setSelectedFiles(newFiles);
                                            setPreviews(newPreviews);
                                            onImagesChange(newFiles);
                                        },
                                        className: "absolute bottom-1 left-1 bg-black bg-opacity-50 text-white text-xs px-1 py-0.5 rounded opacity-0 group-hover:opacity-100 transition-opacity",
                                        title: "Set as primary image",
                                        "aria-label": `Set image ${index + 1} as primary`,
                                        children: "Set Primary"
                                    }),
                                    showUploadProgress && uploadProgress[`${file.name}-${index}`] !== undefined && /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                        className: "absolute inset-0 bg-black bg-opacity-50 flex items-center justify-center",
                                        children: /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                            className: "text-white text-center",
                                            children: [
                                                /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                                    className: "w-8 h-8 border-2 border-white border-t-transparent rounded-full animate-spin mx-auto mb-1"
                                                }),
                                                /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                                    className: "text-xs",
                                                    children: [
                                                        uploadProgress[`${file.name}-${index}`],
                                                        "%"
                                                    ]
                                                })
                                            ]
                                        })
                                    }),
                                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                        className: "mt-1 text-xs text-gray-500 truncate",
                                        children: [
                                            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                                className: "truncate",
                                                title: file.name,
                                                children: file.name
                                            }),
                                            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                                children: formatFileSize(file.size)
                                            })
                                        ]
                                    })
                                ]
                            }, index))
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        className: "text-xs text-gray-500 bg-gray-50 rounded p-2",
                        children: /*#__PURE__*/ (0, _jsxruntime.jsxs)("p", {
                            children: [
                                /*#__PURE__*/ (0, _jsxruntime.jsx)("strong", {
                                    children: "Tip:"
                                }),
                                " The first image will be used as the primary photo for your plant card."
                            ]
                        })
                    })
                ]
            })
        ]
    });
}

//# sourceMappingURL=data:application/json;base64,