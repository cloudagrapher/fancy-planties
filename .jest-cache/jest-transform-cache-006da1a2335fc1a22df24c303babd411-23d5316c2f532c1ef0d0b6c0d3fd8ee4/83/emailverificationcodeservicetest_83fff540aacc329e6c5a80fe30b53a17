d6d704926d9d26ff391228c9326585d2
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _globals = require("@jest/globals");
const _emailverificationcodeservice = require("../email-verification-code-service");
const _db = require("../../db");
const _schema = require("../../db/schema");
// Mock the database
_globals.jest.mock('@/lib/db', ()=>({
        db: {
            insert: _globals.jest.fn(),
            select: _globals.jest.fn(),
            update: _globals.jest.fn(),
            delete: _globals.jest.fn(),
            transaction: _globals.jest.fn()
        }
    }));
const mockDb = _db.db;
(0, _globals.describe)('EmailVerificationCodeService', ()=>{
    let service;
    const mockUserId = 1;
    const mockEmail = 'test@example.com';
    const mockCode = '123456';
    (0, _globals.beforeEach)(()=>{
        service = new _emailverificationcodeservice.EmailVerificationCodeService();
        _globals.jest.clearAllMocks();
        // Setup default mock implementations
        mockDb.insert.mockReturnValue({
            values: _globals.jest.fn().mockResolvedValue(undefined)
        });
        mockDb.select.mockReturnValue({
            from: _globals.jest.fn().mockReturnValue({
                where: _globals.jest.fn().mockReturnValue({
                    limit: _globals.jest.fn().mockResolvedValue([])
                })
            })
        });
        mockDb.update.mockReturnValue({
            set: _globals.jest.fn().mockReturnValue({
                where: _globals.jest.fn().mockResolvedValue(undefined)
            })
        });
        mockDb.delete.mockReturnValue({
            where: _globals.jest.fn().mockResolvedValue({
                rowCount: 0
            })
        });
    });
    (0, _globals.afterEach)(()=>{
        _globals.jest.restoreAllMocks();
    });
    (0, _globals.describe)('generateCode', ()=>{
        (0, _globals.it)('should generate a 6-digit code', async ()=>{
            // Mock deleteUserCodes to resolve
            const deleteUserCodesSpy = _globals.jest.spyOn(service, 'deleteUserCodes').mockResolvedValue();
            const code = await service.generateCode(mockUserId);
            (0, _globals.expect)(code).toMatch(/^\d{6}$/);
            (0, _globals.expect)(deleteUserCodesSpy).toHaveBeenCalledWith(mockUserId);
            (0, _globals.expect)(mockDb.insert).toHaveBeenCalledWith(_schema.emailVerificationCodes);
        });
        (0, _globals.it)('should delete existing codes before generating new one', async ()=>{
            const deleteUserCodesSpy = _globals.jest.spyOn(service, 'deleteUserCodes').mockResolvedValue();
            await service.generateCode(mockUserId);
            (0, _globals.expect)(deleteUserCodesSpy).toHaveBeenCalledWith(mockUserId);
        });
        (0, _globals.it)('should store code with correct expiration time', async ()=>{
            _globals.jest.spyOn(service, 'deleteUserCodes').mockResolvedValue();
            const mockInsertValues = _globals.jest.fn().mockResolvedValue(undefined);
            mockDb.insert.mockReturnValue({
                values: mockInsertValues
            });
            const beforeTime = Date.now();
            await service.generateCode(mockUserId);
            const afterTime = Date.now();
            (0, _globals.expect)(mockInsertValues).toHaveBeenCalledWith(_globals.expect.objectContaining({
                userId: mockUserId,
                code: _globals.expect.stringMatching(/^\d{6}$/),
                expiresAt: _globals.expect.any(Date),
                attemptsUsed: 0
            }));
            // Check that expiration is approximately 10 minutes from now
            const callArgs = mockInsertValues.mock.calls[0][0];
            const expirationTime = callArgs.expiresAt.getTime();
            const expectedMin = beforeTime + 9.5 * 60 * 1000; // 9.5 minutes
            const expectedMax = afterTime + 10.5 * 60 * 1000; // 10.5 minutes
            (0, _globals.expect)(expirationTime).toBeGreaterThan(expectedMin);
            (0, _globals.expect)(expirationTime).toBeLessThan(expectedMax);
        });
    });
    (0, _globals.describe)('validateCode', ()=>{
        const mockUser = {
            id: mockUserId,
            isEmailVerified: false
        };
        const mockVerificationCode = {
            id: 1,
            userId: mockUserId,
            code: mockCode,
            expiresAt: new Date(Date.now() + 5 * 60 * 1000),
            createdAt: new Date(),
            attemptsUsed: 0
        };
        (0, _globals.beforeEach)(()=>{
            // Mock user lookup
            mockDb.select.mockReturnValueOnce({
                from: _globals.jest.fn().mockReturnValue({
                    where: _globals.jest.fn().mockReturnValue({
                        limit: _globals.jest.fn().mockResolvedValue([
                            mockUser
                        ])
                    })
                })
            });
        });
        (0, _globals.it)('should validate correct code successfully', async ()=>{
            // Mock verification code lookup
            mockDb.select.mockReturnValueOnce({
                from: _globals.jest.fn().mockReturnValue({
                    where: _globals.jest.fn().mockReturnValue({
                        limit: _globals.jest.fn().mockResolvedValue([
                            mockVerificationCode
                        ])
                    })
                })
            });
            // Mock transaction
            const mockTransaction = _globals.jest.fn().mockImplementation(async (callback)=>{
                const mockTx = {
                    update: _globals.jest.fn().mockReturnValue({
                        set: _globals.jest.fn().mockReturnValue({
                            where: _globals.jest.fn().mockResolvedValue(undefined)
                        })
                    }),
                    delete: _globals.jest.fn().mockReturnValue({
                        where: _globals.jest.fn().mockResolvedValue(undefined)
                    })
                };
                return callback(mockTx);
            });
            mockDb.transaction.mockImplementation(mockTransaction);
            const result = await service.validateCode(mockEmail, mockCode);
            (0, _globals.expect)(result).toBe(true);
            (0, _globals.expect)(mockTransaction).toHaveBeenCalled();
        });
        (0, _globals.it)('should throw USER_NOT_FOUND when user does not exist', async ()=>{
            // Override user lookup to return empty array
            mockDb.select.mockReturnValueOnce({
                from: _globals.jest.fn().mockReturnValue({
                    where: _globals.jest.fn().mockReturnValue({
                        limit: _globals.jest.fn().mockResolvedValue([])
                    })
                })
            });
            await (0, _globals.expect)(service.validateCode(mockEmail, mockCode)).rejects.toThrow(new _emailverificationcodeservice.VerificationCodeError('User not found', _emailverificationcodeservice.VerificationError.USER_NOT_FOUND));
        });
        (0, _globals.it)('should throw ALREADY_VERIFIED when user is already verified', async ()=>{
            // Override user lookup to return verified user
            mockDb.select.mockReturnValueOnce({
                from: _globals.jest.fn().mockReturnValue({
                    where: _globals.jest.fn().mockReturnValue({
                        limit: _globals.jest.fn().mockResolvedValue([
                            {
                                ...mockUser,
                                isEmailVerified: true
                            }
                        ])
                    })
                })
            });
            await (0, _globals.expect)(service.validateCode(mockEmail, mockCode)).rejects.toThrow(new _emailverificationcodeservice.VerificationCodeError('Email already verified', _emailverificationcodeservice.VerificationError.ALREADY_VERIFIED));
        });
        (0, _globals.it)('should throw CODE_INVALID when code does not exist', async ()=>{
            // Mock verification code lookup to return empty array
            mockDb.select.mockReturnValueOnce({
                from: _globals.jest.fn().mockReturnValue({
                    where: _globals.jest.fn().mockReturnValue({
                        limit: _globals.jest.fn().mockResolvedValue([])
                    })
                })
            });
            await (0, _globals.expect)(service.validateCode(mockEmail, mockCode)).rejects.toThrow(new _emailverificationcodeservice.VerificationCodeError('Invalid verification code', _emailverificationcodeservice.VerificationError.CODE_INVALID));
        });
        (0, _globals.it)('should throw CODE_EXPIRED when code has expired', async ()=>{
            const expiredCode = {
                ...mockVerificationCode,
                expiresAt: new Date(Date.now() - 5 * 60 * 1000)
            };
            // Mock verification code lookup
            mockDb.select.mockReturnValueOnce({
                from: _globals.jest.fn().mockReturnValue({
                    where: _globals.jest.fn().mockReturnValue({
                        limit: _globals.jest.fn().mockResolvedValue([
                            expiredCode
                        ])
                    })
                })
            });
            await (0, _globals.expect)(service.validateCode(mockEmail, mockCode)).rejects.toThrow(new _emailverificationcodeservice.VerificationCodeError('Verification code has expired', _emailverificationcodeservice.VerificationError.CODE_EXPIRED));
            // Should delete expired code
            (0, _globals.expect)(mockDb.delete).toHaveBeenCalledWith(_schema.emailVerificationCodes);
        });
        (0, _globals.it)('should throw TOO_MANY_ATTEMPTS when max attempts exceeded', async ()=>{
            const maxAttemptsCode = {
                ...mockVerificationCode,
                attemptsUsed: 5
            };
            // Mock verification code lookup
            mockDb.select.mockReturnValueOnce({
                from: _globals.jest.fn().mockReturnValue({
                    where: _globals.jest.fn().mockReturnValue({
                        limit: _globals.jest.fn().mockResolvedValue([
                            maxAttemptsCode
                        ])
                    })
                })
            });
            await (0, _globals.expect)(service.validateCode(mockEmail, mockCode)).rejects.toThrow(new _emailverificationcodeservice.VerificationCodeError('Too many verification attempts', _emailverificationcodeservice.VerificationError.TOO_MANY_ATTEMPTS));
            // Should delete the code
            (0, _globals.expect)(mockDb.delete).toHaveBeenCalledWith(_schema.emailVerificationCodes);
        });
    });
    (0, _globals.describe)('incrementAttempts', ()=>{
        const mockUser = {
            id: mockUserId
        };
        const mockVerificationCode = {
            id: 1,
            attemptsUsed: 2
        };
        (0, _globals.it)('should increment attempts for valid code', async ()=>{
            // Mock user lookup
            mockDb.select.mockReturnValueOnce({
                from: _globals.jest.fn().mockReturnValue({
                    where: _globals.jest.fn().mockReturnValue({
                        limit: _globals.jest.fn().mockResolvedValue([
                            mockUser
                        ])
                    })
                })
            });
            // Mock verification code lookup
            mockDb.select.mockReturnValueOnce({
                from: _globals.jest.fn().mockReturnValue({
                    where: _globals.jest.fn().mockReturnValue({
                        limit: _globals.jest.fn().mockResolvedValue([
                            mockVerificationCode
                        ])
                    })
                })
            });
            await service.incrementAttempts(mockEmail, mockCode);
            (0, _globals.expect)(mockDb.update).toHaveBeenCalledWith(_schema.emailVerificationCodes);
        });
        (0, _globals.it)('should handle user not found gracefully', async ()=>{
            // Mock user lookup to return empty array
            mockDb.select.mockReturnValueOnce({
                from: _globals.jest.fn().mockReturnValue({
                    where: _globals.jest.fn().mockReturnValue({
                        limit: _globals.jest.fn().mockResolvedValue([])
                    })
                })
            });
            await (0, _globals.expect)(service.incrementAttempts(mockEmail, mockCode)).resolves.toBeUndefined();
            (0, _globals.expect)(mockDb.update).not.toHaveBeenCalled();
        });
        (0, _globals.it)('should handle code not found gracefully', async ()=>{
            // Mock user lookup
            mockDb.select.mockReturnValueOnce({
                from: _globals.jest.fn().mockReturnValue({
                    where: _globals.jest.fn().mockReturnValue({
                        limit: _globals.jest.fn().mockResolvedValue([
                            mockUser
                        ])
                    })
                })
            });
            // Mock verification code lookup to return empty array
            mockDb.select.mockReturnValueOnce({
                from: _globals.jest.fn().mockReturnValue({
                    where: _globals.jest.fn().mockReturnValue({
                        limit: _globals.jest.fn().mockResolvedValue([])
                    })
                })
            });
            await (0, _globals.expect)(service.incrementAttempts(mockEmail, mockCode)).resolves.toBeUndefined();
            (0, _globals.expect)(mockDb.update).not.toHaveBeenCalled();
        });
    });
    (0, _globals.describe)('cleanupExpiredCodes', ()=>{
        (0, _globals.it)('should delete expired codes and return count', async ()=>{
            const mockDeleteResult = {
                rowCount: 5
            };
            mockDb.delete.mockReturnValue({
                where: _globals.jest.fn().mockResolvedValue(mockDeleteResult)
            });
            const result = await service.cleanupExpiredCodes();
            (0, _globals.expect)(result).toBe(5);
            (0, _globals.expect)(mockDb.delete).toHaveBeenCalledWith(_schema.emailVerificationCodes);
        });
        (0, _globals.it)('should handle missing rowCount gracefully', async ()=>{
            const mockDeleteResult = {}; // No rowCount property
            mockDb.delete.mockReturnValue({
                where: _globals.jest.fn().mockResolvedValue(mockDeleteResult)
            });
            const result = await service.cleanupExpiredCodes();
            (0, _globals.expect)(result).toBe(0);
        });
    });
    (0, _globals.describe)('deleteUserCodes', ()=>{
        (0, _globals.it)('should delete all codes for a user', async ()=>{
            await service.deleteUserCodes(mockUserId);
            (0, _globals.expect)(mockDb.delete).toHaveBeenCalledWith(_schema.emailVerificationCodes);
        });
    });
    (0, _globals.describe)('getUserActiveCode', ()=>{
        (0, _globals.it)('should return active code for user', async ()=>{
            const mockActiveCode = {
                id: 1,
                userId: mockUserId,
                code: mockCode,
                expiresAt: new Date(Date.now() + 5 * 60 * 1000),
                createdAt: new Date(),
                attemptsUsed: 0
            };
            mockDb.select.mockReturnValue({
                from: _globals.jest.fn().mockReturnValue({
                    where: _globals.jest.fn().mockReturnValue({
                        limit: _globals.jest.fn().mockResolvedValue([
                            mockActiveCode
                        ])
                    })
                })
            });
            const result = await service.getUserActiveCode(mockUserId);
            (0, _globals.expect)(result).toEqual(mockActiveCode);
        });
        (0, _globals.it)('should return null when no active code exists', async ()=>{
            mockDb.select.mockReturnValue({
                from: _globals.jest.fn().mockReturnValue({
                    where: _globals.jest.fn().mockReturnValue({
                        limit: _globals.jest.fn().mockResolvedValue([])
                    })
                })
            });
            const result = await service.getUserActiveCode(mockUserId);
            (0, _globals.expect)(result).toBeNull();
        });
    });
    (0, _globals.describe)('hasActiveCode', ()=>{
        (0, _globals.it)('should return true when user has active code', async ()=>{
            _globals.jest.spyOn(service, 'getUserActiveCode').mockResolvedValue({
                id: 1,
                userId: mockUserId,
                code: mockCode,
                expiresAt: new Date(),
                createdAt: new Date(),
                attemptsUsed: 0
            });
            const result = await service.hasActiveCode(mockUserId);
            (0, _globals.expect)(result).toBe(true);
        });
        (0, _globals.it)('should return false when user has no active code', async ()=>{
            _globals.jest.spyOn(service, 'getUserActiveCode').mockResolvedValue(null);
            const result = await service.hasActiveCode(mockUserId);
            (0, _globals.expect)(result).toBe(false);
        });
    });
    (0, _globals.describe)('getCodeStats', ()=>{
        (0, _globals.it)('should return code statistics', async ()=>{
            // Mock the three select queries for stats
            mockDb.select.mockReturnValueOnce({
                from: _globals.jest.fn().mockReturnValue({
                    where: _globals.jest.fn().mockResolvedValue([
                        1,
                        2,
                        3
                    ])
                })
            }).mockReturnValueOnce({
                from: _globals.jest.fn().mockReturnValue({
                    where: _globals.jest.fn().mockResolvedValue([
                        1,
                        2
                    ])
                })
            }).mockReturnValueOnce({
                from: _globals.jest.fn().mockReturnValue({
                    where: _globals.jest.fn().mockResolvedValue([
                        1
                    ])
                })
            });
            const result = await service.getCodeStats();
            (0, _globals.expect)(result).toEqual({
                totalActive: 3,
                expiredCount: 2,
                highAttemptCount: 1
            });
        });
    });
    (0, _globals.describe)('code generation security', ()=>{
        (0, _globals.it)('should generate unique codes', async ()=>{
            _globals.jest.spyOn(service, 'deleteUserCodes').mockResolvedValue();
            const codes = new Set();
            for(let i = 0; i < 100; i++){
                const code = await service.generateCode(mockUserId);
                codes.add(code);
            }
            // Should have generated 100 unique codes (very high probability)
            (0, _globals.expect)(codes.size).toBeGreaterThan(95);
        });
        (0, _globals.it)('should always generate 6-digit codes', async ()=>{
            _globals.jest.spyOn(service, 'deleteUserCodes').mockResolvedValue();
            for(let i = 0; i < 50; i++){
                const code = await service.generateCode(mockUserId);
                (0, _globals.expect)(code).toMatch(/^\d{6}$/);
                (0, _globals.expect)(code.length).toBe(6);
            }
        });
        (0, _globals.it)('should pad codes with leading zeros', async ()=>{
            _globals.jest.spyOn(service, 'deleteUserCodes').mockResolvedValue();
            // Mock crypto.randomBytes to return a small number
            const originalRandomBytes = require('crypto').randomBytes;
            const mockRandomBytes = _globals.jest.fn().mockReturnValue(Buffer.from([
                0,
                0,
                0,
                1
            ])); // Very small number
            require('crypto').randomBytes = mockRandomBytes;
            const code = await service.generateCode(mockUserId);
            (0, _globals.expect)(code).toMatch(/^\d{6}$/);
            (0, _globals.expect)(code.length).toBe(6);
            // Restore original function
            require('crypto').randomBytes = originalRandomBytes;
        });
    });
});

//# sourceMappingURL=data:application/json;base64,