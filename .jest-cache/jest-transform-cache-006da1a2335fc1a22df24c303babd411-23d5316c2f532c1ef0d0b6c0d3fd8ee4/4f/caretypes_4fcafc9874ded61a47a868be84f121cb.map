{"version":3,"sources":["/Users/stefanbekker/projects/fancy-planties/src/lib/types/care-types.ts"],"sourcesContent":["import type { CareHistory, PlantInstance, Plant } from '@/lib/db/schema';\nimport type { EnhancedPlantInstance } from './plant-instance-types';\n\n// Re-export EnhancedPlantInstance for convenience\nexport type { EnhancedPlantInstance } from './plant-instance-types';\n\n// Care type enumeration\nexport type CareType = \n  | 'fertilizer'\n  | 'water'\n  | 'repot'\n  | 'prune'\n  | 'inspect'\n  | 'other';\n\n// Care frequency enumeration\nexport type CareFrequency = \n  | 'daily'\n  | 'weekly'\n  | 'monthly'\n  | 'seasonal'\n  | 'custom';\n\n// Care schedule interface for structured scheduling\nexport interface CareSchedule {\n  frequency: CareFrequency;\n  interval: number;\n  careType: CareType;\n  customDays?: number; // For custom frequency\n}\n\n// Care status enumeration\nexport type CareStatus = \n  | 'healthy'      // No care needed\n  | 'due_soon'     // Care due within a week\n  | 'due_today'    // Care due today\n  | 'overdue'      // Care is overdue\n  | 'unknown';     // No schedule set\n\n// Care urgency levels for prioritization\nexport type CareUrgency = \n  | 'critical'     // Severely overdue (>7 days)\n  | 'high'         // Overdue (1-7 days)\n  | 'medium'       // Due today or tomorrow\n  | 'low'          // Due within a week\n  | 'none';        // No care needed\n\n// Fertilizer schedule types\nexport type FertilizerSchedule = \n  | 'weekly'       // Every 7 days\n  | 'biweekly'     // Every 14 days\n  | 'monthly'      // Every 30 days\n  | 'bimonthly'    // Every 60 days\n  | 'quarterly'    // Every 90 days\n  | 'custom';      // Custom interval in days\n\n// Enhanced care history with computed properties\nexport interface EnhancedCareHistory extends CareHistory {\n  // Joined plant instance data\n  plantInstance?: PlantInstance & { plant?: Plant };\n  \n  // Time since care was performed\n  daysSinceCare: number;\n  \n  // Formatted care date for display\n  formattedDate: string;\n  \n  // Care type display information\n  careTypeDisplay: CareTypeDisplay;\n}\n\n// Care type display information\nexport interface CareTypeDisplay {\n  label: string;\n  icon: string;\n  color: string;\n  description: string;\n}\n\n// Care schedule calculation result\nexport interface CareScheduleCalculation {\n  nextDueDate: Date | null;\n  daysBetweenCare: number;\n  isOverdue: boolean;\n  daysOverdue: number;\n  careStatus: CareStatus;\n  careUrgency: CareUrgency;\n}\n\n// Care statistics for a plant instance\nexport interface PlantCareStatistics {\n  plantInstanceId: number;\n  totalCareEvents: number;\n  lastCareDate: Date | null;\n  averageCareDays: number;\n  careConsistencyScore: number; // 0-100 based on schedule adherence\n  careTypeBreakdown: Record<CareType, number>;\n  longestCareGap: number; // in days\n  currentCareStreak: number; // consecutive days with proper care\n}\n\n// Care dashboard data\nexport interface CareDashboardData {\n  overdue: EnhancedPlantInstance[];\n  dueToday: EnhancedPlantInstance[];\n  dueSoon: EnhancedPlantInstance[];\n  recentlyCared: EnhancedPlantInstance[];\n  \n  statistics: {\n    totalActivePlants: number;\n    overdueCount: number;\n    dueTodayCount: number;\n    dueSoonCount: number;\n    careStreakDays: number;\n    totalCareEventsThisWeek: number;\n    averageCareConsistency: number;\n  };\n  \n  quickActions: QuickCareAction[];\n}\n\n// Quick care action definition\nexport interface QuickCareAction {\n  id: string;\n  label: string;\n  icon: string;\n  careType: CareType;\n  color: string;\n  description: string;\n  isEnabled: boolean;\n}\n\n// Care log entry for quick actions\nexport interface CareLogEntry {\n  plantInstanceId: number;\n  careType: CareType;\n  careDate: Date;\n  notes?: string;\n  fertilizerType?: string;\n  potSize?: string;\n  soilType?: string;\n  images?: string[];\n}\n\n// Care reminder configuration\nexport interface CareReminder {\n  id: string;\n  plantInstanceId: number;\n  careType: CareType;\n  reminderDate: Date;\n  isActive: boolean;\n  notificationSent: boolean;\n  createdAt: Date;\n}\n\n// Care history timeline entry\nexport interface CareTimelineEntry {\n  id: number;\n  date: Date;\n  careType: CareType;\n  notes?: string;\n  fertilizerType?: string;\n  potSize?: string;\n  soilType?: string;\n  images: string[];\n  daysSinceLastCare?: number;\n  wasOnSchedule: boolean;\n}\n\n// Care form data for logging new care events\nexport interface CareFormData {\n  plantInstanceId: number;\n  careType: CareType;\n  careDate: Date;\n  notes?: string;\n  fertilizerType?: string;\n  potSize?: string;\n  soilType?: string;\n  imageFiles?: File[];\n  updateSchedule?: boolean; // Whether to update the plant's next due date\n}\n\n// Care validation result\nexport interface CareValidationResult {\n  isValid: boolean;\n  errors: string[];\n  warnings: string[];\n}\n\n// Bulk care operation\nexport interface BulkCareOperation {\n  plantInstanceIds: number[];\n  careType: CareType;\n  careDate: Date;\n  notes?: string;\n  fertilizerType?: string;\n}\n\n// Bulk care result\nexport interface BulkCareResult {\n  success: boolean;\n  successCount: number;\n  failureCount: number;\n  results: Array<{\n    plantInstanceId: number;\n    success: boolean;\n    error?: string;\n  }>;\n}\n\n// Care helper functions\nexport const careHelpers = {\n  // Get care type display information\n  getCareTypeDisplay: (careType: CareType): CareTypeDisplay => {\n    const displays: Record<CareType, CareTypeDisplay> = {\n      fertilizer: {\n        label: 'Fertilizer',\n        icon: '🌱',\n        color: 'text-green-600 bg-green-50',\n        description: 'Applied fertilizer to promote growth'\n      },\n      water: {\n        label: 'Water',\n        icon: '💧',\n        color: 'text-blue-600 bg-blue-50',\n        description: 'Watered the plant'\n      },\n      repot: {\n        label: 'Repot',\n        icon: '🪴',\n        color: 'text-amber-600 bg-amber-50',\n        description: 'Repotted with fresh soil'\n      },\n      prune: {\n        label: 'Prune',\n        icon: '✂️',\n        color: 'text-purple-600 bg-purple-50',\n        description: 'Pruned dead or overgrown parts'\n      },\n      inspect: {\n        label: 'Inspect',\n        icon: '🔍',\n        color: 'text-indigo-600 bg-indigo-50',\n        description: 'Inspected for pests or issues'\n      },\n      other: {\n        label: 'Other',\n        icon: '📝',\n        color: 'text-gray-600 bg-gray-50',\n        description: 'Other care activity'\n      }\n    };\n    return displays[careType];\n  },\n\n  // Parse fertilizer schedule to days\n  parseFertilizerSchedule: (schedule: string): number => {\n    if (!schedule) return 30;\n    \n    const scheduleMap: Record<string, number> = {\n      // Legacy formats\n      'weekly': 7,\n      'biweekly': 14,\n      'monthly': 30,\n      'bimonthly': 60,\n      'quarterly': 90,\n      // Week-based formats\n      '1 week': 7,\n      '2 weeks': 14,\n      '1 month': 30,\n      '2 months': 60,\n      '3 months': 90,\n      // Your actual database formats\n      'every 2 weeks': 14,\n      'every 2-3 weeks': 18,        // Average of 2-3 weeks\n      'every 2-4 weeks': 21,        // Average of 2-4 weeks  \n      'every 3-4 weeks': 24,        // Average of 3-4 weeks\n      'every 4 weeks': 28,          // 4 weeks\n      'every 4-6 weeks': 35,        // Average of 4-6 weeks\n      'every 6-8 weeks': 49,        // Average of 6-8 weeks\n      'every 17 weeks': 119,        // 17 weeks\n    };\n\n    // Check if it's a predefined schedule\n    if (scheduleMap[schedule]) {\n      return scheduleMap[schedule];\n    }\n\n    // Try to parse as custom number of days\n    const customDays = parseInt(schedule, 10);\n    if (!isNaN(customDays) && customDays > 0) {\n      return customDays;\n    }\n\n    // Default to monthly if unable to parse\n    return 30;\n  },\n\n  // Calculate next fertilizer due date\n  calculateNextFertilizerDue: (lastFertilized: Date | null, schedule: string): Date | null => {\n    if (!lastFertilized) return null;\n\n    const intervalDays = careHelpers.parseFertilizerSchedule(schedule);\n    const nextDue = new Date(lastFertilized);\n    nextDue.setDate(nextDue.getDate() + intervalDays);\n    \n    return nextDue;\n  },\n\n  // Calculate care status based on fertilizer due date\n  calculateCareStatus: (fertilizerDue: Date | null): CareStatus => {\n    if (!fertilizerDue) return 'unknown';\n    \n    const now = new Date();\n    const diffMs = fertilizerDue.getTime() - now.getTime();\n    const diffDays = Math.ceil(diffMs / (1000 * 60 * 60 * 24));\n    \n    if (diffDays < 0) return 'overdue';\n    if (diffDays === 0) return 'due_today';\n    if (diffDays <= 7) return 'due_soon';\n    return 'healthy';\n  },\n\n  // Calculate care urgency for prioritization\n  calculateCareUrgency: (fertilizerDue: Date | null): CareUrgency => {\n    if (!fertilizerDue) return 'none';\n    \n    const now = new Date();\n    const diffMs = fertilizerDue.getTime() - now.getTime();\n    const diffDays = Math.ceil(diffMs / (1000 * 60 * 60 * 24));\n    \n    if (diffDays < -7) return 'critical';\n    if (diffDays < 0) return 'high';\n    if (diffDays <= 1) return 'medium';\n    if (diffDays <= 7) return 'low';\n    return 'none';\n  },\n\n  // Calculate days until fertilizer due (negative if overdue)\n  calculateDaysUntilFertilizerDue: (fertilizerDue: Date | null): number | null => {\n    if (!fertilizerDue) return null;\n    \n    const now = new Date();\n    const diffMs = fertilizerDue.getTime() - now.getTime();\n    return Math.ceil(diffMs / (1000 * 60 * 60 * 24));\n  },\n\n  // Calculate days since last fertilized\n  calculateDaysSinceLastFertilized: (lastFertilized: Date | null): number | null => {\n    if (!lastFertilized) return null;\n    \n    const now = new Date();\n    const diffMs = now.getTime() - lastFertilized.getTime();\n    return Math.floor(diffMs / (1000 * 60 * 60 * 24));\n  },\n\n  // Calculate days since last repot\n  calculateDaysSinceLastRepot: (lastRepot: Date | null): number | null => {\n    if (!lastRepot) return null;\n    \n    const now = new Date();\n    const diffMs = now.getTime() - lastRepot.getTime();\n    return Math.floor(diffMs / (1000 * 60 * 60 * 24));\n  },\n\n  // Calculate care consistency score (0-100)\n  calculateCareConsistencyScore: (\n    careHistory: CareHistory[],\n    schedule: string,\n    plantCreatedAt: Date\n  ): number => {\n    if (careHistory.length === 0) return 0;\n\n    const intervalDays = careHelpers.parseFertilizerSchedule(schedule);\n    const now = new Date();\n    const totalDays = Math.floor((now.getTime() - plantCreatedAt.getTime()) / (1000 * 60 * 60 * 24));\n    \n    // Calculate expected number of care events\n    const expectedCareEvents = Math.floor(totalDays / intervalDays);\n    if (expectedCareEvents === 0) return 100;\n\n    // Calculate actual care events (only fertilizer for consistency score)\n    const fertilizerEvents = careHistory.filter(care => care.careType === 'fertilizer');\n    const actualCareEvents = fertilizerEvents.length;\n\n    // Calculate score based on adherence to schedule\n    const adherenceScore = Math.min(100, (actualCareEvents / expectedCareEvents) * 100);\n\n    // Bonus points for recent care (within last interval)\n    const lastCare = fertilizerEvents[fertilizerEvents.length - 1];\n    const daysSinceLastCare = lastCare \n      ? Math.floor((now.getTime() - lastCare.careDate.getTime()) / (1000 * 60 * 60 * 24))\n      : Infinity;\n\n    const recentCareBonus = daysSinceLastCare <= intervalDays ? 10 : 0;\n\n    return Math.min(100, adherenceScore + recentCareBonus);\n  },\n\n  // Get care status color for UI\n  getCareStatusColor: (status: CareStatus): string => {\n    switch (status) {\n      case 'overdue': return 'text-red-600 bg-red-50 border-red-200';\n      case 'due_today': return 'text-amber-600 bg-amber-50 border-amber-200';\n      case 'due_soon': return 'text-yellow-600 bg-yellow-50 border-yellow-200';\n      case 'healthy': return 'text-green-600 bg-green-50 border-green-200';\n      case 'unknown': return 'text-gray-600 bg-gray-50 border-gray-200';\n      default: return 'text-gray-600 bg-gray-50 border-gray-200';\n    }\n  },\n\n  // Get care urgency color for UI\n  getCareUrgencyColor: (urgency: CareUrgency): string => {\n    switch (urgency) {\n      case 'critical': return 'bg-red-500';\n      case 'high': return 'bg-red-400';\n      case 'medium': return 'bg-amber-400';\n      case 'low': return 'bg-yellow-400';\n      case 'none': return 'bg-green-400';\n      default: return 'bg-gray-400';\n    }\n  },\n\n  // Format care date for display\n  formatCareDate: (date: Date): string => {\n    const now = new Date();\n    const diffMs = now.getTime() - date.getTime();\n    const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));\n\n    if (diffDays === 0) return 'Today';\n    if (diffDays === 1) return 'Yesterday';\n    if (diffDays < 7) return `${diffDays} days ago`;\n    if (diffDays < 30) return `${Math.floor(diffDays / 7)} weeks ago`;\n    if (diffDays < 365) return `${Math.floor(diffDays / 30)} months ago`;\n    return `${Math.floor(diffDays / 365)} years ago`;\n  },\n\n  // Validate care form data\n  validateCareForm: (data: CareFormData): CareValidationResult => {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n\n    // Required fields\n    if (!data.plantInstanceId) {\n      errors.push('Plant instance is required');\n    }\n\n    if (!data.careType) {\n      errors.push('Care type is required');\n    }\n\n    if (!data.careDate) {\n      errors.push('Care date is required');\n    }\n\n    // Date validation\n    if (data.careDate) {\n      const now = new Date();\n      if (data.careDate > now) {\n        warnings.push('Care date is in the future');\n      }\n\n      const oneYearAgo = new Date();\n      oneYearAgo.setFullYear(oneYearAgo.getFullYear() - 1);\n      if (data.careDate < oneYearAgo) {\n        warnings.push('Care date is more than a year ago');\n      }\n    }\n\n    // Care type specific validation\n    if (data.careType === 'fertilizer' && !data.fertilizerType) {\n      warnings.push('Consider specifying fertilizer type for better tracking');\n    }\n\n    if (data.careType === 'repot' && (!data.potSize || !data.soilType)) {\n      warnings.push('Consider specifying pot size and soil type for repotting records');\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors,\n      warnings\n    };\n  },\n\n  // Create care timeline from history\n  createCareTimeline: (careHistory: CareHistory[]): CareTimelineEntry[] => {\n    const sortedHistory = [...careHistory].sort((a, b) => \n      b.careDate.getTime() - a.careDate.getTime()\n    );\n\n    return sortedHistory.map((care, index) => {\n      const nextCare = sortedHistory[index + 1];\n      const daysSinceLastCare = nextCare \n        ? Math.floor((care.careDate.getTime() - nextCare.careDate.getTime()) / (1000 * 60 * 60 * 24))\n        : undefined;\n\n      // Determine if care was on schedule (simplified logic)\n      const wasOnSchedule = care.careType === 'fertilizer' \n        ? daysSinceLastCare ? daysSinceLastCare <= 35 : true // Within 35 days is reasonable\n        : true;\n\n      return {\n        id: care.id,\n        date: care.careDate,\n        careType: care.careType,\n        notes: care.notes || undefined,\n        fertilizerType: care.fertilizerType || undefined,\n        potSize: care.potSize || undefined,\n        soilType: care.soilType || undefined,\n        images: care.images,\n        daysSinceLastCare,\n        wasOnSchedule\n      };\n    });\n  },\n\n  // Get default quick care actions\n  getDefaultQuickCareActions: (): QuickCareAction[] => [\n    {\n      id: 'fertilize',\n      label: 'Fertilize',\n      icon: '🌱',\n      careType: 'fertilizer',\n      color: 'bg-green-500 hover:bg-green-600',\n      description: 'Apply fertilizer to promote growth',\n      isEnabled: true\n    },\n    {\n      id: 'water',\n      label: 'Water',\n      icon: '💧',\n      careType: 'water',\n      color: 'bg-blue-500 hover:bg-blue-600',\n      description: 'Water the plant',\n      isEnabled: true\n    },\n    {\n      id: 'inspect',\n      label: 'Inspect',\n      icon: '🔍',\n      careType: 'inspect',\n      color: 'bg-indigo-500 hover:bg-indigo-600',\n      description: 'Check for pests or issues',\n      isEnabled: true\n    },\n    {\n      id: 'prune',\n      label: 'Prune',\n      icon: '✂️',\n      careType: 'prune',\n      color: 'bg-purple-500 hover:bg-purple-600',\n      description: 'Remove dead or overgrown parts',\n      isEnabled: true\n    }\n  ]\n};"],"names":["careHelpers","getCareTypeDisplay","careType","displays","fertilizer","label","icon","color","description","water","repot","prune","inspect","other","parseFertilizerSchedule","schedule","scheduleMap","customDays","parseInt","isNaN","calculateNextFertilizerDue","lastFertilized","intervalDays","nextDue","Date","setDate","getDate","calculateCareStatus","fertilizerDue","now","diffMs","getTime","diffDays","Math","ceil","calculateCareUrgency","calculateDaysUntilFertilizerDue","calculateDaysSinceLastFertilized","floor","calculateDaysSinceLastRepot","lastRepot","calculateCareConsistencyScore","careHistory","plantCreatedAt","length","totalDays","expectedCareEvents","fertilizerEvents","filter","care","actualCareEvents","adherenceScore","min","lastCare","daysSinceLastCare","careDate","Infinity","recentCareBonus","getCareStatusColor","status","getCareUrgencyColor","urgency","formatCareDate","date","validateCareForm","data","errors","warnings","plantInstanceId","push","oneYearAgo","setFullYear","getFullYear","fertilizerType","potSize","soilType","isValid","createCareTimeline","sortedHistory","sort","a","b","map","index","nextCare","undefined","wasOnSchedule","id","notes","images","getDefaultQuickCareActions","isEnabled"],"mappings":"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"}