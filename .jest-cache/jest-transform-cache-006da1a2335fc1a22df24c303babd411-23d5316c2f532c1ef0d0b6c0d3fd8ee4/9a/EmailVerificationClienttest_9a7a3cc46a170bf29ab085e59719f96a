dd388e2056659c5154bd632d6a379285
"use strict";
// Mock next/navigation
jest.mock('next/navigation', ()=>({
        useRouter: jest.fn()
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("@testing-library/react");
const _userevent = /*#__PURE__*/ _interop_require_default(require("@testing-library/user-event"));
const _navigation = require("next/navigation");
const _EmailVerificationClient = /*#__PURE__*/ _interop_require_default(require("../EmailVerificationClient"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Mock fetch
global.fetch = jest.fn();
describe('EmailVerificationClient', ()=>{
    const mockPush = jest.fn();
    const mockRefresh = jest.fn();
    const mockFetch = global.fetch;
    beforeEach(()=>{
        _navigation.useRouter.mockReturnValue({
            push: mockPush,
            refresh: mockRefresh
        });
        mockFetch.mockClear();
        mockPush.mockClear();
        mockRefresh.mockClear();
        jest.clearAllTimers();
        jest.useFakeTimers();
    });
    afterEach(()=>{
        jest.runOnlyPendingTimers();
        jest.useRealTimers();
    });
    it('renders the verification form correctly', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_EmailVerificationClient.default, {
            email: "test@example.com"
        }));
        expect(_react.screen.getByText('Enter verification code')).toBeInTheDocument();
        expect(_react.screen.getByText(/We've sent a 6-digit code to your email/)).toBeInTheDocument();
        expect(_react.screen.getByRole('button', {
            name: /verify email/i
        })).toBeInTheDocument();
        expect(_react.screen.getByText("Didn't receive the code? Resend it")).toBeInTheDocument();
    });
    it('auto-submits when 6-digit code is entered', async ()=>{
        const user = _userevent.default.setup({
            advanceTimers: jest.advanceTimersByTime
        });
        mockFetch.mockResolvedValueOnce({
            ok: true,
            json: async ()=>({
                    success: true
                })
        });
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_EmailVerificationClient.default, {
            email: "test@example.com"
        }));
        const inputs = _react.screen.getAllByRole('textbox');
        // Enter 6 digits
        await (0, _react.act)(async ()=>{
            await user.type(inputs[0], '1');
            await user.type(inputs[1], '2');
            await user.type(inputs[2], '3');
            await user.type(inputs[3], '4');
            await user.type(inputs[4], '5');
            await user.type(inputs[5], '6');
        });
        // Wait for auto-submit
        await (0, _react.waitFor)(()=>{
            expect(mockFetch).toHaveBeenCalledWith('/api/auth/verify-email', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    email: 'test@example.com',
                    code: '123456'
                })
            });
        });
    });
    it('shows success state and redirects after successful verification', async ()=>{
        const user = _userevent.default.setup({
            advanceTimers: jest.advanceTimersByTime
        });
        mockFetch.mockResolvedValueOnce({
            ok: true,
            json: async ()=>({
                    success: true
                })
        });
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_EmailVerificationClient.default, {
            email: "test@example.com"
        }));
        const inputs = _react.screen.getAllByRole('textbox');
        // Enter complete code
        await (0, _react.act)(async ()=>{
            await user.type(inputs[0], '123456');
        });
        // Wait for success state
        await (0, _react.waitFor)(()=>{
            expect(_react.screen.getByText('Email verified successfully! ðŸŽ‰')).toBeInTheDocument();
            expect(_react.screen.getByText(/Welcome to Fancy Planties/)).toBeInTheDocument();
        });
        // Fast-forward timer for redirect
        (0, _react.act)(()=>{
            jest.advanceTimersByTime(1500);
        });
        expect(mockPush).toHaveBeenCalledWith('/dashboard');
        expect(mockRefresh).toHaveBeenCalled();
    });
    it('handles different error types correctly', async ()=>{
        const user = _userevent.default.setup({
            advanceTimers: jest.advanceTimersByTime
        });
        const errorCases = [
            {
                error: 'CODE_EXPIRED',
                expectedMessage: 'This code has expired. Please request a new one.'
            },
            {
                error: 'CODE_INVALID',
                expectedMessage: 'Invalid code. Please check and try again.'
            },
            {
                error: 'TOO_MANY_ATTEMPTS',
                expectedMessage: 'Too many attempts. Please request a new code.'
            },
            {
                error: 'ALREADY_VERIFIED',
                expectedMessage: 'Your email is already verified.'
            }
        ];
        for (const { error, expectedMessage } of errorCases){
            mockFetch.mockResolvedValueOnce({
                ok: false,
                json: async ()=>({
                        error
                    })
            });
            const { rerender } = (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_EmailVerificationClient.default, {
                email: "test@example.com"
            }));
            const inputs = _react.screen.getAllByRole('textbox');
            await (0, _react.act)(async ()=>{
                await user.type(inputs[0], '123456');
            });
            await (0, _react.waitFor)(()=>{
                expect(_react.screen.getByText(expectedMessage)).toBeInTheDocument();
            });
            // Clean up for next iteration
            rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {}));
            mockFetch.mockClear();
        }
    });
    it('handles network errors gracefully', async ()=>{
        const user = _userevent.default.setup({
            advanceTimers: jest.advanceTimersByTime
        });
        mockFetch.mockRejectedValueOnce(new Error('Network error'));
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_EmailVerificationClient.default, {
            email: "test@example.com"
        }));
        const inputs = _react.screen.getAllByRole('textbox');
        await (0, _react.act)(async ()=>{
            await user.type(inputs[0], '123456');
        });
        await (0, _react.waitFor)(()=>{
            expect(_react.screen.getByText('Network error. Please check your connection and try again.')).toBeInTheDocument();
        });
    });
    it('handles resend functionality correctly', async ()=>{
        const user = _userevent.default.setup({
            advanceTimers: jest.advanceTimersByTime
        });
        mockFetch.mockResolvedValueOnce({
            ok: true,
            json: async ()=>({
                    success: true,
                    cooldownSeconds: 60
                })
        });
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_EmailVerificationClient.default, {
            email: "test@example.com"
        }));
        const resendButton = _react.screen.getByText("Didn't receive the code? Resend it");
        await (0, _react.act)(async ()=>{
            await user.click(resendButton);
        });
        expect(mockFetch).toHaveBeenCalledWith('/api/auth/resend-verification', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                email: 'test@example.com'
            })
        });
        // Should show cooldown
        await (0, _react.waitFor)(()=>{
            expect(_react.screen.getByText(/Resend code in 60s/)).toBeInTheDocument();
        });
    });
    it('shows cooldown timer correctly', async ()=>{
        const user = _userevent.default.setup({
            advanceTimers: jest.advanceTimersByTime
        });
        mockFetch.mockResolvedValueOnce({
            ok: true,
            json: async ()=>({
                    success: true,
                    cooldownSeconds: 3
                })
        });
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_EmailVerificationClient.default, {
            email: "test@example.com"
        }));
        const resendButton = _react.screen.getByText("Didn't receive the code? Resend it");
        await (0, _react.act)(async ()=>{
            await user.click(resendButton);
        });
        // Should show initial cooldown
        await (0, _react.waitFor)(()=>{
            expect(_react.screen.getByText(/Resend code in 3s/)).toBeInTheDocument();
        });
        // Advance timer by 1 second
        (0, _react.act)(()=>{
            jest.advanceTimersByTime(1000);
        });
        expect(_react.screen.getByText(/Resend code in 2s/)).toBeInTheDocument();
        // Advance timer by 2 more seconds
        (0, _react.act)(()=>{
            jest.advanceTimersByTime(2000);
        });
        expect(_react.screen.getByText("Didn't receive the code? Resend it")).toBeInTheDocument();
    });
    it('disables inputs and buttons during loading', async ()=>{
        const user = _userevent.default.setup({
            advanceTimers: jest.advanceTimersByTime
        });
        // Mock a slow response
        mockFetch.mockImplementationOnce(()=>new Promise((resolve)=>setTimeout(()=>resolve({
                        ok: true,
                        json: async ()=>({
                                success: true
                            })
                    }), 1000)));
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_EmailVerificationClient.default, {
            email: "test@example.com"
        }));
        const inputs = _react.screen.getAllByRole('textbox');
        const submitButton = _react.screen.getByRole('button', {
            name: /verify email/i
        });
        // Enter code to trigger loading
        await (0, _react.act)(async ()=>{
            await user.type(inputs[0], '123456');
        });
        // Should show loading state
        await (0, _react.waitFor)(()=>{
            expect(_react.screen.getByText('Verifying...')).toBeInTheDocument();
        });
        // Inputs should be disabled
        inputs.forEach((input)=>{
            expect(input).toBeDisabled();
        });
        // Submit button should be disabled and show loading
        expect(submitButton).toBeDisabled();
    });
    it('clears error when user starts typing', async ()=>{
        const user = _userevent.default.setup({
            advanceTimers: jest.advanceTimersByTime
        });
        mockFetch.mockResolvedValueOnce({
            ok: false,
            json: async ()=>({
                    error: 'CODE_INVALID'
                })
        });
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_EmailVerificationClient.default, {
            email: "test@example.com"
        }));
        const inputs = _react.screen.getAllByRole('textbox');
        // Enter invalid code
        await (0, _react.act)(async ()=>{
            await user.type(inputs[0], '123456');
        });
        // Should show error
        await (0, _react.waitFor)(()=>{
            expect(_react.screen.getByText('Invalid code. Please check and try again.')).toBeInTheDocument();
        });
        // Start typing new code
        await (0, _react.act)(async ()=>{
            await user.clear(inputs[0]);
            await user.type(inputs[0], '1');
        });
        // Error should be cleared
        expect(_react.screen.queryByText('Invalid code. Please check and try again.')).not.toBeInTheDocument();
    });
    it('handles manual form submission with incomplete code', async ()=>{
        const user = _userevent.default.setup({
            advanceTimers: jest.advanceTimersByTime
        });
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_EmailVerificationClient.default, {
            email: "test@example.com"
        }));
        const inputs = _react.screen.getAllByRole('textbox');
        const submitButton = _react.screen.getByRole('button', {
            name: /verify email/i
        });
        // Enter incomplete code (5 digits)
        await (0, _react.act)(async ()=>{
            await user.type(inputs[0], '1');
            await user.type(inputs[1], '2');
            await user.type(inputs[2], '3');
            await user.type(inputs[3], '4');
            await user.type(inputs[4], '5');
        });
        // Manually click submit with incomplete code
        await (0, _react.act)(async ()=>{
            await user.click(submitButton);
        });
        // Should show error for incomplete code
        await (0, _react.waitFor)(()=>{
            expect(_react.screen.getByText('Please enter a 6-digit code')).toBeInTheDocument();
        });
    });
    it('has proper accessibility attributes', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_EmailVerificationClient.default, {
            email: "test@example.com"
        }));
        // Check for proper headings
        expect(_react.screen.getByRole('heading', {
            name: /enter verification code/i
        })).toBeInTheDocument();
        // Check for form
        expect(_react.screen.getByRole('form')).toBeInTheDocument();
        // Check for buttons
        expect(_react.screen.getByRole('button', {
            name: /verify email/i
        })).toBeInTheDocument();
        // Check for proper text content
        expect(_react.screen.getByText(/We've sent a 6-digit code to your email/)).toBeInTheDocument();
    });
});

//# sourceMappingURL=data:application/json;base64,