{"version":3,"names":["cov_1zujcacp07","actualCoverage","s","POST","request","f","user","_server1","requireAuthSession","body","json","validation","_careschemas","careValidation","validateCareForm","careDate","Date","success","b","_server","NextResponse","error","issues","message","status","result","_careservice","CareService","logCareEvent","id","data","careHistory","console"],"sources":["/Users/stefanbekker/projects/fancy-planties/src/app/api/care/log/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { requireAuthSession } from '@/lib/auth/server';\nimport { CareService } from '@/lib/services/care-service';\nimport { careValidation } from '@/lib/validation/care-schemas';\n\nexport async function POST(request: NextRequest) {\n  try {\n    const { user } = await requireAuthSession();\n    const body = await request.json();\n    \n    // Validate the care form data\n    const validation = careValidation.validateCareForm({\n      ...body,\n      careDate: new Date(body.careDate),\n    });\n    \n    if (!validation.success) {\n      return NextResponse.json(\n        { error: validation.error.issues[0]?.message || 'Invalid care data' },\n        { status: 400 }\n      );\n    }\n    \n    const result = await CareService.logCareEvent(user.id, validation.data);\n    \n    if (!result.success) {\n      return NextResponse.json(\n        { error: result.error },\n        { status: 400 }\n      );\n    }\n    \n    return NextResponse.json(result.careHistory);\n  } catch (error) {\n    console.error('Error logging care:', error);\n    return NextResponse.json(\n      { error: 'Failed to log care event' },\n      { status: 500 }\n    );\n  }\n}"],"mappings":"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","ignoreList":[]}