9f86b5b29555cc918bb28a1ab7268118
"use strict";

/* istanbul ignore next */
function cov_fugt83zak() {
  var path = "/Users/stefanbekker/projects/fancy-planties/src/app/api/import/csv/route.ts";
  var hash = "a317b833262418af881af21d04e32cf086dbbded";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/stefanbekker/projects/fancy-planties/src/app/api/import/csv/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 18,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 19
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 20
        }
      },
      "6": {
        start: {
          line: 19,
          column: 16
        },
        end: {
          line: 19,
          column: 38
        }
      },
      "7": {
        start: {
          line: 20,
          column: 17
        },
        end: {
          line: 20,
          column: 55
        }
      },
      "8": {
        start: {
          line: 21,
          column: 26
        },
        end: {
          line: 21,
          column: 80
        }
      },
      "9": {
        start: {
          line: 22,
          column: 20
        },
        end: {
          line: 22,
          column: 69
        }
      },
      "10": {
        start: {
          line: 23,
          column: 13
        },
        end: {
          line: 23,
          column: 27
        }
      },
      "11": {
        start: {
          line: 24,
          column: 25
        },
        end: {
          line: 24,
          column: 65
        }
      },
      "12": {
        start: {
          line: 26,
          column: 4
        },
        end: {
          line: 68,
          column: 5
        }
      },
      "13": {
        start: {
          line: 27,
          column: 25
        },
        end: {
          line: 27,
          column: 62
        }
      },
      "14": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 34,
          column: 9
        }
      },
      "15": {
        start: {
          line: 29,
          column: 12
        },
        end: {
          line: 33,
          column: 15
        }
      },
      "16": {
        start: {
          line: 35,
          column: 21
        },
        end: {
          line: 35,
          column: 41
        }
      },
      "17": {
        start: {
          line: 37,
          column: 30
        },
        end: {
          line: 45,
          column: 10
        }
      },
      "18": {
        start: {
          line: 46,
          column: 50
        },
        end: {
          line: 46,
          column: 75
        }
      },
      "19": {
        start: {
          line: 48,
          column: 23
        },
        end: {
          line: 51,
          column: 10
        }
      },
      "20": {
        start: {
          line: 52,
          column: 8
        },
        end: {
          line: 52,
          column: 49
        }
      },
      "21": {
        start: {
          line: 54,
          column: 8
        },
        end: {
          line: 54,
          column: 50
        }
      },
      "22": {
        start: {
          line: 55,
          column: 8
        },
        end: {
          line: 62,
          column: 9
        }
      },
      "23": {
        start: {
          line: 56,
          column: 12
        },
        end: {
          line: 61,
          column: 15
        }
      },
      "24": {
        start: {
          line: 63,
          column: 8
        },
        end: {
          line: 67,
          column: 11
        }
      },
      "25": {
        start: {
          line: 71,
          column: 4
        },
        end: {
          line: 91,
          column: 5
        }
      },
      "26": {
        start: {
          line: 72,
          column: 25
        },
        end: {
          line: 72,
          column: 62
        }
      },
      "27": {
        start: {
          line: 73,
          column: 8
        },
        end: {
          line: 79,
          column: 9
        }
      },
      "28": {
        start: {
          line: 74,
          column: 12
        },
        end: {
          line: 78,
          column: 15
        }
      },
      "29": {
        start: {
          line: 80,
          column: 24
        },
        end: {
          line: 80,
          column: 64
        }
      },
      "30": {
        start: {
          line: 81,
          column: 8
        },
        end: {
          line: 83,
          column: 11
        }
      },
      "31": {
        start: {
          line: 85,
          column: 8
        },
        end: {
          line: 85,
          column: 51
        }
      },
      "32": {
        start: {
          line: 86,
          column: 8
        },
        end: {
          line: 90,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        },
        loc: {
          start: {
            line: 12,
            column: 15
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 16
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "POST",
        decl: {
          start: {
            line: 25,
            column: 15
          },
          end: {
            line: 25,
            column: 19
          }
        },
        loc: {
          start: {
            line: 25,
            column: 29
          },
          end: {
            line: 69,
            column: 1
          }
        },
        line: 25
      },
      "4": {
        name: "GET",
        decl: {
          start: {
            line: 70,
            column: 15
          },
          end: {
            line: 70,
            column: 18
          }
        },
        loc: {
          start: {
            line: 70,
            column: 28
          },
          end: {
            line: 92,
            column: 1
          }
        },
        line: 70
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 28,
            column: 8
          },
          end: {
            line: 34,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 28,
            column: 8
          },
          end: {
            line: 34,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 28
      },
      "1": {
        loc: {
          start: {
            line: 46,
            column: 34
          },
          end: {
            line: 46,
            column: 45
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 46,
            column: 43
          },
          end: {
            line: 46,
            column: 45
          }
        }],
        line: 46
      },
      "2": {
        loc: {
          start: {
            line: 55,
            column: 8
          },
          end: {
            line: 62,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 55,
            column: 8
          },
          end: {
            line: 62,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 55
      },
      "3": {
        loc: {
          start: {
            line: 73,
            column: 8
          },
          end: {
            line: 79,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 73,
            column: 8
          },
          end: {
            line: 79,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 73
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0
    },
    b: {
      "0": [0, 0],
      "1": [0],
      "2": [0, 0],
      "3": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/stefanbekker/projects/fancy-planties/src/app/api/import/csv/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport { validateRequest } from '@/lib/auth/server';\nimport { CSVImportService, type ImportType } from '@/lib/services/csv-import-service';\nimport { csvFileSchema, csvImportConfigSchema } from '@/lib/validation/csv-schemas';\nimport { z } from 'zod';\n\nconst csvImportService = new CSVImportService();\n\n// POST /api/import/csv - Start CSV import\nexport async function POST(request: NextRequest) {\n  try {\n    const { user } = await validateRequest();\n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const body = await request.json();\n    \n    // Validate request body\n    const requestSchema = z.object({\n      file: csvFileSchema,\n      importType: z.enum(['plant_taxonomy', 'plant_instances', 'propagations']),\n      config: csvImportConfigSchema.partial().optional(),\n    });\n\n    const { file, importType, config = {} } = requestSchema.parse(body);\n\n    // Start import\n    const result = await csvImportService.startImport(\n      file,\n      importType as ImportType,\n      { ...config, userId: user.id }\n    );\n\n    return NextResponse.json(result);\n\n  } catch (error) {\n    console.error('CSV import error:', error);\n    \n    if (error instanceof z.ZodError) {\n      return NextResponse.json(\n        { error: 'Validation error', details: error.issues },\n        { status: 400 }\n      );\n    }\n\n    return NextResponse.json(\n      { error: 'Failed to start import' },\n      { status: 500 }\n    );\n  }\n}\n\n// GET /api/import/csv - Get user's imports\nexport async function GET(request: NextRequest) {\n  try {\n    const { user } = await validateRequest();\n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const imports = csvImportService.getUserImports(user.id);\n    return NextResponse.json({ imports });\n\n  } catch (error) {\n    console.error('Get imports error:', error);\n    return NextResponse.json(\n      { error: 'Failed to get imports' },\n      { status: 500 }\n    );\n  }\n}"],
      names: ["GET", "POST", "csvImportService", "CSVImportService", "request", "user", "validateRequest", "NextResponse", "json", "error", "status", "body", "requestSchema", "z", "object", "file", "csvFileSchema", "importType", "enum", "config", "csvImportConfigSchema", "partial", "optional", "parse", "result", "startImport", "userId", "id", "console", "ZodError", "details", "issues", "imports", "getUserImports"],
      mappings: ";;;;;;;;;;;QAsDsBA;eAAAA;;QA7CAC;eAAAA;;;wBAToB;yBACV;kCACkB;4BACG;qBACnC;AAElB,MAAMC,mBAAmB,IAAIC,kCAAgB;AAGtC,eAAeF,KAAKG,OAAoB;IAC7C,IAAI;QACF,MAAM,EAAEC,IAAI,EAAE,GAAG,MAAMC,IAAAA,wBAAe;QACtC,IAAI,CAACD,MAAM;YACT,OAAOE,oBAAY,CAACC,IAAI,CAAC;gBAAEC,OAAO;YAAe,GAAG;gBAAEC,QAAQ;YAAI;QACpE;QAEA,MAAMC,OAAO,MAAMP,QAAQI,IAAI;QAE/B,wBAAwB;QACxB,MAAMI,gBAAgBC,MAAC,CAACC,MAAM,CAAC;YAC7BC,MAAMC,yBAAa;YACnBC,YAAYJ,MAAC,CAACK,IAAI,CAAC;gBAAC;gBAAkB;gBAAmB;aAAe;YACxEC,QAAQC,iCAAqB,CAACC,OAAO,GAAGC,QAAQ;QAClD;QAEA,MAAM,EAAEP,IAAI,EAAEE,UAAU,EAAEE,SAAS,CAAC,CAAC,EAAE,GAAGP,cAAcW,KAAK,CAACZ;QAE9D,eAAe;QACf,MAAMa,SAAS,MAAMtB,iBAAiBuB,WAAW,CAC/CV,MACAE,YACA;YAAE,GAAGE,MAAM;YAAEO,QAAQrB,KAAKsB,EAAE;QAAC;QAG/B,OAAOpB,oBAAY,CAACC,IAAI,CAACgB;IAE3B,EAAE,OAAOf,OAAO;QACdmB,QAAQnB,KAAK,CAAC,qBAAqBA;QAEnC,IAAIA,iBAAiBI,MAAC,CAACgB,QAAQ,EAAE;YAC/B,OAAOtB,oBAAY,CAACC,IAAI,CACtB;gBAAEC,OAAO;gBAAoBqB,SAASrB,MAAMsB,MAAM;YAAC,GACnD;gBAAErB,QAAQ;YAAI;QAElB;QAEA,OAAOH,oBAAY,CAACC,IAAI,CACtB;YAAEC,OAAO;QAAyB,GAClC;YAAEC,QAAQ;QAAI;IAElB;AACF;AAGO,eAAeV,IAAII,OAAoB;IAC5C,IAAI;QACF,MAAM,EAAEC,IAAI,EAAE,GAAG,MAAMC,IAAAA,wBAAe;QACtC,IAAI,CAACD,MAAM;YACT,OAAOE,oBAAY,CAACC,IAAI,CAAC;gBAAEC,OAAO;YAAe,GAAG;gBAAEC,QAAQ;YAAI;QACpE;QAEA,MAAMsB,UAAU9B,iBAAiB+B,cAAc,CAAC5B,KAAKsB,EAAE;QACvD,OAAOpB,oBAAY,CAACC,IAAI,CAAC;YAAEwB;QAAQ;IAErC,EAAE,OAAOvB,OAAO;QACdmB,QAAQnB,KAAK,CAAC,sBAAsBA;QACpC,OAAOF,oBAAY,CAACC,IAAI,CACtB;YAAEC,OAAO;QAAwB,GACjC;YAAEC,QAAQ;QAAI;IAElB;AACF"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "a317b833262418af881af21d04e32cf086dbbded"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_fugt83zak = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_fugt83zak();
cov_fugt83zak().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_fugt83zak().f[0]++;
  cov_fugt83zak().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_fugt83zak().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_fugt83zak().s[3]++;
_export(exports, {
  get GET() {
    /* istanbul ignore next */
    cov_fugt83zak().f[1]++;
    cov_fugt83zak().s[4]++;
    return GET;
  },
  get POST() {
    /* istanbul ignore next */
    cov_fugt83zak().f[2]++;
    cov_fugt83zak().s[5]++;
    return POST;
  }
});
const _server =
/* istanbul ignore next */
(cov_fugt83zak().s[6]++, require("next/server"));
const _server1 =
/* istanbul ignore next */
(cov_fugt83zak().s[7]++, require("../../../../lib/auth/server"));
const _csvimportservice =
/* istanbul ignore next */
(cov_fugt83zak().s[8]++, require("../../../../lib/services/csv-import-service"));
const _csvschemas =
/* istanbul ignore next */
(cov_fugt83zak().s[9]++, require("../../../../lib/validation/csv-schemas"));
const _zod =
/* istanbul ignore next */
(cov_fugt83zak().s[10]++, require("zod"));
const csvImportService =
/* istanbul ignore next */
(cov_fugt83zak().s[11]++, new _csvimportservice.CSVImportService());
async function POST(request) {
  /* istanbul ignore next */
  cov_fugt83zak().f[3]++;
  cov_fugt83zak().s[12]++;
  try {
    const {
      user
    } =
    /* istanbul ignore next */
    (cov_fugt83zak().s[13]++, await (0, _server1.validateRequest)());
    /* istanbul ignore next */
    cov_fugt83zak().s[14]++;
    if (!user) {
      /* istanbul ignore next */
      cov_fugt83zak().b[0][0]++;
      cov_fugt83zak().s[15]++;
      return _server.NextResponse.json({
        error: 'Unauthorized'
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_fugt83zak().b[0][1]++;
    }
    const body =
    /* istanbul ignore next */
    (cov_fugt83zak().s[16]++, await request.json());
    // Validate request body
    const requestSchema =
    /* istanbul ignore next */
    (cov_fugt83zak().s[17]++, _zod.z.object({
      file: _csvschemas.csvFileSchema,
      importType: _zod.z.enum(['plant_taxonomy', 'plant_instances', 'propagations']),
      config: _csvschemas.csvImportConfigSchema.partial().optional()
    }));
    const {
      file,
      importType,
      config =
      /* istanbul ignore next */
      (cov_fugt83zak().b[1][0]++, {})
    } =
    /* istanbul ignore next */
    (cov_fugt83zak().s[18]++, requestSchema.parse(body));
    // Start import
    const result =
    /* istanbul ignore next */
    (cov_fugt83zak().s[19]++, await csvImportService.startImport(file, importType, {
      ...config,
      userId: user.id
    }));
    /* istanbul ignore next */
    cov_fugt83zak().s[20]++;
    return _server.NextResponse.json(result);
  } catch (error) {
    /* istanbul ignore next */
    cov_fugt83zak().s[21]++;
    console.error('CSV import error:', error);
    /* istanbul ignore next */
    cov_fugt83zak().s[22]++;
    if (error instanceof _zod.z.ZodError) {
      /* istanbul ignore next */
      cov_fugt83zak().b[2][0]++;
      cov_fugt83zak().s[23]++;
      return _server.NextResponse.json({
        error: 'Validation error',
        details: error.issues
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_fugt83zak().b[2][1]++;
    }
    cov_fugt83zak().s[24]++;
    return _server.NextResponse.json({
      error: 'Failed to start import'
    }, {
      status: 500
    });
  }
}
async function GET(request) {
  /* istanbul ignore next */
  cov_fugt83zak().f[4]++;
  cov_fugt83zak().s[25]++;
  try {
    const {
      user
    } =
    /* istanbul ignore next */
    (cov_fugt83zak().s[26]++, await (0, _server1.validateRequest)());
    /* istanbul ignore next */
    cov_fugt83zak().s[27]++;
    if (!user) {
      /* istanbul ignore next */
      cov_fugt83zak().b[3][0]++;
      cov_fugt83zak().s[28]++;
      return _server.NextResponse.json({
        error: 'Unauthorized'
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_fugt83zak().b[3][1]++;
    }
    const imports =
    /* istanbul ignore next */
    (cov_fugt83zak().s[29]++, csvImportService.getUserImports(user.id));
    /* istanbul ignore next */
    cov_fugt83zak().s[30]++;
    return _server.NextResponse.json({
      imports
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_fugt83zak().s[31]++;
    console.error('Get imports error:', error);
    /* istanbul ignore next */
    cov_fugt83zak().s[32]++;
    return _server.NextResponse.json({
      error: 'Failed to get imports'
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,