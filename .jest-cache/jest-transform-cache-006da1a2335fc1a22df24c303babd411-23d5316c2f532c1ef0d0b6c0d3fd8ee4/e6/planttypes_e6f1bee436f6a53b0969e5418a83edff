57695aeb14545ad03ac87d77b520469f
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "plantHelpers", {
    enumerable: true,
    get: function() {
        return plantHelpers;
    }
});
const plantHelpers = {
    // Create display name from plant data
    createDisplayName: (plant)=>{
        return plant.commonName || `${plant.genus} ${plant.species}`;
    },
    // Create scientific name
    createScientificName: (plant)=>{
        return `${plant.genus} ${plant.species}`;
    },
    // Create full taxonomy string
    createFullTaxonomy: (plant)=>{
        return `${plant.family} > ${plant.genus} > ${plant.species}`;
    },
    // Enhance plant with computed properties
    enhancePlant: (plant)=>({
            ...plant,
            displayName: plantHelpers.createDisplayName(plant),
            scientificName: plantHelpers.createScientificName(plant),
            fullTaxonomy: plantHelpers.createFullTaxonomy(plant)
        }),
    // Check if two plants are taxonomically identical
    areTaxonomicallyEqual: (plant1, plant2)=>{
        return plant1.family.toLowerCase() === plant2.family.toLowerCase() && plant1.genus.toLowerCase() === plant2.genus.toLowerCase() && plant1.species.toLowerCase() === plant2.species.toLowerCase();
    },
    // Generate search keywords for a plant
    generateSearchKeywords: (plant)=>{
        const keywords = [
            plant.family.toLowerCase(),
            plant.genus.toLowerCase(),
            plant.species.toLowerCase(),
            plant.commonName.toLowerCase(),
            plantHelpers.createScientificName(plant).toLowerCase()
        ];
        // Add common name variations (split by spaces, commas, etc.)
        const commonNameParts = plant.commonName.toLowerCase().split(/[\s,\-_]+/).filter((part)=>part.length > 2);
        keywords.push(...commonNameParts);
        return [
            ...new Set(keywords)
        ]; // Remove duplicates
    }
};

//# sourceMappingURL=data:application/json;base64,