4c5aa4a3ca5bb930c408195296717ac2
/**
 * Email Verification Flow Integration Tests
 * Tests complete signup and verification process, resend functionality, and rate limiting
 * Requirements: 1.1, 1.4, 2.1, 2.2
 */ "use strict";
// Mock email service
jest.mock('@/lib/services/resend-email-service');
jest.mock('@/lib/services/email-service');
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _databasetestmanager = require("../../test-utils/setup/database-test-manager.js");
const _emailverificationcodeservice = require("../../lib/services/email-verification-code-service");
const _resendemailservice = require("../../lib/services/resend-email-service");
const mockEmailService = {
    sendVerificationEmail: jest.fn()
};
const mockCreateEmailService = _resendemailservice.createEmailService;
const mockSendEmailWithRetry = require('@/lib/services/email-service').sendEmailWithRetry;
// Mock environment variables
const originalEnv = process.env;
beforeAll(()=>{
    process.env = {
        ...originalEnv,
        RESEND_API_KEY: 'test-api-key',
        FROM_EMAIL: 'test@example.com',
        FROM_NAME: 'Test App',
        VERIFICATION_CODE_EXPIRY_MINUTES: '10',
        MAX_VERIFICATION_ATTEMPTS: '5',
        RESEND_COOLDOWN_SECONDS: '60',
        MAX_RESEND_PER_HOUR: '5',
        NODE_ENV: 'test'
    };
});
afterAll(()=>{
    process.env = originalEnv;
});
describe('Email Verification Flow Integration Tests', ()=>{
    let dbManager;
    beforeEach(async ()=>{
        jest.clearAllMocks();
        dbManager = (0, _databasetestmanager.createDatabaseTestManager)();
        // Mock email service to always succeed
        mockCreateEmailService.mockReturnValue(mockEmailService);
        mockSendEmailWithRetry.mockResolvedValue(true);
        mockEmailService.sendVerificationEmail.mockResolvedValue(true);
    });
    afterEach(async ()=>{
        await dbManager.cleanup();
    });
    describe('Complete Signup and Verification Process', ()=>{
        it('should complete full signup and verification workflow', async ()=>{
            // Step 1: Create user and verification code directly
            const user = await dbManager.createTestUser({
                email: 'test@example.com',
                name: 'Test User',
                passwordHash: 'hashed_password',
                isEmailVerified: false
            });
            // Step 2: Generate verification code
            const verificationCode = await _emailverificationcodeservice.emailVerificationCodeService.generateCode(user.id);
            expect(verificationCode).toMatch(/^\d{6}$/);
            // Step 3: Verify the code was stored in database
            const emailCodes = await dbManager.getEmailCodesByUserId(user.id);
            expect(emailCodes).toHaveLength(1);
            expect(emailCodes[0].code).toBe(verificationCode);
            // Step 4: Validate the verification code
            const isValid = await _emailverificationcodeservice.emailVerificationCodeService.validateCode('test@example.com', verificationCode);
            expect(isValid).toBe(true);
            // Step 5: Verify user is now verified in database
            const verifiedUser = await dbManager.getUserById(user.id);
            expect(verifiedUser.isEmailVerified).toBe(true);
            // Step 6: Verify verification code was deleted
            const remainingCodes = await dbManager.getEmailCodesByUserId(user.id);
            expect(remainingCodes).toHaveLength(0);
        });
        it('should handle email service failure gracefully during code generation', async ()=>{
            // Create user
            const user = await dbManager.createTestUser({
                email: 'test@example.com',
                name: 'Test User',
                passwordHash: 'hashed_password',
                isEmailVerified: false
            });
            // Generate verification code (this should work even if email fails)
            const verificationCode = await _emailverificationcodeservice.emailVerificationCodeService.generateCode(user.id);
            expect(verificationCode).toMatch(/^\d{6}$/);
            // Verify code was stored in database
            const emailCodes = await dbManager.getEmailCodesByUserId(user.id);
            expect(emailCodes).toHaveLength(1);
            expect(emailCodes[0].code).toBe(verificationCode);
            // User should still be unverified
            const unverifiedUser = await dbManager.getUserById(user.id);
            expect(unverifiedUser.isEmailVerified).toBe(false);
        });
        it('should reject verification with invalid code', async ()=>{
            // Create user and verification code
            const user = await dbManager.createTestUser({
                email: 'test@example.com',
                name: 'Test User',
                passwordHash: 'hashed_password',
                isEmailVerified: false
            });
            await dbManager.createTestEmailCode({
                userId: user.id,
                code: '123456',
                expiresAt: new Date(Date.now() + 10 * 60 * 1000),
                attemptsUsed: 0
            });
            // Try to verify with wrong code using service directly
            try {
                await _emailverificationcodeservice.emailVerificationCodeService.validateCode('test@example.com', '654321');
                fail('Should have thrown an error for invalid code');
            } catch (error) {
                expect(error.code).toBe('CODE_INVALID');
            }
            // Verify user is still not verified
            const unverifiedUser = await dbManager.getUserById(user.id);
            expect(unverifiedUser.isEmailVerified).toBe(false);
        });
        it('should reject verification with expired code', async ()=>{
            // Create user and expired verification code
            const user = await dbManager.createTestUser({
                email: 'test@example.com',
                name: 'Test User',
                passwordHash: 'hashed_password',
                isEmailVerified: false
            });
            await dbManager.createTestEmailCode({
                userId: user.id,
                code: '123456',
                expiresAt: new Date(Date.now() - 1000),
                attemptsUsed: 0
            });
            // Try to verify with expired code
            const verifyRequest = new NextRequest('http://localhost/api/auth/verify-email', {
                method: 'POST',
                body: JSON.stringify({
                    email: 'test@example.com',
                    code: '123456'
                }),
                headers: {
                    'Content-Type': 'application/json'
                }
            });
            const verifyResponse = await verifyEmailHandler(verifyRequest);
            const verifyData = await verifyResponse.json();
            // Assert verification failure
            expect(verifyResponse.status).toBe(400);
            expect(verifyData.success).toBeFalsy();
            expect(verifyData.error).toContain('Verification code has expired');
            // Verify user is still not verified
            const unverifiedUser = await dbManager.getUserById(user.id);
            expect(unverifiedUser.isEmailVerified).toBe(false);
        });
    });
    describe('Resend Verification Code Functionality', ()=>{
        it('should resend verification code with proper cooldown behavior', async ()=>{
            // Create unverified user
            const user = await dbManager.createTestUser({
                email: 'test@example.com',
                name: 'Test User',
                passwordHash: 'hashed_password',
                isEmailVerified: false
            });
            // Create existing verification code
            await dbManager.createTestEmailCode({
                userId: user.id,
                code: '123456',
                expiresAt: new Date(Date.now() + 10 * 60 * 1000),
                attemptsUsed: 0
            });
            // First resend request
            const resendRequest1 = new NextRequest('http://localhost/api/auth/resend-verification', {
                method: 'POST',
                body: JSON.stringify({
                    email: 'test@example.com'
                }),
                headers: {
                    'Content-Type': 'application/json'
                }
            });
            const resendResponse1 = await resendVerificationHandler(resendRequest1);
            const resendData1 = await resendResponse1.json();
            // Assert first resend success
            expect(resendResponse1.status).toBe(200);
            expect(resendData1.success).toBe(true);
            expect(resendData1.message).toContain('Verification code sent successfully');
            expect(resendData1.cooldownSeconds).toBe(60);
            // Verify new code was generated (old one should be invalidated)
            const emailCodes = await dbManager.getEmailCodesByUserId(user.id);
            expect(emailCodes).toHaveLength(1);
            expect(emailCodes[0].code).not.toBe('123456'); // Should be a new code
            // Verify email was sent
            expect(mockSendEmailWithRetry).toHaveBeenCalledWith(mockEmailService, 'test@example.com', expect.stringMatching(/^\d{6}$/), 'Test User');
        });
        it('should handle resend for already verified user', async ()=>{
            // Create verified user
            const user = await dbManager.createTestUser({
                email: 'test@example.com',
                name: 'Test User',
                passwordHash: 'hashed_password',
                isEmailVerified: true
            });
            const resendRequest = new NextRequest('http://localhost/api/auth/resend-verification', {
                method: 'POST',
                body: JSON.stringify({
                    email: 'test@example.com'
                }),
                headers: {
                    'Content-Type': 'application/json'
                }
            });
            const resendResponse = await resendVerificationHandler(resendRequest);
            const resendData = await resendResponse.json();
            // Assert appropriate response for already verified user
            expect(resendResponse.status).toBe(400);
            expect(resendData.error).toContain('Email is already verified');
            expect(resendData.redirectTo).toBe('/auth/signin');
            // Verify no email was sent
            expect(mockSendEmailWithRetry).not.toHaveBeenCalled();
        });
        it('should handle resend for non-existent user', async ()=>{
            const resendRequest = new NextRequest('http://localhost/api/auth/resend-verification', {
                method: 'POST',
                body: JSON.stringify({
                    email: 'nonexistent@example.com'
                }),
                headers: {
                    'Content-Type': 'application/json'
                }
            });
            const resendResponse = await resendVerificationHandler(resendRequest);
            const resendData = await resendResponse.json();
            // Assert user not found error
            expect(resendResponse.status).toBe(404);
            expect(resendData.error).toContain('User not found');
            // Verify no email was sent
            expect(mockSendEmailWithRetry).not.toHaveBeenCalled();
        });
    });
    describe('Rate Limiting Enforcement', ()=>{
        it('should enforce verification attempt limits', async ()=>{
            // Create user and verification code
            const user = await dbManager.createTestUser({
                email: 'test@example.com',
                name: 'Test User',
                passwordHash: 'hashed_password',
                isEmailVerified: false
            });
            const emailCode = await dbManager.createTestEmailCode({
                userId: user.id,
                code: '123456',
                expiresAt: new Date(Date.now() + 10 * 60 * 1000),
                attemptsUsed: 4
            });
            // Make one more attempt (should still work)
            const verifyRequest1 = new NextRequest('http://localhost/api/auth/verify-email', {
                method: 'POST',
                body: JSON.stringify({
                    email: 'test@example.com',
                    code: '654321'
                }),
                headers: {
                    'Content-Type': 'application/json'
                }
            });
            const verifyResponse1 = await verifyEmailHandler(verifyRequest1);
            expect(verifyResponse1.status).toBe(400);
            // Make another attempt (should be rate limited)
            const verifyRequest2 = new NextRequest('http://localhost/api/auth/verify-email', {
                method: 'POST',
                body: JSON.stringify({
                    email: 'test@example.com',
                    code: '654321'
                }),
                headers: {
                    'Content-Type': 'application/json'
                }
            });
            const verifyResponse2 = await verifyEmailHandler(verifyRequest2);
            const verifyData2 = await verifyResponse2.json();
            // Assert rate limiting
            expect(verifyResponse2.status).toBe(429);
            expect(verifyData2.error).toContain('Too many verification attempts');
        });
        it('should handle validation errors properly', async ()=>{
            // Test invalid email format
            const verifyRequest1 = new NextRequest('http://localhost/api/auth/verify-email', {
                method: 'POST',
                body: JSON.stringify({
                    email: 'invalid-email',
                    code: '123456'
                }),
                headers: {
                    'Content-Type': 'application/json'
                }
            });
            const verifyResponse1 = await verifyEmailHandler(verifyRequest1);
            const verifyData1 = await verifyResponse1.json();
            expect(verifyResponse1.status).toBe(400);
            expect(verifyData1.error).toBe('Validation failed');
            expect(verifyData1.details).toEqual(expect.arrayContaining([
                expect.objectContaining({
                    field: 'email',
                    message: 'Invalid email address'
                })
            ]));
            // Test invalid code format
            const verifyRequest2 = new NextRequest('http://localhost/api/auth/verify-email', {
                method: 'POST',
                body: JSON.stringify({
                    email: 'test@example.com',
                    code: '12345'
                }),
                headers: {
                    'Content-Type': 'application/json'
                }
            });
            const verifyResponse2 = await verifyEmailHandler(verifyRequest2);
            const verifyData2 = await verifyResponse2.json();
            expect(verifyResponse2.status).toBe(400);
            expect(verifyData2.error).toBe('Validation failed');
            expect(verifyData2.details).toEqual(expect.arrayContaining([
                expect.objectContaining({
                    field: 'code',
                    message: 'Verification code must be 6 digits'
                })
            ]));
            // Test non-numeric code
            const verifyRequest3 = new NextRequest('http://localhost/api/auth/verify-email', {
                method: 'POST',
                body: JSON.stringify({
                    email: 'test@example.com',
                    code: 'ABCDEF'
                }),
                headers: {
                    'Content-Type': 'application/json'
                }
            });
            const verifyResponse3 = await verifyEmailHandler(verifyRequest3);
            const verifyData3 = await verifyResponse3.json();
            expect(verifyResponse3.status).toBe(400);
            expect(verifyData3.error).toBe('Validation failed');
            expect(verifyData3.details).toEqual(expect.arrayContaining([
                expect.objectContaining({
                    field: 'code',
                    message: 'Verification code must contain only digits'
                })
            ]));
        });
    });
    describe('Edge Cases and Error Scenarios', ()=>{
        it('should handle duplicate signup attempts', async ()=>{
            // First signup
            const signupRequest1 = new NextRequest('http://localhost/api/auth/signup', {
                method: 'POST',
                body: JSON.stringify({
                    email: 'test@example.com',
                    password: 'SecurePass123!',
                    name: 'Test User'
                }),
                headers: {
                    'Content-Type': 'application/json'
                }
            });
            const signupResponse1 = await signupHandler(signupRequest1);
            expect(signupResponse1.status).toBe(200);
            // Second signup with same email
            const signupRequest2 = new NextRequest('http://localhost/api/auth/signup', {
                method: 'POST',
                body: JSON.stringify({
                    email: 'test@example.com',
                    password: 'AnotherPass123!',
                    name: 'Another User'
                }),
                headers: {
                    'Content-Type': 'application/json'
                }
            });
            const signupResponse2 = await signupHandler(signupRequest2);
            const signupData2 = await signupResponse2.json();
            // Assert duplicate email error
            expect(signupResponse2.status).toBe(409);
            expect(signupData2.error).toContain('already exists');
        });
        it('should handle malformed request bodies', async ()=>{
            // Test with invalid JSON
            const verifyRequest = new NextRequest('http://localhost/api/auth/verify-email', {
                method: 'POST',
                body: 'invalid json',
                headers: {
                    'Content-Type': 'application/json'
                }
            });
            const verifyResponse = await verifyEmailHandler(verifyRequest);
            const verifyData = await verifyResponse.json();
            expect(verifyResponse.status).toBe(500);
            expect(verifyData.error).toBe('Internal server error');
        });
        it('should handle missing request body fields', async ()=>{
            // Test with missing email
            const verifyRequest1 = new NextRequest('http://localhost/api/auth/verify-email', {
                method: 'POST',
                body: JSON.stringify({
                    code: '123456'
                }),
                headers: {
                    'Content-Type': 'application/json'
                }
            });
            const verifyResponse1 = await verifyEmailHandler(verifyRequest1);
            const verifyData1 = await verifyResponse1.json();
            expect(verifyResponse1.status).toBe(400);
            expect(verifyData1.error).toBe('Validation failed');
            // Test with missing code
            const verifyRequest2 = new NextRequest('http://localhost/api/auth/verify-email', {
                method: 'POST',
                body: JSON.stringify({
                    email: 'test@example.com'
                }),
                headers: {
                    'Content-Type': 'application/json'
                }
            });
            const verifyResponse2 = await verifyEmailHandler(verifyRequest2);
            const verifyData2 = await verifyResponse2.json();
            expect(verifyResponse2.status).toBe(400);
            expect(verifyData2.error).toBe('Validation failed');
        });
    });
});

//# sourceMappingURL=data:application/json;base64,