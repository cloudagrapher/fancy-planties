15522191f74b5f84026421ee4212191d
"use strict";

/* istanbul ignore next */
function cov_105wl78jnv() {
  var path = "/Users/stefanbekker/projects/fancy-planties/src/app/api/search/advanced/route.ts";
  var hash = "c8766a4e20cb0cce27d7a2a7fe09522d925ca3a9";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/stefanbekker/projects/fancy-planties/src/app/api/search/advanced/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 20
        }
      },
      "3": {
        start: {
          line: 11,
          column: 16
        },
        end: {
          line: 11,
          column: 38
        }
      },
      "4": {
        start: {
          line: 12,
          column: 13
        },
        end: {
          line: 12,
          column: 27
        }
      },
      "5": {
        start: {
          line: 13,
          column: 17
        },
        end: {
          line: 13,
          column: 55
        }
      },
      "6": {
        start: {
          line: 14,
          column: 24
        },
        end: {
          line: 14,
          column: 75
        }
      },
      "7": {
        start: {
          line: 15,
          column: 22
        },
        end: {
          line: 15,
          column: 73
        }
      },
      "8": {
        start: {
          line: 17,
          column: 4
        },
        end: {
          line: 70,
          column: 5
        }
      },
      "9": {
        start: {
          line: 18,
          column: 25
        },
        end: {
          line: 18,
          column: 62
        }
      },
      "10": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 25,
          column: 9
        }
      },
      "11": {
        start: {
          line: 20,
          column: 12
        },
        end: {
          line: 24,
          column: 15
        }
      },
      "12": {
        start: {
          line: 26,
          column: 21
        },
        end: {
          line: 26,
          column: 41
        }
      },
      "13": {
        start: {
          line: 28,
          column: 29
        },
        end: {
          line: 47,
          column: 10
        }
      },
      "14": {
        start: {
          line: 48,
          column: 43
        },
        end: {
          line: 48,
          column: 67
        }
      },
      "15": {
        start: {
          line: 50,
          column: 23
        },
        end: {
          line: 50,
          column: 111
        }
      },
      "16": {
        start: {
          line: 51,
          column: 8
        },
        end: {
          line: 54,
          column: 11
        }
      },
      "17": {
        start: {
          line: 56,
          column: 8
        },
        end: {
          line: 56,
          column: 55
        }
      },
      "18": {
        start: {
          line: 57,
          column: 8
        },
        end: {
          line: 64,
          column: 9
        }
      },
      "19": {
        start: {
          line: 58,
          column: 12
        },
        end: {
          line: 63,
          column: 15
        }
      },
      "20": {
        start: {
          line: 65,
          column: 8
        },
        end: {
          line: 69,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "POST",
        decl: {
          start: {
            line: 16,
            column: 15
          },
          end: {
            line: 16,
            column: 19
          }
        },
        loc: {
          start: {
            line: 16,
            column: 29
          },
          end: {
            line: 71,
            column: 1
          }
        },
        line: 16
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 19,
            column: 8
          },
          end: {
            line: 25,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 19,
            column: 8
          },
          end: {
            line: 25,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 19
      },
      "1": {
        loc: {
          start: {
            line: 48,
            column: 26
          },
          end: {
            line: 48,
            column: 38
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 48,
            column: 36
          },
          end: {
            line: 48,
            column: 38
          }
        }],
        line: 48
      },
      "2": {
        loc: {
          start: {
            line: 57,
            column: 8
          },
          end: {
            line: 64,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 57,
            column: 8
          },
          end: {
            line: 64,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 57
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0
    },
    f: {
      "0": 0,
      "1": 0
    },
    b: {
      "0": [0, 0],
      "1": [0],
      "2": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/stefanbekker/projects/fancy-planties/src/app/api/search/advanced/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport { z } from 'zod';\nimport { validateRequest } from '@/lib/auth/server';\nimport { advancedSearchService } from '@/lib/services/advanced-search';\nimport { multiFieldSearchSchema } from '@/lib/validation/plant-schemas';\n\n// POST /api/search/advanced - Multi-field advanced search\nexport async function POST(request: NextRequest) {\n  try {\n    const { user } = await validateRequest();\n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const body = await request.json();\n    \n    // Validate request body\n    const searchSchema = z.object({\n      criteria: multiFieldSearchSchema,\n      options: z.object({\n        limit: z.number().int().min(1).max(100).default(20),\n        offset: z.number().int().min(0).default(0),\n        sortBy: z.enum(['nickname', 'location', 'created_at', 'last_fertilized', 'fertilizer_due', 'care_urgency', 'plant_name']).optional(),\n        sortOrder: z.enum(['asc', 'desc']).optional(),\n      }).optional(),\n    });\n\n    const { criteria, options = {} } = searchSchema.parse(body);\n\n    // Perform advanced search\n    const result = await advancedSearchService.multiFieldSearch(\n      criteria,\n      user.id,\n      options\n    );\n\n    return NextResponse.json({\n      success: true,\n      data: result,\n    });\n\n  } catch (error) {\n    console.error('Advanced search error:', error);\n    \n    if (error instanceof z.ZodError) {\n      return NextResponse.json(\n        { error: 'Invalid search parameters', details: error.issues },\n        { status: 400 }\n      );\n    }\n\n    return NextResponse.json(\n      { error: 'Search failed' },\n      { status: 500 }\n    );\n  }\n}"],
      names: ["POST", "request", "user", "validateRequest", "NextResponse", "json", "error", "status", "body", "searchSchema", "z", "object", "criteria", "multiFieldSearchSchema", "options", "limit", "number", "int", "min", "max", "default", "offset", "sortBy", "enum", "optional", "sortOrder", "parse", "result", "advancedSearchService", "multiFieldSearch", "id", "success", "data", "console", "ZodError", "details", "issues"],
      mappings: ";;;;+BAOsBA;;;eAAAA;;;wBAPoB;qBACxB;yBACc;gCACM;8BACC;AAGhC,eAAeA,KAAKC,OAAoB;IAC7C,IAAI;QACF,MAAM,EAAEC,IAAI,EAAE,GAAG,MAAMC,IAAAA,wBAAe;QACtC,IAAI,CAACD,MAAM;YACT,OAAOE,oBAAY,CAACC,IAAI,CAAC;gBAAEC,OAAO;YAAe,GAAG;gBAAEC,QAAQ;YAAI;QACpE;QAEA,MAAMC,OAAO,MAAMP,QAAQI,IAAI;QAE/B,wBAAwB;QACxB,MAAMI,eAAeC,MAAC,CAACC,MAAM,CAAC;YAC5BC,UAAUC,oCAAsB;YAChCC,SAASJ,MAAC,CAACC,MAAM,CAAC;gBAChBI,OAAOL,MAAC,CAACM,MAAM,GAAGC,GAAG,GAAGC,GAAG,CAAC,GAAGC,GAAG,CAAC,KAAKC,OAAO,CAAC;gBAChDC,QAAQX,MAAC,CAACM,MAAM,GAAGC,GAAG,GAAGC,GAAG,CAAC,GAAGE,OAAO,CAAC;gBACxCE,QAAQZ,MAAC,CAACa,IAAI,CAAC;oBAAC;oBAAY;oBAAY;oBAAc;oBAAmB;oBAAkB;oBAAgB;iBAAa,EAAEC,QAAQ;gBAClIC,WAAWf,MAAC,CAACa,IAAI,CAAC;oBAAC;oBAAO;iBAAO,EAAEC,QAAQ;YAC7C,GAAGA,QAAQ;QACb;QAEA,MAAM,EAAEZ,QAAQ,EAAEE,UAAU,CAAC,CAAC,EAAE,GAAGL,aAAaiB,KAAK,CAAClB;QAEtD,0BAA0B;QAC1B,MAAMmB,SAAS,MAAMC,qCAAqB,CAACC,gBAAgB,CACzDjB,UACAV,KAAK4B,EAAE,EACPhB;QAGF,OAAOV,oBAAY,CAACC,IAAI,CAAC;YACvB0B,SAAS;YACTC,MAAML;QACR;IAEF,EAAE,OAAOrB,OAAO;QACd2B,QAAQ3B,KAAK,CAAC,0BAA0BA;QAExC,IAAIA,iBAAiBI,MAAC,CAACwB,QAAQ,EAAE;YAC/B,OAAO9B,oBAAY,CAACC,IAAI,CACtB;gBAAEC,OAAO;gBAA6B6B,SAAS7B,MAAM8B,MAAM;YAAC,GAC5D;gBAAE7B,QAAQ;YAAI;QAElB;QAEA,OAAOH,oBAAY,CAACC,IAAI,CACtB;YAAEC,OAAO;QAAgB,GACzB;YAAEC,QAAQ;QAAI;IAElB;AACF"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "c8766a4e20cb0cce27d7a2a7fe09522d925ca3a9"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_105wl78jnv = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_105wl78jnv();
cov_105wl78jnv().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_105wl78jnv().s[1]++;
Object.defineProperty(exports, "POST", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_105wl78jnv().f[0]++;
    cov_105wl78jnv().s[2]++;
    return POST;
  }
});
const _server =
/* istanbul ignore next */
(cov_105wl78jnv().s[3]++, require("next/server"));
const _zod =
/* istanbul ignore next */
(cov_105wl78jnv().s[4]++, require("zod"));
const _server1 =
/* istanbul ignore next */
(cov_105wl78jnv().s[5]++, require("../../../../lib/auth/server"));
const _advancedsearch =
/* istanbul ignore next */
(cov_105wl78jnv().s[6]++, require("../../../../lib/services/advanced-search"));
const _plantschemas =
/* istanbul ignore next */
(cov_105wl78jnv().s[7]++, require("../../../../lib/validation/plant-schemas"));
async function POST(request) {
  /* istanbul ignore next */
  cov_105wl78jnv().f[1]++;
  cov_105wl78jnv().s[8]++;
  try {
    const {
      user
    } =
    /* istanbul ignore next */
    (cov_105wl78jnv().s[9]++, await (0, _server1.validateRequest)());
    /* istanbul ignore next */
    cov_105wl78jnv().s[10]++;
    if (!user) {
      /* istanbul ignore next */
      cov_105wl78jnv().b[0][0]++;
      cov_105wl78jnv().s[11]++;
      return _server.NextResponse.json({
        error: 'Unauthorized'
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_105wl78jnv().b[0][1]++;
    }
    const body =
    /* istanbul ignore next */
    (cov_105wl78jnv().s[12]++, await request.json());
    // Validate request body
    const searchSchema =
    /* istanbul ignore next */
    (cov_105wl78jnv().s[13]++, _zod.z.object({
      criteria: _plantschemas.multiFieldSearchSchema,
      options: _zod.z.object({
        limit: _zod.z.number().int().min(1).max(100).default(20),
        offset: _zod.z.number().int().min(0).default(0),
        sortBy: _zod.z.enum(['nickname', 'location', 'created_at', 'last_fertilized', 'fertilizer_due', 'care_urgency', 'plant_name']).optional(),
        sortOrder: _zod.z.enum(['asc', 'desc']).optional()
      }).optional()
    }));
    const {
      criteria,
      options =
      /* istanbul ignore next */
      (cov_105wl78jnv().b[1][0]++, {})
    } =
    /* istanbul ignore next */
    (cov_105wl78jnv().s[14]++, searchSchema.parse(body));
    // Perform advanced search
    const result =
    /* istanbul ignore next */
    (cov_105wl78jnv().s[15]++, await _advancedsearch.advancedSearchService.multiFieldSearch(criteria, user.id, options));
    /* istanbul ignore next */
    cov_105wl78jnv().s[16]++;
    return _server.NextResponse.json({
      success: true,
      data: result
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_105wl78jnv().s[17]++;
    console.error('Advanced search error:', error);
    /* istanbul ignore next */
    cov_105wl78jnv().s[18]++;
    if (error instanceof _zod.z.ZodError) {
      /* istanbul ignore next */
      cov_105wl78jnv().b[2][0]++;
      cov_105wl78jnv().s[19]++;
      return _server.NextResponse.json({
        error: 'Invalid search parameters',
        details: error.issues
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_105wl78jnv().b[2][1]++;
    }
    cov_105wl78jnv().s[20]++;
    return _server.NextResponse.json({
      error: 'Search failed'
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMTA1d2w3OGpudiIsImFjdHVhbENvdmVyYWdlIiwicyIsIlBPU1QiLCJyZXF1ZXN0IiwiZiIsInVzZXIiLCJfc2VydmVyMSIsInZhbGlkYXRlUmVxdWVzdCIsImIiLCJfc2VydmVyIiwiTmV4dFJlc3BvbnNlIiwianNvbiIsImVycm9yIiwic3RhdHVzIiwiYm9keSIsInNlYXJjaFNjaGVtYSIsIl96b2QiLCJ6Iiwib2JqZWN0IiwiY3JpdGVyaWEiLCJfcGxhbnRzY2hlbWFzIiwibXVsdGlGaWVsZFNlYXJjaFNjaGVtYSIsIm9wdGlvbnMiLCJsaW1pdCIsIm51bWJlciIsImludCIsIm1pbiIsIm1heCIsImRlZmF1bHQiLCJvZmZzZXQiLCJzb3J0QnkiLCJlbnVtIiwib3B0aW9uYWwiLCJzb3J0T3JkZXIiLCJwYXJzZSIsInJlc3VsdCIsIl9hZHZhbmNlZHNlYXJjaCIsImFkdmFuY2VkU2VhcmNoU2VydmljZSIsIm11bHRpRmllbGRTZWFyY2giLCJpZCIsInN1Y2Nlc3MiLCJkYXRhIiwiY29uc29sZSIsIlpvZEVycm9yIiwiZGV0YWlscyIsImlzc3VlcyJdLCJzb3VyY2VzIjpbIi9Vc2Vycy9zdGVmYW5iZWtrZXIvcHJvamVjdHMvZmFuY3ktcGxhbnRpZXMvc3JjL2FwcC9hcGkvc2VhcmNoL2FkdmFuY2VkL3JvdXRlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5leHRSZXF1ZXN0LCBOZXh0UmVzcG9uc2UgfSBmcm9tICduZXh0L3NlcnZlcic7XG5pbXBvcnQgeyB6IH0gZnJvbSAnem9kJztcbmltcG9ydCB7IHZhbGlkYXRlUmVxdWVzdCB9IGZyb20gJ0AvbGliL2F1dGgvc2VydmVyJztcbmltcG9ydCB7IGFkdmFuY2VkU2VhcmNoU2VydmljZSB9IGZyb20gJ0AvbGliL3NlcnZpY2VzL2FkdmFuY2VkLXNlYXJjaCc7XG5pbXBvcnQgeyBtdWx0aUZpZWxkU2VhcmNoU2NoZW1hIH0gZnJvbSAnQC9saWIvdmFsaWRhdGlvbi9wbGFudC1zY2hlbWFzJztcblxuLy8gUE9TVCAvYXBpL3NlYXJjaC9hZHZhbmNlZCAtIE11bHRpLWZpZWxkIGFkdmFuY2VkIHNlYXJjaFxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIFBPU1QocmVxdWVzdDogTmV4dFJlcXVlc3QpIHtcbiAgdHJ5IHtcbiAgICBjb25zdCB7IHVzZXIgfSA9IGF3YWl0IHZhbGlkYXRlUmVxdWVzdCgpO1xuICAgIGlmICghdXNlcikge1xuICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHsgZXJyb3I6ICdVbmF1dGhvcml6ZWQnIH0sIHsgc3RhdHVzOiA0MDEgfSk7XG4gICAgfVxuXG4gICAgY29uc3QgYm9keSA9IGF3YWl0IHJlcXVlc3QuanNvbigpO1xuICAgIFxuICAgIC8vIFZhbGlkYXRlIHJlcXVlc3QgYm9keVxuICAgIGNvbnN0IHNlYXJjaFNjaGVtYSA9IHoub2JqZWN0KHtcbiAgICAgIGNyaXRlcmlhOiBtdWx0aUZpZWxkU2VhcmNoU2NoZW1hLFxuICAgICAgb3B0aW9uczogei5vYmplY3Qoe1xuICAgICAgICBsaW1pdDogei5udW1iZXIoKS5pbnQoKS5taW4oMSkubWF4KDEwMCkuZGVmYXVsdCgyMCksXG4gICAgICAgIG9mZnNldDogei5udW1iZXIoKS5pbnQoKS5taW4oMCkuZGVmYXVsdCgwKSxcbiAgICAgICAgc29ydEJ5OiB6LmVudW0oWyduaWNrbmFtZScsICdsb2NhdGlvbicsICdjcmVhdGVkX2F0JywgJ2xhc3RfZmVydGlsaXplZCcsICdmZXJ0aWxpemVyX2R1ZScsICdjYXJlX3VyZ2VuY3knLCAncGxhbnRfbmFtZSddKS5vcHRpb25hbCgpLFxuICAgICAgICBzb3J0T3JkZXI6IHouZW51bShbJ2FzYycsICdkZXNjJ10pLm9wdGlvbmFsKCksXG4gICAgICB9KS5vcHRpb25hbCgpLFxuICAgIH0pO1xuXG4gICAgY29uc3QgeyBjcml0ZXJpYSwgb3B0aW9ucyA9IHt9IH0gPSBzZWFyY2hTY2hlbWEucGFyc2UoYm9keSk7XG5cbiAgICAvLyBQZXJmb3JtIGFkdmFuY2VkIHNlYXJjaFxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGFkdmFuY2VkU2VhcmNoU2VydmljZS5tdWx0aUZpZWxkU2VhcmNoKFxuICAgICAgY3JpdGVyaWEsXG4gICAgICB1c2VyLmlkLFxuICAgICAgb3B0aW9uc1xuICAgICk7XG5cbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oe1xuICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgIGRhdGE6IHJlc3VsdCxcbiAgICB9KTtcblxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0FkdmFuY2VkIHNlYXJjaCBlcnJvcjonLCBlcnJvcik7XG4gICAgXG4gICAgaWYgKGVycm9yIGluc3RhbmNlb2Ygei5ab2RFcnJvcikge1xuICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxuICAgICAgICB7IGVycm9yOiAnSW52YWxpZCBzZWFyY2ggcGFyYW1ldGVycycsIGRldGFpbHM6IGVycm9yLmlzc3VlcyB9LFxuICAgICAgICB7IHN0YXR1czogNDAwIH1cbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxuICAgICAgeyBlcnJvcjogJ1NlYXJjaCBmYWlsZWQnIH0sXG4gICAgICB7IHN0YXR1czogNTAwIH1cbiAgICApO1xuICB9XG59Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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