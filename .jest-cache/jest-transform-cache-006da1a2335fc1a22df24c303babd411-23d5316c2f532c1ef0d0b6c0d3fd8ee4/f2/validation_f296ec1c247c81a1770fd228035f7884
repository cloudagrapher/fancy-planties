0c1084cad9d0f3c69cdafb1d6e3474e7
"use strict";

/* istanbul ignore next */
function cov_1c6htccagb() {
  var path = "/Users/stefanbekker/projects/fancy-planties/src/lib/auth/validation.ts";
  var hash = "91f4c1f1863b062a4462fbaf2a0c4e7992aea017";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/stefanbekker/projects/fancy-planties/src/lib/auth/validation.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 45,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 36
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 27
        }
      },
      "6": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 38
        }
      },
      "7": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 26
        }
      },
      "8": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 42
        }
      },
      "9": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 35
        }
      },
      "10": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 31,
          column: 30
        }
      },
      "11": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 34,
          column: 28
        }
      },
      "12": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 37,
          column: 28
        }
      },
      "13": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 40,
          column: 35
        }
      },
      "14": {
        start: {
          line: 43,
          column: 8
        },
        end: {
          line: 43,
          column: 29
        }
      },
      "15": {
        start: {
          line: 46,
          column: 13
        },
        end: {
          line: 46,
          column: 27
        }
      },
      "16": {
        start: {
          line: 47,
          column: 23
        },
        end: {
          line: 47,
          column: 280
        }
      },
      "17": {
        start: {
          line: 48,
          column: 20
        },
        end: {
          line: 48,
          column: 170
        }
      },
      "18": {
        start: {
          line: 48,
          column: 150
        },
        end: {
          line: 48,
          column: 169
        }
      },
      "19": {
        start: {
          line: 49,
          column: 19
        },
        end: {
          line: 49,
          column: 234
        }
      },
      "20": {
        start: {
          line: 49,
          column: 222
        },
        end: {
          line: 49,
          column: 233
        }
      },
      "21": {
        start: {
          line: 50,
          column: 21
        },
        end: {
          line: 54,
          column: 2
        }
      },
      "22": {
        start: {
          line: 55,
          column: 21
        },
        end: {
          line: 58,
          column: 2
        }
      },
      "23": {
        start: {
          line: 59,
          column: 35
        },
        end: {
          line: 61,
          column: 2
        }
      },
      "24": {
        start: {
          line: 62,
          column: 28
        },
        end: {
          line: 65,
          column: 2
        }
      },
      "25": {
        start: {
          line: 66,
          column: 29
        },
        end: {
          line: 69,
          column: 2
        }
      },
      "26": {
        start: {
          line: 70,
          column: 28
        },
        end: {
          line: 73,
          column: 2
        }
      },
      "27": {
        start: {
          line: 75,
          column: 19
        },
        end: {
          line: 75,
          column: 21
        }
      },
      "28": {
        start: {
          line: 76,
          column: 4
        },
        end: {
          line: 79,
          column: 7
        }
      },
      "29": {
        start: {
          line: 77,
          column: 21
        },
        end: {
          line: 77,
          column: 41
        }
      },
      "30": {
        start: {
          line: 78,
          column: 8
        },
        end: {
          line: 78,
          column: 37
        }
      },
      "31": {
        start: {
          line: 80,
          column: 4
        },
        end: {
          line: 80,
          column: 18
        }
      },
      "32": {
        start: {
          line: 83,
          column: 4
        },
        end: {
          line: 97,
          column: 5
        }
      },
      "33": {
        start: {
          line: 84,
          column: 21
        },
        end: {
          line: 84,
          column: 40
        }
      },
      "34": {
        start: {
          line: 85,
          column: 8
        },
        end: {
          line: 88,
          column: 10
        }
      },
      "35": {
        start: {
          line: 90,
          column: 8
        },
        end: {
          line: 95,
          column: 9
        }
      },
      "36": {
        start: {
          line: 91,
          column: 12
        },
        end: {
          line: 94,
          column: 14
        }
      },
      "37": {
        start: {
          line: 96,
          column: 8
        },
        end: {
          line: 96,
          column: 20
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        },
        loc: {
          start: {
            line: 12,
            column: 32
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 23
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 18,
            column: 4
          },
          end: {
            line: 18,
            column: 5
          }
        },
        loc: {
          start: {
            line: 18,
            column: 34
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 18
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 21,
            column: 4
          },
          end: {
            line: 21,
            column: 5
          }
        },
        loc: {
          start: {
            line: 21,
            column: 22
          },
          end: {
            line: 23,
            column: 5
          }
        },
        line: 21
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 24,
            column: 4
          },
          end: {
            line: 24,
            column: 5
          }
        },
        loc: {
          start: {
            line: 24,
            column: 38
          },
          end: {
            line: 26,
            column: 5
          }
        },
        line: 24
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 27,
            column: 4
          },
          end: {
            line: 27,
            column: 5
          }
        },
        loc: {
          start: {
            line: 27,
            column: 31
          },
          end: {
            line: 29,
            column: 5
          }
        },
        line: 27
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 30,
            column: 4
          },
          end: {
            line: 30,
            column: 5
          }
        },
        loc: {
          start: {
            line: 30,
            column: 26
          },
          end: {
            line: 32,
            column: 5
          }
        },
        line: 30
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 33,
            column: 4
          },
          end: {
            line: 33,
            column: 5
          }
        },
        loc: {
          start: {
            line: 33,
            column: 24
          },
          end: {
            line: 35,
            column: 5
          }
        },
        line: 33
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 36,
            column: 4
          },
          end: {
            line: 36,
            column: 5
          }
        },
        loc: {
          start: {
            line: 36,
            column: 24
          },
          end: {
            line: 38,
            column: 5
          }
        },
        line: 36
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 39,
            column: 4
          },
          end: {
            line: 39,
            column: 5
          }
        },
        loc: {
          start: {
            line: 39,
            column: 31
          },
          end: {
            line: 41,
            column: 5
          }
        },
        line: 39
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 42,
            column: 4
          },
          end: {
            line: 42,
            column: 5
          }
        },
        loc: {
          start: {
            line: 42,
            column: 25
          },
          end: {
            line: 44,
            column: 5
          }
        },
        line: 42
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 48,
            column: 141
          },
          end: {
            line: 48,
            column: 142
          }
        },
        loc: {
          start: {
            line: 48,
            column: 150
          },
          end: {
            line: 48,
            column: 169
          }
        },
        line: 48
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 49,
            column: 214
          },
          end: {
            line: 49,
            column: 215
          }
        },
        loc: {
          start: {
            line: 49,
            column: 222
          },
          end: {
            line: 49,
            column: 233
          }
        },
        line: 49
      },
      "14": {
        name: "formatValidationErrors",
        decl: {
          start: {
            line: 74,
            column: 9
          },
          end: {
            line: 74,
            column: 31
          }
        },
        loc: {
          start: {
            line: 74,
            column: 39
          },
          end: {
            line: 81,
            column: 1
          }
        },
        line: 74
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 76,
            column: 25
          },
          end: {
            line: 76,
            column: 26
          }
        },
        loc: {
          start: {
            line: 76,
            column: 34
          },
          end: {
            line: 79,
            column: 5
          }
        },
        line: 76
      },
      "16": {
        name: "validateInput",
        decl: {
          start: {
            line: 82,
            column: 9
          },
          end: {
            line: 82,
            column: 22
          }
        },
        loc: {
          start: {
            line: 82,
            column: 38
          },
          end: {
            line: 98,
            column: 1
          }
        },
        line: 82
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 90,
            column: 8
          },
          end: {
            line: 95,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 90,
            column: 8
          },
          end: {
            line: 95,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 90
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0
    },
    b: {
      "0": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/stefanbekker/projects/fancy-planties/src/lib/auth/validation.ts"],
      sourcesContent: ["import { z } from 'zod';\n\n// Password validation schema\nexport const passwordSchema = z\n  .string()\n  .min(8, 'Password must be at least 8 characters long')\n  .max(128, 'Password must be less than 128 characters')\n  .regex(\n    /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)/,\n    'Password must contain at least one lowercase letter, one uppercase letter, and one number'\n  );\n\n// Email validation schema\nexport const emailSchema = z\n  .string()\n  .email('Please enter a valid email address')\n  .max(255, 'Email must be less than 255 characters')\n  .transform((email) => email.toLowerCase());\n\n// Name validation schema\nexport const nameSchema = z\n  .string()\n  .min(1, 'Name is required')\n  .max(100, 'Name must be less than 100 characters')\n  .regex(/^[a-zA-Z\\s'-]+$/, 'Name can only contain letters, spaces, hyphens, and apostrophes')\n  .transform((name) => name.trim());\n\n// Sign up validation schema\nexport const signUpSchema = z.object({\n  email: emailSchema,\n  password: passwordSchema,\n  name: nameSchema,\n});\n\n// Sign in validation schema\nexport const signInSchema = z.object({\n  email: emailSchema,\n  password: z.string().min(1, 'Password is required'),\n});\n\n// Password reset request schema\nexport const passwordResetRequestSchema = z.object({\n  email: emailSchema,\n});\n\n// Password reset schema\nexport const passwordResetSchema = z.object({\n  token: z.string().min(1, 'Reset token is required'),\n  password: passwordSchema,\n});\n\n// Change password schema\nexport const changePasswordSchema = z.object({\n  currentPassword: z.string().min(1, 'Current password is required'),\n  newPassword: passwordSchema,\n});\n\n// Update profile schema\nexport const updateProfileSchema = z.object({\n  name: nameSchema,\n  email: emailSchema,\n});\n\n// Validation helper types\nexport type SignUpInput = z.infer<typeof signUpSchema>;\nexport type SignInInput = z.infer<typeof signInSchema>;\nexport type PasswordResetRequestInput = z.infer<typeof passwordResetRequestSchema>;\nexport type PasswordResetInput = z.infer<typeof passwordResetSchema>;\nexport type ChangePasswordInput = z.infer<typeof changePasswordSchema>;\nexport type UpdateProfileInput = z.infer<typeof updateProfileSchema>;\n\n// Validation error formatter\nexport function formatValidationErrors(error: z.ZodError): Record<string, string> {\n  const errors: Record<string, string> = {};\n  \n  error.issues.forEach((issue) => {\n    const path = issue.path.join('.');\n    errors[path] = issue.message;\n  });\n  \n  return errors;\n}\n\n// Safe validation helper\nexport function validateInput<T>(\n  schema: z.ZodSchema<T>,\n  input: unknown\n): { success: true; data: T } | { success: false; errors: Record<string, string> } {\n  try {\n    const data = schema.parse(input);\n    return { success: true, data };\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      return { success: false, errors: formatValidationErrors(error) };\n    }\n    throw error;\n  }\n}"],
      names: ["changePasswordSchema", "emailSchema", "formatValidationErrors", "nameSchema", "passwordResetRequestSchema", "passwordResetSchema", "passwordSchema", "signInSchema", "signUpSchema", "updateProfileSchema", "validateInput", "z", "string", "min", "max", "regex", "email", "transform", "toLowerCase", "name", "trim", "object", "password", "token", "currentPassword", "newPassword", "error", "errors", "issues", "forEach", "issue", "path", "join", "message", "schema", "input", "data", "parse", "success", "ZodError"],
      mappings: ";;;;;;;;;;;QAoDaA;eAAAA;;QAvCAC;eAAAA;;QA2DGC;eAAAA;;QApDHC;eAAAA;;QAqBAC;eAAAA;;QAKAC;eAAAA;;QA3CAC;eAAAA;;QAgCAC;eAAAA;;QAPAC;eAAAA;;QA8BAC;eAAAA;;QA0BGC;eAAAA;;;qBApFE;AAGX,MAAMJ,iBAAiBK,MAAC,CAC5BC,MAAM,GACNC,GAAG,CAAC,GAAG,+CACPC,GAAG,CAAC,KAAK,6CACTC,KAAK,CACJ,mCACA;AAIG,MAAMd,cAAcU,MAAC,CACzBC,MAAM,GACNI,KAAK,CAAC,sCACNF,GAAG,CAAC,KAAK,0CACTG,SAAS,CAAC,CAACD,QAAUA,MAAME,WAAW;AAGlC,MAAMf,aAAaQ,MAAC,CACxBC,MAAM,GACNC,GAAG,CAAC,GAAG,oBACPC,GAAG,CAAC,KAAK,yCACTC,KAAK,CAAC,mBAAmB,mEACzBE,SAAS,CAAC,CAACE,OAASA,KAAKC,IAAI;AAGzB,MAAMZ,eAAeG,MAAC,CAACU,MAAM,CAAC;IACnCL,OAAOf;IACPqB,UAAUhB;IACVa,MAAMhB;AACR;AAGO,MAAMI,eAAeI,MAAC,CAACU,MAAM,CAAC;IACnCL,OAAOf;IACPqB,UAAUX,MAAC,CAACC,MAAM,GAAGC,GAAG,CAAC,GAAG;AAC9B;AAGO,MAAMT,6BAA6BO,MAAC,CAACU,MAAM,CAAC;IACjDL,OAAOf;AACT;AAGO,MAAMI,sBAAsBM,MAAC,CAACU,MAAM,CAAC;IAC1CE,OAAOZ,MAAC,CAACC,MAAM,GAAGC,GAAG,CAAC,GAAG;IACzBS,UAAUhB;AACZ;AAGO,MAAMN,uBAAuBW,MAAC,CAACU,MAAM,CAAC;IAC3CG,iBAAiBb,MAAC,CAACC,MAAM,GAAGC,GAAG,CAAC,GAAG;IACnCY,aAAanB;AACf;AAGO,MAAMG,sBAAsBE,MAAC,CAACU,MAAM,CAAC;IAC1CF,MAAMhB;IACNa,OAAOf;AACT;AAWO,SAASC,uBAAuBwB,KAAiB;IACtD,MAAMC,SAAiC,CAAC;IAExCD,MAAME,MAAM,CAACC,OAAO,CAAC,CAACC;QACpB,MAAMC,OAAOD,MAAMC,IAAI,CAACC,IAAI,CAAC;QAC7BL,MAAM,CAACI,KAAK,GAAGD,MAAMG,OAAO;IAC9B;IAEA,OAAON;AACT;AAGO,SAASjB,cACdwB,MAAsB,EACtBC,KAAc;IAEd,IAAI;QACF,MAAMC,OAAOF,OAAOG,KAAK,CAACF;QAC1B,OAAO;YAAEG,SAAS;YAAMF;QAAK;IAC/B,EAAE,OAAOV,OAAO;QACd,IAAIA,iBAAiBf,MAAC,CAAC4B,QAAQ,EAAE;YAC/B,OAAO;gBAAED,SAAS;gBAAOX,QAAQzB,uBAAuBwB;YAAO;QACjE;QACA,MAAMA;IACR;AACF"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "91f4c1f1863b062a4462fbaf2a0c4e7992aea017"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1c6htccagb = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1c6htccagb();
cov_1c6htccagb().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_1c6htccagb().f[0]++;
  cov_1c6htccagb().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_1c6htccagb().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_1c6htccagb().s[3]++;
_export(exports, {
  get changePasswordSchema() {
    /* istanbul ignore next */
    cov_1c6htccagb().f[1]++;
    cov_1c6htccagb().s[4]++;
    return changePasswordSchema;
  },
  get emailSchema() {
    /* istanbul ignore next */
    cov_1c6htccagb().f[2]++;
    cov_1c6htccagb().s[5]++;
    return emailSchema;
  },
  get formatValidationErrors() {
    /* istanbul ignore next */
    cov_1c6htccagb().f[3]++;
    cov_1c6htccagb().s[6]++;
    return formatValidationErrors;
  },
  get nameSchema() {
    /* istanbul ignore next */
    cov_1c6htccagb().f[4]++;
    cov_1c6htccagb().s[7]++;
    return nameSchema;
  },
  get passwordResetRequestSchema() {
    /* istanbul ignore next */
    cov_1c6htccagb().f[5]++;
    cov_1c6htccagb().s[8]++;
    return passwordResetRequestSchema;
  },
  get passwordResetSchema() {
    /* istanbul ignore next */
    cov_1c6htccagb().f[6]++;
    cov_1c6htccagb().s[9]++;
    return passwordResetSchema;
  },
  get passwordSchema() {
    /* istanbul ignore next */
    cov_1c6htccagb().f[7]++;
    cov_1c6htccagb().s[10]++;
    return passwordSchema;
  },
  get signInSchema() {
    /* istanbul ignore next */
    cov_1c6htccagb().f[8]++;
    cov_1c6htccagb().s[11]++;
    return signInSchema;
  },
  get signUpSchema() {
    /* istanbul ignore next */
    cov_1c6htccagb().f[9]++;
    cov_1c6htccagb().s[12]++;
    return signUpSchema;
  },
  get updateProfileSchema() {
    /* istanbul ignore next */
    cov_1c6htccagb().f[10]++;
    cov_1c6htccagb().s[13]++;
    return updateProfileSchema;
  },
  get validateInput() {
    /* istanbul ignore next */
    cov_1c6htccagb().f[11]++;
    cov_1c6htccagb().s[14]++;
    return validateInput;
  }
});
const _zod =
/* istanbul ignore next */
(cov_1c6htccagb().s[15]++, require("zod"));
const passwordSchema =
/* istanbul ignore next */
(cov_1c6htccagb().s[16]++, _zod.z.string().min(8, 'Password must be at least 8 characters long').max(128, 'Password must be less than 128 characters').regex(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)/, 'Password must contain at least one lowercase letter, one uppercase letter, and one number'));
const emailSchema =
/* istanbul ignore next */
(cov_1c6htccagb().s[17]++, _zod.z.string().email('Please enter a valid email address').max(255, 'Email must be less than 255 characters').transform(email => {
  /* istanbul ignore next */
  cov_1c6htccagb().f[12]++;
  cov_1c6htccagb().s[18]++;
  return email.toLowerCase();
}));
const nameSchema =
/* istanbul ignore next */
(cov_1c6htccagb().s[19]++, _zod.z.string().min(1, 'Name is required').max(100, 'Name must be less than 100 characters').regex(/^[a-zA-Z\s'-]+$/, 'Name can only contain letters, spaces, hyphens, and apostrophes').transform(name => {
  /* istanbul ignore next */
  cov_1c6htccagb().f[13]++;
  cov_1c6htccagb().s[20]++;
  return name.trim();
}));
const signUpSchema =
/* istanbul ignore next */
(cov_1c6htccagb().s[21]++, _zod.z.object({
  email: emailSchema,
  password: passwordSchema,
  name: nameSchema
}));
const signInSchema =
/* istanbul ignore next */
(cov_1c6htccagb().s[22]++, _zod.z.object({
  email: emailSchema,
  password: _zod.z.string().min(1, 'Password is required')
}));
const passwordResetRequestSchema =
/* istanbul ignore next */
(cov_1c6htccagb().s[23]++, _zod.z.object({
  email: emailSchema
}));
const passwordResetSchema =
/* istanbul ignore next */
(cov_1c6htccagb().s[24]++, _zod.z.object({
  token: _zod.z.string().min(1, 'Reset token is required'),
  password: passwordSchema
}));
const changePasswordSchema =
/* istanbul ignore next */
(cov_1c6htccagb().s[25]++, _zod.z.object({
  currentPassword: _zod.z.string().min(1, 'Current password is required'),
  newPassword: passwordSchema
}));
const updateProfileSchema =
/* istanbul ignore next */
(cov_1c6htccagb().s[26]++, _zod.z.object({
  name: nameSchema,
  email: emailSchema
}));
function formatValidationErrors(error) {
  /* istanbul ignore next */
  cov_1c6htccagb().f[14]++;
  const errors =
  /* istanbul ignore next */
  (cov_1c6htccagb().s[27]++, {});
  /* istanbul ignore next */
  cov_1c6htccagb().s[28]++;
  error.issues.forEach(issue => {
    /* istanbul ignore next */
    cov_1c6htccagb().f[15]++;
    const path =
    /* istanbul ignore next */
    (cov_1c6htccagb().s[29]++, issue.path.join('.'));
    /* istanbul ignore next */
    cov_1c6htccagb().s[30]++;
    errors[path] = issue.message;
  });
  /* istanbul ignore next */
  cov_1c6htccagb().s[31]++;
  return errors;
}
function validateInput(schema, input) {
  /* istanbul ignore next */
  cov_1c6htccagb().f[16]++;
  cov_1c6htccagb().s[32]++;
  try {
    const data =
    /* istanbul ignore next */
    (cov_1c6htccagb().s[33]++, schema.parse(input));
    /* istanbul ignore next */
    cov_1c6htccagb().s[34]++;
    return {
      success: true,
      data
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_1c6htccagb().s[35]++;
    if (error instanceof _zod.z.ZodError) {
      /* istanbul ignore next */
      cov_1c6htccagb().b[0][0]++;
      cov_1c6htccagb().s[36]++;
      return {
        success: false,
        errors: formatValidationErrors(error)
      };
    } else
    /* istanbul ignore next */
    {
      cov_1c6htccagb().b[0][1]++;
    }
    cov_1c6htccagb().s[37]++;
    throw error;
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,