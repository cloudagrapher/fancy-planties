287eec592ba4e6ab1531d9a88ab9a361
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get bulkCareSchema () {
        return bulkCareSchema;
    },
    get careDashboardQuerySchema () {
        return careDashboardQuerySchema;
    },
    get careFilterSchema () {
        return careFilterSchema;
    },
    get careFormSchema () {
        return careFormSchema;
    },
    get careHistorySchema () {
        return careHistorySchema;
    },
    get careReminderSchema () {
        return careReminderSchema;
    },
    get careScheduleInputSchema () {
        return careScheduleInputSchema;
    },
    get careStatsQuerySchema () {
        return careStatsQuerySchema;
    },
    get careTypeSchema () {
        return careTypeSchema;
    },
    get careValidation () {
        return careValidation;
    },
    get fertilizerScheduleSchema () {
        return fertilizerScheduleSchema;
    },
    get plantInstanceCareUpdateSchema () {
        return plantInstanceCareUpdateSchema;
    },
    get quickCareLogSchema () {
        return quickCareLogSchema;
    }
});
const _zod = require("zod");
const careTypeSchema = _zod.z.enum([
    'fertilizer',
    'water',
    'repot',
    'prune',
    'inspect',
    'other'
]);
const fertilizerScheduleSchema = _zod.z.enum([
    'weekly',
    'biweekly',
    'monthly',
    'bimonthly',
    'quarterly',
    'custom'
]).or(_zod.z.string().regex(/^\d+$/, 'Custom schedule must be a number of days'));
const careHistorySchema = _zod.z.object({
    id: _zod.z.number().optional(),
    userId: _zod.z.number(),
    plantInstanceId: _zod.z.number(),
    careType: careTypeSchema,
    careDate: _zod.z.date(),
    notes: _zod.z.string().max(1000, 'Notes must be less than 1000 characters').optional(),
    fertilizerType: _zod.z.string().max(100, 'Fertilizer type must be less than 100 characters').optional(),
    potSize: _zod.z.string().max(50, 'Pot size must be less than 50 characters').optional(),
    soilType: _zod.z.string().max(100, 'Soil type must be less than 100 characters').optional(),
    images: _zod.z.array(_zod.z.string()).default([]),
    createdAt: _zod.z.date().optional(),
    updatedAt: _zod.z.date().optional()
});
const careFormSchema = _zod.z.object({
    plantInstanceId: _zod.z.number().min(1, 'Plant instance ID is required'),
    careType: careTypeSchema,
    careDate: _zod.z.date().refine((date)=>date <= new Date(), 'Care date cannot be in the future').refine((date)=>{
        const oneYearAgo = new Date();
        oneYearAgo.setFullYear(oneYearAgo.getFullYear() - 1);
        return date >= oneYearAgo;
    }, 'Care date cannot be more than one year ago'),
    notes: _zod.z.string().max(1000, 'Notes must be less than 1000 characters').optional(),
    fertilizerType: _zod.z.string().max(100, 'Fertilizer type must be less than 100 characters').optional(),
    potSize: _zod.z.string().max(50, 'Pot size must be less than 50 characters').optional(),
    soilType: _zod.z.string().max(100, 'Soil type must be less than 100 characters').optional(),
    images: _zod.z.array(_zod.z.string()).default([]),
    updateSchedule: _zod.z.boolean().default(true)
}).refine((data)=>{
    // If care type is fertilizer, fertilizer type is recommended
    if (data.careType === 'fertilizer' && !data.fertilizerType) {
        return true; // Allow but will show warning
    }
    return true;
}).refine((data)=>{
    // If care type is repot, pot size and soil type are recommended
    if (data.careType === 'repot' && (!data.potSize || !data.soilType)) {
        return true; // Allow but will show warning
    }
    return true;
});
const quickCareLogSchema = _zod.z.object({
    plantInstanceId: _zod.z.number().min(1, 'Plant instance ID is required'),
    careType: careTypeSchema,
    careDate: _zod.z.date().default(()=>new Date()),
    notes: _zod.z.string().max(500, 'Notes must be less than 500 characters').optional()
});
const bulkCareSchema = _zod.z.object({
    plantInstanceIds: _zod.z.array(_zod.z.number()).min(1, 'At least one plant must be selected'),
    careType: careTypeSchema,
    careDate: _zod.z.date().default(()=>new Date()),
    notes: _zod.z.string().max(500, 'Notes must be less than 500 characters').optional(),
    fertilizerType: _zod.z.string().max(100, 'Fertilizer type must be less than 100 characters').optional()
});
const careFilterSchema = _zod.z.object({
    plantInstanceId: _zod.z.number().optional(),
    careType: careTypeSchema.optional(),
    startDate: _zod.z.date().optional(),
    endDate: _zod.z.date().optional(),
    limit: _zod.z.number().min(1).max(100).default(50),
    offset: _zod.z.number().min(0).default(0),
    sortBy: _zod.z.enum([
        'care_date',
        'care_type',
        'created_at'
    ]).default('care_date'),
    sortOrder: _zod.z.enum([
        'asc',
        'desc'
    ]).default('desc')
});
const careStatsQuerySchema = _zod.z.object({
    plantInstanceId: _zod.z.number().optional(),
    startDate: _zod.z.date().optional(),
    endDate: _zod.z.date().optional(),
    careTypes: _zod.z.array(careTypeSchema).optional()
});
const careReminderSchema = _zod.z.object({
    id: _zod.z.string().optional(),
    plantInstanceId: _zod.z.number(),
    careType: careTypeSchema,
    reminderDate: _zod.z.date(),
    isActive: _zod.z.boolean().default(true),
    notificationSent: _zod.z.boolean().default(false),
    createdAt: _zod.z.date().optional()
});
const plantInstanceCareUpdateSchema = _zod.z.object({
    lastFertilized: _zod.z.date().optional(),
    fertilizerSchedule: fertilizerScheduleSchema.optional(),
    fertilizerDue: _zod.z.date().optional(),
    lastRepot: _zod.z.date().optional()
});
const careDashboardQuerySchema = _zod.z.object({
    userId: _zod.z.number(),
    includeInactive: _zod.z.boolean().default(false),
    daysAhead: _zod.z.number().min(1).max(30).default(7)
});
const careScheduleInputSchema = _zod.z.object({
    lastFertilized: _zod.z.date().nullable(),
    fertilizerSchedule: fertilizerScheduleSchema,
    currentDate: _zod.z.date().default(()=>new Date())
});
const careValidation = {
    // Validate care form data
    validateCareForm: (data)=>{
        return careFormSchema.safeParse(data);
    },
    // Validate quick care log
    validateQuickCareLog: (data)=>{
        return quickCareLogSchema.safeParse(data);
    },
    // Validate bulk care operation
    validateBulkCare: (data)=>{
        return bulkCareSchema.safeParse(data);
    },
    // Validate care filter
    validateCareFilter: (data)=>{
        return careFilterSchema.safeParse(data);
    },
    // Validate care reminder
    validateCareReminder: (data)=>{
        return careReminderSchema.safeParse(data);
    },
    // Validate fertilizer schedule
    validateFertilizerSchedule: (schedule)=>{
        return fertilizerScheduleSchema.safeParse(schedule).success;
    },
    // Parse fertilizer schedule to days
    parseFertilizerScheduleToDays: (schedule)=>{
        const scheduleMap = {
            'weekly': 7,
            'biweekly': 14,
            'monthly': 30,
            'bimonthly': 60,
            'quarterly': 90
        };
        // Check if it's a predefined schedule
        if (scheduleMap[schedule]) {
            return scheduleMap[schedule];
        }
        // Try to parse as custom number of days
        const customDays = parseInt(schedule, 10);
        if (!isNaN(customDays) && customDays > 0) {
            return customDays;
        }
        // Default to monthly if unable to parse
        return 30;
    },
    // Validate care date range
    validateDateRange: (startDate, endDate)=>{
        if (!startDate || !endDate) return true;
        return startDate <= endDate;
    },
    // Get care type validation error messages
    getCareTypeErrorMessage: (careType)=>{
        const validTypes = [
            'fertilizer',
            'water',
            'repot',
            'prune',
            'inspect',
            'other'
        ];
        if (!validTypes.includes(careType)) {
            return `Care type must be one of: ${validTypes.join(', ')}`;
        }
        return null;
    }
};

//# sourceMappingURL=data:application/json;base64,