c874f7fda87c917ff4725c6c1daace0d
"use strict";

/* istanbul ignore next */
function cov_bqsm7vxpu() {
  var path = "/Users/stefanbekker/projects/fancy-planties/src/lib/utils/logger.ts";
  var hash = "9a1869e9e52af0c2671c4fd6dfc1b039d5bb9991";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/stefanbekker/projects/fancy-planties/src/lib/utils/logger.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 18,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 22
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 34
        }
      },
      "6": {
        start: {
          line: 19,
          column: 0
        },
        end: {
          line: 19,
          column: 23
        }
      },
      "7": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 56
        }
      },
      "8": {
        start: {
          line: 25,
          column: 23
        },
        end: {
          line: 30,
          column: 9
        }
      },
      "9": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 31,
          column: 54
        }
      },
      "10": {
        start: {
          line: 34,
          column: 81
        },
        end: {
          line: 34,
          column: 86
        }
      },
      "11": {
        start: {
          line: 35,
          column: 24
        },
        end: {
          line: 55,
          column: 9
        }
      },
      "12": {
        start: {
          line: 56,
          column: 8
        },
        end: {
          line: 56,
          column: 39
        }
      },
      "13": {
        start: {
          line: 59,
          column: 8
        },
        end: {
          line: 59,
          column: 43
        }
      },
      "14": {
        start: {
          line: 59,
          column: 36
        },
        end: {
          line: 59,
          column: 43
        }
      },
      "15": {
        start: {
          line: 60,
          column: 22
        },
        end: {
          line: 66,
          column: 9
        }
      },
      "16": {
        start: {
          line: 67,
          column: 29
        },
        end: {
          line: 67,
          column: 50
        }
      },
      "17": {
        start: {
          line: 69,
          column: 8
        },
        end: {
          line: 72,
          column: 9
        }
      },
      "18": {
        start: {
          line: 71,
          column: 12
        },
        end: {
          line: 71,
          column: 45
        }
      },
      "19": {
        start: {
          line: 74,
          column: 8
        },
        end: {
          line: 87,
          column: 9
        }
      },
      "20": {
        start: {
          line: 76,
          column: 16
        },
        end: {
          line: 76,
          column: 44
        }
      },
      "21": {
        start: {
          line: 77,
          column: 16
        },
        end: {
          line: 77,
          column: 22
        }
      },
      "22": {
        start: {
          line: 79,
          column: 16
        },
        end: {
          line: 79,
          column: 43
        }
      },
      "23": {
        start: {
          line: 80,
          column: 16
        },
        end: {
          line: 80,
          column: 22
        }
      },
      "24": {
        start: {
          line: 82,
          column: 16
        },
        end: {
          line: 82,
          column: 43
        }
      },
      "25": {
        start: {
          line: 83,
          column: 16
        },
        end: {
          line: 83,
          column: 22
        }
      },
      "26": {
        start: {
          line: 85,
          column: 16
        },
        end: {
          line: 85,
          column: 44
        }
      },
      "27": {
        start: {
          line: 86,
          column: 16
        },
        end: {
          line: 86,
          column: 22
        }
      },
      "28": {
        start: {
          line: 92,
          column: 8
        },
        end: {
          line: 98,
          column: 9
        }
      },
      "29": {
        start: {
          line: 96,
          column: 12
        },
        end: {
          line: 96,
          column: 76
        }
      },
      "30": {
        start: {
          line: 97,
          column: 12
        },
        end: {
          line: 97,
          column: 72
        }
      },
      "31": {
        start: {
          line: 101,
          column: 8
        },
        end: {
          line: 101,
          column: 44
        }
      },
      "32": {
        start: {
          line: 104,
          column: 8
        },
        end: {
          line: 104,
          column: 43
        }
      },
      "33": {
        start: {
          line: 107,
          column: 8
        },
        end: {
          line: 107,
          column: 43
        }
      },
      "34": {
        start: {
          line: 110,
          column: 8
        },
        end: {
          line: 110,
          column: 51
        }
      },
      "35": {
        start: {
          line: 114,
          column: 8
        },
        end: {
          line: 117,
          column: 11
        }
      },
      "36": {
        start: {
          line: 120,
          column: 8
        },
        end: {
          line: 120,
          column: 50
        }
      },
      "37": {
        start: {
          line: 123,
          column: 8
        },
        end: {
          line: 126,
          column: 11
        }
      },
      "38": {
        start: {
          line: 129,
          column: 8
        },
        end: {
          line: 129,
          column: 49
        }
      },
      "39": {
        start: {
          line: 132,
          column: 15
        },
        end: {
          line: 132,
          column: 27
        }
      },
      "40": {
        start: {
          line: 134,
          column: 4
        },
        end: {
          line: 145,
          column: 5
        }
      },
      "41": {
        start: {
          line: 136,
          column: 8
        },
        end: {
          line: 139,
          column: 11
        }
      },
      "42": {
        start: {
          line: 137,
          column: 12
        },
        end: {
          line: 137,
          column: 54
        }
      },
      "43": {
        start: {
          line: 138,
          column: 12
        },
        end: {
          line: 138,
          column: 28
        }
      },
      "44": {
        start: {
          line: 140,
          column: 8
        },
        end: {
          line: 144,
          column: 11
        }
      },
      "45": {
        start: {
          line: 141,
          column: 12
        },
        end: {
          line: 143,
          column: 15
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        },
        loc: {
          start: {
            line: 12,
            column: 18
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 30
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 21,
            column: 4
          },
          end: {
            line: 21,
            column: 5
          }
        },
        loc: {
          start: {
            line: 21,
            column: 17
          },
          end: {
            line: 23,
            column: 5
          }
        },
        line: 21
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 24,
            column: 4
          },
          end: {
            line: 24,
            column: 5
          }
        },
        loc: {
          start: {
            line: 24,
            column: 21
          },
          end: {
            line: 32,
            column: 5
          }
        },
        line: 24
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 33,
            column: 4
          },
          end: {
            line: 33,
            column: 5
          }
        },
        loc: {
          start: {
            line: 33,
            column: 21
          },
          end: {
            line: 57,
            column: 5
          }
        },
        line: 33
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 58,
            column: 4
          },
          end: {
            line: 58,
            column: 5
          }
        },
        loc: {
          start: {
            line: 58,
            column: 40
          },
          end: {
            line: 88,
            column: 5
          }
        },
        line: 58
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 89,
            column: 4
          },
          end: {
            line: 89,
            column: 5
          }
        },
        loc: {
          start: {
            line: 89,
            column: 38
          },
          end: {
            line: 99,
            column: 5
          }
        },
        line: 89
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 100,
            column: 4
          },
          end: {
            line: 100,
            column: 5
          }
        },
        loc: {
          start: {
            line: 100,
            column: 28
          },
          end: {
            line: 102,
            column: 5
          }
        },
        line: 100
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 103,
            column: 4
          },
          end: {
            line: 103,
            column: 5
          }
        },
        loc: {
          start: {
            line: 103,
            column: 27
          },
          end: {
            line: 105,
            column: 5
          }
        },
        line: 103
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 106,
            column: 4
          },
          end: {
            line: 106,
            column: 5
          }
        },
        loc: {
          start: {
            line: 106,
            column: 27
          },
          end: {
            line: 108,
            column: 5
          }
        },
        line: 106
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 109,
            column: 4
          },
          end: {
            line: 109,
            column: 5
          }
        },
        loc: {
          start: {
            line: 109,
            column: 35
          },
          end: {
            line: 111,
            column: 5
          }
        },
        line: 109
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 113,
            column: 4
          },
          end: {
            line: 113,
            column: 5
          }
        },
        loc: {
          start: {
            line: 113,
            column: 38
          },
          end: {
            line: 118,
            column: 5
          }
        },
        line: 113
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 119,
            column: 4
          },
          end: {
            line: 119,
            column: 5
          }
        },
        loc: {
          start: {
            line: 119,
            column: 34
          },
          end: {
            line: 121,
            column: 5
          }
        },
        line: 119
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 122,
            column: 4
          },
          end: {
            line: 122,
            column: 5
          }
        },
        loc: {
          start: {
            line: 122,
            column: 47
          },
          end: {
            line: 127,
            column: 5
          }
        },
        line: 122
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 128,
            column: 4
          },
          end: {
            line: 128,
            column: 5
          }
        },
        loc: {
          start: {
            line: 128,
            column: 34
          },
          end: {
            line: 130,
            column: 5
          }
        },
        line: 128
      },
      "16": {
        name: "setupErrorHandling",
        decl: {
          start: {
            line: 133,
            column: 9
          },
          end: {
            line: 133,
            column: 27
          }
        },
        loc: {
          start: {
            line: 133,
            column: 30
          },
          end: {
            line: 146,
            column: 1
          }
        },
        line: 133
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 136,
            column: 40
          },
          end: {
            line: 136,
            column: 41
          }
        },
        loc: {
          start: {
            line: 136,
            column: 49
          },
          end: {
            line: 139,
            column: 9
          }
        },
        line: 136
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 140,
            column: 41
          },
          end: {
            line: 140,
            column: 42
          }
        },
        loc: {
          start: {
            line: 140,
            column: 60
          },
          end: {
            line: 144,
            column: 9
          }
        },
        line: 140
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 22,
            column: 24
          },
          end: {
            line: 22,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 22,
            column: 24
          },
          end: {
            line: 22,
            column: 45
          }
        }, {
          start: {
            line: 22,
            column: 49
          },
          end: {
            line: 22,
            column: 55
          }
        }],
        line: 22
      },
      "1": {
        loc: {
          start: {
            line: 39,
            column: 15
          },
          end: {
            line: 41,
            column: 13
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 39,
            column: 15
          },
          end: {
            line: 39,
            column: 21
          }
        }, {
          start: {
            line: 39,
            column: 25
          },
          end: {
            line: 41,
            column: 13
          }
        }],
        line: 39
      },
      "2": {
        loc: {
          start: {
            line: 42,
            column: 15
          },
          end: {
            line: 44,
            column: 13
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 42,
            column: 15
          },
          end: {
            line: 42,
            column: 24
          }
        }, {
          start: {
            line: 42,
            column: 28
          },
          end: {
            line: 44,
            column: 13
          }
        }],
        line: 42
      },
      "3": {
        loc: {
          start: {
            line: 45,
            column: 15
          },
          end: {
            line: 47,
            column: 13
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 45,
            column: 15
          },
          end: {
            line: 45,
            column: 22
          }
        }, {
          start: {
            line: 45,
            column: 26
          },
          end: {
            line: 47,
            column: 13
          }
        }],
        line: 45
      },
      "4": {
        loc: {
          start: {
            line: 48,
            column: 15
          },
          end: {
            line: 54,
            column: 13
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 48,
            column: 15
          },
          end: {
            line: 48,
            column: 20
          }
        }, {
          start: {
            line: 48,
            column: 24
          },
          end: {
            line: 54,
            column: 13
          }
        }],
        line: 48
      },
      "5": {
        loc: {
          start: {
            line: 59,
            column: 8
          },
          end: {
            line: 59,
            column: 43
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 59,
            column: 8
          },
          end: {
            line: 59,
            column: 43
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 59
      },
      "6": {
        loc: {
          start: {
            line: 69,
            column: 8
          },
          end: {
            line: 72,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 69,
            column: 8
          },
          end: {
            line: 72,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 69
      },
      "7": {
        loc: {
          start: {
            line: 74,
            column: 8
          },
          end: {
            line: 87,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 75,
            column: 12
          },
          end: {
            line: 77,
            column: 22
          }
        }, {
          start: {
            line: 78,
            column: 12
          },
          end: {
            line: 80,
            column: 22
          }
        }, {
          start: {
            line: 81,
            column: 12
          },
          end: {
            line: 83,
            column: 22
          }
        }, {
          start: {
            line: 84,
            column: 12
          },
          end: {
            line: 86,
            column: 22
          }
        }],
        line: 74
      },
      "8": {
        loc: {
          start: {
            line: 134,
            column: 4
          },
          end: {
            line: 145,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 134,
            column: 4
          },
          end: {
            line: 145,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 134
      },
      "9": {
        loc: {
          start: {
            line: 141,
            column: 48
          },
          end: {
            line: 141,
            column: 108
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 141,
            column: 74
          },
          end: {
            line: 141,
            column: 80
          }
        }, {
          start: {
            line: 141,
            column: 83
          },
          end: {
            line: 141,
            column: 108
          }
        }],
        line: 141
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0, 0, 0],
      "8": [0, 0],
      "9": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/stefanbekker/projects/fancy-planties/src/lib/utils/logger.ts"],
      sourcesContent: ["import 'server-only';\n\nexport type LogLevel = 'debug' | 'info' | 'warn' | 'error';\n\ninterface LogEntry {\n  level: LogLevel;\n  message: string;\n  timestamp: string;\n  context?: Record<string, any>;\n  error?: Error;\n  userId?: number;\n  requestId?: string;\n}\n\nclass Logger {\n  private logLevel: LogLevel;\n\n  constructor() {\n    this.logLevel = (process.env.LOG_LEVEL as LogLevel) || 'info';\n  }\n\n  private shouldLog(level: LogLevel): boolean {\n    const levels: Record<LogLevel, number> = {\n      debug: 0,\n      info: 1,\n      warn: 2,\n      error: 3,\n    };\n    return levels[level] >= levels[this.logLevel];\n  }\n\n  private formatLog(entry: LogEntry): string {\n    const { level, message, timestamp, context, error, userId, requestId } = entry;\n    \n    const logData = {\n      level: level.toUpperCase(),\n      timestamp,\n      message,\n      ...(userId && { userId }),\n      ...(requestId && { requestId }),\n      ...(context && { context }),\n      ...(error && { \n        error: {\n          name: error.name,\n          message: error.message,\n          stack: error.stack,\n        }\n      }),\n    };\n\n    return JSON.stringify(logData);\n  }\n\n  private log(level: LogLevel, message: string, context?: Record<string, any>, error?: Error): void {\n    if (!this.shouldLog(level)) return;\n\n    const entry: LogEntry = {\n      level,\n      message,\n      timestamp: new Date().toISOString(),\n      context,\n      error,\n    };\n\n    const formattedLog = this.formatLog(entry);\n\n    // In production, you might want to send logs to external service\n    if (process.env.NODE_ENV === 'production') {\n      // Send to external logging service (e.g., DataDog, LogRocket, etc.)\n      this.sendToExternalLogger(entry);\n    }\n\n    // Console output for development and as fallback\n    switch (level) {\n      case 'debug':\n        console.debug(formattedLog);\n        break;\n      case 'info':\n        console.info(formattedLog);\n        break;\n      case 'warn':\n        console.warn(formattedLog);\n        break;\n      case 'error':\n        console.error(formattedLog);\n        break;\n    }\n  }\n\n  private async sendToExternalLogger(entry: LogEntry): Promise<void> {\n    // Implement external logging service integration here\n    // Example: Send to DataDog, LogRocket, Sentry, etc.\n    try {\n      // await externalLoggingService.send(entry);\n    } catch (error) {\n      // Fallback to console if external service fails\n      console.error('Failed to send log to external service:', error);\n      console.error('Original log entry:', this.formatLog(entry));\n    }\n  }\n\n  debug(message: string, context?: Record<string, any>): void {\n    this.log('debug', message, context);\n  }\n\n  info(message: string, context?: Record<string, any>): void {\n    this.log('info', message, context);\n  }\n\n  warn(message: string, context?: Record<string, any>): void {\n    this.log('warn', message, context);\n  }\n\n  error(message: string, error?: Error, context?: Record<string, any>): void {\n    this.log('error', message, context, error);\n  }\n\n  // Specific logging methods for common scenarios\n  authEvent(event: string, userId?: number, context?: Record<string, any>): void {\n    this.info(`Auth: ${event}`, { ...context, userId });\n  }\n\n  databaseEvent(event: string, context?: Record<string, any>): void {\n    this.debug(`Database: ${event}`, context);\n  }\n\n  apiRequest(method: string, path: string, userId?: number, duration?: number): void {\n    this.info(`API: ${method} ${path}`, { userId, duration });\n  }\n\n  securityEvent(event: string, context?: Record<string, any>): void {\n    this.warn(`Security: ${event}`, context);\n  }\n}\n\nexport const logger = new Logger();\n\n// Error boundary for catching unhandled errors\nexport function setupErrorHandling(): void {\n  if (typeof window === 'undefined') {\n    // Server-side error handling\n    process.on('uncaughtException', (error) => {\n      logger.error('Uncaught Exception', error);\n      process.exit(1);\n    });\n\n    process.on('unhandledRejection', (reason, promise) => {\n      logger.error('Unhandled Rejection', reason instanceof Error ? reason : new Error(String(reason)), {\n        promise: promise.toString(),\n      });\n    });\n  }\n}"],
      names: ["logger", "setupErrorHandling", "Logger", "logLevel", "process", "env", "LOG_LEVEL", "shouldLog", "level", "levels", "debug", "info", "warn", "error", "formatLog", "entry", "message", "timestamp", "context", "userId", "requestId", "logData", "toUpperCase", "name", "stack", "JSON", "stringify", "log", "Date", "toISOString", "formattedLog", "NODE_ENV", "sendToExternalLogger", "console", "authEvent", "event", "databaseEvent", "apiRequest", "method", "path", "duration", "securityEvent", "window", "on", "exit", "reason", "promise", "Error", "String", "toString"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "9a1869e9e52af0c2671c4fd6dfc1b039d5bb9991"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_bqsm7vxpu = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_bqsm7vxpu();
cov_bqsm7vxpu().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_bqsm7vxpu().f[0]++;
  cov_bqsm7vxpu().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_bqsm7vxpu().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_bqsm7vxpu().s[3]++;
_export(exports, {
  get logger() {
    /* istanbul ignore next */
    cov_bqsm7vxpu().f[1]++;
    cov_bqsm7vxpu().s[4]++;
    return logger;
  },
  get setupErrorHandling() {
    /* istanbul ignore next */
    cov_bqsm7vxpu().f[2]++;
    cov_bqsm7vxpu().s[5]++;
    return setupErrorHandling;
  }
});
/* istanbul ignore next */
cov_bqsm7vxpu().s[6]++;
require("server-only");
class Logger {
  constructor() {
    /* istanbul ignore next */
    cov_bqsm7vxpu().f[3]++;
    cov_bqsm7vxpu().s[7]++;
    this.logLevel =
    /* istanbul ignore next */
    (cov_bqsm7vxpu().b[0][0]++, process.env.LOG_LEVEL) ||
    /* istanbul ignore next */
    (cov_bqsm7vxpu().b[0][1]++, 'info');
  }
  shouldLog(level) {
    /* istanbul ignore next */
    cov_bqsm7vxpu().f[4]++;
    const levels =
    /* istanbul ignore next */
    (cov_bqsm7vxpu().s[8]++, {
      debug: 0,
      info: 1,
      warn: 2,
      error: 3
    });
    /* istanbul ignore next */
    cov_bqsm7vxpu().s[9]++;
    return levels[level] >= levels[this.logLevel];
  }
  formatLog(entry) {
    /* istanbul ignore next */
    cov_bqsm7vxpu().f[5]++;
    const {
      level,
      message,
      timestamp,
      context,
      error,
      userId,
      requestId
    } =
    /* istanbul ignore next */
    (cov_bqsm7vxpu().s[10]++, entry);
    const logData =
    /* istanbul ignore next */
    (cov_bqsm7vxpu().s[11]++, {
      level: level.toUpperCase(),
      timestamp,
      message,
      ...(
      /* istanbul ignore next */
      (cov_bqsm7vxpu().b[1][0]++, userId) &&
      /* istanbul ignore next */
      (cov_bqsm7vxpu().b[1][1]++, {
        userId
      })),
      ...(
      /* istanbul ignore next */
      (cov_bqsm7vxpu().b[2][0]++, requestId) &&
      /* istanbul ignore next */
      (cov_bqsm7vxpu().b[2][1]++, {
        requestId
      })),
      ...(
      /* istanbul ignore next */
      (cov_bqsm7vxpu().b[3][0]++, context) &&
      /* istanbul ignore next */
      (cov_bqsm7vxpu().b[3][1]++, {
        context
      })),
      ...(
      /* istanbul ignore next */
      (cov_bqsm7vxpu().b[4][0]++, error) &&
      /* istanbul ignore next */
      (cov_bqsm7vxpu().b[4][1]++, {
        error: {
          name: error.name,
          message: error.message,
          stack: error.stack
        }
      }))
    });
    /* istanbul ignore next */
    cov_bqsm7vxpu().s[12]++;
    return JSON.stringify(logData);
  }
  log(level, message, context, error) {
    /* istanbul ignore next */
    cov_bqsm7vxpu().f[6]++;
    cov_bqsm7vxpu().s[13]++;
    if (!this.shouldLog(level)) {
      /* istanbul ignore next */
      cov_bqsm7vxpu().b[5][0]++;
      cov_bqsm7vxpu().s[14]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_bqsm7vxpu().b[5][1]++;
    }
    const entry =
    /* istanbul ignore next */
    (cov_bqsm7vxpu().s[15]++, {
      level,
      message,
      timestamp: new Date().toISOString(),
      context,
      error
    });
    const formattedLog =
    /* istanbul ignore next */
    (cov_bqsm7vxpu().s[16]++, this.formatLog(entry));
    // In production, you might want to send logs to external service
    /* istanbul ignore next */
    cov_bqsm7vxpu().s[17]++;
    if (process.env.NODE_ENV === 'production') {
      /* istanbul ignore next */
      cov_bqsm7vxpu().b[6][0]++;
      cov_bqsm7vxpu().s[18]++;
      // Send to external logging service (e.g., DataDog, LogRocket, etc.)
      this.sendToExternalLogger(entry);
    } else
    /* istanbul ignore next */
    {
      cov_bqsm7vxpu().b[6][1]++;
    }
    // Console output for development and as fallback
    cov_bqsm7vxpu().s[19]++;
    switch (level) {
      case 'debug':
        /* istanbul ignore next */
        cov_bqsm7vxpu().b[7][0]++;
        cov_bqsm7vxpu().s[20]++;
        console.debug(formattedLog);
        /* istanbul ignore next */
        cov_bqsm7vxpu().s[21]++;
        break;
      case 'info':
        /* istanbul ignore next */
        cov_bqsm7vxpu().b[7][1]++;
        cov_bqsm7vxpu().s[22]++;
        console.info(formattedLog);
        /* istanbul ignore next */
        cov_bqsm7vxpu().s[23]++;
        break;
      case 'warn':
        /* istanbul ignore next */
        cov_bqsm7vxpu().b[7][2]++;
        cov_bqsm7vxpu().s[24]++;
        console.warn(formattedLog);
        /* istanbul ignore next */
        cov_bqsm7vxpu().s[25]++;
        break;
      case 'error':
        /* istanbul ignore next */
        cov_bqsm7vxpu().b[7][3]++;
        cov_bqsm7vxpu().s[26]++;
        console.error(formattedLog);
        /* istanbul ignore next */
        cov_bqsm7vxpu().s[27]++;
        break;
    }
  }
  async sendToExternalLogger(entry) {
    /* istanbul ignore next */
    cov_bqsm7vxpu().f[7]++;
    cov_bqsm7vxpu().s[28]++;
    // Implement external logging service integration here
    // Example: Send to DataDog, LogRocket, Sentry, etc.
    try {
      // await externalLoggingService.send(entry);
    } catch (error) {
      /* istanbul ignore next */
      cov_bqsm7vxpu().s[29]++;
      // Fallback to console if external service fails
      console.error('Failed to send log to external service:', error);
      /* istanbul ignore next */
      cov_bqsm7vxpu().s[30]++;
      console.error('Original log entry:', this.formatLog(entry));
    }
  }
  debug(message, context) {
    /* istanbul ignore next */
    cov_bqsm7vxpu().f[8]++;
    cov_bqsm7vxpu().s[31]++;
    this.log('debug', message, context);
  }
  info(message, context) {
    /* istanbul ignore next */
    cov_bqsm7vxpu().f[9]++;
    cov_bqsm7vxpu().s[32]++;
    this.log('info', message, context);
  }
  warn(message, context) {
    /* istanbul ignore next */
    cov_bqsm7vxpu().f[10]++;
    cov_bqsm7vxpu().s[33]++;
    this.log('warn', message, context);
  }
  error(message, error, context) {
    /* istanbul ignore next */
    cov_bqsm7vxpu().f[11]++;
    cov_bqsm7vxpu().s[34]++;
    this.log('error', message, context, error);
  }
  // Specific logging methods for common scenarios
  authEvent(event, userId, context) {
    /* istanbul ignore next */
    cov_bqsm7vxpu().f[12]++;
    cov_bqsm7vxpu().s[35]++;
    this.info(`Auth: ${event}`, {
      ...context,
      userId
    });
  }
  databaseEvent(event, context) {
    /* istanbul ignore next */
    cov_bqsm7vxpu().f[13]++;
    cov_bqsm7vxpu().s[36]++;
    this.debug(`Database: ${event}`, context);
  }
  apiRequest(method, path, userId, duration) {
    /* istanbul ignore next */
    cov_bqsm7vxpu().f[14]++;
    cov_bqsm7vxpu().s[37]++;
    this.info(`API: ${method} ${path}`, {
      userId,
      duration
    });
  }
  securityEvent(event, context) {
    /* istanbul ignore next */
    cov_bqsm7vxpu().f[15]++;
    cov_bqsm7vxpu().s[38]++;
    this.warn(`Security: ${event}`, context);
  }
}
const logger =
/* istanbul ignore next */
(cov_bqsm7vxpu().s[39]++, new Logger());
function setupErrorHandling() {
  /* istanbul ignore next */
  cov_bqsm7vxpu().f[16]++;
  cov_bqsm7vxpu().s[40]++;
  if (typeof window === 'undefined') {
    /* istanbul ignore next */
    cov_bqsm7vxpu().b[8][0]++;
    cov_bqsm7vxpu().s[41]++;
    // Server-side error handling
    process.on('uncaughtException', error => {
      /* istanbul ignore next */
      cov_bqsm7vxpu().f[17]++;
      cov_bqsm7vxpu().s[42]++;
      logger.error('Uncaught Exception', error);
      /* istanbul ignore next */
      cov_bqsm7vxpu().s[43]++;
      process.exit(1);
    });
    /* istanbul ignore next */
    cov_bqsm7vxpu().s[44]++;
    process.on('unhandledRejection', (reason, promise) => {
      /* istanbul ignore next */
      cov_bqsm7vxpu().f[18]++;
      cov_bqsm7vxpu().s[45]++;
      logger.error('Unhandled Rejection', reason instanceof Error ?
      /* istanbul ignore next */
      (cov_bqsm7vxpu().b[9][0]++, reason) :
      /* istanbul ignore next */
      (cov_bqsm7vxpu().b[9][1]++, new Error(String(reason))), {
        promise: promise.toString()
      });
    });
  } else
  /* istanbul ignore next */
  {
    cov_bqsm7vxpu().b[8][1]++;
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,