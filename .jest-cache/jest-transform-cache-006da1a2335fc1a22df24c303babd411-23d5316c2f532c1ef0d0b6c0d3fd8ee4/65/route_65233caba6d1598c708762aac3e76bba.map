{"version":3,"names":["cov_pvwubrdm2","actualCoverage","s","POST","request","f","user","_server1","validateRequest","b","_server","NextResponse","json","error","status","body","action","data","result","validatedData","_plantschemas","logFertilizerSchema","parse","plantInstance","_plantinstances","PlantInstanceQueries","getEnhancedById","plantInstanceId","userId","id","logFertilizer","fertilizerDate","logRepotSchema","combinedNotes","notes","potSize","soilType","logRepot","repotDate","undefined","enhancedInstance","success","message","charAt","toUpperCase","slice","console","Error","includes","details"],"sources":["/Users/stefanbekker/projects/fancy-planties/src/app/api/plant-instances/care/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { PlantInstanceQueries } from '@/lib/db/queries/plant-instances';\nimport { logFertilizerSchema, logRepotSchema } from '@/lib/validation/plant-schemas';\nimport { validateRequest } from '@/lib/auth/server';\n\n// POST /api/plant-instances/care - Log care activities (fertilizer, repot)\nexport async function POST(request: NextRequest) {\n  try {\n    const { user } = await validateRequest();\n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const body = await request.json();\n    const { action, ...data } = body;\n\n    if (!action) {\n      return NextResponse.json({ error: 'Care action is required' }, { status: 400 });\n    }\n\n    let result;\n\n    switch (action) {\n      case 'fertilize': {\n        const validatedData = logFertilizerSchema.parse(data);\n        \n        // Check if the plant instance belongs to the user\n        const plantInstance = await PlantInstanceQueries.getEnhancedById(validatedData.plantInstanceId);\n        if (!plantInstance) {\n          return NextResponse.json({ error: 'Plant instance not found' }, { status: 404 });\n        }\n        if (plantInstance.userId !== user.id) {\n          return NextResponse.json({ error: 'Forbidden' }, { status: 403 });\n        }\n\n        result = await PlantInstanceQueries.logFertilizer(\n          validatedData.plantInstanceId,\n          validatedData.fertilizerDate\n        );\n        break;\n      }\n\n      case 'repot': {\n        const validatedData = logRepotSchema.parse(data);\n        \n        // Check if the plant instance belongs to the user\n        const plantInstance = await PlantInstanceQueries.getEnhancedById(validatedData.plantInstanceId);\n        if (!plantInstance) {\n          return NextResponse.json({ error: 'Plant instance not found' }, { status: 404 });\n        }\n        if (plantInstance.userId !== user.id) {\n          return NextResponse.json({ error: 'Forbidden' }, { status: 403 });\n        }\n\n        // Combine notes with pot size and soil type if provided\n        let combinedNotes = validatedData.notes || '';\n        if (data.potSize) {\n          combinedNotes += (combinedNotes ? '\\n' : '') + `Pot size: ${data.potSize}`;\n        }\n        if (data.soilType) {\n          combinedNotes += (combinedNotes ? '\\n' : '') + `Soil type: ${data.soilType}`;\n        }\n\n        result = await PlantInstanceQueries.logRepot(\n          validatedData.plantInstanceId,\n          validatedData.repotDate,\n          combinedNotes || undefined\n        );\n        break;\n      }\n\n      default:\n        return NextResponse.json({ error: 'Invalid care action' }, { status: 400 });\n    }\n\n    // Get the enhanced plant instance with updated data\n    const enhancedInstance = await PlantInstanceQueries.getEnhancedById(result.id);\n    \n    return NextResponse.json({\n      success: true,\n      message: `${action.charAt(0).toUpperCase() + action.slice(1)} logged successfully`,\n      plantInstance: enhancedInstance,\n    });\n  } catch (error) {\n    console.error('Failed to log care activity:', error);\n    \n    if (error instanceof Error && error.message.includes('validation')) {\n      return NextResponse.json(\n        { error: 'Invalid care data', details: error.message },\n        { status: 400 }\n      );\n    }\n    \n    return NextResponse.json(\n      { error: 'Failed to log care activity' },\n      { status: 500 }\n    );\n  }\n}"],"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","ignoreList":[]}