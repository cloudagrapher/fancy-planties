{"version":3,"names":["DELETE","cov_1alv8wx5m1","f","s","GET","csvImportService","_csvimportservice","CSVImportService","request","params","user","_server1","validateRequest","b","_server","NextResponse","json","error","status","resolvedParams","progress","getImportProgress","importId","message","userId","id","console","cancelled","cancelImport","success"],"sources":["/Users/stefanbekker/projects/fancy-planties/src/app/api/import/csv/[importId]/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { validateRequest } from '@/lib/auth/server';\nimport { CSVImportService } from '@/lib/services/csv-import-service';\n\nconst csvImportService = new CSVImportService();\n\n// GET /api/import/csv/[importId] - Get import progress\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: Promise<{ importId: string }> }\n) {\n  try {\n    const { user } = await validateRequest();\n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const resolvedParams = await params;\n    const progress = csvImportService.getImportProgress(resolvedParams.importId);\n    \n    if (!progress) {\n      // Import might have completed and been cleaned up\n      // For now, return a generic \"not found\" response\n      // In production, we'd want to persist this to database\n      return NextResponse.json({ \n        error: 'Import not found',\n        message: 'Import may have completed successfully but progress record is no longer available',\n        importId: resolvedParams.importId\n      }, { status: 404 });\n    }\n\n    if (progress.userId !== user.id) {\n      return NextResponse.json({ error: 'Forbidden' }, { status: 403 });\n    }\n\n    return NextResponse.json({ progress });\n\n  } catch (error) {\n    console.error('Get import progress error:', error);\n    return NextResponse.json(\n      { error: 'Failed to get import progress' },\n      { status: 500 }\n    );\n  }\n}\n\n// DELETE /api/import/csv/[importId] - Cancel import\nexport async function DELETE(\n  request: NextRequest,\n  { params }: { params: Promise<{ importId: string }> }\n) {\n  try {\n    const { user } = await validateRequest();\n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const resolvedParams = await params;\n    const progress = csvImportService.getImportProgress(resolvedParams.importId);\n    \n    if (!progress) {\n      return NextResponse.json({ error: 'Import not found' }, { status: 404 });\n    }\n\n    if (progress.userId !== user.id) {\n      return NextResponse.json({ error: 'Forbidden' }, { status: 403 });\n    }\n\n    const cancelled = csvImportService.cancelImport(resolvedParams.importId);\n    \n    if (!cancelled) {\n      return NextResponse.json(\n        { error: 'Cannot cancel import in current state' },\n        { status: 400 }\n      );\n    }\n\n    return NextResponse.json({ success: true });\n\n  } catch (error) {\n    console.error('Cancel import error:', error);\n    return NextResponse.json(\n      { error: 'Failed to cancel import' },\n      { status: 500 }\n    );\n  }\n}"],"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","ignoreList":[]}