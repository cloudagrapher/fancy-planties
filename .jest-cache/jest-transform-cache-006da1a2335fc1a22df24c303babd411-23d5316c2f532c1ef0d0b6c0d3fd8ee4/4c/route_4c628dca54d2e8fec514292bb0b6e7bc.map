{"version":3,"names":["cov_472ehenzb","actualCoverage","s","GET","request","f","user","_server1","validateRequest","b","_server","NextResponse","json","error","status","userId","id","today","Date","setHours","plantStats","_db","db","select","totalPlants","_drizzleorm","sql","activePlants","_schema","plantInstances","isActive","careDueToday","fertilizerDue","toISOString","from","where","eq","propagationStats","totalPropagations","activePropagations","propagations","successfulPropagations","totalCompletedPropagations","count","and","inArray","completedCount","successfulCount","propagationSuccessRate","Math","round","fertilizerEventData","nickname","thirtyDaysFromNow","setDate","getDate","fertilizerEvents","filter","plant","map","plantName","plantId","toString","date","split","type","dashboardStats","console"],"sources":["/Users/stefanbekker/projects/fancy-planties/src/app/api/dashboard/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { validateRequest } from '@/lib/auth/server';\nimport { db } from '@/lib/db';\nimport { plantInstances, propagations } from '@/lib/db/schema';\nimport { eq, and, sql, inArray } from 'drizzle-orm';\n\nexport interface FertilizerEvent {\n  id: string;\n  plantName: string;\n  plantId: string;\n  date: string;\n  type: 'fertilize';\n}\n\nexport interface DashboardStats {\n  totalPlants: number;\n  activePlants: number;\n  careDueToday: number;\n  totalPropagations: number;\n  activePropagations: number;\n  successfulPropagations: number;\n  propagationSuccessRate: number;\n  fertilizerEvents: FertilizerEvent[];\n}\n\n// GET /api/dashboard - Get dashboard statistics\nexport async function GET(request: NextRequest) {\n  try {\n    const { user } = await validateRequest();\n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const userId = user.id;\n    const today = new Date();\n    today.setHours(23, 59, 59, 999); // End of today\n\n    // Get plant statistics\n    const [plantStats] = await db\n      .select({\n        totalPlants: sql<number>`count(*)`,\n        activePlants: sql<number>`count(*) filter (where ${plantInstances.isActive} = true)`,\n        careDueToday: sql<number>`count(*) filter (where ${plantInstances.isActive} = true and ${plantInstances.fertilizerDue} <= ${today.toISOString()})`\n      })\n      .from(plantInstances)\n      .where(eq(plantInstances.userId, userId));\n\n    // Get propagation statistics\n    const [propagationStats] = await db\n      .select({\n        totalPropagations: sql<number>`count(*)`,\n        activePropagations: sql<number>`count(*) filter (where ${propagations.status} in ('started', 'rooting'))`,\n        successfulPropagations: sql<number>`count(*) filter (where ${propagations.status} in ('planted', 'established'))`\n      })\n      .from(propagations)\n      .where(eq(propagations.userId, userId));\n\n    // Calculate success rate\n    const totalCompletedPropagations = await db\n      .select({\n        count: sql<number>`count(*)`\n      })\n      .from(propagations)\n      .where(\n        and(\n          eq(propagations.userId, userId),\n          inArray(propagations.status, ['planted', 'established'])\n        )\n      );\n\n    const completedCount = totalCompletedPropagations[0]?.count || 0;\n    const successfulCount = propagationStats?.successfulPropagations || 0;\n    const propagationSuccessRate = completedCount > 0 ? Math.round((successfulCount / completedCount) * 100) : 0;\n\n    // Get fertilizer events from plant instances with due dates\n    const fertilizerEventData = await db\n      .select({\n        id: plantInstances.id,\n        nickname: plantInstances.nickname,\n        fertilizerDue: plantInstances.fertilizerDue\n      })\n      .from(plantInstances)\n      .where(\n        and(\n          eq(plantInstances.userId, userId),\n          eq(plantInstances.isActive, true)\n        )\n      );\n\n    // Convert to fertilizer events with proper date filtering (show events for next 30 days)\n    const thirtyDaysFromNow = new Date();\n    thirtyDaysFromNow.setDate(thirtyDaysFromNow.getDate() + 30);\n    \n    const fertilizerEvents: FertilizerEvent[] = fertilizerEventData\n      .filter(plant => plant.fertilizerDue && plant.fertilizerDue <= thirtyDaysFromNow)\n      .map(plant => ({\n        id: `fertilizer-${plant.id}`,\n        plantName: plant.nickname,\n        plantId: plant.id.toString(),\n        date: plant.fertilizerDue!.toISOString().split('T')[0], // Format as YYYY-MM-DD\n        type: 'fertilize' as const\n      }));\n\n    const dashboardStats: DashboardStats = {\n      totalPlants: plantStats?.totalPlants || 0,\n      activePlants: plantStats?.activePlants || 0,\n      careDueToday: plantStats?.careDueToday || 0,\n      totalPropagations: propagationStats?.totalPropagations || 0,\n      activePropagations: propagationStats?.activePropagations || 0,\n      successfulPropagations: successfulCount,\n      propagationSuccessRate,\n      fertilizerEvents\n    };\n    \n    return NextResponse.json(dashboardStats);\n  } catch (error) {\n    console.error('Failed to get dashboard stats:', error);\n    return NextResponse.json(\n      { error: 'Failed to get dashboard stats' },\n      { status: 500 }\n    );\n  }\n}"],"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","ignoreList":[]}