60b2449ee933b734f974a9aa86f08522
"use strict";

/* istanbul ignore next */
function cov_z7detecsf() {
  var path = "/Users/stefanbekker/projects/fancy-planties/src/app/api/search/presets/route.ts";
  var hash = "07990c6790100d951954b4cc0cf695617af1d6db";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/stefanbekker/projects/fancy-planties/src/app/api/search/presets/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 18,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 19
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 20
        }
      },
      "6": {
        start: {
          line: 19,
          column: 16
        },
        end: {
          line: 19,
          column: 38
        }
      },
      "7": {
        start: {
          line: 20,
          column: 13
        },
        end: {
          line: 20,
          column: 27
        }
      },
      "8": {
        start: {
          line: 21,
          column: 17
        },
        end: {
          line: 21,
          column: 55
        }
      },
      "9": {
        start: {
          line: 22,
          column: 24
        },
        end: {
          line: 22,
          column: 75
        }
      },
      "10": {
        start: {
          line: 23,
          column: 22
        },
        end: {
          line: 23,
          column: 73
        }
      },
      "11": {
        start: {
          line: 25,
          column: 4
        },
        end: {
          line: 49,
          column: 5
        }
      },
      "12": {
        start: {
          line: 26,
          column: 25
        },
        end: {
          line: 26,
          column: 62
        }
      },
      "13": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 33,
          column: 9
        }
      },
      "14": {
        start: {
          line: 28,
          column: 12
        },
        end: {
          line: 32,
          column: 15
        }
      },
      "15": {
        start: {
          line: 35,
          column: 24
        },
        end: {
          line: 35,
          column: 97
        }
      },
      "16": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 41,
          column: 11
        }
      },
      "17": {
        start: {
          line: 43,
          column: 8
        },
        end: {
          line: 43,
          column: 58
        }
      },
      "18": {
        start: {
          line: 44,
          column: 8
        },
        end: {
          line: 48,
          column: 11
        }
      },
      "19": {
        start: {
          line: 52,
          column: 4
        },
        end: {
          line: 89,
          column: 5
        }
      },
      "20": {
        start: {
          line: 53,
          column: 25
        },
        end: {
          line: 53,
          column: 62
        }
      },
      "21": {
        start: {
          line: 54,
          column: 8
        },
        end: {
          line: 60,
          column: 9
        }
      },
      "22": {
        start: {
          line: 55,
          column: 12
        },
        end: {
          line: 59,
          column: 15
        }
      },
      "23": {
        start: {
          line: 61,
          column: 21
        },
        end: {
          line: 61,
          column: 41
        }
      },
      "24": {
        start: {
          line: 62,
          column: 27
        },
        end: {
          line: 65,
          column: 10
        }
      },
      "25": {
        start: {
          line: 67,
          column: 23
        },
        end: {
          line: 67,
          column: 222
        }
      },
      "26": {
        start: {
          line: 68,
          column: 8
        },
        end: {
          line: 73,
          column: 11
        }
      },
      "27": {
        start: {
          line: 75,
          column: 8
        },
        end: {
          line: 75,
          column: 58
        }
      },
      "28": {
        start: {
          line: 76,
          column: 8
        },
        end: {
          line: 83,
          column: 9
        }
      },
      "29": {
        start: {
          line: 77,
          column: 12
        },
        end: {
          line: 82,
          column: 15
        }
      },
      "30": {
        start: {
          line: 84,
          column: 8
        },
        end: {
          line: 88,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        },
        loc: {
          start: {
            line: 12,
            column: 15
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 16
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "GET",
        decl: {
          start: {
            line: 24,
            column: 15
          },
          end: {
            line: 24,
            column: 18
          }
        },
        loc: {
          start: {
            line: 24,
            column: 21
          },
          end: {
            line: 50,
            column: 1
          }
        },
        line: 24
      },
      "4": {
        name: "POST",
        decl: {
          start: {
            line: 51,
            column: 15
          },
          end: {
            line: 51,
            column: 19
          }
        },
        loc: {
          start: {
            line: 51,
            column: 29
          },
          end: {
            line: 90,
            column: 1
          }
        },
        line: 51
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 27,
            column: 8
          },
          end: {
            line: 33,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 27,
            column: 8
          },
          end: {
            line: 33,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 27
      },
      "1": {
        loc: {
          start: {
            line: 54,
            column: 8
          },
          end: {
            line: 60,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 54,
            column: 8
          },
          end: {
            line: 60,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 54
      },
      "2": {
        loc: {
          start: {
            line: 67,
            column: 101
          },
          end: {
            line: 67,
            column: 129
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 67,
            column: 101
          },
          end: {
            line: 67,
            column: 123
          }
        }, {
          start: {
            line: 67,
            column: 127
          },
          end: {
            line: 67,
            column: 129
          }
        }],
        line: 67
      },
      "3": {
        loc: {
          start: {
            line: 76,
            column: 8
          },
          end: {
            line: 83,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 76,
            column: 8
          },
          end: {
            line: 83,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 76
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/stefanbekker/projects/fancy-planties/src/app/api/search/presets/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport { z } from 'zod';\nimport { validateRequest } from '@/lib/auth/server';\nimport { advancedSearchService } from '@/lib/services/advanced-search';\nimport { searchPresetSchema } from '@/lib/validation/plant-schemas';\n\n// GET /api/search/presets - Get user's search presets\nexport async function GET() {\n  try {\n    const { user } = await validateRequest();\n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    // Get user's search presets\n    const presets = await advancedSearchService.getUserSearchPresets(user.id);\n\n    return NextResponse.json({\n      success: true,\n      data: { presets },\n    });\n\n  } catch (error) {\n    console.error('Get search presets error:', error);\n    \n    return NextResponse.json(\n      { error: 'Failed to get search presets' },\n      { status: 500 }\n    );\n  }\n}\n\n// POST /api/search/presets - Save a new search preset\nexport async function POST(request: NextRequest) {\n  try {\n    const { user } = await validateRequest();\n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const body = await request.json();\n    const presetData = searchPresetSchema.parse({\n      ...body,\n      userId: user.id,\n    });\n\n    // Save search preset\n    const preset = await advancedSearchService.saveSearchPreset(\n      presetData.name,\n      presetData.description || '',\n      presetData.filters,\n      presetData.sortBy,\n      presetData.sortOrder,\n      user.id,\n      presetData.isDefault\n    );\n\n    return NextResponse.json({\n      success: true,\n      data: { preset },\n    });\n\n  } catch (error) {\n    console.error('Save search preset error:', error);\n    \n    if (error instanceof z.ZodError) {\n      return NextResponse.json(\n        { error: 'Invalid preset data', details: error.issues },\n        { status: 400 }\n      );\n    }\n\n    return NextResponse.json(\n      { error: 'Failed to save search preset' },\n      { status: 500 }\n    );\n  }\n}"],
      names: ["GET", "POST", "user", "validateRequest", "NextResponse", "json", "error", "status", "presets", "advancedSearchService", "getUserSearchPresets", "id", "success", "data", "console", "request", "body", "presetData", "searchPresetSchema", "parse", "userId", "preset", "saveSearchPreset", "name", "description", "filters", "sortBy", "sortOrder", "isDefault", "z", "ZodError", "details", "issues"],
      mappings: ";;;;;;;;;;;QAOsBA;eAAAA;;QA0BAC;eAAAA;;;wBAjCoB;qBACxB;yBACc;gCACM;8BACH;AAG5B,eAAeD;IACpB,IAAI;QACF,MAAM,EAAEE,IAAI,EAAE,GAAG,MAAMC,IAAAA,wBAAe;QACtC,IAAI,CAACD,MAAM;YACT,OAAOE,oBAAY,CAACC,IAAI,CAAC;gBAAEC,OAAO;YAAe,GAAG;gBAAEC,QAAQ;YAAI;QACpE;QAEA,4BAA4B;QAC5B,MAAMC,UAAU,MAAMC,qCAAqB,CAACC,oBAAoB,CAACR,KAAKS,EAAE;QAExE,OAAOP,oBAAY,CAACC,IAAI,CAAC;YACvBO,SAAS;YACTC,MAAM;gBAAEL;YAAQ;QAClB;IAEF,EAAE,OAAOF,OAAO;QACdQ,QAAQR,KAAK,CAAC,6BAA6BA;QAE3C,OAAOF,oBAAY,CAACC,IAAI,CACtB;YAAEC,OAAO;QAA+B,GACxC;YAAEC,QAAQ;QAAI;IAElB;AACF;AAGO,eAAeN,KAAKc,OAAoB;IAC7C,IAAI;QACF,MAAM,EAAEb,IAAI,EAAE,GAAG,MAAMC,IAAAA,wBAAe;QACtC,IAAI,CAACD,MAAM;YACT,OAAOE,oBAAY,CAACC,IAAI,CAAC;gBAAEC,OAAO;YAAe,GAAG;gBAAEC,QAAQ;YAAI;QACpE;QAEA,MAAMS,OAAO,MAAMD,QAAQV,IAAI;QAC/B,MAAMY,aAAaC,gCAAkB,CAACC,KAAK,CAAC;YAC1C,GAAGH,IAAI;YACPI,QAAQlB,KAAKS,EAAE;QACjB;QAEA,qBAAqB;QACrB,MAAMU,SAAS,MAAMZ,qCAAqB,CAACa,gBAAgB,CACzDL,WAAWM,IAAI,EACfN,WAAWO,WAAW,IAAI,IAC1BP,WAAWQ,OAAO,EAClBR,WAAWS,MAAM,EACjBT,WAAWU,SAAS,EACpBzB,KAAKS,EAAE,EACPM,WAAWW,SAAS;QAGtB,OAAOxB,oBAAY,CAACC,IAAI,CAAC;YACvBO,SAAS;YACTC,MAAM;gBAAEQ;YAAO;QACjB;IAEF,EAAE,OAAOf,OAAO;QACdQ,QAAQR,KAAK,CAAC,6BAA6BA;QAE3C,IAAIA,iBAAiBuB,MAAC,CAACC,QAAQ,EAAE;YAC/B,OAAO1B,oBAAY,CAACC,IAAI,CACtB;gBAAEC,OAAO;gBAAuByB,SAASzB,MAAM0B,MAAM;YAAC,GACtD;gBAAEzB,QAAQ;YAAI;QAElB;QAEA,OAAOH,oBAAY,CAACC,IAAI,CACtB;YAAEC,OAAO;QAA+B,GACxC;YAAEC,QAAQ;QAAI;IAElB;AACF"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "07990c6790100d951954b4cc0cf695617af1d6db"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_z7detecsf = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_z7detecsf();
cov_z7detecsf().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_z7detecsf().f[0]++;
  cov_z7detecsf().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_z7detecsf().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_z7detecsf().s[3]++;
_export(exports, {
  get GET() {
    /* istanbul ignore next */
    cov_z7detecsf().f[1]++;
    cov_z7detecsf().s[4]++;
    return GET;
  },
  get POST() {
    /* istanbul ignore next */
    cov_z7detecsf().f[2]++;
    cov_z7detecsf().s[5]++;
    return POST;
  }
});
const _server =
/* istanbul ignore next */
(cov_z7detecsf().s[6]++, require("next/server"));
const _zod =
/* istanbul ignore next */
(cov_z7detecsf().s[7]++, require("zod"));
const _server1 =
/* istanbul ignore next */
(cov_z7detecsf().s[8]++, require("../../../../lib/auth/server"));
const _advancedsearch =
/* istanbul ignore next */
(cov_z7detecsf().s[9]++, require("../../../../lib/services/advanced-search"));
const _plantschemas =
/* istanbul ignore next */
(cov_z7detecsf().s[10]++, require("../../../../lib/validation/plant-schemas"));
async function GET() {
  /* istanbul ignore next */
  cov_z7detecsf().f[3]++;
  cov_z7detecsf().s[11]++;
  try {
    const {
      user
    } =
    /* istanbul ignore next */
    (cov_z7detecsf().s[12]++, await (0, _server1.validateRequest)());
    /* istanbul ignore next */
    cov_z7detecsf().s[13]++;
    if (!user) {
      /* istanbul ignore next */
      cov_z7detecsf().b[0][0]++;
      cov_z7detecsf().s[14]++;
      return _server.NextResponse.json({
        error: 'Unauthorized'
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_z7detecsf().b[0][1]++;
    }
    // Get user's search presets
    const presets =
    /* istanbul ignore next */
    (cov_z7detecsf().s[15]++, await _advancedsearch.advancedSearchService.getUserSearchPresets(user.id));
    /* istanbul ignore next */
    cov_z7detecsf().s[16]++;
    return _server.NextResponse.json({
      success: true,
      data: {
        presets
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_z7detecsf().s[17]++;
    console.error('Get search presets error:', error);
    /* istanbul ignore next */
    cov_z7detecsf().s[18]++;
    return _server.NextResponse.json({
      error: 'Failed to get search presets'
    }, {
      status: 500
    });
  }
}
async function POST(request) {
  /* istanbul ignore next */
  cov_z7detecsf().f[4]++;
  cov_z7detecsf().s[19]++;
  try {
    const {
      user
    } =
    /* istanbul ignore next */
    (cov_z7detecsf().s[20]++, await (0, _server1.validateRequest)());
    /* istanbul ignore next */
    cov_z7detecsf().s[21]++;
    if (!user) {
      /* istanbul ignore next */
      cov_z7detecsf().b[1][0]++;
      cov_z7detecsf().s[22]++;
      return _server.NextResponse.json({
        error: 'Unauthorized'
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_z7detecsf().b[1][1]++;
    }
    const body =
    /* istanbul ignore next */
    (cov_z7detecsf().s[23]++, await request.json());
    const presetData =
    /* istanbul ignore next */
    (cov_z7detecsf().s[24]++, _plantschemas.searchPresetSchema.parse({
      ...body,
      userId: user.id
    }));
    // Save search preset
    const preset =
    /* istanbul ignore next */
    (cov_z7detecsf().s[25]++, await _advancedsearch.advancedSearchService.saveSearchPreset(presetData.name,
    /* istanbul ignore next */
    (cov_z7detecsf().b[2][0]++, presetData.description) ||
    /* istanbul ignore next */
    (cov_z7detecsf().b[2][1]++, ''), presetData.filters, presetData.sortBy, presetData.sortOrder, user.id, presetData.isDefault));
    /* istanbul ignore next */
    cov_z7detecsf().s[26]++;
    return _server.NextResponse.json({
      success: true,
      data: {
        preset
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_z7detecsf().s[27]++;
    console.error('Save search preset error:', error);
    /* istanbul ignore next */
    cov_z7detecsf().s[28]++;
    if (error instanceof _zod.z.ZodError) {
      /* istanbul ignore next */
      cov_z7detecsf().b[3][0]++;
      cov_z7detecsf().s[29]++;
      return _server.NextResponse.json({
        error: 'Invalid preset data',
        details: error.issues
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_z7detecsf().b[3][1]++;
    }
    cov_z7detecsf().s[30]++;
    return _server.NextResponse.json({
      error: 'Failed to save search preset'
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,