a1cd353c7b40b564ee33505bafb0e870
"use strict";

/* istanbul ignore next */
function cov_2htb79oys0() {
  var path = "/Users/stefanbekker/projects/fancy-planties/src/app/api/plants/suggestions/route.ts";
  var hash = "79a6e762aa669a54efd428c84f17485bb81af51d";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/stefanbekker/projects/fancy-planties/src/app/api/plants/suggestions/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 19
        }
      },
      "3": {
        start: {
          line: 11,
          column: 16
        },
        end: {
          line: 11,
          column: 38
        }
      },
      "4": {
        start: {
          line: 12,
          column: 17
        },
        end: {
          line: 12,
          column: 55
        }
      },
      "5": {
        start: {
          line: 13,
          column: 23
        },
        end: {
          line: 13,
          column: 75
        }
      },
      "6": {
        start: {
          line: 14,
          column: 21
        },
        end: {
          line: 14,
          column: 69
        }
      },
      "7": {
        start: {
          line: 16,
          column: 4
        },
        end: {
          line: 55,
          column: 5
        }
      },
      "8": {
        start: {
          line: 17,
          column: 25
        },
        end: {
          line: 17,
          column: 62
        }
      },
      "9": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 24,
          column: 9
        }
      },
      "10": {
        start: {
          line: 19,
          column: 12
        },
        end: {
          line: 23,
          column: 15
        }
      },
      "11": {
        start: {
          line: 25,
          column: 33
        },
        end: {
          line: 25,
          column: 53
        }
      },
      "12": {
        start: {
          line: 26,
          column: 22
        },
        end: {
          line: 26,
          column: 72
        }
      },
      "13": {
        start: {
          line: 27,
          column: 21
        },
        end: {
          line: 27,
          column: 54
        }
      },
      "14": {
        start: {
          line: 28,
          column: 25
        },
        end: {
          line: 36,
          column: 9
        }
      },
      "15": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 41,
          column: 9
        }
      },
      "16": {
        start: {
          line: 39,
          column: 32
        },
        end: {
          line: 39,
          column: 100
        }
      },
      "17": {
        start: {
          line: 40,
          column: 12
        },
        end: {
          line: 40,
          column: 52
        }
      },
      "18": {
        start: {
          line: 43,
          column: 8
        },
        end: {
          line: 46,
          column: 9
        }
      },
      "19": {
        start: {
          line: 44,
          column: 32
        },
        end: {
          line: 44,
          column: 87
        }
      },
      "20": {
        start: {
          line: 45,
          column: 12
        },
        end: {
          line: 45,
          column: 52
        }
      },
      "21": {
        start: {
          line: 47,
          column: 8
        },
        end: {
          line: 47,
          column: 51
        }
      },
      "22": {
        start: {
          line: 49,
          column: 8
        },
        end: {
          line: 49,
          column: 59
        }
      },
      "23": {
        start: {
          line: 50,
          column: 8
        },
        end: {
          line: 54,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "GET",
        decl: {
          start: {
            line: 15,
            column: 15
          },
          end: {
            line: 15,
            column: 18
          }
        },
        loc: {
          start: {
            line: 15,
            column: 28
          },
          end: {
            line: 56,
            column: 1
          }
        },
        line: 15
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 18,
            column: 8
          },
          end: {
            line: 24,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 18,
            column: 8
          },
          end: {
            line: 24,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 18
      },
      "1": {
        loc: {
          start: {
            line: 26,
            column: 22
          },
          end: {
            line: 26,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 26,
            column: 22
          },
          end: {
            line: 26,
            column: 43
          }
        }, {
          start: {
            line: 26,
            column: 47
          },
          end: {
            line: 26,
            column: 72
          }
        }],
        line: 26
      },
      "2": {
        loc: {
          start: {
            line: 27,
            column: 21
          },
          end: {
            line: 27,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 27,
            column: 21
          },
          end: {
            line: 27,
            column: 45
          }
        }, {
          start: {
            line: 27,
            column: 49
          },
          end: {
            line: 27,
            column: 54
          }
        }],
        line: 27
      },
      "3": {
        loc: {
          start: {
            line: 38,
            column: 8
          },
          end: {
            line: 41,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 38,
            column: 8
          },
          end: {
            line: 41,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 38
      },
      "4": {
        loc: {
          start: {
            line: 38,
            column: 12
          },
          end: {
            line: 38,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 38,
            column: 12
          },
          end: {
            line: 38,
            column: 17
          }
        }, {
          start: {
            line: 38,
            column: 22
          },
          end: {
            line: 38,
            column: 44
          }
        }, {
          start: {
            line: 38,
            column: 48
          },
          end: {
            line: 38,
            column: 62
          }
        }],
        line: 38
      },
      "5": {
        loc: {
          start: {
            line: 43,
            column: 8
          },
          end: {
            line: 46,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 43,
            column: 8
          },
          end: {
            line: 46,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 43
      },
      "6": {
        loc: {
          start: {
            line: 43,
            column: 12
          },
          end: {
            line: 43,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 43,
            column: 12
          },
          end: {
            line: 43,
            column: 28
          }
        }, {
          start: {
            line: 43,
            column: 32
          },
          end: {
            line: 43,
            column: 46
          }
        }],
        line: 43
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0
    },
    f: {
      "0": 0,
      "1": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0, 0],
      "5": [0, 0],
      "6": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/stefanbekker/projects/fancy-planties/src/app/api/plants/suggestions/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport { validateRequest } from '@/lib/auth/server';\nimport { getQuickSelectPlants } from '@/lib/db/queries/plant-taxonomy';\nimport { plantSearchService } from '@/lib/services/plant-search';\n\n// GET /api/plants/suggestions - Get search suggestions and quick select plants\nexport async function GET(request: NextRequest) {\n  try {\n    const { user } = await validateRequest();\n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const { searchParams } = new URL(request.url);\n    const query = searchParams.get('q') || searchParams.get('query');\n    const type = searchParams.get('type') || 'all'; // 'suggestions', 'quick', or 'all'\n\n    const response: {\n      success: boolean;\n      data: Record<string, unknown>;\n      metadata: {\n        operation: string;\n        timestamp: Date;\n        userId: number;\n      };\n    } = {\n      success: true,\n      data: {},\n      metadata: {\n        operation: 'suggestions',\n        timestamp: new Date(),\n        userId: user.id,\n      },\n    };\n\n    // Get search suggestions if query provided\n    if (query && (type === 'suggestions' || type === 'all')) {\n      const suggestions = await plantSearchService.getSearchSuggestions(query, 5);\n      response.data.suggestions = suggestions;\n    }\n\n    // Get quick select plants if requested\n    if (type === 'quick' || type === 'all') {\n      const quickSelect = await getQuickSelectPlants(user.id);\n      response.data.quickSelect = quickSelect;\n    }\n\n    return NextResponse.json(response);\n  } catch (error) {\n    console.error('Error getting suggestions:', error);\n    \n    return NextResponse.json(\n      { error: 'Internal server error' }, \n      { status: 500 }\n    );\n  }\n}"],
      names: ["GET", "request", "user", "validateRequest", "NextResponse", "json", "error", "status", "searchParams", "URL", "url", "query", "get", "type", "response", "success", "data", "metadata", "operation", "timestamp", "Date", "userId", "id", "suggestions", "plantSearchService", "getSearchSuggestions", "quickSelect", "getQuickSelectPlants", "console"],
      mappings: ";;;;+BAMsBA;;;eAAAA;;;wBANoB;yBACV;+BACK;6BACF;AAG5B,eAAeA,IAAIC,OAAoB;IAC5C,IAAI;QACF,MAAM,EAAEC,IAAI,EAAE,GAAG,MAAMC,IAAAA,wBAAe;QACtC,IAAI,CAACD,MAAM;YACT,OAAOE,oBAAY,CAACC,IAAI,CAAC;gBAAEC,OAAO;YAAe,GAAG;gBAAEC,QAAQ;YAAI;QACpE;QAEA,MAAM,EAAEC,YAAY,EAAE,GAAG,IAAIC,IAAIR,QAAQS,GAAG;QAC5C,MAAMC,QAAQH,aAAaI,GAAG,CAAC,QAAQJ,aAAaI,GAAG,CAAC;QACxD,MAAMC,OAAOL,aAAaI,GAAG,CAAC,WAAW,OAAO,mCAAmC;QAEnF,MAAME,WAQF;YACFC,SAAS;YACTC,MAAM,CAAC;YACPC,UAAU;gBACRC,WAAW;gBACXC,WAAW,IAAIC;gBACfC,QAAQnB,KAAKoB,EAAE;YACjB;QACF;QAEA,2CAA2C;QAC3C,IAAIX,SAAUE,CAAAA,SAAS,iBAAiBA,SAAS,KAAI,GAAI;YACvD,MAAMU,cAAc,MAAMC,+BAAkB,CAACC,oBAAoB,CAACd,OAAO;YACzEG,SAASE,IAAI,CAACO,WAAW,GAAGA;QAC9B;QAEA,uCAAuC;QACvC,IAAIV,SAAS,WAAWA,SAAS,OAAO;YACtC,MAAMa,cAAc,MAAMC,IAAAA,mCAAoB,EAACzB,KAAKoB,EAAE;YACtDR,SAASE,IAAI,CAACU,WAAW,GAAGA;QAC9B;QAEA,OAAOtB,oBAAY,CAACC,IAAI,CAACS;IAC3B,EAAE,OAAOR,OAAO;QACdsB,QAAQtB,KAAK,CAAC,8BAA8BA;QAE5C,OAAOF,oBAAY,CAACC,IAAI,CACtB;YAAEC,OAAO;QAAwB,GACjC;YAAEC,QAAQ;QAAI;IAElB;AACF"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "79a6e762aa669a54efd428c84f17485bb81af51d"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2htb79oys0 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2htb79oys0();
cov_2htb79oys0().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_2htb79oys0().s[1]++;
Object.defineProperty(exports, "GET", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_2htb79oys0().f[0]++;
    cov_2htb79oys0().s[2]++;
    return GET;
  }
});
const _server =
/* istanbul ignore next */
(cov_2htb79oys0().s[3]++, require("next/server"));
const _server1 =
/* istanbul ignore next */
(cov_2htb79oys0().s[4]++, require("../../../../lib/auth/server"));
const _planttaxonomy =
/* istanbul ignore next */
(cov_2htb79oys0().s[5]++, require("../../../../lib/db/queries/plant-taxonomy"));
const _plantsearch =
/* istanbul ignore next */
(cov_2htb79oys0().s[6]++, require("../../../../lib/services/plant-search"));
async function GET(request) {
  /* istanbul ignore next */
  cov_2htb79oys0().f[1]++;
  cov_2htb79oys0().s[7]++;
  try {
    const {
      user
    } =
    /* istanbul ignore next */
    (cov_2htb79oys0().s[8]++, await (0, _server1.validateRequest)());
    /* istanbul ignore next */
    cov_2htb79oys0().s[9]++;
    if (!user) {
      /* istanbul ignore next */
      cov_2htb79oys0().b[0][0]++;
      cov_2htb79oys0().s[10]++;
      return _server.NextResponse.json({
        error: 'Unauthorized'
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_2htb79oys0().b[0][1]++;
    }
    const {
      searchParams
    } =
    /* istanbul ignore next */
    (cov_2htb79oys0().s[11]++, new URL(request.url));
    const query =
    /* istanbul ignore next */
    (cov_2htb79oys0().s[12]++,
    /* istanbul ignore next */
    (cov_2htb79oys0().b[1][0]++, searchParams.get('q')) ||
    /* istanbul ignore next */
    (cov_2htb79oys0().b[1][1]++, searchParams.get('query')));
    const type =
    /* istanbul ignore next */
    (cov_2htb79oys0().s[13]++,
    /* istanbul ignore next */
    (cov_2htb79oys0().b[2][0]++, searchParams.get('type')) ||
    /* istanbul ignore next */
    (cov_2htb79oys0().b[2][1]++, 'all')); // 'suggestions', 'quick', or 'all'
    const response =
    /* istanbul ignore next */
    (cov_2htb79oys0().s[14]++, {
      success: true,
      data: {},
      metadata: {
        operation: 'suggestions',
        timestamp: new Date(),
        userId: user.id
      }
    });
    // Get search suggestions if query provided
    /* istanbul ignore next */
    cov_2htb79oys0().s[15]++;
    if (
    /* istanbul ignore next */
    (cov_2htb79oys0().b[4][0]++, query) && (
    /* istanbul ignore next */
    (cov_2htb79oys0().b[4][1]++, type === 'suggestions') ||
    /* istanbul ignore next */
    (cov_2htb79oys0().b[4][2]++, type === 'all'))) {
      /* istanbul ignore next */
      cov_2htb79oys0().b[3][0]++;
      const suggestions =
      /* istanbul ignore next */
      (cov_2htb79oys0().s[16]++, await _plantsearch.plantSearchService.getSearchSuggestions(query, 5));
      /* istanbul ignore next */
      cov_2htb79oys0().s[17]++;
      response.data.suggestions = suggestions;
    } else
    /* istanbul ignore next */
    {
      cov_2htb79oys0().b[3][1]++;
    }
    // Get quick select plants if requested
    cov_2htb79oys0().s[18]++;
    if (
    /* istanbul ignore next */
    (cov_2htb79oys0().b[6][0]++, type === 'quick') ||
    /* istanbul ignore next */
    (cov_2htb79oys0().b[6][1]++, type === 'all')) {
      /* istanbul ignore next */
      cov_2htb79oys0().b[5][0]++;
      const quickSelect =
      /* istanbul ignore next */
      (cov_2htb79oys0().s[19]++, await (0, _planttaxonomy.getQuickSelectPlants)(user.id));
      /* istanbul ignore next */
      cov_2htb79oys0().s[20]++;
      response.data.quickSelect = quickSelect;
    } else
    /* istanbul ignore next */
    {
      cov_2htb79oys0().b[5][1]++;
    }
    cov_2htb79oys0().s[21]++;
    return _server.NextResponse.json(response);
  } catch (error) {
    /* istanbul ignore next */
    cov_2htb79oys0().s[22]++;
    console.error('Error getting suggestions:', error);
    /* istanbul ignore next */
    cov_2htb79oys0().s[23]++;
    return _server.NextResponse.json({
      error: 'Internal server error'
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMmh0Yjc5b3lzMCIsImFjdHVhbENvdmVyYWdlIiwicyIsIkdFVCIsInJlcXVlc3QiLCJmIiwidXNlciIsIl9zZXJ2ZXIxIiwidmFsaWRhdGVSZXF1ZXN0IiwiYiIsIl9zZXJ2ZXIiLCJOZXh0UmVzcG9uc2UiLCJqc29uIiwiZXJyb3IiLCJzdGF0dXMiLCJzZWFyY2hQYXJhbXMiLCJVUkwiLCJ1cmwiLCJxdWVyeSIsImdldCIsInR5cGUiLCJyZXNwb25zZSIsInN1Y2Nlc3MiLCJkYXRhIiwibWV0YWRhdGEiLCJvcGVyYXRpb24iLCJ0aW1lc3RhbXAiLCJEYXRlIiwidXNlcklkIiwiaWQiLCJzdWdnZXN0aW9ucyIsIl9wbGFudHNlYXJjaCIsInBsYW50U2VhcmNoU2VydmljZSIsImdldFNlYXJjaFN1Z2dlc3Rpb25zIiwicXVpY2tTZWxlY3QiLCJfcGxhbnR0YXhvbm9teSIsImdldFF1aWNrU2VsZWN0UGxhbnRzIiwiY29uc29sZSJdLCJzb3VyY2VzIjpbIi9Vc2Vycy9zdGVmYW5iZWtrZXIvcHJvamVjdHMvZmFuY3ktcGxhbnRpZXMvc3JjL2FwcC9hcGkvcGxhbnRzL3N1Z2dlc3Rpb25zL3JvdXRlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5leHRSZXF1ZXN0LCBOZXh0UmVzcG9uc2UgfSBmcm9tICduZXh0L3NlcnZlcic7XG5pbXBvcnQgeyB2YWxpZGF0ZVJlcXVlc3QgfSBmcm9tICdAL2xpYi9hdXRoL3NlcnZlcic7XG5pbXBvcnQgeyBnZXRRdWlja1NlbGVjdFBsYW50cyB9IGZyb20gJ0AvbGliL2RiL3F1ZXJpZXMvcGxhbnQtdGF4b25vbXknO1xuaW1wb3J0IHsgcGxhbnRTZWFyY2hTZXJ2aWNlIH0gZnJvbSAnQC9saWIvc2VydmljZXMvcGxhbnQtc2VhcmNoJztcblxuLy8gR0VUIC9hcGkvcGxhbnRzL3N1Z2dlc3Rpb25zIC0gR2V0IHNlYXJjaCBzdWdnZXN0aW9ucyBhbmQgcXVpY2sgc2VsZWN0IHBsYW50c1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIEdFVChyZXF1ZXN0OiBOZXh0UmVxdWVzdCkge1xuICB0cnkge1xuICAgIGNvbnN0IHsgdXNlciB9ID0gYXdhaXQgdmFsaWRhdGVSZXF1ZXN0KCk7XG4gICAgaWYgKCF1c2VyKSB7XG4gICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oeyBlcnJvcjogJ1VuYXV0aG9yaXplZCcgfSwgeyBzdGF0dXM6IDQwMSB9KTtcbiAgICB9XG5cbiAgICBjb25zdCB7IHNlYXJjaFBhcmFtcyB9ID0gbmV3IFVSTChyZXF1ZXN0LnVybCk7XG4gICAgY29uc3QgcXVlcnkgPSBzZWFyY2hQYXJhbXMuZ2V0KCdxJykgfHwgc2VhcmNoUGFyYW1zLmdldCgncXVlcnknKTtcbiAgICBjb25zdCB0eXBlID0gc2VhcmNoUGFyYW1zLmdldCgndHlwZScpIHx8ICdhbGwnOyAvLyAnc3VnZ2VzdGlvbnMnLCAncXVpY2snLCBvciAnYWxsJ1xuXG4gICAgY29uc3QgcmVzcG9uc2U6IHtcbiAgICAgIHN1Y2Nlc3M6IGJvb2xlYW47XG4gICAgICBkYXRhOiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPjtcbiAgICAgIG1ldGFkYXRhOiB7XG4gICAgICAgIG9wZXJhdGlvbjogc3RyaW5nO1xuICAgICAgICB0aW1lc3RhbXA6IERhdGU7XG4gICAgICAgIHVzZXJJZDogbnVtYmVyO1xuICAgICAgfTtcbiAgICB9ID0ge1xuICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgIGRhdGE6IHt9LFxuICAgICAgbWV0YWRhdGE6IHtcbiAgICAgICAgb3BlcmF0aW9uOiAnc3VnZ2VzdGlvbnMnLFxuICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCksXG4gICAgICAgIHVzZXJJZDogdXNlci5pZCxcbiAgICAgIH0sXG4gICAgfTtcblxuICAgIC8vIEdldCBzZWFyY2ggc3VnZ2VzdGlvbnMgaWYgcXVlcnkgcHJvdmlkZWRcbiAgICBpZiAocXVlcnkgJiYgKHR5cGUgPT09ICdzdWdnZXN0aW9ucycgfHwgdHlwZSA9PT0gJ2FsbCcpKSB7XG4gICAgICBjb25zdCBzdWdnZXN0aW9ucyA9IGF3YWl0IHBsYW50U2VhcmNoU2VydmljZS5nZXRTZWFyY2hTdWdnZXN0aW9ucyhxdWVyeSwgNSk7XG4gICAgICByZXNwb25zZS5kYXRhLnN1Z2dlc3Rpb25zID0gc3VnZ2VzdGlvbnM7XG4gICAgfVxuXG4gICAgLy8gR2V0IHF1aWNrIHNlbGVjdCBwbGFudHMgaWYgcmVxdWVzdGVkXG4gICAgaWYgKHR5cGUgPT09ICdxdWljaycgfHwgdHlwZSA9PT0gJ2FsbCcpIHtcbiAgICAgIGNvbnN0IHF1aWNrU2VsZWN0ID0gYXdhaXQgZ2V0UXVpY2tTZWxlY3RQbGFudHModXNlci5pZCk7XG4gICAgICByZXNwb25zZS5kYXRhLnF1aWNrU2VsZWN0ID0gcXVpY2tTZWxlY3Q7XG4gICAgfVxuXG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHJlc3BvbnNlKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBnZXR0aW5nIHN1Z2dlc3Rpb25zOicsIGVycm9yKTtcbiAgICBcbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXG4gICAgICB7IGVycm9yOiAnSW50ZXJuYWwgc2VydmVyIGVycm9yJyB9LCBcbiAgICAgIHsgc3RhdHVzOiA1MDAgfVxuICAgICk7XG4gIH1cbn0iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0lBT007SUFBQUEsY0FBQSxZQUFBQSxDQUFBO01BQUEsT0FBQUMsY0FBQTtJQUFBO0VBQUE7RUFBQSxPQUFBQSxjQUFBO0FBQUE7QUFBQUQsY0FBQTtBQUFBQSxjQUFBLEdBQUFFLENBQUE7Ozs7OzsrQkFEZ0I7Ozs7OztXQUFBQyxHQUFBOzs7OztrQ0FOb0I7OztrQ0FDVjs7O2tDQUNLOzs7a0NBQ0Y7QUFHNUIsZUFBZUEsSUFBSUMsT0FBb0I7RUFBQTtFQUFBSixjQUFBLEdBQUFLLENBQUE7RUFBQUwsY0FBQSxHQUFBRSxDQUFBO0VBQzVDLElBQUk7SUFDRixNQUFNO01BQUVJO0lBQUksQ0FBRTtJQUFBO0lBQUEsQ0FBQU4sY0FBQSxHQUFBRSxDQUFBLE9BQUcsTUFBTSxJQUFBSyxRQUFBLENBQUFDLGVBQWU7SUFBQTtJQUFBUixjQUFBLEdBQUFFLENBQUE7SUFDdEMsSUFBSSxDQUFDSSxJQUFBLEVBQU07TUFBQTtNQUFBTixjQUFBLEdBQUFTLENBQUE7TUFBQVQsY0FBQSxHQUFBRSxDQUFBO01BQ1QsT0FBT1EsT0FBQSxDQUFBQyxZQUFZLENBQUNDLElBQUksQ0FBQztRQUFFQyxLQUFBLEVBQU87TUFBZSxHQUFHO1FBQUVDLE1BQUEsRUFBUTtNQUFJO0lBQ3BFO0lBQUE7SUFBQTtNQUFBZCxjQUFBLEdBQUFTLENBQUE7SUFBQTtJQUVBLE1BQU07TUFBRU07SUFBWSxDQUFFO0lBQUE7SUFBQSxDQUFBZixjQUFBLEdBQUFFLENBQUEsUUFBRyxJQUFJYyxHQUFBLENBQUlaLE9BQUEsQ0FBUWEsR0FBRztJQUM1QyxNQUFNQyxLQUFBO0lBQUE7SUFBQSxDQUFBbEIsY0FBQSxHQUFBRSxDQUFBO0lBQVE7SUFBQSxDQUFBRixjQUFBLEdBQUFTLENBQUEsVUFBQU0sWUFBQSxDQUFhSSxHQUFHLENBQUM7SUFBQTtJQUFBLENBQUFuQixjQUFBLEdBQUFTLENBQUEsVUFBUU0sWUFBQSxDQUFhSSxHQUFHLENBQUM7SUFDeEQsTUFBTUMsSUFBQTtJQUFBO0lBQUEsQ0FBQXBCLGNBQUEsR0FBQUUsQ0FBQTtJQUFPO0lBQUEsQ0FBQUYsY0FBQSxHQUFBUyxDQUFBLFVBQUFNLFlBQUEsQ0FBYUksR0FBRyxDQUFDO0lBQUE7SUFBQSxDQUFBbkIsY0FBQSxHQUFBUyxDQUFBLFVBQVcsU0FBTztJQUVoRCxNQUFNWSxRQUFBO0lBQUE7SUFBQSxDQUFBckIsY0FBQSxHQUFBRSxDQUFBLFFBUUY7TUFDRm9CLE9BQUEsRUFBUztNQUNUQyxJQUFBLEVBQU0sQ0FBQztNQUNQQyxRQUFBLEVBQVU7UUFDUkMsU0FBQSxFQUFXO1FBQ1hDLFNBQUEsRUFBVyxJQUFJQyxJQUFBO1FBQ2ZDLE1BQUEsRUFBUXRCLElBQUEsQ0FBS3VCO01BQ2Y7SUFDRjtJQUVBO0lBQUE7SUFBQTdCLGNBQUEsR0FBQUUsQ0FBQTtJQUNBO0lBQUk7SUFBQSxDQUFBRixjQUFBLEdBQUFTLENBQUEsVUFBQVMsS0FBQTtJQUFVO0lBQUEsQ0FBQWxCLGNBQUEsR0FBQVMsQ0FBQSxVQUFBVyxJQUFBLEtBQVM7SUFBQTtJQUFBLENBQUFwQixjQUFBLEdBQUFTLENBQUEsVUFBaUJXLElBQUEsS0FBUyxLQUFJLElBQUk7TUFBQTtNQUFBcEIsY0FBQSxHQUFBUyxDQUFBO01BQ3ZELE1BQU1xQixXQUFBO01BQUE7TUFBQSxDQUFBOUIsY0FBQSxHQUFBRSxDQUFBLFFBQWMsTUFBTTZCLFlBQUEsQ0FBQUMsa0JBQWtCLENBQUNDLG9CQUFvQixDQUFDZixLQUFBLEVBQU87TUFBQTtNQUFBbEIsY0FBQSxHQUFBRSxDQUFBO01BQ3pFbUIsUUFBQSxDQUFTRSxJQUFJLENBQUNPLFdBQVcsR0FBR0EsV0FBQTtJQUM5QjtJQUFBO0lBQUE7TUFBQTlCLGNBQUEsR0FBQVMsQ0FBQTtJQUFBO0lBRUE7SUFBQVQsY0FBQSxHQUFBRSxDQUFBO0lBQ0E7SUFBSTtJQUFBLENBQUFGLGNBQUEsR0FBQVMsQ0FBQSxVQUFBVyxJQUFBLEtBQVM7SUFBQTtJQUFBLENBQUFwQixjQUFBLEdBQUFTLENBQUEsVUFBV1csSUFBQSxLQUFTLFFBQU87TUFBQTtNQUFBcEIsY0FBQSxHQUFBUyxDQUFBO01BQ3RDLE1BQU15QixXQUFBO01BQUE7TUFBQSxDQUFBbEMsY0FBQSxHQUFBRSxDQUFBLFFBQWMsTUFBTSxJQUFBaUMsY0FBQSxDQUFBQyxvQkFBb0IsRUFBQzlCLElBQUEsQ0FBS3VCLEVBQUU7TUFBQTtNQUFBN0IsY0FBQSxHQUFBRSxDQUFBO01BQ3REbUIsUUFBQSxDQUFTRSxJQUFJLENBQUNXLFdBQVcsR0FBR0EsV0FBQTtJQUM5QjtJQUFBO0lBQUE7TUFBQWxDLGNBQUEsR0FBQVMsQ0FBQTtJQUFBO0lBQUFULGNBQUEsR0FBQUUsQ0FBQTtJQUVBLE9BQU9RLE9BQUEsQ0FBQUMsWUFBWSxDQUFDQyxJQUFJLENBQUNTLFFBQUE7RUFDM0IsRUFBRSxPQUFPUixLQUFBLEVBQU87SUFBQTtJQUFBYixjQUFBLEdBQUFFLENBQUE7SUFDZG1DLE9BQUEsQ0FBUXhCLEtBQUssQ0FBQyw4QkFBOEJBLEtBQUE7SUFBQTtJQUFBYixjQUFBLEdBQUFFLENBQUE7SUFFNUMsT0FBT1EsT0FBQSxDQUFBQyxZQUFZLENBQUNDLElBQUksQ0FDdEI7TUFBRUMsS0FBQSxFQUFPO0lBQXdCLEdBQ2pDO01BQUVDLE1BQUEsRUFBUTtJQUFJO0VBRWxCO0FBQ0YiLCJpZ25vcmVMaXN0IjpbXX0=