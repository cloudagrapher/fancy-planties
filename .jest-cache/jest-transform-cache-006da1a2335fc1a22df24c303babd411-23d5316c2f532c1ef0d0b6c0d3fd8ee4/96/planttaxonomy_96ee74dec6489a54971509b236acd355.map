{"version":3,"sources":["/Users/stefanbekker/projects/fancy-planties/src/lib/db/queries/plant-taxonomy.ts"],"sourcesContent":["import { db } from '@/lib/db';\nimport { plants, users } from '@/lib/db/schema';\nimport { eq, and, or, ilike, desc, asc, sql, count } from 'drizzle-orm';\nimport type { \n  PlantSearch, \n  PlantFilter, \n  CreatePlant,\n  UpdatePlant\n} from '@/lib/validation/plant-schemas';\nimport type { \n  PlantSearchResult, \n  EnhancedPlant, \n  PlantWithStats,\n  TaxonomyValidationResult,\n  PlantLookupOptions,\n  QuickSelectPlants\n} from '@/lib/types/plant-types';\nimport { plantHelpers } from '@/lib/types/plant-types';\n\n// Helper function to build plant visibility conditions\nfunction buildPlantVisibilityFilter(currentUserId?: number) {\n  if (!currentUserId) {\n    // If no user context, only show verified plants\n    return eq(plants.isVerified, true);\n  }\n\n  // Plants are visible if:\n  // 1. They are verified (public)\n  // 2. They were created by a curator (public)\n  // 3. They were created by the current user (private)\n  return or(\n    eq(plants.isVerified, true),\n    and(\n      eq(plants.createdBy, currentUserId)\n    ),\n    // Plants created by curators are visible to all\n    sql`EXISTS (\n      SELECT 1 FROM ${users} \n      WHERE ${users.id} = ${plants.createdBy} \n      AND ${users.isCurator} = true\n    )`\n  );\n}\n\n// Create a new plant taxonomy entry\nexport async function createPlant(data: CreatePlant, userId?: number): Promise<EnhancedPlant> {\n  const plantData = {\n    ...data,\n    createdBy: userId || data.createdBy,\n  };\n\n  const [newPlant] = await db.insert(plants).values(plantData).returning();\n  return plantHelpers.enhancePlant(newPlant);\n}\n\n// Update an existing plant taxonomy entry\nexport async function updatePlant(data: UpdatePlant): Promise<EnhancedPlant | null> {\n  const { id, ...updateData } = data;\n  \n  const [updatedPlant] = await db\n    .update(plants)\n    .set({\n      ...updateData,\n      updatedAt: new Date(),\n    })\n    .where(eq(plants.id, id))\n    .returning();\n\n  return updatedPlant ? plantHelpers.enhancePlant(updatedPlant) : null;\n}\n\n// Get plant by ID\nexport async function getPlantById(id: number): Promise<EnhancedPlant | null> {\n  const plant = await db.query.plants.findFirst({\n    where: eq(plants.id, id),\n    with: {\n      createdBy: {\n        columns: {\n          id: true,\n          name: true,\n        },\n      },\n    },\n  });\n\n  return plant ? plantHelpers.enhancePlant(plant) : null;\n}\n\n// Get plants with usage statistics\nexport async function getPlantsWithStats(\n  filter: PlantFilter = { limit: 20, offset: 0 },\n  userId?: number\n): Promise<PlantWithStats[]> {\n  const conditions = [];\n  \n  // Add visibility filter based on curator/user logic\n  conditions.push(buildPlantVisibilityFilter(userId));\n  \n  if (filter.family) {\n    conditions.push(ilike(plants.family, `%${filter.family}%`));\n  }\n  if (filter.genus) {\n    conditions.push(ilike(plants.genus, `%${filter.genus}%`));\n  }\n  if (filter.isVerified !== undefined) {\n    conditions.push(eq(plants.isVerified, filter.isVerified));\n  }\n  if (filter.createdBy) {\n    conditions.push(eq(plants.createdBy, filter.createdBy));\n  }\n\n  const whereClause = and(...conditions);\n\n  // Query with subqueries for statistics\n  const plantsWithStats = await db\n    .select({\n      id: plants.id,\n      family: plants.family,\n      genus: plants.genus,\n      species: plants.species,\n      cultivar: plants.cultivar,\n      commonName: plants.commonName,\n      careInstructions: plants.careInstructions,\n      defaultImage: plants.defaultImage,\n      createdBy: plants.createdBy,\n      isVerified: plants.isVerified,\n      createdAt: plants.createdAt,\n      updatedAt: plants.updatedAt,\n      instanceCount: sql<number>`(\n        SELECT COUNT(*) FROM plant_instances \n        WHERE plant_id = ${plants.id}\n        ${userId ? sql`AND user_id = ${userId}` : sql``}\n      )`,\n      propagationCount: sql<number>`(\n        SELECT COUNT(*) FROM propagations \n        WHERE plant_id = ${plants.id}\n        ${userId ? sql`AND user_id = ${userId}` : sql``}\n      )`,\n      lastUsed: sql<Date | null>`(\n        SELECT MAX(created_at) FROM (\n          SELECT created_at FROM plant_instances WHERE plant_id = ${plants.id}\n          ${userId ? sql`AND user_id = ${userId}` : sql``}\n          UNION ALL\n          SELECT created_at FROM propagations WHERE plant_id = ${plants.id}\n          ${userId ? sql`AND user_id = ${userId}` : sql``}\n        ) AS usage_dates\n      )`,\n    })\n    .from(plants)\n    .where(whereClause)\n    .orderBy(desc(plants.updatedAt))\n    .limit(filter.limit || 20)\n    .offset(filter.offset || 0);\n\n  return plantsWithStats.map(plant => ({\n    ...plantHelpers.enhancePlant(plant),\n    instanceCount: plant.instanceCount,\n    propagationCount: plant.propagationCount,\n    popularityScore: plant.instanceCount + plant.propagationCount * 0.5,\n    lastUsed: plant.lastUsed || undefined,\n  }));\n}\n\n// Fuzzy search for plants\nexport async function searchPlants(\n  searchParams: PlantSearch,\n  options: PlantLookupOptions = {}\n): Promise<PlantSearchResult> {\n  const startTime = Date.now();\n  const { query, limit = 20, offset = 0, includeUnverified = true } = searchParams;\n  \n  // Build search conditions\n  const searchConditions = [];\n  const searchTerm = `%${query.toLowerCase()}%`;\n  \n  // Add visibility filter based on curator/user logic\n  searchConditions.push(buildPlantVisibilityFilter(options.userContext?.userId));\n  \n  searchConditions.push(\n    or(\n      ilike(plants.family, searchTerm),\n      ilike(plants.genus, searchTerm),\n      ilike(plants.species, searchTerm),\n      ilike(plants.commonName, searchTerm),\n      // Search in scientific name combination\n      sql`LOWER(CONCAT(${plants.genus}, ' ', ${plants.species})) LIKE ${searchTerm}`,\n      // Search in full taxonomy\n      sql`LOWER(CONCAT(${plants.family}, ' ', ${plants.genus}, ' ', ${plants.species})) LIKE ${searchTerm}`\n    )\n  );\n\n  if (!includeUnverified) {\n    searchConditions.push(eq(plants.isVerified, true));\n  }\n\n  if (options.filters?.family) {\n    searchConditions.push(ilike(plants.family, `%${options.filters.family}%`));\n  }\n\n  if (options.filters?.genus) {\n    searchConditions.push(ilike(plants.genus, `%${options.filters.genus}%`));\n  }\n\n  if (options.filters?.isVerified !== undefined) {\n    searchConditions.push(eq(plants.isVerified, options.filters.isVerified));\n  }\n\n  const whereClause = and(...searchConditions);\n\n  // Get total count\n  const [{ totalCount }] = await db\n    .select({ totalCount: count() })\n    .from(plants)\n    .where(whereClause);\n\n  // Get search results with relevance scoring\n  const results = await db\n    .select({\n      id: plants.id,\n      family: plants.family,\n      genus: plants.genus,\n      species: plants.species,\n      commonName: plants.commonName,\n      isVerified: plants.isVerified,\n      // Simple relevance scoring based on match position and field priority\n      score: sql<number>`\n        CASE \n          WHEN LOWER(${plants.commonName}) = LOWER(${query}) THEN 100\n          WHEN LOWER(${plants.commonName}) LIKE ${`${query.toLowerCase()}%`} THEN 90\n          WHEN LOWER(CONCAT(${plants.genus}, ' ', ${plants.species})) = LOWER(${query}) THEN 85\n          WHEN LOWER(CONCAT(${plants.genus}, ' ', ${plants.species})) LIKE ${`${query.toLowerCase()}%`} THEN 80\n          WHEN LOWER(${plants.genus}) = LOWER(${query}) THEN 75\n          WHEN LOWER(${plants.species}) = LOWER(${query}) THEN 70\n          WHEN LOWER(${plants.family}) = LOWER(${query}) THEN 65\n          WHEN LOWER(${plants.commonName}) LIKE ${searchTerm} THEN 60\n          WHEN LOWER(${plants.genus}) LIKE ${searchTerm} THEN 50\n          WHEN LOWER(${plants.species}) LIKE ${searchTerm} THEN 45\n          WHEN LOWER(${plants.family}) LIKE ${searchTerm} THEN 40\n          ELSE 30\n        END\n      `,\n    })\n    .from(plants)\n    .where(whereClause)\n    .orderBy(desc(sql<number>`\n        CASE \n          WHEN LOWER(${plants.commonName}) = LOWER(${query}) THEN 100\n          WHEN LOWER(${plants.commonName}) LIKE ${`${query.toLowerCase()}%`} THEN 90\n          WHEN LOWER(CONCAT(${plants.genus}, ' ', ${plants.species})) = LOWER(${query}) THEN 85\n          WHEN LOWER(CONCAT(${plants.genus}, ' ', ${plants.species})) LIKE ${`${query.toLowerCase()}%`} THEN 80\n          WHEN LOWER(${plants.genus}) = LOWER(${query}) THEN 75\n          WHEN LOWER(${plants.species}) = LOWER(${query}) THEN 70\n          WHEN LOWER(${plants.family}) = LOWER(${query}) THEN 65\n          WHEN LOWER(${plants.commonName}) LIKE ${searchTerm} THEN 60\n          WHEN LOWER(${plants.genus}) LIKE ${searchTerm} THEN 50\n          WHEN LOWER(${plants.species}) LIKE ${searchTerm} THEN 45\n          WHEN LOWER(${plants.family}) LIKE ${searchTerm} THEN 40\n          ELSE 30\n        END\n      `), desc(plants.isVerified), asc(plants.commonName))\n    .limit(limit)\n    .offset(offset);\n\n  const searchTime = Date.now() - startTime;\n\n  return {\n    plants: results.map(result => ({\n      ...result,\n      score: result.score,\n    })),\n    totalCount,\n    hasMore: offset + limit < totalCount,\n    searchTime,\n  };\n}\n\n// Get quick select plants (recent, popular, verified)\nexport async function getQuickSelectPlants(userId?: number): Promise<QuickSelectPlants> {\n  // Get recent plants (based on user's recent plant instances/propagations)\n  const recentQuery = userId ? db\n    .select({\n      id: plants.id,\n      family: plants.family,\n      genus: plants.genus,\n      species: plants.species,\n      commonName: plants.commonName,\n      isVerified: plants.isVerified,\n    })\n    .from(plants)\n    .innerJoin(\n      sql`(\n        SELECT plant_id, MAX(created_at) as last_used\n        FROM (\n          SELECT plant_id, created_at FROM plant_instances WHERE user_id = ${userId}\n          UNION ALL\n          SELECT plant_id, created_at FROM propagations WHERE user_id = ${userId}\n        ) recent_usage\n        GROUP BY plant_id\n        ORDER BY last_used DESC\n        LIMIT 10\n      ) recent_plants`,\n      sql`recent_plants.plant_id = ${plants.id}`\n    ) : Promise.resolve([]);\n\n  // Get popular plants (most instances across all users)\n  const popularQuery = db\n    .select({\n      id: plants.id,\n      family: plants.family,\n      genus: plants.genus,\n      species: plants.species,\n      commonName: plants.commonName,\n      isVerified: plants.isVerified,\n      instanceCount: sql<number>`COUNT(plant_instances.id)`,\n    })\n    .from(plants)\n    .leftJoin(sql`plant_instances`, sql`plant_instances.plant_id = ${plants.id}`)\n    .groupBy(plants.id)\n    .orderBy(sql`COUNT(plant_instances.id) DESC`)\n    .limit(10);\n\n  // Get verified plants (admin-verified taxonomy)\n  const verifiedQuery = db\n    .select({\n      id: plants.id,\n      family: plants.family,\n      genus: plants.genus,\n      species: plants.species,\n      commonName: plants.commonName,\n      isVerified: plants.isVerified,\n    })\n    .from(plants)\n    .where(eq(plants.isVerified, true))\n    .orderBy(asc(plants.commonName))\n    .limit(10);\n\n  const [recent, popular, verified] = await Promise.all([\n    recentQuery,\n    popularQuery,\n    verifiedQuery,\n  ]);\n\n  return {\n    recent: Array.isArray(recent) ? recent : [],\n    popular: popular.map(({ instanceCount: _instanceCount, ...plant }) => plant),\n    verified,\n  };\n}\n\n// Validate plant taxonomy for duplicates and conflicts\nexport async function validatePlantTaxonomy(\n  taxonomy: Pick<CreatePlant, 'family' | 'genus' | 'species' | 'commonName'>\n): Promise<TaxonomyValidationResult> {\n  const errors: string[] = [];\n  const warnings: string[] = [];\n  const suggestions = {\n    family: [] as string[],\n    genus: [] as string[],\n    species: [] as string[],\n    commonName: [] as string[],\n  };\n\n  // Check for exact taxonomic duplicates\n  const exactDuplicates = await db\n    .select()\n    .from(plants)\n    .where(\n      and(\n        eq(sql`LOWER(${plants.family})`, taxonomy.family.toLowerCase()),\n        eq(sql`LOWER(${plants.genus})`, taxonomy.genus.toLowerCase()),\n        eq(sql`LOWER(${plants.species})`, taxonomy.species.toLowerCase())\n      )\n    );\n\n  // Check for common name conflicts\n  const commonNameConflicts = await db\n    .select()\n    .from(plants)\n    .where(eq(sql`LOWER(${plants.commonName})`, taxonomy.commonName.toLowerCase()));\n\n  // Get similar families for suggestions\n  const similarFamilies = await db\n    .select({ family: plants.family })\n    .from(plants)\n    .where(ilike(plants.family, `%${taxonomy.family.substring(0, 3)}%`))\n    .groupBy(plants.family)\n    .limit(5);\n\n  // Get similar genera for suggestions\n  const similarGenera = await db\n    .select({ genus: plants.genus })\n    .from(plants)\n    .where(ilike(plants.genus, `%${taxonomy.genus.substring(0, 3)}%`))\n    .groupBy(plants.genus)\n    .limit(5);\n\n  if (exactDuplicates.length > 0) {\n    errors.push('A plant with this exact taxonomy already exists');\n  }\n\n  if (commonNameConflicts.length > 0 && \n      !exactDuplicates.some(dup => dup.commonName.toLowerCase() === taxonomy.commonName.toLowerCase())) {\n    warnings.push('Another plant already uses this common name');\n  }\n\n  suggestions.family = similarFamilies.map(f => f.family);\n  suggestions.genus = similarGenera.map(g => g.genus);\n\n  return {\n    isValid: errors.length === 0,\n    errors,\n    warnings,\n    suggestions,\n    duplicates: exactDuplicates.map(plant => ({\n      id: plant.id,\n      family: plant.family,\n      genus: plant.genus,\n      species: plant.species,\n      commonName: plant.commonName,\n      isVerified: plant.isVerified,\n    })),\n  };\n}\n\n// Get taxonomy hierarchy for browsing\nexport async function getTaxonomyHierarchy() {\n  const hierarchy = await db\n    .select({\n      family: plants.family,\n      genus: plants.genus,\n      species: plants.species,\n      plantCount: count(),\n    })\n    .from(plants)\n    .groupBy(plants.family, plants.genus, plants.species)\n    .orderBy(asc(plants.family), asc(plants.genus), asc(plants.species));\n\n  // Group by family and genus\n  const familyMap = new Map();\n  \n  hierarchy.forEach(item => {\n    if (!familyMap.has(item.family)) {\n      familyMap.set(item.family, {\n        name: item.family,\n        count: 0,\n        genera: new Map(),\n      });\n    }\n    \n    const family = familyMap.get(item.family);\n    family.count += item.plantCount;\n    \n    if (!family.genera.has(item.genus)) {\n      family.genera.set(item.genus, {\n        name: item.genus,\n        count: 0,\n        species: [],\n      });\n    }\n    \n    const genus = family.genera.get(item.genus);\n    genus.count += item.plantCount;\n    genus.species.push({\n      name: item.species,\n      count: item.plantCount,\n      plants: [], // Would need additional query to populate\n    });\n  });\n\n  return {\n    families: Array.from(familyMap.values()).map(family => ({\n      ...family,\n      genera: Array.from(family.genera.values()),\n    })),\n  };\n}\n\n// Delete a plant (only if no instances exist)\nexport async function deletePlant(id: number, userId?: number): Promise<boolean> {\n  // Check if plant has any instances\n  const [instanceCount] = await db\n    .select({ count: count() })\n    .from(sql`plant_instances`)\n    .where(sql`plant_id = ${id}`);\n\n  if (instanceCount.count > 0) {\n    throw new Error('Cannot delete plant with existing instances');\n  }\n\n  // Check if plant has any propagations\n  const [propagationCount] = await db\n    .select({ count: count() })\n    .from(sql`propagations`)\n    .where(sql`plant_id = ${id}`);\n\n  if (propagationCount.count > 0) {\n    throw new Error('Cannot delete plant with existing propagations');\n  }\n\n  // If userId provided, only allow deletion of plants created by that user (unless admin)\n  const whereConditions = [eq(plants.id, id)];\n  if (userId) {\n    whereConditions.push(eq(plants.createdBy, userId));\n  }\n\n  const result = await db\n    .delete(plants)\n    .where(and(...whereConditions))\n    .returning({ id: plants.id });\n\n  return result.length > 0;\n}"],"names":["createPlant","deletePlant","getPlantById","getPlantsWithStats","getQuickSelectPlants","getTaxonomyHierarchy","searchPlants","updatePlant","validatePlantTaxonomy","buildPlantVisibilityFilter","currentUserId","eq","plants","isVerified","or","and","createdBy","sql","users","id","isCurator","data","userId","plantData","newPlant","db","insert","values","returning","plantHelpers","enhancePlant","updateData","updatedPlant","update","set","updatedAt","Date","where","plant","query","findFirst","with","columns","name","filter","limit","offset","conditions","push","family","ilike","genus","undefined","whereClause","plantsWithStats","select","species","cultivar","commonName","careInstructions","defaultImage","createdAt","instanceCount","propagationCount","lastUsed","from","orderBy","desc","map","popularityScore","searchParams","options","startTime","now","includeUnverified","searchConditions","searchTerm","toLowerCase","userContext","filters","totalCount","count","results","score","asc","searchTime","result","hasMore","recentQuery","innerJoin","Promise","resolve","popularQuery","leftJoin","groupBy","verifiedQuery","recent","popular","verified","all","Array","isArray","_instanceCount","taxonomy","errors","warnings","suggestions","exactDuplicates","commonNameConflicts","similarFamilies","substring","similarGenera","length","some","dup","f","g","isValid","duplicates","hierarchy","plantCount","familyMap","Map","forEach","item","has","genera","get","families","Error","whereConditions","delete"],"mappings":"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"}