{"version":3,"names":["EmailVerificationCleanupService","cov_10pqw1wgj8","f","s","emailVerificationCleanupService","runCleanup","isRunning","b","Error","startTime","Date","now","console","log","expiredCodes","_emailverificationcodeservice","emailVerificationCodeService","cleanupExpiredCodes","rateLimitStatsBefore","_emailverificationratelimiter","emailVerificationRateLimiter","getStats","cleanup","rateLimitStatsAfter","rateLimitDataCleaned","verificationAttempts","resendRequests","emailVerificationActivity","resendCooldowns","emailHealth","_emailservicemonitor","emailServiceMonitor","getHealthStatus","emailStats","status","warn","issues","recommendations","stats","rateLimitData","timestamp","emailServiceHealth","quotaUsage","getQuotaUsagePercentage","successRate","cleanupStats","push","length","shift","lastCleanup","duration","error","scheduleCleanup","intervalMs","runScheduledCleanup","setTimeout","setInterval","runStartupCleanup","getCleanupStats","totalExpiredCodes","reduce","sum","stat","totalRateLimitData","recentStats","getSystemStatus","codeStats","getCodeStats","rateLimitStats","nextCleanupDue","verificationCodes","rateLimits","emailService","health","totalSent","totalFailed","averageResponseTime","forceCleanup","process","env","NODE_ENV"],"sources":["/Users/stefanbekker/projects/fancy-planties/src/lib/services/email-verification-cleanup.ts"],"sourcesContent":["import 'server-only';\nimport { emailVerificationCodeService } from './email-verification-code-service';\nimport { emailVerificationRateLimiter } from './email-verification-rate-limiter';\nimport { emailServiceMonitor } from './email-service-monitor';\n\nexport interface CleanupStats {\n  expiredCodes: number;\n  rateLimitData: number;\n  timestamp: number;\n  emailServiceHealth?: {\n    status: 'healthy' | 'warning' | 'critical';\n    quotaUsage: number;\n    successRate: number;\n    issues: string[];\n  };\n}\n\nexport class EmailVerificationCleanupService {\n  private isRunning = false;\n  private lastCleanup = 0;\n  private cleanupStats: CleanupStats[] = [];\n  \n  /**\n   * Run cleanup of expired verification codes and rate limit data\n   */\n  async runCleanup(): Promise<CleanupStats> {\n    if (this.isRunning) {\n      throw new Error('Cleanup is already running');\n    }\n    \n    this.isRunning = true;\n    const startTime = Date.now();\n    \n    try {\n      console.log('[CLEANUP] Starting email verification cleanup...');\n      \n      // Clean up expired verification codes\n      const expiredCodes = await emailVerificationCodeService.cleanupExpiredCodes();\n      console.log(`[CLEANUP] Removed ${expiredCodes} expired verification codes`);\n      \n      // Clean up rate limit data\n      const rateLimitStatsBefore = emailVerificationRateLimiter.getStats();\n      emailVerificationRateLimiter.cleanup();\n      const rateLimitStatsAfter = emailVerificationRateLimiter.getStats();\n      \n      const rateLimitDataCleaned = \n        (rateLimitStatsBefore.verificationAttempts - rateLimitStatsAfter.verificationAttempts) +\n        (rateLimitStatsBefore.resendRequests - rateLimitStatsAfter.resendRequests) +\n        (rateLimitStatsBefore.emailVerificationActivity - rateLimitStatsAfter.emailVerificationActivity) +\n        (rateLimitStatsBefore.resendCooldowns - rateLimitStatsAfter.resendCooldowns);\n      \n      console.log(`[CLEANUP] Cleaned up ${rateLimitDataCleaned} rate limit entries`);\n      \n      // Check email service health\n      const emailHealth = emailServiceMonitor.getHealthStatus();\n      const emailStats = emailServiceMonitor.getStats();\n      \n      if (emailHealth.status !== 'healthy') {\n        console.warn(`[CLEANUP] Email service health: ${emailHealth.status}`, {\n          issues: emailHealth.issues,\n          recommendations: emailHealth.recommendations,\n        });\n      }\n      \n      const stats: CleanupStats = {\n        expiredCodes,\n        rateLimitData: rateLimitDataCleaned,\n        timestamp: startTime,\n        emailServiceHealth: {\n          status: emailHealth.status,\n          quotaUsage: emailServiceMonitor.getQuotaUsagePercentage(),\n          successRate: emailStats.successRate,\n          issues: emailHealth.issues,\n        },\n      };\n      \n      // Store cleanup stats (keep last 24 entries)\n      this.cleanupStats.push(stats);\n      if (this.cleanupStats.length > 24) {\n        this.cleanupStats.shift();\n      }\n      \n      this.lastCleanup = startTime;\n      \n      const duration = Date.now() - startTime;\n      console.log(`[CLEANUP] Email verification cleanup completed in ${duration}ms`);\n      \n      return stats;\n      \n    } catch (error) {\n      console.error('[CLEANUP] Email verification cleanup failed:', error);\n      throw error;\n    } finally {\n      this.isRunning = false;\n    }\n  }\n  \n  /**\n   * Schedule automatic cleanup to run periodically\n   */\n  scheduleCleanup(intervalMs: number = 60 * 60 * 1000): void { // Default: 1 hour\n    console.log(`[CLEANUP] Scheduling email verification cleanup every ${intervalMs / 1000} seconds`);\n    \n    const runScheduledCleanup = async () => {\n      try {\n        await this.runCleanup();\n      } catch (error) {\n        console.error('[CLEANUP] Scheduled cleanup failed:', error);\n      }\n    };\n    \n    // Run initial cleanup after a short delay\n    setTimeout(runScheduledCleanup, 5000); // 5 seconds\n    \n    // Then run periodically\n    setInterval(runScheduledCleanup, intervalMs);\n  }\n  \n  /**\n   * Run startup cleanup to clean any leftover data\n   */\n  async runStartupCleanup(): Promise<CleanupStats> {\n    console.log('[CLEANUP] Running startup cleanup...');\n    \n    try {\n      const stats = await this.runCleanup();\n      console.log('[CLEANUP] Startup cleanup completed successfully');\n      return stats;\n    } catch (error) {\n      console.error('[CLEANUP] Startup cleanup failed:', error);\n      throw error;\n    }\n  }\n  \n  /**\n   * Get cleanup statistics\n   */\n  getCleanupStats(): {\n    lastCleanup: number;\n    isRunning: boolean;\n    recentStats: CleanupStats[];\n    totalExpiredCodes: number;\n    totalRateLimitData: number;\n  } {\n    const totalExpiredCodes = this.cleanupStats.reduce((sum, stat) => sum + stat.expiredCodes, 0);\n    const totalRateLimitData = this.cleanupStats.reduce((sum, stat) => sum + stat.rateLimitData, 0);\n    \n    return {\n      lastCleanup: this.lastCleanup,\n      isRunning: this.isRunning,\n      recentStats: [...this.cleanupStats],\n      totalExpiredCodes,\n      totalRateLimitData,\n    };\n  }\n  \n  /**\n   * Get current system status\n   */\n  async getSystemStatus(): Promise<{\n    verificationCodes: {\n      totalActive: number;\n      expiredCount: number;\n      highAttemptCount: number;\n    };\n    rateLimits: {\n      verificationAttempts: number;\n      resendRequests: number;\n      emailVerificationActivity: number;\n      resendCooldowns: number;\n      securityEvents: number;\n    };\n    emailService: {\n      health: 'healthy' | 'warning' | 'critical';\n      quotaUsage: number;\n      successRate: number;\n      totalSent: number;\n      totalFailed: number;\n      averageResponseTime: number;\n      issues: string[];\n      recommendations: string[];\n    };\n    cleanup: {\n      lastCleanup: number;\n      isRunning: boolean;\n      nextCleanupDue: number;\n    };\n  }> {\n    const codeStats = await emailVerificationCodeService.getCodeStats();\n    const rateLimitStats = emailVerificationRateLimiter.getStats();\n    const cleanupStats = this.getCleanupStats();\n    const emailHealth = emailServiceMonitor.getHealthStatus();\n    const emailStats = emailServiceMonitor.getStats();\n    \n    // Estimate next cleanup time (assuming hourly cleanup)\n    const nextCleanupDue = cleanupStats.lastCleanup + (60 * 60 * 1000);\n    \n    return {\n      verificationCodes: codeStats,\n      rateLimits: rateLimitStats,\n      emailService: {\n        health: emailHealth.status,\n        quotaUsage: emailServiceMonitor.getQuotaUsagePercentage(),\n        successRate: emailStats.successRate,\n        totalSent: emailStats.totalSent,\n        totalFailed: emailStats.totalFailed,\n        averageResponseTime: emailStats.averageResponseTime,\n        issues: emailHealth.issues,\n        recommendations: emailHealth.recommendations,\n      },\n      cleanup: {\n        lastCleanup: cleanupStats.lastCleanup,\n        isRunning: cleanupStats.isRunning,\n        nextCleanupDue,\n      },\n    };\n  }\n  \n  /**\n   * Force cleanup if needed (for manual triggers)\n   */\n  async forceCleanup(): Promise<CleanupStats> {\n    if (this.isRunning) {\n      throw new Error('Cleanup is already running. Please wait for it to complete.');\n    }\n    \n    console.log('[CLEANUP] Force cleanup requested');\n    return await this.runCleanup();\n  }\n}\n\n// Export singleton instance\nexport const emailVerificationCleanupService = new EmailVerificationCleanupService();\n\n// Auto-schedule cleanup when this module is imported (but not during tests)\nif (process.env.NODE_ENV !== 'test') {\n  if (process.env.NODE_ENV === 'production') {\n    // In production, start cleanup automatically\n    emailVerificationCleanupService.scheduleCleanup();\n  } else {\n    // In development, run less frequently to avoid noise\n    emailVerificationCleanupService.scheduleCleanup(2 * 60 * 60 * 1000); // 2 hours\n  }\n}"],"mappingsiBaA,gCAAA;IAAA;IAAAC,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;WAAAH,+BAAA;;MAuNAI,gCAAA;IAAA;IAAAH,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;WAAAC,+BAAA;;;;;QAxON;;;kCACsC;;;kCACA;;;kCACT;AAc7B,MAAMJ,+BAAA;EAKX;;;EAGA,MAAMK,WAAA,EAAoC;IAAA;IAAAJ,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IACxC,IAAI,IAAI,CAACG,SAAS,EAAE;MAAA;MAAAL,cAAA,GAAAM,CAAA;MAAAN,cAAA,GAAAE,CAAA;MAClB,MAAM,IAAIK,KAAA,CAAM;IAClB;IAAA;IAAA;MAAAP,cAAA,GAAAM,CAAA;IAAA;IAAAN,cAAA,GAAAE,CAAA;IAEA,IAAI,CAACG,SAAS,GAAG;IACjB,MAAMG,SAAA;IAAA;IAAA,CAAAR,cAAA,GAAAE,CAAA,QAAYO,IAAA,CAAKC,GAAG;IAAA;IAAAV,cAAA,GAAAE,CAAA;IAE1B,IAAI;MAAA;MAAAF,cAAA,GAAAE,CAAA;MACFS,OAAA,CAAQC,GAAG,CAAC;MAEZ;MACA,MAAMC,YAAA;MAAA;MAAA,CAAAb,cAAA,GAAAE,CAAA,QAAe,MAAMY,6BAAA,CAAAC,4BAA4B,CAACC,mBAAmB;MAAA;MAAAhB,cAAA,GAAAE,CAAA;MAC3ES,OAAA,CAAQC,GAAG,CAAC,qBAAqBC,YAAA,6BAAyC;MAE1E;MACA,MAAMI,oBAAA;MAAA;MAAA,CAAAjB,cAAA,GAAAE,CAAA,QAAuBgB,6BAAA,CAAAC,4BAA4B,CAACC,QAAQ;MAAA;MAAApB,cAAA,GAAAE,CAAA;MAClEgB,6BAAA,CAAAC,4BAA4B,CAACE,OAAO;MACpC,MAAMC,mBAAA;MAAA;MAAA,CAAAtB,cAAA,GAAAE,CAAA,QAAsBgB,6BAAA,CAAAC,4BAA4B,CAACC,QAAQ;MAEjE,MAAMG,oBAAA;MAAA;MAAA,CAAAvB,cAAA,GAAAE,CAAA,QACJe,oBAAC,CAAqBO,oBAAoB,GAAGF,mBAAA,CAAoBE,oBAAoB,IACpFP,oBAAA,CAAqBQ,cAAc,GAAGH,mBAAA,CAAoBG,cAAc,CAAD,IACvER,oBAAA,CAAqBS,yBAAyB,GAAGJ,mBAAA,CAAoBI,yBAAyB,CAAD,IAC7FT,oBAAA,CAAqBU,eAAe,GAAGL,mBAAA,CAAoBK,eAAe,CAAD;MAAA;MAAA3B,cAAA,GAAAE,CAAA;MAE5ES,OAAA,CAAQC,GAAG,CAAC,wBAAwBW,oBAAA,qBAAyC;MAE7E;MACA,MAAMK,WAAA;MAAA;MAAA,CAAA5B,cAAA,GAAAE,CAAA,QAAc2B,oBAAA,CAAAC,mBAAmB,CAACC,eAAe;MACvD,MAAMC,UAAA;MAAA;MAAA,CAAAhC,cAAA,GAAAE,CAAA,QAAa2B,oBAAA,CAAAC,mBAAmB,CAACV,QAAQ;MAAA;MAAApB,cAAA,GAAAE,CAAA;MAE/C,IAAI0B,WAAA,CAAYK,MAAM,KAAK,WAAW;QAAA;QAAAjC,cAAA,GAAAM,CAAA;QAAAN,cAAA,GAAAE,CAAA;QACpCS,OAAA,CAAQuB,IAAI,CAAC,mCAAmCN,WAAA,CAAYK,MAAM,EAAE,EAAE;UACpEE,MAAA,EAAQP,WAAA,CAAYO,MAAM;UAC1BC,eAAA,EAAiBR,WAAA,CAAYQ;QAC/B;MACF;MAAA;MAAA;QAAApC,cAAA,GAAAM,CAAA;MAAA;MAEA,MAAM+B,KAAA;MAAA;MAAA,CAAArC,cAAA,GAAAE,CAAA,QAAsB;QAC1BW,YAAA;QACAyB,aAAA,EAAef,oBAAA;QACfgB,SAAA,EAAW/B,SAAA;QACXgC,kBAAA,EAAoB;UAClBP,MAAA,EAAQL,WAAA,CAAYK,MAAM;UAC1BQ,UAAA,EAAYZ,oBAAA,CAAAC,mBAAmB,CAACY,uBAAuB;UACvDC,WAAA,EAAaX,UAAA,CAAWW,WAAW;UACnCR,MAAA,EAAQP,WAAA,CAAYO;QACtB;MACF;MAEA;MAAA;MAAAnC,cAAA,GAAAE,CAAA;MACA,IAAI,CAAC0C,YAAY,CAACC,IAAI,CAACR,KAAA;MAAA;MAAArC,cAAA,GAAAE,CAAA;MACvB,IAAI,IAAI,CAAC0C,YAAY,CAACE,MAAM,GAAG,IAAI;QAAA;QAAA9C,cAAA,GAAAM,CAAA;QAAAN,cAAA,GAAAE,CAAA;QACjC,IAAI,CAAC0C,YAAY,CAACG,KAAK;MACzB;MAAA;MAAA;QAAA/C,cAAA,GAAAM,CAAA;MAAA;MAAAN,cAAA,GAAAE,CAAA;MAEA,IAAI,CAAC8C,WAAW,GAAGxC,SAAA;MAEnB,MAAMyC,QAAA;MAAA;MAAA,CAAAjD,cAAA,GAAAE,CAAA,QAAWO,IAAA,CAAKC,GAAG,KAAKF,SAAA;MAAA;MAAAR,cAAA,GAAAE,CAAA;MAC9BS,OAAA,CAAQC,GAAG,CAAC,qDAAqDqC,QAAA,IAAY;MAAA;MAAAjD,cAAA,GAAAE,CAAA;MAE7E,OAAOmC,KAAA;IAET,EAAE,OAAOa,KAAA,EAAO;MAAA;MAAAlD,cAAA,GAAAE,CAAA;MACdS,OAAA,CAAQuC,KAAK,CAAC,gDAAgDA,KAAA;MAAA;MAAAlD,cAAA,GAAAE,CAAA;MAC9D,MAAMgD,KAAA;IACR,UAAU;MAAA;MAAAlD,cAAA,GAAAE,CAAA;MACR,IAAI,CAACG,SAAS,GAAG;IACnB;EACF;EAEA;;;EAGA8C,gBAAgBC,UAAA;EAAA;EAAA,CAAApD,cAAA,GAAAM,CAAA,UAAqB,KAAK,KAAK,IAAI,GAAQ;IAAA;IAAAN,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IACzDS,OAAA,CAAQC,GAAG,CAAC,yDAAyDwC,UAAA,GAAa,cAAc;IAAA;IAAApD,cAAA,GAAAE,CAAA;IAEhG,MAAMmD,mBAAA,GAAsB,MAAAA,CAAA;MAAA;MAAArD,cAAA,GAAAC,CAAA;MAAAD,cAAA,GAAAE,CAAA;MAC1B,IAAI;QAAA;QAAAF,cAAA,GAAAE,CAAA;QACF,MAAM,IAAI,CAACE,UAAU;MACvB,EAAE,OAAO8C,KAAA,EAAO;QAAA;QAAAlD,cAAA,GAAAE,CAAA;QACdS,OAAA,CAAQuC,KAAK,CAAC,uCAAuCA,KAAA;MACvD;IACF;IAEA;IAAA;IAAAlD,cAAA,GAAAE,CAAA;IACAoD,UAAA,CAAWD,mBAAA,EAAqB,OAAO;IAEvC;IAAA;IAAArD,cAAA,GAAAE,CAAA;IACAqD,WAAA,CAAYF,mBAAA,EAAqBD,UAAA;EACnC;EAEA;;;EAGA,MAAMI,kBAAA,EAA2C;IAAA;IAAAxD,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IAC/CS,OAAA,CAAQC,GAAG,CAAC;IAAA;IAAAZ,cAAA,GAAAE,CAAA;IAEZ,IAAI;MACF,MAAMmC,KAAA;MAAA;MAAA,CAAArC,cAAA,GAAAE,CAAA,QAAQ,MAAM,IAAI,CAACE,UAAU;MAAA;MAAAJ,cAAA,GAAAE,CAAA;MACnCS,OAAA,CAAQC,GAAG,CAAC;MAAA;MAAAZ,cAAA,GAAAE,CAAA;MACZ,OAAOmC,KAAA;IACT,EAAE,OAAOa,KAAA,EAAO;MAAA;MAAAlD,cAAA,GAAAE,CAAA;MACdS,OAAA,CAAQuC,KAAK,CAAC,qCAAqCA,KAAA;MAAA;MAAAlD,cAAA,GAAAE,CAAA;MACnD,MAAMgD,KAAA;IACR;EACF;EAEA;;;EAGAO,gBAAA,EAME;IAAA;IAAAzD,cAAA,GAAAC,CAAA;IACA,MAAMyD,iBAAA;IAAA;IAAA,CAAA1D,cAAA,GAAAE,CAAA,QAAoB,IAAI,CAAC0C,YAAY,CAACe,MAAM,CAAC,CAACC,GAAA,EAAKC,IAAA,KAAS;MAAA;MAAA7D,cAAA,GAAAC,CAAA;MAAAD,cAAA,GAAAE,CAAA;MAAA,OAAA0D,GAAA,GAAMC,IAAA,CAAKhD,YAAY;IAAZ,CAAY,EAAE;IAC3F,MAAMiD,kBAAA;IAAA;IAAA,CAAA9D,cAAA,GAAAE,CAAA,QAAqB,IAAI,CAAC0C,YAAY,CAACe,MAAM,CAAC,CAACC,GAAA,EAAKC,IAAA,KAAS;MAAA;MAAA7D,cAAA,GAAAC,CAAA;MAAAD,cAAA,GAAAE,CAAA;MAAA,OAAA0D,GAAA,GAAMC,IAAA,CAAKvB,aAAa;IAAb,CAAa,EAAE;IAAA;IAAAtC,cAAA,GAAAE,CAAA;IAE7F,OAAO;MACL8C,WAAA,EAAa,IAAI,CAACA,WAAW;MAC7B3C,SAAA,EAAW,IAAI,CAACA,SAAS;MACzB0D,WAAA,EAAa,C,GAAI,IAAI,CAACnB,YAAY,CAAC;MACnCc,iBAAA;MACAI;IACF;EACF;EAEA;;;EAGA,MAAME,gBAAA,EA4BH;IAAA;IAAAhE,cAAA,GAAAC,CAAA;IACD,MAAMgE,SAAA;IAAA;IAAA,CAAAjE,cAAA,GAAAE,CAAA,QAAY,MAAMY,6BAAA,CAAAC,4BAA4B,CAACmD,YAAY;IACjE,MAAMC,cAAA;IAAA;IAAA,CAAAnE,cAAA,GAAAE,CAAA,QAAiBgB,6BAAA,CAAAC,4BAA4B,CAACC,QAAQ;IAC5D,MAAMwB,YAAA;IAAA;IAAA,CAAA5C,cAAA,GAAAE,CAAA,QAAe,IAAI,CAACuD,eAAe;IACzC,MAAM7B,WAAA;IAAA;IAAA,CAAA5B,cAAA,GAAAE,CAAA,QAAc2B,oBAAA,CAAAC,mBAAmB,CAACC,eAAe;IACvD,MAAMC,UAAA;IAAA;IAAA,CAAAhC,cAAA,GAAAE,CAAA,QAAa2B,oBAAA,CAAAC,mBAAmB,CAACV,QAAQ;IAE/C;IACA,MAAMgD,cAAA;IAAA;IAAA,CAAApE,cAAA,GAAAE,CAAA,QAAiB0C,YAAA,CAAaI,WAAW,GAAI,KAAK,KAAK;IAAA;IAAAhD,cAAA,GAAAE,CAAA;IAE7D,OAAO;MACLmE,iBAAA,EAAmBJ,SAAA;MACnBK,UAAA,EAAYH,cAAA;MACZI,YAAA,EAAc;QACZC,MAAA,EAAQ5C,WAAA,CAAYK,MAAM;QAC1BQ,UAAA,EAAYZ,oBAAA,CAAAC,mBAAmB,CAACY,uBAAuB;QACvDC,WAAA,EAAaX,UAAA,CAAWW,WAAW;QACnC8B,SAAA,EAAWzC,UAAA,CAAWyC,SAAS;QAC/BC,WAAA,EAAa1C,UAAA,CAAW0C,WAAW;QACnCC,mBAAA,EAAqB3C,UAAA,CAAW2C,mBAAmB;QACnDxC,MAAA,EAAQP,WAAA,CAAYO,MAAM;QAC1BC,eAAA,EAAiBR,WAAA,CAAYQ;MAC/B;MACAf,OAAA,EAAS;QACP2B,WAAA,EAAaJ,YAAA,CAAaI,WAAW;QACrC3C,SAAA,EAAWuC,YAAA,CAAavC,SAAS;QACjC+D;MACF;IACF;EACF;EAEA;;;EAGA,MAAMQ,aAAA,EAAsC;IAAA;IAAA5E,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IAC1C,IAAI,IAAI,CAACG,SAAS,EAAE;MAAA;MAAAL,cAAA,GAAAM,CAAA;MAAAN,cAAA,GAAAE,CAAA;MAClB,MAAM,IAAIK,KAAA,CAAM;IAClB;IAAA;IAAA;MAAAP,cAAA,GAAAM,CAAA;IAAA;IAAAN,cAAA,GAAAE,CAAA;IAEAS,OAAA,CAAQC,GAAG,CAAC;IAAA;IAAAZ,cAAA,GAAAE,CAAA;IACZ,OAAO,MAAM,IAAI,CAACE,UAAU;EAC9B;;;;;SAlNQC,SAAA,GAAY;IAAA;IAAAL,cAAA,GAAAE,CAAA;SACZ8C,WAAA,GAAc;IAAA;IAAAhD,cAAA,GAAAE,CAAA;SACd0C,YAAA,GAA+B,EAAE;;AAiN3C;AAGO,MAAMzC,+BAAA;AAAA;AAAA,CAAAH,cAAA,GAAAE,CAAA,QAAkC,IAAIH,+BAAA;AAEnD;AAAA;AAAAC,cAAA,GAAAE,CAAA;AACA,IAAI2E,OAAA,CAAQC,GAAG,CAACC,QAAQ,KAAK,QAAQ;EAAA;EAAA/E,cAAA,GAAAM,CAAA;EAAAN,cAAA,GAAAE,CAAA;EACnC,IAAI2E,OAAA,CAAQC,GAAG,CAACC,QAAQ,KAAK,cAAc;IAAA;IAAA/E,cAAA,GAAAM,CAAA;IAAAN,cAAA,GAAAE,CAAA;IACzC;IACAC,+BAAA,CAAgCgD,eAAe;EACjD,OAAO;IAAA;IAAAnD,cAAA,GAAAM,CAAA;IAAAN,cAAA,GAAAE,CAAA;IACL;IACAC,+BAAA,CAAgCgD,eAAe,CAAC,IAAI,KAAK,KAAK,OAAO;EACvE;AACF;AAAA;AAAA;EAAAnD,cAAA,GAAAM,CAAA;AAAA","ignoreList":[]}