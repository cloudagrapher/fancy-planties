{"version":3,"names":["cov_1magveakh7","actualCoverage","s","PATCH","updateStatusSchema","_zod","z","object","status","enum","notes","string","max","optional","request","params","f","user","_server1","validateRequest","b","_server","NextResponse","json","error","id","propagationId","parseInt","isNaN","existingPropagation","_propagations","PropagationQueries","getById","userId","body","parse","updatedPropagation","updateStatus","console","ZodError","details","issues"],"sources":["/Users/stefanbekker/projects/fancy-planties/src/app/api/propagations/[id]/status/route.ts"],"sourcesContent":["import 'server-only';\n\nimport { NextRequest, NextResponse } from 'next/server';\nimport { validateRequest } from '@/lib/auth/server';\nimport { PropagationQueries } from '@/lib/db/queries/propagations';\nimport { z } from 'zod';\n\n// Validation schema for status updates\nconst updateStatusSchema = z.object({\n  status: z.enum(['started', 'rooting', 'planted', 'established']),\n  notes: z.string().max(500).optional(),\n});\n\n// PATCH /api/propagations/[id]/status - Update propagation status\nexport async function PATCH(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { user } = await validateRequest();\n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const { id } = await params;\n    const propagationId = parseInt(id, 10);\n    if (isNaN(propagationId)) {\n      return NextResponse.json({ error: 'Invalid propagation ID' }, { status: 400 });\n    }\n\n    // Check if propagation exists and belongs to user\n    const existingPropagation = await PropagationQueries.getById(propagationId);\n    if (!existingPropagation) {\n      return NextResponse.json({ error: 'Propagation not found' }, { status: 404 });\n    }\n\n    if (existingPropagation.userId !== user.id) {\n      return NextResponse.json({ error: 'Forbidden' }, { status: 403 });\n    }\n\n    const body = await request.json();\n    const { status, notes } = updateStatusSchema.parse(body);\n\n    const updatedPropagation = await PropagationQueries.updateStatus(\n      propagationId,\n      status,\n      notes\n    );\n\n    return NextResponse.json(updatedPropagation);\n  } catch (error) {\n    console.error('Error updating propagation status:', error);\n    \n    if (error instanceof z.ZodError) {\n      return NextResponse.json(\n        { error: 'Invalid data', details: error.issues },\n        { status: 400 }\n      );\n    }\n\n    return NextResponse.json(\n      { error: 'Failed to update propagation status' },\n      { status: 500 }\n    );\n  }\n}"],"mappings":"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","ignoreList":[]}