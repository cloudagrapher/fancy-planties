33781558edc4f9205fbd3599f74972f0
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get ResendEmailService () {
        return ResendEmailService;
    },
    get createEmailService () {
        return createEmailService;
    }
});
require("server-only");
const _resend = require("resend");
const _emailservice = require("./email-service");
class ResendEmailService {
    constructor(config){
        this.resend = new _resend.Resend(config.apiKey);
        this.config = config;
    }
    async sendVerificationEmail(email, code, name) {
        try {
            const { data, error } = await this.resend.emails.send({
                from: `${this.config.fromName} <${this.config.fromEmail}>`,
                to: [
                    email
                ],
                subject: 'Verify your email address',
                html: this.generateVerificationEmailTemplate(code, name),
                text: this.generateVerificationEmailText(code, name)
            });
            if (error) {
                console.error('Resend API error:', error);
                // Map Resend errors to our error types
                if (error.message?.includes('quota') || error.message?.includes('limit')) {
                    throw new _emailservice.EmailServiceError('Email quota exceeded', 'QUOTA_EXCEEDED');
                }
                if (error.message?.includes('invalid') && error.message?.includes('email')) {
                    throw new _emailservice.EmailServiceError('Invalid email address', 'INVALID_EMAIL');
                }
                throw new _emailservice.EmailServiceError(`Resend API error: ${error.message}`, 'API_ERROR');
            }
            console.log('Verification email sent successfully:', data?.id);
            return true;
        } catch (error) {
            if (error instanceof _emailservice.EmailServiceError) {
                throw error;
            }
            console.error('Network error sending email:', error);
            throw new _emailservice.EmailServiceError(`Network error: ${error instanceof Error ? error.message : 'Unknown error'}`, 'NETWORK_ERROR');
        }
    }
    generateVerificationEmailTemplate(code, name) {
        return `
      <!DOCTYPE html>
      <html lang="en">
      <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Verify Your Email</title>
        <style>
          body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 600px;
            margin: 0 auto;
            padding: 20px;
          }
          .header {
            text-align: center;
            margin-bottom: 30px;
          }
          .logo {
            font-size: 24px;
            font-weight: bold;
            color: #22c55e;
            margin-bottom: 10px;
          }
          .verification-code {
            background: #f8f9fa;
            border: 2px solid #e9ecef;
            border-radius: 8px;
            padding: 20px;
            text-align: center;
            margin: 30px 0;
          }
          .code {
            font-size: 32px;
            font-weight: bold;
            letter-spacing: 4px;
            color: #22c55e;
            font-family: 'Courier New', monospace;
          }
          .footer {
            margin-top: 30px;
            padding-top: 20px;
            border-top: 1px solid #e9ecef;
            font-size: 14px;
            color: #6c757d;
          }
        </style>
      </head>
      <body>
        <div class="header">
          <div class="logo">ðŸŒ± Fancy Planties</div>
          <h1>Verify Your Email Address</h1>
        </div>
        
        <p>Hi ${name},</p>
        
        <p>Welcome to Fancy Planties! To complete your account setup, please verify your email address by entering the verification code below:</p>
        
        <div class="verification-code">
          <div class="code">${code}</div>
          <p style="margin: 10px 0 0 0; font-size: 14px; color: #6c757d;">
            This code expires in 10 minutes
          </p>
        </div>
        
        <p>If you didn't create an account with Fancy Planties, you can safely ignore this email.</p>
        
        <div class="footer">
          <p>This is an automated message from Fancy Planties. Please do not reply to this email.</p>
          <p>Need help? Contact us at support@fancy-planties.cloudagrapher.com</p>
        </div>
      </body>
      </html>
    `;
    }
    generateVerificationEmailText(code, name) {
        return `
Hi ${name},

Welcome to Fancy Planties! To complete your account setup, please verify your email address by entering the verification code below:

Verification Code: ${code}

This code expires in 10 minutes.

If you didn't create an account with Fancy Planties, you can safely ignore this email.

---
This is an automated message from Fancy Planties. Please do not reply to this email.
Need help? Contact us at support@fancy-planties.cloudagrapher.com
    `.trim();
    }
}
function createEmailService() {
    const config = {
        apiKey: process.env.RESEND_API_KEY,
        fromEmail: process.env.FROM_EMAIL || 'send.mail.fancy-planties.cloudagrapher.com',
        fromName: process.env.FROM_NAME || 'Fancy Planties'
    };
    if (!config.apiKey) {
        throw new Error('RESEND_API_KEY environment variable is required');
    }
    return new ResendEmailService(config);
}

//# sourceMappingURL=data:application/json;base64,