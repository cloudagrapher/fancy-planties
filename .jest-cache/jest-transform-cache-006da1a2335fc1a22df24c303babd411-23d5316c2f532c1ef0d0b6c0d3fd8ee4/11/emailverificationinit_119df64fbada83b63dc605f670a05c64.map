{"version":3,"names":["initializeEmailVerification","cov_2rdobkrb0u","f","s","isEmailVerificationInitialized","isInitialized","b","console","log","_emailverificationcleanup","emailVerificationCleanupService","runStartupCleanup","process","env","NODE_ENV","scheduleCleanup","error"],"sources":["/Users/stefanbekker/projects/fancy-planties/src/lib/init/email-verification-init.ts"],"sourcesContent":["import 'server-only';\nimport { emailVerificationCleanupService } from '@/lib/services/email-verification-cleanup';\n\nlet isInitialized = false;\n\n/**\n * Initialize email verification system\n * This should be called once when the application starts\n */\nexport async function initializeEmailVerification(): Promise<void> {\n  if (isInitialized) {\n    return;\n  }\n  \n  console.log('[INIT] Initializing email verification system...');\n  \n  try {\n    // Run startup cleanup\n    await emailVerificationCleanupService.runStartupCleanup();\n    \n    // Schedule regular cleanup (if not already scheduled)\n    if (process.env.NODE_ENV === 'production') {\n      emailVerificationCleanupService.scheduleCleanup();\n    } else {\n      // In development, run less frequently\n      emailVerificationCleanupService.scheduleCleanup(2 * 60 * 60 * 1000); // 2 hours\n    }\n    \n    isInitialized = true;\n    console.log('[INIT] Email verification system initialized successfully');\n    \n  } catch (error) {\n    console.error('[INIT] Failed to initialize email verification system:', error);\n    // Don't throw - let the app continue running even if cleanup fails\n  }\n}\n\n/**\n * Check if email verification system is initialized\n */\nexport function isEmailVerificationInitialized(): boolean {\n  return isInitialized;\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MASsBA,4BAAA;IAAA;IAAAC,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;WAAAH,2BAAA;;MA+BNI,+BAAA;IAAA;IAAAH,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;WAAAC,8BAAA;;;;;QAxCT;;;kCACyC;AAEhD,IAAIC,aAAA;AAAA;AAAA,CAAAJ,cAAA,GAAAE,CAAA,OAAgB;AAMb,eAAeH,4BAAA;EAAA;EAAAC,cAAA,GAAAC,CAAA;EAAAD,cAAA,GAAAE,CAAA;EACpB,IAAIE,aAAA,EAAe;IAAA;IAAAJ,cAAA,GAAAK,CAAA;IAAAL,cAAA,GAAAE,CAAA;IACjB;EACF;EAAA;EAAA;IAAAF,cAAA,GAAAK,CAAA;EAAA;EAAAL,cAAA,GAAAE,CAAA;EAEAI,OAAA,CAAQC,GAAG,CAAC;EAAA;EAAAP,cAAA,GAAAE,CAAA;EAEZ,IAAI;IAAA;IAAAF,cAAA,GAAAE,CAAA;IACF;IACA,MAAMM,yBAAA,CAAAC,+BAA+B,CAACC,iBAAiB;IAEvD;IAAA;IAAAV,cAAA,GAAAE,CAAA;IACA,IAAIS,OAAA,CAAQC,GAAG,CAACC,QAAQ,KAAK,cAAc;MAAA;MAAAb,cAAA,GAAAK,CAAA;MAAAL,cAAA,GAAAE,CAAA;MACzCM,yBAAA,CAAAC,+BAA+B,CAACK,eAAe;IACjD,OAAO;MAAA;MAAAd,cAAA,GAAAK,CAAA;MAAAL,cAAA,GAAAE,CAAA;MACL;MACAM,yBAAA,CAAAC,+BAA+B,CAACK,eAAe,CAAC,IAAI,KAAK,KAAK,OAAO;IACvE;IAAA;IAAAd,cAAA,GAAAE,CAAA;IAEAE,aAAA,GAAgB;IAAA;IAAAJ,cAAA,GAAAE,CAAA;IAChBI,OAAA,CAAQC,GAAG,CAAC;EAEd,EAAE,OAAOQ,KAAA,EAAO;IAAA;IAAAf,cAAA,GAAAE,CAAA;IACdI,OAAA,CAAQS,KAAK,CAAC,0DAA0DA,KAAA;IACxE;EACF;AACF;AAKO,SAASZ,+BAAA;EAAA;EAAAH,cAAA,GAAAC,CAAA;EAAAD,cAAA,GAAAE,CAAA;EACd,OAAOE,aAAA;AACT","ignoreList":[]}