e10f17b2719194d4b09d90f87c32805b
"use strict";

/* istanbul ignore next */
function cov_21mwhzxbko() {
  var path = "/Users/stefanbekker/projects/fancy-planties/src/app/api/health/route.ts";
  var hash = "994f5691d1e2fba60f14853f234c17f3b49b589b";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/stefanbekker/projects/fancy-planties/src/app/api/health/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 19
        }
      },
      "3": {
        start: {
          line: 11,
          column: 16
        },
        end: {
          line: 11,
          column: 38
        }
      },
      "4": {
        start: {
          line: 12,
          column: 12
        },
        end: {
          line: 12,
          column: 38
        }
      },
      "5": {
        start: {
          line: 13,
          column: 20
        },
        end: {
          line: 13,
          column: 60
        }
      },
      "6": {
        start: {
          line: 14,
          column: 16
        },
        end: {
          line: 14,
          column: 52
        }
      },
      "7": {
        start: {
          line: 15,
          column: 0
        },
        end: {
          line: 15,
          column: 29
        }
      },
      "8": {
        start: {
          line: 17,
          column: 22
        },
        end: {
          line: 17,
          column: 32
        }
      },
      "9": {
        start: {
          line: 18,
          column: 4
        },
        end: {
          line: 83,
          column: 5
        }
      },
      "10": {
        start: {
          line: 20,
          column: 24
        },
        end: {
          line: 20,
          column: 34
        }
      },
      "11": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 21,
          column: 41
        }
      },
      "12": {
        start: {
          line: 22,
          column: 27
        },
        end: {
          line: 22,
          column: 47
        }
      },
      "13": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 24,
          column: 85
        }
      },
      "14": {
        start: {
          line: 26,
          column: 24
        },
        end: {
          line: 26,
          column: 66
        }
      },
      "15": {
        start: {
          line: 27,
          column: 27
        },
        end: {
          line: 43,
          column: 9
        }
      },
      "16": {
        start: {
          line: 44,
          column: 25
        },
        end: {
          line: 44,
          column: 47
        }
      },
      "17": {
        start: {
          line: 45,
          column: 8
        },
        end: {
          line: 45,
          column: 85
        }
      },
      "18": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 49,
          column: 11
        }
      },
      "19": {
        start: {
          line: 50,
          column: 8
        },
        end: {
          line: 57,
          column: 11
        }
      },
      "20": {
        start: {
          line: 59,
          column: 25
        },
        end: {
          line: 59,
          column: 47
        }
      },
      "21": {
        start: {
          line: 61,
          column: 8
        },
        end: {
          line: 61,
          column: 84
        }
      },
      "22": {
        start: {
          line: 62,
          column: 8
        },
        end: {
          line: 62,
          column: 85
        }
      },
      "23": {
        start: {
          line: 63,
          column: 8
        },
        end: {
          line: 63,
          column: 111
        }
      },
      "24": {
        start: {
          line: 64,
          column: 26
        },
        end: {
          line: 74,
          column: 9
        }
      },
      "25": {
        start: {
          line: 75,
          column: 8
        },
        end: {
          line: 82,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "GET",
        decl: {
          start: {
            line: 16,
            column: 15
          },
          end: {
            line: 16,
            column: 18
          }
        },
        loc: {
          start: {
            line: 16,
            column: 28
          },
          end: {
            line: 84,
            column: 1
          }
        },
        line: 16
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 30,
            column: 21
          },
          end: {
            line: 30,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 30,
            column: 21
          },
          end: {
            line: 30,
            column: 52
          }
        }, {
          start: {
            line: 30,
            column: 56
          },
          end: {
            line: 30,
            column: 63
          }
        }],
        line: 30
      },
      "1": {
        loc: {
          start: {
            line: 31,
            column: 25
          },
          end: {
            line: 31,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 31,
            column: 25
          },
          end: {
            line: 31,
            column: 45
          }
        }, {
          start: {
            line: 31,
            column: 49
          },
          end: {
            line: 31,
            column: 62
          }
        }],
        line: 31
      },
      "2": {
        loc: {
          start: {
            line: 63,
            column: 52
          },
          end: {
            line: 63,
            column: 109
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 63,
            column: 77
          },
          end: {
            line: 63,
            column: 82
          }
        }, {
          start: {
            line: 63,
            column: 85
          },
          end: {
            line: 63,
            column: 109
          }
        }],
        line: 63
      },
      "3": {
        loc: {
          start: {
            line: 67,
            column: 21
          },
          end: {
            line: 67,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 67,
            column: 21
          },
          end: {
            line: 67,
            column: 52
          }
        }, {
          start: {
            line: 67,
            column: 56
          },
          end: {
            line: 67,
            column: 63
          }
        }],
        line: 67
      },
      "4": {
        loc: {
          start: {
            line: 68,
            column: 25
          },
          end: {
            line: 68,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 68,
            column: 25
          },
          end: {
            line: 68,
            column: 45
          }
        }, {
          start: {
            line: 68,
            column: 49
          },
          end: {
            line: 68,
            column: 62
          }
        }],
        line: 68
      },
      "5": {
        loc: {
          start: {
            line: 72,
            column: 23
          },
          end: {
            line: 72,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 72,
            column: 48
          },
          end: {
            line: 72,
            column: 61
          }
        }, {
          start: {
            line: 72,
            column: 64
          },
          end: {
            line: 72,
            column: 79
          }
        }],
        line: 72
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0
    },
    f: {
      "0": 0,
      "1": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/stefanbekker/projects/fancy-planties/src/app/api/health/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport { db } from '@/lib/db';\nimport { monitoring } from '@/lib/utils/monitoring';\nimport { logger } from '@/lib/utils/logger';\nimport '@/lib/init'; // Initialize server services\n\nexport async function GET(request: NextRequest) {\n  const startTime = Date.now();\n  \n  try {\n    // Check database connectivity\n    const dbStart = Date.now();\n    await db.execute('SELECT 1');\n    const dbDuration = Date.now() - dbStart;\n    \n    // Record database performance\n    monitoring.recordDatabaseQuery('health_check', dbDuration, true);\n    \n    // Get metrics summary\n    const metrics = monitoring.getMetricsSummary();\n    \n    const healthData = {\n      status: 'healthy',\n      timestamp: new Date().toISOString(),\n      version: process.env.npm_package_version || '0.1.0',\n      environment: process.env.NODE_ENV || 'development',\n      uptime: process.uptime(),\n      database: {\n        status: 'connected',\n        responseTime: dbDuration\n      },\n      metrics: {\n        memoryUsage: metrics.application.memoryUsage,\n        requestCount: metrics.application.requestCount,\n        errorCount: metrics.application.errorCount,\n        averageResponseTime: metrics.application.averageResponseTime\n      }\n    };\n\n    const duration = Date.now() - startTime;\n    monitoring.recordApiRequest('GET', '/api/health', 200, duration);\n    \n    logger.debug('Health check completed', { duration, dbDuration });\n\n    return NextResponse.json(healthData, { \n      status: 200,\n      headers: {\n        'Cache-Control': 'no-cache, no-store, must-revalidate',\n        'Pragma': 'no-cache',\n        'Expires': '0'\n      }\n    });\n  } catch (error) {\n    const duration = Date.now() - startTime;\n    \n    // Record database error\n    monitoring.recordDatabaseQuery('health_check', duration, false);\n    monitoring.recordApiRequest('GET', '/api/health', 503, duration);\n    \n    logger.error('Health check failed', error instanceof Error ? error : new Error(String(error)));\n    \n    const errorData = {\n      status: 'unhealthy',\n      timestamp: new Date().toISOString(),\n      version: process.env.npm_package_version || '0.1.0',\n      environment: process.env.NODE_ENV || 'development',\n      uptime: process.uptime(),\n      database: {\n        status: 'disconnected',\n        error: error instanceof Error ? error.message : 'Unknown error'\n      }\n    };\n\n    return NextResponse.json(errorData, { \n      status: 503,\n      headers: {\n        'Cache-Control': 'no-cache, no-store, must-revalidate',\n        'Pragma': 'no-cache',\n        'Expires': '0'\n      }\n    });\n  }\n}"],
      names: ["GET", "request", "startTime", "Date", "now", "dbStart", "db", "execute", "dbDuration", "monitoring", "recordDatabaseQuery", "metrics", "getMetricsSummary", "healthData", "status", "timestamp", "toISOString", "version", "process", "env", "npm_package_version", "environment", "NODE_ENV", "uptime", "database", "responseTime", "memoryUsage", "application", "requestCount", "errorCount", "averageResponseTime", "duration", "recordApiRequest", "logger", "debug", "NextResponse", "json", "headers", "error", "Error", "String", "errorData", "message"],
      mappings: ";;;;+BAMsBA;;;eAAAA;;;wBANoB;oBACvB;4BACQ;wBACJ;QAChB;AAEA,eAAeA,IAAIC,OAAoB;IAC5C,MAAMC,YAAYC,KAAKC,GAAG;IAE1B,IAAI;QACF,8BAA8B;QAC9B,MAAMC,UAAUF,KAAKC,GAAG;QACxB,MAAME,MAAE,CAACC,OAAO,CAAC;QACjB,MAAMC,aAAaL,KAAKC,GAAG,KAAKC;QAEhC,8BAA8B;QAC9BI,sBAAU,CAACC,mBAAmB,CAAC,gBAAgBF,YAAY;QAE3D,sBAAsB;QACtB,MAAMG,UAAUF,sBAAU,CAACG,iBAAiB;QAE5C,MAAMC,aAAa;YACjBC,QAAQ;YACRC,WAAW,IAAIZ,OAAOa,WAAW;YACjCC,SAASC,QAAQC,GAAG,CAACC,mBAAmB,IAAI;YAC5CC,aAAaH,QAAQC,GAAG,CAACG,QAAQ,IAAI;YACrCC,QAAQL,QAAQK,MAAM;YACtBC,UAAU;gBACRV,QAAQ;gBACRW,cAAcjB;YAChB;YACAG,SAAS;gBACPe,aAAaf,QAAQgB,WAAW,CAACD,WAAW;gBAC5CE,cAAcjB,QAAQgB,WAAW,CAACC,YAAY;gBAC9CC,YAAYlB,QAAQgB,WAAW,CAACE,UAAU;gBAC1CC,qBAAqBnB,QAAQgB,WAAW,CAACG,mBAAmB;YAC9D;QACF;QAEA,MAAMC,WAAW5B,KAAKC,GAAG,KAAKF;QAC9BO,sBAAU,CAACuB,gBAAgB,CAAC,OAAO,eAAe,KAAKD;QAEvDE,cAAM,CAACC,KAAK,CAAC,0BAA0B;YAAEH;YAAUvB;QAAW;QAE9D,OAAO2B,oBAAY,CAACC,IAAI,CAACvB,YAAY;YACnCC,QAAQ;YACRuB,SAAS;gBACP,iBAAiB;gBACjB,UAAU;gBACV,WAAW;YACb;QACF;IACF,EAAE,OAAOC,OAAO;QACd,MAAMP,WAAW5B,KAAKC,GAAG,KAAKF;QAE9B,wBAAwB;QACxBO,sBAAU,CAACC,mBAAmB,CAAC,gBAAgBqB,UAAU;QACzDtB,sBAAU,CAACuB,gBAAgB,CAAC,OAAO,eAAe,KAAKD;QAEvDE,cAAM,CAACK,KAAK,CAAC,uBAAuBA,iBAAiBC,QAAQD,QAAQ,IAAIC,MAAMC,OAAOF;QAEtF,MAAMG,YAAY;YAChB3B,QAAQ;YACRC,WAAW,IAAIZ,OAAOa,WAAW;YACjCC,SAASC,QAAQC,GAAG,CAACC,mBAAmB,IAAI;YAC5CC,aAAaH,QAAQC,GAAG,CAACG,QAAQ,IAAI;YACrCC,QAAQL,QAAQK,MAAM;YACtBC,UAAU;gBACRV,QAAQ;gBACRwB,OAAOA,iBAAiBC,QAAQD,MAAMI,OAAO,GAAG;YAClD;QACF;QAEA,OAAOP,oBAAY,CAACC,IAAI,CAACK,WAAW;YAClC3B,QAAQ;YACRuB,SAAS;gBACP,iBAAiB;gBACjB,UAAU;gBACV,WAAW;YACb;QACF;IACF;AACF"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "994f5691d1e2fba60f14853f234c17f3b49b589b"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_21mwhzxbko = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_21mwhzxbko();
cov_21mwhzxbko().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_21mwhzxbko().s[1]++;
Object.defineProperty(exports, "GET", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_21mwhzxbko().f[0]++;
    cov_21mwhzxbko().s[2]++;
    return GET;
  }
});
const _server =
/* istanbul ignore next */
(cov_21mwhzxbko().s[3]++, require("next/server"));
const _db =
/* istanbul ignore next */
(cov_21mwhzxbko().s[4]++, require("../../../lib/db"));
const _monitoring =
/* istanbul ignore next */
(cov_21mwhzxbko().s[5]++, require("../../../lib/utils/monitoring"));
const _logger =
/* istanbul ignore next */
(cov_21mwhzxbko().s[6]++, require("../../../lib/utils/logger"));
/* istanbul ignore next */
cov_21mwhzxbko().s[7]++;
require("../../../lib/init");
async function GET(request) {
  /* istanbul ignore next */
  cov_21mwhzxbko().f[1]++;
  const startTime =
  /* istanbul ignore next */
  (cov_21mwhzxbko().s[8]++, Date.now());
  /* istanbul ignore next */
  cov_21mwhzxbko().s[9]++;
  try {
    // Check database connectivity
    const dbStart =
    /* istanbul ignore next */
    (cov_21mwhzxbko().s[10]++, Date.now());
    /* istanbul ignore next */
    cov_21mwhzxbko().s[11]++;
    await _db.db.execute('SELECT 1');
    const dbDuration =
    /* istanbul ignore next */
    (cov_21mwhzxbko().s[12]++, Date.now() - dbStart);
    // Record database performance
    /* istanbul ignore next */
    cov_21mwhzxbko().s[13]++;
    _monitoring.monitoring.recordDatabaseQuery('health_check', dbDuration, true);
    // Get metrics summary
    const metrics =
    /* istanbul ignore next */
    (cov_21mwhzxbko().s[14]++, _monitoring.monitoring.getMetricsSummary());
    const healthData =
    /* istanbul ignore next */
    (cov_21mwhzxbko().s[15]++, {
      status: 'healthy',
      timestamp: new Date().toISOString(),
      version:
      /* istanbul ignore next */
      (cov_21mwhzxbko().b[0][0]++, process.env.npm_package_version) ||
      /* istanbul ignore next */
      (cov_21mwhzxbko().b[0][1]++, '0.1.0'),
      environment:
      /* istanbul ignore next */
      (cov_21mwhzxbko().b[1][0]++, process.env.NODE_ENV) ||
      /* istanbul ignore next */
      (cov_21mwhzxbko().b[1][1]++, 'development'),
      uptime: process.uptime(),
      database: {
        status: 'connected',
        responseTime: dbDuration
      },
      metrics: {
        memoryUsage: metrics.application.memoryUsage,
        requestCount: metrics.application.requestCount,
        errorCount: metrics.application.errorCount,
        averageResponseTime: metrics.application.averageResponseTime
      }
    });
    const duration =
    /* istanbul ignore next */
    (cov_21mwhzxbko().s[16]++, Date.now() - startTime);
    /* istanbul ignore next */
    cov_21mwhzxbko().s[17]++;
    _monitoring.monitoring.recordApiRequest('GET', '/api/health', 200, duration);
    /* istanbul ignore next */
    cov_21mwhzxbko().s[18]++;
    _logger.logger.debug('Health check completed', {
      duration,
      dbDuration
    });
    /* istanbul ignore next */
    cov_21mwhzxbko().s[19]++;
    return _server.NextResponse.json(healthData, {
      status: 200,
      headers: {
        'Cache-Control': 'no-cache, no-store, must-revalidate',
        'Pragma': 'no-cache',
        'Expires': '0'
      }
    });
  } catch (error) {
    const duration =
    /* istanbul ignore next */
    (cov_21mwhzxbko().s[20]++, Date.now() - startTime);
    // Record database error
    /* istanbul ignore next */
    cov_21mwhzxbko().s[21]++;
    _monitoring.monitoring.recordDatabaseQuery('health_check', duration, false);
    /* istanbul ignore next */
    cov_21mwhzxbko().s[22]++;
    _monitoring.monitoring.recordApiRequest('GET', '/api/health', 503, duration);
    /* istanbul ignore next */
    cov_21mwhzxbko().s[23]++;
    _logger.logger.error('Health check failed', error instanceof Error ?
    /* istanbul ignore next */
    (cov_21mwhzxbko().b[2][0]++, error) :
    /* istanbul ignore next */
    (cov_21mwhzxbko().b[2][1]++, new Error(String(error))));
    const errorData =
    /* istanbul ignore next */
    (cov_21mwhzxbko().s[24]++, {
      status: 'unhealthy',
      timestamp: new Date().toISOString(),
      version:
      /* istanbul ignore next */
      (cov_21mwhzxbko().b[3][0]++, process.env.npm_package_version) ||
      /* istanbul ignore next */
      (cov_21mwhzxbko().b[3][1]++, '0.1.0'),
      environment:
      /* istanbul ignore next */
      (cov_21mwhzxbko().b[4][0]++, process.env.NODE_ENV) ||
      /* istanbul ignore next */
      (cov_21mwhzxbko().b[4][1]++, 'development'),
      uptime: process.uptime(),
      database: {
        status: 'disconnected',
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_21mwhzxbko().b[5][0]++, error.message) :
        /* istanbul ignore next */
        (cov_21mwhzxbko().b[5][1]++, 'Unknown error')
      }
    });
    /* istanbul ignore next */
    cov_21mwhzxbko().s[25]++;
    return _server.NextResponse.json(errorData, {
      status: 503,
      headers: {
        'Cache-Control': 'no-cache, no-store, must-revalidate',
        'Pragma': 'no-cache',
        'Expires': '0'
      }
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,