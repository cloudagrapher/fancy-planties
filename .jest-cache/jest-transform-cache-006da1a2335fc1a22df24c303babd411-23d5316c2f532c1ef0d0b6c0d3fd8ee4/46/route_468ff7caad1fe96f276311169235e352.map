{"version":3,"names":["GET","cov_5lzx7djyn","f","s","POST","request","user","_server1","validateRequest","b","_server","NextResponse","json","error","status","searchParams","URL","url","query","get","limit","parseInt","length","success","data","suggestions","_advancedsearch","advancedSearchService","getSearchSuggestions","id","console","body","params","_plantschemas","searchSuggestionSchema","parse","userId","_zod","z","ZodError","details","issues"],"sources":["/Users/stefanbekker/projects/fancy-planties/src/app/api/search/suggestions/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { z } from 'zod';\nimport { validateRequest } from '@/lib/auth/server';\nimport { advancedSearchService } from '@/lib/services/advanced-search';\nimport { searchSuggestionSchema } from '@/lib/validation/plant-schemas';\n\n// GET /api/search/suggestions - Get search suggestions\nexport async function GET(request: NextRequest) {\n  try {\n    const { user } = await validateRequest();\n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const { searchParams } = new URL(request.url);\n    const query = searchParams.get('query');\n    const limit = parseInt(searchParams.get('limit') || '5', 10);\n\n    if (!query || query.length < 2) {\n      return NextResponse.json({\n        success: true,\n        data: { suggestions: [] },\n      });\n    }\n\n    // Get search suggestions\n    const suggestions = await advancedSearchService.getSearchSuggestions(\n      query,\n      user.id,\n      limit\n    );\n\n    return NextResponse.json({\n      success: true,\n      data: { suggestions },\n    });\n\n  } catch (error) {\n    console.error('Search suggestions error:', error);\n    \n    return NextResponse.json(\n      { error: 'Failed to get search suggestions' },\n      { status: 500 }\n    );\n  }\n}\n\n// POST /api/search/suggestions - Get search suggestions with options\nexport async function POST(request: NextRequest) {\n  try {\n    const { user } = await validateRequest();\n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const body = await request.json();\n    const params = searchSuggestionSchema.parse({\n      ...body,\n      userId: user.id,\n    });\n\n    // Get search suggestions\n    const suggestions = await advancedSearchService.getSearchSuggestions(\n      params.query,\n      params.userId,\n      params.limit\n    );\n\n    return NextResponse.json({\n      success: true,\n      data: { suggestions },\n    });\n\n  } catch (error) {\n    console.error('Search suggestions error:', error);\n    \n    if (error instanceof z.ZodError) {\n      return NextResponse.json(\n        { error: 'Invalid parameters', details: error.issues },\n        { status: 400 }\n      );\n    }\n\n    return NextResponse.json(\n      { error: 'Failed to get search suggestions' },\n      { status: 500 }\n    );\n  }\n}"],"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","ignoreList":[]}