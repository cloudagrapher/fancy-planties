{"version":3,"names":["PlantInstanceForm","plantTaxonomySchema","cov_2grdj89bo9","s","_zod1","z","object","family","string","min","max","genus","species","cultivar","optional","transform","val","f","b","trim","commonName","plantInstanceFormSchema","plantId","number","nickname","refine","length","location","fertilizerSchedule","enum","message","lastFertilized","isNaN","Date","parse","lastRepot","notes","images","array","isActive","boolean","default","newPlantTaxonomy","data","fertilizerDate","today","setHours","path","repotDate","plantInstance","isOpen","onClose","onSuccess","userId","selectedPlant","setSelectedPlant","_react","useState","imageFiles","setImageFiles","existingImages","setExistingImages","showLocationSuggestions","setShowLocationSuggestions","locationInput","setLocationInput","isCreatingPlant","setIsCreatingPlant","showTaxonomyForm","setShowTaxonomyForm","taxonomyData","setTaxonomyData","hasUnsavedChanges","setHasUnsavedChanges","newNoteInput","setNewNoteInput","queryClient","_reactquery","useQueryClient","isEditing","control","handleSubmit","formState","errors","isValid","isDirty","reset","setValue","watch","trigger","_reacthookform","useForm","resolver","_zod","zodResolver","mode","defaultValues","undefined","userLocations","useQuery","queryKey","queryFn","response","fetch","ok","Error","json","staleTime","handleShowTaxonomyForm","query","handleTaxonomySubmit","createPlantMutation","mutate","handleCancelTaxonomyForm","useMutation","mutationFn","plantData","method","headers","body","JSON","stringify","error","invalidateQueries","refetchType","removeQueries","refetchQueries","newPlant","id","isVerified","handlePlantSelect","onError","console","mutation","formData","FormData","Object","entries","forEach","key","value","Array","isArray","image","index","append","String","file","url","log","type","additionalQueryKeys","useEffect","convertedSchedule","convertDatabaseScheduleToForm","toISOString","split","plant","shouldValidate","handleImageChange","files","handleRemoveExistingImage","newImages","filter","_","i","handleSetPrimaryImage","selectedImage","splice","unshift","convertFertilizerSchedule","schedule","scheduleMap","reverseMap","result","onSubmit","submitData","handleBeforeUnload","e","preventDefault","returnValue","window","addEventListener","removeEventListener","handleClose","confirmed","confirm","handleEscape","document","style","overflow","_jsxruntime","jsxs","className","jsx","onClick","fill","stroke","viewBox","strokeLinecap","strokeLinejoin","strokeWidth","d","_PlantTaxonomySelector","onSelect","disabled","onAddNew","cx","cy","r","isError","onChange","prev","target","placeholder","htmlFor","Controller","name","render","field","onFocus","onBlur","setTimeout","toLowerCase","includes","slice","map","some","loc","suggestion","lastFert","currentSchedule","weekly","biweekly","every_2_4_weeks","every_3_4_weeks","every_4_weeks","every_4_6_weeks","every_6_8_weeks","bimonthly","quarterly","days","nextDue","setDate","getDate","toLocaleDateString","rows","onKeyDown","metaKey","ctrlKey","newNote","timestamp","existingNotes","updatedNotes","src","alt","title","fillRule","clipRule","_ImageUpload","onImagesChange","maxImages","acceptedTypes","maxSizePerImage","checked","keys","charAt","toUpperCase","isPending"],"sources":["/Users/stefanbekker/projects/fancy-planties/src/components/plants/PlantInstanceForm.tsx"],"sourcesContent":["'use client';\n\nimport { useState, useEffect } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { useForm, Controller } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport PlantTaxonomySelector from './PlantTaxonomySelector';\nimport ImageUpload from '../shared/ImageUpload';\nimport type { EnhancedPlantInstance } from '@/lib/types/plant-instance-types';\nimport type { PlantSuggestion } from '@/lib/validation/plant-schemas';\n\n// Form validation schemas\nconst plantTaxonomySchema = z.object({\n  family: z.string().min(1, 'Family is required').max(100, 'Family must be less than 100 characters'),\n  genus: z.string().min(1, 'Genus is required').max(100, 'Genus must be less than 100 characters'),\n  species: z.string().min(1, 'Species is required').max(100, 'Species must be less than 100 characters'),\n  cultivar: z.string().max(100, 'Cultivar must be less than 100 characters').optional().transform(val => val?.trim() || ''),\n  commonName: z.string().min(1, 'Common name is required').max(100, 'Common name must be less than 100 characters'),\n});\n\nconst plantInstanceFormSchema = z.object({\n  plantId: z.number().min(1, 'Please select a plant type'),\n  nickname: z.string()\n    .min(1, 'Nickname is required')\n    .max(100, 'Nickname must be less than 100 characters')\n    .trim()\n    .refine(val => val.length > 0, 'Nickname cannot be empty'),\n  location: z.string()\n    .min(1, 'Location is required')\n    .max(100, 'Location must be less than 100 characters')\n    .trim()\n    .refine(val => val.length > 0, 'Location cannot be empty'),\n  fertilizerSchedule: z.enum([\n    'weekly', \n    'biweekly', \n    'every_2_4_weeks',\n    'every_3_4_weeks', \n    'every_4_weeks',\n    'every_4_6_weeks',\n    'every_6_8_weeks',\n    'bimonthly', \n    'quarterly'\n  ], {\n    message: 'Please select a fertilizer schedule'\n  }),\n  lastFertilized: z.string()\n    .optional()\n    .refine(val => !val || !isNaN(Date.parse(val)), 'Invalid date format'),\n  lastRepot: z.string()\n    .optional()\n    .refine(val => !val || !isNaN(Date.parse(val)), 'Invalid date format'),\n  notes: z.string()\n    .max(2000, 'Notes must be less than 2000 characters')\n    .optional()\n    .transform(val => val?.trim() || ''),\n  images: z.array(z.string()).max(10, 'Maximum 10 images allowed').optional(),\n  isActive: z.boolean().default(true).optional(),\n  // New taxonomy fields (only used when creating new plant)\n  newPlantTaxonomy: plantTaxonomySchema.optional(),\n}).refine(data => {\n  // Custom validation: lastFertilized cannot be in the future\n  if (data.lastFertilized) {\n    const fertilizerDate = new Date(data.lastFertilized);\n    const today = new Date();\n    today.setHours(23, 59, 59, 999); // End of today\n    return fertilizerDate <= today;\n  }\n  return true;\n}, {\n  message: 'Last fertilized date cannot be in the future',\n  path: ['lastFertilized']\n}).refine(data => {\n  // Custom validation: lastRepot cannot be in the future\n  if (data.lastRepot) {\n    const repotDate = new Date(data.lastRepot);\n    const today = new Date();\n    today.setHours(23, 59, 59, 999); // End of today\n    return repotDate <= today;\n  }\n  return true;\n}, {\n  message: 'Last repot date cannot be in the future',\n  path: ['lastRepot']\n});\n\ntype PlantInstanceFormData = z.infer<typeof plantInstanceFormSchema>;\ntype PlantTaxonomyFormData = z.infer<typeof plantTaxonomySchema>;\n\ninterface PlantInstanceFormProps {\n  plantInstance?: EnhancedPlantInstance;\n  isOpen: boolean;\n  onClose: () => void;\n  onSuccess?: (plantInstance: EnhancedPlantInstance) => void;\n  userId: number;\n}\n\nexport default function PlantInstanceForm({\n  plantInstance,\n  isOpen,\n  onClose,\n  onSuccess,\n  userId,\n}: PlantInstanceFormProps) {\n  const [selectedPlant, setSelectedPlant] = useState<PlantSuggestion | null>(null);\n  const [imageFiles, setImageFiles] = useState<File[]>([]);\n  const [existingImages, setExistingImages] = useState<string[]>([]);\n  const [showLocationSuggestions, setShowLocationSuggestions] = useState(false);\n  const [locationInput, setLocationInput] = useState('');\n  const [isCreatingPlant, setIsCreatingPlant] = useState(false);\n  const [showTaxonomyForm, setShowTaxonomyForm] = useState(false);\n  const [taxonomyData, setTaxonomyData] = useState<PlantTaxonomyFormData>({\n    family: '',\n    genus: '',\n    species: '',\n    cultivar: '',\n    commonName: '',\n  });\n  const [hasUnsavedChanges, setHasUnsavedChanges] = useState(false);\n  const [newNoteInput, setNewNoteInput] = useState('');\n  const queryClient = useQueryClient();\n  const isEditing = !!plantInstance;\n\n  // Form setup\n  const {\n    control,\n    handleSubmit,\n    formState: { errors, isValid, isDirty },\n    reset,\n    setValue,\n    watch,\n    trigger,\n  } = useForm({\n    resolver: zodResolver(plantInstanceFormSchema),\n    mode: 'onChange',\n    defaultValues: {\n      plantId: 1, // Default to 1 to pass validation, will be overridden during initialization\n      nickname: '',\n      location: '',\n      fertilizerSchedule: 'every_4_weeks' as const,\n      lastFertilized: '',\n      lastRepot: '',\n      notes: '',\n      images: [],\n      isActive: true,\n      newPlantTaxonomy: undefined,\n    },\n  });\n\n  // Fetch user locations for autocomplete\n  const { data: userLocations } = useQuery({\n    queryKey: ['user-locations', userId],\n    queryFn: async () => {\n      const response = await fetch(`/api/plant-instances/locations?userId=${userId}`);\n      if (!response.ok) throw new Error('Failed to fetch locations');\n      return response.json() as Promise<string[]>;\n    },\n    staleTime: 1000 * 60 * 10, // 10 minutes\n  });\n\n  // Handle showing taxonomy form for new plant creation\n  const handleShowTaxonomyForm = (query: string) => {\n    setShowTaxonomyForm(true);\n    setTaxonomyData({\n      family: '',\n      genus: '',\n      species: '',\n      cultivar: '',\n      commonName: query || '',\n    });\n  };\n\n  // Handle taxonomy form submission\n  const handleTaxonomySubmit = (data: PlantTaxonomyFormData) => {\n    setIsCreatingPlant(true);\n    createPlantMutation.mutate({\n      ...data,\n      cultivar: data.cultivar || null,\n    });\n  };\n\n  // Handle canceling taxonomy form\n  const handleCancelTaxonomyForm = () => {\n    setShowTaxonomyForm(false);\n    setTaxonomyData({\n      family: '',\n      genus: '',\n      species: '',\n      cultivar: '',\n      commonName: '',\n    });\n  };\n\n  // Create new plant mutation\n  const createPlantMutation = useMutation({\n    mutationFn: async (plantData: any) => {\n      const response = await fetch('/api/plants', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(plantData),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Failed to create plant');\n      }\n\n      return response.json();\n    },\n    onSuccess: async (data) => {\n      await queryClient.invalidateQueries({ \n        queryKey: ['plants'],\n        refetchType: 'active'\n      });\n      queryClient.removeQueries({ queryKey: ['plants'] });\n      await queryClient.refetchQueries({ queryKey: ['plants'] });\n      \n      // Set the newly created plant as selected\n      const newPlant: PlantSuggestion = {\n        id: data.data.id,\n        family: data.data.family,\n        genus: data.data.genus,\n        species: data.data.species,\n        cultivar: data.data.cultivar,\n        commonName: data.data.commonName,\n        isVerified: data.data.isVerified,\n      };\n      \n      handlePlantSelect(newPlant);\n      setIsCreatingPlant(false);\n      setShowTaxonomyForm(false);\n    },\n    onError: (error) => {\n      console.error('Failed to create plant:', error);\n      setIsCreatingPlant(false);\n      setShowTaxonomyForm(false);\n    },\n  });\n\n  // Create/update mutation\n  const mutation = useMutation({\n    mutationFn: async (data: PlantInstanceFormData & { fertilizerSchedule: string }) => {\n      const formData = new FormData();\n      \n      // Add form fields\n      Object.entries(data).forEach(([key, value]) => {\n        if (value !== undefined && value !== '') {\n          if (key === 'images' && Array.isArray(value)) {\n            // Handle existing images\n            value.forEach((image, index) => {\n              formData.append(`existingImages[${index}]`, image);\n            });\n          } else {\n            formData.append(key, String(value));\n          }\n        }\n      });\n\n      // Add new image files\n      imageFiles.forEach((file, index) => {\n        formData.append(`imageFiles[${index}]`, file);\n      });\n\n      const url = isEditing \n        ? `/api/plant-instances/${plantInstance.id}`\n        : '/api/plant-instances';\n      \n      const method = isEditing ? 'PUT' : 'POST';\n\n      const response = await fetch(url, {\n        method,\n        body: formData,\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        console.error('API Error Response:', error);\n        throw new Error(error.message || 'Failed to save plant instance');\n      }\n\n      return response.json();\n    },\n    onSuccess: async (data) => {\n      // Comprehensive cache clearing for immediate grid updates\n      console.log('Plant instance saved, invalidating caches...');\n      \n      // Invalidate all plant-instances queries regardless of filters\n      await queryClient.invalidateQueries({ \n        queryKey: ['plant-instances'],\n        refetchType: 'all'\n      });\n      \n      // Force refetch specific user queries\n      await queryClient.refetchQueries({ \n        queryKey: ['plant-instances', userId],\n        type: 'all'\n      });\n      \n      // Additional cache clearing for related data\n      const additionalQueryKeys = [\n        ['plant-detail'],\n        ['care-dashboard', userId],\n        ['plants']\n      ];\n\n      for (const queryKey of additionalQueryKeys) {\n        await queryClient.invalidateQueries({ \n          queryKey,\n          refetchType: 'active'\n        });\n      }\n      \n      console.log('Cache invalidation complete');\n      \n      // Reset form state\n      reset();\n      setImageFiles([]);\n      setExistingImages([]);\n      setSelectedPlant(null);\n      setShowTaxonomyForm(false);\n      setHasUnsavedChanges(false);\n      \n      if (onSuccess) {\n        onSuccess(data);\n      } else {\n        // Only call onClose if no onSuccess callback provided\n        onClose();\n      }\n    },\n  });\n\n  // Initialize form when editing\n  useEffect(() => {\n    if (isEditing && plantInstance) {\n      const convertedSchedule = convertDatabaseScheduleToForm(plantInstance.fertilizerSchedule);\n      console.log('Setting form with fertilizer schedule:', convertedSchedule);\n      reset({\n        plantId: plantInstance.plantId,\n        nickname: plantInstance.nickname,\n        location: plantInstance.location,\n        fertilizerSchedule: convertedSchedule as any,\n        lastFertilized: plantInstance.lastFertilized \n          ? new Date(plantInstance.lastFertilized).toISOString().split('T')[0]\n          : '',\n        lastRepot: plantInstance.lastRepot \n          ? new Date(plantInstance.lastRepot).toISOString().split('T')[0]\n          : '',\n        notes: plantInstance.notes || '',\n        images: plantInstance.images || [],\n        isActive: plantInstance.isActive,\n      });\n\n      setSelectedPlant({\n        id: plantInstance.plant.id,\n        family: plantInstance.plant.family,\n        genus: plantInstance.plant.genus,\n        species: plantInstance.plant.species,\n        commonName: plantInstance.plant.commonName,\n        isVerified: plantInstance.plant.isVerified,\n      });\n\n      setExistingImages(plantInstance.images || []);\n    } else {\n      reset();\n      setSelectedPlant(null);\n      setImageFiles([]);\n      setExistingImages([]);\n      setShowTaxonomyForm(false);\n      setTaxonomyData({\n        family: '',\n        genus: '',\n        species: '',\n        cultivar: '',\n        commonName: '',\n      });\n    }\n  }, [isEditing, plantInstance, reset]);\n\n  // Handle plant selection\n  const handlePlantSelect = (plant: PlantSuggestion | null) => {\n    if (plant) {\n      setSelectedPlant(plant);\n      setValue('plantId', plant.id, { shouldValidate: true });\n    } else {\n      setSelectedPlant(null);\n      setValue('plantId', 0, { shouldValidate: true });\n    }\n  };\n\n  // Handle image changes\n  const handleImageChange = (files: File[]) => {\n    setImageFiles(files);\n    // Don't update form's images field - keep existingImages separate\n    // Just trigger validation to ensure form is valid\n    trigger();\n  };\n\n  // Handle existing image removal\n  const handleRemoveExistingImage = (index: number) => {\n    const newImages = existingImages.filter((_, i) => i !== index);\n    setExistingImages(newImages);\n    // Don't update form's images field - keep existingImages separate\n    trigger();\n  };\n\n  // Handle setting primary image (move image to index 0)\n  const handleSetPrimaryImage = (index: number) => {\n    if (index === 0) return; // Already primary\n    \n    const newImages = [...existingImages];\n    const selectedImage = newImages[index];\n    \n    // Remove the selected image and add it to the beginning\n    newImages.splice(index, 1);\n    newImages.unshift(selectedImage);\n    \n    setExistingImages(newImages);\n    trigger();\n  };\n\n  // Convert enum fertilizer schedule to expected format\n  const convertFertilizerSchedule = (schedule: string): string => {\n    const scheduleMap = {\n      'weekly': '7 days',\n      'biweekly': '2 weeks', \n      'every_2_4_weeks': '3 weeks', // Average of 2-4 weeks\n      'every_3_4_weeks': '4 weeks', // Average of 3-4 weeks\n      'every_4_weeks': '4 weeks',\n      'every_4_6_weeks': '5 weeks', // Average of 4-6 weeks\n      'every_6_8_weeks': '7 weeks', // Average of 6-8 weeks\n      'bimonthly': '2 months',\n      'quarterly': '3 months'\n    };\n    return scheduleMap[schedule as keyof typeof scheduleMap] || schedule;\n  };\n\n  // Convert database fertilizer schedule back to form enum\n  const convertDatabaseScheduleToForm = (schedule: string): string => {\n    console.log('Converting database schedule:', schedule);\n    if (!schedule) return 'every_4_weeks';\n    \n    const reverseMap = {\n      // New format matches (what we send to API)\n      '7 days': 'weekly',\n      '2 weeks': 'biweekly',\n      '3 weeks': 'every_2_4_weeks',\n      '4 weeks': 'every_4_weeks',\n      '5 weeks': 'every_4_6_weeks',\n      '7 weeks': 'every_6_8_weeks',\n      '2 months': 'bimonthly',\n      '3 months': 'quarterly',\n      // Legacy formats that might exist in database\n      '1 week': 'weekly',\n      'every 2 weeks': 'biweekly',\n      'every 2-4 weeks': 'every_2_4_weeks',\n      'every 3-4 weeks': 'every_3_4_weeks', \n      'every 4 weeks': 'every_4_weeks',\n      'every 4-6 weeks': 'every_4_6_weeks',\n      'every 6-8 weeks': 'every_6_8_weeks',\n      '1 month': 'every_4_weeks',\n      'monthly': 'every_4_weeks',\n      'bimonthly': 'bimonthly',\n      'quarterly': 'quarterly',\n    };\n    \n    const result = reverseMap[schedule as keyof typeof reverseMap] || 'every_4_weeks';\n    console.log('Converted to:', result);\n    return result;\n  };\n\n  // Handle form submission\n  const onSubmit = (data: PlantInstanceFormData) => {\n    const submitData = {\n      ...data,\n      fertilizerSchedule: convertFertilizerSchedule(data.fertilizerSchedule),\n      images: existingImages, // Always use current existingImages state\n    };\n    console.log('Form submission data:', submitData);\n    console.log('Existing images being submitted:', existingImages);\n    console.log('Original fertilizer schedule:', data.fertilizerSchedule);\n    console.log('Converted fertilizer schedule:', convertFertilizerSchedule(data.fertilizerSchedule));\n    mutation.mutate(submitData as any);\n  };\n\n  // Track unsaved changes\n  useEffect(() => {\n    setHasUnsavedChanges(isDirty || imageFiles.length > 0 || showTaxonomyForm);\n  }, [isDirty, imageFiles.length, showTaxonomyForm]);\n\n  // Warn about unsaved changes before page unload\n  useEffect(() => {\n    const handleBeforeUnload = (e: BeforeUnloadEvent) => {\n      if (hasUnsavedChanges) {\n        e.preventDefault();\n        e.returnValue = 'You have unsaved changes. Are you sure you want to leave?';\n        return 'You have unsaved changes. Are you sure you want to leave?';\n      }\n    };\n\n    if (isOpen && hasUnsavedChanges) {\n      window.addEventListener('beforeunload', handleBeforeUnload);\n    }\n\n    return () => {\n      window.removeEventListener('beforeunload', handleBeforeUnload);\n    };\n  }, [isOpen, hasUnsavedChanges]);\n\n  // Handle close with unsaved changes warning\n  const handleClose = () => {\n    if (hasUnsavedChanges) {\n      const confirmed = window.confirm('You have unsaved changes. Are you sure you want to close?');\n      if (!confirmed) return;\n    }\n    onClose();\n  };\n\n  // Close modal on escape\n  useEffect(() => {\n    const handleEscape = (e: KeyboardEvent) => {\n      if (e.key === 'Escape') {\n        handleClose();\n      }\n    };\n\n    if (isOpen) {\n      document.addEventListener('keydown', handleEscape);\n      document.body.style.overflow = 'hidden';\n    }\n\n    return () => {\n      document.removeEventListener('keydown', handleEscape);\n      document.body.style.overflow = 'unset';\n    };\n  }, [isOpen, handleClose]);\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 z-50 overflow-hidden\">\n      {/* Backdrop */}\n      <div \n        className=\"absolute inset-0 bg-black bg-opacity-50 transition-opacity\"\n        onClick={handleClose}\n      />\n      \n      {/* Modal */}\n      <div className=\"relative h-full flex items-end sm:items-center justify-center p-4 pb-20 sm:pb-4\">\n        <div className=\"bg-white rounded-t-2xl sm:rounded-2xl w-full max-w-2xl max-h-full overflow-hidden shadow-2xl\">\n          {/* Header */}\n          <div className=\"flex items-center justify-between p-6 border-b border-gray-200\">\n            <h2 className=\"text-xl font-semibold text-gray-900\">\n              {isEditing ? 'Edit Plant' : 'Add New Plant'}\n            </h2>\n            <button\n              onClick={handleClose}\n              className=\"p-2 text-gray-400 hover:text-gray-600 rounded-full hover:bg-gray-100\"\n              aria-label=\"Close form\"\n            >\n              <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n              </svg>\n            </button>\n          </div>\n\n          {/* Form */}\n          <form onSubmit={handleSubmit(onSubmit)} className=\"flex-1 overflow-auto max-h-[60vh] sm:max-h-[70vh]\">\n            <div className=\"p-6 space-y-6\">\n              {/* Plant Type Selection */}\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Plant Type *\n                </label>\n                <PlantTaxonomySelector\n                  selectedPlant={selectedPlant}\n                  onSelect={handlePlantSelect}\n                  disabled={isCreatingPlant || showTaxonomyForm}\n                  onAddNew={handleShowTaxonomyForm}\n                />\n                {isCreatingPlant && (\n                  <div className=\"mt-2 flex items-center text-sm text-primary-600\">\n                    <svg className=\"animate-spin -ml-1 mr-2 h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\">\n                      <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\" />\n                      <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\" />\n                    </svg>\n                    Creating new plant type...\n                  </div>\n                )}\n                {createPlantMutation.isError && (\n                  <div className=\"mt-2 text-sm text-red-600\">\n                    Failed to create plant: {createPlantMutation.error instanceof Error ? createPlantMutation.error.message : 'Unknown error'}\n                  </div>\n                )}\n                {errors.plantId && (\n                  <div className=\"mt-1 text-sm text-red-600\">{errors.plantId.message}</div>\n                )}\n\n                {/* New Plant Taxonomy Form */}\n                {showTaxonomyForm && (\n                  <div className=\"mt-4 p-4 bg-blue-50 border border-blue-200 rounded-lg\">\n                    <div className=\"flex items-center justify-between mb-4\">\n                      <h3 className=\"text-sm font-semibold text-blue-900\">Create New Plant Type</h3>\n                      <button\n                        type=\"button\"\n                        onClick={handleCancelTaxonomyForm}\n                        className=\"text-blue-600 hover:text-blue-800\"\n                      >\n                        <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n                        </svg>\n                      </button>\n                    </div>\n                    \n                    <div className=\"space-y-4\">\n                      {/* Common Name */}\n                      <div>\n                        <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                          Common Name *\n                        </label>\n                        <input\n                          type=\"text\"\n                          value={taxonomyData.commonName}\n                          onChange={(e) => setTaxonomyData(prev => ({ ...prev, commonName: e.target.value }))}\n                          placeholder=\"e.g., Monstera Deliciosa\"\n                          className=\"w-full px-3 py-2 bg-white text-gray-900 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                        />\n                      </div>\n\n                      <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                        {/* Family */}\n                        <div>\n                          <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                            Family *\n                          </label>\n                          <input\n                            type=\"text\"\n                            value={taxonomyData.family}\n                            onChange={(e) => setTaxonomyData(prev => ({ ...prev, family: e.target.value }))}\n                            placeholder=\"e.g., Araceae\"\n                            className=\"w-full px-3 py-2 bg-white text-gray-900 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                          />\n                        </div>\n\n                        {/* Genus */}\n                        <div>\n                          <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                            Genus *\n                          </label>\n                          <input\n                            type=\"text\"\n                            value={taxonomyData.genus}\n                            onChange={(e) => setTaxonomyData(prev => ({ ...prev, genus: e.target.value }))}\n                            placeholder=\"e.g., Monstera\"\n                            className=\"w-full px-3 py-2 bg-white text-gray-900 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                          />\n                        </div>\n                      </div>\n\n                      <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                        {/* Species */}\n                        <div>\n                          <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                            Species *\n                          </label>\n                          <input\n                            type=\"text\"\n                            value={taxonomyData.species}\n                            onChange={(e) => setTaxonomyData(prev => ({ ...prev, species: e.target.value }))}\n                            placeholder=\"e.g., deliciosa\"\n                            className=\"w-full px-3 py-2 bg-white text-gray-900 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                          />\n                        </div>\n\n                        {/* Cultivar */}\n                        <div>\n                          <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                            Cultivar (optional)\n                          </label>\n                          <input\n                            type=\"text\"\n                            value={taxonomyData.cultivar}\n                            onChange={(e) => setTaxonomyData(prev => ({ ...prev, cultivar: e.target.value }))}\n                            placeholder=\"e.g., 'Variegata'\"\n                            className=\"w-full px-3 py-2 bg-white text-gray-900 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                          />\n                        </div>\n                      </div>\n\n                      <div className=\"flex justify-end space-x-3 pt-2\">\n                        <button\n                          type=\"button\"\n                          onClick={handleCancelTaxonomyForm}\n                          className=\"px-3 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 focus:ring-2 focus:ring-blue-500\"\n                        >\n                          Cancel\n                        </button>\n                        <button\n                          type=\"button\"\n                          onClick={() => {\n                            const isValid = taxonomyData.family && taxonomyData.genus && taxonomyData.species && taxonomyData.commonName;\n                            if (isValid) {\n                              handleTaxonomySubmit(taxonomyData);\n                            }\n                          }}\n                          disabled={!taxonomyData.family || !taxonomyData.genus || !taxonomyData.species || !taxonomyData.commonName}\n                          className=\"px-3 py-2 text-sm font-medium text-white bg-blue-600 border border-transparent rounded-lg hover:bg-blue-700 focus:ring-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed\"\n                        >\n                          Create Plant Type\n                        </button>\n                      </div>\n                    </div>\n                  </div>\n                )}\n              </div>\n\n              {/* Basic Information */}\n              <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                <div>\n                  <label htmlFor=\"nickname\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Nickname *\n                  </label>\n                  <Controller\n                    name=\"nickname\"\n                    control={control}\n                    render={({ field }) => (\n                      <input\n                        {...field}\n                        id=\"nickname\"\n                        type=\"text\"\n                        placeholder=\"My favorite monstera\"\n                        className={`w-full px-3 py-2 bg-white text-gray-900 placeholder-gray-500 border rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 ${\n                          errors.nickname ? 'border-red-300' : 'border-gray-300'\n                        }`}\n                      />\n                    )}\n                  />\n                  {errors.nickname && (\n                    <p className=\"mt-1 text-sm text-red-600\">{errors.nickname.message}</p>\n                  )}\n                </div>\n\n                <div>\n                  <label htmlFor=\"location\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Location *\n                  </label>\n                  <Controller\n                    name=\"location\"\n                    control={control}\n                    render={({ field }) => (\n                      <div className=\"relative\">\n                        <input\n                          {...field}\n                          id=\"location\"\n                          type=\"text\"\n                          placeholder=\"Living room window\"\n                          className={`w-full px-3 py-2 bg-white text-gray-900 placeholder-gray-500 border rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 ${\n                            errors.location ? 'border-red-300' : 'border-gray-300'\n                          }`}\n                          onChange={(e) => {\n                            field.onChange(e);\n                            setLocationInput(e.target.value);\n                            setShowLocationSuggestions(e.target.value.length > 0);\n                          }}\n                          onFocus={() => setShowLocationSuggestions(field.value.length > 0)}\n                          onBlur={() => setTimeout(() => setShowLocationSuggestions(false), 200)}\n                        />\n                        \n                        {/* Location suggestions dropdown */}\n                        {showLocationSuggestions && userLocations && userLocations.length > 0 && (\n                          <div className=\"absolute z-10 w-full mt-1 bg-white border border-gray-300 rounded-lg shadow-lg max-h-40 overflow-y-auto\">\n                            {userLocations\n                              .filter(location => \n                                location.toLowerCase().includes(field.value.toLowerCase())\n                              )\n                              .slice(0, 5)\n                              .map((location) => (\n                                <button\n                                  key={location}\n                                  type=\"button\"\n                                  onClick={() => {\n                                    field.onChange(location);\n                                    setLocationInput(location);\n                                    setShowLocationSuggestions(false);\n                                  }}\n                                  className=\"w-full px-3 py-2 text-left hover:bg-gray-50 focus:bg-gray-50 focus:outline-none first:rounded-t-lg last:rounded-b-lg\"\n                                >\n                                  <div className=\"flex items-center\">\n                                    <svg className=\"w-4 h-4 text-gray-400 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z\" />\n                                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 11a3 3 0 11-6 0 3 3 0 016 0z\" />\n                                    </svg>\n                                    {location}\n                                  </div>\n                                </button>\n                              ))}\n                            \n                            {/* Common location suggestions */}\n                            {field.value.length > 0 && !userLocations.some(loc => \n                              loc.toLowerCase().includes(field.value.toLowerCase())\n                            ) && (\n                              <div className=\"border-t border-gray-100\">\n                                <div className=\"px-3 py-2 text-xs text-gray-500 font-medium\">Suggestions:</div>\n                                {[\n                                  'Living room window',\n                                  'Kitchen counter',\n                                  'Bedroom windowsill',\n                                  'Bathroom shelf',\n                                  'Office desk',\n                                  'Balcony',\n                                  'Greenhouse',\n                                  'Outdoor garden',\n                                ].filter(suggestion => \n                                  suggestion.toLowerCase().includes(field.value.toLowerCase())\n                                ).slice(0, 3).map((suggestion) => (\n                                  <button\n                                    key={suggestion}\n                                    type=\"button\"\n                                    onClick={() => {\n                                      field.onChange(suggestion);\n                                      setLocationInput(suggestion);\n                                      setShowLocationSuggestions(false);\n                                    }}\n                                    className=\"w-full px-3 py-2 text-left text-gray-600 hover:bg-gray-50 focus:bg-gray-50 focus:outline-none\"\n                                  >\n                                    <div className=\"flex items-center\">\n                                      <svg className=\"w-4 h-4 text-gray-300 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z\" />\n                                      </svg>\n                                      {suggestion}\n                                    </div>\n                                  </button>\n                                ))}\n                              </div>\n                            )}\n                          </div>\n                        )}\n                      </div>\n                    )}\n                  />\n                  {errors.location && (\n                    <p className=\"mt-1 text-sm text-red-600\">{errors.location.message}</p>\n                  )}\n                  \n                  {/* Location tips */}\n                  <p className=\"mt-1 text-xs text-gray-500\">\n                    Be specific about lighting and conditions (e.g., \"South-facing kitchen window\")\n                  </p>\n                </div>\n              </div>\n\n              {/* Care Schedule */}\n              <div>\n                <label htmlFor=\"fertilizerSchedule\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Fertilizer Schedule *\n                </label>\n                <Controller\n                  name=\"fertilizerSchedule\"\n                  control={control}\n                  render={({ field }) => (\n                    <div className=\"space-y-3\">\n                      <select\n                        {...field}\n                        id=\"fertilizerSchedule\"\n                        className={`w-full px-3 py-2 bg-white text-gray-900 border rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 ${\n                          errors.fertilizerSchedule ? 'border-red-300' : 'border-gray-300'\n                        }`}\n                      >\n                        <option value=\"weekly\">Weekly (every 7 days) - High maintenance</option>\n                        <option value=\"biweekly\">Every 2 weeks - Regular care</option>\n                        <option value=\"every_2_4_weeks\">Every 2-4 weeks - Variable schedule</option>\n                        <option value=\"every_3_4_weeks\">Every 3-4 weeks - Moderate care</option>\n                        <option value=\"every_4_weeks\">Every 4 weeks - Standard monthly</option>\n                        <option value=\"every_4_6_weeks\">Every 4-6 weeks - Extended care</option>\n                        <option value=\"every_6_8_weeks\">Every 6-8 weeks - Low maintenance</option>\n                        <option value=\"bimonthly\">Bi-monthly (every 60 days) - Very low maintenance</option>\n                        <option value=\"quarterly\">Quarterly (every 90 days) - Minimal care</option>\n                      </select>\n                      \n                      {/* Schedule preview */}\n                      {field.value && watch('lastFertilized') && (\n                        <div className=\"bg-primary-50 border border-primary-200 rounded-lg p-3\">\n                          <div className=\"flex items-center text-sm\">\n                            <svg className=\"w-4 h-4 text-primary-600 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z\" />\n                            </svg>\n                            <span className=\"text-primary-800\">\n                              {(() => {\n                                const lastFert = new Date(watch('lastFertilized') || '');\n                                const currentSchedule = watch('fertilizerSchedule');\n                                const scheduleMap = {\n                                  weekly: 7,\n                                  biweekly: 14,\n                                  every_2_4_weeks: 21,    // Average of 2-4 weeks\n                                  every_3_4_weeks: 24,    // Average of 3-4 weeks  \n                                  every_4_weeks: 28,      // 4 weeks\n                                  every_4_6_weeks: 35,    // Average of 4-6 weeks\n                                  every_6_8_weeks: 49,    // Average of 6-8 weeks\n                                  bimonthly: 60,\n                                  quarterly: 90\n                                };\n                                const days = scheduleMap[currentSchedule as keyof typeof scheduleMap];\n                                const nextDue = new Date(lastFert);\n                                nextDue.setDate(nextDue.getDate() + days);\n                                return `Next fertilizer due: ${nextDue.toLocaleDateString()}`;\n                              })()}\n                            </span>\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                  )}\n                />\n                {errors.fertilizerSchedule && (\n                  <p className=\"mt-1 text-sm text-red-600\">{errors.fertilizerSchedule.message}</p>\n                )}\n                \n                <p className=\"mt-1 text-xs text-gray-500\">\n                  Choose based on your plant's needs and your availability for care\n                </p>\n              </div>\n\n              {/* Care History */}\n              <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Last Fertilized\n                  </label>\n                  <Controller\n                    name=\"lastFertilized\"\n                    control={control}\n                    render={({ field }) => (\n                      <input\n                        {...field}\n                        type=\"date\"\n                        max={new Date().toISOString().split('T')[0]}\n                        className=\"w-full px-3 py-2 bg-white text-gray-900 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500\"\n                      />\n                    )}\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Last Repotted\n                  </label>\n                  <Controller\n                    name=\"lastRepot\"\n                    control={control}\n                    render={({ field }) => (\n                      <input\n                        {...field}\n                        type=\"date\"\n                        max={new Date().toISOString().split('T')[0]}\n                        className=\"w-full px-3 py-2 bg-white text-gray-900 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500\"\n                      />\n                    )}\n                  />\n                </div>\n              </div>\n\n              {/* Notes & Observations */}\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Notes & Observations\n                </label>\n                \n                {/* Existing Notes History */}\n                {watch('notes') && watch('notes')?.trim() && (\n                  <div className=\"mb-3 p-3 bg-gray-50 border border-gray-200 rounded-lg\">\n                    <h4 className=\"text-sm font-medium text-gray-700 mb-2\">Previous Notes:</h4>\n                    <div className=\"text-sm text-gray-600 whitespace-pre-wrap max-h-32 overflow-y-auto\">\n                      {watch('notes')}\n                    </div>\n                  </div>\n                )}\n                \n                {/* New Note Input */}\n                <div className=\"space-y-2\">\n                  <textarea\n                    value={newNoteInput}\n                    onChange={(e) => setNewNoteInput(e.target.value)}\n                    rows={3}\n                    placeholder=\"Add a new observation or note...\"\n                    className=\"w-full px-3 py-2 bg-white text-gray-900 placeholder-gray-500 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 resize-none\"\n                    onKeyDown={(e) => {\n                      if (e.key === 'Enter' && (e.metaKey || e.ctrlKey)) {\n                        e.preventDefault();\n                        const newNote = newNoteInput.trim();\n                        if (newNote) {\n                          const timestamp = new Date().toLocaleDateString();\n                          const existingNotes = watch('notes') || '';\n                          const updatedNotes = existingNotes \n                            ? `${existingNotes}\\n\\n[${timestamp}] ${newNote}`\n                            : `[${timestamp}] ${newNote}`;\n                          setValue('notes', updatedNotes);\n                          setNewNoteInput(''); // Clear the input\n                        }\n                      }\n                    }}\n                  />\n                  <div className=\"flex justify-between items-center\">\n                    <p className=\"text-xs text-gray-500\">\n                      Press Cmd/Ctrl + Enter to add note\n                    </p>\n                    <button\n                      type=\"button\"\n                      onClick={() => {\n                        const newNote = newNoteInput.trim();\n                        if (newNote) {\n                          const timestamp = new Date().toLocaleDateString();\n                          const existingNotes = watch('notes') || '';\n                          const updatedNotes = existingNotes \n                            ? `${existingNotes}\\n\\n[${timestamp}] ${newNote}`\n                            : `[${timestamp}] ${newNote}`;\n                          setValue('notes', updatedNotes);\n                          setNewNoteInput(''); // Clear the input\n                        }\n                      }}\n                      disabled={!newNoteInput.trim()}\n                      className=\"px-3 py-1 text-sm bg-primary-600 text-white rounded hover:bg-primary-700 disabled:opacity-50 disabled:cursor-not-allowed\"\n                    >\n                      Add Note\n                    </button>\n                  </div>\n                </div>\n                \n                {/* Hidden field for form submission */}\n                <Controller\n                  name=\"notes\"\n                  control={control}\n                  render={({ field }) => (\n                    <input type=\"hidden\" {...field} />\n                  )}\n                />\n                \n                {errors.notes && (\n                  <p className=\"mt-1 text-sm text-red-600\">{errors.notes.message}</p>\n                )}\n              </div>\n\n              {/* Images */}\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Photos\n                </label>\n                \n                {/* Existing Images */}\n                {existingImages.length > 0 && (\n                  <div className=\"mb-4\">\n                    <h4 className=\"text-sm font-medium text-gray-600 mb-2\">Current Photos</h4>\n                    <div className=\"grid grid-cols-3 sm:grid-cols-4 gap-2\">\n                      {existingImages.map((image, index) => (\n                        <div key={index} className=\"relative group\">\n                          <img\n                            src={image}\n                            alt={`Plant photo ${index + 1}`}\n                            className=\"w-full aspect-square object-cover rounded-lg\"\n                          />\n                          \n                          {/* Delete Button */}\n                          <button\n                            type=\"button\"\n                            onClick={() => handleRemoveExistingImage(index)}\n                            className=\"absolute top-1 right-1 p-1 bg-red-500 text-white rounded-full opacity-0 group-hover:opacity-100 transition-opacity\"\n                            title=\"Remove image\"\n                            aria-label={`Remove image ${index + 1}`}\n                          >\n                            <svg className=\"w-3 h-3\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                              <path fillRule=\"evenodd\" d=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\" clipRule=\"evenodd\" />\n                            </svg>\n                          </button>\n                          \n                          {/* Primary Badge */}\n                          {index === 0 && (\n                            <div className=\"absolute bottom-1 left-1 bg-primary-500 text-white text-xs px-1 py-0.5 rounded\">\n                              Primary\n                            </div>\n                          )}\n                          \n                          {/* Set as Primary Button (for non-primary images) */}\n                          {index !== 0 && (\n                            <button\n                              type=\"button\"\n                              onClick={() => handleSetPrimaryImage(index)}\n                              className=\"absolute bottom-1 left-1 bg-black bg-opacity-50 text-white text-xs px-1 py-0.5 rounded opacity-0 group-hover:opacity-100 transition-opacity\"\n                              title=\"Set as primary image\"\n                              aria-label={`Set image ${index + 1} as primary`}\n                            >\n                              Set Primary\n                            </button>\n                          )}\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                )}\n\n                {/* New Image Upload */}\n                <ImageUpload\n                  onImagesChange={handleImageChange}\n                  maxImages={6 - existingImages.length}\n                  acceptedTypes={['image/jpeg', 'image/png', 'image/webp']}\n                  maxSizePerImage={5 * 1024 * 1024} // 5MB\n                />\n              </div>\n\n              {/* Active Status (for editing) */}\n              {isEditing && (\n                <div className=\"bg-gray-50 border border-gray-200 rounded-lg p-4\">\n                  <h4 className=\"text-sm font-medium text-gray-900 mb-3\">Plant Status</h4>\n                  <Controller\n                    name=\"isActive\"\n                    control={control}\n                    render={({ field: { value, onChange } }) => (\n                      <div className=\"space-y-3\">\n                        <label className=\"flex items-start cursor-pointer\">\n                          <input\n                            type=\"checkbox\"\n                            checked={value}\n                            onChange={onChange}\n                            className=\"w-4 h-4 text-primary-600 border-gray-300 rounded focus:ring-primary-500 mt-0.5\"\n                          />\n                          <div className=\"ml-3\">\n                            <span className=\"text-sm font-medium text-gray-700\">\n                              Keep this plant active in my collection\n                            </span>\n                            <p className=\"text-xs text-gray-500 mt-1\">\n                              {value \n                                ? 'This plant will appear in your main collection and care reminders'\n                                : 'This plant will be archived and hidden from your main collection'\n                              }\n                            </p>\n                          </div>\n                        </label>\n                        \n                        {!value && (\n                          <div className=\"bg-amber-50 border border-amber-200 rounded p-3\">\n                            <div className=\"flex items-start\">\n                              <svg className=\"w-4 h-4 text-amber-600 mt-0.5 mr-2 flex-shrink-0\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                                <path fillRule=\"evenodd\" d=\"M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z\" clipRule=\"evenodd\" />\n                              </svg>\n                              <div className=\"text-xs text-amber-800\">\n                                <p className=\"font-medium\">Archiving this plant</p>\n                                <p>Care history will be preserved, but the plant won't appear in your active collection or receive care reminders.</p>\n                              </div>\n                            </div>\n                          </div>\n                        )}\n                      </div>\n                    )}\n                  />\n                </div>\n              )}\n            </div>\n\n            {/* Validation Summary */}\n            {Object.keys(errors).length > 0 && (\n              <div className=\"mx-6 mb-4 bg-red-50 border border-red-200 rounded-lg p-4\">\n                <div className=\"flex items-start\">\n                  <svg className=\"w-5 h-5 text-red-400 mt-0.5 mr-3 flex-shrink-0\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                    <path fillRule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z\" clipRule=\"evenodd\" />\n                  </svg>\n                  <div className=\"flex-1\">\n                    <h4 className=\"text-sm font-medium text-red-800 mb-2\">Please fix the following errors:</h4>\n                    <ul className=\"text-sm text-red-700 space-y-1\">\n                      {Object.entries(errors).map(([field, error]) => (\n                        <li key={field}>\n                          • {field === 'plantId' ? 'Plant type' : \n                             field === 'fertilizerSchedule' ? 'Fertilizer schedule' :\n                             field.charAt(0).toUpperCase() + field.slice(1)}: {error.message}\n                        </li>\n                      ))}\n                    </ul>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {/* Footer */}\n            <div className=\"flex items-center justify-between p-6 border-t border-gray-200 bg-gray-50\">\n              <div className=\"flex items-center text-sm text-gray-500\">\n                {!isValid && Object.keys(errors).length === 0 && (\n                  <span>Fill in required fields to continue</span>\n                )}\n                {isValid && (\n                  <span className=\"text-green-600 flex items-center\">\n                    <svg className=\"w-4 h-4 mr-1\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                      <path fillRule=\"evenodd\" d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\" clipRule=\"evenodd\" />\n                    </svg>\n                    Ready to save\n                  </span>\n                )}\n              </div>\n              \n              <div className=\"flex space-x-3\">\n                <button\n                  type=\"button\"\n                  onClick={handleClose}\n                  disabled={mutation.isPending}\n                  className=\"px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 focus:ring-2 focus:ring-primary-500 disabled:opacity-50 transition-colors\"\n                >\n                  Cancel\n                </button>\n                <button\n                  type=\"submit\"\n                  disabled={mutation.isPending || (!selectedPlant && !isEditing)}\n                  className=\"px-4 py-2 text-sm font-medium text-white bg-primary-600 border border-transparent rounded-lg hover:bg-primary-700 focus:ring-2 focus:ring-primary-500 disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\n                >\n                  {mutation.isPending ? (\n                    <span className=\"flex items-center\">\n                      <svg className=\"animate-spin -ml-1 mr-2 h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\">\n                        <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\" />\n                        <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\" />\n                      </svg>\n                      {isEditing ? 'Updating...' : 'Adding...'}\n                    </span>\n                  ) : (\n                    isEditing ? 'Update Plant' : 'Add Plant'\n                  )}\n                </button>\n              </div>\n            </div>\n          </form>\n\n          {/* Error Display */}\n          {mutation.isError && (\n            <div className=\"p-4 bg-red-50 border-t border-red-200\">\n              <p className=\"text-sm text-red-600\">\n                {mutation.error instanceof Error ? mutation.error.message : 'An error occurred'}\n              </p>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}"],"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","ignoreList":[]}