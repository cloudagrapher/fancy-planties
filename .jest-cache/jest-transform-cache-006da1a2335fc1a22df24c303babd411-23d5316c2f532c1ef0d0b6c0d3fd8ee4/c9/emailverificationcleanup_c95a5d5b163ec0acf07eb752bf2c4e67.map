{"version":3,"sources":["/Users/stefanbekker/projects/fancy-planties/src/lib/services/email-verification-cleanup.ts"],"sourcesContent":["import 'server-only';\nimport { emailVerificationCodeService } from './email-verification-code-service';\nimport { emailVerificationRateLimiter } from './email-verification-rate-limiter';\nimport { emailServiceMonitor } from './email-service-monitor';\n\nexport interface CleanupStats {\n  expiredCodes: number;\n  rateLimitData: number;\n  timestamp: number;\n}\n\nexport class EmailVerificationCleanupService {\n  private isRunning = false;\n  private lastCleanup = 0;\n  private cleanupStats: CleanupStats[] = [];\n  \n  /**\n   * Run cleanup of expired verification codes and rate limit data\n   */\n  async runCleanup(): Promise<CleanupStats> {\n    if (this.isRunning) {\n      throw new Error('Cleanup is already running');\n    }\n    \n    this.isRunning = true;\n    const startTime = Date.now();\n    \n    try {\n      console.log('[CLEANUP] Starting email verification cleanup...');\n      \n      // Clean up expired verification codes\n      const expiredCodes = await emailVerificationCodeService.cleanupExpiredCodes();\n      console.log(`[CLEANUP] Removed ${expiredCodes} expired verification codes`);\n      \n      // Clean up rate limit data\n      const rateLimitStatsBefore = emailVerificationRateLimiter.getStats();\n      emailVerificationRateLimiter.cleanup();\n      const rateLimitStatsAfter = emailVerificationRateLimiter.getStats();\n      \n      const rateLimitDataCleaned = \n        (rateLimitStatsBefore.verificationAttempts - rateLimitStatsAfter.verificationAttempts) +\n        (rateLimitStatsBefore.resendRequests - rateLimitStatsAfter.resendRequests) +\n        (rateLimitStatsBefore.emailVerificationActivity - rateLimitStatsAfter.emailVerificationActivity) +\n        (rateLimitStatsBefore.resendCooldowns - rateLimitStatsAfter.resendCooldowns);\n      \n      console.log(`[CLEANUP] Cleaned up ${rateLimitDataCleaned} rate limit entries`);\n      \n      const stats: CleanupStats = {\n        expiredCodes,\n        rateLimitData: rateLimitDataCleaned,\n        timestamp: startTime,\n      };\n      \n      // Store cleanup stats (keep last 24 entries)\n      this.cleanupStats.push(stats);\n      if (this.cleanupStats.length > 24) {\n        this.cleanupStats.shift();\n      }\n      \n      this.lastCleanup = startTime;\n      \n      const duration = Date.now() - startTime;\n      console.log(`[CLEANUP] Email verification cleanup completed in ${duration}ms`);\n      \n      return stats;\n      \n    } catch (error) {\n      console.error('[CLEANUP] Email verification cleanup failed:', error);\n      throw error;\n    } finally {\n      this.isRunning = false;\n    }\n  }\n  \n  /**\n   * Schedule automatic cleanup to run periodically\n   */\n  scheduleCleanup(intervalMs: number = 60 * 60 * 1000): void { // Default: 1 hour\n    console.log(`[CLEANUP] Scheduling email verification cleanup every ${intervalMs / 1000} seconds`);\n    \n    const runScheduledCleanup = async () => {\n      try {\n        await this.runCleanup();\n      } catch (error) {\n        console.error('[CLEANUP] Scheduled cleanup failed:', error);\n      }\n    };\n    \n    // Run initial cleanup after a short delay\n    setTimeout(runScheduledCleanup, 5000); // 5 seconds\n    \n    // Then run periodically\n    setInterval(runScheduledCleanup, intervalMs);\n  }\n  \n  /**\n   * Run startup cleanup to clean any leftover data\n   */\n  async runStartupCleanup(): Promise<CleanupStats> {\n    console.log('[CLEANUP] Running startup cleanup...');\n    \n    try {\n      const stats = await this.runCleanup();\n      console.log('[CLEANUP] Startup cleanup completed successfully');\n      return stats;\n    } catch (error) {\n      console.error('[CLEANUP] Startup cleanup failed:', error);\n      throw error;\n    }\n  }\n  \n  /**\n   * Get cleanup statistics\n   */\n  getCleanupStats(): {\n    lastCleanup: number;\n    isRunning: boolean;\n    recentStats: CleanupStats[];\n    totalExpiredCodes: number;\n    totalRateLimitData: number;\n  } {\n    const totalExpiredCodes = this.cleanupStats.reduce((sum, stat) => sum + stat.expiredCodes, 0);\n    const totalRateLimitData = this.cleanupStats.reduce((sum, stat) => sum + stat.rateLimitData, 0);\n    \n    return {\n      lastCleanup: this.lastCleanup,\n      isRunning: this.isRunning,\n      recentStats: [...this.cleanupStats],\n      totalExpiredCodes,\n      totalRateLimitData,\n    };\n  }\n  \n  /**\n   * Get current system status\n   */\n  async getSystemStatus(): Promise<{\n    verificationCodes: {\n      totalActive: number;\n      expiredCount: number;\n      highAttemptCount: number;\n    };\n    rateLimits: {\n      verificationAttempts: number;\n      resendRequests: number;\n      emailVerificationActivity: number;\n      resendCooldowns: number;\n      securityEvents: number;\n    };\n    cleanup: {\n      lastCleanup: number;\n      isRunning: boolean;\n      nextCleanupDue: number;\n    };\n  }> {\n    const codeStats = await emailVerificationCodeService.getCodeStats();\n    const rateLimitStats = emailVerificationRateLimiter.getStats();\n    const cleanupStats = this.getCleanupStats();\n    \n    // Estimate next cleanup time (assuming hourly cleanup)\n    const nextCleanupDue = cleanupStats.lastCleanup + (60 * 60 * 1000);\n    \n    return {\n      verificationCodes: codeStats,\n      rateLimits: rateLimitStats,\n      cleanup: {\n        lastCleanup: cleanupStats.lastCleanup,\n        isRunning: cleanupStats.isRunning,\n        nextCleanupDue,\n      },\n    };\n  }\n  \n  /**\n   * Force cleanup if needed (for manual triggers)\n   */\n  async forceCleanup(): Promise<CleanupStats> {\n    if (this.isRunning) {\n      throw new Error('Cleanup is already running. Please wait for it to complete.');\n    }\n    \n    console.log('[CLEANUP] Force cleanup requested');\n    return await this.runCleanup();\n  }\n}\n\n// Export singleton instance\nexport const emailVerificationCleanupService = new EmailVerificationCleanupService();\n\n// Auto-schedule cleanup when this module is imported\nif (process.env.NODE_ENV === 'production') {\n  // In production, start cleanup automatically\n  emailVerificationCleanupService.scheduleCleanup();\n} else {\n  // In development, run less frequently to avoid noise\n  emailVerificationCleanupService.scheduleCleanup(2 * 60 * 60 * 1000); // 2 hours\n}"],"names":["EmailVerificationCleanupService","emailVerificationCleanupService","runCleanup","isRunning","Error","startTime","Date","now","console","log","expiredCodes","emailVerificationCodeService","cleanupExpiredCodes","rateLimitStatsBefore","emailVerificationRateLimiter","getStats","cleanup","rateLimitStatsAfter","rateLimitDataCleaned","verificationAttempts","resendRequests","emailVerificationActivity","resendCooldowns","stats","rateLimitData","timestamp","cleanupStats","push","length","shift","lastCleanup","duration","error","scheduleCleanup","intervalMs","runScheduledCleanup","setTimeout","setInterval","runStartupCleanup","getCleanupStats","totalExpiredCodes","reduce","sum","stat","totalRateLimitData","recentStats","getSystemStatus","codeStats","getCodeStats","rateLimitStats","nextCleanupDue","verificationCodes","rateLimits","forceCleanup","process","env","NODE_ENV"],"mappings":"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"}