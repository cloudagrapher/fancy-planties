{"version":3,"sources":["/Users/stefanbekker/projects/fancy-planties/src/__tests__/integration/email-verification-flow.test.ts"],"sourcesContent":["/**\n * Email Verification Flow Integration Tests\n * Tests complete signup and verification process, resend functionality, and rate limiting\n * Requirements: 1.1, 1.4, 2.1, 2.2\n */\n\nimport { createDatabaseTestManager } from '@/test-utils/setup/database-test-manager';\nimport { createTestUser } from '@/test-utils/factories/user-factory';\nimport { emailVerificationCodeService } from '@/lib/services/email-verification-code-service';\nimport { createEmailService } from '@/lib/services/resend-email-service';\n\n// Mock email service\njest.mock('@/lib/services/resend-email-service');\njest.mock('@/lib/services/email-service');\n\nconst mockEmailService = {\n  sendVerificationEmail: jest.fn(),\n};\n\nconst mockCreateEmailService = createEmailService as jest.MockedFunction<typeof createEmailService>;\nconst mockSendEmailWithRetry = require('@/lib/services/email-service').sendEmailWithRetry as jest.MockedFunction<any>;\n\n// Mock environment variables\nconst originalEnv = process.env;\n\nbeforeAll(() => {\n  process.env = {\n    ...originalEnv,\n    RESEND_API_KEY: 'test-api-key',\n    FROM_EMAIL: 'test@example.com',\n    FROM_NAME: 'Test App',\n    VERIFICATION_CODE_EXPIRY_MINUTES: '10',\n    MAX_VERIFICATION_ATTEMPTS: '5',\n    RESEND_COOLDOWN_SECONDS: '60',\n    MAX_RESEND_PER_HOUR: '5',\n    NODE_ENV: 'test',\n  };\n});\n\nafterAll(() => {\n  process.env = originalEnv;\n});\n\ndescribe('Email Verification Flow Integration Tests', () => {\n  let dbManager: any;\n\n  beforeEach(async () => {\n    jest.clearAllMocks();\n    dbManager = createDatabaseTestManager();\n    \n    // Mock email service to always succeed\n    mockCreateEmailService.mockReturnValue(mockEmailService);\n    mockSendEmailWithRetry.mockResolvedValue(true);\n    mockEmailService.sendVerificationEmail.mockResolvedValue(true);\n  });\n\n  afterEach(async () => {\n    await dbManager.cleanup();\n  });\n\n  describe('Complete Signup and Verification Process', () => {\n    it('should complete full signup and verification workflow', async () => {\n      // Step 1: Create user and verification code directly\n      const user = await dbManager.createTestUser({\n        email: 'test@example.com',\n        name: 'Test User',\n        passwordHash: 'hashed_password',\n        isEmailVerified: false,\n      });\n\n      // Step 2: Generate verification code\n      const verificationCode = await emailVerificationCodeService.generateCode(user.id);\n      expect(verificationCode).toMatch(/^\\d{6}$/);\n\n      // Step 3: Verify the code was stored in database\n      const emailCodes = await dbManager.getEmailCodesByUserId(user.id);\n      expect(emailCodes).toHaveLength(1);\n      expect(emailCodes[0].code).toBe(verificationCode);\n\n      // Step 4: Validate the verification code\n      const isValid = await emailVerificationCodeService.validateCode('test@example.com', verificationCode);\n      expect(isValid).toBe(true);\n\n      // Step 5: Verify user is now verified in database\n      const verifiedUser = await dbManager.getUserById(user.id);\n      expect(verifiedUser.isEmailVerified).toBe(true);\n\n      // Step 6: Verify verification code was deleted\n      const remainingCodes = await dbManager.getEmailCodesByUserId(user.id);\n      expect(remainingCodes).toHaveLength(0);\n    });\n\n    it('should handle email service failure gracefully during code generation', async () => {\n      // Create user\n      const user = await dbManager.createTestUser({\n        email: 'test@example.com',\n        name: 'Test User',\n        passwordHash: 'hashed_password',\n        isEmailVerified: false,\n      });\n\n      // Generate verification code (this should work even if email fails)\n      const verificationCode = await emailVerificationCodeService.generateCode(user.id);\n      expect(verificationCode).toMatch(/^\\d{6}$/);\n\n      // Verify code was stored in database\n      const emailCodes = await dbManager.getEmailCodesByUserId(user.id);\n      expect(emailCodes).toHaveLength(1);\n      expect(emailCodes[0].code).toBe(verificationCode);\n\n      // User should still be unverified\n      const unverifiedUser = await dbManager.getUserById(user.id);\n      expect(unverifiedUser.isEmailVerified).toBe(false);\n    });\n\n    it('should reject verification with invalid code', async () => {\n      // Create user and verification code\n      const user = await dbManager.createTestUser({\n        email: 'test@example.com',\n        name: 'Test User',\n        passwordHash: 'hashed_password',\n        isEmailVerified: false,\n      });\n\n      await dbManager.createTestEmailCode({\n        userId: user.id,\n        code: '123456',\n        expiresAt: new Date(Date.now() + 10 * 60 * 1000), // 10 minutes from now\n        attemptsUsed: 0,\n      });\n\n      // Try to verify with wrong code using service directly\n      try {\n        await emailVerificationCodeService.validateCode('test@example.com', '654321');\n        fail('Should have thrown an error for invalid code');\n      } catch (error: any) {\n        expect(error.code).toBe('CODE_INVALID');\n      }\n\n      // Verify user is still not verified\n      const unverifiedUser = await dbManager.getUserById(user.id);\n      expect(unverifiedUser.isEmailVerified).toBe(false);\n    });\n\n    it('should reject verification with expired code', async () => {\n      // Create user and expired verification code\n      const user = await dbManager.createTestUser({\n        email: 'test@example.com',\n        name: 'Test User',\n        passwordHash: 'hashed_password',\n        isEmailVerified: false,\n      });\n\n      await dbManager.createTestEmailCode({\n        userId: user.id,\n        code: '123456',\n        expiresAt: new Date(Date.now() - 1000), // Expired 1 second ago\n        attemptsUsed: 0,\n      });\n\n      // Try to verify with expired code using service directly\n      try {\n        await emailVerificationCodeService.validateCode('test@example.com', '123456');\n        fail('Should have thrown an error for expired code');\n      } catch (error: any) {\n        expect(error.code).toBe('CODE_EXPIRED');\n      }\n\n      // Verify user is still not verified\n      const unverifiedUser = await dbManager.getUserById(user.id);\n      expect(unverifiedUser.isEmailVerified).toBe(false);\n    });\n  });\n\n  describe('Resend Verification Code Functionality', () => {\n    it('should resend verification code with proper cooldown behavior', async () => {\n      // Create unverified user\n      const user = await dbManager.createTestUser({\n        email: 'test@example.com',\n        name: 'Test User',\n        passwordHash: 'hashed_password',\n        isEmailVerified: false,\n      });\n\n      // Create existing verification code\n      await dbManager.createTestEmailCode({\n        userId: user.id,\n        code: '123456',\n        expiresAt: new Date(Date.now() + 10 * 60 * 1000),\n        attemptsUsed: 0,\n      });\n\n      // First resend request\n      const resendRequest1 = new NextRequest('http://localhost/api/auth/resend-verification', {\n        method: 'POST',\n        body: JSON.stringify({\n          email: 'test@example.com',\n        }),\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      const resendResponse1 = await resendVerificationHandler(resendRequest1);\n      const resendData1 = await resendResponse1.json();\n\n      // Assert first resend success\n      expect(resendResponse1.status).toBe(200);\n      expect(resendData1.success).toBe(true);\n      expect(resendData1.message).toContain('Verification code sent successfully');\n      expect(resendData1.cooldownSeconds).toBe(60);\n\n      // Verify new code was generated (old one should be invalidated)\n      const emailCodes = await dbManager.getEmailCodesByUserId(user.id);\n      expect(emailCodes).toHaveLength(1);\n      expect(emailCodes[0].code).not.toBe('123456'); // Should be a new code\n\n      // Verify email was sent\n      expect(mockSendEmailWithRetry).toHaveBeenCalledWith(\n        mockEmailService,\n        'test@example.com',\n        expect.stringMatching(/^\\d{6}$/),\n        'Test User'\n      );\n    });\n\n    it('should handle resend for already verified user', async () => {\n      // Create verified user\n      const user = await dbManager.createTestUser({\n        email: 'test@example.com',\n        name: 'Test User',\n        passwordHash: 'hashed_password',\n        isEmailVerified: true, // Already verified\n      });\n\n      const resendRequest = new NextRequest('http://localhost/api/auth/resend-verification', {\n        method: 'POST',\n        body: JSON.stringify({\n          email: 'test@example.com',\n        }),\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      const resendResponse = await resendVerificationHandler(resendRequest);\n      const resendData = await resendResponse.json();\n\n      // Assert appropriate response for already verified user\n      expect(resendResponse.status).toBe(400);\n      expect(resendData.error).toContain('Email is already verified');\n      expect(resendData.redirectTo).toBe('/auth/signin');\n\n      // Verify no email was sent\n      expect(mockSendEmailWithRetry).not.toHaveBeenCalled();\n    });\n\n    it('should handle resend for non-existent user', async () => {\n      const resendRequest = new NextRequest('http://localhost/api/auth/resend-verification', {\n        method: 'POST',\n        body: JSON.stringify({\n          email: 'nonexistent@example.com',\n        }),\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      const resendResponse = await resendVerificationHandler(resendRequest);\n      const resendData = await resendResponse.json();\n\n      // Assert user not found error\n      expect(resendResponse.status).toBe(404);\n      expect(resendData.error).toContain('User not found');\n\n      // Verify no email was sent\n      expect(mockSendEmailWithRetry).not.toHaveBeenCalled();\n    });\n  });\n\n  describe('Rate Limiting Enforcement', () => {\n    it('should enforce verification attempt limits', async () => {\n      // Create user and verification code\n      const user = await dbManager.createTestUser({\n        email: 'test@example.com',\n        name: 'Test User',\n        passwordHash: 'hashed_password',\n        isEmailVerified: false,\n      });\n\n      const emailCode = await dbManager.createTestEmailCode({\n        userId: user.id,\n        code: '123456',\n        expiresAt: new Date(Date.now() + 10 * 60 * 1000),\n        attemptsUsed: 4, // Already at 4 attempts (limit is 5)\n      });\n\n      // Make one more attempt (should still work)\n      const verifyRequest1 = new NextRequest('http://localhost/api/auth/verify-email', {\n        method: 'POST',\n        body: JSON.stringify({\n          email: 'test@example.com',\n          code: '654321', // Wrong code\n        }),\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      const verifyResponse1 = await verifyEmailHandler(verifyRequest1);\n      expect(verifyResponse1.status).toBe(400);\n\n      // Make another attempt (should be rate limited)\n      const verifyRequest2 = new NextRequest('http://localhost/api/auth/verify-email', {\n        method: 'POST',\n        body: JSON.stringify({\n          email: 'test@example.com',\n          code: '654321', // Wrong code\n        }),\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      const verifyResponse2 = await verifyEmailHandler(verifyRequest2);\n      const verifyData2 = await verifyResponse2.json();\n\n      // Assert rate limiting\n      expect(verifyResponse2.status).toBe(429);\n      expect(verifyData2.error).toContain('Too many verification attempts');\n    });\n\n    it('should handle validation errors properly', async () => {\n      // Test invalid email format\n      const verifyRequest1 = new NextRequest('http://localhost/api/auth/verify-email', {\n        method: 'POST',\n        body: JSON.stringify({\n          email: 'invalid-email',\n          code: '123456',\n        }),\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      const verifyResponse1 = await verifyEmailHandler(verifyRequest1);\n      const verifyData1 = await verifyResponse1.json();\n\n      expect(verifyResponse1.status).toBe(400);\n      expect(verifyData1.error).toBe('Validation failed');\n      expect(verifyData1.details).toEqual(\n        expect.arrayContaining([\n          expect.objectContaining({\n            field: 'email',\n            message: 'Invalid email address',\n          }),\n        ])\n      );\n\n      // Test invalid code format\n      const verifyRequest2 = new NextRequest('http://localhost/api/auth/verify-email', {\n        method: 'POST',\n        body: JSON.stringify({\n          email: 'test@example.com',\n          code: '12345', // Too short\n        }),\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      const verifyResponse2 = await verifyEmailHandler(verifyRequest2);\n      const verifyData2 = await verifyResponse2.json();\n\n      expect(verifyResponse2.status).toBe(400);\n      expect(verifyData2.error).toBe('Validation failed');\n      expect(verifyData2.details).toEqual(\n        expect.arrayContaining([\n          expect.objectContaining({\n            field: 'code',\n            message: 'Verification code must be 6 digits',\n          }),\n        ])\n      );\n\n      // Test non-numeric code\n      const verifyRequest3 = new NextRequest('http://localhost/api/auth/verify-email', {\n        method: 'POST',\n        body: JSON.stringify({\n          email: 'test@example.com',\n          code: 'ABCDEF', // Non-numeric\n        }),\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      const verifyResponse3 = await verifyEmailHandler(verifyRequest3);\n      const verifyData3 = await verifyResponse3.json();\n\n      expect(verifyResponse3.status).toBe(400);\n      expect(verifyData3.error).toBe('Validation failed');\n      expect(verifyData3.details).toEqual(\n        expect.arrayContaining([\n          expect.objectContaining({\n            field: 'code',\n            message: 'Verification code must contain only digits',\n          }),\n        ])\n      );\n    });\n  });\n\n  describe('Edge Cases and Error Scenarios', () => {\n    it('should handle duplicate signup attempts', async () => {\n      // First signup\n      const signupRequest1 = new NextRequest('http://localhost/api/auth/signup', {\n        method: 'POST',\n        body: JSON.stringify({\n          email: 'test@example.com',\n          password: 'SecurePass123!',\n          name: 'Test User',\n        }),\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      const signupResponse1 = await signupHandler(signupRequest1);\n      expect(signupResponse1.status).toBe(200);\n\n      // Second signup with same email\n      const signupRequest2 = new NextRequest('http://localhost/api/auth/signup', {\n        method: 'POST',\n        body: JSON.stringify({\n          email: 'test@example.com',\n          password: 'AnotherPass123!',\n          name: 'Another User',\n        }),\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      const signupResponse2 = await signupHandler(signupRequest2);\n      const signupData2 = await signupResponse2.json();\n\n      // Assert duplicate email error\n      expect(signupResponse2.status).toBe(409);\n      expect(signupData2.error).toContain('already exists');\n    });\n\n    it('should handle malformed request bodies', async () => {\n      // Test with invalid JSON\n      const verifyRequest = new NextRequest('http://localhost/api/auth/verify-email', {\n        method: 'POST',\n        body: 'invalid json',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      const verifyResponse = await verifyEmailHandler(verifyRequest);\n      const verifyData = await verifyResponse.json();\n\n      expect(verifyResponse.status).toBe(500);\n      expect(verifyData.error).toBe('Internal server error');\n    });\n\n    it('should handle missing request body fields', async () => {\n      // Test with missing email\n      const verifyRequest1 = new NextRequest('http://localhost/api/auth/verify-email', {\n        method: 'POST',\n        body: JSON.stringify({\n          code: '123456',\n        }),\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      const verifyResponse1 = await verifyEmailHandler(verifyRequest1);\n      const verifyData1 = await verifyResponse1.json();\n\n      expect(verifyResponse1.status).toBe(400);\n      expect(verifyData1.error).toBe('Validation failed');\n\n      // Test with missing code\n      const verifyRequest2 = new NextRequest('http://localhost/api/auth/verify-email', {\n        method: 'POST',\n        body: JSON.stringify({\n          email: 'test@example.com',\n        }),\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      const verifyResponse2 = await verifyEmailHandler(verifyRequest2);\n      const verifyData2 = await verifyResponse2.json();\n\n      expect(verifyResponse2.status).toBe(400);\n      expect(verifyData2.error).toBe('Validation failed');\n    });\n  });\n});"],"names":["jest","mock","mockEmailService","sendVerificationEmail","fn","mockCreateEmailService","createEmailService","mockSendEmailWithRetry","require","sendEmailWithRetry","originalEnv","process","env","beforeAll","RESEND_API_KEY","FROM_EMAIL","FROM_NAME","VERIFICATION_CODE_EXPIRY_MINUTES","MAX_VERIFICATION_ATTEMPTS","RESEND_COOLDOWN_SECONDS","MAX_RESEND_PER_HOUR","NODE_ENV","afterAll","describe","dbManager","beforeEach","clearAllMocks","createDatabaseTestManager","mockReturnValue","mockResolvedValue","afterEach","cleanup","it","user","createTestUser","email","name","passwordHash","isEmailVerified","verificationCode","emailVerificationCodeService","generateCode","id","expect","toMatch","emailCodes","getEmailCodesByUserId","toHaveLength","code","toBe","isValid","validateCode","verifiedUser","getUserById","remainingCodes","unverifiedUser","createTestEmailCode","userId","expiresAt","Date","now","attemptsUsed","fail","error","resendRequest1","NextRequest","method","body","JSON","stringify","headers","resendResponse1","resendVerificationHandler","resendData1","json","status","success","message","toContain","cooldownSeconds","not","toHaveBeenCalledWith","stringMatching","resendRequest","resendResponse","resendData","redirectTo","toHaveBeenCalled","emailCode","verifyRequest1","verifyResponse1","verifyEmailHandler","verifyRequest2","verifyResponse2","verifyData2","verifyData1","details","toEqual","arrayContaining","objectContaining","field","verifyRequest3","verifyResponse3","verifyData3","signupRequest1","password","signupResponse1","signupHandler","signupRequest2","signupResponse2","signupData2","verifyRequest","verifyResponse","verifyData"],"mappings":"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"}