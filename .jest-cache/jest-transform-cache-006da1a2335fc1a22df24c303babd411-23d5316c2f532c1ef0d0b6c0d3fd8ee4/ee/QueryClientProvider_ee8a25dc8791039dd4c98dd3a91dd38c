09c9e58a77380a93c91476fd862ba248
'use client';
"use strict";

/* istanbul ignore next */
function cov_n2izc7p9s() {
  var path = "/Users/stefanbekker/projects/fancy-planties/src/components/providers/QueryClientProvider.tsx";
  var hash = "0c41a5d30bb722761e2e5fd36f9cddf3972b3758";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/stefanbekker/projects/fancy-planties/src/components/providers/QueryClientProvider.tsx",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 5,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 11,
          column: 3
        }
      },
      "2": {
        start: {
          line: 9,
          column: 8
        },
        end: {
          line: 9,
          column: 35
        }
      },
      "3": {
        start: {
          line: 12,
          column: 20
        },
        end: {
          line: 12,
          column: 48
        }
      },
      "4": {
        start: {
          line: 13,
          column: 20
        },
        end: {
          line: 13,
          column: 52
        }
      },
      "5": {
        start: {
          line: 14,
          column: 15
        },
        end: {
          line: 14,
          column: 31
        }
      },
      "6": {
        start: {
          line: 16,
          column: 26
        },
        end: {
          line: 28,
          column: 11
        }
      },
      "7": {
        start: {
          line: 16,
          column: 51
        },
        end: {
          line: 28,
          column: 10
        }
      },
      "8": {
        start: {
          line: 29,
          column: 4
        },
        end: {
          line: 32,
          column: 7
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 8,
            column: 9
          },
          end: {
            line: 8,
            column: 10
          }
        },
        loc: {
          start: {
            line: 8,
            column: 20
          },
          end: {
            line: 10,
            column: 5
          }
        },
        line: 8
      },
      "1": {
        name: "QueryClientProvider",
        decl: {
          start: {
            line: 15,
            column: 9
          },
          end: {
            line: 15,
            column: 28
          }
        },
        loc: {
          start: {
            line: 15,
            column: 43
          },
          end: {
            line: 33,
            column: 1
          }
        },
        line: 15
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 16,
            column: 47
          },
          end: {
            line: 16,
            column: 48
          }
        },
        loc: {
          start: {
            line: 16,
            column: 51
          },
          end: {
            line: 28,
            column: 10
          }
        },
        line: 16
      }
    },
    branchMap: {},
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    b: {},
    inputSourceMap: {
      version: 3,
      sources: ["/Users/stefanbekker/projects/fancy-planties/src/components/providers/QueryClientProvider.tsx"],
      sourcesContent: ["'use client';\n\nimport { QueryClient, QueryClientProvider as TanStackQueryClientProvider } from '@tanstack/react-query';\nimport { useState } from 'react';\n\nexport default function QueryClientProvider({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  const [queryClient] = useState(() => new QueryClient({\n    defaultOptions: {\n      queries: {\n        staleTime: 1000 * 60 * 5, // 5 minutes\n        gcTime: 1000 * 60 * 30, // 30 minutes (formerly cacheTime)\n        retry: 2,\n        refetchOnWindowFocus: false,\n      },\n      mutations: {\n        retry: 1,\n      },\n    },\n  }));\n\n  return (\n    <TanStackQueryClientProvider client={queryClient}>\n      {children}\n    </TanStackQueryClientProvider>\n  );\n}"],
      names: ["QueryClientProvider", "children", "queryClient", "useState", "QueryClient", "defaultOptions", "queries", "staleTime", "gcTime", "retry", "refetchOnWindowFocus", "mutations", "TanStackQueryClientProvider", "client"],
      mappings: "AAAA;;;;;+BAKA;;;eAAwBA;;;;4BAHwD;uBACvD;AAEV,SAASA,oBAAoB,EAC1CC,QAAQ,EAGT;IACC,MAAM,CAACC,YAAY,GAAGC,IAAAA,eAAQ,EAAC,IAAM,IAAIC,uBAAW,CAAC;YACnDC,gBAAgB;gBACdC,SAAS;oBACPC,WAAW,OAAO,KAAK;oBACvBC,QAAQ,OAAO,KAAK;oBACpBC,OAAO;oBACPC,sBAAsB;gBACxB;gBACAC,WAAW;oBACTF,OAAO;gBACT;YACF;QACF;IAEA,qBACE,qBAACG,+BAA2B;QAACC,QAAQX;kBAClCD;;AAGP"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "0c41a5d30bb722761e2e5fd36f9cddf3972b3758"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_n2izc7p9s = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_n2izc7p9s();
cov_n2izc7p9s().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_n2izc7p9s().s[1]++;
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_n2izc7p9s().f[0]++;
    cov_n2izc7p9s().s[2]++;
    return QueryClientProvider;
  }
});
const _jsxruntime =
/* istanbul ignore next */
(cov_n2izc7p9s().s[3]++, require("react/jsx-runtime"));
const _reactquery =
/* istanbul ignore next */
(cov_n2izc7p9s().s[4]++, require("@tanstack/react-query"));
const _react =
/* istanbul ignore next */
(cov_n2izc7p9s().s[5]++, require("react"));
function QueryClientProvider({
  children
}) {
  /* istanbul ignore next */
  cov_n2izc7p9s().f[1]++;
  const [queryClient] =
  /* istanbul ignore next */
  (cov_n2izc7p9s().s[6]++, (0, _react.useState)(() => {
    /* istanbul ignore next */
    cov_n2izc7p9s().f[2]++;
    cov_n2izc7p9s().s[7]++;
    return new _reactquery.QueryClient({
      defaultOptions: {
        queries: {
          staleTime: 1000 * 60 * 5,
          gcTime: 1000 * 60 * 30,
          retry: 2,
          refetchOnWindowFocus: false
        },
        mutations: {
          retry: 1
        }
      }
    });
  }));
  /* istanbul ignore next */
  cov_n2izc7p9s().s[8]++;
  return /*#__PURE__*/(0, _jsxruntime.jsx)(_reactquery.QueryClientProvider, {
    client: queryClient,
    children: children
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfbjJpemM3cDlzIiwiYWN0dWFsQ292ZXJhZ2UiLCJzIiwiUXVlcnlDbGllbnRQcm92aWRlciIsImNoaWxkcmVuIiwiZiIsInF1ZXJ5Q2xpZW50IiwiX3JlYWN0IiwidXNlU3RhdGUiLCJfcmVhY3RxdWVyeSIsIlF1ZXJ5Q2xpZW50IiwiZGVmYXVsdE9wdGlvbnMiLCJxdWVyaWVzIiwic3RhbGVUaW1lIiwiZ2NUaW1lIiwicmV0cnkiLCJyZWZldGNoT25XaW5kb3dGb2N1cyIsIm11dGF0aW9ucyIsIl9qc3hydW50aW1lIiwianN4IiwiY2xpZW50Il0sInNvdXJjZXMiOlsiL1VzZXJzL3N0ZWZhbmJla2tlci9wcm9qZWN0cy9mYW5jeS1wbGFudGllcy9zcmMvY29tcG9uZW50cy9wcm92aWRlcnMvUXVlcnlDbGllbnRQcm92aWRlci50c3giXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgeyBRdWVyeUNsaWVudCwgUXVlcnlDbGllbnRQcm92aWRlciBhcyBUYW5TdGFja1F1ZXJ5Q2xpZW50UHJvdmlkZXIgfSBmcm9tICdAdGFuc3RhY2svcmVhY3QtcXVlcnknO1xuaW1wb3J0IHsgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFF1ZXJ5Q2xpZW50UHJvdmlkZXIoe1xuICBjaGlsZHJlbixcbn06IHtcbiAgY2hpbGRyZW46IFJlYWN0LlJlYWN0Tm9kZTtcbn0pIHtcbiAgY29uc3QgW3F1ZXJ5Q2xpZW50XSA9IHVzZVN0YXRlKCgpID0+IG5ldyBRdWVyeUNsaWVudCh7XG4gICAgZGVmYXVsdE9wdGlvbnM6IHtcbiAgICAgIHF1ZXJpZXM6IHtcbiAgICAgICAgc3RhbGVUaW1lOiAxMDAwICogNjAgKiA1LCAvLyA1IG1pbnV0ZXNcbiAgICAgICAgZ2NUaW1lOiAxMDAwICogNjAgKiAzMCwgLy8gMzAgbWludXRlcyAoZm9ybWVybHkgY2FjaGVUaW1lKVxuICAgICAgICByZXRyeTogMixcbiAgICAgICAgcmVmZXRjaE9uV2luZG93Rm9jdXM6IGZhbHNlLFxuICAgICAgfSxcbiAgICAgIG11dGF0aW9uczoge1xuICAgICAgICByZXRyeTogMSxcbiAgICAgIH0sXG4gICAgfSxcbiAgfSkpO1xuXG4gIHJldHVybiAoXG4gICAgPFRhblN0YWNrUXVlcnlDbGllbnRQcm92aWRlciBjbGllbnQ9e3F1ZXJ5Q2xpZW50fT5cbiAgICAgIHtjaGlsZHJlbn1cbiAgICA8L1RhblN0YWNrUXVlcnlDbGllbnRQcm92aWRlcj5cbiAgKTtcbn0iXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0lBVVM7SUFBQUEsYUFBQSxZQUFBQSxDQUFBO01BQUEsT0FBQUMsY0FBQTtJQUFBO0VBQUE7RUFBQSxPQUFBQSxjQUFBO0FBQUE7QUFBQUQsYUFBQTtBQUFBQSxhQUFBLEdBQUFFLENBQUE7Ozs7OzsrQkFMVDs7Ozs7O1dBQXdCQyxtQkFBQTs7Ozs7Ozs7aUNBSHdEOzs7aUNBQ3ZEO0FBRVYsU0FBU0Esb0JBQW9CO0VBQzFDQztBQUFRLENBR1Q7RUFBQTtFQUFBSixhQUFBLEdBQUFLLENBQUE7RUFDQyxNQUFNLENBQUNDLFdBQUEsQ0FBWTtFQUFBO0VBQUEsQ0FBQU4sYUFBQSxHQUFBRSxDQUFBLE9BQUcsSUFBQUssTUFBQSxDQUFBQyxRQUFRLEVBQUMsTUFBTTtJQUFBO0lBQUFSLGFBQUEsR0FBQUssQ0FBQTtJQUFBTCxhQUFBLEdBQUFFLENBQUE7SUFBQSxXQUFJTyxXQUFBLENBQUFDLFdBQVcsQ0FBQztNQUNuREMsY0FBQSxFQUFnQjtRQUNkQyxPQUFBLEVBQVM7VUFDUEMsU0FBQSxFQUFXLE9BQU8sS0FBSztVQUN2QkMsTUFBQSxFQUFRLE9BQU8sS0FBSztVQUNwQkMsS0FBQSxFQUFPO1VBQ1BDLG9CQUFBLEVBQXNCO1FBQ3hCO1FBQ0FDLFNBQUEsRUFBVztVQUNURixLQUFBLEVBQU87UUFDVDtNQUNGO0lBQ0Y7RUFBQTtFQUFBO0VBQUFmLGFBQUEsR0FBQUUsQ0FBQTtFQUVBLG9CQUNFLElBQUFnQixXQUFBLENBQUFDLEdBQUEsRUFBQ1YsV0FBQSxDQUFBTixtQkFBMkI7SUFBQ2lCLE1BQUEsRUFBUWQsV0FBQTtjQUNsQ0Y7O0FBR1AiLCJpZ25vcmVMaXN0IjpbXX0=