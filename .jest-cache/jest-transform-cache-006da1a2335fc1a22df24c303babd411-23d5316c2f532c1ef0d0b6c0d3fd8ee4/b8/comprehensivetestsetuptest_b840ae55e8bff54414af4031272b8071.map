{"version":3,"sources":["/Users/stefanbekker/projects/fancy-planties/src/test-utils/examples/comprehensive-test-setup.test.ts"],"sourcesContent":["/**\n * Comprehensive Test Setup Example\n * \n * Demonstrates how to use all the performance optimization and monitoring features.\n */\n\nimport {\n  withPerformanceMonitoring,\n  withBenchmarking,\n  setupEfficientTestData,\n  setupTransactionIsolation,\n  setupErrorReporting,\n  setupFailureAnalysis,\n  testPerformanceMonitor,\n  testBenchmarkingSystem,\n  efficientTestData,\n  measureAsyncOperation,\n  withRetry,\n  debugTestState,\n} from '../index';\n\n// Example test suite with comprehensive monitoring\ndescribe('Comprehensive Test Setup Example', () => {\n  // Setup all monitoring and optimization features\n  withPerformanceMonitoring('Comprehensive Test Suite');\n  withBenchmarking('integration');\n  setupEfficientTestData();\n  setupTransactionIsolation();\n  setupErrorReporting();\n  setupFailureAnalysis();\n\n  beforeAll(async () => {\n    console.log('ðŸš€ Starting comprehensive test suite with full monitoring');\n  });\n\n  afterAll(async () => {\n    // Generate reports\n    const report = testBenchmarkingSystem.generateReport();\n    console.log('ðŸ“Š Final Performance Report:', report.summary);\n  });\n\n  describe('Performance Monitoring Examples', () => {\n    it('should measure async operation performance', async () => {\n      const { result, duration, memoryDelta } = await measureAsyncOperation(\n        async () => {\n          // Simulate async work\n          await new Promise(resolve => setTimeout(resolve, 100));\n          return 'completed';\n        },\n        'async-operation-test'\n      );\n\n      expect(result).toBe('completed');\n      expect(duration).toBeGreaterThan(90);\n      expect(duration).toBeLessThan(200);\n    });\n\n    it('should use efficient test data from pools', async () => {\n      // Get test data from pools (reused for efficiency)\n      const user = efficientTestData.getFromPool('users');\n      const plant = efficientTestData.getFromPool('plants');\n      const plantInstance = efficientTestData.getFromPool('plantInstances');\n\n      expect(user).toHaveProperty('id');\n      expect(user).toHaveProperty('email');\n      expect(plant).toHaveProperty('commonName');\n      expect(plantInstance).toHaveProperty('nickname');\n\n      // Return to pool for reuse\n      await efficientTestData.returnToPool('users', user);\n      await efficientTestData.returnToPool('plants', plant);\n      await efficientTestData.returnToPool('plantInstances', plantInstance);\n    });\n\n    it('should handle retries for flaky operations', async () => {\n      let attemptCount = 0;\n      \n      const result = await withRetry(\n        async () => {\n          attemptCount++;\n          if (attemptCount < 2) {\n            throw new Error('Simulated flaky failure');\n          }\n          return 'success';\n        },\n        {\n          maxRetries: 3,\n          retryDelay: 10,\n          retryableErrors: ['flaky'],\n        }\n      );\n\n      expect(result).toBe('success');\n      expect(attemptCount).toBe(2);\n    });\n  });\n\n  describe('Error Reporting Examples', () => {\n    it('should capture detailed error context', async () => {\n      try {\n        // Simulate component state for debugging\n        const componentState = {\n          loading: false,\n          data: null,\n          error: null,\n        };\n\n        debugTestState('component-state', componentState);\n\n        // Simulate an error that would be caught and analyzed\n        throw new Error('Simulated test error for demonstration');\n      } catch (error) {\n        // Error would be automatically captured by setupErrorReporting\n        expect(error).toBeInstanceOf(Error);\n      }\n    });\n\n    it('should demonstrate transaction isolation', async () => {\n      // Each test gets its own transaction that's rolled back\n      const transactionId = await efficientTestData.createTransaction('isolation-test');\n      \n      // Simulate database operations\n      console.log(`ðŸ”„ Running test in transaction: ${transactionId}`);\n      \n      // Transaction will be automatically rolled back in afterEach\n      expect(transactionId).toBeTruthy();\n    });\n  });\n\n  describe('Benchmarking Examples', () => {\n    it('should benchmark component rendering performance', async () => {\n      const startTime = performance.now();\n      const startMemory = process.memoryUsage().heapUsed;\n\n      // Simulate component rendering work\n      const largeArray = new Array(10000).fill(0).map((_, i) => ({\n        id: i,\n        name: `Item ${i}`,\n        data: Math.random(),\n      }));\n\n      // Simulate processing\n      const processed = largeArray.filter(item => item.data > 0.5);\n\n      const endTime = performance.now();\n      const endMemory = process.memoryUsage().heapUsed;\n\n      const duration = endTime - startTime;\n      const memoryUsed = endMemory - startMemory;\n\n      // Manual benchmark recording (automatic recording also happens)\n      testBenchmarkingSystem.recordBenchmark(\n        'component-rendering-benchmark',\n        duration,\n        memoryUsed,\n        process.env.CI ? 'ci' : 'local'\n      );\n\n      expect(processed.length).toBeGreaterThan(0);\n      expect(duration).toBeLessThan(100); // Should complete in under 100ms\n    });\n\n    it('should demonstrate memory-efficient operations', async () => {\n      const initialMemory = process.memoryUsage().heapUsed;\n\n      // Use generator for memory efficiency\n      function* generateTestData(count: number) {\n        for (let i = 0; i < count; i++) {\n          yield { id: i, data: `test-${i}` };\n        }\n      }\n\n      let processedCount = 0;\n      for (const item of generateTestData(1000)) {\n        processedCount++;\n        // Process one item at a time to avoid memory buildup\n      }\n\n      const finalMemory = process.memoryUsage().heapUsed;\n      const memoryIncrease = finalMemory - initialMemory;\n\n      expect(processedCount).toBe(1000);\n      expect(memoryIncrease).toBeLessThan(1024 * 1024); // Less than 1MB increase\n    });\n  });\n\n  describe('CI/CD Integration Examples', () => {\n    it('should provide CI-friendly test output', async () => {\n      // This test demonstrates features that work well in CI\n      const isCI = process.env.CI === 'true';\n      \n      if (isCI) {\n        console.log('ðŸ¤– Running in CI environment');\n        // CI-specific test behavior\n      } else {\n        console.log('ðŸ’» Running in local environment');\n        // Local development test behavior\n      }\n\n      // Test should work in both environments\n      expect(true).toBe(true);\n    });\n\n    it('should generate performance alerts when thresholds are exceeded', async () => {\n      // Set strict thresholds for this test\n      testBenchmarkingSystem.setThresholds('alert-test', {\n        maxDuration: 50, // Very strict threshold\n        maxMemoryMB: 1,\n        regressionThreshold: 10,\n      });\n\n      const startTime = performance.now();\n      \n      // Intentionally slow operation to trigger alert\n      await new Promise(resolve => setTimeout(resolve, 100));\n      \n      const duration = performance.now() - startTime;\n      \n      // This should trigger a performance alert\n      testBenchmarkingSystem.recordBenchmark(\n        'alert-test',\n        duration,\n        1024 * 1024 * 2, // 2MB memory usage\n        'local'\n      );\n\n      expect(duration).toBeGreaterThan(50);\n    });\n  });\n});"],"names":["describe","withPerformanceMonitoring","withBenchmarking","setupEfficientTestData","setupTransactionIsolation","setupErrorReporting","setupFailureAnalysis","beforeAll","console","log","afterAll","report","testBenchmarkingSystem","generateReport","summary","it","result","duration","memoryDelta","measureAsyncOperation","Promise","resolve","setTimeout","expect","toBe","toBeGreaterThan","toBeLessThan","user","efficientTestData","getFromPool","plant","plantInstance","toHaveProperty","returnToPool","attemptCount","withRetry","Error","maxRetries","retryDelay","retryableErrors","componentState","loading","data","error","debugTestState","toBeInstanceOf","transactionId","createTransaction","toBeTruthy","startTime","performance","now","startMemory","process","memoryUsage","heapUsed","largeArray","Array","fill","map","_","i","id","name","Math","random","processed","filter","item","endTime","endMemory","memoryUsed","recordBenchmark","env","CI","length","initialMemory","generateTestData","count","processedCount","finalMemory","memoryIncrease","isCI","setThresholds","maxDuration","maxMemoryMB","regressionThreshold"],"mappings":"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"}