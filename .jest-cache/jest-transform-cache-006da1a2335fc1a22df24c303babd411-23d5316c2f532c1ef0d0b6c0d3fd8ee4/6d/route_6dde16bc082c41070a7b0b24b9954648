e18957ea0cc3d21815393e40961d6d16
"use strict";

/* istanbul ignore next */
function cov_vck0xds9n() {
  var path = "/Users/stefanbekker/projects/fancy-planties/src/app/api/auth/email-verification-status/route.ts";
  var hash = "fd1b790e4b426c2064920289bf266c7a415410f7";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/stefanbekker/projects/fancy-planties/src/app/api/auth/email-verification-status/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 18,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 19
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 20
        }
      },
      "6": {
        start: {
          line: 19,
          column: 16
        },
        end: {
          line: 19,
          column: 38
        }
      },
      "7": {
        start: {
          line: 20,
          column: 38
        },
        end: {
          line: 20,
          column: 105
        }
      },
      "8": {
        start: {
          line: 21,
          column: 34
        },
        end: {
          line: 21,
          column: 96
        }
      },
      "9": {
        start: {
          line: 22,
          column: 37
        },
        end: {
          line: 22,
          column: 98
        }
      },
      "10": {
        start: {
          line: 23,
          column: 20
        },
        end: {
          line: 23,
          column: 62
        }
      },
      "11": {
        start: {
          line: 25,
          column: 4
        },
        end: {
          line: 67,
          column: 7
        }
      },
      "12": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 66,
          column: 9
        }
      },
      "13": {
        start: {
          line: 28,
          column: 25
        },
        end: {
          line: 28,
          column: 61
        }
      },
      "14": {
        start: {
          line: 29,
          column: 12
        },
        end: {
          line: 35,
          column: 13
        }
      },
      "15": {
        start: {
          line: 30,
          column: 16
        },
        end: {
          line: 34,
          column: 19
        }
      },
      "16": {
        start: {
          line: 37,
          column: 24
        },
        end: {
          line: 37,
          column: 40
        }
      },
      "17": {
        start: {
          line: 38,
          column: 42
        },
        end: {
          line: 38,
          column: 98
        }
      },
      "18": {
        start: {
          line: 39,
          column: 40
        },
        end: {
          line: 39,
          column: 69
        }
      },
      "19": {
        start: {
          line: 41,
          column: 33
        },
        end: {
          line: 41,
          column: 114
        }
      },
      "20": {
        start: {
          line: 43,
          column: 33
        },
        end: {
          line: 43,
          column: 42
        }
      },
      "21": {
        start: {
          line: 44,
          column: 12
        },
        end: {
          line: 47,
          column: 13
        }
      },
      "22": {
        start: {
          line: 45,
          column: 30
        },
        end: {
          line: 45,
          column: 93
        }
      },
      "23": {
        start: {
          line: 46,
          column: 16
        },
        end: {
          line: 46,
          column: 117
        }
      },
      "24": {
        start: {
          line: 49,
          column: 33
        },
        end: {
          line: 49,
          column: 108
        }
      },
      "25": {
        start: {
          line: 50,
          column: 12
        },
        end: {
          line: 56,
          column: 15
        }
      },
      "26": {
        start: {
          line: 58,
          column: 12
        },
        end: {
          line: 58,
          column: 78
        }
      },
      "27": {
        start: {
          line: 59,
          column: 12
        },
        end: {
          line: 65,
          column: 15
        }
      },
      "28": {
        start: {
          line: 70,
          column: 4
        },
        end: {
          line: 115,
          column: 7
        }
      },
      "29": {
        start: {
          line: 71,
          column: 8
        },
        end: {
          line: 114,
          column: 9
        }
      },
      "30": {
        start: {
          line: 73,
          column: 25
        },
        end: {
          line: 73,
          column: 61
        }
      },
      "31": {
        start: {
          line: 74,
          column: 12
        },
        end: {
          line: 80,
          column: 13
        }
      },
      "32": {
        start: {
          line: 75,
          column: 16
        },
        end: {
          line: 79,
          column: 19
        }
      },
      "33": {
        start: {
          line: 81,
          column: 25
        },
        end: {
          line: 81,
          column: 41
        }
      },
      "34": {
        start: {
          line: 82,
          column: 27
        },
        end: {
          line: 82,
          column: 38
        }
      },
      "35": {
        start: {
          line: 83,
          column: 12
        },
        end: {
          line: 101,
          column: 13
        }
      },
      "36": {
        start: {
          line: 84,
          column: 16
        },
        end: {
          line: 100,
          column: 17
        }
      },
      "37": {
        start: {
          line: 85,
          column: 41
        },
        end: {
          line: 85,
          column: 119
        }
      },
      "38": {
        start: {
          line: 86,
          column: 20
        },
        end: {
          line: 91,
          column: 23
        }
      },
      "39": {
        start: {
          line: 93,
          column: 20
        },
        end: {
          line: 99,
          column: 23
        }
      },
      "40": {
        start: {
          line: 102,
          column: 12
        },
        end: {
          line: 106,
          column: 15
        }
      },
      "41": {
        start: {
          line: 108,
          column: 12
        },
        end: {
          line: 108,
          column: 83
        }
      },
      "42": {
        start: {
          line: 109,
          column: 12
        },
        end: {
          line: 113,
          column: 15
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        },
        loc: {
          start: {
            line: 12,
            column: 15
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 16
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "GET",
        decl: {
          start: {
            line: 24,
            column: 15
          },
          end: {
            line: 24,
            column: 18
          }
        },
        loc: {
          start: {
            line: 24,
            column: 28
          },
          end: {
            line: 68,
            column: 1
          }
        },
        line: 24
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 25,
            column: 77
          },
          end: {
            line: 25,
            column: 78
          }
        },
        loc: {
          start: {
            line: 25,
            column: 90
          },
          end: {
            line: 67,
            column: 5
          }
        },
        line: 25
      },
      "5": {
        name: "POST",
        decl: {
          start: {
            line: 69,
            column: 15
          },
          end: {
            line: 69,
            column: 19
          }
        },
        loc: {
          start: {
            line: 69,
            column: 29
          },
          end: {
            line: 116,
            column: 1
          }
        },
        line: 69
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 70,
            column: 77
          },
          end: {
            line: 70,
            column: 78
          }
        },
        loc: {
          start: {
            line: 70,
            column: 90
          },
          end: {
            line: 115,
            column: 5
          }
        },
        line: 70
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 29,
            column: 12
          },
          end: {
            line: 35,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 29,
            column: 12
          },
          end: {
            line: 35,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 29
      },
      "1": {
        loc: {
          start: {
            line: 44,
            column: 12
          },
          end: {
            line: 47,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 44,
            column: 12
          },
          end: {
            line: 47,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 44
      },
      "2": {
        loc: {
          start: {
            line: 45,
            column: 30
          },
          end: {
            line: 45,
            column: 93
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 45,
            column: 52
          },
          end: {
            line: 45,
            column: 81
          }
        }, {
          start: {
            line: 45,
            column: 84
          },
          end: {
            line: 45,
            column: 93
          }
        }],
        line: 45
      },
      "3": {
        loc: {
          start: {
            line: 74,
            column: 12
          },
          end: {
            line: 80,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 74,
            column: 12
          },
          end: {
            line: 80,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 74
      },
      "4": {
        loc: {
          start: {
            line: 83,
            column: 12
          },
          end: {
            line: 101,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 83,
            column: 12
          },
          end: {
            line: 101,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 83
      },
      "5": {
        loc: {
          start: {
            line: 95,
            column: 33
          },
          end: {
            line: 95,
            column: 103
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 95,
            column: 65
          },
          end: {
            line: 95,
            column: 85
          }
        }, {
          start: {
            line: 95,
            column: 88
          },
          end: {
            line: 95,
            column: 103
          }
        }],
        line: 95
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/stefanbekker/projects/fancy-planties/src/app/api/auth/email-verification-status/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport { emailVerificationRateLimiter } from '@/lib/services/email-verification-rate-limiter';\nimport { emailVerificationCleanupService } from '@/lib/services/email-verification-cleanup';\nimport { withSecurityMonitoring } from '@/lib/auth/email-verification-middleware';\nimport { requireAuth } from '@/lib/auth/middleware';\n\n// This endpoint provides system status and security monitoring for email verification\n// It should be protected and only accessible to administrators\n\nexport async function GET(request: NextRequest) {\n  return withSecurityMonitoring(request, async (req) => {\n    try {\n      // Check if user is authenticated (in a real app, you'd check for admin role)\n      const auth = await requireAuth();\n      if (!auth) {\n        return NextResponse.json(\n          { error: 'Unauthorized' },\n          { status: 401 }\n        );\n      }\n      \n      // Get query parameters\n      const url = new URL(req.url);\n      const includeSecurityEvents = url.searchParams.get('includeSecurityEvents') === 'true';\n      const securityEventsSince = url.searchParams.get('since');\n      \n      // Get system status\n      const systemStatus = await emailVerificationCleanupService.getSystemStatus();\n      \n      // Get security events if requested\n      let securityEvents = undefined;\n      if (includeSecurityEvents) {\n        const since = securityEventsSince ? parseInt(securityEventsSince) : undefined;\n        securityEvents = emailVerificationRateLimiter.getSecurityEvents(since);\n      }\n      \n      // Get cleanup statistics\n      const cleanupStats = emailVerificationCleanupService.getCleanupStats();\n      \n      return NextResponse.json({\n        status: 'healthy',\n        timestamp: Date.now(),\n        systemStatus,\n        cleanupStats,\n        securityEvents,\n      });\n      \n    } catch (error) {\n      console.error('Email verification status endpoint error:', error);\n      \n      return NextResponse.json(\n        { \n          status: 'error',\n          error: 'Failed to get system status',\n          timestamp: Date.now(),\n        },\n        { status: 500 }\n      );\n    }\n  });\n}\n\n// Force cleanup endpoint (POST)\nexport async function POST(request: NextRequest) {\n  return withSecurityMonitoring(request, async (req) => {\n    try {\n      // Check if user is authenticated (in a real app, you'd check for admin role)\n      const auth = await requireAuth();\n      if (!auth) {\n        return NextResponse.json(\n          { error: 'Unauthorized' },\n          { status: 401 }\n        );\n      }\n      \n      const body = await req.json();\n      const action = body.action;\n      \n      if (action === 'cleanup') {\n        try {\n          const cleanupStats = await emailVerificationCleanupService.forceCleanup();\n          \n          return NextResponse.json({\n            success: true,\n            message: 'Cleanup completed successfully',\n            stats: cleanupStats,\n            timestamp: Date.now(),\n          });\n          \n        } catch (cleanupError) {\n          return NextResponse.json(\n            {\n              error: 'Cleanup failed',\n              message: cleanupError instanceof Error ? cleanupError.message : 'Unknown error',\n              timestamp: Date.now(),\n            },\n            { status: 500 }\n          );\n        }\n      }\n      \n      return NextResponse.json(\n        { error: 'Invalid action' },\n        { status: 400 }\n      );\n      \n    } catch (error) {\n      console.error('Email verification status POST endpoint error:', error);\n      \n      return NextResponse.json(\n        { error: 'Internal server error' },\n        { status: 500 }\n      );\n    }\n  });\n}"],
      names: ["GET", "POST", "request", "withSecurityMonitoring", "req", "auth", "requireAuth", "NextResponse", "json", "error", "status", "url", "URL", "includeSecurityEvents", "searchParams", "get", "securityEventsSince", "systemStatus", "emailVerificationCleanupService", "getSystemStatus", "securityEvents", "undefined", "since", "parseInt", "emailVerificationRateLimiter", "getSecurityEvents", "cleanupStats", "getCleanupStats", "timestamp", "Date", "now", "console", "body", "action", "forceCleanup", "success", "message", "stats", "cleanupError", "Error"],
      mappings: ";;;;;;;;;;;QASsBA;eAAAA;;QAsDAC;eAAAA;;;wBA/DoB;8CACG;0CACG;6CACT;4BACX;AAKrB,eAAeD,IAAIE,OAAoB;IAC5C,OAAOC,IAAAA,mDAAsB,EAACD,SAAS,OAAOE;QAC5C,IAAI;YACF,6EAA6E;YAC7E,MAAMC,OAAO,MAAMC,IAAAA,uBAAW;YAC9B,IAAI,CAACD,MAAM;gBACT,OAAOE,oBAAY,CAACC,IAAI,CACtB;oBAAEC,OAAO;gBAAe,GACxB;oBAAEC,QAAQ;gBAAI;YAElB;YAEA,uBAAuB;YACvB,MAAMC,MAAM,IAAIC,IAAIR,IAAIO,GAAG;YAC3B,MAAME,wBAAwBF,IAAIG,YAAY,CAACC,GAAG,CAAC,6BAA6B;YAChF,MAAMC,sBAAsBL,IAAIG,YAAY,CAACC,GAAG,CAAC;YAEjD,oBAAoB;YACpB,MAAME,eAAe,MAAMC,yDAA+B,CAACC,eAAe;YAE1E,mCAAmC;YACnC,IAAIC,iBAAiBC;YACrB,IAAIR,uBAAuB;gBACzB,MAAMS,QAAQN,sBAAsBO,SAASP,uBAAuBK;gBACpED,iBAAiBI,0DAA4B,CAACC,iBAAiB,CAACH;YAClE;YAEA,yBAAyB;YACzB,MAAMI,eAAeR,yDAA+B,CAACS,eAAe;YAEpE,OAAOpB,oBAAY,CAACC,IAAI,CAAC;gBACvBE,QAAQ;gBACRkB,WAAWC,KAAKC,GAAG;gBACnBb;gBACAS;gBACAN;YACF;QAEF,EAAE,OAAOX,OAAO;YACdsB,QAAQtB,KAAK,CAAC,6CAA6CA;YAE3D,OAAOF,oBAAY,CAACC,IAAI,CACtB;gBACEE,QAAQ;gBACRD,OAAO;gBACPmB,WAAWC,KAAKC,GAAG;YACrB,GACA;gBAAEpB,QAAQ;YAAI;QAElB;IACF;AACF;AAGO,eAAeT,KAAKC,OAAoB;IAC7C,OAAOC,IAAAA,mDAAsB,EAACD,SAAS,OAAOE;QAC5C,IAAI;YACF,6EAA6E;YAC7E,MAAMC,OAAO,MAAMC,IAAAA,uBAAW;YAC9B,IAAI,CAACD,MAAM;gBACT,OAAOE,oBAAY,CAACC,IAAI,CACtB;oBAAEC,OAAO;gBAAe,GACxB;oBAAEC,QAAQ;gBAAI;YAElB;YAEA,MAAMsB,OAAO,MAAM5B,IAAII,IAAI;YAC3B,MAAMyB,SAASD,KAAKC,MAAM;YAE1B,IAAIA,WAAW,WAAW;gBACxB,IAAI;oBACF,MAAMP,eAAe,MAAMR,yDAA+B,CAACgB,YAAY;oBAEvE,OAAO3B,oBAAY,CAACC,IAAI,CAAC;wBACvB2B,SAAS;wBACTC,SAAS;wBACTC,OAAOX;wBACPE,WAAWC,KAAKC,GAAG;oBACrB;gBAEF,EAAE,OAAOQ,cAAc;oBACrB,OAAO/B,oBAAY,CAACC,IAAI,CACtB;wBACEC,OAAO;wBACP2B,SAASE,wBAAwBC,QAAQD,aAAaF,OAAO,GAAG;wBAChER,WAAWC,KAAKC,GAAG;oBACrB,GACA;wBAAEpB,QAAQ;oBAAI;gBAElB;YACF;YAEA,OAAOH,oBAAY,CAACC,IAAI,CACtB;gBAAEC,OAAO;YAAiB,GAC1B;gBAAEC,QAAQ;YAAI;QAGlB,EAAE,OAAOD,OAAO;YACdsB,QAAQtB,KAAK,CAAC,kDAAkDA;YAEhE,OAAOF,oBAAY,CAACC,IAAI,CACtB;gBAAEC,OAAO;YAAwB,GACjC;gBAAEC,QAAQ;YAAI;QAElB;IACF;AACF"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "fd1b790e4b426c2064920289bf266c7a415410f7"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_vck0xds9n = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_vck0xds9n();
cov_vck0xds9n().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_vck0xds9n().f[0]++;
  cov_vck0xds9n().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_vck0xds9n().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_vck0xds9n().s[3]++;
_export(exports, {
  get GET() {
    /* istanbul ignore next */
    cov_vck0xds9n().f[1]++;
    cov_vck0xds9n().s[4]++;
    return GET;
  },
  get POST() {
    /* istanbul ignore next */
    cov_vck0xds9n().f[2]++;
    cov_vck0xds9n().s[5]++;
    return POST;
  }
});
const _server =
/* istanbul ignore next */
(cov_vck0xds9n().s[6]++, require("next/server"));
const _emailverificationratelimiter =
/* istanbul ignore next */
(cov_vck0xds9n().s[7]++, require("../../../../lib/services/email-verification-rate-limiter"));
const _emailverificationcleanup =
/* istanbul ignore next */
(cov_vck0xds9n().s[8]++, require("../../../../lib/services/email-verification-cleanup"));
const _emailverificationmiddleware =
/* istanbul ignore next */
(cov_vck0xds9n().s[9]++, require("../../../../lib/auth/email-verification-middleware"));
const _middleware =
/* istanbul ignore next */
(cov_vck0xds9n().s[10]++, require("../../../../lib/auth/middleware"));
async function GET(request) {
  /* istanbul ignore next */
  cov_vck0xds9n().f[3]++;
  cov_vck0xds9n().s[11]++;
  return (0, _emailverificationmiddleware.withSecurityMonitoring)(request, async req => {
    /* istanbul ignore next */
    cov_vck0xds9n().f[4]++;
    cov_vck0xds9n().s[12]++;
    try {
      // Check if user is authenticated (in a real app, you'd check for admin role)
      const auth =
      /* istanbul ignore next */
      (cov_vck0xds9n().s[13]++, await (0, _middleware.requireAuth)());
      /* istanbul ignore next */
      cov_vck0xds9n().s[14]++;
      if (!auth) {
        /* istanbul ignore next */
        cov_vck0xds9n().b[0][0]++;
        cov_vck0xds9n().s[15]++;
        return _server.NextResponse.json({
          error: 'Unauthorized'
        }, {
          status: 401
        });
      } else
      /* istanbul ignore next */
      {
        cov_vck0xds9n().b[0][1]++;
      }
      // Get query parameters
      const url =
      /* istanbul ignore next */
      (cov_vck0xds9n().s[16]++, new URL(req.url));
      const includeSecurityEvents =
      /* istanbul ignore next */
      (cov_vck0xds9n().s[17]++, url.searchParams.get('includeSecurityEvents') === 'true');
      const securityEventsSince =
      /* istanbul ignore next */
      (cov_vck0xds9n().s[18]++, url.searchParams.get('since'));
      // Get system status
      const systemStatus =
      /* istanbul ignore next */
      (cov_vck0xds9n().s[19]++, await _emailverificationcleanup.emailVerificationCleanupService.getSystemStatus());
      // Get security events if requested
      let securityEvents =
      /* istanbul ignore next */
      (cov_vck0xds9n().s[20]++, undefined);
      /* istanbul ignore next */
      cov_vck0xds9n().s[21]++;
      if (includeSecurityEvents) {
        /* istanbul ignore next */
        cov_vck0xds9n().b[1][0]++;
        const since =
        /* istanbul ignore next */
        (cov_vck0xds9n().s[22]++, securityEventsSince ?
        /* istanbul ignore next */
        (cov_vck0xds9n().b[2][0]++, parseInt(securityEventsSince)) :
        /* istanbul ignore next */
        (cov_vck0xds9n().b[2][1]++, undefined));
        /* istanbul ignore next */
        cov_vck0xds9n().s[23]++;
        securityEvents = _emailverificationratelimiter.emailVerificationRateLimiter.getSecurityEvents(since);
      } else
      /* istanbul ignore next */
      {
        cov_vck0xds9n().b[1][1]++;
      }
      // Get cleanup statistics
      const cleanupStats =
      /* istanbul ignore next */
      (cov_vck0xds9n().s[24]++, _emailverificationcleanup.emailVerificationCleanupService.getCleanupStats());
      /* istanbul ignore next */
      cov_vck0xds9n().s[25]++;
      return _server.NextResponse.json({
        status: 'healthy',
        timestamp: Date.now(),
        systemStatus,
        cleanupStats,
        securityEvents
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_vck0xds9n().s[26]++;
      console.error('Email verification status endpoint error:', error);
      /* istanbul ignore next */
      cov_vck0xds9n().s[27]++;
      return _server.NextResponse.json({
        status: 'error',
        error: 'Failed to get system status',
        timestamp: Date.now()
      }, {
        status: 500
      });
    }
  });
}
async function POST(request) {
  /* istanbul ignore next */
  cov_vck0xds9n().f[5]++;
  cov_vck0xds9n().s[28]++;
  return (0, _emailverificationmiddleware.withSecurityMonitoring)(request, async req => {
    /* istanbul ignore next */
    cov_vck0xds9n().f[6]++;
    cov_vck0xds9n().s[29]++;
    try {
      // Check if user is authenticated (in a real app, you'd check for admin role)
      const auth =
      /* istanbul ignore next */
      (cov_vck0xds9n().s[30]++, await (0, _middleware.requireAuth)());
      /* istanbul ignore next */
      cov_vck0xds9n().s[31]++;
      if (!auth) {
        /* istanbul ignore next */
        cov_vck0xds9n().b[3][0]++;
        cov_vck0xds9n().s[32]++;
        return _server.NextResponse.json({
          error: 'Unauthorized'
        }, {
          status: 401
        });
      } else
      /* istanbul ignore next */
      {
        cov_vck0xds9n().b[3][1]++;
      }
      const body =
      /* istanbul ignore next */
      (cov_vck0xds9n().s[33]++, await req.json());
      const action =
      /* istanbul ignore next */
      (cov_vck0xds9n().s[34]++, body.action);
      /* istanbul ignore next */
      cov_vck0xds9n().s[35]++;
      if (action === 'cleanup') {
        /* istanbul ignore next */
        cov_vck0xds9n().b[4][0]++;
        cov_vck0xds9n().s[36]++;
        try {
          const cleanupStats =
          /* istanbul ignore next */
          (cov_vck0xds9n().s[37]++, await _emailverificationcleanup.emailVerificationCleanupService.forceCleanup());
          /* istanbul ignore next */
          cov_vck0xds9n().s[38]++;
          return _server.NextResponse.json({
            success: true,
            message: 'Cleanup completed successfully',
            stats: cleanupStats,
            timestamp: Date.now()
          });
        } catch (cleanupError) {
          /* istanbul ignore next */
          cov_vck0xds9n().s[39]++;
          return _server.NextResponse.json({
            error: 'Cleanup failed',
            message: cleanupError instanceof Error ?
            /* istanbul ignore next */
            (cov_vck0xds9n().b[5][0]++, cleanupError.message) :
            /* istanbul ignore next */
            (cov_vck0xds9n().b[5][1]++, 'Unknown error'),
            timestamp: Date.now()
          }, {
            status: 500
          });
        }
      } else
      /* istanbul ignore next */
      {
        cov_vck0xds9n().b[4][1]++;
      }
      cov_vck0xds9n().s[40]++;
      return _server.NextResponse.json({
        error: 'Invalid action'
      }, {
        status: 400
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_vck0xds9n().s[41]++;
      console.error('Email verification status POST endpoint error:', error);
      /* istanbul ignore next */
      cov_vck0xds9n().s[42]++;
      return _server.NextResponse.json({
        error: 'Internal server error'
      }, {
        status: 500
      });
    }
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,