{"version":3,"names":["cov_1ny8jjfzgv","actualCoverage","s","OfflineService","getOfflineData","userId","f","userPlants","_db","db","select","id","_schema","plantInstances","nickname","location","lastFertilized","fertilizerSchedule","fertilizerDue","lastRepot","notes","images","isActive","createdAt","updatedAt","plant","plants","family","genus","species","commonName","careInstructions","from","leftJoin","_drizzleorm","eq","plantId","where","and","userPropagations","propagations","dateStarted","status","thirtyDaysAgo","Date","setDate","getDate","recentCareHistory","careHistory","orderBy","desc","limit","lastSync","toISOString","error","console","Error","processPendingCareEntries","pendingEntries","results","entry","result","insert","values","plantInstanceId","careType","careDate","timestamp","returning","push","success","b","message","getDataSince","syncDate","updatedPlants","updatedPropagations","newCareHistory","syncTimestamp"],"sources":["/Users/stefanbekker/projects/fancy-planties/src/lib/services/offline-service.ts"],"sourcesContent":["import 'server-only';\n\nimport { db } from '@/lib/db';\nimport { plantInstances, plants, propagations, careHistory } from '@/lib/db/schema';\nimport { eq, and, desc } from 'drizzle-orm';\n\n/**\n * Offline Service - Server-side utilities for offline data preparation\n * Prepares data for offline caching and handles sync operations\n */\nexport class OfflineService {\n  /**\n   * Get essential plant data for offline caching\n   */\n  static async getOfflineData(userId: number) {\n    try {\n      // Get user's active plant instances with plant taxonomy\n      const userPlants = await db\n        .select({\n          id: plantInstances.id,\n          nickname: plantInstances.nickname,\n          location: plantInstances.location,\n          lastFertilized: plantInstances.lastFertilized,\n          fertilizerSchedule: plantInstances.fertilizerSchedule,\n          fertilizerDue: plantInstances.fertilizerDue,\n          lastRepot: plantInstances.lastRepot,\n          notes: plantInstances.notes,\n          images: plantInstances.images,\n          isActive: plantInstances.isActive,\n          createdAt: plantInstances.createdAt,\n          updatedAt: plantInstances.updatedAt,\n          plant: {\n            id: plants.id,\n            family: plants.family,\n            genus: plants.genus,\n            species: plants.species,\n            commonName: plants.commonName,\n            careInstructions: plants.careInstructions,\n          }\n        })\n        .from(plantInstances)\n        .leftJoin(plants, eq(plantInstances.plantId, plants.id))\n        .where(and(\n          eq(plantInstances.userId, userId),\n          eq(plantInstances.isActive, true)\n        ));\n\n      // Get user's active propagations\n      const userPropagations = await db\n        .select({\n          id: propagations.id,\n          nickname: propagations.nickname,\n          location: propagations.location,\n          dateStarted: propagations.dateStarted,\n          status: propagations.status,\n          notes: propagations.notes,\n          images: propagations.images,\n          createdAt: propagations.createdAt,\n          updatedAt: propagations.updatedAt,\n          plant: {\n            id: plants.id,\n            family: plants.family,\n            genus: plants.genus,\n            species: plants.species,\n            commonName: plants.commonName,\n          }\n        })\n        .from(propagations)\n        .leftJoin(plants, eq(propagations.plantId, plants.id))\n        .where(eq(propagations.userId, userId));\n\n      // Get recent care history (last 30 days)\n      const thirtyDaysAgo = new Date();\n      thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n\n      const recentCareHistory = await db\n        .select()\n        .from(careHistory)\n        .where(and(\n          eq(careHistory.userId, userId),\n          // Add date filter when we have a date column\n        ))\n        .orderBy(desc(careHistory.createdAt))\n        .limit(100);\n\n      return {\n        plants: userPlants,\n        propagations: userPropagations,\n        careHistory: recentCareHistory,\n        lastSync: new Date().toISOString(),\n      };\n    } catch (error) {\n      console.error('Error getting offline data:', error);\n      throw new Error('Failed to prepare offline data');\n    }\n  }\n\n  /**\n   * Process offline care log entries when back online\n   */\n  static async processPendingCareEntries(userId: number, pendingEntries: any[]) {\n    const results = [];\n    \n    for (const entry of pendingEntries) {\n      try {\n        // Process each pending care entry\n        const result = await db\n          .insert(careHistory)\n          .values({\n            userId,\n            plantInstanceId: entry.plantInstanceId,\n            careType: entry.careType,\n            careDate: new Date(entry.timestamp),\n            notes: entry.notes,\n          })\n          .returning();\n\n        results.push({ success: true, entry, result: result[0] });\n      } catch (error) {\n        console.error('Error processing pending care entry:', error);\n        results.push({ \n          success: false, \n          entry, \n          error: error instanceof Error ? error.message : 'Unknown error'\n        });\n      }\n    }\n\n    return results;\n  }\n\n  /**\n   * Get data that has changed since last sync\n   */\n  static async getDataSince(userId: number, lastSync: string) {\n    const syncDate = new Date(lastSync);\n\n    try {\n      // Get plants updated since last sync\n      const updatedPlants = await db\n        .select()\n        .from(plantInstances)\n        .leftJoin(plants, eq(plantInstances.plantId, plants.id))\n        .where(and(\n          eq(plantInstances.userId, userId),\n          // Add updatedAt filter when available\n        ));\n\n      // Get propagations updated since last sync\n      const updatedPropagations = await db\n        .select()\n        .from(propagations)\n        .leftJoin(plants, eq(propagations.plantId, plants.id))\n        .where(and(\n          eq(propagations.userId, userId),\n          // Add updatedAt filter when available\n        ));\n\n      // Get new care history since last sync\n      const newCareHistory = await db\n        .select()\n        .from(careHistory)\n        .where(and(\n          eq(careHistory.userId, userId),\n          // Add createdAt filter when available\n        ));\n\n      return {\n        plants: updatedPlants,\n        propagations: updatedPropagations,\n        careHistory: newCareHistory,\n        syncTimestamp: new Date().toISOString(),\n      };\n    } catch (error) {\n      console.error('Error getting data since last sync:', error);\n      throw new Error('Failed to get updated data');\n    }\n  }\n}"],"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","ignoreList":[]}