539d4ba21a334c8b400064728f7879f9
/**
 * @jest-environment jsdom
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _userevent = /*#__PURE__*/ _interop_require_default(require("@testing-library/user-event"));
const _renderhelpers = require("../../../test-utils/helpers/render-helpers.js");
const _ErrorDisplay = /*#__PURE__*/ _interop_require_wildcard(require("../../../components/shared/ErrorDisplay"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
describe('ErrorDisplay', ()=>{
    const defaultError = {
        message: 'Something went wrong',
        retryable: true
    };
    const mockOnRetry = jest.fn();
    beforeEach(()=>{
        jest.clearAllMocks();
    });
    describe('Basic Rendering', ()=>{
        it('renders error message', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ErrorDisplay.default, {
                error: defaultError,
                onRetry: mockOnRetry
            }));
            expect(_react1.screen.getByText('Error')).toBeInTheDocument();
            expect(_react1.screen.getByText('Something went wrong')).toBeInTheDocument();
        });
        it('does not render when error is null', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ErrorDisplay.default, {
                error: null,
                onRetry: mockOnRetry
            }));
            expect(_react1.screen.queryByText('Error')).not.toBeInTheDocument();
        });
        it('does not render when error is undefined', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ErrorDisplay.default, {
                error: undefined,
                onRetry: mockOnRetry
            }));
            expect(_react1.screen.queryByText('Error')).not.toBeInTheDocument();
        });
        it('applies custom className', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ErrorDisplay.default, {
                error: defaultError,
                className: "custom-error-class",
                onRetry: mockOnRetry
            }));
            const errorContainer = _react1.screen.getByText('Error').closest('div');
            expect(errorContainer).toHaveClass('custom-error-class');
        });
    });
    describe('Error Details', ()=>{
        it('shows error details when showDetails is true and details exist', ()=>{
            const errorWithDetails = {
                message: 'API Error',
                details: {
                    status: 500,
                    endpoint: '/api/plants'
                }
            };
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ErrorDisplay.default, {
                error: errorWithDetails,
                showDetails: true,
                onRetry: mockOnRetry
            }));
            expect(_react1.screen.getByText('Show technical details')).toBeInTheDocument();
        });
        it('does not show details section when showDetails is false', ()=>{
            const errorWithDetails = {
                message: 'API Error',
                details: {
                    status: 500,
                    endpoint: '/api/plants'
                }
            };
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ErrorDisplay.default, {
                error: errorWithDetails,
                showDetails: false,
                onRetry: mockOnRetry
            }));
            expect(_react1.screen.queryByText('Show technical details')).not.toBeInTheDocument();
        });
        it('does not show details section when no details exist', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ErrorDisplay.default, {
                error: defaultError,
                showDetails: true,
                onRetry: mockOnRetry
            }));
            expect(_react1.screen.queryByText('Show technical details')).not.toBeInTheDocument();
        });
        it('expands details when clicked', async ()=>{
            const user = _userevent.default.setup();
            const errorWithDetails = {
                message: 'API Error',
                details: {
                    status: 500,
                    endpoint: '/api/plants'
                }
            };
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ErrorDisplay.default, {
                error: errorWithDetails,
                showDetails: true,
                onRetry: mockOnRetry
            }));
            await user.click(_react1.screen.getByText('Show technical details'));
            expect(_react1.screen.getByText(/"status": 500/)).toBeInTheDocument();
            expect(_react1.screen.getByText(/"endpoint": "\/api\/plants"/)).toBeInTheDocument();
        });
    });
    describe('Retry Functionality', ()=>{
        it('shows retry button when error is retryable and onRetry is provided', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ErrorDisplay.default, {
                error: defaultError,
                onRetry: mockOnRetry
            }));
            expect(_react1.screen.getByRole('button', {
                name: /try again/i
            })).toBeInTheDocument();
        });
        it('does not show retry button when error is not retryable', ()=>{
            const nonRetryableError = {
                message: 'Permanent error',
                retryable: false
            };
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ErrorDisplay.default, {
                error: nonRetryableError,
                onRetry: mockOnRetry
            }));
            expect(_react1.screen.queryByRole('button', {
                name: /try again/i
            })).not.toBeInTheDocument();
        });
        it('does not show retry button when onRetry is not provided', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ErrorDisplay.default, {
                error: defaultError
            }));
            expect(_react1.screen.queryByRole('button', {
                name: /try again/i
            })).not.toBeInTheDocument();
        });
        it('calls onRetry when retry button is clicked', async ()=>{
            const user = _userevent.default.setup();
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ErrorDisplay.default, {
                error: defaultError,
                onRetry: mockOnRetry
            }));
            await user.click(_react1.screen.getByRole('button', {
                name: /try again/i
            }));
            expect(mockOnRetry).toHaveBeenCalled();
        });
        it('retry button has proper styling and icon', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ErrorDisplay.default, {
                error: defaultError,
                onRetry: mockOnRetry
            }));
            const retryButton = _react1.screen.getByRole('button', {
                name: /try again/i
            });
            expect(retryButton).toHaveClass('bg-red-100', 'border-red-300', 'text-red-800');
        });
    });
    describe('Accessibility', ()=>{
        it('has proper ARIA attributes', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ErrorDisplay.default, {
                error: defaultError,
                onRetry: mockOnRetry
            }));
            const errorMessage = _react1.screen.getByText('Something went wrong');
            expect(errorMessage).toHaveAttribute('role', 'alert');
            expect(errorMessage).toHaveAttribute('aria-live', 'polite');
        });
        it('has proper alert icon with aria-hidden', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ErrorDisplay.default, {
                error: defaultError,
                onRetry: mockOnRetry
            }));
            const alertIcon = document.querySelector('[aria-hidden="true"]');
            expect(alertIcon).toBeInTheDocument();
        });
        it('retry button is keyboard accessible', async ()=>{
            const user = _userevent.default.setup();
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ErrorDisplay.default, {
                error: defaultError,
                onRetry: mockOnRetry
            }));
            const retryButton = _react1.screen.getByRole('button', {
                name: /try again/i
            });
            retryButton.focus();
            await user.keyboard('{Enter}');
            expect(mockOnRetry).toHaveBeenCalled();
        });
    });
    describe('Visual Structure', ()=>{
        it('has proper error styling classes', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ErrorDisplay.default, {
                error: defaultError,
                onRetry: mockOnRetry
            }));
            const container = _react1.screen.getByText('Error').closest('div');
            expect(container).toHaveClass('border-red-200', 'bg-red-50');
        });
        it('has proper icon and text layout', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ErrorDisplay.default, {
                error: defaultError,
                onRetry: mockOnRetry
            }));
            const container = _react1.screen.getByText('Error').closest('div');
            expect(container.querySelector('.flex')).toBeInTheDocument();
        });
    });
});
describe('InlineErrorDisplay', ()=>{
    describe('Basic Rendering', ()=>{
        it('renders error message', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ErrorDisplay.InlineErrorDisplay, {
                error: "Field is required"
            }));
            expect(_react1.screen.getByText('Field is required')).toBeInTheDocument();
        });
        it('does not render when error is null', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ErrorDisplay.InlineErrorDisplay, {
                error: null
            }));
            expect(_react1.screen.queryByRole('alert')).not.toBeInTheDocument();
        });
        it('does not render when error is empty string', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ErrorDisplay.InlineErrorDisplay, {
                error: ""
            }));
            expect(_react1.screen.queryByRole('alert')).not.toBeInTheDocument();
        });
        it('applies custom className', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ErrorDisplay.InlineErrorDisplay, {
                error: "Error message",
                className: "custom-inline-error"
            }));
            const errorElement = _react1.screen.getByRole('alert');
            expect(errorElement).toHaveClass('custom-inline-error');
        });
    });
    describe('Accessibility', ()=>{
        it('has proper role attribute', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ErrorDisplay.InlineErrorDisplay, {
                error: "Validation error"
            }));
            expect(_react1.screen.getByRole('alert')).toBeInTheDocument();
        });
        it('has error icon with aria-hidden', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ErrorDisplay.InlineErrorDisplay, {
                error: "Error message"
            }));
            const icon = document.querySelector('[aria-hidden="true"]');
            expect(icon).toBeInTheDocument();
        });
    });
    describe('Visual Structure', ()=>{
        it('has proper styling classes', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ErrorDisplay.InlineErrorDisplay, {
                error: "Error message"
            }));
            const errorElement = _react1.screen.getByRole('alert');
            expect(errorElement).toHaveClass('text-red-600', 'text-sm');
        });
        it('displays error icon', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ErrorDisplay.InlineErrorDisplay, {
                error: "Error message"
            }));
            const errorElement = _react1.screen.getByRole('alert');
            expect(errorElement.querySelector('svg')).toBeInTheDocument();
        });
    });
    describe('Form Integration', ()=>{
        it('works correctly in form context', ()=>{
            const FormWithError = ({ hasError })=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("input", {
                            type: "text"
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_ErrorDisplay.InlineErrorDisplay, {
                            error: hasError ? 'This field is required' : null
                        })
                    ]
                });
            const { rerender } = (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(FormWithError, {
                hasError: false
            }));
            expect(_react1.screen.queryByRole('alert')).not.toBeInTheDocument();
            rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(FormWithError, {
                hasError: true
            }));
            expect(_react1.screen.getByRole('alert')).toBeInTheDocument();
            expect(_react1.screen.getByText('This field is required')).toBeInTheDocument();
        });
    });
});
describe('ErrorToast', ()=>{
    const mockOnDismiss = jest.fn();
    beforeEach(()=>{
        jest.clearAllMocks();
    });
    describe('Basic Rendering', ()=>{
        it('renders error toast with message', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ErrorDisplay.ErrorToast, {
                error: "Network connection failed",
                onDismiss: mockOnDismiss
            }));
            expect(_react1.screen.getByText('Error')).toBeInTheDocument();
            expect(_react1.screen.getByText('Network connection failed')).toBeInTheDocument();
        });
        it('applies custom className', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ErrorDisplay.ErrorToast, {
                error: "Error message",
                onDismiss: mockOnDismiss,
                className: "custom-toast-class"
            }));
            const toastContainer = _react1.screen.getByText('Error').closest('div');
            expect(toastContainer).toHaveClass('custom-toast-class');
        });
    });
    describe('Dismiss Functionality', ()=>{
        it('shows dismiss button', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ErrorDisplay.ErrorToast, {
                error: "Error message",
                onDismiss: mockOnDismiss
            }));
            expect(_react1.screen.getByRole('button', {
                name: /dismiss/i
            })).toBeInTheDocument();
        });
        it('calls onDismiss when dismiss button is clicked', async ()=>{
            const user = _userevent.default.setup();
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ErrorDisplay.ErrorToast, {
                error: "Error message",
                onDismiss: mockOnDismiss
            }));
            await user.click(_react1.screen.getByRole('button', {
                name: /dismiss/i
            }));
            expect(mockOnDismiss).toHaveBeenCalled();
        });
        it('dismiss button is keyboard accessible', async ()=>{
            const user = _userevent.default.setup();
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ErrorDisplay.ErrorToast, {
                error: "Error message",
                onDismiss: mockOnDismiss
            }));
            const dismissButton = _react1.screen.getByRole('button', {
                name: /dismiss/i
            });
            dismissButton.focus();
            await user.keyboard('{Enter}');
            expect(mockOnDismiss).toHaveBeenCalled();
        });
    });
    describe('Accessibility', ()=>{
        it('has proper screen reader text for dismiss button', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ErrorDisplay.ErrorToast, {
                error: "Error message",
                onDismiss: mockOnDismiss
            }));
            const dismissButton = _react1.screen.getByRole('button', {
                name: /dismiss/i
            });
            expect(dismissButton.querySelector('.sr-only')).toHaveTextContent('Dismiss');
        });
        it('has proper focus management', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ErrorDisplay.ErrorToast, {
                error: "Error message",
                onDismiss: mockOnDismiss
            }));
            const dismissButton = _react1.screen.getByRole('button', {
                name: /dismiss/i
            });
            expect(dismissButton).toHaveClass('focus:ring-2', 'focus:ring-red-500');
        });
    });
    describe('Visual Structure', ()=>{
        it('has proper toast positioning classes', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ErrorDisplay.ErrorToast, {
                error: "Error message",
                onDismiss: mockOnDismiss
            }));
            const toastContainer = _react1.screen.getByText('Error').closest('div');
            expect(toastContainer).toHaveClass('fixed', 'top-4', 'right-4', 'z-50');
        });
        it('has proper error styling', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ErrorDisplay.ErrorToast, {
                error: "Error message",
                onDismiss: mockOnDismiss
            }));
            const toastContainer = _react1.screen.getByText('Error').closest('div');
            expect(toastContainer).toHaveClass('bg-red-50', 'border-red-200', 'shadow-lg');
        });
        it('displays error icon', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ErrorDisplay.ErrorToast, {
                error: "Error message",
                onDismiss: mockOnDismiss
            }));
            const icon = document.querySelector('svg');
            expect(icon).toBeInTheDocument();
        });
    });
    describe('Toast Behavior', ()=>{
        it('renders as fixed positioned element', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ErrorDisplay.ErrorToast, {
                error: "Error message",
                onDismiss: mockOnDismiss
            }));
            const toastContainer = _react1.screen.getByText('Error').closest('div');
            expect(toastContainer).toHaveClass('fixed');
        });
        it('has proper z-index for overlay', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ErrorDisplay.ErrorToast, {
                error: "Error message",
                onDismiss: mockOnDismiss
            }));
            const toastContainer = _react1.screen.getByText('Error').closest('div');
            expect(toastContainer).toHaveClass('z-50');
        });
        it('has responsive width classes', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ErrorDisplay.ErrorToast, {
                error: "Error message",
                onDismiss: mockOnDismiss
            }));
            const toastContainer = _react1.screen.getByText('Error').closest('div');
            expect(toastContainer).toHaveClass('max-w-sm', 'w-full');
        });
    });
});

//# sourceMappingURL=data:application/json;base64,