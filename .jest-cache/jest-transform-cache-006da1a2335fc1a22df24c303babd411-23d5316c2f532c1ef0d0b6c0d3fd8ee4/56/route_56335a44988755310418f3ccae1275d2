f5f4f2146c6c25e9fa9f12ecb6615d0b
"use strict";

/* istanbul ignore next */
function cov_1bjg8xdhh9() {
  var path = "/Users/stefanbekker/projects/fancy-planties/src/app/api/plant-instances/locations/route.ts";
  var hash = "57ae477690270382795871901baa554a0f38a366";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/stefanbekker/projects/fancy-planties/src/app/api/plant-instances/locations/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 19
        }
      },
      "3": {
        start: {
          line: 11,
          column: 16
        },
        end: {
          line: 11,
          column: 38
        }
      },
      "4": {
        start: {
          line: 12,
          column: 24
        },
        end: {
          line: 12,
          column: 77
        }
      },
      "5": {
        start: {
          line: 13,
          column: 17
        },
        end: {
          line: 13,
          column: 55
        }
      },
      "6": {
        start: {
          line: 15,
          column: 4
        },
        end: {
          line: 36,
          column: 5
        }
      },
      "7": {
        start: {
          line: 16,
          column: 25
        },
        end: {
          line: 16,
          column: 62
        }
      },
      "8": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 23,
          column: 9
        }
      },
      "9": {
        start: {
          line: 18,
          column: 12
        },
        end: {
          line: 22,
          column: 15
        }
      },
      "10": {
        start: {
          line: 25,
          column: 26
        },
        end: {
          line: 25,
          column: 94
        }
      },
      "11": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 28,
          column: 11
        }
      },
      "12": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 30,
          column: 62
        }
      },
      "13": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 35,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "GET",
        decl: {
          start: {
            line: 14,
            column: 15
          },
          end: {
            line: 14,
            column: 18
          }
        },
        loc: {
          start: {
            line: 14,
            column: 28
          },
          end: {
            line: 37,
            column: 1
          }
        },
        line: 14
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 17,
            column: 8
          },
          end: {
            line: 23,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 17,
            column: 8
          },
          end: {
            line: 23,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 17
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0
    },
    f: {
      "0": 0,
      "1": 0
    },
    b: {
      "0": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/stefanbekker/projects/fancy-planties/src/app/api/plant-instances/locations/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport { PlantInstanceQueries } from '@/lib/db/queries/plant-instances';\nimport { validateRequest } from '@/lib/auth/server';\n\n// GET /api/plant-instances/locations - Get unique locations for the user\nexport async function GET(request: NextRequest) {\n  try {\n    const { user } = await validateRequest();\n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    // Get unique locations for the user\n    const locations = await PlantInstanceQueries.getUserLocations(user.id);\n    \n    return NextResponse.json({ locations });\n  } catch (error) {\n    console.error('Failed to get user locations:', error);\n    return NextResponse.json(\n      { error: 'Failed to get user locations' },\n      { status: 500 }\n    );\n  }\n}"],
      names: ["GET", "request", "user", "validateRequest", "NextResponse", "json", "error", "status", "locations", "PlantInstanceQueries", "getUserLocations", "id", "console"],
      mappings: ";;;;+BAKsBA;;;eAAAA;;;wBALoB;gCACL;yBACL;AAGzB,eAAeA,IAAIC,OAAoB;IAC5C,IAAI;QACF,MAAM,EAAEC,IAAI,EAAE,GAAG,MAAMC,IAAAA,wBAAe;QACtC,IAAI,CAACD,MAAM;YACT,OAAOE,oBAAY,CAACC,IAAI,CAAC;gBAAEC,OAAO;YAAe,GAAG;gBAAEC,QAAQ;YAAI;QACpE;QAEA,oCAAoC;QACpC,MAAMC,YAAY,MAAMC,oCAAoB,CAACC,gBAAgB,CAACR,KAAKS,EAAE;QAErE,OAAOP,oBAAY,CAACC,IAAI,CAAC;YAAEG;QAAU;IACvC,EAAE,OAAOF,OAAO;QACdM,QAAQN,KAAK,CAAC,iCAAiCA;QAC/C,OAAOF,oBAAY,CAACC,IAAI,CACtB;YAAEC,OAAO;QAA+B,GACxC;YAAEC,QAAQ;QAAI;IAElB;AACF"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "57ae477690270382795871901baa554a0f38a366"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1bjg8xdhh9 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1bjg8xdhh9();
cov_1bjg8xdhh9().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1bjg8xdhh9().s[1]++;
Object.defineProperty(exports, "GET", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_1bjg8xdhh9().f[0]++;
    cov_1bjg8xdhh9().s[2]++;
    return GET;
  }
});
const _server =
/* istanbul ignore next */
(cov_1bjg8xdhh9().s[3]++, require("next/server"));
const _plantinstances =
/* istanbul ignore next */
(cov_1bjg8xdhh9().s[4]++, require("../../../../lib/db/queries/plant-instances"));
const _server1 =
/* istanbul ignore next */
(cov_1bjg8xdhh9().s[5]++, require("../../../../lib/auth/server"));
async function GET(request) {
  /* istanbul ignore next */
  cov_1bjg8xdhh9().f[1]++;
  cov_1bjg8xdhh9().s[6]++;
  try {
    const {
      user
    } =
    /* istanbul ignore next */
    (cov_1bjg8xdhh9().s[7]++, await (0, _server1.validateRequest)());
    /* istanbul ignore next */
    cov_1bjg8xdhh9().s[8]++;
    if (!user) {
      /* istanbul ignore next */
      cov_1bjg8xdhh9().b[0][0]++;
      cov_1bjg8xdhh9().s[9]++;
      return _server.NextResponse.json({
        error: 'Unauthorized'
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_1bjg8xdhh9().b[0][1]++;
    }
    // Get unique locations for the user
    const locations =
    /* istanbul ignore next */
    (cov_1bjg8xdhh9().s[10]++, await _plantinstances.PlantInstanceQueries.getUserLocations(user.id));
    /* istanbul ignore next */
    cov_1bjg8xdhh9().s[11]++;
    return _server.NextResponse.json({
      locations
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1bjg8xdhh9().s[12]++;
    console.error('Failed to get user locations:', error);
    /* istanbul ignore next */
    cov_1bjg8xdhh9().s[13]++;
    return _server.NextResponse.json({
      error: 'Failed to get user locations'
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMWJqZzh4ZGhoOSIsImFjdHVhbENvdmVyYWdlIiwicyIsIkdFVCIsInJlcXVlc3QiLCJmIiwidXNlciIsIl9zZXJ2ZXIxIiwidmFsaWRhdGVSZXF1ZXN0IiwiYiIsIl9zZXJ2ZXIiLCJOZXh0UmVzcG9uc2UiLCJqc29uIiwiZXJyb3IiLCJzdGF0dXMiLCJsb2NhdGlvbnMiLCJfcGxhbnRpbnN0YW5jZXMiLCJQbGFudEluc3RhbmNlUXVlcmllcyIsImdldFVzZXJMb2NhdGlvbnMiLCJpZCIsImNvbnNvbGUiXSwic291cmNlcyI6WyIvVXNlcnMvc3RlZmFuYmVra2VyL3Byb2plY3RzL2ZhbmN5LXBsYW50aWVzL3NyYy9hcHAvYXBpL3BsYW50LWluc3RhbmNlcy9sb2NhdGlvbnMvcm91dGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmV4dFJlcXVlc3QsIE5leHRSZXNwb25zZSB9IGZyb20gJ25leHQvc2VydmVyJztcbmltcG9ydCB7IFBsYW50SW5zdGFuY2VRdWVyaWVzIH0gZnJvbSAnQC9saWIvZGIvcXVlcmllcy9wbGFudC1pbnN0YW5jZXMnO1xuaW1wb3J0IHsgdmFsaWRhdGVSZXF1ZXN0IH0gZnJvbSAnQC9saWIvYXV0aC9zZXJ2ZXInO1xuXG4vLyBHRVQgL2FwaS9wbGFudC1pbnN0YW5jZXMvbG9jYXRpb25zIC0gR2V0IHVuaXF1ZSBsb2NhdGlvbnMgZm9yIHRoZSB1c2VyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gR0VUKHJlcXVlc3Q6IE5leHRSZXF1ZXN0KSB7XG4gIHRyeSB7XG4gICAgY29uc3QgeyB1c2VyIH0gPSBhd2FpdCB2YWxpZGF0ZVJlcXVlc3QoKTtcbiAgICBpZiAoIXVzZXIpIHtcbiAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7IGVycm9yOiAnVW5hdXRob3JpemVkJyB9LCB7IHN0YXR1czogNDAxIH0pO1xuICAgIH1cblxuICAgIC8vIEdldCB1bmlxdWUgbG9jYXRpb25zIGZvciB0aGUgdXNlclxuICAgIGNvbnN0IGxvY2F0aW9ucyA9IGF3YWl0IFBsYW50SW5zdGFuY2VRdWVyaWVzLmdldFVzZXJMb2NhdGlvbnModXNlci5pZCk7XG4gICAgXG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHsgbG9jYXRpb25zIH0pO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBnZXQgdXNlciBsb2NhdGlvbnM6JywgZXJyb3IpO1xuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcbiAgICAgIHsgZXJyb3I6ICdGYWlsZWQgdG8gZ2V0IHVzZXIgbG9jYXRpb25zJyB9LFxuICAgICAgeyBzdGF0dXM6IDUwMCB9XG4gICAgKTtcbiAgfVxufSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0lBT0k7SUFBQUEsY0FBQSxZQUFBQSxDQUFBO01BQUEsT0FBQUMsY0FBQTtJQUFBO0VBQUE7RUFBQSxPQUFBQSxjQUFBO0FBQUE7QUFBQUQsY0FBQTtBQUFBQSxjQUFBLEdBQUFFLENBQUE7Ozs7OzsrQkFGa0I7Ozs7OztXQUFBQyxHQUFBOzs7OztrQ0FMb0I7OztrQ0FDTDs7O2tDQUNMO0FBR3pCLGVBQWVBLElBQUlDLE9BQW9CO0VBQUE7RUFBQUosY0FBQSxHQUFBSyxDQUFBO0VBQUFMLGNBQUEsR0FBQUUsQ0FBQTtFQUM1QyxJQUFJO0lBQ0YsTUFBTTtNQUFFSTtJQUFJLENBQUU7SUFBQTtJQUFBLENBQUFOLGNBQUEsR0FBQUUsQ0FBQSxPQUFHLE1BQU0sSUFBQUssUUFBQSxDQUFBQyxlQUFlO0lBQUE7SUFBQVIsY0FBQSxHQUFBRSxDQUFBO0lBQ3RDLElBQUksQ0FBQ0ksSUFBQSxFQUFNO01BQUE7TUFBQU4sY0FBQSxHQUFBUyxDQUFBO01BQUFULGNBQUEsR0FBQUUsQ0FBQTtNQUNULE9BQU9RLE9BQUEsQ0FBQUMsWUFBWSxDQUFDQyxJQUFJLENBQUM7UUFBRUMsS0FBQSxFQUFPO01BQWUsR0FBRztRQUFFQyxNQUFBLEVBQVE7TUFBSTtJQUNwRTtJQUFBO0lBQUE7TUFBQWQsY0FBQSxHQUFBUyxDQUFBO0lBQUE7SUFFQTtJQUNBLE1BQU1NLFNBQUE7SUFBQTtJQUFBLENBQUFmLGNBQUEsR0FBQUUsQ0FBQSxRQUFZLE1BQU1jLGVBQUEsQ0FBQUMsb0JBQW9CLENBQUNDLGdCQUFnQixDQUFDWixJQUFBLENBQUthLEVBQUU7SUFBQTtJQUFBbkIsY0FBQSxHQUFBRSxDQUFBO0lBRXJFLE9BQU9RLE9BQUEsQ0FBQUMsWUFBWSxDQUFDQyxJQUFJLENBQUM7TUFBRUc7SUFBVTtFQUN2QyxFQUFFLE9BQU9GLEtBQUEsRUFBTztJQUFBO0lBQUFiLGNBQUEsR0FBQUUsQ0FBQTtJQUNka0IsT0FBQSxDQUFRUCxLQUFLLENBQUMsaUNBQWlDQSxLQUFBO0lBQUE7SUFBQWIsY0FBQSxHQUFBRSxDQUFBO0lBQy9DLE9BQU9RLE9BQUEsQ0FBQUMsWUFBWSxDQUFDQyxJQUFJLENBQ3RCO01BQUVDLEtBQUEsRUFBTztJQUErQixHQUN4QztNQUFFQyxNQUFBLEVBQVE7SUFBSTtFQUVsQjtBQUNGIiwiaWdub3JlTGlzdCI6W119