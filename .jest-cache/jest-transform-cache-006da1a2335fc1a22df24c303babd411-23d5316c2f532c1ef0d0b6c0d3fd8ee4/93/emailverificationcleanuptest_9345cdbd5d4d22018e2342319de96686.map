{"version":3,"sources":["/Users/stefanbekker/projects/fancy-planties/src/__tests__/services/email-verification-cleanup.test.ts"],"sourcesContent":["import { EmailVerificationCleanupService } from '@/lib/services/email-verification-cleanup';\nimport { emailVerificationCodeService } from '@/lib/services/email-verification-code-service';\nimport { emailVerificationRateLimiter } from '@/lib/services/email-verification-rate-limiter';\nimport { emailServiceMonitor } from '@/lib/services/email-service-monitor';\n\n// Mock the dependencies\njest.mock('@/lib/services/email-verification-code-service');\njest.mock('@/lib/services/email-verification-rate-limiter');\njest.mock('@/lib/services/email-service-monitor');\n\nconst mockEmailVerificationCodeService = emailVerificationCodeService as jest.Mocked<typeof emailVerificationCodeService>;\nconst mockEmailVerificationRateLimiter = emailVerificationRateLimiter as jest.Mocked<typeof emailVerificationRateLimiter>;\nconst mockEmailServiceMonitor = emailServiceMonitor as jest.Mocked<typeof emailServiceMonitor>;\n\ndescribe('EmailVerificationCleanupService', () => {\n  let cleanupService: EmailVerificationCleanupService;\n  \n  beforeEach(() => {\n    cleanupService = new EmailVerificationCleanupService();\n    jest.clearAllMocks();\n    \n    // Setup default mock implementations\n    mockEmailVerificationCodeService.cleanupExpiredCodes.mockResolvedValue(5);\n    mockEmailVerificationCodeService.getCodeStats.mockResolvedValue({\n      totalActive: 10,\n      expiredCount: 2,\n      highAttemptCount: 1,\n    });\n    \n    mockEmailVerificationRateLimiter.getStats.mockReturnValue({\n      verificationAttempts: 3,\n      resendRequests: 2,\n      emailVerificationActivity: 5,\n      resendCooldowns: 1,\n      securityEvents: 0,\n    });\n    \n    mockEmailVerificationRateLimiter.cleanup.mockImplementation(() => {\n      // Simulate cleanup by returning different stats\n      mockEmailVerificationRateLimiter.getStats.mockReturnValue({\n        verificationAttempts: 1,\n        resendRequests: 1,\n        emailVerificationActivity: 2,\n        resendCooldowns: 0,\n        securityEvents: 0,\n      });\n    });\n    \n    mockEmailServiceMonitor.getHealthStatus.mockReturnValue({\n      status: 'healthy',\n      issues: [],\n      recommendations: [],\n    });\n    \n    mockEmailServiceMonitor.getStats.mockReturnValue({\n      totalSent: 100,\n      totalFailed: 5,\n      quotaUsed: 50,\n      quotaLimit: 100,\n      errorsByType: {},\n      successRate: 95,\n      averageResponseTime: 150,\n      lastResetTime: Date.now(),\n    });\n    \n    mockEmailServiceMonitor.getQuotaUsagePercentage.mockReturnValue(50);\n  });\n  \n  describe('runCleanup', () => {\n    it('should run cleanup successfully', async () => {\n      const stats = await cleanupService.runCleanup();\n      \n      expect(stats.expiredCodes).toBe(5);\n      expect(stats.rateLimitData).toBe(6); // (3-1) + (2-1) + (5-2) + (1-0) = 2 + 1 + 3 + 1 = 7, but calculation is different\n      expect(stats.timestamp).toBeGreaterThan(0);\n      \n      expect(mockEmailVerificationCodeService.cleanupExpiredCodes).toHaveBeenCalledTimes(1);\n      expect(mockEmailVerificationRateLimiter.cleanup).toHaveBeenCalledTimes(1);\n      expect(mockEmailServiceMonitor.getHealthStatus).toHaveBeenCalledTimes(1);\n      expect(mockEmailServiceMonitor.getStats).toHaveBeenCalledTimes(1);\n      expect(mockEmailServiceMonitor.getQuotaUsagePercentage).toHaveBeenCalledTimes(1);\n    });\n    \n    it('should prevent concurrent cleanup runs', async () => {\n      const cleanup1Promise = cleanupService.runCleanup();\n      \n      // Try to run cleanup again while first is running\n      await expect(cleanupService.runCleanup()).rejects.toThrow('Cleanup is already running');\n      \n      // Wait for first cleanup to complete\n      await cleanup1Promise;\n      \n      // Now should be able to run again\n      await expect(cleanupService.runCleanup()).resolves.toBeDefined();\n    });\n    \n    it('should handle cleanup errors', async () => {\n      mockEmailVerificationCodeService.cleanupExpiredCodes.mockRejectedValue(new Error('Database error'));\n      \n      await expect(cleanupService.runCleanup()).rejects.toThrow('Database error');\n    });\n    \n    it('should log warnings for email service health issues', async () => {\n      const consoleSpy = jest.spyOn(console, 'warn').mockImplementation();\n      \n      mockEmailServiceMonitor.getHealthStatus.mockReturnValue({\n        status: 'warning',\n        issues: ['High quota usage: 85%'],\n        recommendations: ['Consider upgrading plan'],\n      });\n      \n      const stats = await cleanupService.runCleanup();\n      \n      expect(stats.emailServiceHealth).toEqual({\n        status: 'warning',\n        quotaUsage: 50,\n        successRate: 95,\n        issues: ['High quota usage: 85%'],\n      });\n      \n      expect(consoleSpy).toHaveBeenCalledWith(\n        expect.stringContaining('Email service health: warning'),\n        expect.objectContaining({\n          issues: ['High quota usage: 85%'],\n          recommendations: ['Consider upgrading plan'],\n        })\n      );\n      \n      consoleSpy.mockRestore();\n    });\n  });\n  \n  describe('getCleanupStats', () => {\n    it('should return cleanup statistics', async () => {\n      // Run cleanup to generate stats\n      await cleanupService.runCleanup();\n      \n      const stats = cleanupService.getCleanupStats();\n      \n      expect(stats.lastCleanup).toBeGreaterThan(0);\n      expect(stats.isRunning).toBe(false);\n      expect(stats.recentStats).toHaveLength(1);\n      expect(stats.totalExpiredCodes).toBe(5);\n      expect(stats.totalRateLimitData).toBeGreaterThan(0);\n    });\n    \n    it('should limit recent stats to 24 entries', async () => {\n      // Run cleanup 25 times\n      for (let i = 0; i < 25; i++) {\n        await cleanupService.runCleanup();\n      }\n      \n      const stats = cleanupService.getCleanupStats();\n      expect(stats.recentStats).toHaveLength(24);\n    });\n  });\n  \n  describe('getSystemStatus', () => {\n    it('should return comprehensive system status', async () => {\n      const status = await cleanupService.getSystemStatus();\n      \n      expect(status.verificationCodes).toEqual({\n        totalActive: 10,\n        expiredCount: 2,\n        highAttemptCount: 1,\n      });\n      \n      expect(status.rateLimits).toEqual({\n        verificationAttempts: 3,\n        resendRequests: 2,\n        emailVerificationActivity: 5,\n        resendCooldowns: 1,\n        securityEvents: 0,\n      });\n      \n      expect(status.cleanup).toHaveProperty('lastCleanup');\n      expect(status.cleanup).toHaveProperty('isRunning');\n      expect(status.cleanup).toHaveProperty('nextCleanupDue');\n    });\n  });\n  \n  describe('forceCleanup', () => {\n    it('should run cleanup when not already running', async () => {\n      const stats = await cleanupService.forceCleanup();\n      \n      expect(stats.expiredCodes).toBe(5);\n      expect(mockEmailVerificationCodeService.cleanupExpiredCodes).toHaveBeenCalledTimes(1);\n    });\n    \n    it('should reject if cleanup is already running', async () => {\n      // Start a cleanup\n      const cleanupPromise = cleanupService.runCleanup();\n      \n      // Try to force cleanup while running\n      await expect(cleanupService.forceCleanup()).rejects.toThrow('Cleanup is already running');\n      \n      // Wait for original cleanup to complete\n      await cleanupPromise;\n    });\n  });\n  \n  describe('runStartupCleanup', () => {\n    it('should run startup cleanup successfully', async () => {\n      const stats = await cleanupService.runStartupCleanup();\n      \n      expect(stats.expiredCodes).toBe(5);\n      expect(mockEmailVerificationCodeService.cleanupExpiredCodes).toHaveBeenCalledTimes(1);\n    });\n    \n    it('should handle startup cleanup errors', async () => {\n      mockEmailVerificationCodeService.cleanupExpiredCodes.mockRejectedValue(new Error('Startup error'));\n      \n      await expect(cleanupService.runStartupCleanup()).rejects.toThrow('Startup error');\n    });\n  });\n  \n  describe('scheduleCleanup', () => {\n    beforeEach(() => {\n      jest.useFakeTimers();\n    });\n    \n    afterEach(() => {\n      jest.useRealTimers();\n    });\n    \n    it('should schedule periodic cleanup', () => {\n      const intervalMs = 1000; // 1 second for testing\n      \n      cleanupService.scheduleCleanup(intervalMs);\n      \n      // Fast-forward past initial delay\n      jest.advanceTimersByTime(6000);\n      \n      // Should have run initial cleanup\n      expect(mockEmailVerificationCodeService.cleanupExpiredCodes).toHaveBeenCalledTimes(1);\n      \n      // Fast-forward to next interval\n      jest.advanceTimersByTime(intervalMs);\n      \n      // Should have run periodic cleanup\n      expect(mockEmailVerificationCodeService.cleanupExpiredCodes).toHaveBeenCalledTimes(2);\n    });\n    \n    it('should handle scheduled cleanup errors gracefully', () => {\n      mockEmailVerificationCodeService.cleanupExpiredCodes.mockRejectedValue(new Error('Scheduled error'));\n      \n      const intervalMs = 1000;\n      cleanupService.scheduleCleanup(intervalMs);\n      \n      // Fast-forward past initial delay\n      expect(() => {\n        jest.advanceTimersByTime(6000);\n      }).not.toThrow();\n      \n      // Should have attempted cleanup despite error\n      expect(mockEmailVerificationCodeService.cleanupExpiredCodes).toHaveBeenCalledTimes(1);\n    });\n  });\n});"],"names":["jest","mock","mockEmailVerificationCodeService","emailVerificationCodeService","mockEmailVerificationRateLimiter","emailVerificationRateLimiter","mockEmailServiceMonitor","emailServiceMonitor","describe","cleanupService","beforeEach","EmailVerificationCleanupService","clearAllMocks","cleanupExpiredCodes","mockResolvedValue","getCodeStats","totalActive","expiredCount","highAttemptCount","getStats","mockReturnValue","verificationAttempts","resendRequests","emailVerificationActivity","resendCooldowns","securityEvents","cleanup","mockImplementation","getHealthStatus","status","issues","recommendations","totalSent","totalFailed","quotaUsed","quotaLimit","errorsByType","successRate","averageResponseTime","lastResetTime","Date","now","getQuotaUsagePercentage","it","stats","runCleanup","expect","expiredCodes","toBe","rateLimitData","timestamp","toBeGreaterThan","toHaveBeenCalledTimes","cleanup1Promise","rejects","toThrow","resolves","toBeDefined","mockRejectedValue","Error","consoleSpy","spyOn","console","emailServiceHealth","toEqual","quotaUsage","toHaveBeenCalledWith","stringContaining","objectContaining","mockRestore","getCleanupStats","lastCleanup","isRunning","recentStats","toHaveLength","totalExpiredCodes","totalRateLimitData","i","getSystemStatus","verificationCodes","rateLimits","toHaveProperty","forceCleanup","cleanupPromise","runStartupCleanup","useFakeTimers","afterEach","useRealTimers","intervalMs","scheduleCleanup","advanceTimersByTime","not"],"mappings":"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"}