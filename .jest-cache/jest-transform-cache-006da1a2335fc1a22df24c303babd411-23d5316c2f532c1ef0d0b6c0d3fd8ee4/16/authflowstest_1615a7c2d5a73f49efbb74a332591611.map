{"version":3,"sources":["/Users/stefanbekker/projects/fancy-planties/src/__tests__/integration/auth-flows.test.js"],"sourcesContent":["// Authentication Flow Integration Tests\n// Tests complete signup, login, and logout workflows\n\nimport { screen, waitFor } from '@testing-library/react';\nimport { renderWithProviders, userInteractions, testUtils } from '@/test-utils';\nimport { mockApiResponse, mockApiError, resetApiMocks } from '@/test-utils/helpers/api-helpers';\nimport { createTestUser, createTestSession } from '@/test-utils/factories/user-factory';\nimport SignUpForm from '@/components/auth/SignUpForm';\nimport SignInForm from '@/components/auth/SignInForm';\nimport LogoutButton from '@/components/auth/LogoutButton';\n\n// Mock Next.js router\nconst mockPush = jest.fn();\nconst mockRefresh = jest.fn();\nconst mockGet = jest.fn(() => null);\n\n// Mock the navigation hooks before importing components\njest.mock('next/navigation', () => ({\n  useRouter: () => ({\n    push: mockPush,\n    refresh: mockRefresh,\n  }),\n  useSearchParams: () => ({\n    get: mockGet,\n  }),\n}));\n\ndescribe('Authentication Flow Integration Tests', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    resetApiMocks();\n    mockPush.mockClear();\n    mockRefresh.mockClear();\n  });\n\n  afterEach(() => {\n    resetApiMocks();\n  });\n\n  describe('Complete Signup Workflow', () => {\n    it('should complete full signup workflow from form submission to authenticated state', async () => {\n      // Arrange\n      const testUser = createTestUser({\n        name: 'John Doe',\n        email: 'john@example.com',\n      });\n      \n      mockApiResponse({\n        'POST /api/auth/signup': {\n          status: 200,\n          data: {\n            success: true,\n            user: {\n              id: testUser.id,\n              email: testUser.email,\n              name: testUser.name,\n            },\n          },\n        },\n      });\n\n      const { user } = renderWithProviders(<SignUpForm />);\n\n      // Act - Fill out signup form\n      await userInteractions.fillForm({\n        'Full Name': 'John Doe',\n        'Email Address': 'john@example.com',\n        'Password': 'SecurePass123!',\n      }, user);\n\n      // Submit form\n      await userInteractions.submitForm(user, 'Create Account');\n\n      // Assert - Verify API call was made with correct data\n      await waitFor(() => {\n        expect(global.fetch).toHaveBeenCalledWith(\n          '/api/auth/signup',\n          expect.objectContaining({\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: expect.stringContaining('john@example.com'),\n          })\n        );\n      });\n\n      // Assert - Verify form shows loading state during submission\n      expect(screen.getByText('Creating account...')).toBeInTheDocument();\n    });\n\n    it('should handle signup validation errors properly', async () => {\n      // Arrange\n      mockApiResponse({\n        'POST /api/auth/signup': {\n          status: 400,\n          data: {\n            error: 'Validation failed',\n            errors: {\n              email: 'Email is already in use',\n              password: 'Password must be at least 8 characters',\n            },\n          },\n        },\n      });\n\n      const { user } = renderWithProviders(<SignUpForm />);\n\n      // Act - Submit form with valid client data but server errors\n      await userInteractions.fillForm({\n        'Full Name': 'John Doe',\n        'Email Address': 'existing@example.com',\n        'Password': 'ValidPass123!',\n      }, user);\n\n      await userInteractions.submitForm(user, 'Create Account');\n\n      // Assert - Verify server error messages are displayed\n      await waitFor(() => {\n        expect(screen.getByText('Email is already in use')).toBeInTheDocument();\n        expect(screen.getByText('Password must be at least 8 characters')).toBeInTheDocument();\n      });\n\n      // Assert - Verify no redirect occurred\n      expect(mockPush).not.toHaveBeenCalled();\n    });\n\n    it('should handle signup server errors gracefully', async () => {\n      // Arrange\n      mockApiError('/api/auth/signup', 500, { error: 'Internal server error' }, 'POST');\n\n      const { user } = renderWithProviders(<SignUpForm />);\n\n      // Act - Submit valid form data\n      await userInteractions.fillForm({\n        'Full Name': 'John Doe',\n        'Email Address': 'john@example.com',\n        'Password': 'SecurePass123!',\n      }, user);\n\n      await userInteractions.submitForm(user, 'Create Account');\n\n      // Assert - Verify error message is displayed\n      await waitFor(() => {\n        expect(screen.getByText('Internal server error')).toBeInTheDocument();\n      });\n\n      // Assert - Verify no redirect occurred\n      expect(mockPush).not.toHaveBeenCalled();\n    });\n  });\n\n  describe('Login Workflow with Session Persistence', () => {\n    it('should complete login workflow with session persistence', async () => {\n      // Arrange\n      const testUser = createTestUser({\n        email: 'john@example.com',\n      });\n      \n      mockApiResponse({\n        'POST /api/auth/signin': {\n          status: 200,\n          data: {\n            success: true,\n            user: {\n              id: testUser.id,\n              email: testUser.email,\n              name: testUser.name,\n            },\n          },\n        },\n      });\n\n      const { user } = renderWithProviders(<SignInForm />);\n\n      // Act - Fill out login form\n      await userInteractions.fillForm({\n        'Email Address': 'john@example.com',\n        'Password': 'SecurePass123!',\n      }, user);\n\n      // Submit form\n      await userInteractions.submitForm(user, 'Sign In');\n\n      // Assert - Verify API call was made with correct credentials\n      await waitFor(() => {\n        expect(global.fetch).toHaveBeenCalledWith(\n          '/api/auth/signin',\n          expect.objectContaining({\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n              email: 'john@example.com',\n              password: 'SecurePass123!',\n            }),\n          })\n        );\n      });\n\n      // Assert - Verify redirect to dashboard\n      await waitFor(() => {\n        expect(mockPush).toHaveBeenCalledWith('/dashboard');\n        expect(mockRefresh).toHaveBeenCalled();\n      });\n    });\n\n    it('should handle login with redirect parameter', async () => {\n      // Arrange\n      const testUser = createTestUser();\n      \n      // Mock useSearchParams to return redirect parameter\n      jest.doMock('next/navigation', () => ({\n        useRouter: () => ({\n          push: mockPush,\n          refresh: mockRefresh,\n        }),\n        useSearchParams: () => ({\n          get: jest.fn((param) => param === 'redirect' ? '/dashboard/plants' : null),\n        }),\n      }));\n      \n      mockApiResponse({\n        'POST /api/auth/signin': {\n          status: 200,\n          data: {\n            success: true,\n            user: {\n              id: testUser.id,\n              email: testUser.email,\n              name: testUser.name,\n            },\n          },\n        },\n      });\n\n      const { user } = renderWithProviders(<SignInForm />);\n\n      // Act - Complete login\n      await userInteractions.fillForm({\n        'Email Address': 'john@example.com',\n        'Password': 'SecurePass123!',\n      }, user);\n\n      await userInteractions.submitForm(user, 'Sign In');\n\n      // Assert - Verify redirect to intended page\n      await waitFor(() => {\n        expect(mockPush).toHaveBeenCalledWith('/dashboard/plants');\n      });\n    });\n\n    it('should handle invalid login credentials', async () => {\n      // Arrange\n      mockApiResponse({\n        'POST /api/auth/signin': {\n          status: 401,\n          data: {\n            error: 'Invalid email or password',\n          },\n        },\n      });\n\n      const { user } = renderWithProviders(<SignInForm />);\n\n      // Act - Submit invalid credentials\n      await userInteractions.fillForm({\n        'Email Address': 'wrong@example.com',\n        'Password': 'wrongpassword',\n      }, user);\n\n      await userInteractions.submitForm(user, 'Sign In');\n\n      // Assert - Verify error message is displayed\n      await waitFor(() => {\n        expect(screen.getByText('Invalid email or password')).toBeInTheDocument();\n      });\n\n      // Assert - Verify no redirect occurred\n      expect(mockPush).not.toHaveBeenCalled();\n    });\n\n    it('should handle login validation errors', async () => {\n      // Arrange\n      mockApiResponse({\n        'POST /api/auth/signin': {\n          status: 400,\n          data: {\n            error: 'Validation failed',\n            errors: {\n              email: 'Please enter a valid email address',\n              password: 'Password is required',\n            },\n          },\n        },\n      });\n\n      const { user } = renderWithProviders(<SignInForm />);\n\n      // Act - Submit form with invalid data\n      await userInteractions.fillForm({\n        'Email Address': 'invalid-email',\n        'Password': 'validpass',\n      }, user);\n\n      await userInteractions.submitForm(user, 'Sign In');\n\n      // Assert - Verify field-specific errors are displayed\n      await waitFor(() => {\n        expect(screen.getByText('Please enter a valid email address')).toBeInTheDocument();\n        expect(screen.getByText('Password is required')).toBeInTheDocument();\n      });\n    });\n  });\n\n  describe('Logout and Session Cleanup', () => {\n    it('should complete logout workflow with proper session cleanup', async () => {\n      // Arrange\n      mockApiResponse({\n        'POST /api/auth/signout': {\n          status: 200,\n          data: {\n            success: true,\n            message: 'Signed out successfully',\n          },\n        },\n      });\n\n      const { user } = renderWithProviders(<LogoutButton />);\n\n      // Act - Click logout button\n      const logoutButton = screen.getByRole('button', { name: /sign out/i });\n      await user.click(logoutButton);\n\n      // Assert - Verify API call was made\n      await waitFor(() => {\n        expect(global.fetch).toHaveBeenCalledWith(\n          '/api/auth/signout',\n          expect.objectContaining({\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n          })\n        );\n      });\n\n      // Assert - Verify redirect to signin page\n      await waitFor(() => {\n        expect(mockPush).toHaveBeenCalledWith('/auth/signin');\n        expect(mockRefresh).toHaveBeenCalled();\n      });\n    });\n\n    it('should handle logout when no active session exists', async () => {\n      // Arrange\n      mockApiResponse({\n        'POST /api/auth/signout': {\n          status: 401,\n          data: {\n            error: 'No active session',\n          },\n        },\n      });\n\n      const { user } = renderWithProviders(<LogoutButton />);\n\n      // Act - Click logout button\n      const logoutButton = screen.getByRole('button', { name: /sign out/i });\n      await user.click(logoutButton);\n\n      // Assert - Verify redirect still occurs (client-side logout)\n      await waitFor(() => {\n        expect(mockPush).toHaveBeenCalledWith('/auth/signin');\n        expect(mockRefresh).toHaveBeenCalled();\n      });\n    });\n\n    it('should handle logout server errors gracefully', async () => {\n      // Arrange\n      mockApiError('/api/auth/signout', 500, { error: 'Internal server error' }, 'POST');\n\n      const { user } = renderWithProviders(<LogoutButton />);\n\n      // Act - Click logout button\n      const logoutButton = screen.getByRole('button', { name: /sign out/i });\n      await user.click(logoutButton);\n\n      // Assert - Verify redirect occurs even on server error (fail-safe logout)\n      await waitFor(() => {\n        expect(mockPush).toHaveBeenCalledWith('/auth/signin');\n        expect(mockRefresh).toHaveBeenCalled();\n      });\n    });\n\n    it('should show loading state during logout process', async () => {\n      // Arrange\n      let resolveLogout;\n      const logoutPromise = new Promise((resolve) => {\n        resolveLogout = resolve;\n      });\n\n      global.fetch = jest.fn(() => logoutPromise);\n\n      const { user } = renderWithProviders(<LogoutButton />);\n\n      // Act - Click logout button\n      const logoutButton = screen.getByRole('button', { name: /sign out/i });\n      await user.click(logoutButton);\n\n      // Assert - Verify loading state is shown\n      expect(screen.getByText('Signing out...')).toBeInTheDocument();\n      expect(logoutButton).toHaveClass('btn--loading');\n\n      // Complete the logout\n      resolveLogout({\n        ok: true,\n        status: 200,\n        json: () => Promise.resolve({ success: true }),\n      });\n\n      // Assert - Verify loading state is cleared\n      await waitFor(() => {\n        expect(screen.queryByText('Signing out...')).not.toBeInTheDocument();\n      });\n    });\n  });  describe\n('End-to-End Authentication Flow', () => {\n    it('should complete full authentication cycle: signup -> login -> logout', async () => {\n      const testUser = createTestUser({\n        name: 'Jane Doe',\n        email: 'jane@example.com',\n      });\n\n      // Step 1: Signup\n      mockApiResponse({\n        'POST /api/auth/signup': {\n          status: 200,\n          data: {\n            success: true,\n            user: {\n              id: testUser.id,\n              email: testUser.email,\n              name: testUser.name,\n            },\n          },\n        },\n      });\n\n      const { user: userEvent, rerender } = renderWithProviders(<SignUpForm />);\n\n      // Complete signup\n      await userInteractions.fillForm({\n        'Full Name': 'Jane Doe',\n        'Email Address': 'jane@example.com',\n        'Password': 'SecurePass123!',\n      }, userEvent);\n\n      await userInteractions.submitForm(userEvent, 'Create Account');\n\n      await waitFor(() => {\n        expect(mockPush).toHaveBeenCalledWith('/dashboard');\n      });\n\n      // Reset mocks for next step\n      jest.clearAllMocks();\n      mockPush.mockClear();\n\n      // Step 2: Login (simulate returning user)\n      mockApiResponse({\n        'POST /api/auth/signin': {\n          status: 200,\n          data: {\n            success: true,\n            user: {\n              id: testUser.id,\n              email: testUser.email,\n              name: testUser.name,\n            },\n          },\n        },\n      });\n\n      rerender(<SignInForm />);\n\n      // Complete login\n      await userInteractions.fillForm({\n        'Email Address': 'jane@example.com',\n        'Password': 'SecurePass123!',\n      }, userEvent);\n\n      await userInteractions.submitForm(userEvent, 'Sign In');\n\n      await waitFor(() => {\n        expect(mockPush).toHaveBeenCalledWith('/dashboard');\n      });\n\n      // Reset mocks for logout\n      jest.clearAllMocks();\n      mockPush.mockClear();\n\n      // Step 3: Logout\n      mockApiResponse({\n        'POST /api/auth/signout': {\n          status: 200,\n          data: {\n            success: true,\n            message: 'Signed out successfully',\n          },\n        },\n      });\n\n      rerender(<LogoutButton />);\n\n      // Complete logout\n      const logoutButton = screen.getByRole('button', { name: /sign out/i });\n      await userEvent.click(logoutButton);\n\n      await waitFor(() => {\n        expect(mockPush).toHaveBeenCalledWith('/auth/signin');\n      });\n    });\n\n    it('should maintain form state during validation errors', async () => {\n      // Arrange\n      mockApiResponse({\n        'POST /api/auth/signin': {\n          status: 400,\n          data: {\n            error: 'Validation failed',\n            errors: {\n              password: 'Password is required',\n            },\n          },\n        },\n      });\n\n      const { user } = renderWithProviders(<SignInForm />);\n\n      // Act - Fill form partially and submit\n      await userInteractions.fillForm({\n        'Email Address': 'jane@example.com',\n      }, user);\n\n      await userInteractions.submitForm(user, 'Sign In');\n\n      // Assert - Verify form maintains email value after error\n      await waitFor(() => {\n        expect(screen.getByDisplayValue('jane@example.com')).toBeInTheDocument();\n        expect(screen.getByText('Password is required')).toBeInTheDocument();\n      });\n    });\n  });\n});"],"names":["jest","mock","useRouter","push","mockPush","refresh","mockRefresh","useSearchParams","get","mockGet","fn","describe","beforeEach","clearAllMocks","resetApiMocks","mockClear","afterEach","it","testUser","createTestUser","name","email","mockApiResponse","status","data","success","user","id","renderWithProviders","SignUpForm","userInteractions","fillForm","submitForm","waitFor","expect","global","fetch","toHaveBeenCalledWith","objectContaining","method","headers","body","stringContaining","screen","getByText","toBeInTheDocument","error","errors","password","not","toHaveBeenCalled","mockApiError","SignInForm","JSON","stringify","doMock","param","message","LogoutButton","logoutButton","getByRole","click","resolveLogout","logoutPromise","Promise","resolve","toHaveClass","ok","json","queryByText","userEvent","rerender","getByDisplayValue"],"mappings":"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"}