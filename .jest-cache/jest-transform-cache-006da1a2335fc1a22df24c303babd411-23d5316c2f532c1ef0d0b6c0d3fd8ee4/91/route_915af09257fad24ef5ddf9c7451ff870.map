{"version":3,"names":["cov_12uuylwt9r","actualCoverage","s","GET","request","params","f","user","_server1","validateRequest","b","_server","NextResponse","json","error","status","resolvedParams","plantInstanceId","parseInt","isNaN","searchParams","URL","url","careType","get","undefined","startDate","Date","endDate","limit","offset","sortBy","sortOrder","filters","careHistory","_carehistory","CareHistoryQueries","getCareHistoryForPlant","id","console"],"sources":["/Users/stefanbekker/projects/fancy-planties/src/app/api/care/history/[plantInstanceId]/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { CareHistoryQueries } from '@/lib/db/queries/care-history';\nimport { validateRequest } from '@/lib/auth/server';\n\n// GET /api/care/history/[plantInstanceId] - Get care history for a plant instance\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: Promise<{ plantInstanceId: string }> }\n) {\n  try {\n    const { user } = await validateRequest();\n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const resolvedParams = await params;\n    const plantInstanceId = parseInt(resolvedParams.plantInstanceId, 10);\n    if (isNaN(plantInstanceId)) {\n      return NextResponse.json({ error: 'Invalid plant instance ID' }, { status: 400 });\n    }\n\n    // Get query parameters for filtering\n    const { searchParams } = new URL(request.url);\n    const careType = searchParams.get('careType') || undefined;\n    const startDate = searchParams.get('startDate') ? new Date(searchParams.get('startDate')!) : undefined;\n    const endDate = searchParams.get('endDate') ? new Date(searchParams.get('endDate')!) : undefined;\n    const limit = searchParams.get('limit') ? parseInt(searchParams.get('limit')!, 10) : 50;\n    const offset = searchParams.get('offset') ? parseInt(searchParams.get('offset')!, 10) : 0;\n    const sortBy = searchParams.get('sortBy') as 'care_date' | 'care_type' | 'created_at' || 'care_date';\n    const sortOrder = searchParams.get('sortOrder') as 'asc' | 'desc' || 'desc';\n\n    const filters = {\n      careType: careType as any,\n      startDate,\n      endDate,\n      limit,\n      offset,\n      sortBy,\n      sortOrder,\n    };\n\n    const careHistory = await CareHistoryQueries.getCareHistoryForPlant(\n      plantInstanceId,\n      user.id,\n      filters\n    );\n\n    return NextResponse.json(careHistory);\n  } catch (error) {\n    console.error('Failed to get care history:', error);\n    return NextResponse.json(\n      { error: 'Failed to get care history' },\n      { status: 500 }\n    );\n  }\n}"],"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","ignoreList":[]}