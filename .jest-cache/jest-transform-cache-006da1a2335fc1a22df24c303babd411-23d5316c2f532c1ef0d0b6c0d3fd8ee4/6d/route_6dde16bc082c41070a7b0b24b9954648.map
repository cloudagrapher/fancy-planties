{"version":3,"names":["GET","cov_vck0xds9n","f","s","POST","request","_emailverificationmiddleware","withSecurityMonitoring","req","auth","_middleware","requireAuth","b","_server","NextResponse","json","error","status","url","URL","includeSecurityEvents","searchParams","get","securityEventsSince","systemStatus","_emailverificationcleanup","emailVerificationCleanupService","getSystemStatus","securityEvents","undefined","since","parseInt","_emailverificationratelimiter","emailVerificationRateLimiter","getSecurityEvents","cleanupStats","getCleanupStats","timestamp","Date","now","console","body","action","forceCleanup","success","message","stats","cleanupError","Error"],"sources":["/Users/stefanbekker/projects/fancy-planties/src/app/api/auth/email-verification-status/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { emailVerificationRateLimiter } from '@/lib/services/email-verification-rate-limiter';\nimport { emailVerificationCleanupService } from '@/lib/services/email-verification-cleanup';\nimport { withSecurityMonitoring } from '@/lib/auth/email-verification-middleware';\nimport { requireAuth } from '@/lib/auth/middleware';\n\n// This endpoint provides system status and security monitoring for email verification\n// It should be protected and only accessible to administrators\n\nexport async function GET(request: NextRequest) {\n  return withSecurityMonitoring(request, async (req) => {\n    try {\n      // Check if user is authenticated (in a real app, you'd check for admin role)\n      const auth = await requireAuth();\n      if (!auth) {\n        return NextResponse.json(\n          { error: 'Unauthorized' },\n          { status: 401 }\n        );\n      }\n      \n      // Get query parameters\n      const url = new URL(req.url);\n      const includeSecurityEvents = url.searchParams.get('includeSecurityEvents') === 'true';\n      const securityEventsSince = url.searchParams.get('since');\n      \n      // Get system status\n      const systemStatus = await emailVerificationCleanupService.getSystemStatus();\n      \n      // Get security events if requested\n      let securityEvents = undefined;\n      if (includeSecurityEvents) {\n        const since = securityEventsSince ? parseInt(securityEventsSince) : undefined;\n        securityEvents = emailVerificationRateLimiter.getSecurityEvents(since);\n      }\n      \n      // Get cleanup statistics\n      const cleanupStats = emailVerificationCleanupService.getCleanupStats();\n      \n      return NextResponse.json({\n        status: 'healthy',\n        timestamp: Date.now(),\n        systemStatus,\n        cleanupStats,\n        securityEvents,\n      });\n      \n    } catch (error) {\n      console.error('Email verification status endpoint error:', error);\n      \n      return NextResponse.json(\n        { \n          status: 'error',\n          error: 'Failed to get system status',\n          timestamp: Date.now(),\n        },\n        { status: 500 }\n      );\n    }\n  });\n}\n\n// Force cleanup endpoint (POST)\nexport async function POST(request: NextRequest) {\n  return withSecurityMonitoring(request, async (req) => {\n    try {\n      // Check if user is authenticated (in a real app, you'd check for admin role)\n      const auth = await requireAuth();\n      if (!auth) {\n        return NextResponse.json(\n          { error: 'Unauthorized' },\n          { status: 401 }\n        );\n      }\n      \n      const body = await req.json();\n      const action = body.action;\n      \n      if (action === 'cleanup') {\n        try {\n          const cleanupStats = await emailVerificationCleanupService.forceCleanup();\n          \n          return NextResponse.json({\n            success: true,\n            message: 'Cleanup completed successfully',\n            stats: cleanupStats,\n            timestamp: Date.now(),\n          });\n          \n        } catch (cleanupError) {\n          return NextResponse.json(\n            {\n              error: 'Cleanup failed',\n              message: cleanupError instanceof Error ? cleanupError.message : 'Unknown error',\n              timestamp: Date.now(),\n            },\n            { status: 500 }\n          );\n        }\n      }\n      \n      return NextResponse.json(\n        { error: 'Invalid action' },\n        { status: 400 }\n      );\n      \n    } catch (error) {\n      console.error('Email verification status POST endpoint error:', error);\n      \n      return NextResponse.json(\n        { error: 'Internal server error' },\n        { status: 500 }\n      );\n    }\n  });\n}"],"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","ignoreList":[]}