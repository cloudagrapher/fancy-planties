{"version":3,"names":["ResendEmailService","cov_2f3vt1axr1","f","s","createEmailService","constructor","config","resend","_resend","Resend","apiKey","sendVerificationEmail","email","code","name","startTime","Date","now","data","error","emails","send","from","fromName","fromEmail","to","subject","html","generateVerificationEmailTemplate","text","generateVerificationEmailText","responseTime","b","console","emailError","message","includes","_emailservice","EmailServiceError","_emailservicemonitor","emailServiceMonitor","recordFailure","recordSuccess","log","id","networkError","Error","trim","process","env","RESEND_API_KEY","FROM_EMAIL","FROM_NAME"],"sources":["/Users/stefanbekker/projects/fancy-planties/src/lib/services/resend-email-service.ts"],"sourcesContent":["import 'server-only';\nimport { Resend } from 'resend';\nimport { EmailService, EmailConfig, EmailServiceError } from './email-service';\nimport { emailServiceMonitor } from './email-service-monitor';\n\nexport class ResendEmailService implements EmailService {\n  private resend: Resend;\n  private config: EmailConfig;\n\n  constructor(config: EmailConfig) {\n    this.resend = new Resend(config.apiKey);\n    this.config = config;\n  }\n\n  async sendVerificationEmail(email: string, code: string, name: string): Promise<boolean> {\n    const startTime = Date.now();\n    \n    try {\n      const { data, error } = await this.resend.emails.send({\n        from: `${this.config.fromName} <${this.config.fromEmail}>`,\n        to: [email],\n        subject: 'Verify your email address',\n        html: this.generateVerificationEmailTemplate(code, name),\n        text: this.generateVerificationEmailText(code, name),\n      });\n\n      const responseTime = Date.now() - startTime;\n\n      if (error) {\n        console.error('Resend API error:', error);\n        \n        // Map Resend errors to our error types\n        let emailError: EmailServiceError;\n        if (error.message?.includes('quota') || error.message?.includes('limit')) {\n          emailError = new EmailServiceError('Email quota exceeded', 'QUOTA_EXCEEDED');\n        } else if (error.message?.includes('invalid') && error.message?.includes('email')) {\n          emailError = new EmailServiceError('Invalid email address', 'INVALID_EMAIL');\n        } else {\n          emailError = new EmailServiceError(`Resend API error: ${error.message}`, 'API_ERROR');\n        }\n        \n        // Record failure in monitor\n        emailServiceMonitor.recordFailure(\n          { message: emailError.message, code: emailError.code },\n          responseTime\n        );\n        \n        throw emailError;\n      }\n\n      // Record success in monitor\n      emailServiceMonitor.recordSuccess(responseTime);\n      \n      console.log('Verification email sent successfully:', data?.id);\n      return true;\n      \n    } catch (error) {\n      const responseTime = Date.now() - startTime;\n      \n      if (error instanceof EmailServiceError) {\n        // Already recorded in monitor above\n        throw error;\n      }\n      \n      console.error('Network error sending email:', error);\n      const networkError = new EmailServiceError(\n        `Network error: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        'NETWORK_ERROR'\n      );\n      \n      // Record network error in monitor\n      emailServiceMonitor.recordFailure(\n        { message: networkError.message, code: networkError.code },\n        responseTime\n      );\n      \n      throw networkError;\n    }\n  }\n\n  private generateVerificationEmailTemplate(code: string, name: string): string {\n    return `\n      <!DOCTYPE html>\n      <html lang=\"en\">\n      <head>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>Verify Your Email</title>\n        <style>\n          body {\n            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n            line-height: 1.6;\n            color: #333;\n            max-width: 600px;\n            margin: 0 auto;\n            padding: 20px;\n          }\n          .header {\n            text-align: center;\n            margin-bottom: 30px;\n          }\n          .logo {\n            font-size: 24px;\n            font-weight: bold;\n            color: #22c55e;\n            margin-bottom: 10px;\n          }\n          .verification-code {\n            background: #f8f9fa;\n            border: 2px solid #e9ecef;\n            border-radius: 8px;\n            padding: 20px;\n            text-align: center;\n            margin: 30px 0;\n          }\n          .code {\n            font-size: 32px;\n            font-weight: bold;\n            letter-spacing: 4px;\n            color: #22c55e;\n            font-family: 'Courier New', monospace;\n          }\n          .footer {\n            margin-top: 30px;\n            padding-top: 20px;\n            border-top: 1px solid #e9ecef;\n            font-size: 14px;\n            color: #6c757d;\n          }\n        </style>\n      </head>\n      <body>\n        <div class=\"header\">\n          <div class=\"logo\">ðŸŒ± Fancy Planties</div>\n          <h1>Verify Your Email Address</h1>\n        </div>\n        \n        <p>Hi ${name},</p>\n        \n        <p>Welcome to Fancy Planties! To complete your account setup, please verify your email address by entering the verification code below:</p>\n        \n        <div class=\"verification-code\">\n          <div class=\"code\">${code}</div>\n          <p style=\"margin: 10px 0 0 0; font-size: 14px; color: #6c757d;\">\n            This code expires in 10 minutes\n          </p>\n        </div>\n        \n        <p>If you didn't create an account with Fancy Planties, you can safely ignore this email.</p>\n        \n        <div class=\"footer\">\n          <p>This is an automated message from Fancy Planties. Please do not reply to this email.</p>\n          <p>Need help? Contact us at support@fancy-planties.cloudagrapher.com</p>\n        </div>\n      </body>\n      </html>\n    `;\n  }\n\n  private generateVerificationEmailText(code: string, name: string): string {\n    return `\nHi ${name},\n\nWelcome to Fancy Planties! To complete your account setup, please verify your email address by entering the verification code below:\n\nVerification Code: ${code}\n\nThis code expires in 10 minutes.\n\nIf you didn't create an account with Fancy Planties, you can safely ignore this email.\n\n---\nThis is an automated message from Fancy Planties. Please do not reply to this email.\nNeed help? Contact us at support@fancy-planties.cloudagrapher.com\n    `.trim();\n  }\n}\n\n// Factory function to create email service instance\nexport function createEmailService(): EmailService {\n  const config: EmailConfig = {\n    apiKey: process.env.RESEND_API_KEY!,\n    fromEmail: process.env.FROM_EMAIL || 'send.mail.fancy-planties.cloudagrapher.com',\n    fromName: process.env.FROM_NAME || 'Fancy Planties',\n  };\n\n  if (!config.apiKey) {\n    throw new Error('RESEND_API_KEY environment variable is required');\n  }\n\n  return new ResendEmailService(config);\n}"],"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","ignoreList":[]}