875b21f36def26f2b774a5a08a2265ea
'use client';
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return QuickCareForm;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("react");
const _caretypes = require("../../lib/types/care-types");
const _useOffline = require("../../hooks/useOffline");
const _serviceworker = require("../../lib/utils/service-worker");
function QuickCareForm({ plantInstanceId, onSuccess, onCancel, defaultCareType = 'fertilizer' }) {
    const { isOnline, addPendingCareEntry } = (0, _useOffline.useOffline)();
    const { registerBackgroundSync } = (0, _serviceworker.useServiceWorker)();
    const [formData, setFormData] = (0, _react.useState)({
        plantInstanceId: plantInstanceId || 0,
        careType: defaultCareType,
        careDate: new Date().toISOString().split('T')[0],
        notes: '',
        fertilizerType: '',
        potSize: '',
        soilType: ''
    });
    const [isSubmitting, setIsSubmitting] = (0, _react.useState)(false);
    const [error, setError] = (0, _react.useState)(null);
    const careTypes = [
        {
            value: 'fertilizer',
            label: 'Fertilizer',
            icon: '🌱'
        },
        {
            value: 'water',
            label: 'Water',
            icon: '💧'
        },
        {
            value: 'repot',
            label: 'Repot',
            icon: '🪴'
        },
        {
            value: 'prune',
            label: 'Prune',
            icon: '✂️'
        },
        {
            value: 'inspect',
            label: 'Inspect',
            icon: '🔍'
        },
        {
            value: 'other',
            label: 'Other',
            icon: '📝'
        }
    ];
    const handleSubmit = async (e)=>{
        e.preventDefault();
        setIsSubmitting(true);
        setError(null);
        try {
            if (isOnline) {
                // Online: Submit directly to API
                const response = await fetch('/api/care/log', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        ...formData,
                        careDate: new Date(formData.careDate),
                        plantInstanceId: Number(formData.plantInstanceId)
                    })
                });
                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.error || 'Failed to log care');
                }
            } else {
                // Offline: Add to pending queue
                const pendingId = addPendingCareEntry({
                    plantInstanceId: Number(formData.plantInstanceId),
                    careType: formData.careType,
                    notes: formData.notes || undefined
                });
                // Register for background sync
                registerBackgroundSync();
                console.log('Care entry queued for sync:', pendingId);
            }
            // Reset form
            setFormData({
                plantInstanceId: plantInstanceId || 0,
                careType: defaultCareType,
                careDate: new Date().toISOString().split('T')[0],
                notes: '',
                fertilizerType: '',
                potSize: '',
                soilType: ''
            });
            onSuccess?.();
        } catch (err) {
            setError(err instanceof Error ? err.message : 'Failed to log care');
        } finally{
            setIsSubmitting(false);
        }
    };
    const handleInputChange = (field, value)=>{
        setFormData((prev)=>({
                ...prev,
                [field]: value
            }));
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("form", {
        onSubmit: handleSubmit,
        className: "space-y-4",
        children: [
            error && /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                className: "bg-red-50 border border-red-200 rounded-lg p-3",
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                    className: "text-red-800 text-sm",
                    children: error
                })
            }),
            !isOnline && /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                className: "bg-yellow-50 border border-yellow-200 rounded-lg p-3",
                children: /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    className: "flex items-center gap-2",
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("svg", {
                            className: "w-4 h-4 text-yellow-600",
                            fill: "currentColor",
                            viewBox: "0 0 20 20",
                            children: /*#__PURE__*/ (0, _jsxruntime.jsx)("path", {
                                fillRule: "evenodd",
                                d: "M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z",
                                clipRule: "evenodd"
                            })
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsxs)("p", {
                            className: "text-yellow-800 text-sm",
                            children: [
                                /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                    className: "font-medium",
                                    children: "Offline Mode:"
                                }),
                                " Care will be logged when you're back online."
                            ]
                        })
                    ]
                })
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("label", {
                        className: "block text-sm font-medium text-gray-700 mb-2",
                        children: "Care Type"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        className: "grid grid-cols-3 gap-2",
                        children: careTypes.map((type)=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("button", {
                                type: "button",
                                onClick: ()=>handleInputChange('careType', type.value),
                                disabled: isSubmitting,
                                className: `btn ${formData.careType === type.value ? 'btn--primary' : 'btn--outline'} flex-col h-auto py-3 ${isSubmitting ? 'opacity-50 cursor-not-allowed' : ''}`,
                                children: [
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                        className: "text-lg mb-1",
                                        children: type.icon
                                    }),
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                        className: "text-xs font-medium",
                                        children: type.label
                                    })
                                ]
                            }, type.value))
                    })
                ]
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("label", {
                        htmlFor: "careDate",
                        className: "block text-sm font-medium text-gray-700 mb-1",
                        children: "Care Date"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("input", {
                        type: "date",
                        id: "careDate",
                        value: formData.careDate,
                        onChange: (e)=>handleInputChange('careDate', e.target.value),
                        max: new Date().toISOString().split('T')[0],
                        disabled: isSubmitting,
                        className: `w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 ${isSubmitting ? 'bg-gray-50 cursor-not-allowed' : ''}`,
                        required: true
                    })
                ]
            }),
            formData.careType === 'fertilizer' && /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("label", {
                        htmlFor: "fertilizerType",
                        className: "block text-sm font-medium text-gray-700 mb-1",
                        children: "Fertilizer Type (Optional)"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("input", {
                        type: "text",
                        id: "fertilizerType",
                        value: formData.fertilizerType,
                        onChange: (e)=>handleInputChange('fertilizerType', e.target.value),
                        placeholder: "e.g., Liquid fertilizer, Slow-release pellets",
                        disabled: isSubmitting,
                        className: `w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 ${isSubmitting ? 'bg-gray-50 cursor-not-allowed' : ''}`
                    })
                ]
            }),
            formData.careType === 'repot' && /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                className: "grid grid-cols-2 gap-4",
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("label", {
                                htmlFor: "potSize",
                                className: "block text-sm font-medium text-gray-700 mb-1",
                                children: "Pot Size (Optional)"
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("input", {
                                type: "text",
                                id: "potSize",
                                value: formData.potSize,
                                onChange: (e)=>handleInputChange('potSize', e.target.value),
                                placeholder: "e.g., 6 inch, 15cm",
                                disabled: isSubmitting,
                                className: `w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 ${isSubmitting ? 'bg-gray-50 cursor-not-allowed' : ''}`
                            })
                        ]
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("label", {
                                htmlFor: "soilType",
                                className: "block text-sm font-medium text-gray-700 mb-1",
                                children: "Soil Type (Optional)"
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("input", {
                                type: "text",
                                id: "soilType",
                                value: formData.soilType,
                                onChange: (e)=>handleInputChange('soilType', e.target.value),
                                placeholder: "e.g., Potting mix, Cactus soil",
                                disabled: isSubmitting,
                                className: `w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 ${isSubmitting ? 'bg-gray-50 cursor-not-allowed' : ''}`
                            })
                        ]
                    })
                ]
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("label", {
                        htmlFor: "notes",
                        className: "block text-sm font-medium text-gray-700 mb-1",
                        children: "Notes (Optional)"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("textarea", {
                        id: "notes",
                        value: formData.notes,
                        onChange: (e)=>handleInputChange('notes', e.target.value),
                        placeholder: "Any additional observations or notes...",
                        rows: 3,
                        disabled: isSubmitting,
                        className: `w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 resize-none ${isSubmitting ? 'bg-gray-50 cursor-not-allowed' : ''}`
                    })
                ]
            }),
            !plantInstanceId && /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("label", {
                        htmlFor: "plantInstanceId",
                        className: "block text-sm font-medium text-gray-700 mb-1",
                        children: "Plant"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("select", {
                        id: "plantInstanceId",
                        value: formData.plantInstanceId,
                        onChange: (e)=>handleInputChange('plantInstanceId', e.target.value),
                        disabled: isSubmitting,
                        className: `w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 ${isSubmitting ? 'bg-gray-50 cursor-not-allowed' : ''}`,
                        required: true,
                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)("option", {
                            value: "",
                            children: "Select a plant..."
                        })
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                        className: "text-xs text-gray-500 mt-1",
                        children: "Plant selection will be implemented when plant instances are available"
                    })
                ]
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                className: "form-actions",
                children: [
                    onCancel && /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                        type: "button",
                        onClick: onCancel,
                        disabled: isSubmitting,
                        className: `btn btn--outline btn--full ${isSubmitting ? 'opacity-50 cursor-not-allowed' : ''}`,
                        children: "Cancel"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                        type: "submit",
                        disabled: isSubmitting || !formData.plantInstanceId,
                        className: `btn btn--primary btn--full ${isSubmitting ? 'btn--loading' : ''}`,
                        children: isSubmitting ? 'Logging...' : isOnline ? 'Log Care' : 'Queue for Sync'
                    })
                ]
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                className: "bg-gray-50 rounded-lg p-3",
                children: /*#__PURE__*/ (0, _jsxruntime.jsxs)("p", {
                    className: "text-sm text-gray-600",
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsxs)("span", {
                            className: "font-medium",
                            children: [
                                careTypes.find((t)=>t.value === formData.careType)?.icon,
                                " ",
                                careTypes.find((t)=>t.value === formData.careType)?.label,
                                ":"
                            ]
                        }),
                        ' ',
                        _caretypes.careHelpers.getCareTypeDisplay(formData.careType).description
                    ]
                })
            })
        ]
    });
}

//# sourceMappingURL=data:application/json;base64,