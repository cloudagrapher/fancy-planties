79880376ee2bb7ac8cade35050e86de2
"use strict";

/* istanbul ignore next */
function cov_1zkww4ecjm() {
  var path = "/Users/stefanbekker/projects/fancy-planties/src/app/api/plant-instances/search/route.ts";
  var hash = "b49d51eea0c317d2a7bd74f163a8210d89711da8";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/stefanbekker/projects/fancy-planties/src/app/api/plant-instances/search/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 19
        }
      },
      "3": {
        start: {
          line: 11,
          column: 16
        },
        end: {
          line: 11,
          column: 38
        }
      },
      "4": {
        start: {
          line: 12,
          column: 24
        },
        end: {
          line: 12,
          column: 77
        }
      },
      "5": {
        start: {
          line: 13,
          column: 22
        },
        end: {
          line: 13,
          column: 73
        }
      },
      "6": {
        start: {
          line: 14,
          column: 17
        },
        end: {
          line: 14,
          column: 55
        }
      },
      "7": {
        start: {
          line: 16,
          column: 4
        },
        end: {
          line: 62,
          column: 5
        }
      },
      "8": {
        start: {
          line: 17,
          column: 25
        },
        end: {
          line: 17,
          column: 62
        }
      },
      "9": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 24,
          column: 9
        }
      },
      "10": {
        start: {
          line: 19,
          column: 12
        },
        end: {
          line: 23,
          column: 15
        }
      },
      "11": {
        start: {
          line: 25,
          column: 33
        },
        end: {
          line: 25,
          column: 53
        }
      },
      "12": {
        start: {
          line: 26,
          column: 22
        },
        end: {
          line: 26,
          column: 47
        }
      },
      "13": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 33,
          column: 9
        }
      },
      "14": {
        start: {
          line: 28,
          column: 12
        },
        end: {
          line: 32,
          column: 15
        }
      },
      "15": {
        start: {
          line: 35,
          column: 27
        },
        end: {
          line: 41,
          column: 9
        }
      },
      "16": {
        start: {
          line: 43,
          column: 32
        },
        end: {
          line: 43,
          column: 89
        }
      },
      "17": {
        start: {
          line: 45,
          column: 23
        },
        end: {
          line: 45,
          column: 100
        }
      },
      "18": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 46,
          column: 49
        }
      },
      "19": {
        start: {
          line: 48,
          column: 8
        },
        end: {
          line: 48,
          column: 66
        }
      },
      "20": {
        start: {
          line: 49,
          column: 8
        },
        end: {
          line: 56,
          column: 9
        }
      },
      "21": {
        start: {
          line: 50,
          column: 12
        },
        end: {
          line: 55,
          column: 15
        }
      },
      "22": {
        start: {
          line: 57,
          column: 8
        },
        end: {
          line: 61,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "GET",
        decl: {
          start: {
            line: 15,
            column: 15
          },
          end: {
            line: 15,
            column: 18
          }
        },
        loc: {
          start: {
            line: 15,
            column: 28
          },
          end: {
            line: 63,
            column: 1
          }
        },
        line: 15
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 18,
            column: 8
          },
          end: {
            line: 24,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 18,
            column: 8
          },
          end: {
            line: 24,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 18
      },
      "1": {
        loc: {
          start: {
            line: 27,
            column: 8
          },
          end: {
            line: 33,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 27,
            column: 8
          },
          end: {
            line: 33,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 27
      },
      "2": {
        loc: {
          start: {
            line: 39,
            column: 19
          },
          end: {
            line: 39,
            column: 91
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 39,
            column: 47
          },
          end: {
            line: 39,
            column: 86
          }
        }, {
          start: {
            line: 39,
            column: 89
          },
          end: {
            line: 39,
            column: 91
          }
        }],
        line: 39
      },
      "3": {
        loc: {
          start: {
            line: 40,
            column: 20
          },
          end: {
            line: 40,
            column: 93
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 40,
            column: 49
          },
          end: {
            line: 40,
            column: 89
          }
        }, {
          start: {
            line: 40,
            column: 92
          },
          end: {
            line: 40,
            column: 93
          }
        }],
        line: 40
      },
      "4": {
        loc: {
          start: {
            line: 49,
            column: 8
          },
          end: {
            line: 56,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 49,
            column: 8
          },
          end: {
            line: 56,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 49
      },
      "5": {
        loc: {
          start: {
            line: 49,
            column: 12
          },
          end: {
            line: 49,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 49,
            column: 12
          },
          end: {
            line: 49,
            column: 34
          }
        }, {
          start: {
            line: 49,
            column: 38
          },
          end: {
            line: 49,
            column: 74
          }
        }],
        line: 49
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0
    },
    f: {
      "0": 0,
      "1": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/stefanbekker/projects/fancy-planties/src/app/api/plant-instances/search/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport { PlantInstanceQueries } from '@/lib/db/queries/plant-instances';\nimport { plantInstanceSearchSchema } from '@/lib/validation/plant-schemas';\nimport { validateRequest } from '@/lib/auth/server';\n\n// GET /api/plant-instances/search - Search plant instances\nexport async function GET(request: NextRequest) {\n  try {\n    const { user } = await validateRequest();\n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const { searchParams } = new URL(request.url);\n    \n    const query = searchParams.get('query');\n    if (!query) {\n      return NextResponse.json({ error: 'Search query is required' }, { status: 400 });\n    }\n\n    // Parse search parameters\n    const searchData = {\n      query,\n      userId: user.id,\n      activeOnly: searchParams.get('activeOnly') !== 'false', // Default to true\n      limit: searchParams.get('limit') ? parseInt(searchParams.get('limit')!, 10) : 20,\n      offset: searchParams.get('offset') ? parseInt(searchParams.get('offset')!, 10) : 0,\n    };\n\n    // Validate search parameters\n    const validatedSearch = plantInstanceSearchSchema.parse(searchData);\n    \n    // Perform search\n    const result = await PlantInstanceQueries.searchWithFilters(validatedSearch);\n    \n    return NextResponse.json(result);\n  } catch (error) {\n    console.error('Failed to search plant instances:', error);\n    \n    if (error instanceof Error && error.message.includes('validation')) {\n      return NextResponse.json(\n        { error: 'Invalid search parameters', details: error.message },\n        { status: 400 }\n      );\n    }\n    \n    return NextResponse.json(\n      { error: 'Failed to search plant instances' },\n      { status: 500 }\n    );\n  }\n}"],
      names: ["GET", "request", "user", "validateRequest", "NextResponse", "json", "error", "status", "searchParams", "URL", "url", "query", "get", "searchData", "userId", "id", "activeOnly", "limit", "parseInt", "offset", "validatedSearch", "plantInstanceSearchSchema", "parse", "result", "PlantInstanceQueries", "searchWithFilters", "console", "Error", "message", "includes", "details"],
      mappings: ";;;;+BAMsBA;;;eAAAA;;;wBANoB;gCACL;8BACK;yBACV;AAGzB,eAAeA,IAAIC,OAAoB;IAC5C,IAAI;QACF,MAAM,EAAEC,IAAI,EAAE,GAAG,MAAMC,IAAAA,wBAAe;QACtC,IAAI,CAACD,MAAM;YACT,OAAOE,oBAAY,CAACC,IAAI,CAAC;gBAAEC,OAAO;YAAe,GAAG;gBAAEC,QAAQ;YAAI;QACpE;QAEA,MAAM,EAAEC,YAAY,EAAE,GAAG,IAAIC,IAAIR,QAAQS,GAAG;QAE5C,MAAMC,QAAQH,aAAaI,GAAG,CAAC;QAC/B,IAAI,CAACD,OAAO;YACV,OAAOP,oBAAY,CAACC,IAAI,CAAC;gBAAEC,OAAO;YAA2B,GAAG;gBAAEC,QAAQ;YAAI;QAChF;QAEA,0BAA0B;QAC1B,MAAMM,aAAa;YACjBF;YACAG,QAAQZ,KAAKa,EAAE;YACfC,YAAYR,aAAaI,GAAG,CAAC,kBAAkB;YAC/CK,OAAOT,aAAaI,GAAG,CAAC,WAAWM,SAASV,aAAaI,GAAG,CAAC,UAAW,MAAM;YAC9EO,QAAQX,aAAaI,GAAG,CAAC,YAAYM,SAASV,aAAaI,GAAG,CAAC,WAAY,MAAM;QACnF;QAEA,6BAA6B;QAC7B,MAAMQ,kBAAkBC,uCAAyB,CAACC,KAAK,CAACT;QAExD,iBAAiB;QACjB,MAAMU,SAAS,MAAMC,oCAAoB,CAACC,iBAAiB,CAACL;QAE5D,OAAOhB,oBAAY,CAACC,IAAI,CAACkB;IAC3B,EAAE,OAAOjB,OAAO;QACdoB,QAAQpB,KAAK,CAAC,qCAAqCA;QAEnD,IAAIA,iBAAiBqB,SAASrB,MAAMsB,OAAO,CAACC,QAAQ,CAAC,eAAe;YAClE,OAAOzB,oBAAY,CAACC,IAAI,CACtB;gBAAEC,OAAO;gBAA6BwB,SAASxB,MAAMsB,OAAO;YAAC,GAC7D;gBAAErB,QAAQ;YAAI;QAElB;QAEA,OAAOH,oBAAY,CAACC,IAAI,CACtB;YAAEC,OAAO;QAAmC,GAC5C;YAAEC,QAAQ;QAAI;IAElB;AACF"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "b49d51eea0c317d2a7bd74f163a8210d89711da8"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1zkww4ecjm = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1zkww4ecjm();
cov_1zkww4ecjm().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1zkww4ecjm().s[1]++;
Object.defineProperty(exports, "GET", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_1zkww4ecjm().f[0]++;
    cov_1zkww4ecjm().s[2]++;
    return GET;
  }
});
const _server =
/* istanbul ignore next */
(cov_1zkww4ecjm().s[3]++, require("next/server"));
const _plantinstances =
/* istanbul ignore next */
(cov_1zkww4ecjm().s[4]++, require("../../../../lib/db/queries/plant-instances"));
const _plantschemas =
/* istanbul ignore next */
(cov_1zkww4ecjm().s[5]++, require("../../../../lib/validation/plant-schemas"));
const _server1 =
/* istanbul ignore next */
(cov_1zkww4ecjm().s[6]++, require("../../../../lib/auth/server"));
async function GET(request) {
  /* istanbul ignore next */
  cov_1zkww4ecjm().f[1]++;
  cov_1zkww4ecjm().s[7]++;
  try {
    const {
      user
    } =
    /* istanbul ignore next */
    (cov_1zkww4ecjm().s[8]++, await (0, _server1.validateRequest)());
    /* istanbul ignore next */
    cov_1zkww4ecjm().s[9]++;
    if (!user) {
      /* istanbul ignore next */
      cov_1zkww4ecjm().b[0][0]++;
      cov_1zkww4ecjm().s[10]++;
      return _server.NextResponse.json({
        error: 'Unauthorized'
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_1zkww4ecjm().b[0][1]++;
    }
    const {
      searchParams
    } =
    /* istanbul ignore next */
    (cov_1zkww4ecjm().s[11]++, new URL(request.url));
    const query =
    /* istanbul ignore next */
    (cov_1zkww4ecjm().s[12]++, searchParams.get('query'));
    /* istanbul ignore next */
    cov_1zkww4ecjm().s[13]++;
    if (!query) {
      /* istanbul ignore next */
      cov_1zkww4ecjm().b[1][0]++;
      cov_1zkww4ecjm().s[14]++;
      return _server.NextResponse.json({
        error: 'Search query is required'
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1zkww4ecjm().b[1][1]++;
    }
    // Parse search parameters
    const searchData =
    /* istanbul ignore next */
    (cov_1zkww4ecjm().s[15]++, {
      query,
      userId: user.id,
      activeOnly: searchParams.get('activeOnly') !== 'false',
      limit: searchParams.get('limit') ?
      /* istanbul ignore next */
      (cov_1zkww4ecjm().b[2][0]++, parseInt(searchParams.get('limit'), 10)) :
      /* istanbul ignore next */
      (cov_1zkww4ecjm().b[2][1]++, 20),
      offset: searchParams.get('offset') ?
      /* istanbul ignore next */
      (cov_1zkww4ecjm().b[3][0]++, parseInt(searchParams.get('offset'), 10)) :
      /* istanbul ignore next */
      (cov_1zkww4ecjm().b[3][1]++, 0)
    });
    // Validate search parameters
    const validatedSearch =
    /* istanbul ignore next */
    (cov_1zkww4ecjm().s[16]++, _plantschemas.plantInstanceSearchSchema.parse(searchData));
    // Perform search
    const result =
    /* istanbul ignore next */
    (cov_1zkww4ecjm().s[17]++, await _plantinstances.PlantInstanceQueries.searchWithFilters(validatedSearch));
    /* istanbul ignore next */
    cov_1zkww4ecjm().s[18]++;
    return _server.NextResponse.json(result);
  } catch (error) {
    /* istanbul ignore next */
    cov_1zkww4ecjm().s[19]++;
    console.error('Failed to search plant instances:', error);
    /* istanbul ignore next */
    cov_1zkww4ecjm().s[20]++;
    if (
    /* istanbul ignore next */
    (cov_1zkww4ecjm().b[5][0]++, error instanceof Error) &&
    /* istanbul ignore next */
    (cov_1zkww4ecjm().b[5][1]++, error.message.includes('validation'))) {
      /* istanbul ignore next */
      cov_1zkww4ecjm().b[4][0]++;
      cov_1zkww4ecjm().s[21]++;
      return _server.NextResponse.json({
        error: 'Invalid search parameters',
        details: error.message
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1zkww4ecjm().b[4][1]++;
    }
    cov_1zkww4ecjm().s[22]++;
    return _server.NextResponse.json({
      error: 'Failed to search plant instances'
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMXprd3c0ZWNqbSIsImFjdHVhbENvdmVyYWdlIiwicyIsIkdFVCIsInJlcXVlc3QiLCJmIiwidXNlciIsIl9zZXJ2ZXIxIiwidmFsaWRhdGVSZXF1ZXN0IiwiYiIsIl9zZXJ2ZXIiLCJOZXh0UmVzcG9uc2UiLCJqc29uIiwiZXJyb3IiLCJzdGF0dXMiLCJzZWFyY2hQYXJhbXMiLCJVUkwiLCJ1cmwiLCJxdWVyeSIsImdldCIsInNlYXJjaERhdGEiLCJ1c2VySWQiLCJpZCIsImFjdGl2ZU9ubHkiLCJsaW1pdCIsInBhcnNlSW50Iiwib2Zmc2V0IiwidmFsaWRhdGVkU2VhcmNoIiwiX3BsYW50c2NoZW1hcyIsInBsYW50SW5zdGFuY2VTZWFyY2hTY2hlbWEiLCJwYXJzZSIsInJlc3VsdCIsIl9wbGFudGluc3RhbmNlcyIsIlBsYW50SW5zdGFuY2VRdWVyaWVzIiwic2VhcmNoV2l0aEZpbHRlcnMiLCJjb25zb2xlIiwiRXJyb3IiLCJtZXNzYWdlIiwiaW5jbHVkZXMiLCJkZXRhaWxzIl0sInNvdXJjZXMiOlsiL1VzZXJzL3N0ZWZhbmJla2tlci9wcm9qZWN0cy9mYW5jeS1wbGFudGllcy9zcmMvYXBwL2FwaS9wbGFudC1pbnN0YW5jZXMvc2VhcmNoL3JvdXRlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5leHRSZXF1ZXN0LCBOZXh0UmVzcG9uc2UgfSBmcm9tICduZXh0L3NlcnZlcic7XG5pbXBvcnQgeyBQbGFudEluc3RhbmNlUXVlcmllcyB9IGZyb20gJ0AvbGliL2RiL3F1ZXJpZXMvcGxhbnQtaW5zdGFuY2VzJztcbmltcG9ydCB7IHBsYW50SW5zdGFuY2VTZWFyY2hTY2hlbWEgfSBmcm9tICdAL2xpYi92YWxpZGF0aW9uL3BsYW50LXNjaGVtYXMnO1xuaW1wb3J0IHsgdmFsaWRhdGVSZXF1ZXN0IH0gZnJvbSAnQC9saWIvYXV0aC9zZXJ2ZXInO1xuXG4vLyBHRVQgL2FwaS9wbGFudC1pbnN0YW5jZXMvc2VhcmNoIC0gU2VhcmNoIHBsYW50IGluc3RhbmNlc1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIEdFVChyZXF1ZXN0OiBOZXh0UmVxdWVzdCkge1xuICB0cnkge1xuICAgIGNvbnN0IHsgdXNlciB9ID0gYXdhaXQgdmFsaWRhdGVSZXF1ZXN0KCk7XG4gICAgaWYgKCF1c2VyKSB7XG4gICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oeyBlcnJvcjogJ1VuYXV0aG9yaXplZCcgfSwgeyBzdGF0dXM6IDQwMSB9KTtcbiAgICB9XG5cbiAgICBjb25zdCB7IHNlYXJjaFBhcmFtcyB9ID0gbmV3IFVSTChyZXF1ZXN0LnVybCk7XG4gICAgXG4gICAgY29uc3QgcXVlcnkgPSBzZWFyY2hQYXJhbXMuZ2V0KCdxdWVyeScpO1xuICAgIGlmICghcXVlcnkpIHtcbiAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7IGVycm9yOiAnU2VhcmNoIHF1ZXJ5IGlzIHJlcXVpcmVkJyB9LCB7IHN0YXR1czogNDAwIH0pO1xuICAgIH1cblxuICAgIC8vIFBhcnNlIHNlYXJjaCBwYXJhbWV0ZXJzXG4gICAgY29uc3Qgc2VhcmNoRGF0YSA9IHtcbiAgICAgIHF1ZXJ5LFxuICAgICAgdXNlcklkOiB1c2VyLmlkLFxuICAgICAgYWN0aXZlT25seTogc2VhcmNoUGFyYW1zLmdldCgnYWN0aXZlT25seScpICE9PSAnZmFsc2UnLCAvLyBEZWZhdWx0IHRvIHRydWVcbiAgICAgIGxpbWl0OiBzZWFyY2hQYXJhbXMuZ2V0KCdsaW1pdCcpID8gcGFyc2VJbnQoc2VhcmNoUGFyYW1zLmdldCgnbGltaXQnKSEsIDEwKSA6IDIwLFxuICAgICAgb2Zmc2V0OiBzZWFyY2hQYXJhbXMuZ2V0KCdvZmZzZXQnKSA/IHBhcnNlSW50KHNlYXJjaFBhcmFtcy5nZXQoJ29mZnNldCcpISwgMTApIDogMCxcbiAgICB9O1xuXG4gICAgLy8gVmFsaWRhdGUgc2VhcmNoIHBhcmFtZXRlcnNcbiAgICBjb25zdCB2YWxpZGF0ZWRTZWFyY2ggPSBwbGFudEluc3RhbmNlU2VhcmNoU2NoZW1hLnBhcnNlKHNlYXJjaERhdGEpO1xuICAgIFxuICAgIC8vIFBlcmZvcm0gc2VhcmNoXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgUGxhbnRJbnN0YW5jZVF1ZXJpZXMuc2VhcmNoV2l0aEZpbHRlcnModmFsaWRhdGVkU2VhcmNoKTtcbiAgICBcbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24ocmVzdWx0KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gc2VhcmNoIHBsYW50IGluc3RhbmNlczonLCBlcnJvcik7XG4gICAgXG4gICAgaWYgKGVycm9yIGluc3RhbmNlb2YgRXJyb3IgJiYgZXJyb3IubWVzc2FnZS5pbmNsdWRlcygndmFsaWRhdGlvbicpKSB7XG4gICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXG4gICAgICAgIHsgZXJyb3I6ICdJbnZhbGlkIHNlYXJjaCBwYXJhbWV0ZXJzJywgZGV0YWlsczogZXJyb3IubWVzc2FnZSB9LFxuICAgICAgICB7IHN0YXR1czogNDAwIH1cbiAgICAgICk7XG4gICAgfVxuICAgIFxuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcbiAgICAgIHsgZXJyb3I6ICdGYWlsZWQgdG8gc2VhcmNoIHBsYW50IGluc3RhbmNlcycgfSxcbiAgICAgIHsgc3RhdHVzOiA1MDAgfVxuICAgICk7XG4gIH1cbn0iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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