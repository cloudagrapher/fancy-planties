{"version":3,"sources":["/Users/stefanbekker/projects/fancy-planties/src/__tests__/components/forms/SignUpForm.test.js"],"sourcesContent":["/**\n * @jest-environment jsdom\n */\n\nimport React from 'react';\nimport { screen, waitFor } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport { renderWithProviders, mockApiResponses, mockApiError } from '@/test-utils/helpers/render-helpers';\nimport SignUpForm from '@/components/auth/SignUpForm';\n\n// Mock Next.js navigation\nconst mockPush = jest.fn();\nconst mockRefresh = jest.fn();\n\njest.mock('next/navigation', () => ({\n  useRouter: () => ({\n    push: mockPush,\n    refresh: mockRefresh,\n  }),\n}));\n\ndescribe('SignUpForm', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    \n    // Mock successful sign-up by default\n    mockApiResponses({\n      '/api/auth/signup': { success: true, user: { id: 1, email: 'test@example.com' } },\n    });\n  });\n\n  describe('Form Rendering', () => {\n    it('renders all form fields', () => {\n      renderWithProviders(<SignUpForm />);\n\n      expect(screen.getByLabelText(/full name/i)).toBeInTheDocument();\n      expect(screen.getByLabelText(/email address/i)).toBeInTheDocument();\n      expect(screen.getByLabelText(/^password$/i)).toBeInTheDocument();\n      expect(screen.getByRole('button', { name: /create account/i })).toBeInTheDocument();\n    });\n\n    it('has proper form attributes for accessibility', () => {\n      renderWithProviders(<SignUpForm />);\n\n      const form = screen.getByRole('form', { hidden: true });\n      expect(form).toHaveAttribute('autoComplete', 'on');\n      expect(form).toHaveAttribute('noValidate');\n\n      const nameInput = screen.getByLabelText(/full name/i);\n      expect(nameInput).toHaveAttribute('type', 'text');\n      expect(nameInput).toHaveAttribute('autoComplete', 'name');\n      expect(nameInput).toHaveAttribute('required');\n\n      const emailInput = screen.getByLabelText(/email address/i);\n      expect(emailInput).toHaveAttribute('type', 'email');\n      expect(emailInput).toHaveAttribute('autoComplete', 'email');\n      expect(emailInput).toHaveAttribute('required');\n\n      const passwordInput = screen.getByLabelText(/^password$/i);\n      expect(passwordInput).toHaveAttribute('type', 'password');\n      expect(passwordInput).toHaveAttribute('autoComplete', 'new-password');\n      expect(passwordInput).toHaveAttribute('data-new-password', 'true');\n      expect(passwordInput).toHaveAttribute('required');\n    });\n\n    it('shows password requirements help text', () => {\n      renderWithProviders(<SignUpForm />);\n\n      expect(screen.getByText(/password must be at least 8 characters with uppercase, lowercase, and number/i)).toBeInTheDocument();\n    });\n\n    it('shows required field indicators', () => {\n      renderWithProviders(<SignUpForm />);\n\n      expect(screen.getByText(/full name/i)).toBeInTheDocument();\n      expect(screen.getByText(/email address/i)).toBeInTheDocument();\n      expect(screen.getByText(/^password$/i)).toBeInTheDocument();\n      \n      // Check for required indicators in labels\n      const labels = screen.getAllByText(/\\*/);\n      expect(labels).toHaveLength(3); // Name, email, and password should be marked as required\n    });\n  });\n\n  describe('Form Validation', () => {\n    it('validates required fields on submission', async () => {\n      const user = userEvent.setup();\n      renderWithProviders(<SignUpForm />);\n\n      const submitButton = screen.getByRole('button', { name: /create account/i });\n      await user.click(submitButton);\n\n      await waitFor(() => {\n        expect(screen.getByText(/name is required/i)).toBeInTheDocument();\n        expect(screen.getByText(/email is required/i)).toBeInTheDocument();\n        expect(screen.getByText(/password is required/i)).toBeInTheDocument();\n      });\n\n      // Should not make API call with invalid data\n      expect(global.fetch).not.toHaveBeenCalled();\n    });\n\n    it('validates email format', async () => {\n      const user = userEvent.setup();\n      renderWithProviders(<SignUpForm />);\n\n      const emailInput = screen.getByLabelText(/email address/i);\n      await user.type(emailInput, 'invalid-email');\n\n      const submitButton = screen.getByRole('button', { name: /create account/i });\n      await user.click(submitButton);\n\n      await waitFor(() => {\n        expect(screen.getByText(/invalid email format/i)).toBeInTheDocument();\n      });\n    });\n\n    it('validates password strength requirements', async () => {\n      const user = userEvent.setup();\n      renderWithProviders(<SignUpForm />);\n\n      const passwordInput = screen.getByLabelText(/^password$/i);\n      \n      // Test weak password\n      await user.type(passwordInput, 'weak');\n      \n      const submitButton = screen.getByRole('button', { name: /create account/i });\n      await user.click(submitButton);\n\n      await waitFor(() => {\n        expect(screen.getByText(/password must be at least 8 characters/i)).toBeInTheDocument();\n      });\n    });\n\n    it('validates password complexity', async () => {\n      const user = userEvent.setup();\n      renderWithProviders(<SignUpForm />);\n\n      const passwordInput = screen.getByLabelText(/^password$/i);\n      \n      // Test password without uppercase\n      await user.type(passwordInput, 'password123');\n      \n      const submitButton = screen.getByRole('button', { name: /create account/i });\n      await user.click(submitButton);\n\n      await waitFor(() => {\n        expect(screen.getByText(/password must contain.*uppercase/i)).toBeInTheDocument();\n      });\n    });\n\n    it('validates name length', async () => {\n      const user = userEvent.setup();\n      renderWithProviders(<SignUpForm />);\n\n      const nameInput = screen.getByLabelText(/full name/i);\n      await user.type(nameInput, 'A'); // Too short\n\n      const submitButton = screen.getByRole('button', { name: /create account/i });\n      await user.click(submitButton);\n\n      await waitFor(() => {\n        expect(screen.getByText(/name must be at least 2 characters/i)).toBeInTheDocument();\n      });\n    });\n\n    it('clears field errors when user starts typing', async () => {\n      const user = userEvent.setup();\n      renderWithProviders(<SignUpForm />);\n\n      // Trigger validation error\n      const submitButton = screen.getByRole('button', { name: /create account/i });\n      await user.click(submitButton);\n\n      await waitFor(() => {\n        expect(screen.getByText(/name is required/i)).toBeInTheDocument();\n      });\n\n      // Start typing in name field\n      const nameInput = screen.getByLabelText(/full name/i);\n      await user.type(nameInput, 'John');\n\n      // Error should be cleared\n      expect(screen.queryByText(/name is required/i)).not.toBeInTheDocument();\n    });\n  });\n\n  describe('Form Submission', () => {\n    it('submits valid form data', async () => {\n      const user = userEvent.setup();\n      renderWithProviders(<SignUpForm />);\n\n      // Fill form with valid data\n      await user.type(screen.getByLabelText(/full name/i), 'John Doe');\n      await user.type(screen.getByLabelText(/email address/i), 'john@example.com');\n      await user.type(screen.getByLabelText(/^password$/i), 'Password123');\n\n      // Submit form\n      await user.click(screen.getByRole('button', { name: /create account/i }));\n\n      await waitFor(() => {\n        expect(global.fetch).toHaveBeenCalledWith(\n          '/api/auth/signup',\n          expect.objectContaining({\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n              name: 'John Doe',\n              email: 'john@example.com',\n              password: 'Password123',\n            }),\n          })\n        );\n      });\n    });\n\n    it('redirects to dashboard on successful sign-up', async () => {\n      const user = userEvent.setup();\n      renderWithProviders(<SignUpForm />);\n\n      await user.type(screen.getByLabelText(/full name/i), 'John Doe');\n      await user.type(screen.getByLabelText(/email address/i), 'john@example.com');\n      await user.type(screen.getByLabelText(/^password$/i), 'Password123');\n      await user.click(screen.getByRole('button', { name: /create account/i }));\n\n      await waitFor(() => {\n        expect(mockPush).toHaveBeenCalledWith('/dashboard');\n        expect(mockRefresh).toHaveBeenCalled();\n      });\n    });\n\n    it('shows loading state during submission', async () => {\n      const user = userEvent.setup();\n      \n      // Mock delayed response\n      global.fetch = jest.fn(() => \n        new Promise(resolve => \n          setTimeout(() => resolve({\n            ok: true,\n            json: () => Promise.resolve({ success: true })\n          }), 100)\n        )\n      );\n\n      renderWithProviders(<SignUpForm />);\n\n      await user.type(screen.getByLabelText(/full name/i), 'John Doe');\n      await user.type(screen.getByLabelText(/email address/i), 'john@example.com');\n      await user.type(screen.getByLabelText(/^password$/i), 'Password123');\n      \n      const submitButton = screen.getByRole('button', { name: /create account/i });\n      await user.click(submitButton);\n\n      // Check loading state\n      expect(submitButton).toBeDisabled();\n      expect(screen.getByText(/creating account/i)).toBeInTheDocument();\n      expect(screen.getByText(/please wait while we create your account/i)).toBeInTheDocument();\n    });\n  });\n\n  describe('Error Handling', () => {\n    it('displays server validation errors', async () => {\n      const user = userEvent.setup();\n      mockApiError('/api/auth/signup', 400, {\n        errors: {\n          email: 'Email already exists',\n          password: 'Password too weak',\n        },\n      });\n\n      renderWithProviders(<SignUpForm />);\n\n      await user.type(screen.getByLabelText(/full name/i), 'John Doe');\n      await user.type(screen.getByLabelText(/email address/i), 'existing@example.com');\n      await user.type(screen.getByLabelText(/^password$/i), 'WeakPass');\n      await user.click(screen.getByRole('button', { name: /create account/i }));\n\n      await waitFor(() => {\n        expect(screen.getByText('Email already exists')).toBeInTheDocument();\n        expect(screen.getByText('Password too weak')).toBeInTheDocument();\n      });\n    });\n\n    it('displays general error message', async () => {\n      const user = userEvent.setup();\n      mockApiError('/api/auth/signup', 500, {\n        error: 'Server error occurred',\n      });\n\n      renderWithProviders(<SignUpForm />);\n\n      await user.type(screen.getByLabelText(/full name/i), 'John Doe');\n      await user.type(screen.getByLabelText(/email address/i), 'john@example.com');\n      await user.type(screen.getByLabelText(/^password$/i), 'Password123');\n      await user.click(screen.getByRole('button', { name: /create account/i }));\n\n      await waitFor(() => {\n        expect(screen.getByText('Account Creation Failed')).toBeInTheDocument();\n        expect(screen.getByText('Server error occurred')).toBeInTheDocument();\n      });\n    });\n\n    it('handles network errors gracefully', async () => {\n      const user = userEvent.setup();\n      \n      // Mock network error\n      global.fetch = jest.fn(() => Promise.reject(new Error('Network error')));\n\n      renderWithProviders(<SignUpForm />);\n\n      await user.type(screen.getByLabelText(/full name/i), 'John Doe');\n      await user.type(screen.getByLabelText(/email address/i), 'john@example.com');\n      await user.type(screen.getByLabelText(/^password$/i), 'Password123');\n      await user.click(screen.getByRole('button', { name: /create account/i }));\n\n      await waitFor(() => {\n        expect(screen.getByText(/an unexpected error occurred/i)).toBeInTheDocument();\n      });\n    });\n\n    it('clears errors when form is resubmitted', async () => {\n      const user = userEvent.setup();\n      mockApiError('/api/auth/signup', 400, { error: 'Email already exists' });\n\n      renderWithProviders(<SignUpForm />);\n\n      // First submission with error\n      await user.type(screen.getByLabelText(/full name/i), 'John Doe');\n      await user.type(screen.getByLabelText(/email address/i), 'existing@example.com');\n      await user.type(screen.getByLabelText(/^password$/i), 'Password123');\n      await user.click(screen.getByRole('button', { name: /create account/i }));\n\n      await waitFor(() => {\n        expect(screen.getByText('Email already exists')).toBeInTheDocument();\n      });\n\n      // Mock successful response for retry\n      mockApiResponses({\n        '/api/auth/signup': { success: true },\n      });\n\n      // Retry submission\n      await user.clear(screen.getByLabelText(/email address/i));\n      await user.type(screen.getByLabelText(/email address/i), 'newemail@example.com');\n      await user.click(screen.getByRole('button', { name: /create account/i }));\n\n      // Error should be cleared\n      expect(screen.queryByText('Email already exists')).not.toBeInTheDocument();\n    });\n  });\n\n  describe('Password Field Behavior', () => {\n    it('shows password help text', () => {\n      renderWithProviders(<SignUpForm />);\n\n      const passwordHelp = screen.getByText(/password must be at least 8 characters with uppercase, lowercase, and number/i);\n      expect(passwordHelp).toBeInTheDocument();\n      expect(passwordHelp).toHaveAttribute('id', 'signup-password-help');\n    });\n\n    it('associates password field with help text', () => {\n      renderWithProviders(<SignUpForm />);\n\n      const passwordInput = screen.getByLabelText(/^password$/i);\n      expect(passwordInput).toHaveAttribute('aria-describedby', 'signup-password-help');\n    });\n\n    it('associates password field with error message when validation fails', async () => {\n      const user = userEvent.setup();\n      renderWithProviders(<SignUpForm />);\n\n      await user.type(screen.getByLabelText(/^password$/i), 'weak');\n      await user.click(screen.getByRole('button', { name: /create account/i }));\n\n      await waitFor(() => {\n        const passwordInput = screen.getByLabelText(/^password$/i);\n        expect(passwordInput).toHaveAttribute('aria-describedby', 'signup-password-error signup-password-help');\n      });\n    });\n  });\n\n  describe('Accessibility', () => {\n    it('has proper ARIA attributes', () => {\n      renderWithProviders(<SignUpForm />);\n\n      const nameInput = screen.getByLabelText(/full name/i);\n      const emailInput = screen.getByLabelText(/email address/i);\n      const passwordInput = screen.getByLabelText(/^password$/i);\n\n      expect(nameInput).toHaveAttribute('id', 'signup-name');\n      expect(emailInput).toHaveAttribute('id', 'signup-email');\n      expect(passwordInput).toHaveAttribute('id', 'signup-password');\n    });\n\n    it('associates error messages with form fields', async () => {\n      const user = userEvent.setup();\n      renderWithProviders(<SignUpForm />);\n\n      await user.click(screen.getByRole('button', { name: /create account/i }));\n\n      await waitFor(() => {\n        const nameInput = screen.getByLabelText(/full name/i);\n        const nameError = screen.getByText(/name is required/i);\n        \n        expect(nameInput).toHaveAttribute('aria-describedby', 'signup-name-error');\n        expect(nameError).toHaveAttribute('id', 'signup-name-error');\n        expect(nameError).toHaveAttribute('role', 'alert');\n      });\n    });\n\n    it('provides screen reader feedback for loading state', async () => {\n      const user = userEvent.setup();\n      \n      // Mock delayed response\n      global.fetch = jest.fn(() => \n        new Promise(resolve => \n          setTimeout(() => resolve({\n            ok: true,\n            json: () => Promise.resolve({ success: true })\n          }), 100)\n        )\n      );\n\n      renderWithProviders(<SignUpForm />);\n\n      await user.type(screen.getByLabelText(/full name/i), 'John Doe');\n      await user.type(screen.getByLabelText(/email address/i), 'john@example.com');\n      await user.type(screen.getByLabelText(/^password$/i), 'Password123');\n      \n      const submitButton = screen.getByRole('button', { name: /create account/i });\n      await user.click(submitButton);\n\n      expect(submitButton).toHaveAttribute('aria-describedby', 'signup-loading');\n      expect(screen.getByText(/please wait while we create your account/i)).toHaveClass('sr-only');\n    });\n\n    it('has proper form validation summary', async () => {\n      const user = userEvent.setup();\n      mockApiError('/api/auth/signup', 400, { error: 'Account creation failed' });\n\n      renderWithProviders(<SignUpForm />);\n\n      await user.type(screen.getByLabelText(/full name/i), 'John Doe');\n      await user.type(screen.getByLabelText(/email address/i), 'john@example.com');\n      await user.type(screen.getByLabelText(/^password$/i), 'Password123');\n      await user.click(screen.getByRole('button', { name: /create account/i }));\n\n      await waitFor(() => {\n        const summary = screen.getByText('Account Creation Failed').closest('.form-validation-summary');\n        expect(summary).toBeInTheDocument();\n        expect(summary).toHaveClass('form-validation-summary');\n      });\n    });\n  });\n\n  describe('Form Interaction', () => {\n    it('allows keyboard navigation', async () => {\n      const user = userEvent.setup();\n      renderWithProviders(<SignUpForm />);\n\n      const nameInput = screen.getByLabelText(/full name/i);\n      const emailInput = screen.getByLabelText(/email address/i);\n      const passwordInput = screen.getByLabelText(/^password$/i);\n      const submitButton = screen.getByRole('button', { name: /create account/i });\n\n      // Tab through form elements\n      await user.tab();\n      expect(nameInput).toHaveFocus();\n\n      await user.tab();\n      expect(emailInput).toHaveFocus();\n\n      await user.tab();\n      expect(passwordInput).toHaveFocus();\n\n      await user.tab();\n      expect(submitButton).toHaveFocus();\n    });\n\n    it('submits form on Enter key in password field', async () => {\n      const user = userEvent.setup();\n      renderWithProviders(<SignUpForm />);\n\n      await user.type(screen.getByLabelText(/full name/i), 'John Doe');\n      await user.type(screen.getByLabelText(/email address/i), 'john@example.com');\n      await user.type(screen.getByLabelText(/^password$/i), 'Password123');\n      \n      // Press Enter in password field\n      await user.keyboard('{Enter}');\n\n      await waitFor(() => {\n        expect(global.fetch).toHaveBeenCalledWith('/api/auth/signup', expect.any(Object));\n      });\n    });\n\n    it('maintains form state during validation', async () => {\n      const user = userEvent.setup();\n      renderWithProviders(<SignUpForm />);\n\n      const nameInput = screen.getByLabelText(/full name/i);\n      const emailInput = screen.getByLabelText(/email address/i);\n      const passwordInput = screen.getByLabelText(/^password$/i);\n\n      await user.type(nameInput, 'John Doe');\n      await user.type(emailInput, 'john@example.com');\n      await user.type(passwordInput, 'weak'); // Invalid password\n\n      await user.click(screen.getByRole('button', { name: /create account/i }));\n\n      // Form values should be preserved even with validation errors\n      expect(nameInput).toHaveValue('John Doe');\n      expect(emailInput).toHaveValue('john@example.com');\n      expect(passwordInput).toHaveValue('weak');\n    });\n  });\n});"],"names":["jest","mock","useRouter","push","mockPush","refresh","mockRefresh","fn","describe","beforeEach","clearAllMocks","mockApiResponses","success","user","id","email","it","renderWithProviders","SignUpForm","expect","screen","getByLabelText","toBeInTheDocument","getByRole","name","form","hidden","toHaveAttribute","nameInput","emailInput","passwordInput","getByText","labels","getAllByText","toHaveLength","userEvent","setup","submitButton","click","waitFor","global","fetch","not","toHaveBeenCalled","type","queryByText","toHaveBeenCalledWith","objectContaining","method","headers","body","JSON","stringify","password","Promise","resolve","setTimeout","ok","json","toBeDisabled","mockApiError","errors","error","reject","Error","clear","passwordHelp","nameError","toHaveClass","summary","closest","tab","toHaveFocus","keyboard","any","Object","toHaveValue"],"mappings":"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"}