0b80e7cc1914df2d2be1cdc992f7e3f2
"use strict";

/* istanbul ignore next */
function cov_1fquel92zb() {
  var path = "/Users/stefanbekker/projects/fancy-planties/src/app/api/auth/verify-email/route.ts";
  var hash = "8cd6aadd9c76b10bcb2c8819063b15c0c5cb9966";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/stefanbekker/projects/fancy-planties/src/app/api/auth/verify-email/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 20
        }
      },
      "3": {
        start: {
          line: 11,
          column: 16
        },
        end: {
          line: 11,
          column: 38
        }
      },
      "4": {
        start: {
          line: 12,
          column: 13
        },
        end: {
          line: 12,
          column: 27
        }
      },
      "5": {
        start: {
          line: 13,
          column: 38
        },
        end: {
          line: 13,
          column: 105
        }
      },
      "6": {
        start: {
          line: 14,
          column: 37
        },
        end: {
          line: 14,
          column: 98
        }
      },
      "7": {
        start: {
          line: 16,
          column: 26
        },
        end: {
          line: 19,
          column: 2
        }
      },
      "8": {
        start: {
          line: 21,
          column: 4
        },
        end: {
          line: 118,
          column: 7
        }
      },
      "9": {
        start: {
          line: 23,
          column: 21
        },
        end: {
          line: 23,
          column: 56
        }
      },
      "10": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 117,
          column: 9
        }
      },
      "11": {
        start: {
          line: 26,
          column: 31
        },
        end: {
          line: 26,
          column: 64
        }
      },
      "12": {
        start: {
          line: 27,
          column: 12
        },
        end: {
          line: 37,
          column: 13
        }
      },
      "13": {
        start: {
          line: 28,
          column: 16
        },
        end: {
          line: 36,
          column: 19
        }
      },
      "14": {
        start: {
          line: 30,
          column: 67
        },
        end: {
          line: 33,
          column: 25
        }
      },
      "15": {
        start: {
          line: 38,
          column: 36
        },
        end: {
          line: 38,
          column: 51
        }
      },
      "16": {
        start: {
          line: 39,
          column: 12
        },
        end: {
          line: 109,
          column: 13
        }
      },
      "17": {
        start: {
          line: 41,
          column: 32
        },
        end: {
          line: 41,
          column: 122
        }
      },
      "18": {
        start: {
          line: 42,
          column: 16
        },
        end: {
          line: 49,
          column: 17
        }
      },
      "19": {
        start: {
          line: 43,
          column: 20
        },
        end: {
          line: 43,
          column: 78
        }
      },
      "20": {
        start: {
          line: 44,
          column: 20
        },
        end: {
          line: 48,
          column: 23
        }
      },
      "21": {
        start: {
          line: 51,
          column: 16
        },
        end: {
          line: 55,
          column: 19
        }
      },
      "22": {
        start: {
          line: 57,
          column: 16
        },
        end: {
          line: 101,
          column: 17
        }
      },
      "23": {
        start: {
          line: 59,
          column: 20
        },
        end: {
          line: 65,
          column: 21
        }
      },
      "24": {
        start: {
          line: 60,
          column: 24
        },
        end: {
          line: 64,
          column: 25
        }
      },
      "25": {
        start: {
          line: 61,
          column: 28
        },
        end: {
          line: 61,
          column: 124
        }
      },
      "26": {
        start: {
          line: 63,
          column: 28
        },
        end: {
          line: 63,
          column: 104
        }
      },
      "27": {
        start: {
          line: 68,
          column: 37
        },
        end: {
          line: 68,
          column: 40
        }
      },
      "28": {
        start: {
          line: 69,
          column: 20
        },
        end: {
          line: 93,
          column: 21
        }
      },
      "29": {
        start: {
          line: 71,
          column: 28
        },
        end: {
          line: 71,
          column: 102
        }
      },
      "30": {
        start: {
          line: 72,
          column: 28
        },
        end: {
          line: 72,
          column: 34
        }
      },
      "31": {
        start: {
          line: 74,
          column: 28
        },
        end: {
          line: 74,
          column: 100
        }
      },
      "32": {
        start: {
          line: 75,
          column: 28
        },
        end: {
          line: 75,
          column: 34
        }
      },
      "33": {
        start: {
          line: 77,
          column: 28
        },
        end: {
          line: 77,
          column: 104
        }
      },
      "34": {
        start: {
          line: 78,
          column: 28
        },
        end: {
          line: 78,
          column: 45
        }
      },
      "35": {
        start: {
          line: 79,
          column: 28
        },
        end: {
          line: 79,
          column: 34
        }
      },
      "36": {
        start: {
          line: 81,
          column: 28
        },
        end: {
          line: 81,
          column: 83
        }
      },
      "37": {
        start: {
          line: 82,
          column: 28
        },
        end: {
          line: 82,
          column: 45
        }
      },
      "38": {
        start: {
          line: 83,
          column: 28
        },
        end: {
          line: 83,
          column: 34
        }
      },
      "39": {
        start: {
          line: 85,
          column: 28
        },
        end: {
          line: 85,
          column: 105
        }
      },
      "40": {
        start: {
          line: 86,
          column: 28
        },
        end: {
          line: 90,
          column: 31
        }
      },
      "41": {
        start: {
          line: 92,
          column: 28
        },
        end: {
          line: 92,
          column: 84
        }
      },
      "42": {
        start: {
          line: 94,
          column: 20
        },
        end: {
          line: 94,
          column: 107
        }
      },
      "43": {
        start: {
          line: 95,
          column: 20
        },
        end: {
          line: 100,
          column: 23
        }
      },
      "44": {
        start: {
          line: 103,
          column: 16
        },
        end: {
          line: 103,
          column: 84
        }
      },
      "45": {
        start: {
          line: 104,
          column: 16
        },
        end: {
          line: 108,
          column: 19
        }
      },
      "46": {
        start: {
          line: 111,
          column: 12
        },
        end: {
          line: 111,
          column: 71
        }
      },
      "47": {
        start: {
          line: 112,
          column: 12
        },
        end: {
          line: 116,
          column: 15
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "POST",
        decl: {
          start: {
            line: 20,
            column: 15
          },
          end: {
            line: 20,
            column: 19
          }
        },
        loc: {
          start: {
            line: 20,
            column: 29
          },
          end: {
            line: 119,
            column: 1
          }
        },
        line: 20
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 21,
            column: 80
          },
          end: {
            line: 21,
            column: 81
          }
        },
        loc: {
          start: {
            line: 21,
            column: 93
          },
          end: {
            line: 118,
            column: 5
          }
        },
        line: 21
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 30,
            column: 57
          },
          end: {
            line: 30,
            column: 58
          }
        },
        loc: {
          start: {
            line: 30,
            column: 67
          },
          end: {
            line: 33,
            column: 25
          }
        },
        line: 30
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 23,
            column: 21
          },
          end: {
            line: 23,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 23,
            column: 21
          },
          end: {
            line: 23,
            column: 36
          }
        }, {
          start: {
            line: 23,
            column: 40
          },
          end: {
            line: 23,
            column: 56
          }
        }],
        line: 23
      },
      "1": {
        loc: {
          start: {
            line: 27,
            column: 12
          },
          end: {
            line: 37,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 27,
            column: 12
          },
          end: {
            line: 37,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 27
      },
      "2": {
        loc: {
          start: {
            line: 42,
            column: 16
          },
          end: {
            line: 49,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 42,
            column: 16
          },
          end: {
            line: 49,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 42
      },
      "3": {
        loc: {
          start: {
            line: 57,
            column: 16
          },
          end: {
            line: 101,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 57,
            column: 16
          },
          end: {
            line: 101,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 57
      },
      "4": {
        loc: {
          start: {
            line: 59,
            column: 20
          },
          end: {
            line: 65,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 59,
            column: 20
          },
          end: {
            line: 65,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 59
      },
      "5": {
        loc: {
          start: {
            line: 69,
            column: 20
          },
          end: {
            line: 93,
            column: 21
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 70,
            column: 24
          },
          end: {
            line: 72,
            column: 34
          }
        }, {
          start: {
            line: 73,
            column: 24
          },
          end: {
            line: 75,
            column: 34
          }
        }, {
          start: {
            line: 76,
            column: 24
          },
          end: {
            line: 79,
            column: 34
          }
        }, {
          start: {
            line: 80,
            column: 24
          },
          end: {
            line: 83,
            column: 34
          }
        }, {
          start: {
            line: 84,
            column: 24
          },
          end: {
            line: 90,
            column: 31
          }
        }, {
          start: {
            line: 91,
            column: 24
          },
          end: {
            line: 92,
            column: 84
          }
        }],
        line: 69
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0, 0, 0, 0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/stefanbekker/projects/fancy-planties/src/app/api/auth/verify-email/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport { z } from 'zod';\nimport { emailVerificationCodeService, VerificationCodeError, VerificationError } from '@/lib/services/email-verification-code-service';\nimport { withVerificationRateLimit } from '@/lib/auth/email-verification-middleware';\n\n// Validation schema for email verification request\nconst verifyEmailSchema = z.object({\n  email: z.string().email('Invalid email address'),\n  code: z.string().length(6, 'Verification code must be 6 digits').regex(/^\\d{6}$/, 'Verification code must contain only digits'),\n});\n\n// Note: Rate limiting is handled by the withVerificationRateLimit middleware with enhanced email verification limits\n\nexport async function POST(request: NextRequest) {\n  return withVerificationRateLimit(request, async (req) => {\n    // Extract parsed body from middleware\n    const body = (req as any)._parsedBody || await req.json();\n    try {\n      // Validate input\n      const validation = verifyEmailSchema.safeParse(body);\n      if (!validation.success) {\n        return NextResponse.json(\n          { \n            error: 'Validation failed', \n            details: validation.error.issues.map(issue => ({\n              field: issue.path.join('.'),\n              message: issue.message\n            }))\n          },\n          { status: 400 }\n        );\n      }\n      \n      const { email, code } = validation.data;\n      \n      try {\n        // Validate the verification code\n        const isValid = await emailVerificationCodeService.validateCode(email, code);\n        \n        if (isValid) {\n          console.log(`Email verification successful for ${email}`);\n          \n          return NextResponse.json({\n            success: true,\n            message: 'Email verified successfully! You can now access your account.',\n            redirectTo: '/dashboard'\n          });\n        }\n        \n        // This shouldn't happen if validateCode works correctly, but just in case\n        return NextResponse.json(\n          { error: 'Verification failed' },\n          { status: 400 }\n        );\n        \n      } catch (error) {\n        if (error instanceof VerificationCodeError) {\n          // Increment attempts for invalid codes (but not for other errors)\n          if (error.code === VerificationError.CODE_INVALID) {\n            try {\n              await emailVerificationCodeService.incrementAttempts(email, code);\n            } catch (incrementError) {\n              console.error('Failed to increment verification attempts:', incrementError);\n            }\n          }\n          \n          // Map verification errors to user-friendly messages\n          let errorMessage: string;\n          let statusCode = 400;\n          \n          switch (error.code) {\n            case VerificationError.CODE_EXPIRED:\n              errorMessage = 'Verification code has expired. Please request a new one.';\n              break;\n            case VerificationError.CODE_INVALID:\n              errorMessage = 'Invalid verification code. Please check and try again.';\n              break;\n            case VerificationError.TOO_MANY_ATTEMPTS:\n              errorMessage = 'Too many verification attempts. Please request a new code.';\n              statusCode = 429;\n              break;\n            case VerificationError.USER_NOT_FOUND:\n              errorMessage = 'User not found. Please sign up first.';\n              statusCode = 404;\n              break;\n            case VerificationError.ALREADY_VERIFIED:\n              errorMessage = 'Email is already verified. You can sign in to your account.';\n              return NextResponse.json({\n                success: true,\n                message: errorMessage,\n                redirectTo: '/auth/signin'\n              });\n            default:\n              errorMessage = 'Verification failed. Please try again.';\n          }\n          \n          console.log(`Email verification failed for ${email}: ${error.code} - ${errorMessage}`);\n          \n          return NextResponse.json(\n            { \n              error: errorMessage,\n              code: error.code\n            },\n            { status: statusCode }\n          );\n        }\n        \n        // Log unexpected errors\n        console.error('Unexpected error during email verification:', error);\n        \n        return NextResponse.json(\n          { error: 'Internal server error' },\n          { status: 500 }\n        );\n      }\n      \n    } catch (error) {\n      console.error('Email verification endpoint error:', error);\n      \n      return NextResponse.json(\n        { error: 'Internal server error' },\n        { status: 500 }\n      );\n    }\n  });\n}"],
      names: ["POST", "verifyEmailSchema", "z", "object", "email", "string", "code", "length", "regex", "request", "withVerificationRateLimit", "req", "body", "_parsedBody", "json", "validation", "safeParse", "success", "NextResponse", "error", "details", "issues", "map", "issue", "field", "path", "join", "message", "status", "data", "isValid", "emailVerificationCodeService", "validateCode", "console", "log", "redirectTo", "VerificationCodeError", "VerificationError", "CODE_INVALID", "incrementAttempts", "incrementError", "errorMessage", "statusCode", "CODE_EXPIRED", "TOO_MANY_ATTEMPTS", "USER_NOT_FOUND", "ALREADY_VERIFIED"],
      mappings: ";;;;+BAasBA;;;eAAAA;;;wBAboB;qBACxB;8CACqE;6CAC7C;AAE1C,mDAAmD;AACnD,MAAMC,oBAAoBC,MAAC,CAACC,MAAM,CAAC;IACjCC,OAAOF,MAAC,CAACG,MAAM,GAAGD,KAAK,CAAC;IACxBE,MAAMJ,MAAC,CAACG,MAAM,GAAGE,MAAM,CAAC,GAAG,sCAAsCC,KAAK,CAAC,WAAW;AACpF;AAIO,eAAeR,KAAKS,OAAoB;IAC7C,OAAOC,IAAAA,sDAAyB,EAACD,SAAS,OAAOE;QAC/C,sCAAsC;QACtC,MAAMC,OAAO,AAACD,IAAYE,WAAW,IAAI,MAAMF,IAAIG,IAAI;QACvD,IAAI;YACF,iBAAiB;YACjB,MAAMC,aAAad,kBAAkBe,SAAS,CAACJ;YAC/C,IAAI,CAACG,WAAWE,OAAO,EAAE;gBACvB,OAAOC,oBAAY,CAACJ,IAAI,CACtB;oBACEK,OAAO;oBACPC,SAASL,WAAWI,KAAK,CAACE,MAAM,CAACC,GAAG,CAACC,CAAAA,QAAU,CAAA;4BAC7CC,OAAOD,MAAME,IAAI,CAACC,IAAI,CAAC;4BACvBC,SAASJ,MAAMI,OAAO;wBACxB,CAAA;gBACF,GACA;oBAAEC,QAAQ;gBAAI;YAElB;YAEA,MAAM,EAAExB,KAAK,EAAEE,IAAI,EAAE,GAAGS,WAAWc,IAAI;YAEvC,IAAI;gBACF,iCAAiC;gBACjC,MAAMC,UAAU,MAAMC,0DAA4B,CAACC,YAAY,CAAC5B,OAAOE;gBAEvE,IAAIwB,SAAS;oBACXG,QAAQC,GAAG,CAAC,CAAC,kCAAkC,EAAE9B,OAAO;oBAExD,OAAOc,oBAAY,CAACJ,IAAI,CAAC;wBACvBG,SAAS;wBACTU,SAAS;wBACTQ,YAAY;oBACd;gBACF;gBAEA,0EAA0E;gBAC1E,OAAOjB,oBAAY,CAACJ,IAAI,CACtB;oBAAEK,OAAO;gBAAsB,GAC/B;oBAAES,QAAQ;gBAAI;YAGlB,EAAE,OAAOT,OAAO;gBACd,IAAIA,iBAAiBiB,mDAAqB,EAAE;oBAC1C,kEAAkE;oBAClE,IAAIjB,MAAMb,IAAI,KAAK+B,+CAAiB,CAACC,YAAY,EAAE;wBACjD,IAAI;4BACF,MAAMP,0DAA4B,CAACQ,iBAAiB,CAACnC,OAAOE;wBAC9D,EAAE,OAAOkC,gBAAgB;4BACvBP,QAAQd,KAAK,CAAC,8CAA8CqB;wBAC9D;oBACF;oBAEA,oDAAoD;oBACpD,IAAIC;oBACJ,IAAIC,aAAa;oBAEjB,OAAQvB,MAAMb,IAAI;wBAChB,KAAK+B,+CAAiB,CAACM,YAAY;4BACjCF,eAAe;4BACf;wBACF,KAAKJ,+CAAiB,CAACC,YAAY;4BACjCG,eAAe;4BACf;wBACF,KAAKJ,+CAAiB,CAACO,iBAAiB;4BACtCH,eAAe;4BACfC,aAAa;4BACb;wBACF,KAAKL,+CAAiB,CAACQ,cAAc;4BACnCJ,eAAe;4BACfC,aAAa;4BACb;wBACF,KAAKL,+CAAiB,CAACS,gBAAgB;4BACrCL,eAAe;4BACf,OAAOvB,oBAAY,CAACJ,IAAI,CAAC;gCACvBG,SAAS;gCACTU,SAASc;gCACTN,YAAY;4BACd;wBACF;4BACEM,eAAe;oBACnB;oBAEAR,QAAQC,GAAG,CAAC,CAAC,8BAA8B,EAAE9B,MAAM,EAAE,EAAEe,MAAMb,IAAI,CAAC,GAAG,EAAEmC,cAAc;oBAErF,OAAOvB,oBAAY,CAACJ,IAAI,CACtB;wBACEK,OAAOsB;wBACPnC,MAAMa,MAAMb,IAAI;oBAClB,GACA;wBAAEsB,QAAQc;oBAAW;gBAEzB;gBAEA,wBAAwB;gBACxBT,QAAQd,KAAK,CAAC,+CAA+CA;gBAE7D,OAAOD,oBAAY,CAACJ,IAAI,CACtB;oBAAEK,OAAO;gBAAwB,GACjC;oBAAES,QAAQ;gBAAI;YAElB;QAEF,EAAE,OAAOT,OAAO;YACdc,QAAQd,KAAK,CAAC,sCAAsCA;YAEpD,OAAOD,oBAAY,CAACJ,IAAI,CACtB;gBAAEK,OAAO;YAAwB,GACjC;gBAAES,QAAQ;YAAI;QAElB;IACF;AACF"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "8cd6aadd9c76b10bcb2c8819063b15c0c5cb9966"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1fquel92zb = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1fquel92zb();
cov_1fquel92zb().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1fquel92zb().s[1]++;
Object.defineProperty(exports, "POST", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_1fquel92zb().f[0]++;
    cov_1fquel92zb().s[2]++;
    return POST;
  }
});
const _server =
/* istanbul ignore next */
(cov_1fquel92zb().s[3]++, require("next/server"));
const _zod =
/* istanbul ignore next */
(cov_1fquel92zb().s[4]++, require("zod"));
const _emailverificationcodeservice =
/* istanbul ignore next */
(cov_1fquel92zb().s[5]++, require("../../../../lib/services/email-verification-code-service"));
const _emailverificationmiddleware =
/* istanbul ignore next */
(cov_1fquel92zb().s[6]++, require("../../../../lib/auth/email-verification-middleware"));
// Validation schema for email verification request
const verifyEmailSchema =
/* istanbul ignore next */
(cov_1fquel92zb().s[7]++, _zod.z.object({
  email: _zod.z.string().email('Invalid email address'),
  code: _zod.z.string().length(6, 'Verification code must be 6 digits').regex(/^\d{6}$/, 'Verification code must contain only digits')
}));
async function POST(request) {
  /* istanbul ignore next */
  cov_1fquel92zb().f[1]++;
  cov_1fquel92zb().s[8]++;
  return (0, _emailverificationmiddleware.withVerificationRateLimit)(request, async req => {
    /* istanbul ignore next */
    cov_1fquel92zb().f[2]++;
    // Extract parsed body from middleware
    const body =
    /* istanbul ignore next */
    (cov_1fquel92zb().s[9]++,
    /* istanbul ignore next */
    (cov_1fquel92zb().b[0][0]++, req._parsedBody) ||
    /* istanbul ignore next */
    (cov_1fquel92zb().b[0][1]++, await req.json()));
    /* istanbul ignore next */
    cov_1fquel92zb().s[10]++;
    try {
      // Validate input
      const validation =
      /* istanbul ignore next */
      (cov_1fquel92zb().s[11]++, verifyEmailSchema.safeParse(body));
      /* istanbul ignore next */
      cov_1fquel92zb().s[12]++;
      if (!validation.success) {
        /* istanbul ignore next */
        cov_1fquel92zb().b[1][0]++;
        cov_1fquel92zb().s[13]++;
        return _server.NextResponse.json({
          error: 'Validation failed',
          details: validation.error.issues.map(issue => {
            /* istanbul ignore next */
            cov_1fquel92zb().f[3]++;
            cov_1fquel92zb().s[14]++;
            return {
              field: issue.path.join('.'),
              message: issue.message
            };
          })
        }, {
          status: 400
        });
      } else
      /* istanbul ignore next */
      {
        cov_1fquel92zb().b[1][1]++;
      }
      const {
        email,
        code
      } =
      /* istanbul ignore next */
      (cov_1fquel92zb().s[15]++, validation.data);
      /* istanbul ignore next */
      cov_1fquel92zb().s[16]++;
      try {
        // Validate the verification code
        const isValid =
        /* istanbul ignore next */
        (cov_1fquel92zb().s[17]++, await _emailverificationcodeservice.emailVerificationCodeService.validateCode(email, code));
        /* istanbul ignore next */
        cov_1fquel92zb().s[18]++;
        if (isValid) {
          /* istanbul ignore next */
          cov_1fquel92zb().b[2][0]++;
          cov_1fquel92zb().s[19]++;
          console.log(`Email verification successful for ${email}`);
          /* istanbul ignore next */
          cov_1fquel92zb().s[20]++;
          return _server.NextResponse.json({
            success: true,
            message: 'Email verified successfully! You can now access your account.',
            redirectTo: '/dashboard'
          });
        } else
        /* istanbul ignore next */
        {
          cov_1fquel92zb().b[2][1]++;
        }
        // This shouldn't happen if validateCode works correctly, but just in case
        cov_1fquel92zb().s[21]++;
        return _server.NextResponse.json({
          error: 'Verification failed'
        }, {
          status: 400
        });
      } catch (error) {
        /* istanbul ignore next */
        cov_1fquel92zb().s[22]++;
        if (error instanceof _emailverificationcodeservice.VerificationCodeError) {
          /* istanbul ignore next */
          cov_1fquel92zb().b[3][0]++;
          cov_1fquel92zb().s[23]++;
          // Increment attempts for invalid codes (but not for other errors)
          if (error.code === _emailverificationcodeservice.VerificationError.CODE_INVALID) {
            /* istanbul ignore next */
            cov_1fquel92zb().b[4][0]++;
            cov_1fquel92zb().s[24]++;
            try {
              /* istanbul ignore next */
              cov_1fquel92zb().s[25]++;
              await _emailverificationcodeservice.emailVerificationCodeService.incrementAttempts(email, code);
            } catch (incrementError) {
              /* istanbul ignore next */
              cov_1fquel92zb().s[26]++;
              console.error('Failed to increment verification attempts:', incrementError);
            }
          } else
          /* istanbul ignore next */
          {
            cov_1fquel92zb().b[4][1]++;
          }
          // Map verification errors to user-friendly messages
          let errorMessage;
          let statusCode =
          /* istanbul ignore next */
          (cov_1fquel92zb().s[27]++, 400);
          /* istanbul ignore next */
          cov_1fquel92zb().s[28]++;
          switch (error.code) {
            case _emailverificationcodeservice.VerificationError.CODE_EXPIRED:
              /* istanbul ignore next */
              cov_1fquel92zb().b[5][0]++;
              cov_1fquel92zb().s[29]++;
              errorMessage = 'Verification code has expired. Please request a new one.';
              /* istanbul ignore next */
              cov_1fquel92zb().s[30]++;
              break;
            case _emailverificationcodeservice.VerificationError.CODE_INVALID:
              /* istanbul ignore next */
              cov_1fquel92zb().b[5][1]++;
              cov_1fquel92zb().s[31]++;
              errorMessage = 'Invalid verification code. Please check and try again.';
              /* istanbul ignore next */
              cov_1fquel92zb().s[32]++;
              break;
            case _emailverificationcodeservice.VerificationError.TOO_MANY_ATTEMPTS:
              /* istanbul ignore next */
              cov_1fquel92zb().b[5][2]++;
              cov_1fquel92zb().s[33]++;
              errorMessage = 'Too many verification attempts. Please request a new code.';
              /* istanbul ignore next */
              cov_1fquel92zb().s[34]++;
              statusCode = 429;
              /* istanbul ignore next */
              cov_1fquel92zb().s[35]++;
              break;
            case _emailverificationcodeservice.VerificationError.USER_NOT_FOUND:
              /* istanbul ignore next */
              cov_1fquel92zb().b[5][3]++;
              cov_1fquel92zb().s[36]++;
              errorMessage = 'User not found. Please sign up first.';
              /* istanbul ignore next */
              cov_1fquel92zb().s[37]++;
              statusCode = 404;
              /* istanbul ignore next */
              cov_1fquel92zb().s[38]++;
              break;
            case _emailverificationcodeservice.VerificationError.ALREADY_VERIFIED:
              /* istanbul ignore next */
              cov_1fquel92zb().b[5][4]++;
              cov_1fquel92zb().s[39]++;
              errorMessage = 'Email is already verified. You can sign in to your account.';
              /* istanbul ignore next */
              cov_1fquel92zb().s[40]++;
              return _server.NextResponse.json({
                success: true,
                message: errorMessage,
                redirectTo: '/auth/signin'
              });
            default:
              /* istanbul ignore next */
              cov_1fquel92zb().b[5][5]++;
              cov_1fquel92zb().s[41]++;
              errorMessage = 'Verification failed. Please try again.';
          }
          /* istanbul ignore next */
          cov_1fquel92zb().s[42]++;
          console.log(`Email verification failed for ${email}: ${error.code} - ${errorMessage}`);
          /* istanbul ignore next */
          cov_1fquel92zb().s[43]++;
          return _server.NextResponse.json({
            error: errorMessage,
            code: error.code
          }, {
            status: statusCode
          });
        } else
        /* istanbul ignore next */
        {
          cov_1fquel92zb().b[3][1]++;
        }
        // Log unexpected errors
        cov_1fquel92zb().s[44]++;
        console.error('Unexpected error during email verification:', error);
        /* istanbul ignore next */
        cov_1fquel92zb().s[45]++;
        return _server.NextResponse.json({
          error: 'Internal server error'
        }, {
          status: 500
        });
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_1fquel92zb().s[46]++;
      console.error('Email verification endpoint error:', error);
      /* istanbul ignore next */
      cov_1fquel92zb().s[47]++;
      return _server.NextResponse.json({
        error: 'Internal server error'
      }, {
        status: 500
      });
    }
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,