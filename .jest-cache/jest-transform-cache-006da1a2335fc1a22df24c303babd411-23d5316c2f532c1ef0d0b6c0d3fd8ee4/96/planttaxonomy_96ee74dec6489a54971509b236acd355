7228c2c09d2eb16de3c953d83e79b413
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get createPlant () {
        return createPlant;
    },
    get deletePlant () {
        return deletePlant;
    },
    get getPlantById () {
        return getPlantById;
    },
    get getPlantsWithStats () {
        return getPlantsWithStats;
    },
    get getQuickSelectPlants () {
        return getQuickSelectPlants;
    },
    get getTaxonomyHierarchy () {
        return getTaxonomyHierarchy;
    },
    get searchPlants () {
        return searchPlants;
    },
    get updatePlant () {
        return updatePlant;
    },
    get validatePlantTaxonomy () {
        return validatePlantTaxonomy;
    }
});
const _db = require("..");
const _schema = require("../schema");
const _drizzleorm = require("drizzle-orm");
const _planttypes = require("../../types/plant-types");
// Helper function to build plant visibility conditions
function buildPlantVisibilityFilter(currentUserId) {
    if (!currentUserId) {
        // If no user context, only show verified plants
        return (0, _drizzleorm.eq)(_schema.plants.isVerified, true);
    }
    // Plants are visible if:
    // 1. They are verified (public)
    // 2. They were created by a curator (public)
    // 3. They were created by the current user (private)
    return (0, _drizzleorm.or)((0, _drizzleorm.eq)(_schema.plants.isVerified, true), (0, _drizzleorm.and)((0, _drizzleorm.eq)(_schema.plants.createdBy, currentUserId)), // Plants created by curators are visible to all
    (0, _drizzleorm.sql)`EXISTS (
      SELECT 1 FROM ${_schema.users} 
      WHERE ${_schema.users.id} = ${_schema.plants.createdBy} 
      AND ${_schema.users.isCurator} = true
    )`);
}
async function createPlant(data, userId) {
    const plantData = {
        ...data,
        createdBy: userId || data.createdBy
    };
    const [newPlant] = await _db.db.insert(_schema.plants).values(plantData).returning();
    return _planttypes.plantHelpers.enhancePlant(newPlant);
}
async function updatePlant(data) {
    const { id, ...updateData } = data;
    const [updatedPlant] = await _db.db.update(_schema.plants).set({
        ...updateData,
        updatedAt: new Date()
    }).where((0, _drizzleorm.eq)(_schema.plants.id, id)).returning();
    return updatedPlant ? _planttypes.plantHelpers.enhancePlant(updatedPlant) : null;
}
async function getPlantById(id) {
    const plant = await _db.db.query.plants.findFirst({
        where: (0, _drizzleorm.eq)(_schema.plants.id, id),
        with: {
            createdBy: {
                columns: {
                    id: true,
                    name: true
                }
            }
        }
    });
    return plant ? _planttypes.plantHelpers.enhancePlant(plant) : null;
}
async function getPlantsWithStats(filter = {
    limit: 20,
    offset: 0
}, userId) {
    const conditions = [];
    // Add visibility filter based on curator/user logic
    conditions.push(buildPlantVisibilityFilter(userId));
    if (filter.family) {
        conditions.push((0, _drizzleorm.ilike)(_schema.plants.family, `%${filter.family}%`));
    }
    if (filter.genus) {
        conditions.push((0, _drizzleorm.ilike)(_schema.plants.genus, `%${filter.genus}%`));
    }
    if (filter.isVerified !== undefined) {
        conditions.push((0, _drizzleorm.eq)(_schema.plants.isVerified, filter.isVerified));
    }
    if (filter.createdBy) {
        conditions.push((0, _drizzleorm.eq)(_schema.plants.createdBy, filter.createdBy));
    }
    const whereClause = (0, _drizzleorm.and)(...conditions);
    // Query with subqueries for statistics
    const plantsWithStats = await _db.db.select({
        id: _schema.plants.id,
        family: _schema.plants.family,
        genus: _schema.plants.genus,
        species: _schema.plants.species,
        cultivar: _schema.plants.cultivar,
        commonName: _schema.plants.commonName,
        careInstructions: _schema.plants.careInstructions,
        defaultImage: _schema.plants.defaultImage,
        createdBy: _schema.plants.createdBy,
        isVerified: _schema.plants.isVerified,
        createdAt: _schema.plants.createdAt,
        updatedAt: _schema.plants.updatedAt,
        instanceCount: (0, _drizzleorm.sql)`(
        SELECT COUNT(*) FROM plant_instances 
        WHERE plant_id = ${_schema.plants.id}
        ${userId ? (0, _drizzleorm.sql)`AND user_id = ${userId}` : (0, _drizzleorm.sql)``}
      )`,
        propagationCount: (0, _drizzleorm.sql)`(
        SELECT COUNT(*) FROM propagations 
        WHERE plant_id = ${_schema.plants.id}
        ${userId ? (0, _drizzleorm.sql)`AND user_id = ${userId}` : (0, _drizzleorm.sql)``}
      )`,
        lastUsed: (0, _drizzleorm.sql)`(
        SELECT MAX(created_at) FROM (
          SELECT created_at FROM plant_instances WHERE plant_id = ${_schema.plants.id}
          ${userId ? (0, _drizzleorm.sql)`AND user_id = ${userId}` : (0, _drizzleorm.sql)``}
          UNION ALL
          SELECT created_at FROM propagations WHERE plant_id = ${_schema.plants.id}
          ${userId ? (0, _drizzleorm.sql)`AND user_id = ${userId}` : (0, _drizzleorm.sql)``}
        ) AS usage_dates
      )`
    }).from(_schema.plants).where(whereClause).orderBy((0, _drizzleorm.desc)(_schema.plants.updatedAt)).limit(filter.limit || 20).offset(filter.offset || 0);
    return plantsWithStats.map((plant)=>({
            ..._planttypes.plantHelpers.enhancePlant(plant),
            instanceCount: plant.instanceCount,
            propagationCount: plant.propagationCount,
            popularityScore: plant.instanceCount + plant.propagationCount * 0.5,
            lastUsed: plant.lastUsed || undefined
        }));
}
async function searchPlants(searchParams, options = {}) {
    const startTime = Date.now();
    const { query, limit = 20, offset = 0, includeUnverified = true } = searchParams;
    // Build search conditions
    const searchConditions = [];
    const searchTerm = `%${query.toLowerCase()}%`;
    // Add visibility filter based on curator/user logic
    searchConditions.push(buildPlantVisibilityFilter(options.userContext?.userId));
    searchConditions.push((0, _drizzleorm.or)((0, _drizzleorm.ilike)(_schema.plants.family, searchTerm), (0, _drizzleorm.ilike)(_schema.plants.genus, searchTerm), (0, _drizzleorm.ilike)(_schema.plants.species, searchTerm), (0, _drizzleorm.ilike)(_schema.plants.commonName, searchTerm), // Search in scientific name combination
    (0, _drizzleorm.sql)`LOWER(CONCAT(${_schema.plants.genus}, ' ', ${_schema.plants.species})) LIKE ${searchTerm}`, // Search in full taxonomy
    (0, _drizzleorm.sql)`LOWER(CONCAT(${_schema.plants.family}, ' ', ${_schema.plants.genus}, ' ', ${_schema.plants.species})) LIKE ${searchTerm}`));
    if (!includeUnverified) {
        searchConditions.push((0, _drizzleorm.eq)(_schema.plants.isVerified, true));
    }
    if (options.filters?.family) {
        searchConditions.push((0, _drizzleorm.ilike)(_schema.plants.family, `%${options.filters.family}%`));
    }
    if (options.filters?.genus) {
        searchConditions.push((0, _drizzleorm.ilike)(_schema.plants.genus, `%${options.filters.genus}%`));
    }
    if (options.filters?.isVerified !== undefined) {
        searchConditions.push((0, _drizzleorm.eq)(_schema.plants.isVerified, options.filters.isVerified));
    }
    const whereClause = (0, _drizzleorm.and)(...searchConditions);
    // Get total count
    const [{ totalCount }] = await _db.db.select({
        totalCount: (0, _drizzleorm.count)()
    }).from(_schema.plants).where(whereClause);
    // Get search results with relevance scoring
    const results = await _db.db.select({
        id: _schema.plants.id,
        family: _schema.plants.family,
        genus: _schema.plants.genus,
        species: _schema.plants.species,
        commonName: _schema.plants.commonName,
        isVerified: _schema.plants.isVerified,
        // Simple relevance scoring based on match position and field priority
        score: (0, _drizzleorm.sql)`
        CASE 
          WHEN LOWER(${_schema.plants.commonName}) = LOWER(${query}) THEN 100
          WHEN LOWER(${_schema.plants.commonName}) LIKE ${`${query.toLowerCase()}%`} THEN 90
          WHEN LOWER(CONCAT(${_schema.plants.genus}, ' ', ${_schema.plants.species})) = LOWER(${query}) THEN 85
          WHEN LOWER(CONCAT(${_schema.plants.genus}, ' ', ${_schema.plants.species})) LIKE ${`${query.toLowerCase()}%`} THEN 80
          WHEN LOWER(${_schema.plants.genus}) = LOWER(${query}) THEN 75
          WHEN LOWER(${_schema.plants.species}) = LOWER(${query}) THEN 70
          WHEN LOWER(${_schema.plants.family}) = LOWER(${query}) THEN 65
          WHEN LOWER(${_schema.plants.commonName}) LIKE ${searchTerm} THEN 60
          WHEN LOWER(${_schema.plants.genus}) LIKE ${searchTerm} THEN 50
          WHEN LOWER(${_schema.plants.species}) LIKE ${searchTerm} THEN 45
          WHEN LOWER(${_schema.plants.family}) LIKE ${searchTerm} THEN 40
          ELSE 30
        END
      `
    }).from(_schema.plants).where(whereClause).orderBy((0, _drizzleorm.desc)((0, _drizzleorm.sql)`
        CASE 
          WHEN LOWER(${_schema.plants.commonName}) = LOWER(${query}) THEN 100
          WHEN LOWER(${_schema.plants.commonName}) LIKE ${`${query.toLowerCase()}%`} THEN 90
          WHEN LOWER(CONCAT(${_schema.plants.genus}, ' ', ${_schema.plants.species})) = LOWER(${query}) THEN 85
          WHEN LOWER(CONCAT(${_schema.plants.genus}, ' ', ${_schema.plants.species})) LIKE ${`${query.toLowerCase()}%`} THEN 80
          WHEN LOWER(${_schema.plants.genus}) = LOWER(${query}) THEN 75
          WHEN LOWER(${_schema.plants.species}) = LOWER(${query}) THEN 70
          WHEN LOWER(${_schema.plants.family}) = LOWER(${query}) THEN 65
          WHEN LOWER(${_schema.plants.commonName}) LIKE ${searchTerm} THEN 60
          WHEN LOWER(${_schema.plants.genus}) LIKE ${searchTerm} THEN 50
          WHEN LOWER(${_schema.plants.species}) LIKE ${searchTerm} THEN 45
          WHEN LOWER(${_schema.plants.family}) LIKE ${searchTerm} THEN 40
          ELSE 30
        END
      `), (0, _drizzleorm.desc)(_schema.plants.isVerified), (0, _drizzleorm.asc)(_schema.plants.commonName)).limit(limit).offset(offset);
    const searchTime = Date.now() - startTime;
    return {
        plants: results.map((result)=>({
                ...result,
                score: result.score
            })),
        totalCount,
        hasMore: offset + limit < totalCount,
        searchTime
    };
}
async function getQuickSelectPlants(userId) {
    // Get recent plants (based on user's recent plant instances/propagations)
    const recentQuery = userId ? _db.db.select({
        id: _schema.plants.id,
        family: _schema.plants.family,
        genus: _schema.plants.genus,
        species: _schema.plants.species,
        commonName: _schema.plants.commonName,
        isVerified: _schema.plants.isVerified
    }).from(_schema.plants).innerJoin((0, _drizzleorm.sql)`(
        SELECT plant_id, MAX(created_at) as last_used
        FROM (
          SELECT plant_id, created_at FROM plant_instances WHERE user_id = ${userId}
          UNION ALL
          SELECT plant_id, created_at FROM propagations WHERE user_id = ${userId}
        ) recent_usage
        GROUP BY plant_id
        ORDER BY last_used DESC
        LIMIT 10
      ) recent_plants`, (0, _drizzleorm.sql)`recent_plants.plant_id = ${_schema.plants.id}`) : Promise.resolve([]);
    // Get popular plants (most instances across all users)
    const popularQuery = _db.db.select({
        id: _schema.plants.id,
        family: _schema.plants.family,
        genus: _schema.plants.genus,
        species: _schema.plants.species,
        commonName: _schema.plants.commonName,
        isVerified: _schema.plants.isVerified,
        instanceCount: (0, _drizzleorm.sql)`COUNT(plant_instances.id)`
    }).from(_schema.plants).leftJoin((0, _drizzleorm.sql)`plant_instances`, (0, _drizzleorm.sql)`plant_instances.plant_id = ${_schema.plants.id}`).groupBy(_schema.plants.id).orderBy((0, _drizzleorm.sql)`COUNT(plant_instances.id) DESC`).limit(10);
    // Get verified plants (admin-verified taxonomy)
    const verifiedQuery = _db.db.select({
        id: _schema.plants.id,
        family: _schema.plants.family,
        genus: _schema.plants.genus,
        species: _schema.plants.species,
        commonName: _schema.plants.commonName,
        isVerified: _schema.plants.isVerified
    }).from(_schema.plants).where((0, _drizzleorm.eq)(_schema.plants.isVerified, true)).orderBy((0, _drizzleorm.asc)(_schema.plants.commonName)).limit(10);
    const [recent, popular, verified] = await Promise.all([
        recentQuery,
        popularQuery,
        verifiedQuery
    ]);
    return {
        recent: Array.isArray(recent) ? recent : [],
        popular: popular.map(({ instanceCount: _instanceCount, ...plant })=>plant),
        verified
    };
}
async function validatePlantTaxonomy(taxonomy) {
    const errors = [];
    const warnings = [];
    const suggestions = {
        family: [],
        genus: [],
        species: [],
        commonName: []
    };
    // Check for exact taxonomic duplicates
    const exactDuplicates = await _db.db.select().from(_schema.plants).where((0, _drizzleorm.and)((0, _drizzleorm.eq)((0, _drizzleorm.sql)`LOWER(${_schema.plants.family})`, taxonomy.family.toLowerCase()), (0, _drizzleorm.eq)((0, _drizzleorm.sql)`LOWER(${_schema.plants.genus})`, taxonomy.genus.toLowerCase()), (0, _drizzleorm.eq)((0, _drizzleorm.sql)`LOWER(${_schema.plants.species})`, taxonomy.species.toLowerCase())));
    // Check for common name conflicts
    const commonNameConflicts = await _db.db.select().from(_schema.plants).where((0, _drizzleorm.eq)((0, _drizzleorm.sql)`LOWER(${_schema.plants.commonName})`, taxonomy.commonName.toLowerCase()));
    // Get similar families for suggestions
    const similarFamilies = await _db.db.select({
        family: _schema.plants.family
    }).from(_schema.plants).where((0, _drizzleorm.ilike)(_schema.plants.family, `%${taxonomy.family.substring(0, 3)}%`)).groupBy(_schema.plants.family).limit(5);
    // Get similar genera for suggestions
    const similarGenera = await _db.db.select({
        genus: _schema.plants.genus
    }).from(_schema.plants).where((0, _drizzleorm.ilike)(_schema.plants.genus, `%${taxonomy.genus.substring(0, 3)}%`)).groupBy(_schema.plants.genus).limit(5);
    if (exactDuplicates.length > 0) {
        errors.push('A plant with this exact taxonomy already exists');
    }
    if (commonNameConflicts.length > 0 && !exactDuplicates.some((dup)=>dup.commonName.toLowerCase() === taxonomy.commonName.toLowerCase())) {
        warnings.push('Another plant already uses this common name');
    }
    suggestions.family = similarFamilies.map((f)=>f.family);
    suggestions.genus = similarGenera.map((g)=>g.genus);
    return {
        isValid: errors.length === 0,
        errors,
        warnings,
        suggestions,
        duplicates: exactDuplicates.map((plant)=>({
                id: plant.id,
                family: plant.family,
                genus: plant.genus,
                species: plant.species,
                commonName: plant.commonName,
                isVerified: plant.isVerified
            }))
    };
}
async function getTaxonomyHierarchy() {
    const hierarchy = await _db.db.select({
        family: _schema.plants.family,
        genus: _schema.plants.genus,
        species: _schema.plants.species,
        plantCount: (0, _drizzleorm.count)()
    }).from(_schema.plants).groupBy(_schema.plants.family, _schema.plants.genus, _schema.plants.species).orderBy((0, _drizzleorm.asc)(_schema.plants.family), (0, _drizzleorm.asc)(_schema.plants.genus), (0, _drizzleorm.asc)(_schema.plants.species));
    // Group by family and genus
    const familyMap = new Map();
    hierarchy.forEach((item)=>{
        if (!familyMap.has(item.family)) {
            familyMap.set(item.family, {
                name: item.family,
                count: 0,
                genera: new Map()
            });
        }
        const family = familyMap.get(item.family);
        family.count += item.plantCount;
        if (!family.genera.has(item.genus)) {
            family.genera.set(item.genus, {
                name: item.genus,
                count: 0,
                species: []
            });
        }
        const genus = family.genera.get(item.genus);
        genus.count += item.plantCount;
        genus.species.push({
            name: item.species,
            count: item.plantCount,
            plants: []
        });
    });
    return {
        families: Array.from(familyMap.values()).map((family)=>({
                ...family,
                genera: Array.from(family.genera.values())
            }))
    };
}
async function deletePlant(id, userId) {
    // Check if plant has any instances
    const [instanceCount] = await _db.db.select({
        count: (0, _drizzleorm.count)()
    }).from((0, _drizzleorm.sql)`plant_instances`).where((0, _drizzleorm.sql)`plant_id = ${id}`);
    if (instanceCount.count > 0) {
        throw new Error('Cannot delete plant with existing instances');
    }
    // Check if plant has any propagations
    const [propagationCount] = await _db.db.select({
        count: (0, _drizzleorm.count)()
    }).from((0, _drizzleorm.sql)`propagations`).where((0, _drizzleorm.sql)`plant_id = ${id}`);
    if (propagationCount.count > 0) {
        throw new Error('Cannot delete plant with existing propagations');
    }
    // If userId provided, only allow deletion of plants created by that user (unless admin)
    const whereConditions = [
        (0, _drizzleorm.eq)(_schema.plants.id, id)
    ];
    if (userId) {
        whereConditions.push((0, _drizzleorm.eq)(_schema.plants.createdBy, userId));
    }
    const result = await _db.db.delete(_schema.plants).where((0, _drizzleorm.and)(...whereConditions)).returning({
        id: _schema.plants.id
    });
    return result.length > 0;
}

//# sourceMappingURL=data:application/json;base64,