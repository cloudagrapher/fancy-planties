c1c4651097b93ed0a2d8cff74fb7c726
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get createDatabaseTestManager () {
        return createDatabaseTestManager;
    },
    get default () {
        return _default;
    },
    get globalDatabaseTestManager () {
        return globalDatabaseTestManager;
    }
});
require("server-only");
const _db = require("../../lib/db");
const _schema = require("../../lib/db/schema");
const _drizzleorm = require("drizzle-orm");
/**
 * Database Test Manager
 * Provides isolated database operations for testing with proper cleanup
 */ class DatabaseTestManager {
    constructor(){
        this.createdUsers = [];
        this.createdSessions = [];
        this.createdEmailCodes = [];
        this.createdPlants = [];
        this.createdPlantInstances = [];
        this.createdPropagations = [];
        this.createdCareHistory = [];
    }
    /**
   * Create a test user in the database
   * @param {Object} userData - User data to insert
   * @returns {Promise<Object>} Created user
   */ async createTestUser(userData) {
        const [user] = await _db.db.insert(_schema.users).values(userData).returning();
        this.createdUsers.push(user.id);
        return user;
    }
    /**
   * Create a test session in the database
   * @param {Object} sessionData - Session data to insert
   * @returns {Promise<Object>} Created session
   */ async createTestSession(sessionData) {
        const [session] = await _db.db.insert(_schema.sessions).values(sessionData).returning();
        this.createdSessions.push(session.id);
        return session;
    }
    /**
   * Create a test email verification code in the database
   * @param {Object} codeData - Email verification code data to insert
   * @returns {Promise<Object>} Created email verification code
   */ async createTestEmailCode(codeData) {
        const [code] = await _db.db.insert(_schema.emailVerificationCodes).values(codeData).returning();
        this.createdEmailCodes.push(code.id);
        return code;
    }
    /**
   * Create a test plant in the database
   * @param {Object} plantData - Plant data to insert
   * @returns {Promise<Object>} Created plant
   */ async createTestPlant(plantData) {
        const [plant] = await _db.db.insert(_schema.plants).values(plantData).returning();
        this.createdPlants.push(plant.id);
        return plant;
    }
    /**
   * Create a test plant instance in the database
   * @param {Object} instanceData - Plant instance data to insert
   * @returns {Promise<Object>} Created plant instance
   */ async createTestPlantInstance(instanceData) {
        const [instance] = await _db.db.insert(_schema.plantInstances).values(instanceData).returning();
        this.createdPlantInstances.push(instance.id);
        return instance;
    }
    /**
   * Create a test propagation in the database
   * @param {Object} propagationData - Propagation data to insert
   * @returns {Promise<Object>} Created propagation
   */ async createTestPropagation(propagationData) {
        const [propagation] = await _db.db.insert(_schema.propagations).values(propagationData).returning();
        this.createdPropagations.push(propagation.id);
        return propagation;
    }
    /**
   * Create a test care history record in the database
   * @param {Object} careData - Care history data to insert
   * @returns {Promise<Object>} Created care history record
   */ async createTestCareHistory(careData) {
        const [care] = await _db.db.insert(_schema.careHistory).values(careData).returning();
        this.createdCareHistory.push(care.id);
        return care;
    }
    /**
   * Get a user by ID from the database
   * @param {number} userId - User ID to retrieve
   * @returns {Promise<Object|null>} User or null if not found
   */ async getUserById(userId) {
        const [user] = await _db.db.select().from(_schema.users).where((0, _drizzleorm.eq)(_schema.users.id, userId));
        return user || null;
    }
    /**
   * Get a user by email from the database
   * @param {string} email - Email to search for
   * @returns {Promise<Object|null>} User or null if not found
   */ async getUserByEmail(email) {
        const [user] = await _db.db.select().from(_schema.users).where((0, _drizzleorm.eq)(_schema.users.email, email.toLowerCase()));
        return user || null;
    }
    /**
   * Get a session by ID from the database
   * @param {string} sessionId - Session ID to retrieve
   * @returns {Promise<Object|null>} Session or null if not found
   */ async getSessionById(sessionId) {
        const [session] = await _db.db.select().from(_schema.sessions).where((0, _drizzleorm.eq)(_schema.sessions.id, sessionId));
        return session || null;
    }
    /**
   * Get sessions for a user from the database
   * @param {number} userId - User ID to get sessions for
   * @returns {Promise<Array>} Array of sessions
   */ async getSessionsByUserId(userId) {
        return await _db.db.select().from(_schema.sessions).where((0, _drizzleorm.eq)(_schema.sessions.userId, userId));
    }
    /**
   * Get email verification codes for a user
   * @param {number} userId - User ID to get codes for
   * @returns {Promise<Array>} Array of email verification codes
   */ async getEmailCodesByUserId(userId) {
        return await _db.db.select().from(_schema.emailVerificationCodes).where((0, _drizzleorm.eq)(_schema.emailVerificationCodes.userId, userId));
    }
    /**
   * Update a user in the database
   * @param {number} userId - User ID to update
   * @param {Object} updates - Updates to apply
   * @returns {Promise<Object>} Updated user
   */ async updateUser(userId, updates) {
        const [user] = await _db.db.update(_schema.users).set({
            ...updates,
            updatedAt: new Date()
        }).where((0, _drizzleorm.eq)(_schema.users.id, userId)).returning();
        return user;
    }
    /**
   * Delete a user from the database
   * @param {number} userId - User ID to delete
   * @returns {Promise<void>}
   */ async deleteUser(userId) {
        await _db.db.delete(_schema.users).where((0, _drizzleorm.eq)(_schema.users.id, userId));
        // Remove from tracking
        this.createdUsers = this.createdUsers.filter((id)=>id !== userId);
    }
    /**
   * Delete a session from the database
   * @param {string} sessionId - Session ID to delete
   * @returns {Promise<void>}
   */ async deleteSession(sessionId) {
        await _db.db.delete(_schema.sessions).where((0, _drizzleorm.eq)(_schema.sessions.id, sessionId));
        // Remove from tracking
        this.createdSessions = this.createdSessions.filter((id)=>id !== sessionId);
    }
    /**
   * Delete an email verification code from the database
   * @param {number} codeId - Code ID to delete
   * @returns {Promise<void>}
   */ async deleteEmailCode(codeId) {
        await _db.db.delete(_schema.emailVerificationCodes).where((0, _drizzleorm.eq)(_schema.emailVerificationCodes.id, codeId));
        // Remove from tracking
        this.createdEmailCodes = this.createdEmailCodes.filter((id)=>id !== codeId);
    }
    /**
   * Clean up all test data created by this manager
   * @returns {Promise<void>}
   */ async cleanup() {
        try {
            // Clean up email verification codes first (foreign key constraints)
            for (const codeId of this.createdEmailCodes){
                await _db.db.delete(_schema.emailVerificationCodes).where((0, _drizzleorm.eq)(_schema.emailVerificationCodes.id, codeId));
            }
            // Clean up sessions
            for (const sessionId of this.createdSessions){
                await _db.db.delete(_schema.sessions).where((0, _drizzleorm.eq)(_schema.sessions.id, sessionId));
            }
            // Clean up users last
            for (const userId of this.createdUsers){
                await _db.db.delete(_schema.users).where((0, _drizzleorm.eq)(_schema.users.id, userId));
            }
            // Reset tracking arrays
            this.createdUsers = [];
            this.createdSessions = [];
            this.createdEmailCodes = [];
        } catch (error) {
            console.error('Database cleanup error:', error);
            // Reset tracking arrays even if cleanup fails
            this.createdUsers = [];
            this.createdSessions = [];
            this.createdEmailCodes = [];
        }
    }
    /**
   * Check if the database connection is working
   * @returns {Promise<boolean>} True if connection is working
   */ async isConnected() {
        try {
            // Simple query to test connection
            await _db.db.select().from(_schema.users).limit(1);
            return true;
        } catch (error) {
            console.error('Database connection test failed:', error);
            return false;
        }
    }
}
const createDatabaseTestManager = ()=>{
    return new DatabaseTestManager();
};
const globalDatabaseTestManager = new DatabaseTestManager();
const _default = DatabaseTestManager;

//# sourceMappingURL=data:application/json;base64,