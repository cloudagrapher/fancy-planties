{"version":3,"sources":["/Users/stefanbekker/projects/fancy-planties/src/components/import/CSVImportModal.tsx"],"sourcesContent":["'use client';\n\nimport { useState, useCallback } from 'react';\nimport { X, Upload, FileText, CheckCircle } from 'lucide-react';\nimport { FileUpload } from './FileUpload';\nimport { ImportTypeSelector, type ImportType } from './ImportTypeSelector';\nimport { CSVPreview } from './CSVPreview';\nimport { ImportProgress } from './ImportProgress';\nimport type { ImportProgress as ImportProgressType } from '@/lib/validation/csv-schemas';\n\ninterface CSVImportModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onImportComplete?: (summary: any) => void;\n}\n\ntype Step = 'select-type' | 'upload-file' | 'preview' | 'importing' | 'complete';\n\ninterface ValidationResult {\n  isValid: boolean;\n  errors: string[];\n  preview: any[];\n}\n\nexport function CSVImportModal({\n  isOpen,\n  onClose,\n  onImportComplete,\n}: CSVImportModalProps) {\n  const [step, setStep] = useState<Step>('select-type');\n  const [importType, setImportType] = useState<ImportType | null>(null);\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n  const [fileContent, setFileContent] = useState<string>('');\n  const [validation, setValidation] = useState<ValidationResult | null>(null);\n  const [importId, setImportId] = useState<string | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const resetModal = () => {\n    setStep('select-type');\n    setImportType(null);\n    setSelectedFile(null);\n    setFileContent('');\n    setValidation(null);\n    setImportId(null);\n    setIsLoading(false);\n    setError(null);\n  };\n\n  const handleClose = () => {\n    resetModal();\n    onClose();\n  };\n\n  const handleTypeSelect = (type: ImportType) => {\n    setImportType(type);\n    setStep('upload-file');\n  };\n\n  const handleFileSelect = useCallback(async (file: File) => {\n    setSelectedFile(file);\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      // Read file content\n      const content = await readFileAsText(file);\n      setFileContent(content);\n\n      // Validate CSV content\n      if (importType) {\n        const response = await fetch('/api/import/csv/validate', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({\n            content,\n            importType,\n          }),\n        });\n\n        if (!response.ok) {\n          throw new Error('Failed to validate CSV');\n        }\n\n        const validationResult = await response.json();\n        setValidation(validationResult);\n        setStep('preview');\n      }\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to process file');\n    } finally {\n      setIsLoading(false);\n    }\n  }, [importType]);\n\n  const readFileAsText = (file: File): Promise<string> => {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = (e) => resolve(e.target?.result as string);\n      reader.onerror = () => reject(new Error('Failed to read file'));\n      reader.readAsText(file);\n    });\n  };\n\n  const handleStartImport = async () => {\n    if (!selectedFile || !importType || !fileContent) return;\n\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch('/api/import/csv', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          file: {\n            name: selectedFile.name,\n            size: selectedFile.size,\n            type: selectedFile.type,\n            content: fileContent,\n          },\n          importType,\n          config: {\n            skipEmptyRows: true,\n            createMissingPlants: true,\n            handleDuplicates: 'skip',\n          },\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to start import');\n      }\n\n      const result = await response.json();\n      setImportId(result.importId);\n      setStep('importing');\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to start import');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleImportComplete = (progress: ImportProgressType) => {\n    setStep('complete');\n    onImportComplete?.(progress.summary);\n  };\n\n  const handleImportError = (errorMessage: string) => {\n    setError(errorMessage);\n  };\n\n  const getStepTitle = () => {\n    switch (step) {\n      case 'select-type':\n        return 'Import CSV Data';\n      case 'upload-file':\n        return 'Upload CSV File';\n      case 'preview':\n        return 'Preview & Confirm';\n      case 'importing':\n        return 'Importing Data';\n      case 'complete':\n        return 'Import Complete';\n      default:\n        return 'Import CSV Data';\n    }\n  };\n\n  const canGoBack = step !== 'select-type' && step !== 'importing';\n  const canGoNext = \n    (step === 'select-type' && importType) ||\n    (step === 'upload-file' && selectedFile) ||\n    (step === 'preview' && validation?.isValid);\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"modal-overlay\">\n      <div className=\"modal-content modal-content--large\">\n        {/* Header */}\n        <div className=\"modal-header\">\n          <h2 className=\"modal-title\">\n            {getStepTitle()}\n          </h2>\n          <button\n            onClick={handleClose}\n            disabled={isLoading}\n            className={`modal-close ${isLoading ? 'opacity-50 cursor-not-allowed' : ''}`}\n            title={isLoading ? 'Please wait...' : 'Close'}\n          >\n            <X className=\"w-5 h-5\" />\n          </button>\n        </div>\n\n        {/* Content */}\n        <div className=\"modal-body\">\n          {error && (\n            <div className=\"mb-6 card card-body bg-red-50 border border-red-200\">\n              <p className=\"text-sm text-error\">{error}</p>\n            </div>\n          )}\n\n          {step === 'select-type' && (\n            <ImportTypeSelector\n              selectedType={importType}\n              onTypeSelect={handleTypeSelect}\n            />\n          )}\n\n          {step === 'upload-file' && (\n            <div className=\"space-y-6\">\n              <div className=\"text-center\">\n                <Upload className=\"w-12 h-12 text-primary-500 mx-auto mb-4\" />\n                <h3 className=\"text-lg font-medium text-neutral-900 mb-2\">\n                  Upload your {importType?.replace('_', ' ')} CSV file\n                </h3>\n                <p className=\"text-neutral-600\">\n                  Make sure your CSV file has the required columns for this import type.\n                </p>\n              </div>\n              <FileUpload\n                onFileSelect={handleFileSelect}\n                acceptedTypes={['.csv', 'text/csv']}\n              />\n            </div>\n          )}\n\n          {step === 'preview' && validation && (\n            <div className=\"space-y-6\">\n              <div className=\"text-center\">\n                <FileText className=\"w-12 h-12 text-blue-500 mx-auto mb-4\" />\n                <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n                  Review your data\n                </h3>\n                <p className=\"text-gray-600\">\n                  Check the preview below and confirm the import when ready.\n                </p>\n              </div>\n              <CSVPreview\n                data={validation.preview}\n                errors={validation.errors}\n                isValid={validation.isValid}\n              />\n            </div>\n          )}\n\n          {step === 'importing' && importId && (\n            <ImportProgress\n              importId={importId}\n              onComplete={handleImportComplete}\n              onError={handleImportError}\n            />\n          )}\n\n          {step === 'complete' && (\n            <div className=\"text-center space-y-6\">\n              <CheckCircle className=\"w-16 h-16 text-green-500 mx-auto\" />\n              <div>\n                <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n                  Import completed successfully!\n                </h3>\n                <p className=\"text-gray-600\">\n                  Your CSV data has been imported into your plant collection.\n                </p>\n              </div>\n            </div>\n          )}\n        </div>\n\n        {/* Footer */}\n        <div className=\"flex items-center justify-between p-6 border-t border-gray-200 bg-gray-50\">\n          <div className=\"flex space-x-2\">\n            {canGoBack && (\n              <button\n                onClick={() => {\n                  if (step === 'upload-file') setStep('select-type');\n                  else if (step === 'preview') setStep('upload-file');\n                }}\n                disabled={isLoading}\n                className={`btn btn--outline ${isLoading ? 'opacity-50 cursor-not-allowed' : ''}`}\n              >\n                Back\n              </button>\n            )}\n          </div>\n\n          <div className=\"flex space-x-2\">\n            {step === 'complete' ? (\n              <button\n                onClick={handleClose}\n                className=\"btn btn--primary\"\n              >\n                Done\n              </button>\n            ) : step === 'preview' && validation?.isValid ? (\n              <button\n                onClick={handleStartImport}\n                disabled={isLoading}\n                className={`btn btn--primary ${isLoading ? 'btn--loading' : ''}`}\n              >\n                {isLoading ? 'Starting...' : 'Start Import'}\n              </button>\n            ) : (\n              <button\n                onClick={handleClose}\n                disabled={isLoading}\n                className={`btn btn--outline ${isLoading ? 'opacity-50 cursor-not-allowed' : ''}`}\n              >\n                Cancel\n              </button>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default CSVImportModal;"],"names":["CSVImportModal","isOpen","onClose","onImportComplete","step","setStep","useState","importType","setImportType","selectedFile","setSelectedFile","fileContent","setFileContent","validation","setValidation","importId","setImportId","isLoading","setIsLoading","error","setError","resetModal","handleClose","handleTypeSelect","type","handleFileSelect","useCallback","file","content","readFileAsText","response","fetch","method","headers","body","JSON","stringify","ok","Error","validationResult","json","err","message","Promise","resolve","reject","reader","FileReader","onload","e","target","result","onerror","readAsText","handleStartImport","name","size","config","skipEmptyRows","createMissingPlants","handleDuplicates","handleImportComplete","progress","summary","handleImportError","errorMessage","getStepTitle","canGoBack","canGoNext","isValid","div","className","h2","button","onClick","disabled","title","X","p","ImportTypeSelector","selectedType","onTypeSelect","Upload","h3","replace","FileUpload","onFileSelect","acceptedTypes","FileText","CSVPreview","data","preview","errors","ImportProgress","onComplete","onError","CheckCircle"],"mappings":"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"}