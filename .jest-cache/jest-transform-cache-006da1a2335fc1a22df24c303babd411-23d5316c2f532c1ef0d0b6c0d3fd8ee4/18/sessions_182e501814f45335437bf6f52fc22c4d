e6aa206f31f95c1ce45817a1b04804a7
"use strict";

/* istanbul ignore next */
function cov_ol63gh58b() {
  var path = "/Users/stefanbekker/projects/fancy-planties/src/lib/db/queries/sessions.ts";
  var hash = "96e4e00d27a8864ccd8381c2a6be16c9372b4fe7";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/stefanbekker/projects/fancy-planties/src/lib/db/queries/sessions.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 30
        }
      },
      "3": {
        start: {
          line: 11,
          column: 20
        },
        end: {
          line: 11,
          column: 42
        }
      },
      "4": {
        start: {
          line: 12,
          column: 15
        },
        end: {
          line: 12,
          column: 34
        }
      },
      "5": {
        start: {
          line: 13,
          column: 16
        },
        end: {
          line: 13,
          column: 36
        }
      },
      "6": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 23,
          column: 9
        }
      },
      "7": {
        start: {
          line: 18,
          column: 30
        },
        end: {
          line: 18,
          column: 102
        }
      },
      "8": {
        start: {
          line: 19,
          column: 12
        },
        end: {
          line: 19,
          column: 27
        }
      },
      "9": {
        start: {
          line: 21,
          column: 12
        },
        end: {
          line: 21,
          column: 62
        }
      },
      "10": {
        start: {
          line: 22,
          column: 12
        },
        end: {
          line: 22,
          column: 56
        }
      },
      "11": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 33,
          column: 9
        }
      },
      "12": {
        start: {
          line: 28,
          column: 30
        },
        end: {
          line: 28,
          column: 129
        }
      },
      "13": {
        start: {
          line: 29,
          column: 12
        },
        end: {
          line: 29,
          column: 35
        }
      },
      "14": {
        start: {
          line: 31,
          column: 12
        },
        end: {
          line: 31,
          column: 65
        }
      },
      "15": {
        start: {
          line: 32,
          column: 12
        },
        end: {
          line: 32,
          column: 53
        }
      },
      "16": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 42,
          column: 9
        }
      },
      "17": {
        start: {
          line: 38,
          column: 12
        },
        end: {
          line: 38,
          column: 127
        }
      },
      "18": {
        start: {
          line: 40,
          column: 12
        },
        end: {
          line: 40,
          column: 71
        }
      },
      "19": {
        start: {
          line: 41,
          column: 12
        },
        end: {
          line: 41,
          column: 54
        }
      },
      "20": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 57,
          column: 9
        }
      },
      "21": {
        start: {
          line: 47,
          column: 30
        },
        end: {
          line: 49,
          column: 78
        }
      },
      "22": {
        start: {
          line: 50,
          column: 12
        },
        end: {
          line: 52,
          column: 13
        }
      },
      "23": {
        start: {
          line: 51,
          column: 16
        },
        end: {
          line: 51,
          column: 53
        }
      },
      "24": {
        start: {
          line: 53,
          column: 12
        },
        end: {
          line: 53,
          column: 27
        }
      },
      "25": {
        start: {
          line: 55,
          column: 12
        },
        end: {
          line: 55,
          column: 73
        }
      },
      "26": {
        start: {
          line: 56,
          column: 12
        },
        end: {
          line: 56,
          column: 56
        }
      },
      "27": {
        start: {
          line: 61,
          column: 8
        },
        end: {
          line: 67,
          column: 9
        }
      },
      "28": {
        start: {
          line: 62,
          column: 27
        },
        end: {
          line: 62,
          column: 119
        }
      },
      "29": {
        start: {
          line: 63,
          column: 12
        },
        end: {
          line: 63,
          column: 37
        }
      },
      "30": {
        start: {
          line: 65,
          column: 12
        },
        end: {
          line: 65,
          column: 62
        }
      },
      "31": {
        start: {
          line: 66,
          column: 12
        },
        end: {
          line: 66,
          column: 56
        }
      },
      "32": {
        start: {
          line: 71,
          column: 8
        },
        end: {
          line: 77,
          column: 9
        }
      },
      "33": {
        start: {
          line: 72,
          column: 27
        },
        end: {
          line: 72,
          column: 127
        }
      },
      "34": {
        start: {
          line: 73,
          column: 12
        },
        end: {
          line: 73,
          column: 33
        }
      },
      "35": {
        start: {
          line: 75,
          column: 12
        },
        end: {
          line: 75,
          column: 74
        }
      },
      "36": {
        start: {
          line: 76,
          column: 12
        },
        end: {
          line: 76,
          column: 57
        }
      },
      "37": {
        start: {
          line: 81,
          column: 8
        },
        end: {
          line: 88,
          column: 9
        }
      },
      "38": {
        start: {
          line: 82,
          column: 24
        },
        end: {
          line: 82,
          column: 34
        }
      },
      "39": {
        start: {
          line: 83,
          column: 27
        },
        end: {
          line: 83,
          column: 128
        }
      },
      "40": {
        start: {
          line: 84,
          column: 12
        },
        end: {
          line: 84,
          column: 33
        }
      },
      "41": {
        start: {
          line: 86,
          column: 12
        },
        end: {
          line: 86,
          column: 71
        }
      },
      "42": {
        start: {
          line: 87,
          column: 12
        },
        end: {
          line: 87,
          column: 65
        }
      },
      "43": {
        start: {
          line: 92,
          column: 8
        },
        end: {
          line: 100,
          column: 9
        }
      },
      "44": {
        start: {
          line: 93,
          column: 28
        },
        end: {
          line: 93,
          column: 50
        }
      },
      "45": {
        start: {
          line: 94,
          column: 12
        },
        end: {
          line: 94,
          column: 39
        }
      },
      "46": {
        start: {
          line: 94,
          column: 26
        },
        end: {
          line: 94,
          column: 39
        }
      },
      "47": {
        start: {
          line: 95,
          column: 24
        },
        end: {
          line: 95,
          column: 34
        }
      },
      "48": {
        start: {
          line: 96,
          column: 12
        },
        end: {
          line: 96,
          column: 43
        }
      },
      "49": {
        start: {
          line: 98,
          column: 12
        },
        end: {
          line: 98,
          column: 70
        }
      },
      "50": {
        start: {
          line: 99,
          column: 12
        },
        end: {
          line: 99,
          column: 25
        }
      },
      "51": {
        start: {
          line: 104,
          column: 8
        },
        end: {
          line: 113,
          column: 9
        }
      },
      "52": {
        start: {
          line: 105,
          column: 33
        },
        end: {
          line: 105,
          column: 59
        }
      },
      "53": {
        start: {
          line: 106,
          column: 12
        },
        end: {
          line: 106,
          column: 71
        }
      },
      "54": {
        start: {
          line: 107,
          column: 12
        },
        end: {
          line: 109,
          column: 14
        }
      },
      "55": {
        start: {
          line: 111,
          column: 12
        },
        end: {
          line: 111,
          column: 64
        }
      },
      "56": {
        start: {
          line: 112,
          column: 12
        },
        end: {
          line: 112,
          column: 58
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 16,
            column: 4
          },
          end: {
            line: 16,
            column: 5
          }
        },
        loc: {
          start: {
            line: 16,
            column: 37
          },
          end: {
            line: 24,
            column: 5
          }
        },
        line: 16
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 26,
            column: 4
          },
          end: {
            line: 26,
            column: 5
          }
        },
        loc: {
          start: {
            line: 26,
            column: 29
          },
          end: {
            line: 34,
            column: 5
          }
        },
        line: 26
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 36,
            column: 4
          },
          end: {
            line: 36,
            column: 5
          }
        },
        loc: {
          start: {
            line: 36,
            column: 37
          },
          end: {
            line: 43,
            column: 5
          }
        },
        line: 36
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 45,
            column: 4
          },
          end: {
            line: 45,
            column: 5
          }
        },
        loc: {
          start: {
            line: 45,
            column: 49
          },
          end: {
            line: 58,
            column: 5
          }
        },
        line: 45
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 60,
            column: 4
          },
          end: {
            line: 60,
            column: 5
          }
        },
        loc: {
          start: {
            line: 60,
            column: 28
          },
          end: {
            line: 68,
            column: 5
          }
        },
        line: 60
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 70,
            column: 4
          },
          end: {
            line: 70,
            column: 5
          }
        },
        loc: {
          start: {
            line: 70,
            column: 40
          },
          end: {
            line: 78,
            column: 5
          }
        },
        line: 70
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 80,
            column: 4
          },
          end: {
            line: 80,
            column: 5
          }
        },
        loc: {
          start: {
            line: 80,
            column: 33
          },
          end: {
            line: 89,
            column: 5
          }
        },
        line: 80
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 91,
            column: 4
          },
          end: {
            line: 91,
            column: 5
          }
        },
        loc: {
          start: {
            line: 91,
            column: 29
          },
          end: {
            line: 101,
            column: 5
          }
        },
        line: 91
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 103,
            column: 4
          },
          end: {
            line: 103,
            column: 5
          }
        },
        loc: {
          start: {
            line: 103,
            column: 27
          },
          end: {
            line: 114,
            column: 5
          }
        },
        line: 103
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 29,
            column: 19
          },
          end: {
            line: 29,
            column: 34
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 29,
            column: 19
          },
          end: {
            line: 29,
            column: 26
          }
        }, {
          start: {
            line: 29,
            column: 30
          },
          end: {
            line: 29,
            column: 34
          }
        }],
        line: 29
      },
      "1": {
        loc: {
          start: {
            line: 50,
            column: 12
          },
          end: {
            line: 52,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 50,
            column: 12
          },
          end: {
            line: 52,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 50
      },
      "2": {
        loc: {
          start: {
            line: 94,
            column: 12
          },
          end: {
            line: 94,
            column: 39
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 94,
            column: 12
          },
          end: {
            line: 94,
            column: 39
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 94
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/stefanbekker/projects/fancy-planties/src/lib/db/queries/sessions.ts"],
      sourcesContent: ["import { eq, lte } from 'drizzle-orm';\nimport { db } from '../index';\nimport { sessions, type Session, type NewSession } from '../schema';\n\n// Session CRUD operations for Lucia auth\nexport class SessionQueries {\n  // Create a new session\n  static async create(sessionData: NewSession): Promise<Session> {\n    try {\n      const [session] = await db.insert(sessions).values(sessionData).returning();\n      return session;\n    } catch (error) {\n      console.error('Failed to create session:', error);\n      throw new Error('Failed to create session');\n    }\n  }\n\n  // Get session by ID\n  static async getById(id: string): Promise<Session | null> {\n    try {\n      const [session] = await db.select().from(sessions).where(eq(sessions.id, id));\n      return session || null;\n    } catch (error) {\n      console.error('Failed to get session by ID:', error);\n      throw new Error('Failed to get session');\n    }\n  }\n\n  // Get all sessions for a user\n  static async getByUserId(userId: number): Promise<Session[]> {\n    try {\n      return await db\n        .select()\n        .from(sessions)\n        .where(eq(sessions.userId, userId));\n    } catch (error) {\n      console.error('Failed to get sessions by user ID:', error);\n      throw new Error('Failed to get sessions');\n    }\n  }\n\n  // Update session expiration\n  static async updateExpiration(id: string, expiresAt: Date): Promise<Session> {\n    try {\n      const [session] = await db\n        .update(sessions)\n        .set({ expiresAt })\n        .where(eq(sessions.id, id))\n        .returning();\n      \n      if (!session) {\n        throw new Error('Session not found');\n      }\n      \n      return session;\n    } catch (error) {\n      console.error('Failed to update session expiration:', error);\n      throw new Error('Failed to update session');\n    }\n  }\n\n  // Delete session by ID\n  static async delete(id: string): Promise<boolean> {\n    try {\n      const result = await db.delete(sessions).where(eq(sessions.id, id));\n      return result.length > 0;\n    } catch (error) {\n      console.error('Failed to delete session:', error);\n      throw new Error('Failed to delete session');\n    }\n  }\n\n  // Delete all sessions for a user\n  static async deleteByUserId(userId: number): Promise<number> {\n    try {\n      const result = await db.delete(sessions).where(eq(sessions.userId, userId));\n      return result.length;\n    } catch (error) {\n      console.error('Failed to delete sessions by user ID:', error);\n      throw new Error('Failed to delete sessions');\n    }\n  }\n\n  // Delete expired sessions\n  static async deleteExpired(): Promise<number> {\n    try {\n      const now = new Date();\n      const result = await db.delete(sessions).where(lte(sessions.expiresAt, now));\n      return result.length;\n    } catch (error) {\n      console.error('Failed to delete expired sessions:', error);\n      throw new Error('Failed to delete expired sessions');\n    }\n  }\n\n  // Check if session is valid (exists and not expired)\n  static async isValid(id: string): Promise<boolean> {\n    try {\n      const session = await this.getById(id);\n      if (!session) return false;\n      \n      const now = new Date();\n      return session.expiresAt > now;\n    } catch (error) {\n      console.error('Failed to check session validity:', error);\n      return false;\n    }\n  }\n\n  // Cleanup expired sessions (utility function for maintenance)\n  static async cleanup(): Promise<{ deletedCount: number }> {\n    try {\n      const deletedCount = await this.deleteExpired();\n      console.log(`Cleaned up ${deletedCount} expired sessions`);\n      return { deletedCount };\n    } catch (error) {\n      console.error('Failed to cleanup sessions:', error);\n      throw new Error('Failed to cleanup sessions');\n    }\n  }\n}"],
      names: ["SessionQueries", "create", "sessionData", "session", "db", "insert", "sessions", "values", "returning", "error", "console", "Error", "getById", "id", "select", "from", "where", "eq", "getByUserId", "userId", "updateExpiration", "expiresAt", "update", "set", "delete", "result", "length", "deleteByUserId", "deleteExpired", "now", "Date", "lte", "isValid", "cleanup", "deletedCount", "log"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "96e4e00d27a8864ccd8381c2a6be16c9372b4fe7"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_ol63gh58b = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_ol63gh58b();
cov_ol63gh58b().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_ol63gh58b().s[1]++;
Object.defineProperty(exports, "SessionQueries", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_ol63gh58b().f[0]++;
    cov_ol63gh58b().s[2]++;
    return SessionQueries;
  }
});
const _drizzleorm =
/* istanbul ignore next */
(cov_ol63gh58b().s[3]++, require("drizzle-orm"));
const _index =
/* istanbul ignore next */
(cov_ol63gh58b().s[4]++, require("../index"));
const _schema =
/* istanbul ignore next */
(cov_ol63gh58b().s[5]++, require("../schema"));
class SessionQueries {
  // Create a new session
  static async create(sessionData) {
    /* istanbul ignore next */
    cov_ol63gh58b().f[1]++;
    cov_ol63gh58b().s[6]++;
    try {
      const [session] =
      /* istanbul ignore next */
      (cov_ol63gh58b().s[7]++, await _index.db.insert(_schema.sessions).values(sessionData).returning());
      /* istanbul ignore next */
      cov_ol63gh58b().s[8]++;
      return session;
    } catch (error) {
      /* istanbul ignore next */
      cov_ol63gh58b().s[9]++;
      console.error('Failed to create session:', error);
      /* istanbul ignore next */
      cov_ol63gh58b().s[10]++;
      throw new Error('Failed to create session');
    }
  }
  // Get session by ID
  static async getById(id) {
    /* istanbul ignore next */
    cov_ol63gh58b().f[2]++;
    cov_ol63gh58b().s[11]++;
    try {
      const [session] =
      /* istanbul ignore next */
      (cov_ol63gh58b().s[12]++, await _index.db.select().from(_schema.sessions).where((0, _drizzleorm.eq)(_schema.sessions.id, id)));
      /* istanbul ignore next */
      cov_ol63gh58b().s[13]++;
      return /* istanbul ignore next */(cov_ol63gh58b().b[0][0]++, session) ||
      /* istanbul ignore next */
      (cov_ol63gh58b().b[0][1]++, null);
    } catch (error) {
      /* istanbul ignore next */
      cov_ol63gh58b().s[14]++;
      console.error('Failed to get session by ID:', error);
      /* istanbul ignore next */
      cov_ol63gh58b().s[15]++;
      throw new Error('Failed to get session');
    }
  }
  // Get all sessions for a user
  static async getByUserId(userId) {
    /* istanbul ignore next */
    cov_ol63gh58b().f[3]++;
    cov_ol63gh58b().s[16]++;
    try {
      /* istanbul ignore next */
      cov_ol63gh58b().s[17]++;
      return await _index.db.select().from(_schema.sessions).where((0, _drizzleorm.eq)(_schema.sessions.userId, userId));
    } catch (error) {
      /* istanbul ignore next */
      cov_ol63gh58b().s[18]++;
      console.error('Failed to get sessions by user ID:', error);
      /* istanbul ignore next */
      cov_ol63gh58b().s[19]++;
      throw new Error('Failed to get sessions');
    }
  }
  // Update session expiration
  static async updateExpiration(id, expiresAt) {
    /* istanbul ignore next */
    cov_ol63gh58b().f[4]++;
    cov_ol63gh58b().s[20]++;
    try {
      const [session] =
      /* istanbul ignore next */
      (cov_ol63gh58b().s[21]++, await _index.db.update(_schema.sessions).set({
        expiresAt
      }).where((0, _drizzleorm.eq)(_schema.sessions.id, id)).returning());
      /* istanbul ignore next */
      cov_ol63gh58b().s[22]++;
      if (!session) {
        /* istanbul ignore next */
        cov_ol63gh58b().b[1][0]++;
        cov_ol63gh58b().s[23]++;
        throw new Error('Session not found');
      } else
      /* istanbul ignore next */
      {
        cov_ol63gh58b().b[1][1]++;
      }
      cov_ol63gh58b().s[24]++;
      return session;
    } catch (error) {
      /* istanbul ignore next */
      cov_ol63gh58b().s[25]++;
      console.error('Failed to update session expiration:', error);
      /* istanbul ignore next */
      cov_ol63gh58b().s[26]++;
      throw new Error('Failed to update session');
    }
  }
  // Delete session by ID
  static async delete(id) {
    /* istanbul ignore next */
    cov_ol63gh58b().f[5]++;
    cov_ol63gh58b().s[27]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_ol63gh58b().s[28]++, await _index.db.delete(_schema.sessions).where((0, _drizzleorm.eq)(_schema.sessions.id, id)));
      /* istanbul ignore next */
      cov_ol63gh58b().s[29]++;
      return result.length > 0;
    } catch (error) {
      /* istanbul ignore next */
      cov_ol63gh58b().s[30]++;
      console.error('Failed to delete session:', error);
      /* istanbul ignore next */
      cov_ol63gh58b().s[31]++;
      throw new Error('Failed to delete session');
    }
  }
  // Delete all sessions for a user
  static async deleteByUserId(userId) {
    /* istanbul ignore next */
    cov_ol63gh58b().f[6]++;
    cov_ol63gh58b().s[32]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_ol63gh58b().s[33]++, await _index.db.delete(_schema.sessions).where((0, _drizzleorm.eq)(_schema.sessions.userId, userId)));
      /* istanbul ignore next */
      cov_ol63gh58b().s[34]++;
      return result.length;
    } catch (error) {
      /* istanbul ignore next */
      cov_ol63gh58b().s[35]++;
      console.error('Failed to delete sessions by user ID:', error);
      /* istanbul ignore next */
      cov_ol63gh58b().s[36]++;
      throw new Error('Failed to delete sessions');
    }
  }
  // Delete expired sessions
  static async deleteExpired() {
    /* istanbul ignore next */
    cov_ol63gh58b().f[7]++;
    cov_ol63gh58b().s[37]++;
    try {
      const now =
      /* istanbul ignore next */
      (cov_ol63gh58b().s[38]++, new Date());
      const result =
      /* istanbul ignore next */
      (cov_ol63gh58b().s[39]++, await _index.db.delete(_schema.sessions).where((0, _drizzleorm.lte)(_schema.sessions.expiresAt, now)));
      /* istanbul ignore next */
      cov_ol63gh58b().s[40]++;
      return result.length;
    } catch (error) {
      /* istanbul ignore next */
      cov_ol63gh58b().s[41]++;
      console.error('Failed to delete expired sessions:', error);
      /* istanbul ignore next */
      cov_ol63gh58b().s[42]++;
      throw new Error('Failed to delete expired sessions');
    }
  }
  // Check if session is valid (exists and not expired)
  static async isValid(id) {
    /* istanbul ignore next */
    cov_ol63gh58b().f[8]++;
    cov_ol63gh58b().s[43]++;
    try {
      const session =
      /* istanbul ignore next */
      (cov_ol63gh58b().s[44]++, await this.getById(id));
      /* istanbul ignore next */
      cov_ol63gh58b().s[45]++;
      if (!session) {
        /* istanbul ignore next */
        cov_ol63gh58b().b[2][0]++;
        cov_ol63gh58b().s[46]++;
        return false;
      } else
      /* istanbul ignore next */
      {
        cov_ol63gh58b().b[2][1]++;
      }
      const now =
      /* istanbul ignore next */
      (cov_ol63gh58b().s[47]++, new Date());
      /* istanbul ignore next */
      cov_ol63gh58b().s[48]++;
      return session.expiresAt > now;
    } catch (error) {
      /* istanbul ignore next */
      cov_ol63gh58b().s[49]++;
      console.error('Failed to check session validity:', error);
      /* istanbul ignore next */
      cov_ol63gh58b().s[50]++;
      return false;
    }
  }
  // Cleanup expired sessions (utility function for maintenance)
  static async cleanup() {
    /* istanbul ignore next */
    cov_ol63gh58b().f[9]++;
    cov_ol63gh58b().s[51]++;
    try {
      const deletedCount =
      /* istanbul ignore next */
      (cov_ol63gh58b().s[52]++, await this.deleteExpired());
      /* istanbul ignore next */
      cov_ol63gh58b().s[53]++;
      console.log(`Cleaned up ${deletedCount} expired sessions`);
      /* istanbul ignore next */
      cov_ol63gh58b().s[54]++;
      return {
        deletedCount
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_ol63gh58b().s[55]++;
      console.error('Failed to cleanup sessions:', error);
      /* istanbul ignore next */
      cov_ol63gh58b().s[56]++;
      throw new Error('Failed to cleanup sessions');
    }
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,