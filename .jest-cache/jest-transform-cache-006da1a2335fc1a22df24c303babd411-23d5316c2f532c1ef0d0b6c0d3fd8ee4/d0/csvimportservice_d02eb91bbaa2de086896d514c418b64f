a4fc55ebbfdfe9c3597010beb30c9dbf
"use strict";

/* istanbul ignore next */
function cov_2m8zqmjbaw() {
  var path = "/Users/stefanbekker/projects/fancy-planties/src/lib/services/csv-import-service.ts";
  var hash = "ee709642fa0964ff9409488c9c0397ca39e4e492";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/stefanbekker/projects/fancy-planties/src/lib/services/csv-import-service.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 32
        }
      },
      "3": {
        start: {
          line: 11,
          column: 28
        },
        end: {
          line: 11,
          column: 61
        }
      },
      "4": {
        start: {
          line: 12,
          column: 29
        },
        end: {
          line: 12,
          column: 63
        }
      },
      "5": {
        start: {
          line: 13,
          column: 20
        },
        end: {
          line: 13,
          column: 56
        }
      },
      "6": {
        start: {
          line: 14,
          column: 24
        },
        end: {
          line: 14,
          column: 56
        }
      },
      "7": {
        start: {
          line: 15,
          column: 14
        },
        end: {
          line: 15,
          column: 29
        }
      },
      "8": {
        start: {
          line: 21,
          column: 30
        },
        end: {
          line: 21,
          column: 67
        }
      },
      "9": {
        start: {
          line: 23,
          column: 27
        },
        end: {
          line: 26,
          column: 10
        }
      },
      "10": {
        start: {
          line: 28,
          column: 25
        },
        end: {
          line: 28,
          column: 40
        }
      },
      "11": {
        start: {
          line: 29,
          column: 25
        },
        end: {
          line: 41,
          column: 9
        }
      },
      "12": {
        start: {
          line: 42,
          column: 8
        },
        end: {
          line: 42,
          column: 68
        }
      },
      "13": {
        start: {
          line: 44,
          column: 8
        },
        end: {
          line: 44,
          column: 89
        }
      },
      "14": {
        start: {
          line: 45,
          column: 8
        },
        end: {
          line: 48,
          column: 10
        }
      },
      "15": {
        start: {
          line: 53,
          column: 8
        },
        end: {
          line: 53,
          column: 65
        }
      },
      "16": {
        start: {
          line: 58,
          column: 8
        },
        end: {
          line: 58,
          column: 73
        }
      },
      "17": {
        start: {
          line: 63,
          column: 25
        },
        end: {
          line: 63,
          column: 74
        }
      },
      "18": {
        start: {
          line: 64,
          column: 8
        },
        end: {
          line: 69,
          column: 9
        }
      },
      "19": {
        start: {
          line: 65,
          column: 12
        },
        end: {
          line: 65,
          column: 39
        }
      },
      "20": {
        start: {
          line: 66,
          column: 12
        },
        end: {
          line: 66,
          column: 42
        }
      },
      "21": {
        start: {
          line: 67,
          column: 12
        },
        end: {
          line: 67,
          column: 72
        }
      },
      "22": {
        start: {
          line: 68,
          column: 12
        },
        end: {
          line: 68,
          column: 24
        }
      },
      "23": {
        start: {
          line: 70,
          column: 8
        },
        end: {
          line: 70,
          column: 21
        }
      },
      "24": {
        start: {
          line: 75,
          column: 25
        },
        end: {
          line: 75,
          column: 74
        }
      },
      "25": {
        start: {
          line: 76,
          column: 8
        },
        end: {
          line: 78,
          column: 9
        }
      },
      "26": {
        start: {
          line: 77,
          column: 12
        },
        end: {
          line: 77,
          column: 48
        }
      },
      "27": {
        start: {
          line: 79,
          column: 8
        },
        end: {
          line: 81,
          column: 9
        }
      },
      "28": {
        start: {
          line: 80,
          column: 12
        },
        end: {
          line: 80,
          column: 55
        }
      },
      "29": {
        start: {
          line: 82,
          column: 25
        },
        end: {
          line: 82,
          column: 86
        }
      },
      "30": {
        start: {
          line: 83,
          column: 24
        },
        end: {
          line: 83,
          column: 88
        }
      },
      "31": {
        start: {
          line: 85,
          column: 8
        },
        end: {
          line: 85,
          column: 147
        }
      },
      "32": {
        start: {
          line: 85,
          column: 67
        },
        end: {
          line: 85,
          column: 145
        }
      },
      "33": {
        start: {
          line: 85,
          column: 92
        },
        end: {
          line: 85,
          column: 144
        }
      },
      "34": {
        start: {
          line: 86,
          column: 8
        },
        end: {
          line: 86,
          column: 68
        }
      },
      "35": {
        start: {
          line: 87,
          column: 8
        },
        end: {
          line: 87,
          column: 23
        }
      },
      "36": {
        start: {
          line: 92,
          column: 25
        },
        end: {
          line: 92,
          column: 74
        }
      },
      "37": {
        start: {
          line: 93,
          column: 8
        },
        end: {
          line: 95,
          column: 9
        }
      },
      "38": {
        start: {
          line: 94,
          column: 12
        },
        end: {
          line: 94,
          column: 22
        }
      },
      "39": {
        start: {
          line: 96,
          column: 25
        },
        end: {
          line: 96,
          column: 86
        }
      },
      "40": {
        start: {
          line: 97,
          column: 28
        },
        end: {
          line: 97,
          column: 30
        }
      },
      "41": {
        start: {
          line: 98,
          column: 8
        },
        end: {
          line: 100,
          column: 9
        }
      },
      "42": {
        start: {
          line: 99,
          column: 12
        },
        end: {
          line: 99,
          column: 76
        }
      },
      "43": {
        start: {
          line: 101,
          column: 8
        },
        end: {
          line: 101,
          column: 27
        }
      },
      "44": {
        start: {
          line: 106,
          column: 8
        },
        end: {
          line: 106,
          column: 85
        }
      },
      "45": {
        start: {
          line: 111,
          column: 8
        },
        end: {
          line: 120,
          column: 27
        }
      },
      "46": {
        start: {
          line: 112,
          column: 29
        },
        end: {
          line: 112,
          column: 78
        }
      },
      "47": {
        start: {
          line: 113,
          column: 12
        },
        end: {
          line: 119,
          column: 13
        }
      },
      "48": {
        start: {
          line: 115,
          column: 35
        },
        end: {
          line: 115,
          column: 72
        }
      },
      "49": {
        start: {
          line: 116,
          column: 16
        },
        end: {
          line: 118,
          column: 17
        }
      },
      "50": {
        start: {
          line: 117,
          column: 20
        },
        end: {
          line: 117,
          column: 73
        }
      },
      "51": {
        start: {
          line: 125,
          column: 23
        },
        end: {
          line: 125,
          column: 25
        }
      },
      "52": {
        start: {
          line: 126,
          column: 22
        },
        end: {
          line: 126,
          column: 24
        }
      },
      "53": {
        start: {
          line: 127,
          column: 8
        },
        end: {
          line: 171,
          column: 9
        }
      },
      "54": {
        start: {
          line: 129,
          column: 26
        },
        end: {
          line: 129,
          column: 52
        }
      },
      "55": {
        start: {
          line: 130,
          column: 12
        },
        end: {
          line: 137,
          column: 13
        }
      },
      "56": {
        start: {
          line: 131,
          column: 16
        },
        end: {
          line: 131,
          column: 84
        }
      },
      "57": {
        start: {
          line: 132,
          column: 16
        },
        end: {
          line: 136,
          column: 18
        }
      },
      "58": {
        start: {
          line: 139,
          column: 33
        },
        end: {
          line: 139,
          column: 74
        }
      },
      "59": {
        start: {
          line: 140,
          column: 25
        },
        end: {
          line: 140,
          column: 74
        }
      },
      "60": {
        start: {
          line: 140,
          column: 50
        },
        end: {
          line: 140,
          column: 73
        }
      },
      "61": {
        start: {
          line: 141,
          column: 12
        },
        end: {
          line: 150,
          column: 13
        }
      },
      "62": {
        start: {
          line: 142,
          column: 32
        },
        end: {
          line: 142,
          column: 39
        }
      },
      "63": {
        start: {
          line: 143,
          column: 16
        },
        end: {
          line: 149,
          column: 19
        }
      },
      "64": {
        start: {
          line: 144,
          column: 32
        },
        end: {
          line: 144,
          column: 34
        }
      },
      "65": {
        start: {
          line: 145,
          column: 20
        },
        end: {
          line: 147,
          column: 23
        }
      },
      "66": {
        start: {
          line: 146,
          column: 24
        },
        end: {
          line: 146,
          column: 55
        }
      },
      "67": {
        start: {
          line: 148,
          column: 20
        },
        end: {
          line: 148,
          column: 31
        }
      },
      "68": {
        start: {
          line: 152,
          column: 36
        },
        end: {
          line: 152,
          column: 71
        }
      },
      "69": {
        start: {
          line: 153,
          column: 34
        },
        end: {
          line: 153,
          column: 47
        }
      },
      "70": {
        start: {
          line: 154,
          column: 12
        },
        end: {
          line: 158,
          column: 13
        }
      },
      "71": {
        start: {
          line: 155,
          column: 16
        },
        end: {
          line: 157,
          column: 17
        }
      },
      "72": {
        start: {
          line: 156,
          column: 20
        },
        end: {
          line: 156,
          column: 72
        }
      },
      "73": {
        start: {
          line: 159,
          column: 12
        },
        end: {
          line: 163,
          column: 14
        }
      },
      "74": {
        start: {
          line: 165,
          column: 12
        },
        end: {
          line: 165,
          column: 87
        }
      },
      "75": {
        start: {
          line: 166,
          column: 12
        },
        end: {
          line: 170,
          column: 14
        }
      },
      "76": {
        start: {
          line: 175,
          column: 25
        },
        end: {
          line: 175,
          column: 74
        }
      },
      "77": {
        start: {
          line: 176,
          column: 8
        },
        end: {
          line: 176,
          column: 30
        }
      },
      "78": {
        start: {
          line: 176,
          column: 23
        },
        end: {
          line: 176,
          column: 30
        }
      },
      "79": {
        start: {
          line: 177,
          column: 8
        },
        end: {
          line: 218,
          column: 9
        }
      },
      "80": {
        start: {
          line: 178,
          column: 12
        },
        end: {
          line: 178,
          column: 43
        }
      },
      "81": {
        start: {
          line: 179,
          column: 12
        },
        end: {
          line: 179,
          column: 35
        }
      },
      "82": {
        start: {
          line: 180,
          column: 12
        },
        end: {
          line: 180,
          column: 72
        }
      },
      "83": {
        start: {
          line: 181,
          column: 30
        },
        end: {
          line: 181,
          column: 80
        }
      },
      "84": {
        start: {
          line: 183,
          column: 12
        },
        end: {
          line: 195,
          column: 13
        }
      },
      "85": {
        start: {
          line: 185,
          column: 20
        },
        end: {
          line: 185,
          column: 82
        }
      },
      "86": {
        start: {
          line: 186,
          column: 20
        },
        end: {
          line: 186,
          column: 26
        }
      },
      "87": {
        start: {
          line: 188,
          column: 20
        },
        end: {
          line: 188,
          column: 83
        }
      },
      "88": {
        start: {
          line: 189,
          column: 20
        },
        end: {
          line: 189,
          column: 26
        }
      },
      "89": {
        start: {
          line: 191,
          column: 20
        },
        end: {
          line: 191,
          column: 81
        }
      },
      "90": {
        start: {
          line: 192,
          column: 20
        },
        end: {
          line: 192,
          column: 26
        }
      },
      "91": {
        start: {
          line: 194,
          column: 20
        },
        end: {
          line: 194,
          column: 74
        }
      },
      "92": {
        start: {
          line: 197,
          column: 12
        },
        end: {
          line: 197,
          column: 42
        }
      },
      "93": {
        start: {
          line: 198,
          column: 12
        },
        end: {
          line: 198,
          column: 36
        }
      },
      "94": {
        start: {
          line: 199,
          column: 12
        },
        end: {
          line: 199,
          column: 51
        }
      },
      "95": {
        start: {
          line: 200,
          column: 12
        },
        end: {
          line: 200,
          column: 59
        }
      },
      "96": {
        start: {
          line: 201,
          column: 12
        },
        end: {
          line: 201,
          column: 45
        }
      },
      "97": {
        start: {
          line: 202,
          column: 12
        },
        end: {
          line: 202,
          column: 51
        }
      },
      "98": {
        start: {
          line: 203,
          column: 12
        },
        end: {
          line: 203,
          column: 42
        }
      },
      "99": {
        start: {
          line: 204,
          column: 12
        },
        end: {
          line: 204,
          column: 39
        }
      },
      "100": {
        start: {
          line: 205,
          column: 12
        },
        end: {
          line: 205,
          column: 72
        }
      },
      "101": {
        start: {
          line: 207,
          column: 12
        },
        end: {
          line: 207,
          column: 39
        }
      },
      "102": {
        start: {
          line: 208,
          column: 12
        },
        end: {
          line: 208,
          column: 34
        }
      },
      "103": {
        start: {
          line: 209,
          column: 12
        },
        end: {
          line: 215,
          column: 14
        }
      },
      "104": {
        start: {
          line: 216,
          column: 12
        },
        end: {
          line: 216,
          column: 42
        }
      },
      "105": {
        start: {
          line: 217,
          column: 12
        },
        end: {
          line: 217,
          column: 72
        }
      },
      "106": {
        start: {
          line: 221,
          column: 23
        },
        end: {
          line: 221,
          column: 25
        }
      },
      "107": {
        start: {
          line: 222,
          column: 22
        },
        end: {
          line: 222,
          column: 24
        }
      },
      "108": {
        start: {
          line: 223,
          column: 23
        },
        end: {
          line: 223,
          column: 28
        }
      },
      "109": {
        start: {
          line: 224,
          column: 16
        },
        end: {
          line: 224,
          column: 17
        }
      },
      "110": {
        start: {
          line: 225,
          column: 8
        },
        end: {
          line: 244,
          column: 9
        }
      },
      "111": {
        start: {
          line: 226,
          column: 25
        },
        end: {
          line: 226,
          column: 32
        }
      },
      "112": {
        start: {
          line: 227,
          column: 29
        },
        end: {
          line: 227,
          column: 40
        }
      },
      "113": {
        start: {
          line: 228,
          column: 12
        },
        end: {
          line: 243,
          column: 13
        }
      },
      "114": {
        start: {
          line: 229,
          column: 16
        },
        end: {
          line: 235,
          column: 17
        }
      },
      "115": {
        start: {
          line: 230,
          column: 20
        },
        end: {
          line: 230,
          column: 35
        }
      },
      "116": {
        start: {
          line: 231,
          column: 20
        },
        end: {
          line: 231,
          column: 27
        }
      },
      "117": {
        start: {
          line: 233,
          column: 20
        },
        end: {
          line: 233,
          column: 41
        }
      },
      "118": {
        start: {
          line: 234,
          column: 20
        },
        end: {
          line: 234,
          column: 24
        }
      },
      "119": {
        start: {
          line: 236,
          column: 19
        },
        end: {
          line: 243,
          column: 13
        }
      },
      "120": {
        start: {
          line: 237,
          column: 16
        },
        end: {
          line: 237,
          column: 44
        }
      },
      "121": {
        start: {
          line: 238,
          column: 16
        },
        end: {
          line: 238,
          column: 29
        }
      },
      "122": {
        start: {
          line: 239,
          column: 16
        },
        end: {
          line: 239,
          column: 20
        }
      },
      "123": {
        start: {
          line: 241,
          column: 16
        },
        end: {
          line: 241,
          column: 32
        }
      },
      "124": {
        start: {
          line: 242,
          column: 16
        },
        end: {
          line: 242,
          column: 20
        }
      },
      "125": {
        start: {
          line: 245,
          column: 8
        },
        end: {
          line: 245,
          column: 36
        }
      },
      "126": {
        start: {
          line: 246,
          column: 8
        },
        end: {
          line: 246,
          column: 22
        }
      },
      "127": {
        start: {
          line: 249,
          column: 8
        },
        end: {
          line: 270,
          column: 9
        }
      },
      "128": {
        start: {
          line: 251,
          column: 16
        },
        end: {
          line: 256,
          column: 18
        }
      },
      "129": {
        start: {
          line: 258,
          column: 16
        },
        end: {
          line: 261,
          column: 18
        }
      },
      "130": {
        start: {
          line: 263,
          column: 16
        },
        end: {
          line: 267,
          column: 18
        }
      },
      "131": {
        start: {
          line: 269,
          column: 16
        },
        end: {
          line: 269,
          column: 26
        }
      },
      "132": {
        start: {
          line: 273,
          column: 8
        },
        end: {
          line: 273,
          column: 69
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 19,
            column: 6
          },
          end: {
            line: 19,
            column: 7
          }
        },
        loc: {
          start: {
            line: 19,
            column: 50
          },
          end: {
            line: 49,
            column: 5
          }
        },
        line: 19
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 52,
            column: 6
          },
          end: {
            line: 52,
            column: 7
          }
        },
        loc: {
          start: {
            line: 52,
            column: 34
          },
          end: {
            line: 54,
            column: 5
          }
        },
        line: 52
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 57,
            column: 6
          },
          end: {
            line: 57,
            column: 7
          }
        },
        loc: {
          start: {
            line: 57,
            column: 29
          },
          end: {
            line: 59,
            column: 5
          }
        },
        line: 57
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 62,
            column: 6
          },
          end: {
            line: 62,
            column: 7
          }
        },
        loc: {
          start: {
            line: 62,
            column: 29
          },
          end: {
            line: 71,
            column: 5
          }
        },
        line: 62
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 74,
            column: 6
          },
          end: {
            line: 74,
            column: 7
          }
        },
        loc: {
          start: {
            line: 74,
            column: 52
          },
          end: {
            line: 88,
            column: 5
          }
        },
        line: 74
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 85,
            column: 55
          },
          end: {
            line: 85,
            column: 56
          }
        },
        loc: {
          start: {
            line: 85,
            column: 67
          },
          end: {
            line: 85,
            column: 145
          }
        },
        line: 85
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 85,
            column: 85
          },
          end: {
            line: 85,
            column: 86
          }
        },
        loc: {
          start: {
            line: 85,
            column: 92
          },
          end: {
            line: 85,
            column: 144
          }
        },
        line: 85
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 91,
            column: 6
          },
          end: {
            line: 91,
            column: 7
          }
        },
        loc: {
          start: {
            line: 91,
            column: 40
          },
          end: {
            line: 102,
            column: 5
          }
        },
        line: 91
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 105,
            column: 6
          },
          end: {
            line: 105,
            column: 7
          }
        },
        loc: {
          start: {
            line: 105,
            column: 51
          },
          end: {
            line: 107,
            column: 5
          }
        },
        line: 105
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 110,
            column: 6
          },
          end: {
            line: 110,
            column: 7
          }
        },
        loc: {
          start: {
            line: 110,
            column: 32
          },
          end: {
            line: 121,
            column: 5
          }
        },
        line: 110
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 111,
            column: 19
          },
          end: {
            line: 111,
            column: 20
          }
        },
        loc: {
          start: {
            line: 111,
            column: 23
          },
          end: {
            line: 120,
            column: 9
          }
        },
        line: 111
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 124,
            column: 6
          },
          end: {
            line: 124,
            column: 7
          }
        },
        loc: {
          start: {
            line: 124,
            column: 52
          },
          end: {
            line: 172,
            column: 5
          }
        },
        line: 124
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 140,
            column: 42
          },
          end: {
            line: 140,
            column: 43
          }
        },
        loc: {
          start: {
            line: 140,
            column: 50
          },
          end: {
            line: 140,
            column: 73
          }
        },
        line: 140
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 143,
            column: 44
          },
          end: {
            line: 143,
            column: 45
          }
        },
        loc: {
          start: {
            line: 143,
            column: 51
          },
          end: {
            line: 149,
            column: 17
          }
        },
        line: 143
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 145,
            column: 36
          },
          end: {
            line: 145,
            column: 37
          }
        },
        loc: {
          start: {
            line: 145,
            column: 53
          },
          end: {
            line: 147,
            column: 21
          }
        },
        line: 145
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 174,
            column: 4
          },
          end: {
            line: 174,
            column: 5
          }
        },
        loc: {
          start: {
            line: 174,
            column: 68
          },
          end: {
            line: 219,
            column: 5
          }
        },
        line: 174
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 220,
            column: 4
          },
          end: {
            line: 220,
            column: 5
          }
        },
        loc: {
          start: {
            line: 220,
            column: 23
          },
          end: {
            line: 247,
            column: 5
          }
        },
        line: 220
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 248,
            column: 4
          },
          end: {
            line: 248,
            column: 5
          }
        },
        loc: {
          start: {
            line: 248,
            column: 35
          },
          end: {
            line: 271,
            column: 5
          }
        },
        line: 248
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 272,
            column: 4
          },
          end: {
            line: 272,
            column: 5
          }
        },
        loc: {
          start: {
            line: 272,
            column: 33
          },
          end: {
            line: 274,
            column: 5
          }
        },
        line: 272
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 64,
            column: 8
          },
          end: {
            line: 69,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 64,
            column: 8
          },
          end: {
            line: 69,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 64
      },
      "1": {
        loc: {
          start: {
            line: 64,
            column: 12
          },
          end: {
            line: 64,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 64,
            column: 12
          },
          end: {
            line: 64,
            column: 20
          }
        }, {
          start: {
            line: 64,
            column: 24
          },
          end: {
            line: 64,
            column: 56
          }
        }],
        line: 64
      },
      "2": {
        loc: {
          start: {
            line: 76,
            column: 8
          },
          end: {
            line: 78,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 76,
            column: 8
          },
          end: {
            line: 78,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 76
      },
      "3": {
        loc: {
          start: {
            line: 79,
            column: 8
          },
          end: {
            line: 81,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 79,
            column: 8
          },
          end: {
            line: 81,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 79
      },
      "4": {
        loc: {
          start: {
            line: 79,
            column: 12
          },
          end: {
            line: 79,
            column: 78
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 79,
            column: 12
          },
          end: {
            line: 79,
            column: 43
          }
        }, {
          start: {
            line: 79,
            column: 47
          },
          end: {
            line: 79,
            column: 78
          }
        }],
        line: 79
      },
      "5": {
        loc: {
          start: {
            line: 93,
            column: 8
          },
          end: {
            line: 95,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 93,
            column: 8
          },
          end: {
            line: 95,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 93
      },
      "6": {
        loc: {
          start: {
            line: 93,
            column: 12
          },
          end: {
            line: 93,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 93,
            column: 12
          },
          end: {
            line: 93,
            column: 21
          }
        }, {
          start: {
            line: 93,
            column: 25
          },
          end: {
            line: 93,
            column: 56
          }
        }],
        line: 93
      },
      "7": {
        loc: {
          start: {
            line: 105,
            column: 30
          },
          end: {
            line: 105,
            column: 49
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 105,
            column: 47
          },
          end: {
            line: 105,
            column: 49
          }
        }],
        line: 105
      },
      "8": {
        loc: {
          start: {
            line: 113,
            column: 12
          },
          end: {
            line: 119,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 113,
            column: 12
          },
          end: {
            line: 119,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 113
      },
      "9": {
        loc: {
          start: {
            line: 113,
            column: 16
          },
          end: {
            line: 113,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 113,
            column: 16
          },
          end: {
            line: 113,
            column: 24
          }
        }, {
          start: {
            line: 113,
            column: 28
          },
          end: {
            line: 113,
            column: 44
          }
        }, {
          start: {
            line: 113,
            column: 48
          },
          end: {
            line: 113,
            column: 80
          }
        }],
        line: 113
      },
      "10": {
        loc: {
          start: {
            line: 116,
            column: 16
          },
          end: {
            line: 118,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 116,
            column: 16
          },
          end: {
            line: 118,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 116
      },
      "11": {
        loc: {
          start: {
            line: 130,
            column: 12
          },
          end: {
            line: 137,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 130,
            column: 12
          },
          end: {
            line: 137,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 130
      },
      "12": {
        loc: {
          start: {
            line: 141,
            column: 12
          },
          end: {
            line: 150,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 141,
            column: 12
          },
          end: {
            line: 150,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 141
      },
      "13": {
        loc: {
          start: {
            line: 146,
            column: 38
          },
          end: {
            line: 146,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 146,
            column: 38
          },
          end: {
            line: 146,
            column: 48
          }
        }, {
          start: {
            line: 146,
            column: 52
          },
          end: {
            line: 146,
            column: 54
          }
        }],
        line: 146
      },
      "14": {
        loc: {
          start: {
            line: 153,
            column: 34
          },
          end: {
            line: 153,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 153,
            column: 34
          },
          end: {
            line: 153,
            column: 41
          }
        }, {
          start: {
            line: 153,
            column: 45
          },
          end: {
            line: 153,
            column: 47
          }
        }],
        line: 153
      },
      "15": {
        loc: {
          start: {
            line: 155,
            column: 16
          },
          end: {
            line: 157,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 155,
            column: 16
          },
          end: {
            line: 157,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 155
      },
      "16": {
        loc: {
          start: {
            line: 165,
            column: 24
          },
          end: {
            line: 165,
            column: 85
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 165,
            column: 49
          },
          end: {
            line: 165,
            column: 62
          }
        }, {
          start: {
            line: 165,
            column: 65
          },
          end: {
            line: 165,
            column: 85
          }
        }],
        line: 165
      },
      "17": {
        loc: {
          start: {
            line: 176,
            column: 8
          },
          end: {
            line: 176,
            column: 30
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 176,
            column: 8
          },
          end: {
            line: 176,
            column: 30
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 176
      },
      "18": {
        loc: {
          start: {
            line: 183,
            column: 12
          },
          end: {
            line: 195,
            column: 13
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 184,
            column: 16
          },
          end: {
            line: 186,
            column: 26
          }
        }, {
          start: {
            line: 187,
            column: 16
          },
          end: {
            line: 189,
            column: 26
          }
        }, {
          start: {
            line: 190,
            column: 16
          },
          end: {
            line: 192,
            column: 26
          }
        }, {
          start: {
            line: 193,
            column: 16
          },
          end: {
            line: 194,
            column: 74
          }
        }],
        line: 183
      },
      "19": {
        loc: {
          start: {
            line: 212,
            column: 29
          },
          end: {
            line: 212,
            column: 85
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 212,
            column: 54
          },
          end: {
            line: 212,
            column: 67
          }
        }, {
          start: {
            line: 212,
            column: 70
          },
          end: {
            line: 212,
            column: 85
          }
        }],
        line: 212
      },
      "20": {
        loc: {
          start: {
            line: 228,
            column: 12
          },
          end: {
            line: 243,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 228,
            column: 12
          },
          end: {
            line: 243,
            column: 13
          }
        }, {
          start: {
            line: 236,
            column: 19
          },
          end: {
            line: 243,
            column: 13
          }
        }],
        line: 228
      },
      "21": {
        loc: {
          start: {
            line: 229,
            column: 16
          },
          end: {
            line: 235,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 229,
            column: 16
          },
          end: {
            line: 235,
            column: 17
          }
        }, {
          start: {
            line: 232,
            column: 23
          },
          end: {
            line: 235,
            column: 17
          }
        }],
        line: 229
      },
      "22": {
        loc: {
          start: {
            line: 229,
            column: 20
          },
          end: {
            line: 229,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 229,
            column: 20
          },
          end: {
            line: 229,
            column: 28
          }
        }, {
          start: {
            line: 229,
            column: 32
          },
          end: {
            line: 229,
            column: 48
          }
        }],
        line: 229
      },
      "23": {
        loc: {
          start: {
            line: 236,
            column: 19
          },
          end: {
            line: 243,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 236,
            column: 19
          },
          end: {
            line: 243,
            column: 13
          }
        }, {
          start: {
            line: 240,
            column: 19
          },
          end: {
            line: 243,
            column: 13
          }
        }],
        line: 236
      },
      "24": {
        loc: {
          start: {
            line: 236,
            column: 23
          },
          end: {
            line: 236,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 236,
            column: 23
          },
          end: {
            line: 236,
            column: 35
          }
        }, {
          start: {
            line: 236,
            column: 39
          },
          end: {
            line: 236,
            column: 48
          }
        }],
        line: 236
      },
      "25": {
        loc: {
          start: {
            line: 249,
            column: 8
          },
          end: {
            line: 270,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 250,
            column: 12
          },
          end: {
            line: 256,
            column: 18
          }
        }, {
          start: {
            line: 257,
            column: 12
          },
          end: {
            line: 261,
            column: 18
          }
        }, {
          start: {
            line: 262,
            column: 12
          },
          end: {
            line: 267,
            column: 18
          }
        }, {
          start: {
            line: 268,
            column: 12
          },
          end: {
            line: 269,
            column: 26
          }
        }],
        line: 249
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0],
      "8": [0, 0],
      "9": [0, 0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0, 0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0, 0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/stefanbekker/projects/fancy-planties/src/lib/services/csv-import-service.ts"],
      sourcesContent: ["import { CSVImportProcessor } from './csv-import-processor';\nimport { CSVConflictResolver, type ConflictResolution } from './csv-conflict-resolver';\nimport {\n  csvImportConfigSchema,\n  csvFileSchema,\n  type CSVImportConfig,\n  type CSVFile,\n  type ImportSummary,\n  type ImportProgress,\n  type ImportConflict,\n} from '@/lib/validation/csv-schemas';\nimport { importProgressStore } from '@/lib/db/import-progress';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport type ImportType = 'plant_taxonomy' | 'plant_instances' | 'propagations';\n\nexport class CSVImportService {\n  /**\n   * Start a CSV import process\n   */\n  async startImport(\n    file: CSVFile,\n    importType: ImportType,\n    config: Partial<CSVImportConfig>\n  ): Promise<{ importId: string; progress: ImportProgress }> {\n    // Validate file\n    const validatedFile = csvFileSchema.parse(file);\n    \n    // Create full config with defaults\n    const fullConfig = csvImportConfigSchema.parse({\n      ...config,\n      userId: config.userId, // Required field\n    });\n\n    // Create import progress tracking\n    const importId = uuidv4();\n    const progress: ImportProgress = {\n      id: importId,\n      userId: fullConfig.userId,\n      fileName: validatedFile.name,\n      importType,\n      status: 'pending',\n      progress: 0,\n      totalRows: 0,\n      processedRows: 0,\n      errors: [],\n      conflicts: [],\n      startTime: new Date(),\n    };\n\n    importProgressStore.set(importId, progress);\n\n    // Start processing asynchronously\n    this.processImportAsync(importId, validatedFile.content, importType, fullConfig);\n\n    return { importId, progress };\n  }\n\n  /**\n   * Get import progress\n   */\n  getImportProgress(importId: string): ImportProgress | null {\n    return importProgressStore.get(importId);\n  }\n\n  /**\n   * Get all active imports for a user\n   */\n  getUserImports(userId: number): ImportProgress[] {\n    return importProgressStore.getAllForUser(userId);\n  }\n\n  /**\n   * Cancel an import\n   */\n  cancelImport(importId: string): boolean {\n    const progress = importProgressStore.get(importId);\n    if (progress && progress.status === 'processing') {\n      progress.status = 'failed';\n      progress.endTime = new Date();\n      importProgressStore.set(importId, progress);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Resolve conflicts from an import\n   */\n  async resolveConflicts(\n    importId: string,\n    resolutions: ConflictResolution[]\n  ): Promise<ImportSummary> {\n    const progress = importProgressStore.get(importId);\n    if (!progress) {\n      throw new Error('Import not found');\n    }\n\n    if (progress.status !== 'completed' || progress.conflicts.length === 0) {\n      throw new Error('No conflicts to resolve');\n    }\n\n    const resolver = new CSVConflictResolver(progress.userId);\n    const summary = await resolver.resolveConflicts(progress.conflicts, resolutions);\n\n    // Update progress\n    progress.conflicts = progress.conflicts.filter(conflict => \n      !resolutions.some(res => res.conflictId === this.generateConflictId(conflict))\n    );\n    importProgressStore.set(importId, progress);\n\n    return summary;\n  }\n\n  /**\n   * Get suggested resolutions for conflicts\n   */\n  getSuggestedResolutions(importId: string): ConflictResolution[] {\n    const progress = importProgressStore.get(importId);\n    if (!progress || progress.conflicts.length === 0) {\n      return [];\n    }\n\n    const resolver = new CSVConflictResolver(progress.userId);\n    const suggestions: ConflictResolution[] = [];\n\n    for (const conflict of progress.conflicts) {\n      suggestions.push(...resolver.getSuggestedResolutions(conflict));\n    }\n\n    return suggestions;\n  }\n\n  /**\n   * Clean up completed imports\n   */\n  cleanupCompletedImports(olderThanHours: number = 24): void {\n    importProgressStore.cleanup(olderThanHours * 60 * 60 * 1000);\n  }\n\n  /**\n   * Keep completed imports available for at least 1 hour\n   */\n  private scheduleCleanup(importId: string): void {\n    setTimeout(() => {\n      const progress = importProgressStore.get(importId);\n      if (progress && progress.endTime && progress.status !== 'processing') {\n        // Keep for at least 1 hour after completion\n        const oneHourAgo = new Date(Date.now() - 60 * 60 * 1000);\n        if (progress.endTime < oneHourAgo) {\n          importProgressStore.delete(importId);\n        }\n      }\n    }, 60 * 60 * 1000); // 1 hour\n  }\n\n  /**\n   * Validate CSV content before import\n   */\n  async validateCSVContent(\n    content: string,\n    importType: ImportType\n  ): Promise<{ isValid: boolean; errors: string[]; preview: any[] }> {\n    const errors: string[] = [];\n    let preview: any[] = [];\n\n    try {\n      // Basic CSV parsing validation\n      const lines = content.trim().split('\\n');\n      if (lines.length < 2) {\n        errors.push('CSV must have at least a header row and one data row');\n        return { isValid: false, errors, preview };\n      }\n\n      // Parse first few rows for preview\n      const previewLines = lines.slice(0, Math.min(6, lines.length)); // Header + 5 data rows\n      const rows = previewLines.map(line => this.parseCSVLine(line));\n      \n      if (rows.length > 0) {\n        const headers = rows[0];\n        preview = rows.slice(1).map(row => {\n          const obj: any = {};\n          headers.forEach((header, index) => {\n            obj[header] = row[index] || '';\n          });\n          return obj;\n        });\n      }\n\n      // Validate required columns based on import type\n      const requiredColumns = this.getRequiredColumns(importType);\n      const actualColumns = rows[0] || [];\n      \n      for (const required of requiredColumns) {\n        if (!actualColumns.includes(required)) {\n          errors.push(`Missing required column: ${required}`);\n        }\n      }\n\n      return {\n        isValid: errors.length === 0,\n        errors,\n        preview,\n      };\n\n    } catch (error) {\n      errors.push(error instanceof Error ? error.message : 'Invalid CSV format');\n      return { isValid: false, errors, preview };\n    }\n  }\n\n  // Private methods\n\n  private async processImportAsync(\n    importId: string,\n    content: string,\n    importType: ImportType,\n    config: CSVImportConfig\n  ): Promise<void> {\n    const progress = importProgressStore.get(importId);\n    if (!progress) return;\n\n    try {\n      progress.status = 'processing';\n      progress.progress = 10;\n      importProgressStore.set(importId, progress);\n\n      const processor = new CSVImportProcessor(config);\n      let summary: ImportSummary;\n\n      switch (importType) {\n        case 'plant_taxonomy':\n          summary = await processor.processPlantTaxonomyImport(content);\n          break;\n        case 'plant_instances':\n          summary = await processor.processPlantInstancesImport(content);\n          break;\n        case 'propagations':\n          summary = await processor.processPropagationsImport(content);\n          break;\n        default:\n          throw new Error(`Unknown import type: ${importType}`);\n      }\n\n      // Update progress with results\n      progress.status = 'completed';\n      progress.progress = 100;\n      progress.totalRows = summary.totalRows;\n      progress.processedRows = summary.processedRows;\n      progress.errors = summary.errors;\n      progress.conflicts = summary.conflicts;\n      progress.endTime = new Date();\n      progress.summary = summary;\n      importProgressStore.set(importId, progress);\n\n    } catch (error) {\n      progress.status = 'failed';\n      progress.progress = 0;\n      progress.errors = [{\n        rowIndex: 0,\n        message: error instanceof Error ? error.message : 'Import failed',\n        severity: 'error',\n      }];\n      progress.endTime = new Date();\n      importProgressStore.set(importId, progress);\n    }\n  }\n\n  private parseCSVLine(line: string): string[] {\n    const result: string[] = [];\n    let current = '';\n    let inQuotes = false;\n    let i = 0;\n\n    while (i < line.length) {\n      const char = line[i];\n      const nextChar = line[i + 1];\n\n      if (char === '\"') {\n        if (inQuotes && nextChar === '\"') {\n          current += '\"';\n          i += 2;\n        } else {\n          inQuotes = !inQuotes;\n          i++;\n        }\n      } else if (char === ',' && !inQuotes) {\n        result.push(current.trim());\n        current = '';\n        i++;\n      } else {\n        current += char;\n        i++;\n      }\n    }\n\n    result.push(current.trim());\n    return result;\n  }\n\n  private getRequiredColumns(importType: ImportType): string[] {\n    switch (importType) {\n      case 'plant_taxonomy':\n        return ['Family', 'Genus', 'Species', 'Common Name/Variety'];\n      case 'plant_instances':\n        return ['Common Name/Variety', 'Location'];\n      case 'propagations':\n        return ['Common Name/Variety', 'Location', 'Date Started'];\n      default:\n        return [];\n    }\n  }\n\n  private generateConflictId(conflict: ImportConflict): string {\n    return `${conflict.type}_${conflict.rowIndex}_${Date.now()}`;\n  }\n}"],
      names: ["CSVImportService", "startImport", "file", "importType", "config", "validatedFile", "csvFileSchema", "parse", "fullConfig", "csvImportConfigSchema", "userId", "importId", "uuidv4", "progress", "id", "fileName", "name", "status", "totalRows", "processedRows", "errors", "conflicts", "startTime", "Date", "importProgressStore", "set", "processImportAsync", "content", "getImportProgress", "get", "getUserImports", "getAllForUser", "cancelImport", "endTime", "resolveConflicts", "resolutions", "Error", "length", "resolver", "CSVConflictResolver", "summary", "filter", "conflict", "some", "res", "conflictId", "generateConflictId", "getSuggestedResolutions", "suggestions", "push", "cleanupCompletedImports", "olderThanHours", "cleanup", "scheduleCleanup", "setTimeout", "oneHourAgo", "now", "delete", "validateCSVContent", "preview", "lines", "trim", "split", "isValid", "previewLines", "slice", "Math", "min", "rows", "map", "line", "parseCSVLine", "headers", "row", "obj", "forEach", "header", "index", "requiredColumns", "getRequiredColumns", "actualColumns", "required", "includes", "error", "message", "processor", "CSVImportProcessor", "processPlantTaxonomyImport", "processPlantInstancesImport", "processPropagationsImport", "rowIndex", "severity", "result", "current", "inQuotes", "i", "char", "nextChar", "type"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "ee709642fa0964ff9409488c9c0397ca39e4e492"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2m8zqmjbaw = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2m8zqmjbaw();
cov_2m8zqmjbaw().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_2m8zqmjbaw().s[1]++;
Object.defineProperty(exports, "CSVImportService", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_2m8zqmjbaw().f[0]++;
    cov_2m8zqmjbaw().s[2]++;
    return CSVImportService;
  }
});
const _csvimportprocessor =
/* istanbul ignore next */
(cov_2m8zqmjbaw().s[3]++, require("./csv-import-processor"));
const _csvconflictresolver =
/* istanbul ignore next */
(cov_2m8zqmjbaw().s[4]++, require("./csv-conflict-resolver"));
const _csvschemas =
/* istanbul ignore next */
(cov_2m8zqmjbaw().s[5]++, require("../validation/csv-schemas"));
const _importprogress =
/* istanbul ignore next */
(cov_2m8zqmjbaw().s[6]++, require("../db/import-progress"));
const _uuid =
/* istanbul ignore next */
(cov_2m8zqmjbaw().s[7]++, require("uuid"));
class CSVImportService {
  /**
  * Start a CSV import process
  */
  async startImport(file, importType, config) {
    /* istanbul ignore next */
    cov_2m8zqmjbaw().f[1]++;
    // Validate file
    const validatedFile =
    /* istanbul ignore next */
    (cov_2m8zqmjbaw().s[8]++, _csvschemas.csvFileSchema.parse(file));
    // Create full config with defaults
    const fullConfig =
    /* istanbul ignore next */
    (cov_2m8zqmjbaw().s[9]++, _csvschemas.csvImportConfigSchema.parse({
      ...config,
      userId: config.userId
    }));
    // Create import progress tracking
    const importId =
    /* istanbul ignore next */
    (cov_2m8zqmjbaw().s[10]++, (0, _uuid.v4)());
    const progress =
    /* istanbul ignore next */
    (cov_2m8zqmjbaw().s[11]++, {
      id: importId,
      userId: fullConfig.userId,
      fileName: validatedFile.name,
      importType,
      status: 'pending',
      progress: 0,
      totalRows: 0,
      processedRows: 0,
      errors: [],
      conflicts: [],
      startTime: new Date()
    });
    /* istanbul ignore next */
    cov_2m8zqmjbaw().s[12]++;
    _importprogress.importProgressStore.set(importId, progress);
    // Start processing asynchronously
    /* istanbul ignore next */
    cov_2m8zqmjbaw().s[13]++;
    this.processImportAsync(importId, validatedFile.content, importType, fullConfig);
    /* istanbul ignore next */
    cov_2m8zqmjbaw().s[14]++;
    return {
      importId,
      progress
    };
  }
  /**
  * Get import progress
  */
  getImportProgress(importId) {
    /* istanbul ignore next */
    cov_2m8zqmjbaw().f[2]++;
    cov_2m8zqmjbaw().s[15]++;
    return _importprogress.importProgressStore.get(importId);
  }
  /**
  * Get all active imports for a user
  */
  getUserImports(userId) {
    /* istanbul ignore next */
    cov_2m8zqmjbaw().f[3]++;
    cov_2m8zqmjbaw().s[16]++;
    return _importprogress.importProgressStore.getAllForUser(userId);
  }
  /**
  * Cancel an import
  */
  cancelImport(importId) {
    /* istanbul ignore next */
    cov_2m8zqmjbaw().f[4]++;
    const progress =
    /* istanbul ignore next */
    (cov_2m8zqmjbaw().s[17]++, _importprogress.importProgressStore.get(importId));
    /* istanbul ignore next */
    cov_2m8zqmjbaw().s[18]++;
    if (
    /* istanbul ignore next */
    (cov_2m8zqmjbaw().b[1][0]++, progress) &&
    /* istanbul ignore next */
    (cov_2m8zqmjbaw().b[1][1]++, progress.status === 'processing')) {
      /* istanbul ignore next */
      cov_2m8zqmjbaw().b[0][0]++;
      cov_2m8zqmjbaw().s[19]++;
      progress.status = 'failed';
      /* istanbul ignore next */
      cov_2m8zqmjbaw().s[20]++;
      progress.endTime = new Date();
      /* istanbul ignore next */
      cov_2m8zqmjbaw().s[21]++;
      _importprogress.importProgressStore.set(importId, progress);
      /* istanbul ignore next */
      cov_2m8zqmjbaw().s[22]++;
      return true;
    } else
    /* istanbul ignore next */
    {
      cov_2m8zqmjbaw().b[0][1]++;
    }
    cov_2m8zqmjbaw().s[23]++;
    return false;
  }
  /**
  * Resolve conflicts from an import
  */
  async resolveConflicts(importId, resolutions) {
    /* istanbul ignore next */
    cov_2m8zqmjbaw().f[5]++;
    const progress =
    /* istanbul ignore next */
    (cov_2m8zqmjbaw().s[24]++, _importprogress.importProgressStore.get(importId));
    /* istanbul ignore next */
    cov_2m8zqmjbaw().s[25]++;
    if (!progress) {
      /* istanbul ignore next */
      cov_2m8zqmjbaw().b[2][0]++;
      cov_2m8zqmjbaw().s[26]++;
      throw new Error('Import not found');
    } else
    /* istanbul ignore next */
    {
      cov_2m8zqmjbaw().b[2][1]++;
    }
    cov_2m8zqmjbaw().s[27]++;
    if (
    /* istanbul ignore next */
    (cov_2m8zqmjbaw().b[4][0]++, progress.status !== 'completed') ||
    /* istanbul ignore next */
    (cov_2m8zqmjbaw().b[4][1]++, progress.conflicts.length === 0)) {
      /* istanbul ignore next */
      cov_2m8zqmjbaw().b[3][0]++;
      cov_2m8zqmjbaw().s[28]++;
      throw new Error('No conflicts to resolve');
    } else
    /* istanbul ignore next */
    {
      cov_2m8zqmjbaw().b[3][1]++;
    }
    const resolver =
    /* istanbul ignore next */
    (cov_2m8zqmjbaw().s[29]++, new _csvconflictresolver.CSVConflictResolver(progress.userId));
    const summary =
    /* istanbul ignore next */
    (cov_2m8zqmjbaw().s[30]++, await resolver.resolveConflicts(progress.conflicts, resolutions));
    // Update progress
    /* istanbul ignore next */
    cov_2m8zqmjbaw().s[31]++;
    progress.conflicts = progress.conflicts.filter(conflict => {
      /* istanbul ignore next */
      cov_2m8zqmjbaw().f[6]++;
      cov_2m8zqmjbaw().s[32]++;
      return !resolutions.some(res => {
        /* istanbul ignore next */
        cov_2m8zqmjbaw().f[7]++;
        cov_2m8zqmjbaw().s[33]++;
        return res.conflictId === this.generateConflictId(conflict);
      });
    });
    /* istanbul ignore next */
    cov_2m8zqmjbaw().s[34]++;
    _importprogress.importProgressStore.set(importId, progress);
    /* istanbul ignore next */
    cov_2m8zqmjbaw().s[35]++;
    return summary;
  }
  /**
  * Get suggested resolutions for conflicts
  */
  getSuggestedResolutions(importId) {
    /* istanbul ignore next */
    cov_2m8zqmjbaw().f[8]++;
    const progress =
    /* istanbul ignore next */
    (cov_2m8zqmjbaw().s[36]++, _importprogress.importProgressStore.get(importId));
    /* istanbul ignore next */
    cov_2m8zqmjbaw().s[37]++;
    if (
    /* istanbul ignore next */
    (cov_2m8zqmjbaw().b[6][0]++, !progress) ||
    /* istanbul ignore next */
    (cov_2m8zqmjbaw().b[6][1]++, progress.conflicts.length === 0)) {
      /* istanbul ignore next */
      cov_2m8zqmjbaw().b[5][0]++;
      cov_2m8zqmjbaw().s[38]++;
      return [];
    } else
    /* istanbul ignore next */
    {
      cov_2m8zqmjbaw().b[5][1]++;
    }
    const resolver =
    /* istanbul ignore next */
    (cov_2m8zqmjbaw().s[39]++, new _csvconflictresolver.CSVConflictResolver(progress.userId));
    const suggestions =
    /* istanbul ignore next */
    (cov_2m8zqmjbaw().s[40]++, []);
    /* istanbul ignore next */
    cov_2m8zqmjbaw().s[41]++;
    for (const conflict of progress.conflicts) {
      /* istanbul ignore next */
      cov_2m8zqmjbaw().s[42]++;
      suggestions.push(...resolver.getSuggestedResolutions(conflict));
    }
    /* istanbul ignore next */
    cov_2m8zqmjbaw().s[43]++;
    return suggestions;
  }
  /**
  * Clean up completed imports
  */
  cleanupCompletedImports(olderThanHours =
  /* istanbul ignore next */
  (cov_2m8zqmjbaw().b[7][0]++, 24)) {
    /* istanbul ignore next */
    cov_2m8zqmjbaw().f[9]++;
    cov_2m8zqmjbaw().s[44]++;
    _importprogress.importProgressStore.cleanup(olderThanHours * 60 * 60 * 1000);
  }
  /**
  * Keep completed imports available for at least 1 hour
  */
  scheduleCleanup(importId) {
    /* istanbul ignore next */
    cov_2m8zqmjbaw().f[10]++;
    cov_2m8zqmjbaw().s[45]++;
    setTimeout(() => {
      /* istanbul ignore next */
      cov_2m8zqmjbaw().f[11]++;
      const progress =
      /* istanbul ignore next */
      (cov_2m8zqmjbaw().s[46]++, _importprogress.importProgressStore.get(importId));
      /* istanbul ignore next */
      cov_2m8zqmjbaw().s[47]++;
      if (
      /* istanbul ignore next */
      (cov_2m8zqmjbaw().b[9][0]++, progress) &&
      /* istanbul ignore next */
      (cov_2m8zqmjbaw().b[9][1]++, progress.endTime) &&
      /* istanbul ignore next */
      (cov_2m8zqmjbaw().b[9][2]++, progress.status !== 'processing')) {
        /* istanbul ignore next */
        cov_2m8zqmjbaw().b[8][0]++;
        // Keep for at least 1 hour after completion
        const oneHourAgo =
        /* istanbul ignore next */
        (cov_2m8zqmjbaw().s[48]++, new Date(Date.now() - 60 * 60 * 1000));
        /* istanbul ignore next */
        cov_2m8zqmjbaw().s[49]++;
        if (progress.endTime < oneHourAgo) {
          /* istanbul ignore next */
          cov_2m8zqmjbaw().b[10][0]++;
          cov_2m8zqmjbaw().s[50]++;
          _importprogress.importProgressStore.delete(importId);
        } else
        /* istanbul ignore next */
        {
          cov_2m8zqmjbaw().b[10][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_2m8zqmjbaw().b[8][1]++;
      }
    }, 60 * 60 * 1000); // 1 hour
  }
  /**
  * Validate CSV content before import
  */
  async validateCSVContent(content, importType) {
    /* istanbul ignore next */
    cov_2m8zqmjbaw().f[12]++;
    const errors =
    /* istanbul ignore next */
    (cov_2m8zqmjbaw().s[51]++, []);
    let preview =
    /* istanbul ignore next */
    (cov_2m8zqmjbaw().s[52]++, []);
    /* istanbul ignore next */
    cov_2m8zqmjbaw().s[53]++;
    try {
      // Basic CSV parsing validation
      const lines =
      /* istanbul ignore next */
      (cov_2m8zqmjbaw().s[54]++, content.trim().split('\n'));
      /* istanbul ignore next */
      cov_2m8zqmjbaw().s[55]++;
      if (lines.length < 2) {
        /* istanbul ignore next */
        cov_2m8zqmjbaw().b[11][0]++;
        cov_2m8zqmjbaw().s[56]++;
        errors.push('CSV must have at least a header row and one data row');
        /* istanbul ignore next */
        cov_2m8zqmjbaw().s[57]++;
        return {
          isValid: false,
          errors,
          preview
        };
      } else
      /* istanbul ignore next */
      {
        cov_2m8zqmjbaw().b[11][1]++;
      }
      // Parse first few rows for preview
      const previewLines =
      /* istanbul ignore next */
      (cov_2m8zqmjbaw().s[58]++, lines.slice(0, Math.min(6, lines.length))); // Header + 5 data rows
      const rows =
      /* istanbul ignore next */
      (cov_2m8zqmjbaw().s[59]++, previewLines.map(line => {
        /* istanbul ignore next */
        cov_2m8zqmjbaw().f[13]++;
        cov_2m8zqmjbaw().s[60]++;
        return this.parseCSVLine(line);
      }));
      /* istanbul ignore next */
      cov_2m8zqmjbaw().s[61]++;
      if (rows.length > 0) {
        /* istanbul ignore next */
        cov_2m8zqmjbaw().b[12][0]++;
        const headers =
        /* istanbul ignore next */
        (cov_2m8zqmjbaw().s[62]++, rows[0]);
        /* istanbul ignore next */
        cov_2m8zqmjbaw().s[63]++;
        preview = rows.slice(1).map(row => {
          /* istanbul ignore next */
          cov_2m8zqmjbaw().f[14]++;
          const obj =
          /* istanbul ignore next */
          (cov_2m8zqmjbaw().s[64]++, {});
          /* istanbul ignore next */
          cov_2m8zqmjbaw().s[65]++;
          headers.forEach((header, index) => {
            /* istanbul ignore next */
            cov_2m8zqmjbaw().f[15]++;
            cov_2m8zqmjbaw().s[66]++;
            obj[header] =
            /* istanbul ignore next */
            (cov_2m8zqmjbaw().b[13][0]++, row[index]) ||
            /* istanbul ignore next */
            (cov_2m8zqmjbaw().b[13][1]++, '');
          });
          /* istanbul ignore next */
          cov_2m8zqmjbaw().s[67]++;
          return obj;
        });
      } else
      /* istanbul ignore next */
      {
        cov_2m8zqmjbaw().b[12][1]++;
      }
      // Validate required columns based on import type
      const requiredColumns =
      /* istanbul ignore next */
      (cov_2m8zqmjbaw().s[68]++, this.getRequiredColumns(importType));
      const actualColumns =
      /* istanbul ignore next */
      (cov_2m8zqmjbaw().s[69]++,
      /* istanbul ignore next */
      (cov_2m8zqmjbaw().b[14][0]++, rows[0]) ||
      /* istanbul ignore next */
      (cov_2m8zqmjbaw().b[14][1]++, []));
      /* istanbul ignore next */
      cov_2m8zqmjbaw().s[70]++;
      for (const required of requiredColumns) {
        /* istanbul ignore next */
        cov_2m8zqmjbaw().s[71]++;
        if (!actualColumns.includes(required)) {
          /* istanbul ignore next */
          cov_2m8zqmjbaw().b[15][0]++;
          cov_2m8zqmjbaw().s[72]++;
          errors.push(`Missing required column: ${required}`);
        } else
        /* istanbul ignore next */
        {
          cov_2m8zqmjbaw().b[15][1]++;
        }
      }
      /* istanbul ignore next */
      cov_2m8zqmjbaw().s[73]++;
      return {
        isValid: errors.length === 0,
        errors,
        preview
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_2m8zqmjbaw().s[74]++;
      errors.push(error instanceof Error ?
      /* istanbul ignore next */
      (cov_2m8zqmjbaw().b[16][0]++, error.message) :
      /* istanbul ignore next */
      (cov_2m8zqmjbaw().b[16][1]++, 'Invalid CSV format'));
      /* istanbul ignore next */
      cov_2m8zqmjbaw().s[75]++;
      return {
        isValid: false,
        errors,
        preview
      };
    }
  }
  // Private methods
  async processImportAsync(importId, content, importType, config) {
    /* istanbul ignore next */
    cov_2m8zqmjbaw().f[16]++;
    const progress =
    /* istanbul ignore next */
    (cov_2m8zqmjbaw().s[76]++, _importprogress.importProgressStore.get(importId));
    /* istanbul ignore next */
    cov_2m8zqmjbaw().s[77]++;
    if (!progress) {
      /* istanbul ignore next */
      cov_2m8zqmjbaw().b[17][0]++;
      cov_2m8zqmjbaw().s[78]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_2m8zqmjbaw().b[17][1]++;
    }
    cov_2m8zqmjbaw().s[79]++;
    try {
      /* istanbul ignore next */
      cov_2m8zqmjbaw().s[80]++;
      progress.status = 'processing';
      /* istanbul ignore next */
      cov_2m8zqmjbaw().s[81]++;
      progress.progress = 10;
      /* istanbul ignore next */
      cov_2m8zqmjbaw().s[82]++;
      _importprogress.importProgressStore.set(importId, progress);
      const processor =
      /* istanbul ignore next */
      (cov_2m8zqmjbaw().s[83]++, new _csvimportprocessor.CSVImportProcessor(config));
      let summary;
      /* istanbul ignore next */
      cov_2m8zqmjbaw().s[84]++;
      switch (importType) {
        case 'plant_taxonomy':
          /* istanbul ignore next */
          cov_2m8zqmjbaw().b[18][0]++;
          cov_2m8zqmjbaw().s[85]++;
          summary = await processor.processPlantTaxonomyImport(content);
          /* istanbul ignore next */
          cov_2m8zqmjbaw().s[86]++;
          break;
        case 'plant_instances':
          /* istanbul ignore next */
          cov_2m8zqmjbaw().b[18][1]++;
          cov_2m8zqmjbaw().s[87]++;
          summary = await processor.processPlantInstancesImport(content);
          /* istanbul ignore next */
          cov_2m8zqmjbaw().s[88]++;
          break;
        case 'propagations':
          /* istanbul ignore next */
          cov_2m8zqmjbaw().b[18][2]++;
          cov_2m8zqmjbaw().s[89]++;
          summary = await processor.processPropagationsImport(content);
          /* istanbul ignore next */
          cov_2m8zqmjbaw().s[90]++;
          break;
        default:
          /* istanbul ignore next */
          cov_2m8zqmjbaw().b[18][3]++;
          cov_2m8zqmjbaw().s[91]++;
          throw new Error(`Unknown import type: ${importType}`);
      }
      // Update progress with results
      /* istanbul ignore next */
      cov_2m8zqmjbaw().s[92]++;
      progress.status = 'completed';
      /* istanbul ignore next */
      cov_2m8zqmjbaw().s[93]++;
      progress.progress = 100;
      /* istanbul ignore next */
      cov_2m8zqmjbaw().s[94]++;
      progress.totalRows = summary.totalRows;
      /* istanbul ignore next */
      cov_2m8zqmjbaw().s[95]++;
      progress.processedRows = summary.processedRows;
      /* istanbul ignore next */
      cov_2m8zqmjbaw().s[96]++;
      progress.errors = summary.errors;
      /* istanbul ignore next */
      cov_2m8zqmjbaw().s[97]++;
      progress.conflicts = summary.conflicts;
      /* istanbul ignore next */
      cov_2m8zqmjbaw().s[98]++;
      progress.endTime = new Date();
      /* istanbul ignore next */
      cov_2m8zqmjbaw().s[99]++;
      progress.summary = summary;
      /* istanbul ignore next */
      cov_2m8zqmjbaw().s[100]++;
      _importprogress.importProgressStore.set(importId, progress);
    } catch (error) {
      /* istanbul ignore next */
      cov_2m8zqmjbaw().s[101]++;
      progress.status = 'failed';
      /* istanbul ignore next */
      cov_2m8zqmjbaw().s[102]++;
      progress.progress = 0;
      /* istanbul ignore next */
      cov_2m8zqmjbaw().s[103]++;
      progress.errors = [{
        rowIndex: 0,
        message: error instanceof Error ?
        /* istanbul ignore next */
        (cov_2m8zqmjbaw().b[19][0]++, error.message) :
        /* istanbul ignore next */
        (cov_2m8zqmjbaw().b[19][1]++, 'Import failed'),
        severity: 'error'
      }];
      /* istanbul ignore next */
      cov_2m8zqmjbaw().s[104]++;
      progress.endTime = new Date();
      /* istanbul ignore next */
      cov_2m8zqmjbaw().s[105]++;
      _importprogress.importProgressStore.set(importId, progress);
    }
  }
  parseCSVLine(line) {
    /* istanbul ignore next */
    cov_2m8zqmjbaw().f[17]++;
    const result =
    /* istanbul ignore next */
    (cov_2m8zqmjbaw().s[106]++, []);
    let current =
    /* istanbul ignore next */
    (cov_2m8zqmjbaw().s[107]++, '');
    let inQuotes =
    /* istanbul ignore next */
    (cov_2m8zqmjbaw().s[108]++, false);
    let i =
    /* istanbul ignore next */
    (cov_2m8zqmjbaw().s[109]++, 0);
    /* istanbul ignore next */
    cov_2m8zqmjbaw().s[110]++;
    while (i < line.length) {
      const char =
      /* istanbul ignore next */
      (cov_2m8zqmjbaw().s[111]++, line[i]);
      const nextChar =
      /* istanbul ignore next */
      (cov_2m8zqmjbaw().s[112]++, line[i + 1]);
      /* istanbul ignore next */
      cov_2m8zqmjbaw().s[113]++;
      if (char === '"') {
        /* istanbul ignore next */
        cov_2m8zqmjbaw().b[20][0]++;
        cov_2m8zqmjbaw().s[114]++;
        if (
        /* istanbul ignore next */
        (cov_2m8zqmjbaw().b[22][0]++, inQuotes) &&
        /* istanbul ignore next */
        (cov_2m8zqmjbaw().b[22][1]++, nextChar === '"')) {
          /* istanbul ignore next */
          cov_2m8zqmjbaw().b[21][0]++;
          cov_2m8zqmjbaw().s[115]++;
          current += '"';
          /* istanbul ignore next */
          cov_2m8zqmjbaw().s[116]++;
          i += 2;
        } else {
          /* istanbul ignore next */
          cov_2m8zqmjbaw().b[21][1]++;
          cov_2m8zqmjbaw().s[117]++;
          inQuotes = !inQuotes;
          /* istanbul ignore next */
          cov_2m8zqmjbaw().s[118]++;
          i++;
        }
      } else {
        /* istanbul ignore next */
        cov_2m8zqmjbaw().b[20][1]++;
        cov_2m8zqmjbaw().s[119]++;
        if (
        /* istanbul ignore next */
        (cov_2m8zqmjbaw().b[24][0]++, char === ',') &&
        /* istanbul ignore next */
        (cov_2m8zqmjbaw().b[24][1]++, !inQuotes)) {
          /* istanbul ignore next */
          cov_2m8zqmjbaw().b[23][0]++;
          cov_2m8zqmjbaw().s[120]++;
          result.push(current.trim());
          /* istanbul ignore next */
          cov_2m8zqmjbaw().s[121]++;
          current = '';
          /* istanbul ignore next */
          cov_2m8zqmjbaw().s[122]++;
          i++;
        } else {
          /* istanbul ignore next */
          cov_2m8zqmjbaw().b[23][1]++;
          cov_2m8zqmjbaw().s[123]++;
          current += char;
          /* istanbul ignore next */
          cov_2m8zqmjbaw().s[124]++;
          i++;
        }
      }
    }
    /* istanbul ignore next */
    cov_2m8zqmjbaw().s[125]++;
    result.push(current.trim());
    /* istanbul ignore next */
    cov_2m8zqmjbaw().s[126]++;
    return result;
  }
  getRequiredColumns(importType) {
    /* istanbul ignore next */
    cov_2m8zqmjbaw().f[18]++;
    cov_2m8zqmjbaw().s[127]++;
    switch (importType) {
      case 'plant_taxonomy':
        /* istanbul ignore next */
        cov_2m8zqmjbaw().b[25][0]++;
        cov_2m8zqmjbaw().s[128]++;
        return ['Family', 'Genus', 'Species', 'Common Name/Variety'];
      case 'plant_instances':
        /* istanbul ignore next */
        cov_2m8zqmjbaw().b[25][1]++;
        cov_2m8zqmjbaw().s[129]++;
        return ['Common Name/Variety', 'Location'];
      case 'propagations':
        /* istanbul ignore next */
        cov_2m8zqmjbaw().b[25][2]++;
        cov_2m8zqmjbaw().s[130]++;
        return ['Common Name/Variety', 'Location', 'Date Started'];
      default:
        /* istanbul ignore next */
        cov_2m8zqmjbaw().b[25][3]++;
        cov_2m8zqmjbaw().s[131]++;
        return [];
    }
  }
  generateConflictId(conflict) {
    /* istanbul ignore next */
    cov_2m8zqmjbaw().f[19]++;
    cov_2m8zqmjbaw().s[132]++;
    return `${conflict.type}_${conflict.rowIndex}_${Date.now()}`;
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,