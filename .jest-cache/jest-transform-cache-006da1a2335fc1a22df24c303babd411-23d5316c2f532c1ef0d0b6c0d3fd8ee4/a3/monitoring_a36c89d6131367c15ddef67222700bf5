e7bc6f38269e14e9b620de361e420323
"use strict";

/* istanbul ignore next */
function cov_tb2swjomz() {
  var path = "/Users/stefanbekker/projects/fancy-planties/src/lib/utils/monitoring.ts";
  var hash = "15f6b6988005398cc3625598d1708f3767fac947";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/stefanbekker/projects/fancy-planties/src/lib/utils/monitoring.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 18,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 26
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 30
        }
      },
      "6": {
        start: {
          line: 19,
          column: 0
        },
        end: {
          line: 19,
          column: 23
        }
      },
      "7": {
        start: {
          line: 20,
          column: 16
        },
        end: {
          line: 20,
          column: 35
        }
      },
      "8": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 23,
          column: 26
        }
      },
      "9": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 24,
          column: 63
        }
      },
      "10": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 27,
          column: 36
        }
      },
      "11": {
        start: {
          line: 27,
          column: 29
        },
        end: {
          line: 27,
          column: 36
        }
      },
      "12": {
        start: {
          line: 28,
          column: 23
        },
        end: {
          line: 34,
          column: 9
        }
      },
      "13": {
        start: {
          line: 35,
          column: 8
        },
        end: {
          line: 35,
          column: 34
        }
      },
      "14": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 39,
          column: 9
        }
      },
      "15": {
        start: {
          line: 38,
          column: 12
        },
        end: {
          line: 38,
          column: 53
        }
      },
      "16": {
        start: {
          line: 41,
          column: 8
        },
        end: {
          line: 47,
          column: 9
        }
      },
      "17": {
        start: {
          line: 42,
          column: 12
        },
        end: {
          line: 46,
          column: 15
        }
      },
      "18": {
        start: {
          line: 51,
          column: 8
        },
        end: {
          line: 62,
          column: 9
        }
      },
      "19": {
        start: {
          line: 53,
          column: 16
        },
        end: {
          line: 53,
          column: 43
        }
      },
      "20": {
        start: {
          line: 55,
          column: 16
        },
        end: {
          line: 55,
          column: 42
        }
      },
      "21": {
        start: {
          line: 57,
          column: 16
        },
        end: {
          line: 57,
          column: 56
        }
      },
      "22": {
        start: {
          line: 59,
          column: 16
        },
        end: {
          line: 59,
          column: 40
        }
      },
      "23": {
        start: {
          line: 61,
          column: 16
        },
        end: {
          line: 61,
          column: 29
        }
      },
      "24": {
        start: {
          line: 66,
          column: 26
        },
        end: {
          line: 66,
          column: 36
        }
      },
      "25": {
        start: {
          line: 67,
          column: 8
        },
        end: {
          line: 70,
          column: 10
        }
      },
      "26": {
        start: {
          line: 68,
          column: 29
        },
        end: {
          line: 68,
          column: 51
        }
      },
      "27": {
        start: {
          line: 69,
          column: 12
        },
        end: {
          line: 69,
          column: 52
        }
      },
      "28": {
        start: {
          line: 74,
          column: 8
        },
        end: {
          line: 77,
          column: 11
        }
      },
      "29": {
        start: {
          line: 78,
          column: 8
        },
        end: {
          line: 82,
          column: 9
        }
      },
      "30": {
        start: {
          line: 79,
          column: 12
        },
        end: {
          line: 81,
          column: 15
        }
      },
      "31": {
        start: {
          line: 86,
          column: 8
        },
        end: {
          line: 90,
          column: 11
        }
      },
      "32": {
        start: {
          line: 91,
          column: 8
        },
        end: {
          line: 95,
          column: 11
        }
      },
      "33": {
        start: {
          line: 96,
          column: 8
        },
        end: {
          line: 102,
          column: 9
        }
      },
      "34": {
        start: {
          line: 97,
          column: 12
        },
        end: {
          line: 101,
          column: 15
        }
      },
      "35": {
        start: {
          line: 106,
          column: 8
        },
        end: {
          line: 111,
          column: 9
        }
      },
      "36": {
        start: {
          line: 107,
          column: 29
        },
        end: {
          line: 107,
          column: 50
        }
      },
      "37": {
        start: {
          line: 108,
          column: 12
        },
        end: {
          line: 108,
          column: 78
        }
      },
      "38": {
        start: {
          line: 109,
          column: 12
        },
        end: {
          line: 109,
          column: 80
        }
      },
      "39": {
        start: {
          line: 110,
          column: 12
        },
        end: {
          line: 110,
          column: 67
        }
      },
      "40": {
        start: {
          line: 115,
          column: 30
        },
        end: {
          line: 115,
          column: 53
        }
      },
      "41": {
        start: {
          line: 117,
          column: 26
        },
        end: {
          line: 117,
          column: 84
        }
      },
      "42": {
        start: {
          line: 117,
          column: 51
        },
        end: {
          line: 117,
          column: 83
        }
      },
      "43": {
        start: {
          line: 118,
          column: 25
        },
        end: {
          line: 118,
          column: 84
        }
      },
      "44": {
        start: {
          line: 118,
          column: 50
        },
        end: {
          line: 118,
          column: 83
        }
      },
      "45": {
        start: {
          line: 120,
          column: 28
        },
        end: {
          line: 120,
          column: 84
        }
      },
      "46": {
        start: {
          line: 120,
          column: 53
        },
        end: {
          line: 120,
          column: 83
        }
      },
      "47": {
        start: {
          line: 121,
          column: 26
        },
        end: {
          line: 121,
          column: 80
        }
      },
      "48": {
        start: {
          line: 121,
          column: 51
        },
        end: {
          line: 121,
          column: 79
        }
      },
      "49": {
        start: {
          line: 122,
          column: 30
        },
        end: {
          line: 122,
          column: 86
        }
      },
      "50": {
        start: {
          line: 122,
          column: 55
        },
        end: {
          line: 122,
          column: 85
        }
      },
      "51": {
        start: {
          line: 123,
          column: 32
        },
        end: {
          line: 123,
          column: 134
        }
      },
      "52": {
        start: {
          line: 123,
          column: 90
        },
        end: {
          line: 123,
          column: 103
        }
      },
      "53": {
        start: {
          line: 124,
          column: 8
        },
        end: {
          line: 136,
          column: 10
        }
      },
      "54": {
        start: {
          line: 127,
          column: 51
        },
        end: {
          line: 127,
          column: 64
        }
      },
      "55": {
        start: {
          line: 140,
          column: 8
        },
        end: {
          line: 142,
          column: 10
        }
      },
      "56": {
        start: {
          line: 146,
          column: 8
        },
        end: {
          line: 146,
          column: 26
        }
      },
      "57": {
        start: {
          line: 149,
          column: 19
        },
        end: {
          line: 149,
          column: 42
        }
      },
      "58": {
        start: {
          line: 151,
          column: 4
        },
        end: {
          line: 164,
          column: 6
        }
      },
      "59": {
        start: {
          line: 152,
          column: 26
        },
        end: {
          line: 152,
          column: 36
        }
      },
      "60": {
        start: {
          line: 153,
          column: 24
        },
        end: {
          line: 153,
          column: 31
        }
      },
      "61": {
        start: {
          line: 154,
          column: 8
        },
        end: {
          line: 163,
          column: 9
        }
      },
      "62": {
        start: {
          line: 155,
          column: 29
        },
        end: {
          line: 155,
          column: 51
        }
      },
      "63": {
        start: {
          line: 156,
          column: 29
        },
        end: {
          line: 156,
          column: 51
        }
      },
      "64": {
        start: {
          line: 157,
          column: 12
        },
        end: {
          line: 157,
          column: 94
        }
      },
      "65": {
        start: {
          line: 158,
          column: 12
        },
        end: {
          line: 158,
          column: 28
        }
      },
      "66": {
        start: {
          line: 160,
          column: 29
        },
        end: {
          line: 160,
          column: 51
        }
      },
      "67": {
        start: {
          line: 161,
          column: 12
        },
        end: {
          line: 161,
          column: 82
        }
      },
      "68": {
        start: {
          line: 162,
          column: 12
        },
        end: {
          line: 162,
          column: 24
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        },
        loc: {
          start: {
            line: 12,
            column: 22
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 26
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 22,
            column: 4
          },
          end: {
            line: 22,
            column: 5
          }
        },
        loc: {
          start: {
            line: 22,
            column: 17
          },
          end: {
            line: 25,
            column: 5
          }
        },
        line: 22
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 26,
            column: 4
          },
          end: {
            line: 26,
            column: 5
          }
        },
        loc: {
          start: {
            line: 26,
            column: 42
          },
          end: {
            line: 48,
            column: 5
          }
        },
        line: 26
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 49,
            column: 4
          },
          end: {
            line: 49,
            column: 5
          }
        },
        loc: {
          start: {
            line: 49,
            column: 32
          },
          end: {
            line: 63,
            column: 5
          }
        },
        line: 49
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 65,
            column: 4
          },
          end: {
            line: 65,
            column: 5
          }
        },
        loc: {
          start: {
            line: 65,
            column: 21
          },
          end: {
            line: 71,
            column: 5
          }
        },
        line: 65
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 67,
            column: 15
          },
          end: {
            line: 67,
            column: 16
          }
        },
        loc: {
          start: {
            line: 67,
            column: 19
          },
          end: {
            line: 70,
            column: 9
          }
        },
        line: 67
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 73,
            column: 4
          },
          end: {
            line: 73,
            column: 5
          }
        },
        loc: {
          start: {
            line: 73,
            column: 54
          },
          end: {
            line: 83,
            column: 5
          }
        },
        line: 73
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 85,
            column: 4
          },
          end: {
            line: 85,
            column: 5
          }
        },
        loc: {
          start: {
            line: 85,
            column: 57
          },
          end: {
            line: 103,
            column: 5
          }
        },
        line: 85
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 105,
            column: 4
          },
          end: {
            line: 105,
            column: 5
          }
        },
        loc: {
          start: {
            line: 105,
            column: 24
          },
          end: {
            line: 112,
            column: 5
          }
        },
        line: 105
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 114,
            column: 4
          },
          end: {
            line: 114,
            column: 5
          }
        },
        loc: {
          start: {
            line: 114,
            column: 24
          },
          end: {
            line: 137,
            column: 5
          }
        },
        line: 114
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 117,
            column: 46
          },
          end: {
            line: 117,
            column: 47
          }
        },
        loc: {
          start: {
            line: 117,
            column: 51
          },
          end: {
            line: 117,
            column: 83
          }
        },
        line: 117
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 118,
            column: 45
          },
          end: {
            line: 118,
            column: 46
          }
        },
        loc: {
          start: {
            line: 118,
            column: 50
          },
          end: {
            line: 118,
            column: 83
          }
        },
        line: 118
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 120,
            column: 48
          },
          end: {
            line: 120,
            column: 49
          }
        },
        loc: {
          start: {
            line: 120,
            column: 53
          },
          end: {
            line: 120,
            column: 83
          }
        },
        line: 120
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 121,
            column: 46
          },
          end: {
            line: 121,
            column: 47
          }
        },
        loc: {
          start: {
            line: 121,
            column: 51
          },
          end: {
            line: 121,
            column: 79
          }
        },
        line: 121
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 122,
            column: 50
          },
          end: {
            line: 122,
            column: 51
          }
        },
        loc: {
          start: {
            line: 122,
            column: 55
          },
          end: {
            line: 122,
            column: 85
          }
        },
        line: 122
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 123,
            column: 80
          },
          end: {
            line: 123,
            column: 81
          }
        },
        loc: {
          start: {
            line: 123,
            column: 90
          },
          end: {
            line: 123,
            column: 103
          }
        },
        line: 123
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 127,
            column: 46
          },
          end: {
            line: 127,
            column: 47
          }
        },
        loc: {
          start: {
            line: 127,
            column: 51
          },
          end: {
            line: 127,
            column: 64
          }
        },
        line: 127
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 139,
            column: 4
          },
          end: {
            line: 139,
            column: 5
          }
        },
        loc: {
          start: {
            line: 139,
            column: 20
          },
          end: {
            line: 143,
            column: 5
          }
        },
        line: 139
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 145,
            column: 4
          },
          end: {
            line: 145,
            column: 5
          }
        },
        loc: {
          start: {
            line: 145,
            column: 19
          },
          end: {
            line: 147,
            column: 5
          }
        },
        line: 145
      },
      "21": {
        name: "withMonitoring",
        decl: {
          start: {
            line: 150,
            column: 9
          },
          end: {
            line: 150,
            column: 23
          }
        },
        loc: {
          start: {
            line: 150,
            column: 44
          },
          end: {
            line: 165,
            column: 1
          }
        },
        line: 150
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 151,
            column: 11
          },
          end: {
            line: 151,
            column: 12
          }
        },
        loc: {
          start: {
            line: 151,
            column: 28
          },
          end: {
            line: 164,
            column: 5
          }
        },
        line: 151
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 27,
            column: 8
          },
          end: {
            line: 27,
            column: 36
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 27,
            column: 8
          },
          end: {
            line: 27,
            column: 36
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 27
      },
      "1": {
        loc: {
          start: {
            line: 37,
            column: 8
          },
          end: {
            line: 39,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 37,
            column: 8
          },
          end: {
            line: 39,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 37
      },
      "2": {
        loc: {
          start: {
            line: 41,
            column: 8
          },
          end: {
            line: 47,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 41,
            column: 8
          },
          end: {
            line: 47,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 41
      },
      "3": {
        loc: {
          start: {
            line: 51,
            column: 8
          },
          end: {
            line: 62,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 52,
            column: 12
          },
          end: {
            line: 53,
            column: 43
          }
        }, {
          start: {
            line: 54,
            column: 12
          },
          end: {
            line: 55,
            column: 42
          }
        }, {
          start: {
            line: 56,
            column: 12
          },
          end: {
            line: 57,
            column: 56
          }
        }, {
          start: {
            line: 58,
            column: 12
          },
          end: {
            line: 59,
            column: 40
          }
        }, {
          start: {
            line: 60,
            column: 12
          },
          end: {
            line: 61,
            column: 29
          }
        }],
        line: 51
      },
      "4": {
        loc: {
          start: {
            line: 78,
            column: 8
          },
          end: {
            line: 82,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 78,
            column: 8
          },
          end: {
            line: 82,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 78
      },
      "5": {
        loc: {
          start: {
            line: 96,
            column: 8
          },
          end: {
            line: 102,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 96,
            column: 8
          },
          end: {
            line: 102,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 96
      },
      "6": {
        loc: {
          start: {
            line: 106,
            column: 8
          },
          end: {
            line: 111,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 106,
            column: 8
          },
          end: {
            line: 111,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 106
      },
      "7": {
        loc: {
          start: {
            line: 123,
            column: 32
          },
          end: {
            line: 123,
            column: 134
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 123,
            column: 59
          },
          end: {
            line: 123,
            column: 130
          }
        }, {
          start: {
            line: 123,
            column: 133
          },
          end: {
            line: 123,
            column: 134
          }
        }],
        line: 123
      },
      "8": {
        loc: {
          start: {
            line: 133,
            column: 29
          },
          end: {
            line: 133,
            column: 95
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 133,
            column: 62
          },
          end: {
            line: 133,
            column: 83
          }
        }, {
          start: {
            line: 133,
            column: 86
          },
          end: {
            line: 133,
            column: 95
          }
        }],
        line: 133
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0, 0, 0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/stefanbekker/projects/fancy-planties/src/lib/utils/monitoring.ts"],
      sourcesContent: ["import 'server-only';\nimport { logger } from './logger';\n\ninterface PerformanceMetric {\n  name: string;\n  value: number;\n  unit: 'ms' | 'bytes' | 'count';\n  timestamp: string;\n  tags?: Record<string, string>;\n}\n\ninterface DatabaseMetrics {\n  queryCount: number;\n  slowQueries: number;\n  connectionPoolSize: number;\n  activeConnections: number;\n}\n\ninterface ApplicationMetrics {\n  requestCount: number;\n  errorCount: number;\n  averageResponseTime: number;\n  memoryUsage: NodeJS.MemoryUsage;\n}\n\nclass MonitoringService {\n  private metrics: PerformanceMetric[] = [];\n  private isEnabled: boolean;\n\n  constructor() {\n    this.isEnabled = process.env.ENABLE_METRICS === 'true';\n  }\n\n  recordMetric(name: string, value: number, unit: 'ms' | 'bytes' | 'count', tags?: Record<string, string>): void {\n    if (!this.isEnabled) return;\n\n    const metric: PerformanceMetric = {\n      name,\n      value,\n      unit,\n      timestamp: new Date().toISOString(),\n      tags,\n    };\n\n    this.metrics.push(metric);\n    \n    // Keep only last 1000 metrics in memory\n    if (this.metrics.length > 1000) {\n      this.metrics = this.metrics.slice(-1000);\n    }\n\n    // Log significant metrics\n    if (this.isSignificantMetric(metric)) {\n      logger.info(`Metric: ${name}`, { value, unit, tags });\n    }\n  }\n\n  private isSignificantMetric(metric: PerformanceMetric): boolean {\n    // Define what constitutes a significant metric worth logging\n    switch (metric.name) {\n      case 'api_response_time':\n        return metric.value > 1000; // Log slow API responses (>1s)\n      case 'database_query_time':\n        return metric.value > 500; // Log slow database queries (>500ms)\n      case 'memory_usage':\n        return metric.value > 500 * 1024 * 1024; // Log high memory usage (>500MB)\n      case 'error_count':\n        return metric.value > 0; // Log all errors\n      default:\n        return false;\n    }\n  }\n\n  // Timing utilities\n  startTimer(name: string): () => void {\n    const startTime = Date.now();\n    return () => {\n      const duration = Date.now() - startTime;\n      this.recordMetric(name, duration, 'ms');\n    };\n  }\n\n  // Database monitoring\n  recordDatabaseQuery(queryType: string, duration: number, success: boolean): void {\n    this.recordMetric('database_query_time', duration, 'ms', { \n      queryType, \n      success: success.toString() \n    });\n    \n    if (!success) {\n      this.recordMetric('database_error_count', 1, 'count', { queryType });\n    }\n  }\n\n  // API monitoring\n  recordApiRequest(method: string, path: string, statusCode: number, duration: number): void {\n    this.recordMetric('api_response_time', duration, 'ms', {\n      method,\n      path,\n      statusCode: statusCode.toString(),\n    });\n\n    this.recordMetric('api_request_count', 1, 'count', {\n      method,\n      path,\n      statusCode: statusCode.toString(),\n    });\n\n    if (statusCode >= 400) {\n      this.recordMetric('api_error_count', 1, 'count', {\n        method,\n        path,\n        statusCode: statusCode.toString(),\n      });\n    }\n  }\n\n  // Memory monitoring\n  recordMemoryUsage(): void {\n    if (typeof process !== 'undefined') {\n      const memUsage = process.memoryUsage();\n      this.recordMetric('memory_heap_used', memUsage.heapUsed, 'bytes');\n      this.recordMetric('memory_heap_total', memUsage.heapTotal, 'bytes');\n      this.recordMetric('memory_rss', memUsage.rss, 'bytes');\n    }\n  }\n\n  // Get current metrics summary\n  getMetricsSummary(): {\n    database: Partial<DatabaseMetrics>;\n    application: Partial<ApplicationMetrics>;\n    recent: PerformanceMetric[];\n  } {\n    const recentMetrics = this.metrics.slice(-50); // Last 50 metrics\n    \n    // Calculate database metrics\n    const dbQueries = this.metrics.filter(m => m.name === 'database_query_time');\n    const dbErrors = this.metrics.filter(m => m.name === 'database_error_count');\n    \n    // Calculate application metrics\n    const apiRequests = this.metrics.filter(m => m.name === 'api_request_count');\n    const apiErrors = this.metrics.filter(m => m.name === 'api_error_count');\n    const responseTimes = this.metrics.filter(m => m.name === 'api_response_time');\n    \n    const avgResponseTime = responseTimes.length > 0\n      ? responseTimes.reduce((sum, m) => sum + m.value, 0) / responseTimes.length\n      : 0;\n\n    return {\n      database: {\n        queryCount: dbQueries.length,\n        slowQueries: dbQueries.filter(m => m.value > 500).length,\n      },\n      application: {\n        requestCount: apiRequests.length,\n        errorCount: apiErrors.length,\n        averageResponseTime: avgResponseTime,\n        memoryUsage: typeof process !== 'undefined' ? process.memoryUsage() : undefined,\n      },\n      recent: recentMetrics,\n    };\n  }\n\n  // Export metrics for external monitoring systems\n  exportMetrics(): PerformanceMetric[] {\n    return [...this.metrics];\n  }\n\n  // Clear metrics (useful for testing)\n  clearMetrics(): void {\n    this.metrics = [];\n  }\n}\n\nexport const monitoring = new MonitoringService();\n\n// Middleware helper for API route monitoring\nexport function withMonitoring<T extends (...args: any[]) => Promise<Response>>(\n  handler: T,\n  routeName: string\n): T {\n  return (async (...args: any[]) => {\n    const startTime = Date.now();\n    const request = args[0] as Request;\n    \n    try {\n      const response = await handler(...args);\n      const duration = Date.now() - startTime;\n      \n      monitoring.recordApiRequest(\n        request.method,\n        routeName,\n        response.status,\n        duration\n      );\n      \n      return response;\n    } catch (error) {\n      const duration = Date.now() - startTime;\n      \n      monitoring.recordApiRequest(\n        request.method,\n        routeName,\n        500,\n        duration\n      );\n      \n      throw error;\n    }\n  }) as T;\n}"],
      names: ["monitoring", "withMonitoring", "MonitoringService", "metrics", "isEnabled", "process", "env", "ENABLE_METRICS", "recordMetric", "name", "value", "unit", "tags", "metric", "timestamp", "Date", "toISOString", "push", "length", "slice", "isSignificantMetric", "logger", "info", "startTimer", "startTime", "now", "duration", "recordDatabaseQuery", "queryType", "success", "toString", "recordApiRequest", "method", "path", "statusCode", "recordMemoryUsage", "memUsage", "memoryUsage", "heapUsed", "heapTotal", "rss", "getMetricsSummary", "recentMetrics", "dbQueries", "filter", "m", "dbErrors", "apiRequests", "apiErrors", "responseTimes", "avgResponseTime", "reduce", "sum", "database", "queryCount", "slowQueries", "application", "requestCount", "errorCount", "averageResponseTime", "undefined", "recent", "exportMetrics", "clearMetrics", "handler", "routeName", "args", "request", "response", "status", "error"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "15f6b6988005398cc3625598d1708f3767fac947"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_tb2swjomz = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_tb2swjomz();
cov_tb2swjomz().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_tb2swjomz().f[0]++;
  cov_tb2swjomz().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_tb2swjomz().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_tb2swjomz().s[3]++;
_export(exports, {
  get monitoring() {
    /* istanbul ignore next */
    cov_tb2swjomz().f[1]++;
    cov_tb2swjomz().s[4]++;
    return monitoring;
  },
  get withMonitoring() {
    /* istanbul ignore next */
    cov_tb2swjomz().f[2]++;
    cov_tb2swjomz().s[5]++;
    return withMonitoring;
  }
});
/* istanbul ignore next */
cov_tb2swjomz().s[6]++;
require("server-only");
const _logger =
/* istanbul ignore next */
(cov_tb2swjomz().s[7]++, require("./logger"));
class MonitoringService {
  constructor() {
    /* istanbul ignore next */
    cov_tb2swjomz().f[3]++;
    cov_tb2swjomz().s[8]++;
    this.metrics = [];
    /* istanbul ignore next */
    cov_tb2swjomz().s[9]++;
    this.isEnabled = process.env.ENABLE_METRICS === 'true';
  }
  recordMetric(name, value, unit, tags) {
    /* istanbul ignore next */
    cov_tb2swjomz().f[4]++;
    cov_tb2swjomz().s[10]++;
    if (!this.isEnabled) {
      /* istanbul ignore next */
      cov_tb2swjomz().b[0][0]++;
      cov_tb2swjomz().s[11]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_tb2swjomz().b[0][1]++;
    }
    const metric =
    /* istanbul ignore next */
    (cov_tb2swjomz().s[12]++, {
      name,
      value,
      unit,
      timestamp: new Date().toISOString(),
      tags
    });
    /* istanbul ignore next */
    cov_tb2swjomz().s[13]++;
    this.metrics.push(metric);
    // Keep only last 1000 metrics in memory
    /* istanbul ignore next */
    cov_tb2swjomz().s[14]++;
    if (this.metrics.length > 1000) {
      /* istanbul ignore next */
      cov_tb2swjomz().b[1][0]++;
      cov_tb2swjomz().s[15]++;
      this.metrics = this.metrics.slice(-1000);
    } else
    /* istanbul ignore next */
    {
      cov_tb2swjomz().b[1][1]++;
    }
    // Log significant metrics
    cov_tb2swjomz().s[16]++;
    if (this.isSignificantMetric(metric)) {
      /* istanbul ignore next */
      cov_tb2swjomz().b[2][0]++;
      cov_tb2swjomz().s[17]++;
      _logger.logger.info(`Metric: ${name}`, {
        value,
        unit,
        tags
      });
    } else
    /* istanbul ignore next */
    {
      cov_tb2swjomz().b[2][1]++;
    }
  }
  isSignificantMetric(metric) {
    /* istanbul ignore next */
    cov_tb2swjomz().f[5]++;
    cov_tb2swjomz().s[18]++;
    // Define what constitutes a significant metric worth logging
    switch (metric.name) {
      case 'api_response_time':
        /* istanbul ignore next */
        cov_tb2swjomz().b[3][0]++;
        cov_tb2swjomz().s[19]++;
        return metric.value > 1000;
      // Log slow API responses (>1s)
      case 'database_query_time':
        /* istanbul ignore next */
        cov_tb2swjomz().b[3][1]++;
        cov_tb2swjomz().s[20]++;
        return metric.value > 500;
      // Log slow database queries (>500ms)
      case 'memory_usage':
        /* istanbul ignore next */
        cov_tb2swjomz().b[3][2]++;
        cov_tb2swjomz().s[21]++;
        return metric.value > 500 * 1024 * 1024;
      // Log high memory usage (>500MB)
      case 'error_count':
        /* istanbul ignore next */
        cov_tb2swjomz().b[3][3]++;
        cov_tb2swjomz().s[22]++;
        return metric.value > 0;
      // Log all errors
      default:
        /* istanbul ignore next */
        cov_tb2swjomz().b[3][4]++;
        cov_tb2swjomz().s[23]++;
        return false;
    }
  }
  // Timing utilities
  startTimer(name) {
    /* istanbul ignore next */
    cov_tb2swjomz().f[6]++;
    const startTime =
    /* istanbul ignore next */
    (cov_tb2swjomz().s[24]++, Date.now());
    /* istanbul ignore next */
    cov_tb2swjomz().s[25]++;
    return () => {
      /* istanbul ignore next */
      cov_tb2swjomz().f[7]++;
      const duration =
      /* istanbul ignore next */
      (cov_tb2swjomz().s[26]++, Date.now() - startTime);
      /* istanbul ignore next */
      cov_tb2swjomz().s[27]++;
      this.recordMetric(name, duration, 'ms');
    };
  }
  // Database monitoring
  recordDatabaseQuery(queryType, duration, success) {
    /* istanbul ignore next */
    cov_tb2swjomz().f[8]++;
    cov_tb2swjomz().s[28]++;
    this.recordMetric('database_query_time', duration, 'ms', {
      queryType,
      success: success.toString()
    });
    /* istanbul ignore next */
    cov_tb2swjomz().s[29]++;
    if (!success) {
      /* istanbul ignore next */
      cov_tb2swjomz().b[4][0]++;
      cov_tb2swjomz().s[30]++;
      this.recordMetric('database_error_count', 1, 'count', {
        queryType
      });
    } else
    /* istanbul ignore next */
    {
      cov_tb2swjomz().b[4][1]++;
    }
  }
  // API monitoring
  recordApiRequest(method, path, statusCode, duration) {
    /* istanbul ignore next */
    cov_tb2swjomz().f[9]++;
    cov_tb2swjomz().s[31]++;
    this.recordMetric('api_response_time', duration, 'ms', {
      method,
      path,
      statusCode: statusCode.toString()
    });
    /* istanbul ignore next */
    cov_tb2swjomz().s[32]++;
    this.recordMetric('api_request_count', 1, 'count', {
      method,
      path,
      statusCode: statusCode.toString()
    });
    /* istanbul ignore next */
    cov_tb2swjomz().s[33]++;
    if (statusCode >= 400) {
      /* istanbul ignore next */
      cov_tb2swjomz().b[5][0]++;
      cov_tb2swjomz().s[34]++;
      this.recordMetric('api_error_count', 1, 'count', {
        method,
        path,
        statusCode: statusCode.toString()
      });
    } else
    /* istanbul ignore next */
    {
      cov_tb2swjomz().b[5][1]++;
    }
  }
  // Memory monitoring
  recordMemoryUsage() {
    /* istanbul ignore next */
    cov_tb2swjomz().f[10]++;
    cov_tb2swjomz().s[35]++;
    if (typeof process !== 'undefined') {
      /* istanbul ignore next */
      cov_tb2swjomz().b[6][0]++;
      const memUsage =
      /* istanbul ignore next */
      (cov_tb2swjomz().s[36]++, process.memoryUsage());
      /* istanbul ignore next */
      cov_tb2swjomz().s[37]++;
      this.recordMetric('memory_heap_used', memUsage.heapUsed, 'bytes');
      /* istanbul ignore next */
      cov_tb2swjomz().s[38]++;
      this.recordMetric('memory_heap_total', memUsage.heapTotal, 'bytes');
      /* istanbul ignore next */
      cov_tb2swjomz().s[39]++;
      this.recordMetric('memory_rss', memUsage.rss, 'bytes');
    } else
    /* istanbul ignore next */
    {
      cov_tb2swjomz().b[6][1]++;
    }
  }
  // Get current metrics summary
  getMetricsSummary() {
    /* istanbul ignore next */
    cov_tb2swjomz().f[11]++;
    const recentMetrics =
    /* istanbul ignore next */
    (cov_tb2swjomz().s[40]++, this.metrics.slice(-50)); // Last 50 metrics
    // Calculate database metrics
    const dbQueries =
    /* istanbul ignore next */
    (cov_tb2swjomz().s[41]++, this.metrics.filter(m => {
      /* istanbul ignore next */
      cov_tb2swjomz().f[12]++;
      cov_tb2swjomz().s[42]++;
      return m.name === 'database_query_time';
    }));
    const dbErrors =
    /* istanbul ignore next */
    (cov_tb2swjomz().s[43]++, this.metrics.filter(m => {
      /* istanbul ignore next */
      cov_tb2swjomz().f[13]++;
      cov_tb2swjomz().s[44]++;
      return m.name === 'database_error_count';
    }));
    // Calculate application metrics
    const apiRequests =
    /* istanbul ignore next */
    (cov_tb2swjomz().s[45]++, this.metrics.filter(m => {
      /* istanbul ignore next */
      cov_tb2swjomz().f[14]++;
      cov_tb2swjomz().s[46]++;
      return m.name === 'api_request_count';
    }));
    const apiErrors =
    /* istanbul ignore next */
    (cov_tb2swjomz().s[47]++, this.metrics.filter(m => {
      /* istanbul ignore next */
      cov_tb2swjomz().f[15]++;
      cov_tb2swjomz().s[48]++;
      return m.name === 'api_error_count';
    }));
    const responseTimes =
    /* istanbul ignore next */
    (cov_tb2swjomz().s[49]++, this.metrics.filter(m => {
      /* istanbul ignore next */
      cov_tb2swjomz().f[16]++;
      cov_tb2swjomz().s[50]++;
      return m.name === 'api_response_time';
    }));
    const avgResponseTime =
    /* istanbul ignore next */
    (cov_tb2swjomz().s[51]++, responseTimes.length > 0 ?
    /* istanbul ignore next */
    (cov_tb2swjomz().b[7][0]++, responseTimes.reduce((sum, m) => {
      /* istanbul ignore next */
      cov_tb2swjomz().f[17]++;
      cov_tb2swjomz().s[52]++;
      return sum + m.value;
    }, 0) / responseTimes.length) :
    /* istanbul ignore next */
    (cov_tb2swjomz().b[7][1]++, 0));
    /* istanbul ignore next */
    cov_tb2swjomz().s[53]++;
    return {
      database: {
        queryCount: dbQueries.length,
        slowQueries: dbQueries.filter(m => {
          /* istanbul ignore next */
          cov_tb2swjomz().f[18]++;
          cov_tb2swjomz().s[54]++;
          return m.value > 500;
        }).length
      },
      application: {
        requestCount: apiRequests.length,
        errorCount: apiErrors.length,
        averageResponseTime: avgResponseTime,
        memoryUsage: typeof process !== 'undefined' ?
        /* istanbul ignore next */
        (cov_tb2swjomz().b[8][0]++, process.memoryUsage()) :
        /* istanbul ignore next */
        (cov_tb2swjomz().b[8][1]++, undefined)
      },
      recent: recentMetrics
    };
  }
  // Export metrics for external monitoring systems
  exportMetrics() {
    /* istanbul ignore next */
    cov_tb2swjomz().f[19]++;
    cov_tb2swjomz().s[55]++;
    return [...this.metrics];
  }
  // Clear metrics (useful for testing)
  clearMetrics() {
    /* istanbul ignore next */
    cov_tb2swjomz().f[20]++;
    cov_tb2swjomz().s[56]++;
    this.metrics = [];
  }
}
const monitoring =
/* istanbul ignore next */
(cov_tb2swjomz().s[57]++, new MonitoringService());
function withMonitoring(handler, routeName) {
  /* istanbul ignore next */
  cov_tb2swjomz().f[21]++;
  cov_tb2swjomz().s[58]++;
  return async (...args) => {
    /* istanbul ignore next */
    cov_tb2swjomz().f[22]++;
    const startTime =
    /* istanbul ignore next */
    (cov_tb2swjomz().s[59]++, Date.now());
    const request =
    /* istanbul ignore next */
    (cov_tb2swjomz().s[60]++, args[0]);
    /* istanbul ignore next */
    cov_tb2swjomz().s[61]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_tb2swjomz().s[62]++, await handler(...args));
      const duration =
      /* istanbul ignore next */
      (cov_tb2swjomz().s[63]++, Date.now() - startTime);
      /* istanbul ignore next */
      cov_tb2swjomz().s[64]++;
      monitoring.recordApiRequest(request.method, routeName, response.status, duration);
      /* istanbul ignore next */
      cov_tb2swjomz().s[65]++;
      return response;
    } catch (error) {
      const duration =
      /* istanbul ignore next */
      (cov_tb2swjomz().s[66]++, Date.now() - startTime);
      /* istanbul ignore next */
      cov_tb2swjomz().s[67]++;
      monitoring.recordApiRequest(request.method, routeName, 500, duration);
      /* istanbul ignore next */
      cov_tb2swjomz().s[68]++;
      throw error;
    }
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,