{"version":3,"names":["PlantsGridExample","onPlantSelect","className","cov_1jka2k68wf","b","f","user","s","_UserProvider","useUser","notification","setNotification","_react","useState","logCareMutation","_usePlantInstances","useLogCare","bulkOperationMutation","useBulkPlantInstanceOperation","_jsxruntime","jsx","handleCareAction","plant","action","mutateAsync","data","plantInstanceId","id","fertilizerDate","Date","displayName","repotDate","notes","error","console","setTimeout","handleBulkAction","plants","plantInstanceIds","map","operation","length","jsxs","_plants","PlantsGrid","userId","onCareAction","onBulkAction","showSearch","showFilters","cardSize","isPending"],"sources":["/Users/stefanbekker/projects/fancy-planties/src/components/plants/PlantsGridExample.tsx"],"sourcesContent":["'use client';\n\nimport { useState } from 'react';\nimport { useUser } from '@/components/auth/UserProvider';\nimport { PlantsGrid } from '@/components/plants';\nimport { useLogCare, useBulkPlantInstanceOperation } from '@/hooks/usePlantInstances';\nimport type { EnhancedPlantInstance } from '@/lib/types/plant-instance-types';\n\ninterface PlantsGridExampleProps {\n  onPlantSelect?: (plant: EnhancedPlantInstance) => void;\n  className?: string;\n}\n\nexport default function PlantsGridExample({ \n  onPlantSelect,\n  className = '' \n}: PlantsGridExampleProps) {\n  const { user } = useUser();\n  const [notification, setNotification] = useState<string | null>(null);\n  \n  const logCareMutation = useLogCare();\n  const bulkOperationMutation = useBulkPlantInstanceOperation();\n\n  if (!user) {\n    return (\n      <div className=\"flex-center py-12\">\n        <p className=\"text-gray-600\">Please sign in to view your plants.</p>\n      </div>\n    );\n  }\n\n  // Handle care actions\n  const handleCareAction = async (plant: EnhancedPlantInstance, action: 'fertilize' | 'repot') => {\n    try {\n      if (action === 'fertilize') {\n        await logCareMutation.mutateAsync({\n          action: 'fertilize',\n          data: {\n            plantInstanceId: plant.id,\n            fertilizerDate: new Date(),\n          },\n        });\n        setNotification(`✅ Fertilized ${plant.displayName}`);\n      } else if (action === 'repot') {\n        await logCareMutation.mutateAsync({\n          action: 'repot',\n          data: {\n            plantInstanceId: plant.id,\n            repotDate: new Date(),\n            notes: 'Repotted via quick action',\n          },\n        });\n        setNotification(`🪴 Repotted ${plant.displayName}`);\n      }\n    } catch (error) {\n      console.error('Failed to log care action:', error);\n      setNotification(`❌ Failed to log ${action} for ${plant.displayName}`);\n    }\n\n    // Clear notification after 3 seconds\n    setTimeout(() => setNotification(null), 3000);\n  };\n\n  // Handle bulk actions\n  const handleBulkAction = async (plants: EnhancedPlantInstance[], action: string) => {\n    try {\n      const plantInstanceIds = plants.map(plant => plant.id);\n      \n      if (action === 'fertilize') {\n        await bulkOperationMutation.mutateAsync({\n          plantInstanceIds,\n          operation: 'fertilize',\n          fertilizerDate: new Date(),\n        });\n        setNotification(`✅ Fertilized ${plants.length} plants`);\n      } else if (action === 'deactivate') {\n        await bulkOperationMutation.mutateAsync({\n          plantInstanceIds,\n          operation: 'deactivate',\n        });\n        setNotification(`📦 Archived ${plants.length} plants`);\n      }\n    } catch (error) {\n      console.error('Failed to perform bulk action:', error);\n      setNotification(`❌ Failed to ${action} selected plants`);\n    }\n\n    // Clear notification after 3 seconds\n    setTimeout(() => setNotification(null), 3000);\n  };\n\n  return (\n    <div className={`relative ${className}`}>\n      {/* Notification Toast */}\n      {notification && (\n        <div className=\"fixed top-4 right-4 z-50 bg-white border border-gray-200 rounded-lg shadow-lg p-3 max-w-sm\">\n          <p className=\"text-sm text-gray-900\">{notification}</p>\n        </div>\n      )}\n\n      {/* Plants Grid */}\n      <PlantsGrid\n        userId={user.id}\n        onPlantSelect={onPlantSelect}\n        onCareAction={handleCareAction}\n        onBulkAction={handleBulkAction}\n        showSearch={true}\n        showFilters={true}\n        cardSize=\"medium\"\n        className=\"h-full\"\n      />\n\n      {/* Loading overlay for mutations */}\n      {(logCareMutation.isPending || bulkOperationMutation.isPending) && (\n        <div className=\"loading-overlay z-40\">\n          <div className=\"bg-white rounded-lg shadow-lg p-4 flex items-center space-x-3\">\n            <div className=\"spinner spinner--primary\" />\n            <span className=\"text-sm text-gray-700\">\n              {logCareMutation.isPending ? 'Logging care...' : 'Processing...'}\n            </span>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}"],"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","ignoreList":[]}