{"version":3,"sources":["/Users/stefanbekker/projects/fancy-planties/src/__tests__/database/care-data-queries.test.js"],"sourcesContent":["/**\n * Care Data Database Query Tests\n * Tests care record creation, retrieval, care history aggregation, and statistics\n */\n\nimport { CareHistoryQueries } from '../../lib/db/queries/care-history';\nimport { PlantQueries } from '../../lib/db/queries/plants';\nimport { PlantInstanceQueries } from '../../lib/db/queries/plant-instances';\nimport { createDatabaseTestManager } from '../../test-utils/setup/database-test-manager';\nimport { \n  createTestCareRecord,\n  createTestFertilizerRecord,\n  createTestWateringRecord,\n  createTestRepottingRecord,\n  createTestCareHistory,\n  createRealisticCareSchedule,\n  resetCareCounter\n} from '../../test-utils/factories/care-factory';\nimport { createTestUser } from '../../test-utils/factories/user-factory';\nimport { createTestPlant, createTestPlantInstance } from '../../test-utils/factories/plant-factory';\n\ndescribe('Care Data Database Queries', () => {\n  let dbManager;\n\n  beforeEach(() => {\n    dbManager = createDatabaseTestManager();\n    resetCareCounter();\n  });\n\n  afterEach(async () => {\n    await dbManager.cleanup();\n  });\n\n  describe('Care Record CRUD Operations', () => {\n    test('should create a new care record', async () => {\n      const testUser = createTestUser();\n      const createdUser = await dbManager.createTestUser(testUser);\n\n      const plant = createTestPlant({ createdBy: createdUser.id });\n      const createdPlant = await dbManager.createTestPlant(plant);\n\n      const plantInstance = createTestPlantInstance({\n        userId: createdUser.id,\n        plantId: createdPlant.id,\n      });\n      const createdInstance = await dbManager.createTestPlantInstance(plantInstance);\n\n      const careData = {\n        userId: createdUser.id,\n        plantInstanceId: createdInstance.id,\n        careType: 'fertilizer',\n        careDate: new Date(),\n        notes: 'Applied balanced liquid fertilizer',\n        fertilizerType: 'Balanced liquid fertilizer (10-10-10)',\n        images: [],\n      };\n\n      const careRecord = await CareHistoryQueries.createCareHistory(careData);\n\n      expect(careRecord).toBeDefined();\n      expect(careRecord.id).toBeDefined();\n      expect(careRecord.userId).toBe(createdUser.id);\n      expect(careRecord.plantInstanceId).toBe(createdInstance.id);\n      expect(careRecord.careType).toBe('fertilizer');\n      expect(careRecord.notes).toBe('Applied balanced liquid fertilizer');\n      expect(careRecord.fertilizerType).toBe('Balanced liquid fertilizer (10-10-10)');\n      expect(careRecord.createdAt).toBeInstanceOf(Date);\n      expect(careRecord.updatedAt).toBeInstanceOf(Date);\n    });\n\n    test('should retrieve care record by ID', async () => {\n      const testUser = createTestUser();\n      const createdUser = await dbManager.createTestUser(testUser);\n\n      const plant = createTestPlant({ createdBy: createdUser.id });\n      const createdPlant = await PlantQueries.create(plant);\n\n      const plantInstance = createTestPlantInstance({\n        userId: createdUser.id,\n        plantId: createdPlant.id,\n      });\n      const createdInstance = await PlantInstanceQueries.create(plantInstance);\n\n      const careData = createTestCareRecord({\n        userId: createdUser.id,\n        plantInstanceId: createdInstance.id,\n      });\n\n      const createdCare = await CareHistoryQueries.createCareHistory(careData);\n      const foundCare = await CareHistoryQueries.getCareHistoryById(createdCare.id);\n\n      expect(foundCare).toBeDefined();\n      expect(foundCare.id).toBe(createdCare.id);\n      expect(foundCare.careType).toBe(createdCare.careType);\n      expect(foundCare.notes).toBe(createdCare.notes);\n    });\n\n    test('should return null for non-existent care record ID', async () => {\n      const careRecord = await CareHistoryQueries.getCareHistoryById(99999);\n      expect(careRecord).toBeNull();\n    });\n\n    test('should update care record', async () => {\n      const testUser = createTestUser();\n      const createdUser = await dbManager.createTestUser(testUser);\n\n      const plant = createTestPlant({ createdBy: createdUser.id });\n      const createdPlant = await PlantQueries.create(plant);\n\n      const plantInstance = createTestPlantInstance({\n        userId: createdUser.id,\n        plantId: createdPlant.id,\n      });\n      const createdInstance = await PlantInstanceQueries.create(plantInstance);\n\n      const careData = createTestCareRecord({\n        userId: createdUser.id,\n        plantInstanceId: createdInstance.id,\n      });\n\n      const createdCare = await CareHistoryQueries.createCareHistory(careData);\n\n      const updates = {\n        notes: 'Updated care notes',\n        fertilizerType: 'Updated fertilizer type',\n      };\n\n      const updatedCare = await CareHistoryQueries.updateCareHistory(\n        createdCare.id,\n        createdUser.id,\n        updates\n      );\n\n      expect(updatedCare).toBeDefined();\n      expect(updatedCare.notes).toBe('Updated care notes');\n      expect(updatedCare.fertilizerType).toBe('Updated fertilizer type');\n      expect(updatedCare.updatedAt.getTime()).toBeGreaterThan(createdCare.updatedAt.getTime());\n    });\n\n    test('should delete care record', async () => {\n      const testUser = createTestUser();\n      const createdUser = await dbManager.createTestUser(testUser);\n\n      const plant = createTestPlant({ createdBy: createdUser.id });\n      const createdPlant = await PlantQueries.create(plant);\n\n      const plantInstance = createTestPlantInstance({\n        userId: createdUser.id,\n        plantId: createdPlant.id,\n      });\n      const createdInstance = await PlantInstanceQueries.create(plantInstance);\n\n      const careData = createTestCareRecord({\n        userId: createdUser.id,\n        plantInstanceId: createdInstance.id,\n      });\n\n      const createdCare = await CareHistoryQueries.createCareHistory(careData);\n\n      const deleted = await CareHistoryQueries.deleteCareHistory(createdCare.id, createdUser.id);\n      expect(deleted).toBe(true);\n\n      const foundCare = await CareHistoryQueries.getCareHistoryById(createdCare.id);\n      expect(foundCare).toBeNull();\n    });\n  });\n\n  describe('Care History Retrieval and Filtering', () => {\n    test('should get care history for a specific plant instance', async () => {\n      const testUser = createTestUser();\n      const createdUser = await dbManager.createTestUser(testUser);\n\n      const plant = createTestPlant({ createdBy: createdUser.id });\n      const createdPlant = await PlantQueries.create(plant);\n\n      const plantInstance = createTestPlantInstance({\n        userId: createdUser.id,\n        plantId: createdPlant.id,\n      });\n      const createdInstance = await PlantInstanceQueries.create(plantInstance);\n\n      // Create multiple care records\n      const careRecords = [\n        createTestCareRecord({\n          userId: createdUser.id,\n          plantInstanceId: createdInstance.id,\n          careType: 'fertilizer',\n        }),\n        createTestCareRecord({\n          userId: createdUser.id,\n          plantInstanceId: createdInstance.id,\n          careType: 'water',\n        }),\n        createTestCareRecord({\n          userId: createdUser.id,\n          plantInstanceId: createdInstance.id,\n          careType: 'prune',\n        }),\n      ];\n\n      for (const care of careRecords) {\n        await CareHistoryQueries.createCareHistory(care);\n      }\n\n      const history = await CareHistoryQueries.getCareHistoryForPlant(\n        createdInstance.id,\n        createdUser.id\n      );\n\n      expect(history.length).toBe(3);\n      expect(history.every(h => h.plantInstanceId === createdInstance.id)).toBe(true);\n      expect(history.every(h => h.userId === createdUser.id)).toBe(true);\n    });\n\n    test('should filter care history by care type', async () => {\n      const testUser = createTestUser();\n      const createdUser = await dbManager.createTestUser(testUser);\n\n      const plant = createTestPlant({ createdBy: createdUser.id });\n      const createdPlant = await PlantQueries.create(plant);\n\n      const plantInstance = createTestPlantInstance({\n        userId: createdUser.id,\n        plantId: createdPlant.id,\n      });\n      const createdInstance = await PlantInstanceQueries.create(plantInstance);\n\n      // Create care records of different types\n      const fertilizerCare = createTestCareRecord({\n        userId: createdUser.id,\n        plantInstanceId: createdInstance.id,\n        careType: 'fertilizer',\n      });\n\n      const waterCare = createTestCareRecord({\n        userId: createdUser.id,\n        plantInstanceId: createdInstance.id,\n        careType: 'water',\n      });\n\n      await CareHistoryQueries.createCareHistory(fertilizerCare);\n      await CareHistoryQueries.createCareHistory(waterCare);\n\n      // Filter by fertilizer type\n      const fertilizerHistory = await CareHistoryQueries.getCareHistoryForPlant(\n        createdInstance.id,\n        createdUser.id,\n        { careType: 'fertilizer' }\n      );\n\n      expect(fertilizerHistory.length).toBe(1);\n      expect(fertilizerHistory[0].careType).toBe('fertilizer');\n    });\n\n    test('should filter care history by date range', async () => {\n      const testUser = createTestUser();\n      const createdUser = await dbManager.createTestUser(testUser);\n\n      const plant = createTestPlant({ createdBy: createdUser.id });\n      const createdPlant = await PlantQueries.create(plant);\n\n      const plantInstance = createTestPlantInstance({\n        userId: createdUser.id,\n        plantId: createdPlant.id,\n      });\n      const createdInstance = await PlantInstanceQueries.create(plantInstance);\n\n      const now = new Date();\n      const oneWeekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n      const twoWeeksAgo = new Date(now.getTime() - 14 * 24 * 60 * 60 * 1000);\n\n      // Create care records with different dates\n      const recentCare = createTestCareRecord({\n        userId: createdUser.id,\n        plantInstanceId: createdInstance.id,\n        careDate: now,\n      });\n\n      const oldCare = createTestCareRecord({\n        userId: createdUser.id,\n        plantInstanceId: createdInstance.id,\n        careDate: twoWeeksAgo,\n      });\n\n      await CareHistoryQueries.createCareHistory(recentCare);\n      await CareHistoryQueries.createCareHistory(oldCare);\n\n      // Filter by date range (last week)\n      const recentHistory = await CareHistoryQueries.getCareHistoryForPlant(\n        createdInstance.id,\n        createdUser.id,\n        { \n          startDate: oneWeekAgo,\n          endDate: now \n        }\n      );\n\n      expect(recentHistory.length).toBe(1);\n      expect(recentHistory[0].careDate.getTime()).toBeGreaterThanOrEqual(oneWeekAgo.getTime());\n    });\n\n    test('should get recent care history for user', async () => {\n      const testUser = createTestUser();\n      const createdUser = await dbManager.createTestUser(testUser);\n\n      const plant = createTestPlant({ createdBy: createdUser.id });\n      const createdPlant = await PlantQueries.create(plant);\n\n      // Create multiple plant instances\n      const instance1 = createTestPlantInstance({\n        userId: createdUser.id,\n        plantId: createdPlant.id,\n      });\n      const instance2 = createTestPlantInstance({\n        userId: createdUser.id,\n        plantId: createdPlant.id,\n      });\n\n      const createdInstance1 = await PlantInstanceQueries.create(instance1);\n      const createdInstance2 = await PlantInstanceQueries.create(instance2);\n\n      // Create care records for both instances\n      const care1 = createTestCareRecord({\n        userId: createdUser.id,\n        plantInstanceId: createdInstance1.id,\n      });\n\n      const care2 = createTestCareRecord({\n        userId: createdUser.id,\n        plantInstanceId: createdInstance2.id,\n      });\n\n      await CareHistoryQueries.createCareHistory(care1);\n      await CareHistoryQueries.createCareHistory(care2);\n\n      const recentHistory = await CareHistoryQueries.getRecentCareHistory(createdUser.id, 10);\n\n      expect(recentHistory.length).toBe(2);\n      expect(recentHistory.every(h => h.userId === createdUser.id)).toBe(true);\n      // Should be sorted by date (most recent first)\n      expect(recentHistory[0].careDate.getTime()).toBeGreaterThanOrEqual(recentHistory[1].careDate.getTime());\n    });\n  });\n\n  describe('Care Statistics and Aggregation', () => {\n    test('should get care history count for plant instance', async () => {\n      const testUser = createTestUser();\n      const createdUser = await dbManager.createTestUser(testUser);\n\n      const plant = createTestPlant({ createdBy: createdUser.id });\n      const createdPlant = await PlantQueries.create(plant);\n\n      const plantInstance = createTestPlantInstance({\n        userId: createdUser.id,\n        plantId: createdPlant.id,\n      });\n      const createdInstance = await PlantInstanceQueries.create(plantInstance);\n\n      // Create multiple care records\n      const careRecords = [\n        createTestCareRecord({\n          userId: createdUser.id,\n          plantInstanceId: createdInstance.id,\n          careType: 'fertilizer',\n        }),\n        createTestCareRecord({\n          userId: createdUser.id,\n          plantInstanceId: createdInstance.id,\n          careType: 'fertilizer',\n        }),\n        createTestCareRecord({\n          userId: createdUser.id,\n          plantInstanceId: createdInstance.id,\n          careType: 'water',\n        }),\n      ];\n\n      for (const care of careRecords) {\n        await CareHistoryQueries.createCareHistory(care);\n      }\n\n      // Get total count\n      const totalCount = await CareHistoryQueries.getCareHistoryCount(\n        createdInstance.id,\n        createdUser.id\n      );\n      expect(totalCount).toBe(3);\n\n      // Get count by care type\n      const fertilizerCount = await CareHistoryQueries.getCareHistoryCount(\n        createdInstance.id,\n        createdUser.id,\n        'fertilizer'\n      );\n      expect(fertilizerCount).toBe(2);\n\n      const waterCount = await CareHistoryQueries.getCareHistoryCount(\n        createdInstance.id,\n        createdUser.id,\n        'water'\n      );\n      expect(waterCount).toBe(1);\n    });\n\n    test('should get last care date for specific care type', async () => {\n      const testUser = createTestUser();\n      const createdUser = await dbManager.createTestUser(testUser);\n\n      const plant = createTestPlant({ createdBy: createdUser.id });\n      const createdPlant = await PlantQueries.create(plant);\n\n      const plantInstance = createTestPlantInstance({\n        userId: createdUser.id,\n        plantId: createdPlant.id,\n      });\n      const createdInstance = await PlantInstanceQueries.create(plantInstance);\n\n      const now = new Date();\n      const yesterday = new Date(now.getTime() - 24 * 60 * 60 * 1000);\n\n      // Create care records with different dates\n      const oldFertilizer = createTestCareRecord({\n        userId: createdUser.id,\n        plantInstanceId: createdInstance.id,\n        careType: 'fertilizer',\n        careDate: yesterday,\n      });\n\n      const recentFertilizer = createTestCareRecord({\n        userId: createdUser.id,\n        plantInstanceId: createdInstance.id,\n        careType: 'fertilizer',\n        careDate: now,\n      });\n\n      await CareHistoryQueries.createCareHistory(oldFertilizer);\n      await CareHistoryQueries.createCareHistory(recentFertilizer);\n\n      const lastFertilizerDate = await CareHistoryQueries.getLastCareDate(\n        createdInstance.id,\n        createdUser.id,\n        'fertilizer'\n      );\n\n      expect(lastFertilizerDate).toBeDefined();\n      expect(lastFertilizerDate.getTime()).toBe(now.getTime());\n    });\n\n    test('should return null for care type with no history', async () => {\n      const testUser = createTestUser();\n      const createdUser = await dbManager.createTestUser(testUser);\n\n      const plant = createTestPlant({ createdBy: createdUser.id });\n      const createdPlant = await PlantQueries.create(plant);\n\n      const plantInstance = createTestPlantInstance({\n        userId: createdUser.id,\n        plantId: createdPlant.id,\n      });\n      const createdInstance = await PlantInstanceQueries.create(plantInstance);\n\n      const lastRepotDate = await CareHistoryQueries.getLastCareDate(\n        createdInstance.id,\n        createdUser.id,\n        'repot'\n      );\n\n      expect(lastRepotDate).toBeNull();\n    });\n\n    test('should get care dashboard data for user', async () => {\n      const testUser = createTestUser();\n      const createdUser = await dbManager.createTestUser(testUser);\n\n      const plant = createTestPlant({ createdBy: createdUser.id });\n      const createdPlant = await PlantQueries.create(plant);\n\n      // Create plant instances with different care statuses\n      const overdueInstance = createTestPlantInstance({\n        userId: createdUser.id,\n        plantId: createdPlant.id,\n        fertilizerDue: new Date(Date.now() - 24 * 60 * 60 * 1000), // 1 day overdue\n        isActive: true,\n      });\n\n      const dueTodayInstance = createTestPlantInstance({\n        userId: createdUser.id,\n        plantId: createdPlant.id,\n        fertilizerDue: new Date(), // Due today\n        isActive: true,\n      });\n\n      const dueSoonInstance = createTestPlantInstance({\n        userId: createdUser.id,\n        plantId: createdPlant.id,\n        fertilizerDue: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000), // Due in 3 days\n        isActive: true,\n      });\n\n      await PlantInstanceQueries.create(overdueInstance);\n      await PlantInstanceQueries.create(dueTodayInstance);\n      await PlantInstanceQueries.create(dueSoonInstance);\n\n      const dashboardData = await CareHistoryQueries.getCareDashboardData(createdUser.id);\n\n      expect(dashboardData).toBeDefined();\n      expect(dashboardData.statistics).toBeDefined();\n      expect(dashboardData.statistics.totalActivePlants).toBe(3);\n      expect(dashboardData.overdue.length).toBeGreaterThanOrEqual(1);\n      expect(dashboardData.dueToday.length).toBeGreaterThanOrEqual(1);\n      expect(dashboardData.dueSoon.length).toBeGreaterThanOrEqual(1);\n    });\n  });\n\n  describe('Bulk Operations', () => {\n    test('should bulk create care history entries', async () => {\n      const testUser = createTestUser();\n      const createdUser = await dbManager.createTestUser(testUser);\n\n      const plant = createTestPlant({ createdBy: createdUser.id });\n      const createdPlant = await PlantQueries.create(plant);\n\n      const plantInstance = createTestPlantInstance({\n        userId: createdUser.id,\n        plantId: createdPlant.id,\n      });\n      const createdInstance = await PlantInstanceQueries.create(plantInstance);\n\n      const careEntries = [\n        {\n          userId: createdUser.id,\n          plantInstanceId: createdInstance.id,\n          careType: 'fertilizer',\n          careDate: new Date(),\n          notes: 'Bulk fertilizer 1',\n        },\n        {\n          userId: createdUser.id,\n          plantInstanceId: createdInstance.id,\n          careType: 'water',\n          careDate: new Date(),\n          notes: 'Bulk water 1',\n        },\n        {\n          userId: createdUser.id,\n          plantInstanceId: createdInstance.id,\n          careType: 'prune',\n          careDate: new Date(),\n          notes: 'Bulk prune 1',\n        },\n      ];\n\n      const createdEntries = await CareHistoryQueries.bulkCreateCareHistory(careEntries);\n\n      expect(createdEntries.length).toBe(3);\n      expect(createdEntries.every(entry => entry.id)).toBe(true);\n      expect(createdEntries.every(entry => entry.userId === createdUser.id)).toBe(true);\n    });\n\n    test('should handle empty bulk create gracefully', async () => {\n      const result = await CareHistoryQueries.bulkCreateCareHistory([]);\n      expect(result).toEqual([]);\n    });\n\n    test('should get care history for multiple plant instances', async () => {\n      const testUser = createTestUser();\n      const createdUser = await dbManager.createTestUser(testUser);\n\n      const plant = createTestPlant({ createdBy: createdUser.id });\n      const createdPlant = await PlantQueries.create(plant);\n\n      // Create multiple plant instances\n      const instance1 = createTestPlantInstance({\n        userId: createdUser.id,\n        plantId: createdPlant.id,\n      });\n      const instance2 = createTestPlantInstance({\n        userId: createdUser.id,\n        plantId: createdPlant.id,\n      });\n\n      const createdInstance1 = await PlantInstanceQueries.create(instance1);\n      const createdInstance2 = await PlantInstanceQueries.create(instance2);\n\n      // Create care records for both instances\n      const care1 = createTestCareRecord({\n        userId: createdUser.id,\n        plantInstanceId: createdInstance1.id,\n      });\n\n      const care2 = createTestCareRecord({\n        userId: createdUser.id,\n        plantInstanceId: createdInstance2.id,\n      });\n\n      await CareHistoryQueries.createCareHistory(care1);\n      await CareHistoryQueries.createCareHistory(care2);\n\n      const plantInstanceIds = [createdInstance1.id, createdInstance2.id];\n      const history = await CareHistoryQueries.getCareHistoryForPlants(\n        plantInstanceIds,\n        createdUser.id\n      );\n\n      expect(history.length).toBe(2);\n      expect(history.every(h => plantInstanceIds.includes(h.plantInstanceId))).toBe(true);\n    });\n  });\n\n  describe('Care Type Specific Operations', () => {\n    test('should create fertilizer care record with specific data', async () => {\n      const testUser = createTestUser();\n      const createdUser = await dbManager.createTestUser(testUser);\n\n      const plant = createTestPlant({ createdBy: createdUser.id });\n      const createdPlant = await PlantQueries.create(plant);\n\n      const plantInstance = createTestPlantInstance({\n        userId: createdUser.id,\n        plantId: createdPlant.id,\n      });\n      const createdInstance = await PlantInstanceQueries.create(plantInstance);\n\n      const fertilizerCare = {\n        userId: createdUser.id,\n        plantInstanceId: createdInstance.id,\n        careType: 'fertilizer',\n        careDate: new Date(),\n        notes: 'Applied balanced liquid fertilizer at half strength',\n        fertilizerType: 'Balanced liquid fertilizer (10-10-10)',\n        images: [],\n      };\n\n      const createdCare = await CareHistoryQueries.createCareHistory(fertilizerCare);\n\n      expect(createdCare.careType).toBe('fertilizer');\n      expect(createdCare.fertilizerType).toBe('Balanced liquid fertilizer (10-10-10)');\n      expect(createdCare.potSize).toBeNull();\n      expect(createdCare.soilType).toBeNull();\n    });\n\n    test('should create repotting care record with specific data', async () => {\n      const testUser = createTestUser();\n      const createdUser = await dbManager.createTestUser(testUser);\n\n      const plant = createTestPlant({ createdBy: createdUser.id });\n      const createdPlant = await PlantQueries.create(plant);\n\n      const plantInstance = createTestPlantInstance({\n        userId: createdUser.id,\n        plantId: createdPlant.id,\n      });\n      const createdInstance = await PlantInstanceQueries.create(plantInstance);\n\n      const repotCare = {\n        userId: createdUser.id,\n        plantInstanceId: createdInstance.id,\n        careType: 'repot',\n        careDate: new Date(),\n        notes: 'Repotted into larger container with fresh soil',\n        potSize: '8 inch',\n        soilType: 'Standard potting mix',\n        images: [],\n      };\n\n      const createdCare = await CareHistoryQueries.createCareHistory(repotCare);\n\n      expect(createdCare.careType).toBe('repot');\n      expect(createdCare.potSize).toBe('8 inch');\n      expect(createdCare.soilType).toBe('Standard potting mix');\n      expect(createdCare.fertilizerType).toBeNull();\n    });\n\n    test('should create water care record', async () => {\n      const testUser = createTestUser();\n      const createdUser = await dbManager.createTestUser(testUser);\n\n      const plant = createTestPlant({ createdBy: createdUser.id });\n      const createdPlant = await PlantQueries.create(plant);\n\n      const plantInstance = createTestPlantInstance({\n        userId: createdUser.id,\n        plantId: createdPlant.id,\n      });\n      const createdInstance = await PlantInstanceQueries.create(plantInstance);\n\n      const waterCare = {\n        userId: createdUser.id,\n        plantInstanceId: createdInstance.id,\n        careType: 'water',\n        careDate: new Date(),\n        notes: 'Watered thoroughly until water drained from bottom',\n        images: [],\n      };\n\n      const createdCare = await CareHistoryQueries.createCareHistory(waterCare);\n\n      expect(createdCare.careType).toBe('water');\n      expect(createdCare.notes).toBe('Watered thoroughly until water drained from bottom');\n      expect(createdCare.fertilizerType).toBeNull();\n      expect(createdCare.potSize).toBeNull();\n      expect(createdCare.soilType).toBeNull();\n    });\n  });\n\n  describe('Error Handling and Edge Cases', () => {\n    test('should handle non-existent plant instance in care operations', async () => {\n      const testUser = createTestUser();\n      const createdUser = await dbManager.createTestUser(testUser);\n\n      const careData = createTestCareRecord({\n        userId: createdUser.id,\n        plantInstanceId: 99999, // Non-existent\n      });\n\n      // Should not crash, but may fail due to foreign key constraint\n      await expect(CareHistoryQueries.createCareHistory(careData))\n        .rejects.toThrow();\n    });\n\n    test('should handle unauthorized care record access', async () => {\n      const testUser1 = createTestUser({ email: 'user1@example.com' });\n      const testUser2 = createTestUser({ email: 'user2@example.com' });\n      const createdUser1 = await dbManager.createTestUser(testUser1);\n      const createdUser2 = await dbManager.createTestUser(testUser2);\n\n      const plant = createTestPlant({ createdBy: createdUser1.id });\n      const createdPlant = await PlantQueries.create(plant);\n\n      const plantInstance = createTestPlantInstance({\n        userId: createdUser1.id,\n        plantId: createdPlant.id,\n      });\n      const createdInstance = await PlantInstanceQueries.create(plantInstance);\n\n      const careData = createTestCareRecord({\n        userId: createdUser1.id,\n        plantInstanceId: createdInstance.id,\n      });\n\n      const createdCare = await CareHistoryQueries.createCareHistory(careData);\n\n      // User 2 should not be able to update User 1's care record\n      const updatedCare = await CareHistoryQueries.updateCareHistory(\n        createdCare.id,\n        createdUser2.id, // Different user\n        { notes: 'Unauthorized update' }\n      );\n\n      expect(updatedCare).toBeNull();\n    });\n\n    test('should handle invalid care type gracefully', async () => {\n      const testUser = createTestUser();\n      const createdUser = await dbManager.createTestUser(testUser);\n\n      const plant = createTestPlant({ createdBy: createdUser.id });\n      const createdPlant = await PlantQueries.create(plant);\n\n      const plantInstance = createTestPlantInstance({\n        userId: createdUser.id,\n        plantId: createdPlant.id,\n      });\n      const createdInstance = await PlantInstanceQueries.create(plantInstance);\n\n      const careData = {\n        userId: createdUser.id,\n        plantInstanceId: createdInstance.id,\n        careType: 'invalid_care_type', // Invalid\n        careDate: new Date(),\n        notes: 'Test notes',\n      };\n\n      // Should fail due to enum constraint\n      await expect(CareHistoryQueries.createCareHistory(careData))\n        .rejects.toThrow();\n    });\n\n    test('should handle empty care history queries', async () => {\n      const testUser = createTestUser();\n      const createdUser = await dbManager.createTestUser(testUser);\n\n      const plant = createTestPlant({ createdBy: createdUser.id });\n      const createdPlant = await PlantQueries.create(plant);\n\n      const plantInstance = createTestPlantInstance({\n        userId: createdUser.id,\n        plantId: createdPlant.id,\n      });\n      const createdInstance = await PlantInstanceQueries.create(plantInstance);\n\n      // No care records created\n      const history = await CareHistoryQueries.getCareHistoryForPlant(\n        createdInstance.id,\n        createdUser.id\n      );\n\n      expect(history).toEqual([]);\n\n      const count = await CareHistoryQueries.getCareHistoryCount(\n        createdInstance.id,\n        createdUser.id\n      );\n\n      expect(count).toBe(0);\n    });\n  });\n\n  describe('Performance and Concurrency', () => {\n    test('should handle concurrent care record creation', async () => {\n      const testUser = createTestUser();\n      const createdUser = await dbManager.createTestUser(testUser);\n\n      const plant = createTestPlant({ createdBy: createdUser.id });\n      const createdPlant = await PlantQueries.create(plant);\n\n      const plantInstance = createTestPlantInstance({\n        userId: createdUser.id,\n        plantId: createdPlant.id,\n      });\n      const createdInstance = await PlantInstanceQueries.create(plantInstance);\n\n      // Create multiple care records concurrently\n      const carePromises = Array.from({ length: 5 }, (_, index) => {\n        const careData = createTestCareRecord({\n          userId: createdUser.id,\n          plantInstanceId: createdInstance.id,\n          notes: `Concurrent care ${index}`,\n        });\n        return CareHistoryQueries.createCareHistory(careData);\n      });\n\n      const careRecords = await Promise.all(carePromises);\n      expect(careRecords.length).toBe(5);\n      expect(careRecords.every(c => c.id)).toBe(true);\n    });\n\n    test('should handle large care history efficiently', async () => {\n      const testUser = createTestUser();\n      const createdUser = await dbManager.createTestUser(testUser);\n\n      const plant = createTestPlant({ createdBy: createdUser.id });\n      const createdPlant = await PlantQueries.create(plant);\n\n      const plantInstance = createTestPlantInstance({\n        userId: createdUser.id,\n        plantId: createdPlant.id,\n      });\n      const createdInstance = await PlantInstanceQueries.create(plantInstance);\n\n      // Create many care records\n      const careEntries = Array.from({ length: 50 }, (_, index) => ({\n        userId: createdUser.id,\n        plantInstanceId: createdInstance.id,\n        careType: 'water',\n        careDate: new Date(Date.now() - index * 24 * 60 * 60 * 1000), // One per day\n        notes: `Daily water ${index}`,\n      }));\n\n      await CareHistoryQueries.bulkCreateCareHistory(careEntries);\n\n      const startTime = Date.now();\n      const history = await CareHistoryQueries.getCareHistoryForPlant(\n        createdInstance.id,\n        createdUser.id,\n        { limit: 20 }\n      );\n      const queryTime = Date.now() - startTime;\n\n      expect(history.length).toBe(20);\n      expect(queryTime).toBeLessThan(1000); // Should complete within 1 second\n    });\n  });\n});"],"names":["describe","dbManager","beforeEach","createDatabaseTestManager","resetCareCounter","afterEach","cleanup","test","testUser","createTestUser","createdUser","plant","createTestPlant","createdBy","id","createdPlant","plantInstance","createTestPlantInstance","userId","plantId","createdInstance","careData","plantInstanceId","careType","careDate","Date","notes","fertilizerType","images","careRecord","CareHistoryQueries","createCareHistory","expect","toBeDefined","toBe","createdAt","toBeInstanceOf","updatedAt","PlantQueries","create","PlantInstanceQueries","createTestCareRecord","createdCare","foundCare","getCareHistoryById","toBeNull","updates","updatedCare","updateCareHistory","getTime","toBeGreaterThan","deleted","deleteCareHistory","careRecords","care","history","getCareHistoryForPlant","length","every","h","fertilizerCare","waterCare","fertilizerHistory","now","oneWeekAgo","twoWeeksAgo","recentCare","oldCare","recentHistory","startDate","endDate","toBeGreaterThanOrEqual","instance1","instance2","createdInstance1","createdInstance2","care1","care2","getRecentCareHistory","totalCount","getCareHistoryCount","fertilizerCount","waterCount","yesterday","oldFertilizer","recentFertilizer","lastFertilizerDate","getLastCareDate","lastRepotDate","overdueInstance","fertilizerDue","isActive","dueTodayInstance","dueSoonInstance","dashboardData","getCareDashboardData","statistics","totalActivePlants","overdue","dueToday","dueSoon","careEntries","createdEntries","bulkCreateCareHistory","entry","result","toEqual","plantInstanceIds","getCareHistoryForPlants","includes","potSize","soilType","repotCare","rejects","toThrow","testUser1","email","testUser2","createdUser1","createdUser2","count","carePromises","Array","from","_","index","Promise","all","c","startTime","limit","queryTime","toBeLessThan"],"mappings":"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"}