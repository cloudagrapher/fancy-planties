d7eaf1b83a0e7992d383ab8c113aa49e
"use strict";

/* istanbul ignore next */
function cov_1wuefq0aln() {
  var path = "/Users/stefanbekker/projects/fancy-planties/src/lib/auth/middleware.ts";
  var hash = "4ece6f7b5571397d04c18cae4e10b23b6ddba1c2";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/stefanbekker/projects/fancy-planties/src/lib/auth/middleware.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 36,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 33
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 25
        }
      },
      "6": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 27
        }
      },
      "7": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 33
        }
      },
      "8": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 24
        }
      },
      "9": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 36
        }
      },
      "10": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 31,
          column: 34
        }
      },
      "11": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 34,
          column: 29
        }
      },
      "12": {
        start: {
          line: 37,
          column: 16
        },
        end: {
          line: 37,
          column: 38
        }
      },
      "13": {
        start: {
          line: 38,
          column: 17
        },
        end: {
          line: 38,
          column: 36
        }
      },
      "14": {
        start: {
          line: 40,
          column: 23
        },
        end: {
          line: 40,
          column: 32
        }
      },
      "15": {
        start: {
          line: 42,
          column: 26
        },
        end: {
          line: 42,
          column: 40
        }
      },
      "16": {
        start: {
          line: 43,
          column: 32
        },
        end: {
          line: 43,
          column: 35
        }
      },
      "17": {
        start: {
          line: 45,
          column: 4
        },
        end: {
          line: 45,
          column: 31
        }
      },
      "18": {
        start: {
          line: 49,
          column: 4
        },
        end: {
          line: 49,
          column: 34
        }
      },
      "19": {
        start: {
          line: 52,
          column: 16
        },
        end: {
          line: 52,
          column: 26
        }
      },
      "20": {
        start: {
          line: 54,
          column: 4
        },
        end: {
          line: 58,
          column: 5
        }
      },
      "21": {
        start: {
          line: 55,
          column: 8
        },
        end: {
          line: 57,
          column: 9
        }
      },
      "22": {
        start: {
          line: 56,
          column: 12
        },
        end: {
          line: 56,
          column: 39
        }
      },
      "23": {
        start: {
          line: 59,
          column: 20
        },
        end: {
          line: 59,
          column: 50
        }
      },
      "24": {
        start: {
          line: 60,
          column: 4
        },
        end: {
          line: 72,
          column: 5
        }
      },
      "25": {
        start: {
          line: 62,
          column: 26
        },
        end: {
          line: 62,
          column: 49
        }
      },
      "26": {
        start: {
          line: 63,
          column: 8
        },
        end: {
          line: 66,
          column: 11
        }
      },
      "27": {
        start: {
          line: 67,
          column: 8
        },
        end: {
          line: 71,
          column: 10
        }
      },
      "28": {
        start: {
          line: 73,
          column: 4
        },
        end: {
          line: 79,
          column: 5
        }
      },
      "29": {
        start: {
          line: 74,
          column: 8
        },
        end: {
          line: 78,
          column: 10
        }
      },
      "30": {
        start: {
          line: 80,
          column: 4
        },
        end: {
          line: 80,
          column: 20
        }
      },
      "31": {
        start: {
          line: 81,
          column: 4
        },
        end: {
          line: 81,
          column: 44
        }
      },
      "32": {
        start: {
          line: 82,
          column: 4
        },
        end: {
          line: 86,
          column: 6
        }
      },
      "33": {
        start: {
          line: 89,
          column: 4
        },
        end: {
          line: 106,
          column: 5
        }
      },
      "34": {
        start: {
          line: 90,
          column: 34
        },
        end: {
          line: 90,
          column: 71
        }
      },
      "35": {
        start: {
          line: 91,
          column: 8
        },
        end: {
          line: 97,
          column: 9
        }
      },
      "36": {
        start: {
          line: 92,
          column: 12
        },
        end: {
          line: 96,
          column: 15
        }
      },
      "37": {
        start: {
          line: 98,
          column: 8
        },
        end: {
          line: 98,
          column: 44
        }
      },
      "38": {
        start: {
          line: 100,
          column: 8
        },
        end: {
          line: 100,
          column: 55
        }
      },
      "39": {
        start: {
          line: 101,
          column: 8
        },
        end: {
          line: 105,
          column: 11
        }
      },
      "40": {
        start: {
          line: 109,
          column: 4
        },
        end: {
          line: 139,
          column: 5
        }
      },
      "41": {
        start: {
          line: 111,
          column: 27
        },
        end: {
          line: 111,
          column: 114
        }
      },
      "42": {
        start: {
          line: 112,
          column: 32
        },
        end: {
          line: 112,
          column: 53
        }
      },
      "43": {
        start: {
          line: 113,
          column: 8
        },
        end: {
          line: 125,
          column: 9
        }
      },
      "44": {
        start: {
          line: 114,
          column: 12
        },
        end: {
          line: 124,
          column: 15
        }
      },
      "45": {
        start: {
          line: 126,
          column: 25
        },
        end: {
          line: 126,
          column: 47
        }
      },
      "46": {
        start: {
          line: 128,
          column: 8
        },
        end: {
          line: 128,
          column: 86
        }
      },
      "47": {
        start: {
          line: 129,
          column: 8
        },
        end: {
          line: 129,
          column: 92
        }
      },
      "48": {
        start: {
          line: 130,
          column: 8
        },
        end: {
          line: 130,
          column: 88
        }
      },
      "49": {
        start: {
          line: 131,
          column: 8
        },
        end: {
          line: 131,
          column: 24
        }
      },
      "50": {
        start: {
          line: 133,
          column: 8
        },
        end: {
          line: 133,
          column: 61
        }
      },
      "51": {
        start: {
          line: 134,
          column: 8
        },
        end: {
          line: 138,
          column: 11
        }
      },
      "52": {
        start: {
          line: 142,
          column: 4
        },
        end: {
          line: 144,
          column: 7
        }
      },
      "53": {
        start: {
          line: 143,
          column: 8
        },
        end: {
          line: 143,
          column: 38
        }
      },
      "54": {
        start: {
          line: 147,
          column: 4
        },
        end: {
          line: 178,
          column: 5
        }
      },
      "55": {
        start: {
          line: 149,
          column: 8
        },
        end: {
          line: 151,
          column: 9
        }
      },
      "56": {
        start: {
          line: 150,
          column: 12
        },
        end: {
          line: 150,
          column: 42
        }
      },
      "57": {
        start: {
          line: 152,
          column: 26
        },
        end: {
          line: 152,
          column: 61
        }
      },
      "58": {
        start: {
          line: 153,
          column: 30
        },
        end: {
          line: 153,
          column: 65
        }
      },
      "59": {
        start: {
          line: 154,
          column: 8
        },
        end: {
          line: 160,
          column: 9
        }
      },
      "60": {
        start: {
          line: 155,
          column: 12
        },
        end: {
          line: 159,
          column: 15
        }
      },
      "61": {
        start: {
          line: 163,
          column: 8
        },
        end: {
          line: 169,
          column: 9
        }
      },
      "62": {
        start: {
          line: 164,
          column: 12
        },
        end: {
          line: 168,
          column: 15
        }
      },
      "63": {
        start: {
          line: 170,
          column: 8
        },
        end: {
          line: 170,
          column: 38
        }
      },
      "64": {
        start: {
          line: 172,
          column: 8
        },
        end: {
          line: 172,
          column: 55
        }
      },
      "65": {
        start: {
          line: 173,
          column: 8
        },
        end: {
          line: 177,
          column: 11
        }
      },
      "66": {
        start: {
          line: 181,
          column: 30
        },
        end: {
          line: 181,
          column: 67
        }
      },
      "67": {
        start: {
          line: 182,
          column: 4
        },
        end: {
          line: 184,
          column: 5
        }
      },
      "68": {
        start: {
          line: 183,
          column: 8
        },
        end: {
          line: 183,
          column: 20
        }
      },
      "69": {
        start: {
          line: 185,
          column: 4
        },
        end: {
          line: 188,
          column: 6
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        },
        loc: {
          start: {
            line: 12,
            column: 29
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 21
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 18,
            column: 4
          },
          end: {
            line: 18,
            column: 5
          }
        },
        loc: {
          start: {
            line: 18,
            column: 23
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 18
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 21,
            column: 4
          },
          end: {
            line: 21,
            column: 5
          }
        },
        loc: {
          start: {
            line: 21,
            column: 29
          },
          end: {
            line: 23,
            column: 5
          }
        },
        line: 21
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 24,
            column: 4
          },
          end: {
            line: 24,
            column: 5
          }
        },
        loc: {
          start: {
            line: 24,
            column: 20
          },
          end: {
            line: 26,
            column: 5
          }
        },
        line: 24
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 27,
            column: 4
          },
          end: {
            line: 27,
            column: 5
          }
        },
        loc: {
          start: {
            line: 27,
            column: 32
          },
          end: {
            line: 29,
            column: 5
          }
        },
        line: 27
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 30,
            column: 4
          },
          end: {
            line: 30,
            column: 5
          }
        },
        loc: {
          start: {
            line: 30,
            column: 30
          },
          end: {
            line: 32,
            column: 5
          }
        },
        line: 30
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 33,
            column: 4
          },
          end: {
            line: 33,
            column: 5
          }
        },
        loc: {
          start: {
            line: 33,
            column: 25
          },
          end: {
            line: 35,
            column: 5
          }
        },
        line: 33
      },
      "9": {
        name: "generateCSRFToken",
        decl: {
          start: {
            line: 44,
            column: 9
          },
          end: {
            line: 44,
            column: 26
          }
        },
        loc: {
          start: {
            line: 44,
            column: 29
          },
          end: {
            line: 46,
            column: 1
          }
        },
        line: 44
      },
      "10": {
        name: "validateCSRFToken",
        decl: {
          start: {
            line: 47,
            column: 9
          },
          end: {
            line: 47,
            column: 26
          }
        },
        loc: {
          start: {
            line: 47,
            column: 48
          },
          end: {
            line: 50,
            column: 1
          }
        },
        line: 47
      },
      "11": {
        name: "rateLimit",
        decl: {
          start: {
            line: 51,
            column: 9
          },
          end: {
            line: 51,
            column: 18
          }
        },
        loc: {
          start: {
            line: 51,
            column: 31
          },
          end: {
            line: 87,
            column: 1
          }
        },
        line: 51
      },
      "12": {
        name: "withAuth",
        decl: {
          start: {
            line: 88,
            column: 15
          },
          end: {
            line: 88,
            column: 23
          }
        },
        loc: {
          start: {
            line: 88,
            column: 42
          },
          end: {
            line: 107,
            column: 1
          }
        },
        line: 88
      },
      "13": {
        name: "withRateLimit",
        decl: {
          start: {
            line: 108,
            column: 15
          },
          end: {
            line: 108,
            column: 28
          }
        },
        loc: {
          start: {
            line: 108,
            column: 47
          },
          end: {
            line: 140,
            column: 1
          }
        },
        line: 108
      },
      "14": {
        name: "withAuthAndRateLimit",
        decl: {
          start: {
            line: 141,
            column: 15
          },
          end: {
            line: 141,
            column: 35
          }
        },
        loc: {
          start: {
            line: 141,
            column: 54
          },
          end: {
            line: 145,
            column: 1
          }
        },
        line: 141
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 142,
            column: 34
          },
          end: {
            line: 142,
            column: 35
          }
        },
        loc: {
          start: {
            line: 142,
            column: 47
          },
          end: {
            line: 144,
            column: 5
          }
        },
        line: 142
      },
      "16": {
        name: "withCSRFProtection",
        decl: {
          start: {
            line: 146,
            column: 15
          },
          end: {
            line: 146,
            column: 33
          }
        },
        loc: {
          start: {
            line: 146,
            column: 52
          },
          end: {
            line: 179,
            column: 1
          }
        },
        line: 146
      },
      "17": {
        name: "requireAuth",
        decl: {
          start: {
            line: 180,
            column: 15
          },
          end: {
            line: 180,
            column: 26
          }
        },
        loc: {
          start: {
            line: 180,
            column: 29
          },
          end: {
            line: 189,
            column: 1
          }
        },
        line: 180
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 55,
            column: 8
          },
          end: {
            line: 57,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 55,
            column: 8
          },
          end: {
            line: 57,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 55
      },
      "1": {
        loc: {
          start: {
            line: 60,
            column: 4
          },
          end: {
            line: 72,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 60,
            column: 4
          },
          end: {
            line: 72,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 60
      },
      "2": {
        loc: {
          start: {
            line: 60,
            column: 8
          },
          end: {
            line: 60,
            column: 43
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 60,
            column: 8
          },
          end: {
            line: 60,
            column: 16
          }
        }, {
          start: {
            line: 60,
            column: 20
          },
          end: {
            line: 60,
            column: 43
          }
        }],
        line: 60
      },
      "3": {
        loc: {
          start: {
            line: 73,
            column: 4
          },
          end: {
            line: 79,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 73,
            column: 4
          },
          end: {
            line: 79,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 73
      },
      "4": {
        loc: {
          start: {
            line: 91,
            column: 8
          },
          end: {
            line: 97,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 91,
            column: 8
          },
          end: {
            line: 97,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 91
      },
      "5": {
        loc: {
          start: {
            line: 91,
            column: 12
          },
          end: {
            line: 91,
            column: 29
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 91,
            column: 12
          },
          end: {
            line: 91,
            column: 17
          }
        }, {
          start: {
            line: 91,
            column: 21
          },
          end: {
            line: 91,
            column: 29
          }
        }],
        line: 91
      },
      "6": {
        loc: {
          start: {
            line: 111,
            column: 27
          },
          end: {
            line: 111,
            column: 114
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 111,
            column: 27
          },
          end: {
            line: 111,
            column: 65
          }
        }, {
          start: {
            line: 111,
            column: 69
          },
          end: {
            line: 111,
            column: 101
          }
        }, {
          start: {
            line: 111,
            column: 105
          },
          end: {
            line: 111,
            column: 114
          }
        }],
        line: 111
      },
      "7": {
        loc: {
          start: {
            line: 113,
            column: 8
          },
          end: {
            line: 125,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 113,
            column: 8
          },
          end: {
            line: 125,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 113
      },
      "8": {
        loc: {
          start: {
            line: 149,
            column: 8
          },
          end: {
            line: 151,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 149,
            column: 8
          },
          end: {
            line: 151,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 149
      },
      "9": {
        loc: {
          start: {
            line: 154,
            column: 8
          },
          end: {
            line: 160,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 154,
            column: 8
          },
          end: {
            line: 160,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 154
      },
      "10": {
        loc: {
          start: {
            line: 154,
            column: 12
          },
          end: {
            line: 154,
            column: 40
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 154,
            column: 12
          },
          end: {
            line: 154,
            column: 22
          }
        }, {
          start: {
            line: 154,
            column: 26
          },
          end: {
            line: 154,
            column: 40
          }
        }],
        line: 154
      },
      "11": {
        loc: {
          start: {
            line: 163,
            column: 8
          },
          end: {
            line: 169,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 163,
            column: 8
          },
          end: {
            line: 169,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 163
      },
      "12": {
        loc: {
          start: {
            line: 182,
            column: 4
          },
          end: {
            line: 184,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 182,
            column: 4
          },
          end: {
            line: 184,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 182
      },
      "13": {
        loc: {
          start: {
            line: 182,
            column: 8
          },
          end: {
            line: 182,
            column: 25
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 182,
            column: 8
          },
          end: {
            line: 182,
            column: 13
          }
        }, {
          start: {
            line: 182,
            column: 17
          },
          end: {
            line: 182,
            column: 25
          }
        }],
        line: 182
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/stefanbekker/projects/fancy-planties/src/lib/auth/middleware.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport { validateRequest } from './server';\nimport type { User } from '../db/schema';\n\n// Rate limiting store (in production, use Redis or similar)\nconst rateLimitStore = new Map<string, { count: number; resetTime: number }>();\n\n// Rate limiting configuration\nconst RATE_LIMIT_WINDOW = 15 * 60 * 1000; // 15 minutes\nconst RATE_LIMIT_MAX_REQUESTS = 100; // Max requests per window\n\n// CSRF token generation and validation\nexport function generateCSRFToken(): string {\n  return crypto.randomUUID();\n}\n\nexport function validateCSRFToken(token: string, sessionToken: string): boolean {\n  // Simple CSRF validation - in production, use more sophisticated approach\n  return token === sessionToken;\n}\n\n// Rate limiting middleware\nexport function rateLimit(identifier: string): { success: boolean; remaining: number; resetTime: number } {\n  const now = Date.now();\n  \n  // Clean up old entries\n  for (const [key, value] of rateLimitStore.entries()) {\n    if (value.resetTime < now) {\n      rateLimitStore.delete(key);\n    }\n  }\n  \n  const current = rateLimitStore.get(identifier);\n  \n  if (!current || current.resetTime < now) {\n    // New window or expired window\n    const resetTime = now + RATE_LIMIT_WINDOW;\n    rateLimitStore.set(identifier, { count: 1, resetTime });\n    return {\n      success: true,\n      remaining: RATE_LIMIT_MAX_REQUESTS - 1,\n      resetTime,\n    };\n  }\n  \n  if (current.count >= RATE_LIMIT_MAX_REQUESTS) {\n    return {\n      success: false,\n      remaining: 0,\n      resetTime: current.resetTime,\n    };\n  }\n  \n  current.count++;\n  rateLimitStore.set(identifier, current);\n  \n  return {\n    success: true,\n    remaining: RATE_LIMIT_MAX_REQUESTS - current.count,\n    resetTime: current.resetTime,\n  };\n}\n\n// Authentication middleware for API routes\nexport async function withAuth(\n  request: NextRequest,\n  handler: (request: NextRequest, user: User) => Promise<NextResponse>\n): Promise<NextResponse> {\n  try {\n    const { user, session } = await validateRequest();\n    \n    if (!user || !session) {\n      return NextResponse.json(\n        { error: 'Unauthorized' },\n        { status: 401 }\n      );\n    }\n    \n    return await handler(request, user);\n  } catch (error) {\n    console.error('Auth middleware error:', error);\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    );\n  }\n}\n\n// Rate limiting middleware for API routes\nexport async function withRateLimit(\n  request: NextRequest,\n  handler: (request: NextRequest) => Promise<NextResponse>\n): Promise<NextResponse> {\n  try {\n    // Use IP address for rate limiting (in production, consider user ID for authenticated requests)\n    const identifier = request.headers.get('x-forwarded-for') || \n                      request.headers.get('x-real-ip') || \n                      'unknown';\n    \n    const rateLimitResult = rateLimit(identifier);\n    \n    if (!rateLimitResult.success) {\n      return NextResponse.json(\n        { \n          error: 'Too many requests',\n          resetTime: rateLimitResult.resetTime,\n        },\n        { \n          status: 429,\n          headers: {\n            'X-RateLimit-Limit': RATE_LIMIT_MAX_REQUESTS.toString(),\n            'X-RateLimit-Remaining': rateLimitResult.remaining.toString(),\n            'X-RateLimit-Reset': rateLimitResult.resetTime.toString(),\n          },\n        }\n      );\n    }\n    \n    const response = await handler(request);\n    \n    // Add rate limit headers to successful responses\n    response.headers.set('X-RateLimit-Limit', RATE_LIMIT_MAX_REQUESTS.toString());\n    response.headers.set('X-RateLimit-Remaining', rateLimitResult.remaining.toString());\n    response.headers.set('X-RateLimit-Reset', rateLimitResult.resetTime.toString());\n    \n    return response;\n  } catch (error) {\n    console.error('Rate limit middleware error:', error);\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    );\n  }\n}\n\n// Combined middleware for authenticated and rate-limited routes\nexport async function withAuthAndRateLimit(\n  request: NextRequest,\n  handler: (request: NextRequest, user: User) => Promise<NextResponse>\n): Promise<NextResponse> {\n  return withRateLimit(request, async (req) => {\n    return withAuth(req, handler);\n  });\n}\n\n// CSRF protection middleware\nexport async function withCSRFProtection(\n  request: NextRequest,\n  handler: (request: NextRequest) => Promise<NextResponse>\n): Promise<NextResponse> {\n  try {\n    // Skip CSRF for GET requests\n    if (request.method === 'GET') {\n      return await handler(request);\n    }\n    \n    const csrfToken = request.headers.get('x-csrf-token');\n    const sessionCookie = request.cookies.get('auth-session');\n    \n    if (!csrfToken || !sessionCookie) {\n      return NextResponse.json(\n        { error: 'CSRF token missing' },\n        { status: 403 }\n      );\n    }\n    \n    // In a real implementation, you'd validate the CSRF token properly\n    // For now, we'll just check that it exists\n    if (!validateCSRFToken(csrfToken, sessionCookie.value)) {\n      return NextResponse.json(\n        { error: 'Invalid CSRF token' },\n        { status: 403 }\n      );\n    }\n    \n    return await handler(request);\n  } catch (error) {\n    console.error('CSRF middleware error:', error);\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    );\n  }\n}\n\n// Route protection helper for pages\nexport async function requireAuth(): Promise<{ user: User; session: { id: string; userId: number; expiresAt: Date } } | null> {\n  const { user, session } = await validateRequest();\n  \n  if (!user || !session) {\n    return null;\n  }\n  \n  return { user, session };\n}"],
      names: ["generateCSRFToken", "rateLimit", "requireAuth", "validateCSRFToken", "withAuth", "withAuthAndRateLimit", "withCSRFProtection", "withRateLimit", "rateLimitStore", "Map", "RATE_LIMIT_WINDOW", "RATE_LIMIT_MAX_REQUESTS", "crypto", "randomUUID", "token", "sessionToken", "identifier", "now", "Date", "key", "value", "entries", "resetTime", "delete", "current", "get", "set", "count", "success", "remaining", "request", "handler", "user", "session", "validateRequest", "NextResponse", "json", "error", "status", "console", "headers", "rateLimitResult", "toString", "response", "req", "method", "csrfToken", "sessionCookie", "cookies"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "4ece6f7b5571397d04c18cae4e10b23b6ddba1c2"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1wuefq0aln = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1wuefq0aln();
cov_1wuefq0aln().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_1wuefq0aln().f[0]++;
  cov_1wuefq0aln().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_1wuefq0aln().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_1wuefq0aln().s[3]++;
_export(exports, {
  get generateCSRFToken() {
    /* istanbul ignore next */
    cov_1wuefq0aln().f[1]++;
    cov_1wuefq0aln().s[4]++;
    return generateCSRFToken;
  },
  get rateLimit() {
    /* istanbul ignore next */
    cov_1wuefq0aln().f[2]++;
    cov_1wuefq0aln().s[5]++;
    return rateLimit;
  },
  get requireAuth() {
    /* istanbul ignore next */
    cov_1wuefq0aln().f[3]++;
    cov_1wuefq0aln().s[6]++;
    return requireAuth;
  },
  get validateCSRFToken() {
    /* istanbul ignore next */
    cov_1wuefq0aln().f[4]++;
    cov_1wuefq0aln().s[7]++;
    return validateCSRFToken;
  },
  get withAuth() {
    /* istanbul ignore next */
    cov_1wuefq0aln().f[5]++;
    cov_1wuefq0aln().s[8]++;
    return withAuth;
  },
  get withAuthAndRateLimit() {
    /* istanbul ignore next */
    cov_1wuefq0aln().f[6]++;
    cov_1wuefq0aln().s[9]++;
    return withAuthAndRateLimit;
  },
  get withCSRFProtection() {
    /* istanbul ignore next */
    cov_1wuefq0aln().f[7]++;
    cov_1wuefq0aln().s[10]++;
    return withCSRFProtection;
  },
  get withRateLimit() {
    /* istanbul ignore next */
    cov_1wuefq0aln().f[8]++;
    cov_1wuefq0aln().s[11]++;
    return withRateLimit;
  }
});
const _server =
/* istanbul ignore next */
(cov_1wuefq0aln().s[12]++, require("next/server"));
const _server1 =
/* istanbul ignore next */
(cov_1wuefq0aln().s[13]++, require("./server"));
// Rate limiting store (in production, use Redis or similar)
const rateLimitStore =
/* istanbul ignore next */
(cov_1wuefq0aln().s[14]++, new Map());
// Rate limiting configuration
const RATE_LIMIT_WINDOW =
/* istanbul ignore next */
(cov_1wuefq0aln().s[15]++, 15 * 60 * 1000); // 15 minutes
const RATE_LIMIT_MAX_REQUESTS =
/* istanbul ignore next */
(cov_1wuefq0aln().s[16]++, 100); // Max requests per window
function generateCSRFToken() {
  /* istanbul ignore next */
  cov_1wuefq0aln().f[9]++;
  cov_1wuefq0aln().s[17]++;
  return crypto.randomUUID();
}
function validateCSRFToken(token, sessionToken) {
  /* istanbul ignore next */
  cov_1wuefq0aln().f[10]++;
  cov_1wuefq0aln().s[18]++;
  // Simple CSRF validation - in production, use more sophisticated approach
  return token === sessionToken;
}
function rateLimit(identifier) {
  /* istanbul ignore next */
  cov_1wuefq0aln().f[11]++;
  const now =
  /* istanbul ignore next */
  (cov_1wuefq0aln().s[19]++, Date.now());
  // Clean up old entries
  /* istanbul ignore next */
  cov_1wuefq0aln().s[20]++;
  for (const [key, value] of rateLimitStore.entries()) {
    /* istanbul ignore next */
    cov_1wuefq0aln().s[21]++;
    if (value.resetTime < now) {
      /* istanbul ignore next */
      cov_1wuefq0aln().b[0][0]++;
      cov_1wuefq0aln().s[22]++;
      rateLimitStore.delete(key);
    } else
    /* istanbul ignore next */
    {
      cov_1wuefq0aln().b[0][1]++;
    }
  }
  const current =
  /* istanbul ignore next */
  (cov_1wuefq0aln().s[23]++, rateLimitStore.get(identifier));
  /* istanbul ignore next */
  cov_1wuefq0aln().s[24]++;
  if (
  /* istanbul ignore next */
  (cov_1wuefq0aln().b[2][0]++, !current) ||
  /* istanbul ignore next */
  (cov_1wuefq0aln().b[2][1]++, current.resetTime < now)) {
    /* istanbul ignore next */
    cov_1wuefq0aln().b[1][0]++;
    // New window or expired window
    const resetTime =
    /* istanbul ignore next */
    (cov_1wuefq0aln().s[25]++, now + RATE_LIMIT_WINDOW);
    /* istanbul ignore next */
    cov_1wuefq0aln().s[26]++;
    rateLimitStore.set(identifier, {
      count: 1,
      resetTime
    });
    /* istanbul ignore next */
    cov_1wuefq0aln().s[27]++;
    return {
      success: true,
      remaining: RATE_LIMIT_MAX_REQUESTS - 1,
      resetTime
    };
  } else
  /* istanbul ignore next */
  {
    cov_1wuefq0aln().b[1][1]++;
  }
  cov_1wuefq0aln().s[28]++;
  if (current.count >= RATE_LIMIT_MAX_REQUESTS) {
    /* istanbul ignore next */
    cov_1wuefq0aln().b[3][0]++;
    cov_1wuefq0aln().s[29]++;
    return {
      success: false,
      remaining: 0,
      resetTime: current.resetTime
    };
  } else
  /* istanbul ignore next */
  {
    cov_1wuefq0aln().b[3][1]++;
  }
  cov_1wuefq0aln().s[30]++;
  current.count++;
  /* istanbul ignore next */
  cov_1wuefq0aln().s[31]++;
  rateLimitStore.set(identifier, current);
  /* istanbul ignore next */
  cov_1wuefq0aln().s[32]++;
  return {
    success: true,
    remaining: RATE_LIMIT_MAX_REQUESTS - current.count,
    resetTime: current.resetTime
  };
}
async function withAuth(request, handler) {
  /* istanbul ignore next */
  cov_1wuefq0aln().f[12]++;
  cov_1wuefq0aln().s[33]++;
  try {
    const {
      user,
      session
    } =
    /* istanbul ignore next */
    (cov_1wuefq0aln().s[34]++, await (0, _server1.validateRequest)());
    /* istanbul ignore next */
    cov_1wuefq0aln().s[35]++;
    if (
    /* istanbul ignore next */
    (cov_1wuefq0aln().b[5][0]++, !user) ||
    /* istanbul ignore next */
    (cov_1wuefq0aln().b[5][1]++, !session)) {
      /* istanbul ignore next */
      cov_1wuefq0aln().b[4][0]++;
      cov_1wuefq0aln().s[36]++;
      return _server.NextResponse.json({
        error: 'Unauthorized'
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_1wuefq0aln().b[4][1]++;
    }
    cov_1wuefq0aln().s[37]++;
    return await handler(request, user);
  } catch (error) {
    /* istanbul ignore next */
    cov_1wuefq0aln().s[38]++;
    console.error('Auth middleware error:', error);
    /* istanbul ignore next */
    cov_1wuefq0aln().s[39]++;
    return _server.NextResponse.json({
      error: 'Internal server error'
    }, {
      status: 500
    });
  }
}
async function withRateLimit(request, handler) {
  /* istanbul ignore next */
  cov_1wuefq0aln().f[13]++;
  cov_1wuefq0aln().s[40]++;
  try {
    // Use IP address for rate limiting (in production, consider user ID for authenticated requests)
    const identifier =
    /* istanbul ignore next */
    (cov_1wuefq0aln().s[41]++,
    /* istanbul ignore next */
    (cov_1wuefq0aln().b[6][0]++, request.headers.get('x-forwarded-for')) ||
    /* istanbul ignore next */
    (cov_1wuefq0aln().b[6][1]++, request.headers.get('x-real-ip')) ||
    /* istanbul ignore next */
    (cov_1wuefq0aln().b[6][2]++, 'unknown'));
    const rateLimitResult =
    /* istanbul ignore next */
    (cov_1wuefq0aln().s[42]++, rateLimit(identifier));
    /* istanbul ignore next */
    cov_1wuefq0aln().s[43]++;
    if (!rateLimitResult.success) {
      /* istanbul ignore next */
      cov_1wuefq0aln().b[7][0]++;
      cov_1wuefq0aln().s[44]++;
      return _server.NextResponse.json({
        error: 'Too many requests',
        resetTime: rateLimitResult.resetTime
      }, {
        status: 429,
        headers: {
          'X-RateLimit-Limit': RATE_LIMIT_MAX_REQUESTS.toString(),
          'X-RateLimit-Remaining': rateLimitResult.remaining.toString(),
          'X-RateLimit-Reset': rateLimitResult.resetTime.toString()
        }
      });
    } else
    /* istanbul ignore next */
    {
      cov_1wuefq0aln().b[7][1]++;
    }
    const response =
    /* istanbul ignore next */
    (cov_1wuefq0aln().s[45]++, await handler(request));
    // Add rate limit headers to successful responses
    /* istanbul ignore next */
    cov_1wuefq0aln().s[46]++;
    response.headers.set('X-RateLimit-Limit', RATE_LIMIT_MAX_REQUESTS.toString());
    /* istanbul ignore next */
    cov_1wuefq0aln().s[47]++;
    response.headers.set('X-RateLimit-Remaining', rateLimitResult.remaining.toString());
    /* istanbul ignore next */
    cov_1wuefq0aln().s[48]++;
    response.headers.set('X-RateLimit-Reset', rateLimitResult.resetTime.toString());
    /* istanbul ignore next */
    cov_1wuefq0aln().s[49]++;
    return response;
  } catch (error) {
    /* istanbul ignore next */
    cov_1wuefq0aln().s[50]++;
    console.error('Rate limit middleware error:', error);
    /* istanbul ignore next */
    cov_1wuefq0aln().s[51]++;
    return _server.NextResponse.json({
      error: 'Internal server error'
    }, {
      status: 500
    });
  }
}
async function withAuthAndRateLimit(request, handler) {
  /* istanbul ignore next */
  cov_1wuefq0aln().f[14]++;
  cov_1wuefq0aln().s[52]++;
  return withRateLimit(request, async req => {
    /* istanbul ignore next */
    cov_1wuefq0aln().f[15]++;
    cov_1wuefq0aln().s[53]++;
    return withAuth(req, handler);
  });
}
async function withCSRFProtection(request, handler) {
  /* istanbul ignore next */
  cov_1wuefq0aln().f[16]++;
  cov_1wuefq0aln().s[54]++;
  try {
    /* istanbul ignore next */
    cov_1wuefq0aln().s[55]++;
    // Skip CSRF for GET requests
    if (request.method === 'GET') {
      /* istanbul ignore next */
      cov_1wuefq0aln().b[8][0]++;
      cov_1wuefq0aln().s[56]++;
      return await handler(request);
    } else
    /* istanbul ignore next */
    {
      cov_1wuefq0aln().b[8][1]++;
    }
    const csrfToken =
    /* istanbul ignore next */
    (cov_1wuefq0aln().s[57]++, request.headers.get('x-csrf-token'));
    const sessionCookie =
    /* istanbul ignore next */
    (cov_1wuefq0aln().s[58]++, request.cookies.get('auth-session'));
    /* istanbul ignore next */
    cov_1wuefq0aln().s[59]++;
    if (
    /* istanbul ignore next */
    (cov_1wuefq0aln().b[10][0]++, !csrfToken) ||
    /* istanbul ignore next */
    (cov_1wuefq0aln().b[10][1]++, !sessionCookie)) {
      /* istanbul ignore next */
      cov_1wuefq0aln().b[9][0]++;
      cov_1wuefq0aln().s[60]++;
      return _server.NextResponse.json({
        error: 'CSRF token missing'
      }, {
        status: 403
      });
    } else
    /* istanbul ignore next */
    {
      cov_1wuefq0aln().b[9][1]++;
    }
    // In a real implementation, you'd validate the CSRF token properly
    // For now, we'll just check that it exists
    cov_1wuefq0aln().s[61]++;
    if (!validateCSRFToken(csrfToken, sessionCookie.value)) {
      /* istanbul ignore next */
      cov_1wuefq0aln().b[11][0]++;
      cov_1wuefq0aln().s[62]++;
      return _server.NextResponse.json({
        error: 'Invalid CSRF token'
      }, {
        status: 403
      });
    } else
    /* istanbul ignore next */
    {
      cov_1wuefq0aln().b[11][1]++;
    }
    cov_1wuefq0aln().s[63]++;
    return await handler(request);
  } catch (error) {
    /* istanbul ignore next */
    cov_1wuefq0aln().s[64]++;
    console.error('CSRF middleware error:', error);
    /* istanbul ignore next */
    cov_1wuefq0aln().s[65]++;
    return _server.NextResponse.json({
      error: 'Internal server error'
    }, {
      status: 500
    });
  }
}
async function requireAuth() {
  /* istanbul ignore next */
  cov_1wuefq0aln().f[17]++;
  const {
    user,
    session
  } =
  /* istanbul ignore next */
  (cov_1wuefq0aln().s[66]++, await (0, _server1.validateRequest)());
  /* istanbul ignore next */
  cov_1wuefq0aln().s[67]++;
  if (
  /* istanbul ignore next */
  (cov_1wuefq0aln().b[13][0]++, !user) ||
  /* istanbul ignore next */
  (cov_1wuefq0aln().b[13][1]++, !session)) {
    /* istanbul ignore next */
    cov_1wuefq0aln().b[12][0]++;
    cov_1wuefq0aln().s[68]++;
    return null;
  } else
  /* istanbul ignore next */
  {
    cov_1wuefq0aln().b[12][1]++;
  }
  cov_1wuefq0aln().s[69]++;
  return {
    user,
    session
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,