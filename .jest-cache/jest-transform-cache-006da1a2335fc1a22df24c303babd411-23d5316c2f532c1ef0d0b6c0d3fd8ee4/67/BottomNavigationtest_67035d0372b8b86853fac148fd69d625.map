{"version":3,"sources":["/Users/stefanbekker/projects/fancy-planties/src/__tests__/components/navigation/BottomNavigation.test.js"],"sourcesContent":["/**\n * @jest-environment jsdom\n */\n\nimport React from 'react';\nimport { render, screen, waitFor } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport BottomNavigation from '@/components/navigation/BottomNavigation';\n\n// Mock Next.js navigation\nconst mockPathname = jest.fn();\n\n// Mock usePathname hook specifically for this test\njest.mock('next/navigation', () => ({\n  usePathname: () => mockPathname(),\n  useRouter: () => ({\n    push: jest.fn(),\n    replace: jest.fn(),\n    back: jest.fn(),\n    forward: jest.fn(),\n    refresh: jest.fn(),\n    prefetch: jest.fn(),\n  }),\n  useSearchParams: () => new URLSearchParams(),\n}));\n\n// Mock haptic feedback hook\nconst mockTriggerHaptic = jest.fn();\n\njest.mock('@/hooks/useHapticFeedback', () => ({\n  useHapticFeedback: () => ({\n    triggerHaptic: mockTriggerHaptic,\n  }),\n}));\n\ndescribe('BottomNavigation', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    mockPathname.mockReturnValue('/dashboard');\n  });\n\n  describe('Navigation Rendering', () => {\n    it('renders all navigation items', () => {\n      render(<BottomNavigation />);\n\n      expect(screen.getByRole('link', { name: /navigate to plants/i })).toBeInTheDocument();\n      expect(screen.getByRole('link', { name: /navigate to care/i })).toBeInTheDocument();\n      expect(screen.getByRole('link', { name: /navigate to dashboard/i })).toBeInTheDocument();\n      expect(screen.getByRole('link', { name: /navigate to propagations/i })).toBeInTheDocument();\n      expect(screen.getByRole('link', { name: /navigate to handbook/i })).toBeInTheDocument();\n    });\n\n    it('renders navigation icons', () => {\n      render(<BottomNavigation />);\n\n      expect(screen.getByText('🌱')).toBeInTheDocument(); // Plants\n      expect(screen.getByText('💧')).toBeInTheDocument(); // Care\n      expect(screen.getByText('🏠')).toBeInTheDocument(); // Dashboard\n      expect(screen.getByText('🌿')).toBeInTheDocument(); // Propagations\n      expect(screen.getByText('📖')).toBeInTheDocument(); // Handbook\n    });\n\n    it('renders navigation labels', () => {\n      render(<BottomNavigation />);\n\n      expect(screen.getByText('Plants')).toBeInTheDocument();\n      expect(screen.getByText('Care')).toBeInTheDocument();\n      expect(screen.getByText('Dashboard')).toBeInTheDocument();\n      expect(screen.getByText('Propagations')).toBeInTheDocument();\n      expect(screen.getByText('Handbook')).toBeInTheDocument();\n    });\n\n    it('has proper navigation structure', () => {\n      render(<BottomNavigation />);\n\n      const nav = screen.getByRole('navigation');\n      expect(nav).toBeInTheDocument();\n      expect(nav).toHaveClass('bottom-nav');\n\n      const container = nav.querySelector('.bottom-nav-container');\n      expect(container).toBeInTheDocument();\n    });\n  });\n\n  describe('Active State Management', () => {\n    it('marks dashboard as active when on dashboard route', () => {\n      mockPathname.mockReturnValue('/dashboard');\n      render(<BottomNavigation />);\n\n      const dashboardLink = screen.getByRole('link', { name: /navigate to dashboard/i });\n      expect(dashboardLink).toHaveClass('bottom-nav-item--active');\n    });\n\n    it('marks plants as active when on plants route', () => {\n      mockPathname.mockReturnValue('/dashboard/plants');\n      render(<BottomNavigation />);\n\n      const plantsLink = screen.getByRole('link', { name: /navigate to plants/i });\n      expect(plantsLink).toHaveClass('bottom-nav-item--active');\n    });\n\n    it('marks care as active when on care route', () => {\n      mockPathname.mockReturnValue('/dashboard/care');\n      render(<BottomNavigation />);\n\n      const careLink = screen.getByRole('link', { name: /navigate to care/i });\n      expect(careLink).toHaveClass('bottom-nav-item--active');\n    });\n\n    it('marks propagations as active when on propagations route', () => {\n      mockPathname.mockReturnValue('/dashboard/propagations');\n      render(<BottomNavigation />);\n\n      const propagationsLink = screen.getByRole('link', { name: /navigate to propagations/i });\n      expect(propagationsLink).toHaveClass('bottom-nav-item--active');\n    });\n\n    it('marks handbook as active when on handbook route', () => {\n      mockPathname.mockReturnValue('/dashboard/handbook');\n      render(<BottomNavigation />);\n\n      const handbookLink = screen.getByRole('link', { name: /navigate to handbook/i });\n      expect(handbookLink).toHaveClass('bottom-nav-item--active');\n    });\n\n    it('handles nested routes correctly', () => {\n      mockPathname.mockReturnValue('/dashboard/plants/123');\n      render(<BottomNavigation />);\n\n      const plantsLink = screen.getByRole('link', { name: /navigate to plants/i });\n      expect(plantsLink).toHaveClass('bottom-nav-item--active');\n    });\n\n    it('only marks dashboard as active for exact dashboard route', () => {\n      mockPathname.mockReturnValue('/dashboard/plants');\n      render(<BottomNavigation />);\n\n      const dashboardLink = screen.getByRole('link', { name: /navigate to dashboard/i });\n      expect(dashboardLink).not.toHaveClass('bottom-nav-item--active');\n      expect(dashboardLink).toHaveClass('bottom-nav-item--inactive');\n    });\n\n    it('marks inactive items with inactive class', () => {\n      mockPathname.mockReturnValue('/dashboard/plants');\n      render(<BottomNavigation />);\n\n      const careLink = screen.getByRole('link', { name: /navigate to care/i });\n      const dashboardLink = screen.getByRole('link', { name: /navigate to dashboard/i });\n      const propagationsLink = screen.getByRole('link', { name: /navigate to propagations/i });\n\n      expect(careLink).toHaveClass('bottom-nav-item--inactive');\n      expect(dashboardLink).toHaveClass('bottom-nav-item--inactive');\n      expect(propagationsLink).toHaveClass('bottom-nav-item--inactive');\n    });\n  });\n\n  describe('Navigation Links', () => {\n    it('has correct href attributes', () => {\n      render(<BottomNavigation />);\n\n      expect(screen.getByRole('link', { name: /navigate to plants/i })).toHaveAttribute('href', '/dashboard/plants');\n      expect(screen.getByRole('link', { name: /navigate to care/i })).toHaveAttribute('href', '/dashboard/care');\n      expect(screen.getByRole('link', { name: /navigate to dashboard/i })).toHaveAttribute('href', '/dashboard');\n      expect(screen.getByRole('link', { name: /navigate to propagations/i })).toHaveAttribute('href', '/dashboard/propagations');\n      expect(screen.getByRole('link', { name: /navigate to handbook/i })).toHaveAttribute('href', '/dashboard/handbook');\n    });\n\n    it('has proper title attributes for tooltips', () => {\n      render(<BottomNavigation />);\n\n      expect(screen.getByRole('link', { name: /navigate to plants/i })).toHaveAttribute('title', 'Navigate to Plants');\n      expect(screen.getByRole('link', { name: /navigate to care/i })).toHaveAttribute('title', 'Navigate to Care');\n      expect(screen.getByRole('link', { name: /navigate to dashboard/i })).toHaveAttribute('title', 'Navigate to Dashboard');\n    });\n  });\n\n  describe('Care Notification Badge', () => {\n    it('does not show badge when no notifications', () => {\n      render(<BottomNavigation careNotificationCount={0} />);\n\n      expect(screen.queryByRole('status')).not.toBeInTheDocument();\n    });\n\n    it('shows badge with notification count', () => {\n      render(<BottomNavigation careNotificationCount={5} />);\n\n      const badge = screen.getByRole('status', { name: /5 notifications/i });\n      expect(badge).toBeInTheDocument();\n      expect(badge).toHaveTextContent('5');\n      expect(badge).toHaveClass('bottom-nav-badge');\n    });\n\n    it('shows 99+ for counts over 99', () => {\n      render(<BottomNavigation careNotificationCount={150} />);\n\n      const badge = screen.getByRole('status', { name: /150 notifications/i });\n      expect(badge).toHaveTextContent('99+');\n    });\n\n    it('updates care link aria-label with notification count', () => {\n      render(<BottomNavigation careNotificationCount={3} />);\n\n      const careLink = screen.getByRole('link', { name: /navigate to care \\(3 notifications\\)/i });\n      expect(careLink).toBeInTheDocument();\n      expect(careLink).toHaveAttribute('title', 'Navigate to Care (3 notifications)');\n    });\n\n    it('badge has proper accessibility attributes', () => {\n      render(<BottomNavigation careNotificationCount={7} />);\n\n      const badge = screen.getByRole('status');\n      expect(badge).toHaveAttribute('aria-label', '7 notifications');\n    });\n  });\n\n  describe('User Interactions', () => {\n    it('triggers haptic feedback on touch', async () => {\n      const user = userEvent.setup();\n      render(<BottomNavigation />);\n\n      const plantsLink = screen.getByRole('link', { name: /navigate to plants/i });\n      \n      // Simulate touch start\n      await user.pointer({ keys: '[TouchA>]', target: plantsLink });\n\n      expect(mockTriggerHaptic).toHaveBeenCalledWith('selection');\n    });\n\n    it('triggers haptic feedback on mouse down', async () => {\n      const user = userEvent.setup();\n      render(<BottomNavigation />);\n\n      const plantsLink = screen.getByRole('link', { name: /navigate to plants/i });\n      \n      // Simulate mouse down\n      await user.pointer({ keys: '[MouseLeft>]', target: plantsLink });\n\n      expect(mockTriggerHaptic).toHaveBeenCalledWith('selection');\n    });\n\n    it('applies pressed state temporarily', async () => {\n      const user = userEvent.setup();\n      render(<BottomNavigation />);\n\n      const plantsLink = screen.getByRole('link', { name: /navigate to plants/i });\n      \n      // Simulate touch start\n      await user.pointer({ keys: '[TouchA>]', target: plantsLink });\n\n      // Should have pressed class temporarily\n      expect(plantsLink).toHaveClass('bottom-nav-item--pressed');\n\n      // Wait for pressed state to be removed\n      await waitFor(() => {\n        expect(plantsLink).not.toHaveClass('bottom-nav-item--pressed');\n      }, { timeout: 200 });\n    });\n\n    it('handles multiple rapid taps correctly', async () => {\n      const user = userEvent.setup();\n      render(<BottomNavigation />);\n\n      const plantsLink = screen.getByRole('link', { name: /navigate to plants/i });\n      \n      // Rapid taps\n      await user.pointer({ keys: '[TouchA>]', target: plantsLink });\n      await user.pointer({ keys: '[TouchA>]', target: plantsLink });\n      await user.pointer({ keys: '[TouchA>]', target: plantsLink });\n\n      expect(mockTriggerHaptic).toHaveBeenCalledTimes(3);\n    });\n  });\n\n  describe('Accessibility', () => {\n    it('has proper navigation landmark', () => {\n      render(<BottomNavigation />);\n\n      const nav = screen.getByRole('navigation');\n      expect(nav).toBeInTheDocument();\n    });\n\n    it('has descriptive aria-labels for all links', () => {\n      render(<BottomNavigation />);\n\n      expect(screen.getByLabelText(/navigate to plants/i)).toBeInTheDocument();\n      expect(screen.getByLabelText(/navigate to care/i)).toBeInTheDocument();\n      expect(screen.getByLabelText(/navigate to dashboard/i)).toBeInTheDocument();\n      expect(screen.getByLabelText(/navigate to propagations/i)).toBeInTheDocument();\n      expect(screen.getByLabelText(/navigate to handbook/i)).toBeInTheDocument();\n    });\n\n    it('marks icons as decorative with aria-hidden', () => {\n      render(<BottomNavigation />);\n\n      const icons = screen.getAllByText(/[🌱💧🏠🌿📖]/);\n      icons.forEach(icon => {\n        expect(icon).toHaveAttribute('aria-hidden', 'true');\n      });\n    });\n\n    it('provides screen reader context for notification badges', () => {\n      render(<BottomNavigation careNotificationCount={5} />);\n\n      const badge = screen.getByRole('status');\n      expect(badge).toHaveAttribute('aria-label', '5 notifications');\n    });\n\n    it('supports keyboard navigation', async () => {\n      const user = userEvent.setup();\n      render(<BottomNavigation />);\n\n      // Tab through navigation items\n      await user.tab();\n      expect(screen.getByRole('link', { name: /navigate to plants/i })).toHaveFocus();\n\n      await user.tab();\n      expect(screen.getByRole('link', { name: /navigate to care/i })).toHaveFocus();\n\n      await user.tab();\n      expect(screen.getByRole('link', { name: /navigate to dashboard/i })).toHaveFocus();\n\n      await user.tab();\n      expect(screen.getByRole('link', { name: /navigate to propagations/i })).toHaveFocus();\n\n      await user.tab();\n      expect(screen.getByRole('link', { name: /navigate to handbook/i })).toHaveFocus();\n    });\n\n    it('supports Enter key activation', async () => {\n      const user = userEvent.setup();\n      render(<BottomNavigation />);\n\n      const plantsLink = screen.getByRole('link', { name: /navigate to plants/i });\n      plantsLink.focus();\n\n      await user.keyboard('{Enter}');\n\n      // Link should be activated (Next.js Link handles navigation)\n      expect(plantsLink).toHaveAttribute('href', '/dashboard/plants');\n    });\n  });\n\n  describe('Responsive Behavior', () => {\n    it('maintains consistent structure across screen sizes', () => {\n      render(<BottomNavigation />);\n\n      const nav = screen.getByRole('navigation');\n      const container = nav.querySelector('.bottom-nav-container');\n      const items = screen.getAllByRole('link');\n\n      expect(nav).toHaveClass('bottom-nav');\n      expect(container).toHaveClass('bottom-nav-container');\n      expect(items).toHaveLength(5);\n    });\n\n    it('preserves all navigation items on mobile', () => {\n      // Simulate mobile viewport\n      Object.defineProperty(window, 'innerWidth', {\n        writable: true,\n        configurable: true,\n        value: 375,\n      });\n\n      render(<BottomNavigation />);\n\n      const items = screen.getAllByRole('link');\n      expect(items).toHaveLength(5);\n    });\n  });\n\n  describe('State Consistency', () => {\n    it('maintains active state when component re-renders', () => {\n      mockPathname.mockReturnValue('/dashboard/plants');\n      const { rerender } = render(<BottomNavigation />);\n\n      let plantsLink = screen.getByRole('link', { name: /navigate to plants/i });\n      expect(plantsLink).toHaveClass('bottom-nav-item--active');\n\n      // Re-render with same pathname\n      rerender(<BottomNavigation />);\n\n      plantsLink = screen.getByRole('link', { name: /navigate to plants/i });\n      expect(plantsLink).toHaveClass('bottom-nav-item--active');\n    });\n\n    it('updates active state when pathname changes', () => {\n      mockPathname.mockReturnValue('/dashboard/plants');\n      const { rerender } = render(<BottomNavigation />);\n\n      let plantsLink = screen.getByRole('link', { name: /navigate to plants/i });\n      let careLink = screen.getByRole('link', { name: /navigate to care/i });\n      \n      expect(plantsLink).toHaveClass('bottom-nav-item--active');\n      expect(careLink).toHaveClass('bottom-nav-item--inactive');\n\n      // Change pathname\n      mockPathname.mockReturnValue('/dashboard/care');\n      rerender(<BottomNavigation />);\n\n      plantsLink = screen.getByRole('link', { name: /navigate to plants/i });\n      careLink = screen.getByRole('link', { name: /navigate to care/i });\n\n      expect(plantsLink).toHaveClass('bottom-nav-item--inactive');\n      expect(careLink).toHaveClass('bottom-nav-item--active');\n    });\n\n    it('updates notification badge when count changes', () => {\n      const { rerender } = render(<BottomNavigation careNotificationCount={3} />);\n\n      expect(screen.getByRole('status', { name: /3 notifications/i })).toBeInTheDocument();\n\n      // Update notification count\n      rerender(<BottomNavigation careNotificationCount={7} />);\n\n      expect(screen.getByRole('status', { name: /7 notifications/i })).toBeInTheDocument();\n      expect(screen.queryByRole('status', { name: /3 notifications/i })).not.toBeInTheDocument();\n    });\n\n    it('removes badge when notification count becomes zero', () => {\n      const { rerender } = render(<BottomNavigation careNotificationCount={5} />);\n\n      expect(screen.getByRole('status')).toBeInTheDocument();\n\n      // Set count to zero\n      rerender(<BottomNavigation careNotificationCount={0} />);\n\n      expect(screen.queryByRole('status')).not.toBeInTheDocument();\n    });\n  });\n});"],"names":["jest","mock","usePathname","mockPathname","useRouter","push","fn","replace","back","forward","refresh","prefetch","useSearchParams","URLSearchParams","useHapticFeedback","triggerHaptic","mockTriggerHaptic","describe","beforeEach","clearAllMocks","mockReturnValue","it","render","BottomNavigation","expect","screen","getByRole","name","toBeInTheDocument","getByText","nav","toHaveClass","container","querySelector","dashboardLink","plantsLink","careLink","propagationsLink","handbookLink","not","toHaveAttribute","careNotificationCount","queryByRole","badge","toHaveTextContent","user","userEvent","setup","pointer","keys","target","toHaveBeenCalledWith","waitFor","timeout","toHaveBeenCalledTimes","getByLabelText","icons","getAllByText","forEach","icon","tab","toHaveFocus","focus","keyboard","items","getAllByRole","toHaveLength","Object","defineProperty","window","writable","configurable","value","rerender"],"mappings":"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"}