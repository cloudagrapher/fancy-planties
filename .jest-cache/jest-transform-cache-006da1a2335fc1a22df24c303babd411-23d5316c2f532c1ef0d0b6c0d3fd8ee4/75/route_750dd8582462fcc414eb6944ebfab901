59b2f32966920f928c1360f1508e4824
"use strict";

/* istanbul ignore next */
function cov_108dws563y() {
  var path = "/Users/stefanbekker/projects/fancy-planties/src/app/api/plants/validate/route.ts";
  var hash = "7a11757f573f6bce7cae657474ebdd1504b41b62";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/stefanbekker/projects/fancy-planties/src/app/api/plants/validate/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 20
        }
      },
      "3": {
        start: {
          line: 11,
          column: 16
        },
        end: {
          line: 11,
          column: 38
        }
      },
      "4": {
        start: {
          line: 12,
          column: 17
        },
        end: {
          line: 12,
          column: 55
        }
      },
      "5": {
        start: {
          line: 13,
          column: 23
        },
        end: {
          line: 13,
          column: 75
        }
      },
      "6": {
        start: {
          line: 14,
          column: 22
        },
        end: {
          line: 14,
          column: 73
        }
      },
      "7": {
        start: {
          line: 15,
          column: 13
        },
        end: {
          line: 15,
          column: 27
        }
      },
      "8": {
        start: {
          line: 17,
          column: 4
        },
        end: {
          line: 53,
          column: 5
        }
      },
      "9": {
        start: {
          line: 18,
          column: 25
        },
        end: {
          line: 18,
          column: 62
        }
      },
      "10": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 25,
          column: 9
        }
      },
      "11": {
        start: {
          line: 20,
          column: 12
        },
        end: {
          line: 24,
          column: 15
        }
      },
      "12": {
        start: {
          line: 26,
          column: 21
        },
        end: {
          line: 26,
          column: 41
        }
      },
      "13": {
        start: {
          line: 27,
          column: 30
        },
        end: {
          line: 27,
          column: 75
        }
      },
      "14": {
        start: {
          line: 28,
          column: 27
        },
        end: {
          line: 28,
          column: 89
        }
      },
      "15": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 37,
          column: 11
        }
      },
      "16": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 39,
          column: 65
        }
      },
      "17": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 47,
          column: 9
        }
      },
      "18": {
        start: {
          line: 41,
          column: 12
        },
        end: {
          line: 46,
          column: 15
        }
      },
      "19": {
        start: {
          line: 48,
          column: 8
        },
        end: {
          line: 52,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "POST",
        decl: {
          start: {
            line: 16,
            column: 15
          },
          end: {
            line: 16,
            column: 19
          }
        },
        loc: {
          start: {
            line: 16,
            column: 29
          },
          end: {
            line: 54,
            column: 1
          }
        },
        line: 16
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 19,
            column: 8
          },
          end: {
            line: 25,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 19,
            column: 8
          },
          end: {
            line: 25,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 19
      },
      "1": {
        loc: {
          start: {
            line: 40,
            column: 8
          },
          end: {
            line: 47,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 40,
            column: 8
          },
          end: {
            line: 47,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 40
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0
    },
    f: {
      "0": 0,
      "1": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/stefanbekker/projects/fancy-planties/src/app/api/plants/validate/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport { validateRequest } from '@/lib/auth/server';\nimport { validatePlantTaxonomy } from '@/lib/db/queries/plant-taxonomy';\nimport { plantTaxonomySchema } from '@/lib/validation/plant-schemas';\nimport { ZodError } from 'zod';\n\n// POST /api/plants/validate - Validate plant taxonomy for duplicates and conflicts\nexport async function POST(request: NextRequest) {\n  try {\n    const { user } = await validateRequest();\n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const body = await request.json();\n    const validatedData = plantTaxonomySchema.parse(body);\n\n    const validation = await validatePlantTaxonomy(validatedData);\n\n    return NextResponse.json({\n      success: true,\n      data: validation,\n      metadata: {\n        operation: 'validate',\n        timestamp: new Date(),\n        userId: user.id,\n      },\n    });\n  } catch (error) {\n    console.error('Error validating plant taxonomy:', error);\n    \n    if (error instanceof ZodError) {\n      return NextResponse.json(\n        { \n          error: 'Invalid taxonomy data', \n          details: error.issues \n        }, \n        { status: 400 }\n      );\n    }\n\n    return NextResponse.json(\n      { error: 'Internal server error' }, \n      { status: 500 }\n    );\n  }\n}"],
      names: ["POST", "request", "user", "validateRequest", "NextResponse", "json", "error", "status", "body", "validatedData", "plantTaxonomySchema", "parse", "validation", "validatePlantTaxonomy", "success", "data", "metadata", "operation", "timestamp", "Date", "userId", "id", "console", "ZodError", "details", "issues"],
      mappings: ";;;;+BAOsBA;;;eAAAA;;;wBAPoB;yBACV;+BACM;8BACF;qBACX;AAGlB,eAAeA,KAAKC,OAAoB;IAC7C,IAAI;QACF,MAAM,EAAEC,IAAI,EAAE,GAAG,MAAMC,IAAAA,wBAAe;QACtC,IAAI,CAACD,MAAM;YACT,OAAOE,oBAAY,CAACC,IAAI,CAAC;gBAAEC,OAAO;YAAe,GAAG;gBAAEC,QAAQ;YAAI;QACpE;QAEA,MAAMC,OAAO,MAAMP,QAAQI,IAAI;QAC/B,MAAMI,gBAAgBC,iCAAmB,CAACC,KAAK,CAACH;QAEhD,MAAMI,aAAa,MAAMC,IAAAA,oCAAqB,EAACJ;QAE/C,OAAOL,oBAAY,CAACC,IAAI,CAAC;YACvBS,SAAS;YACTC,MAAMH;YACNI,UAAU;gBACRC,WAAW;gBACXC,WAAW,IAAIC;gBACfC,QAAQlB,KAAKmB,EAAE;YACjB;QACF;IACF,EAAE,OAAOf,OAAO;QACdgB,QAAQhB,KAAK,CAAC,oCAAoCA;QAElD,IAAIA,iBAAiBiB,aAAQ,EAAE;YAC7B,OAAOnB,oBAAY,CAACC,IAAI,CACtB;gBACEC,OAAO;gBACPkB,SAASlB,MAAMmB,MAAM;YACvB,GACA;gBAAElB,QAAQ;YAAI;QAElB;QAEA,OAAOH,oBAAY,CAACC,IAAI,CACtB;YAAEC,OAAO;QAAwB,GACjC;YAAEC,QAAQ;QAAI;IAElB;AACF"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "7a11757f573f6bce7cae657474ebdd1504b41b62"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_108dws563y = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_108dws563y();
cov_108dws563y().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_108dws563y().s[1]++;
Object.defineProperty(exports, "POST", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_108dws563y().f[0]++;
    cov_108dws563y().s[2]++;
    return POST;
  }
});
const _server =
/* istanbul ignore next */
(cov_108dws563y().s[3]++, require("next/server"));
const _server1 =
/* istanbul ignore next */
(cov_108dws563y().s[4]++, require("../../../../lib/auth/server"));
const _planttaxonomy =
/* istanbul ignore next */
(cov_108dws563y().s[5]++, require("../../../../lib/db/queries/plant-taxonomy"));
const _plantschemas =
/* istanbul ignore next */
(cov_108dws563y().s[6]++, require("../../../../lib/validation/plant-schemas"));
const _zod =
/* istanbul ignore next */
(cov_108dws563y().s[7]++, require("zod"));
async function POST(request) {
  /* istanbul ignore next */
  cov_108dws563y().f[1]++;
  cov_108dws563y().s[8]++;
  try {
    const {
      user
    } =
    /* istanbul ignore next */
    (cov_108dws563y().s[9]++, await (0, _server1.validateRequest)());
    /* istanbul ignore next */
    cov_108dws563y().s[10]++;
    if (!user) {
      /* istanbul ignore next */
      cov_108dws563y().b[0][0]++;
      cov_108dws563y().s[11]++;
      return _server.NextResponse.json({
        error: 'Unauthorized'
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_108dws563y().b[0][1]++;
    }
    const body =
    /* istanbul ignore next */
    (cov_108dws563y().s[12]++, await request.json());
    const validatedData =
    /* istanbul ignore next */
    (cov_108dws563y().s[13]++, _plantschemas.plantTaxonomySchema.parse(body));
    const validation =
    /* istanbul ignore next */
    (cov_108dws563y().s[14]++, await (0, _planttaxonomy.validatePlantTaxonomy)(validatedData));
    /* istanbul ignore next */
    cov_108dws563y().s[15]++;
    return _server.NextResponse.json({
      success: true,
      data: validation,
      metadata: {
        operation: 'validate',
        timestamp: new Date(),
        userId: user.id
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_108dws563y().s[16]++;
    console.error('Error validating plant taxonomy:', error);
    /* istanbul ignore next */
    cov_108dws563y().s[17]++;
    if (error instanceof _zod.ZodError) {
      /* istanbul ignore next */
      cov_108dws563y().b[1][0]++;
      cov_108dws563y().s[18]++;
      return _server.NextResponse.json({
        error: 'Invalid taxonomy data',
        details: error.issues
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_108dws563y().b[1][1]++;
    }
    cov_108dws563y().s[19]++;
    return _server.NextResponse.json({
      error: 'Internal server error'
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMTA4ZHdzNTYzeSIsImFjdHVhbENvdmVyYWdlIiwicyIsIlBPU1QiLCJyZXF1ZXN0IiwiZiIsInVzZXIiLCJfc2VydmVyMSIsInZhbGlkYXRlUmVxdWVzdCIsImIiLCJfc2VydmVyIiwiTmV4dFJlc3BvbnNlIiwianNvbiIsImVycm9yIiwic3RhdHVzIiwiYm9keSIsInZhbGlkYXRlZERhdGEiLCJfcGxhbnRzY2hlbWFzIiwicGxhbnRUYXhvbm9teVNjaGVtYSIsInBhcnNlIiwidmFsaWRhdGlvbiIsIl9wbGFudHRheG9ub215IiwidmFsaWRhdGVQbGFudFRheG9ub215Iiwic3VjY2VzcyIsImRhdGEiLCJtZXRhZGF0YSIsIm9wZXJhdGlvbiIsInRpbWVzdGFtcCIsIkRhdGUiLCJ1c2VySWQiLCJpZCIsImNvbnNvbGUiLCJfem9kIiwiWm9kRXJyb3IiLCJkZXRhaWxzIiwiaXNzdWVzIl0sInNvdXJjZXMiOlsiL1VzZXJzL3N0ZWZhbmJla2tlci9wcm9qZWN0cy9mYW5jeS1wbGFudGllcy9zcmMvYXBwL2FwaS9wbGFudHMvdmFsaWRhdGUvcm91dGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmV4dFJlcXVlc3QsIE5leHRSZXNwb25zZSB9IGZyb20gJ25leHQvc2VydmVyJztcbmltcG9ydCB7IHZhbGlkYXRlUmVxdWVzdCB9IGZyb20gJ0AvbGliL2F1dGgvc2VydmVyJztcbmltcG9ydCB7IHZhbGlkYXRlUGxhbnRUYXhvbm9teSB9IGZyb20gJ0AvbGliL2RiL3F1ZXJpZXMvcGxhbnQtdGF4b25vbXknO1xuaW1wb3J0IHsgcGxhbnRUYXhvbm9teVNjaGVtYSB9IGZyb20gJ0AvbGliL3ZhbGlkYXRpb24vcGxhbnQtc2NoZW1hcyc7XG5pbXBvcnQgeyBab2RFcnJvciB9IGZyb20gJ3pvZCc7XG5cbi8vIFBPU1QgL2FwaS9wbGFudHMvdmFsaWRhdGUgLSBWYWxpZGF0ZSBwbGFudCB0YXhvbm9teSBmb3IgZHVwbGljYXRlcyBhbmQgY29uZmxpY3RzXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gUE9TVChyZXF1ZXN0OiBOZXh0UmVxdWVzdCkge1xuICB0cnkge1xuICAgIGNvbnN0IHsgdXNlciB9ID0gYXdhaXQgdmFsaWRhdGVSZXF1ZXN0KCk7XG4gICAgaWYgKCF1c2VyKSB7XG4gICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oeyBlcnJvcjogJ1VuYXV0aG9yaXplZCcgfSwgeyBzdGF0dXM6IDQwMSB9KTtcbiAgICB9XG5cbiAgICBjb25zdCBib2R5ID0gYXdhaXQgcmVxdWVzdC5qc29uKCk7XG4gICAgY29uc3QgdmFsaWRhdGVkRGF0YSA9IHBsYW50VGF4b25vbXlTY2hlbWEucGFyc2UoYm9keSk7XG5cbiAgICBjb25zdCB2YWxpZGF0aW9uID0gYXdhaXQgdmFsaWRhdGVQbGFudFRheG9ub215KHZhbGlkYXRlZERhdGEpO1xuXG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHtcbiAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICBkYXRhOiB2YWxpZGF0aW9uLFxuICAgICAgbWV0YWRhdGE6IHtcbiAgICAgICAgb3BlcmF0aW9uOiAndmFsaWRhdGUnLFxuICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCksXG4gICAgICAgIHVzZXJJZDogdXNlci5pZCxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgdmFsaWRhdGluZyBwbGFudCB0YXhvbm9teTonLCBlcnJvcik7XG4gICAgXG4gICAgaWYgKGVycm9yIGluc3RhbmNlb2YgWm9kRXJyb3IpIHtcbiAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcbiAgICAgICAgeyBcbiAgICAgICAgICBlcnJvcjogJ0ludmFsaWQgdGF4b25vbXkgZGF0YScsIFxuICAgICAgICAgIGRldGFpbHM6IGVycm9yLmlzc3VlcyBcbiAgICAgICAgfSwgXG4gICAgICAgIHsgc3RhdHVzOiA0MDAgfVxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXG4gICAgICB7IGVycm9yOiAnSW50ZXJuYWwgc2VydmVyIGVycm9yJyB9LCBcbiAgICAgIHsgc3RhdHVzOiA1MDAgfVxuICAgICk7XG4gIH1cbn0iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7SUFPTztJQUFBQSxjQUFBLFlBQUFBLENBQUE7TUFBQSxPQUFBQyxjQUFBO0lBQUE7RUFBQTtFQUFBLE9BQUFBLGNBQUE7QUFBQTtBQUFBRCxjQUFBO0FBQUFBLGNBQUEsR0FBQUUsQ0FBQTs7Ozs7OytCQUFlOzs7Ozs7V0FBQUMsSUFBQTs7Ozs7a0NBUG9COzs7a0NBQ1Y7OztrQ0FDTTs7O2tDQUNGOzs7a0NBQ1g7QUFHbEIsZUFBZUEsS0FBS0MsT0FBb0I7RUFBQTtFQUFBSixjQUFBLEdBQUFLLENBQUE7RUFBQUwsY0FBQSxHQUFBRSxDQUFBO0VBQzdDLElBQUk7SUFDRixNQUFNO01BQUVJO0lBQUksQ0FBRTtJQUFBO0lBQUEsQ0FBQU4sY0FBQSxHQUFBRSxDQUFBLE9BQUcsTUFBTSxJQUFBSyxRQUFBLENBQUFDLGVBQWU7SUFBQTtJQUFBUixjQUFBLEdBQUFFLENBQUE7SUFDdEMsSUFBSSxDQUFDSSxJQUFBLEVBQU07TUFBQTtNQUFBTixjQUFBLEdBQUFTLENBQUE7TUFBQVQsY0FBQSxHQUFBRSxDQUFBO01BQ1QsT0FBT1EsT0FBQSxDQUFBQyxZQUFZLENBQUNDLElBQUksQ0FBQztRQUFFQyxLQUFBLEVBQU87TUFBZSxHQUFHO1FBQUVDLE1BQUEsRUFBUTtNQUFJO0lBQ3BFO0lBQUE7SUFBQTtNQUFBZCxjQUFBLEdBQUFTLENBQUE7SUFBQTtJQUVBLE1BQU1NLElBQUE7SUFBQTtJQUFBLENBQUFmLGNBQUEsR0FBQUUsQ0FBQSxRQUFPLE1BQU1FLE9BQUEsQ0FBUVEsSUFBSTtJQUMvQixNQUFNSSxhQUFBO0lBQUE7SUFBQSxDQUFBaEIsY0FBQSxHQUFBRSxDQUFBLFFBQWdCZSxhQUFBLENBQUFDLG1CQUFtQixDQUFDQyxLQUFLLENBQUNKLElBQUE7SUFFaEQsTUFBTUssVUFBQTtJQUFBO0lBQUEsQ0FBQXBCLGNBQUEsR0FBQUUsQ0FBQSxRQUFhLE1BQU0sSUFBQW1CLGNBQUEsQ0FBQUMscUJBQXFCLEVBQUNOLGFBQUE7SUFBQTtJQUFBaEIsY0FBQSxHQUFBRSxDQUFBO0lBRS9DLE9BQU9RLE9BQUEsQ0FBQUMsWUFBWSxDQUFDQyxJQUFJLENBQUM7TUFDdkJXLE9BQUEsRUFBUztNQUNUQyxJQUFBLEVBQU1KLFVBQUE7TUFDTkssUUFBQSxFQUFVO1FBQ1JDLFNBQUEsRUFBVztRQUNYQyxTQUFBLEVBQVcsSUFBSUMsSUFBQTtRQUNmQyxNQUFBLEVBQVF2QixJQUFBLENBQUt3QjtNQUNmO0lBQ0Y7RUFDRixFQUFFLE9BQU9qQixLQUFBLEVBQU87SUFBQTtJQUFBYixjQUFBLEdBQUFFLENBQUE7SUFDZDZCLE9BQUEsQ0FBUWxCLEtBQUssQ0FBQyxvQ0FBb0NBLEtBQUE7SUFBQTtJQUFBYixjQUFBLEdBQUFFLENBQUE7SUFFbEQsSUFBSVcsS0FBQSxZQUFpQm1CLElBQUEsQ0FBQUMsUUFBUSxFQUFFO01BQUE7TUFBQWpDLGNBQUEsR0FBQVMsQ0FBQTtNQUFBVCxjQUFBLEdBQUFFLENBQUE7TUFDN0IsT0FBT1EsT0FBQSxDQUFBQyxZQUFZLENBQUNDLElBQUksQ0FDdEI7UUFDRUMsS0FBQSxFQUFPO1FBQ1BxQixPQUFBLEVBQVNyQixLQUFBLENBQU1zQjtNQUNqQixHQUNBO1FBQUVyQixNQUFBLEVBQVE7TUFBSTtJQUVsQjtJQUFBO0lBQUE7TUFBQWQsY0FBQSxHQUFBUyxDQUFBO0lBQUE7SUFBQVQsY0FBQSxHQUFBRSxDQUFBO0lBRUEsT0FBT1EsT0FBQSxDQUFBQyxZQUFZLENBQUNDLElBQUksQ0FDdEI7TUFBRUMsS0FBQSxFQUFPO0lBQXdCLEdBQ2pDO01BQUVDLE1BQUEsRUFBUTtJQUFJO0VBRWxCO0FBQ0YiLCJpZ25vcmVMaXN0IjpbXX0=