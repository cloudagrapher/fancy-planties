96a0c567105d91ee21af5bc9d198d351
'use client';
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get CSVImportModal () {
        return CSVImportModal;
    },
    get default () {
        return _default;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("react");
const _lucidereact = require("lucide-react");
const _FileUpload = require("./FileUpload");
const _ImportTypeSelector = require("./ImportTypeSelector");
const _CSVPreview = require("./CSVPreview");
const _ImportProgress = require("./ImportProgress");
function CSVImportModal({ isOpen, onClose, onImportComplete }) {
    const [step, setStep] = (0, _react.useState)('select-type');
    const [importType, setImportType] = (0, _react.useState)(null);
    const [selectedFile, setSelectedFile] = (0, _react.useState)(null);
    const [fileContent, setFileContent] = (0, _react.useState)('');
    const [validation, setValidation] = (0, _react.useState)(null);
    const [importId, setImportId] = (0, _react.useState)(null);
    const [isLoading, setIsLoading] = (0, _react.useState)(false);
    const [error, setError] = (0, _react.useState)(null);
    const resetModal = ()=>{
        setStep('select-type');
        setImportType(null);
        setSelectedFile(null);
        setFileContent('');
        setValidation(null);
        setImportId(null);
        setIsLoading(false);
        setError(null);
    };
    const handleClose = ()=>{
        resetModal();
        onClose();
    };
    const handleTypeSelect = (type)=>{
        setImportType(type);
        setStep('upload-file');
    };
    const handleFileSelect = (0, _react.useCallback)(async (file)=>{
        setSelectedFile(file);
        setIsLoading(true);
        setError(null);
        try {
            // Read file content
            const content = await readFileAsText(file);
            setFileContent(content);
            // Validate CSV content
            if (importType) {
                const response = await fetch('/api/import/csv/validate', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        content,
                        importType
                    })
                });
                if (!response.ok) {
                    throw new Error('Failed to validate CSV');
                }
                const validationResult = await response.json();
                setValidation(validationResult);
                setStep('preview');
            }
        } catch (err) {
            setError(err instanceof Error ? err.message : 'Failed to process file');
        } finally{
            setIsLoading(false);
        }
    }, [
        importType
    ]);
    const readFileAsText = (file)=>{
        return new Promise((resolve, reject)=>{
            const reader = new FileReader();
            reader.onload = (e)=>resolve(e.target?.result);
            reader.onerror = ()=>reject(new Error('Failed to read file'));
            reader.readAsText(file);
        });
    };
    const handleStartImport = async ()=>{
        if (!selectedFile || !importType || !fileContent) return;
        setIsLoading(true);
        setError(null);
        try {
            const response = await fetch('/api/import/csv', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    file: {
                        name: selectedFile.name,
                        size: selectedFile.size,
                        type: selectedFile.type,
                        content: fileContent
                    },
                    importType,
                    config: {
                        skipEmptyRows: true,
                        createMissingPlants: true,
                        handleDuplicates: 'skip'
                    }
                })
            });
            if (!response.ok) {
                throw new Error('Failed to start import');
            }
            const result = await response.json();
            setImportId(result.importId);
            setStep('importing');
        } catch (err) {
            setError(err instanceof Error ? err.message : 'Failed to start import');
        } finally{
            setIsLoading(false);
        }
    };
    const handleImportComplete = (progress)=>{
        setStep('complete');
        onImportComplete?.(progress.summary);
    };
    const handleImportError = (errorMessage)=>{
        setError(errorMessage);
    };
    const getStepTitle = ()=>{
        switch(step){
            case 'select-type':
                return 'Import CSV Data';
            case 'upload-file':
                return 'Upload CSV File';
            case 'preview':
                return 'Preview & Confirm';
            case 'importing':
                return 'Importing Data';
            case 'complete':
                return 'Import Complete';
            default:
                return 'Import CSV Data';
        }
    };
    const canGoBack = step !== 'select-type' && step !== 'importing';
    const canGoNext = step === 'select-type' && importType || step === 'upload-file' && selectedFile || step === 'preview' && validation?.isValid;
    if (!isOpen) return null;
    return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
        className: "modal-overlay",
        children: /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
            className: "modal-content modal-content--large",
            children: [
                /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    className: "modal-header",
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("h2", {
                            className: "modal-title",
                            children: getStepTitle()
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                            onClick: handleClose,
                            disabled: isLoading,
                            className: `modal-close ${isLoading ? 'opacity-50 cursor-not-allowed' : ''}`,
                            title: isLoading ? 'Please wait...' : 'Close',
                            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.X, {
                                className: "w-5 h-5"
                            })
                        })
                    ]
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    className: "modal-body",
                    children: [
                        error && /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            className: "mb-6 card card-body bg-red-50 border border-red-200",
                            children: /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                                className: "text-sm text-error",
                                children: error
                            })
                        }),
                        step === 'select-type' && /*#__PURE__*/ (0, _jsxruntime.jsx)(_ImportTypeSelector.ImportTypeSelector, {
                            selectedType: importType,
                            onTypeSelect: handleTypeSelect
                        }),
                        step === 'upload-file' && /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                            className: "space-y-6",
                            children: [
                                /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                    className: "text-center",
                                    children: [
                                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Upload, {
                                            className: "w-12 h-12 text-primary-500 mx-auto mb-4"
                                        }),
                                        /*#__PURE__*/ (0, _jsxruntime.jsxs)("h3", {
                                            className: "text-lg font-medium text-neutral-900 mb-2",
                                            children: [
                                                "Upload your ",
                                                importType?.replace('_', ' '),
                                                " CSV file"
                                            ]
                                        }),
                                        /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                                            className: "text-neutral-600",
                                            children: "Make sure your CSV file has the required columns for this import type."
                                        })
                                    ]
                                }),
                                /*#__PURE__*/ (0, _jsxruntime.jsx)(_FileUpload.FileUpload, {
                                    onFileSelect: handleFileSelect,
                                    acceptedTypes: [
                                        '.csv',
                                        'text/csv'
                                    ]
                                })
                            ]
                        }),
                        step === 'preview' && validation && /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                            className: "space-y-6",
                            children: [
                                /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                    className: "text-center",
                                    children: [
                                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.FileText, {
                                            className: "w-12 h-12 text-blue-500 mx-auto mb-4"
                                        }),
                                        /*#__PURE__*/ (0, _jsxruntime.jsx)("h3", {
                                            className: "text-lg font-medium text-gray-900 mb-2",
                                            children: "Review your data"
                                        }),
                                        /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                                            className: "text-gray-600",
                                            children: "Check the preview below and confirm the import when ready."
                                        })
                                    ]
                                }),
                                /*#__PURE__*/ (0, _jsxruntime.jsx)(_CSVPreview.CSVPreview, {
                                    data: validation.preview,
                                    errors: validation.errors,
                                    isValid: validation.isValid
                                })
                            ]
                        }),
                        step === 'importing' && importId && /*#__PURE__*/ (0, _jsxruntime.jsx)(_ImportProgress.ImportProgress, {
                            importId: importId,
                            onComplete: handleImportComplete,
                            onError: handleImportError
                        }),
                        step === 'complete' && /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                            className: "text-center space-y-6",
                            children: [
                                /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.CheckCircle, {
                                    className: "w-16 h-16 text-green-500 mx-auto"
                                }),
                                /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                    children: [
                                        /*#__PURE__*/ (0, _jsxruntime.jsx)("h3", {
                                            className: "text-lg font-medium text-gray-900 mb-2",
                                            children: "Import completed successfully!"
                                        }),
                                        /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                                            className: "text-gray-600",
                                            children: "Your CSV data has been imported into your plant collection."
                                        })
                                    ]
                                })
                            ]
                        })
                    ]
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    className: "flex items-center justify-between p-6 border-t border-gray-200 bg-gray-50",
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            className: "flex space-x-2",
                            children: canGoBack && /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                                onClick: ()=>{
                                    if (step === 'upload-file') setStep('select-type');
                                    else if (step === 'preview') setStep('upload-file');
                                },
                                disabled: isLoading,
                                className: `btn btn--outline ${isLoading ? 'opacity-50 cursor-not-allowed' : ''}`,
                                children: "Back"
                            })
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            className: "flex space-x-2",
                            children: step === 'complete' ? /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                                onClick: handleClose,
                                className: "btn btn--primary",
                                children: "Done"
                            }) : step === 'preview' && validation?.isValid ? /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                                onClick: handleStartImport,
                                disabled: isLoading,
                                className: `btn btn--primary ${isLoading ? 'btn--loading' : ''}`,
                                children: isLoading ? 'Starting...' : 'Start Import'
                            }) : /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                                onClick: handleClose,
                                disabled: isLoading,
                                className: `btn btn--outline ${isLoading ? 'opacity-50 cursor-not-allowed' : ''}`,
                                children: "Cancel"
                            })
                        })
                    ]
                })
            ]
        })
    });
}
const _default = CSVImportModal;

//# sourceMappingURL=data:application/json;base64,