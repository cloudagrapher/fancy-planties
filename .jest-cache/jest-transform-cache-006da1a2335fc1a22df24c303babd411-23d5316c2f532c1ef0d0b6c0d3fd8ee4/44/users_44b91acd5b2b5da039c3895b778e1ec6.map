{"version":3,"names":["cov_2458ipowlu","actualCoverage","s","UserQueries","create","userData","f","user","_index","db","insert","_schema","users","values","returning","error","console","Error","getById","id","select","from","where","_drizzleorm","eq","b","getByEmail","email","update","set","updatedAt","Date","delete","result","length","emailExists"],"sources":["/Users/stefanbekker/projects/fancy-planties/src/lib/db/queries/users.ts"],"sourcesContent":["import { eq } from 'drizzle-orm';\nimport { db } from '../index';\nimport { users, type User, type NewUser } from '../schema';\n\n// User CRUD operations\nexport class UserQueries {\n  // Create a new user\n  static async create(userData: NewUser): Promise<User> {\n    try {\n      const [user] = await db.insert(users).values(userData).returning();\n      return user;\n    } catch (error) {\n      console.error('Failed to create user:', error);\n      throw new Error('Failed to create user');\n    }\n  }\n\n  // Get user by ID\n  static async getById(id: number): Promise<User | null> {\n    try {\n      const [user] = await db.select().from(users).where(eq(users.id, id));\n      return user || null;\n    } catch (error) {\n      console.error('Failed to get user by ID:', error);\n      throw new Error('Failed to get user');\n    }\n  }\n\n  // Get user by email\n  static async getByEmail(email: string): Promise<User | null> {\n    try {\n      const [user] = await db.select().from(users).where(eq(users.email, email));\n      return user || null;\n    } catch (error) {\n      console.error('Failed to get user by email:', error);\n      throw new Error('Failed to get user');\n    }\n  }\n\n  // Update user\n  static async update(id: number, userData: Partial<NewUser>): Promise<User> {\n    try {\n      const [user] = await db\n        .update(users)\n        .set({ ...userData, updatedAt: new Date() })\n        .where(eq(users.id, id))\n        .returning();\n      \n      if (!user) {\n        throw new Error('User not found');\n      }\n      \n      return user;\n    } catch (error) {\n      console.error('Failed to update user:', error);\n      throw new Error('Failed to update user');\n    }\n  }\n\n  // Delete user (soft delete by deactivating)\n  static async delete(id: number): Promise<boolean> {\n    try {\n      const result = await db.delete(users).where(eq(users.id, id));\n      return result.length > 0;\n    } catch (error) {\n      console.error('Failed to delete user:', error);\n      throw new Error('Failed to delete user');\n    }\n  }\n\n  // Check if email exists\n  static async emailExists(email: string): Promise<boolean> {\n    try {\n      const [user] = await db\n        .select({ id: users.id })\n        .from(users)\n        .where(eq(users.email, email));\n      return !!user;\n    } catch (error) {\n      console.error('Failed to check email existence:', error);\n      throw new Error('Failed to check email');\n    }\n  }\n}"],"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","ignoreList":[]}