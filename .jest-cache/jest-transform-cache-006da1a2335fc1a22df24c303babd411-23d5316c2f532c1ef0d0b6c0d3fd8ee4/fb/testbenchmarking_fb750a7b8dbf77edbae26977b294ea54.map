{"version":3,"sources":["/Users/stefanbekker/projects/fancy-planties/src/test-utils/performance/test-benchmarking.ts"],"sourcesContent":["/**\n * Test Benchmarking and Alerting System\n * \n * Provides performance benchmarking and alerting for CI/CD integration.\n */\n\ninterface BenchmarkResult {\n  testName: string;\n  duration: number;\n  memoryUsage: number;\n  timestamp: Date;\n  environment: 'local' | 'ci';\n  branch?: string;\n  commit?: string;\n}\n\ninterface BenchmarkThresholds {\n  maxDuration: number;\n  maxMemoryMB: number;\n  regressionThreshold: number; // Percentage increase that triggers alert\n}\n\ninterface PerformanceAlert {\n  type: 'duration' | 'memory' | 'regression';\n  severity: 'warning' | 'error';\n  testName: string;\n  current: number;\n  threshold: number;\n  baseline?: number;\n  message: string;\n}\n\ninterface BenchmarkReport {\n  summary: {\n    totalTests: number;\n    averageDuration: number;\n    totalDuration: number;\n    memoryPeak: number;\n    alertCount: number;\n  };\n  alerts: PerformanceAlert[];\n  slowestTests: BenchmarkResult[];\n  regressions: Array<{\n    testName: string;\n    currentDuration: number;\n    baselineDuration: number;\n    regressionPercent: number;\n  }>;\n}\n\n/**\n * Test benchmarking system for performance monitoring\n */\nclass TestBenchmarkingSystem {\n  private results: BenchmarkResult[] = [];\n  private baselines = new Map<string, BenchmarkResult>();\n  private thresholds: Map<string, BenchmarkThresholds> = new Map();\n  private alerts: PerformanceAlert[] = [];\n\n  constructor() {\n    // Load baseline data if available\n    this.loadBaselines();\n    \n    // Set default thresholds\n    this.setDefaultThresholds();\n  }\n\n  /**\n   * Record a benchmark result\n   */\n  recordBenchmark(\n    testName: string,\n    duration: number,\n    memoryUsage: number,\n    environment: 'local' | 'ci' = 'local'\n  ): void {\n    const result: BenchmarkResult = {\n      testName,\n      duration,\n      memoryUsage,\n      timestamp: new Date(),\n      environment,\n      branch: process.env.GITHUB_REF_NAME || process.env.BRANCH_NAME,\n      commit: process.env.GITHUB_SHA || process.env.COMMIT_SHA,\n    };\n\n    this.results.push(result);\n    this.checkThresholds(result);\n    this.checkRegression(result);\n  }\n\n  /**\n   * Set performance thresholds for a test\n   */\n  setThresholds(testName: string, thresholds: BenchmarkThresholds): void {\n    this.thresholds.set(testName, thresholds);\n  }\n\n  /**\n   * Set baseline performance for comparison\n   */\n  setBaseline(testName: string, result: BenchmarkResult): void {\n    this.baselines.set(testName, result);\n  }\n\n  /**\n   * Generate comprehensive benchmark report\n   */\n  generateReport(): BenchmarkReport {\n    const totalTests = this.results.length;\n    const totalDuration = this.results.reduce((sum, r) => sum + r.duration, 0);\n    const averageDuration = totalTests > 0 ? totalDuration / totalTests : 0;\n    const memoryPeak = Math.max(...this.results.map(r => r.memoryUsage));\n\n    // Find slowest tests\n    const slowestTests = [...this.results]\n      .sort((a, b) => b.duration - a.duration)\n      .slice(0, 10);\n\n    // Find regressions\n    const regressions = this.findRegressions();\n\n    return {\n      summary: {\n        totalTests,\n        averageDuration,\n        totalDuration,\n        memoryPeak: memoryPeak / 1024 / 1024, // Convert to MB\n        alertCount: this.alerts.length,\n      },\n      alerts: [...this.alerts],\n      slowestTests,\n      regressions,\n    };\n  }\n\n  /**\n   * Generate CI-friendly report output\n   */\n  generateCIReport(): string {\n    const report = this.generateReport();\n    const lines: string[] = [];\n\n    lines.push('## 📊 Test Performance Report');\n    lines.push('');\n    lines.push('### 📈 Summary');\n    lines.push(`- **Total Tests**: ${report.summary.totalTests}`);\n    lines.push(`- **Average Duration**: ${report.summary.averageDuration.toFixed(2)}ms`);\n    lines.push(`- **Total Duration**: ${report.summary.totalDuration.toFixed(2)}ms`);\n    lines.push(`- **Memory Peak**: ${report.summary.memoryPeak.toFixed(2)}MB`);\n    lines.push(`- **Alerts**: ${report.summary.alertCount}`);\n    lines.push('');\n\n    // Alerts section\n    if (report.alerts.length > 0) {\n      lines.push('### 🚨 Performance Alerts');\n      lines.push('| Test | Type | Severity | Details |');\n      lines.push('|------|------|----------|---------|');\n      \n      report.alerts.forEach(alert => {\n        const icon = alert.severity === 'error' ? '🔴' : '⚠️';\n        lines.push(`| ${alert.testName} | ${alert.type} | ${icon} ${alert.severity} | ${alert.message} |`);\n      });\n      lines.push('');\n    }\n\n    // Slowest tests\n    if (report.slowestTests.length > 0) {\n      lines.push('### 🐌 Slowest Tests');\n      lines.push('| Test | Duration | Memory |');\n      lines.push('|------|----------|--------|');\n      \n      report.slowestTests.slice(0, 5).forEach(test => {\n        lines.push(`| ${test.testName} | ${test.duration.toFixed(2)}ms | ${(test.memoryUsage / 1024 / 1024).toFixed(2)}MB |`);\n      });\n      lines.push('');\n    }\n\n    // Regressions\n    if (report.regressions.length > 0) {\n      lines.push('### 📉 Performance Regressions');\n      lines.push('| Test | Current | Baseline | Regression |');\n      lines.push('|------|---------|----------|------------|');\n      \n      report.regressions.forEach(regression => {\n        lines.push(`| ${regression.testName} | ${regression.currentDuration.toFixed(2)}ms | ${regression.baselineDuration.toFixed(2)}ms | +${regression.regressionPercent.toFixed(1)}% |`);\n      });\n      lines.push('');\n    }\n\n    return lines.join('\\n');\n  }\n\n  /**\n   * Export benchmark data for storage\n   */\n  exportData(): any {\n    return {\n      results: this.results,\n      baselines: Object.fromEntries(this.baselines),\n      thresholds: Object.fromEntries(this.thresholds),\n      alerts: this.alerts,\n      timestamp: new Date().toISOString(),\n      environment: process.env.CI ? 'ci' : 'local',\n    };\n  }\n\n  /**\n   * Import benchmark data\n   */\n  importData(data: any): void {\n    if (data.results) {\n      this.results = data.results;\n    }\n    if (data.baselines) {\n      this.baselines = new Map(Object.entries(data.baselines));\n    }\n    if (data.thresholds) {\n      this.thresholds = new Map(Object.entries(data.thresholds));\n    }\n    if (data.alerts) {\n      this.alerts = data.alerts;\n    }\n  }\n\n  /**\n   * Check if result exceeds thresholds\n   */\n  private checkThresholds(result: BenchmarkResult): void {\n    const thresholds = this.thresholds.get(result.testName) || this.getDefaultThresholds();\n    \n    // Check duration threshold\n    if (result.duration > thresholds.maxDuration) {\n      this.alerts.push({\n        type: 'duration',\n        severity: result.duration > thresholds.maxDuration * 2 ? 'error' : 'warning',\n        testName: result.testName,\n        current: result.duration,\n        threshold: thresholds.maxDuration,\n        message: `Test duration ${result.duration.toFixed(2)}ms exceeds threshold ${thresholds.maxDuration}ms`,\n      });\n    }\n\n    // Check memory threshold\n    const memoryMB = result.memoryUsage / 1024 / 1024;\n    if (memoryMB > thresholds.maxMemoryMB) {\n      this.alerts.push({\n        type: 'memory',\n        severity: memoryMB > thresholds.maxMemoryMB * 2 ? 'error' : 'warning',\n        testName: result.testName,\n        current: memoryMB,\n        threshold: thresholds.maxMemoryMB,\n        message: `Memory usage ${memoryMB.toFixed(2)}MB exceeds threshold ${thresholds.maxMemoryMB}MB`,\n      });\n    }\n  }\n\n  /**\n   * Check for performance regression\n   */\n  private checkRegression(result: BenchmarkResult): void {\n    const baseline = this.baselines.get(result.testName);\n    if (!baseline) return;\n\n    const thresholds = this.thresholds.get(result.testName) || this.getDefaultThresholds();\n    const regressionPercent = ((result.duration - baseline.duration) / baseline.duration) * 100;\n\n    if (regressionPercent > thresholds.regressionThreshold) {\n      this.alerts.push({\n        type: 'regression',\n        severity: regressionPercent > thresholds.regressionThreshold * 2 ? 'error' : 'warning',\n        testName: result.testName,\n        current: result.duration,\n        threshold: baseline.duration * (1 + thresholds.regressionThreshold / 100),\n        baseline: baseline.duration,\n        message: `Performance regression of ${regressionPercent.toFixed(1)}% detected`,\n      });\n    }\n  }\n\n  /**\n   * Find all performance regressions\n   */\n  private findRegressions(): Array<{\n    testName: string;\n    currentDuration: number;\n    baselineDuration: number;\n    regressionPercent: number;\n  }> {\n    const regressions: Array<{\n      testName: string;\n      currentDuration: number;\n      baselineDuration: number;\n      regressionPercent: number;\n    }> = [];\n\n    this.results.forEach(result => {\n      const baseline = this.baselines.get(result.testName);\n      if (baseline) {\n        const regressionPercent = ((result.duration - baseline.duration) / baseline.duration) * 100;\n        if (regressionPercent > 10) { // 10% threshold for reporting\n          regressions.push({\n            testName: result.testName,\n            currentDuration: result.duration,\n            baselineDuration: baseline.duration,\n            regressionPercent,\n          });\n        }\n      }\n    });\n\n    return regressions.sort((a, b) => b.regressionPercent - a.regressionPercent);\n  }\n\n  /**\n   * Load baseline data from storage\n   */\n  private loadBaselines(): void {\n    try {\n      // In a real implementation, would load from file or database\n      const baselineData = process.env.BENCHMARK_BASELINES;\n      if (baselineData) {\n        const baselines = JSON.parse(baselineData);\n        this.baselines = new Map(Object.entries(baselines));\n      }\n    } catch (error) {\n      console.warn('Failed to load benchmark baselines:', error);\n    }\n  }\n\n  /**\n   * Set default performance thresholds\n   */\n  private setDefaultThresholds(): void {\n    const defaultThresholds: BenchmarkThresholds = {\n      maxDuration: 1000, // 1 second\n      maxMemoryMB: 50, // 50MB\n      regressionThreshold: 20, // 20% increase\n    };\n\n    // Set specific thresholds for different test types\n    this.thresholds.set('unit', {\n      maxDuration: 100,\n      maxMemoryMB: 10,\n      regressionThreshold: 15,\n    });\n\n    this.thresholds.set('integration', {\n      maxDuration: 2000,\n      maxMemoryMB: 100,\n      regressionThreshold: 25,\n    });\n\n    this.thresholds.set('e2e', {\n      maxDuration: 10000,\n      maxMemoryMB: 200,\n      regressionThreshold: 30,\n    });\n  }\n\n  /**\n   * Get default thresholds\n   */\n  private getDefaultThresholds(): BenchmarkThresholds {\n    return {\n      maxDuration: 1000,\n      maxMemoryMB: 50,\n      regressionThreshold: 20,\n    };\n  }\n\n  /**\n   * Clear all data\n   */\n  reset(): void {\n    this.results = [];\n    this.alerts = [];\n  }\n}\n\n// Global instance\nexport const testBenchmarkingSystem = new TestBenchmarkingSystem();\n\n/**\n * Jest helper for automatic benchmarking\n */\nexport function withBenchmarking(testType: 'unit' | 'integration' | 'e2e' = 'unit') {\n  beforeEach(() => {\n    const testName = expect.getState().currentTestName || 'unknown';\n    const startTime = performance.now();\n    const startMemory = process.memoryUsage().heapUsed;\n    \n    // Store start metrics\n    (global as any).__testStartTime = startTime;\n    (global as any).__testStartMemory = startMemory;\n  });\n\n  afterEach(() => {\n    const testName = expect.getState().currentTestName || 'unknown';\n    const endTime = performance.now();\n    const endMemory = process.memoryUsage().heapUsed;\n    \n    const duration = endTime - (global as any).__testStartTime;\n    const memoryUsage = endMemory - (global as any).__testStartMemory;\n    \n    testBenchmarkingSystem.recordBenchmark(\n      testName,\n      duration,\n      memoryUsage,\n      process.env.CI ? 'ci' : 'local'\n    );\n  });\n}\n\n/**\n * Manual benchmark recording\n */\nexport function recordBenchmark(testName: string, duration: number, memoryUsage: number): void {\n  testBenchmarkingSystem.recordBenchmark(testName, duration, memoryUsage);\n}\n\n/**\n * Generate and save benchmark report\n */\nexport async function saveBenchmarkReport(outputPath: string = 'coverage/benchmark-report.json'): Promise<void> {\n  const report = testBenchmarkingSystem.generateReport();\n  const data = testBenchmarkingSystem.exportData();\n  \n  try {\n    // Save detailed data\n    const fs = await import('fs');\n    fs.writeFileSync(outputPath, JSON.stringify(data, null, 2));\n    \n    // Save CI report\n    const ciReport = testBenchmarkingSystem.generateCIReport();\n    fs.writeFileSync(outputPath.replace('.json', '-ci.md'), ciReport);\n    \n    console.log(`📊 Benchmark report saved to ${outputPath}`);\n  } catch (error) {\n    console.error('Failed to save benchmark report:', error);\n  }\n}"],"names":["recordBenchmark","saveBenchmarkReport","testBenchmarkingSystem","withBenchmarking","TestBenchmarkingSystem","results","baselines","Map","thresholds","alerts","loadBaselines","setDefaultThresholds","testName","duration","memoryUsage","environment","result","timestamp","Date","branch","process","env","GITHUB_REF_NAME","BRANCH_NAME","commit","GITHUB_SHA","COMMIT_SHA","push","checkThresholds","checkRegression","setThresholds","set","setBaseline","generateReport","totalTests","length","totalDuration","reduce","sum","r","averageDuration","memoryPeak","Math","max","map","slowestTests","sort","a","b","slice","regressions","findRegressions","summary","alertCount","generateCIReport","report","lines","toFixed","forEach","alert","icon","severity","type","message","test","regression","currentDuration","baselineDuration","regressionPercent","join","exportData","Object","fromEntries","toISOString","CI","importData","data","entries","get","getDefaultThresholds","maxDuration","current","threshold","memoryMB","maxMemoryMB","baseline","regressionThreshold","baselineData","BENCHMARK_BASELINES","JSON","parse","error","console","warn","defaultThresholds","reset","testType","beforeEach","expect","getState","currentTestName","startTime","performance","now","startMemory","heapUsed","global","__testStartTime","__testStartMemory","afterEach","endTime","endMemory","outputPath","fs","writeFileSync","stringify","ciReport","replace","log"],"mappings":"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"}