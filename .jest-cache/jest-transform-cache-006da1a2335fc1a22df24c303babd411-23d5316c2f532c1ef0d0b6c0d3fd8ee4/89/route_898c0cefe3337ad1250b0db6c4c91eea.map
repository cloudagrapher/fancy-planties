{"version":3,"names":["cov_2htb79oys0","actualCoverage","s","GET","request","f","user","_server1","validateRequest","b","_server","NextResponse","json","error","status","searchParams","URL","url","query","get","type","response","success","data","metadata","operation","timestamp","Date","userId","id","suggestions","_plantsearch","plantSearchService","getSearchSuggestions","quickSelect","_planttaxonomy","getQuickSelectPlants","console"],"sources":["/Users/stefanbekker/projects/fancy-planties/src/app/api/plants/suggestions/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { validateRequest } from '@/lib/auth/server';\nimport { getQuickSelectPlants } from '@/lib/db/queries/plant-taxonomy';\nimport { plantSearchService } from '@/lib/services/plant-search';\n\n// GET /api/plants/suggestions - Get search suggestions and quick select plants\nexport async function GET(request: NextRequest) {\n  try {\n    const { user } = await validateRequest();\n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const { searchParams } = new URL(request.url);\n    const query = searchParams.get('q') || searchParams.get('query');\n    const type = searchParams.get('type') || 'all'; // 'suggestions', 'quick', or 'all'\n\n    const response: {\n      success: boolean;\n      data: Record<string, unknown>;\n      metadata: {\n        operation: string;\n        timestamp: Date;\n        userId: number;\n      };\n    } = {\n      success: true,\n      data: {},\n      metadata: {\n        operation: 'suggestions',\n        timestamp: new Date(),\n        userId: user.id,\n      },\n    };\n\n    // Get search suggestions if query provided\n    if (query && (type === 'suggestions' || type === 'all')) {\n      const suggestions = await plantSearchService.getSearchSuggestions(query, 5);\n      response.data.suggestions = suggestions;\n    }\n\n    // Get quick select plants if requested\n    if (type === 'quick' || type === 'all') {\n      const quickSelect = await getQuickSelectPlants(user.id);\n      response.data.quickSelect = quickSelect;\n    }\n\n    return NextResponse.json(response);\n  } catch (error) {\n    console.error('Error getting suggestions:', error);\n    \n    return NextResponse.json(\n      { error: 'Internal server error' }, \n      { status: 500 }\n    );\n  }\n}"],"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","ignoreList":[]}