a76a59ff9ce3d2a0e98f59fb07035837
"use strict";

/* istanbul ignore next */
function cov_2euv63g6rs() {
  var path = "/Users/stefanbekker/projects/fancy-planties/src/app/api/import/csv/validate/route.ts";
  var hash = "68436fc224b589927e7c2990f7129b559916e47c";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/stefanbekker/projects/fancy-planties/src/app/api/import/csv/validate/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 20
        }
      },
      "3": {
        start: {
          line: 11,
          column: 16
        },
        end: {
          line: 11,
          column: 38
        }
      },
      "4": {
        start: {
          line: 12,
          column: 17
        },
        end: {
          line: 12,
          column: 58
        }
      },
      "5": {
        start: {
          line: 13,
          column: 26
        },
        end: {
          line: 13,
          column: 83
        }
      },
      "6": {
        start: {
          line: 14,
          column: 13
        },
        end: {
          line: 14,
          column: 27
        }
      },
      "7": {
        start: {
          line: 15,
          column: 25
        },
        end: {
          line: 15,
          column: 65
        }
      },
      "8": {
        start: {
          line: 17,
          column: 4
        },
        end: {
          line: 55,
          column: 5
        }
      },
      "9": {
        start: {
          line: 18,
          column: 25
        },
        end: {
          line: 18,
          column: 62
        }
      },
      "10": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 25,
          column: 9
        }
      },
      "11": {
        start: {
          line: 20,
          column: 12
        },
        end: {
          line: 24,
          column: 15
        }
      },
      "12": {
        start: {
          line: 26,
          column: 21
        },
        end: {
          line: 26,
          column: 41
        }
      },
      "13": {
        start: {
          line: 28,
          column: 30
        },
        end: {
          line: 35,
          column: 10
        }
      },
      "14": {
        start: {
          line: 36,
          column: 40
        },
        end: {
          line: 36,
          column: 65
        }
      },
      "15": {
        start: {
          line: 38,
          column: 27
        },
        end: {
          line: 38,
          column: 89
        }
      },
      "16": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 39,
          column: 53
        }
      },
      "17": {
        start: {
          line: 41,
          column: 8
        },
        end: {
          line: 41,
          column: 54
        }
      },
      "18": {
        start: {
          line: 42,
          column: 8
        },
        end: {
          line: 49,
          column: 9
        }
      },
      "19": {
        start: {
          line: 43,
          column: 12
        },
        end: {
          line: 48,
          column: 15
        }
      },
      "20": {
        start: {
          line: 50,
          column: 8
        },
        end: {
          line: 54,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "POST",
        decl: {
          start: {
            line: 16,
            column: 15
          },
          end: {
            line: 16,
            column: 19
          }
        },
        loc: {
          start: {
            line: 16,
            column: 29
          },
          end: {
            line: 56,
            column: 1
          }
        },
        line: 16
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 19,
            column: 8
          },
          end: {
            line: 25,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 19,
            column: 8
          },
          end: {
            line: 25,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 19
      },
      "1": {
        loc: {
          start: {
            line: 42,
            column: 8
          },
          end: {
            line: 49,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 42,
            column: 8
          },
          end: {
            line: 49,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 42
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0
    },
    f: {
      "0": 0,
      "1": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/stefanbekker/projects/fancy-planties/src/app/api/import/csv/validate/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport { validateRequest } from '@/lib/auth/server';\nimport { CSVImportService, type ImportType } from '@/lib/services/csv-import-service';\nimport { z } from 'zod';\n\nconst csvImportService = new CSVImportService();\n\n// POST /api/import/csv/validate - Validate CSV content\nexport async function POST(request: NextRequest) {\n  try {\n    const { user } = await validateRequest();\n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const body = await request.json();\n    \n    // Validate request body\n    const requestSchema = z.object({\n      content: z.string().min(1, 'CSV content is required'),\n      importType: z.enum(['plant_taxonomy', 'plant_instances', 'propagations']),\n    });\n\n    const { content, importType } = requestSchema.parse(body);\n\n    // Validate CSV content\n    const validation = await csvImportService.validateCSVContent(\n      content,\n      importType as ImportType\n    );\n\n    return NextResponse.json(validation);\n\n  } catch (error) {\n    console.error('CSV validation error:', error);\n    \n    if (error instanceof z.ZodError) {\n      return NextResponse.json(\n        { error: 'Validation error', details: error.issues },\n        { status: 400 }\n      );\n    }\n\n    return NextResponse.json(\n      { error: 'Failed to validate CSV' },\n      { status: 500 }\n    );\n  }\n}"],
      names: ["POST", "csvImportService", "CSVImportService", "request", "user", "validateRequest", "NextResponse", "json", "error", "status", "body", "requestSchema", "z", "object", "content", "string", "min", "importType", "enum", "parse", "validation", "validateCSVContent", "console", "ZodError", "details", "issues"],
      mappings: ";;;;+BAQsBA;;;eAAAA;;;wBARoB;yBACV;kCACkB;qBAChC;AAElB,MAAMC,mBAAmB,IAAIC,kCAAgB;AAGtC,eAAeF,KAAKG,OAAoB;IAC7C,IAAI;QACF,MAAM,EAAEC,IAAI,EAAE,GAAG,MAAMC,IAAAA,wBAAe;QACtC,IAAI,CAACD,MAAM;YACT,OAAOE,oBAAY,CAACC,IAAI,CAAC;gBAAEC,OAAO;YAAe,GAAG;gBAAEC,QAAQ;YAAI;QACpE;QAEA,MAAMC,OAAO,MAAMP,QAAQI,IAAI;QAE/B,wBAAwB;QACxB,MAAMI,gBAAgBC,MAAC,CAACC,MAAM,CAAC;YAC7BC,SAASF,MAAC,CAACG,MAAM,GAAGC,GAAG,CAAC,GAAG;YAC3BC,YAAYL,MAAC,CAACM,IAAI,CAAC;gBAAC;gBAAkB;gBAAmB;aAAe;QAC1E;QAEA,MAAM,EAAEJ,OAAO,EAAEG,UAAU,EAAE,GAAGN,cAAcQ,KAAK,CAACT;QAEpD,uBAAuB;QACvB,MAAMU,aAAa,MAAMnB,iBAAiBoB,kBAAkB,CAC1DP,SACAG;QAGF,OAAOX,oBAAY,CAACC,IAAI,CAACa;IAE3B,EAAE,OAAOZ,OAAO;QACdc,QAAQd,KAAK,CAAC,yBAAyBA;QAEvC,IAAIA,iBAAiBI,MAAC,CAACW,QAAQ,EAAE;YAC/B,OAAOjB,oBAAY,CAACC,IAAI,CACtB;gBAAEC,OAAO;gBAAoBgB,SAAShB,MAAMiB,MAAM;YAAC,GACnD;gBAAEhB,QAAQ;YAAI;QAElB;QAEA,OAAOH,oBAAY,CAACC,IAAI,CACtB;YAAEC,OAAO;QAAyB,GAClC;YAAEC,QAAQ;QAAI;IAElB;AACF"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "68436fc224b589927e7c2990f7129b559916e47c"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2euv63g6rs = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2euv63g6rs();
cov_2euv63g6rs().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_2euv63g6rs().s[1]++;
Object.defineProperty(exports, "POST", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_2euv63g6rs().f[0]++;
    cov_2euv63g6rs().s[2]++;
    return POST;
  }
});
const _server =
/* istanbul ignore next */
(cov_2euv63g6rs().s[3]++, require("next/server"));
const _server1 =
/* istanbul ignore next */
(cov_2euv63g6rs().s[4]++, require("../../../../../lib/auth/server"));
const _csvimportservice =
/* istanbul ignore next */
(cov_2euv63g6rs().s[5]++, require("../../../../../lib/services/csv-import-service"));
const _zod =
/* istanbul ignore next */
(cov_2euv63g6rs().s[6]++, require("zod"));
const csvImportService =
/* istanbul ignore next */
(cov_2euv63g6rs().s[7]++, new _csvimportservice.CSVImportService());
async function POST(request) {
  /* istanbul ignore next */
  cov_2euv63g6rs().f[1]++;
  cov_2euv63g6rs().s[8]++;
  try {
    const {
      user
    } =
    /* istanbul ignore next */
    (cov_2euv63g6rs().s[9]++, await (0, _server1.validateRequest)());
    /* istanbul ignore next */
    cov_2euv63g6rs().s[10]++;
    if (!user) {
      /* istanbul ignore next */
      cov_2euv63g6rs().b[0][0]++;
      cov_2euv63g6rs().s[11]++;
      return _server.NextResponse.json({
        error: 'Unauthorized'
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_2euv63g6rs().b[0][1]++;
    }
    const body =
    /* istanbul ignore next */
    (cov_2euv63g6rs().s[12]++, await request.json());
    // Validate request body
    const requestSchema =
    /* istanbul ignore next */
    (cov_2euv63g6rs().s[13]++, _zod.z.object({
      content: _zod.z.string().min(1, 'CSV content is required'),
      importType: _zod.z.enum(['plant_taxonomy', 'plant_instances', 'propagations'])
    }));
    const {
      content,
      importType
    } =
    /* istanbul ignore next */
    (cov_2euv63g6rs().s[14]++, requestSchema.parse(body));
    // Validate CSV content
    const validation =
    /* istanbul ignore next */
    (cov_2euv63g6rs().s[15]++, await csvImportService.validateCSVContent(content, importType));
    /* istanbul ignore next */
    cov_2euv63g6rs().s[16]++;
    return _server.NextResponse.json(validation);
  } catch (error) {
    /* istanbul ignore next */
    cov_2euv63g6rs().s[17]++;
    console.error('CSV validation error:', error);
    /* istanbul ignore next */
    cov_2euv63g6rs().s[18]++;
    if (error instanceof _zod.z.ZodError) {
      /* istanbul ignore next */
      cov_2euv63g6rs().b[1][0]++;
      cov_2euv63g6rs().s[19]++;
      return _server.NextResponse.json({
        error: 'Validation error',
        details: error.issues
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_2euv63g6rs().b[1][1]++;
    }
    cov_2euv63g6rs().s[20]++;
    return _server.NextResponse.json({
      error: 'Failed to validate CSV'
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMmV1djYzZzZycyIsImFjdHVhbENvdmVyYWdlIiwicyIsIlBPU1QiLCJjc3ZJbXBvcnRTZXJ2aWNlIiwiX2NzdmltcG9ydHNlcnZpY2UiLCJDU1ZJbXBvcnRTZXJ2aWNlIiwicmVxdWVzdCIsImYiLCJ1c2VyIiwiX3NlcnZlcjEiLCJ2YWxpZGF0ZVJlcXVlc3QiLCJiIiwiX3NlcnZlciIsIk5leHRSZXNwb25zZSIsImpzb24iLCJlcnJvciIsInN0YXR1cyIsImJvZHkiLCJyZXF1ZXN0U2NoZW1hIiwiX3pvZCIsInoiLCJvYmplY3QiLCJjb250ZW50Iiwic3RyaW5nIiwibWluIiwiaW1wb3J0VHlwZSIsImVudW0iLCJwYXJzZSIsInZhbGlkYXRpb24iLCJ2YWxpZGF0ZUNTVkNvbnRlbnQiLCJjb25zb2xlIiwiWm9kRXJyb3IiLCJkZXRhaWxzIiwiaXNzdWVzIl0sInNvdXJjZXMiOlsiL1VzZXJzL3N0ZWZhbmJla2tlci9wcm9qZWN0cy9mYW5jeS1wbGFudGllcy9zcmMvYXBwL2FwaS9pbXBvcnQvY3N2L3ZhbGlkYXRlL3JvdXRlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5leHRSZXF1ZXN0LCBOZXh0UmVzcG9uc2UgfSBmcm9tICduZXh0L3NlcnZlcic7XG5pbXBvcnQgeyB2YWxpZGF0ZVJlcXVlc3QgfSBmcm9tICdAL2xpYi9hdXRoL3NlcnZlcic7XG5pbXBvcnQgeyBDU1ZJbXBvcnRTZXJ2aWNlLCB0eXBlIEltcG9ydFR5cGUgfSBmcm9tICdAL2xpYi9zZXJ2aWNlcy9jc3YtaW1wb3J0LXNlcnZpY2UnO1xuaW1wb3J0IHsgeiB9IGZyb20gJ3pvZCc7XG5cbmNvbnN0IGNzdkltcG9ydFNlcnZpY2UgPSBuZXcgQ1NWSW1wb3J0U2VydmljZSgpO1xuXG4vLyBQT1NUIC9hcGkvaW1wb3J0L2Nzdi92YWxpZGF0ZSAtIFZhbGlkYXRlIENTViBjb250ZW50XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gUE9TVChyZXF1ZXN0OiBOZXh0UmVxdWVzdCkge1xuICB0cnkge1xuICAgIGNvbnN0IHsgdXNlciB9ID0gYXdhaXQgdmFsaWRhdGVSZXF1ZXN0KCk7XG4gICAgaWYgKCF1c2VyKSB7XG4gICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oeyBlcnJvcjogJ1VuYXV0aG9yaXplZCcgfSwgeyBzdGF0dXM6IDQwMSB9KTtcbiAgICB9XG5cbiAgICBjb25zdCBib2R5ID0gYXdhaXQgcmVxdWVzdC5qc29uKCk7XG4gICAgXG4gICAgLy8gVmFsaWRhdGUgcmVxdWVzdCBib2R5XG4gICAgY29uc3QgcmVxdWVzdFNjaGVtYSA9IHoub2JqZWN0KHtcbiAgICAgIGNvbnRlbnQ6IHouc3RyaW5nKCkubWluKDEsICdDU1YgY29udGVudCBpcyByZXF1aXJlZCcpLFxuICAgICAgaW1wb3J0VHlwZTogei5lbnVtKFsncGxhbnRfdGF4b25vbXknLCAncGxhbnRfaW5zdGFuY2VzJywgJ3Byb3BhZ2F0aW9ucyddKSxcbiAgICB9KTtcblxuICAgIGNvbnN0IHsgY29udGVudCwgaW1wb3J0VHlwZSB9ID0gcmVxdWVzdFNjaGVtYS5wYXJzZShib2R5KTtcblxuICAgIC8vIFZhbGlkYXRlIENTViBjb250ZW50XG4gICAgY29uc3QgdmFsaWRhdGlvbiA9IGF3YWl0IGNzdkltcG9ydFNlcnZpY2UudmFsaWRhdGVDU1ZDb250ZW50KFxuICAgICAgY29udGVudCxcbiAgICAgIGltcG9ydFR5cGUgYXMgSW1wb3J0VHlwZVxuICAgICk7XG5cbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24odmFsaWRhdGlvbik7XG5cbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdDU1YgdmFsaWRhdGlvbiBlcnJvcjonLCBlcnJvcik7XG4gICAgXG4gICAgaWYgKGVycm9yIGluc3RhbmNlb2Ygei5ab2RFcnJvcikge1xuICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxuICAgICAgICB7IGVycm9yOiAnVmFsaWRhdGlvbiBlcnJvcicsIGRldGFpbHM6IGVycm9yLmlzc3VlcyB9LFxuICAgICAgICB7IHN0YXR1czogNDAwIH1cbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxuICAgICAgeyBlcnJvcjogJ0ZhaWxlZCB0byB2YWxpZGF0ZSBDU1YnIH0sXG4gICAgICB7IHN0YXR1czogNTAwIH1cbiAgICApO1xuICB9XG59Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7SUFRTztJQUFBQSxjQUFBLFlBQUFBLENBQUE7TUFBQSxPQUFBQyxjQUFBO0lBQUE7RUFBQTtFQUFBLE9BQUFBLGNBQUE7QUFBQTtBQUFBRCxjQUFBO0FBQUFBLGNBQUEsR0FBQUUsQ0FBQTs7Ozs7OytCQUFlOzs7Ozs7V0FBQUMsSUFBQTs7Ozs7a0NBUm9COzs7a0NBQ1Y7OztrQ0FDa0I7OztrQ0FDaEM7QUFFbEIsTUFBTUMsZ0JBQUE7QUFBQTtBQUFBLENBQUFKLGNBQUEsR0FBQUUsQ0FBQSxPQUFtQixJQUFJRyxpQkFBQSxDQUFBQyxnQkFBZ0I7QUFHdEMsZUFBZUgsS0FBS0ksT0FBb0I7RUFBQTtFQUFBUCxjQUFBLEdBQUFRLENBQUE7RUFBQVIsY0FBQSxHQUFBRSxDQUFBO0VBQzdDLElBQUk7SUFDRixNQUFNO01BQUVPO0lBQUksQ0FBRTtJQUFBO0lBQUEsQ0FBQVQsY0FBQSxHQUFBRSxDQUFBLE9BQUcsTUFBTSxJQUFBUSxRQUFBLENBQUFDLGVBQWU7SUFBQTtJQUFBWCxjQUFBLEdBQUFFLENBQUE7SUFDdEMsSUFBSSxDQUFDTyxJQUFBLEVBQU07TUFBQTtNQUFBVCxjQUFBLEdBQUFZLENBQUE7TUFBQVosY0FBQSxHQUFBRSxDQUFBO01BQ1QsT0FBT1csT0FBQSxDQUFBQyxZQUFZLENBQUNDLElBQUksQ0FBQztRQUFFQyxLQUFBLEVBQU87TUFBZSxHQUFHO1FBQUVDLE1BQUEsRUFBUTtNQUFJO0lBQ3BFO0lBQUE7SUFBQTtNQUFBakIsY0FBQSxHQUFBWSxDQUFBO0lBQUE7SUFFQSxNQUFNTSxJQUFBO0lBQUE7SUFBQSxDQUFBbEIsY0FBQSxHQUFBRSxDQUFBLFFBQU8sTUFBTUssT0FBQSxDQUFRUSxJQUFJO0lBRS9CO0lBQ0EsTUFBTUksYUFBQTtJQUFBO0lBQUEsQ0FBQW5CLGNBQUEsR0FBQUUsQ0FBQSxRQUFnQmtCLElBQUEsQ0FBQUMsQ0FBQyxDQUFDQyxNQUFNLENBQUM7TUFDN0JDLE9BQUEsRUFBU0gsSUFBQSxDQUFBQyxDQUFDLENBQUNHLE1BQU0sR0FBR0MsR0FBRyxDQUFDLEdBQUc7TUFDM0JDLFVBQUEsRUFBWU4sSUFBQSxDQUFBQyxDQUFDLENBQUNNLElBQUksQ0FBQyxDQUFDLGtCQUFrQixtQkFBbUIsZUFBZTtJQUMxRTtJQUVBLE1BQU07TUFBRUosT0FBTztNQUFFRztJQUFVLENBQUU7SUFBQTtJQUFBLENBQUExQixjQUFBLEdBQUFFLENBQUEsUUFBR2lCLGFBQUEsQ0FBY1MsS0FBSyxDQUFDVixJQUFBO0lBRXBEO0lBQ0EsTUFBTVcsVUFBQTtJQUFBO0lBQUEsQ0FBQTdCLGNBQUEsR0FBQUUsQ0FBQSxRQUFhLE1BQU1FLGdCQUFBLENBQWlCMEIsa0JBQWtCLENBQzFEUCxPQUFBLEVBQ0FHLFVBQUE7SUFBQTtJQUFBMUIsY0FBQSxHQUFBRSxDQUFBO0lBR0YsT0FBT1csT0FBQSxDQUFBQyxZQUFZLENBQUNDLElBQUksQ0FBQ2MsVUFBQTtFQUUzQixFQUFFLE9BQU9iLEtBQUEsRUFBTztJQUFBO0lBQUFoQixjQUFBLEdBQUFFLENBQUE7SUFDZDZCLE9BQUEsQ0FBUWYsS0FBSyxDQUFDLHlCQUF5QkEsS0FBQTtJQUFBO0lBQUFoQixjQUFBLEdBQUFFLENBQUE7SUFFdkMsSUFBSWMsS0FBQSxZQUFpQkksSUFBQSxDQUFBQyxDQUFDLENBQUNXLFFBQVEsRUFBRTtNQUFBO01BQUFoQyxjQUFBLEdBQUFZLENBQUE7TUFBQVosY0FBQSxHQUFBRSxDQUFBO01BQy9CLE9BQU9XLE9BQUEsQ0FBQUMsWUFBWSxDQUFDQyxJQUFJLENBQ3RCO1FBQUVDLEtBQUEsRUFBTztRQUFvQmlCLE9BQUEsRUFBU2pCLEtBQUEsQ0FBTWtCO01BQU8sR0FDbkQ7UUFBRWpCLE1BQUEsRUFBUTtNQUFJO0lBRWxCO0lBQUE7SUFBQTtNQUFBakIsY0FBQSxHQUFBWSxDQUFBO0lBQUE7SUFBQVosY0FBQSxHQUFBRSxDQUFBO0lBRUEsT0FBT1csT0FBQSxDQUFBQyxZQUFZLENBQUNDLElBQUksQ0FDdEI7TUFBRUMsS0FBQSxFQUFPO0lBQXlCLEdBQ2xDO01BQUVDLE1BQUEsRUFBUTtJQUFJO0VBRWxCO0FBQ0YiLCJpZ25vcmVMaXN0IjpbXX0=