{"version":3,"sources":["/Users/stefanbekker/projects/fancy-planties/src/__tests__/database/care-data-queries.test.js"],"sourcesContent":["/**\n * Care Data Database Query Tests\n * Tests care record creation, retrieval, care history aggregation, and statistics\n */\n\nimport { CareHistoryQueries } from '../../lib/db/queries/care-history';\nimport { PlantQueries } from '../../lib/db/queries/plants';\nimport { PlantInstanceQueries } from '../../lib/db/queries/plant-instances';\nimport { createDatabaseTestManager } from '../../test-utils/setup/database-test-manager';\nimport { \n  createTestCareRecord,\n  createTestFertilizerRecord,\n  createTestWateringRecord,\n  createTestRepottingRecord,\n  createTestCareHistory,\n  createRealisticCareSchedule,\n  resetCareCounter\n} from '../../test-utils/factories/care-factory';\nimport { createTestUser, resetUserCounter } from '../../test-utils/factories/user-factory';\nimport { createTestPlant, createTestPlantInstance, resetPlantCounters } from '../../test-utils/factories/plant-factory';\n\ndescribe('Care Data Database Queries', () => {\n  let dbManager;\n\n  beforeEach(() => {\n    dbManager = createDatabaseTestManager();\n    resetCareCounter();\n    resetUserCounter();\n    resetPlantCounters();\n  });\n\n  afterEach(async () => {\n    await dbManager.cleanup();\n  });\n\n  describe('Care Record CRUD Operations', () => {\n    test('should create a new care record', async () => {\n      const testUser = createTestUser();\n      const createdUser = await dbManager.createTestUser(testUser);\n\n      const plant = createTestPlant({ createdBy: createdUser.id });\n      const createdPlant = await dbManager.createTestPlant(plant);\n\n      const plantInstance = createTestPlantInstance({\n        userId: createdUser.id,\n        plantId: createdPlant.id,\n      });\n      const createdInstance = await dbManager.createTestPlantInstance(plantInstance);\n\n      const careData = {\n        userId: createdUser.id,\n        plantInstanceId: createdInstance.id,\n        careType: 'fertilizer',\n        careDate: new Date(),\n        notes: 'Applied balanced liquid fertilizer',\n        fertilizerType: 'Balanced liquid fertilizer (10-10-10)',\n        images: [],\n      };\n\n      const careRecord = await CareHistoryQueries.createCareHistory(careData);\n\n      expect(careRecord).toBeDefined();\n      expect(careRecord.id).toBeDefined();\n      expect(careRecord.userId).toBe(createdUser.id);\n      expect(careRecord.plantInstanceId).toBe(createdInstance.id);\n      expect(careRecord.careType).toBe('fertilizer');\n      expect(careRecord.notes).toBe('Applied balanced liquid fertilizer');\n      expect(careRecord.fertilizerType).toBe('Balanced liquid fertilizer (10-10-10)');\n      expect(careRecord.createdAt).toBeInstanceOf(Date);\n      expect(careRecord.updatedAt).toBeInstanceOf(Date);\n    });\n\n    test('should retrieve care record by ID', async () => {\n      const testUser = createTestUser();\n      const createdUser = await dbManager.createTestUser(testUser);\n\n      const plant = createTestPlant({ createdBy: createdUser.id });\n      const createdPlant = await dbManager.createTestPlant(plant);\n\n      const plantInstance = createTestPlantInstance({\n        userId: createdUser.id,\n        plantId: createdPlant.id,\n      });\n      const createdInstance = await dbManager.createTestPlantInstance(plantInstance);\n\n      const careData = createTestCareRecord({\n        userId: createdUser.id,\n        plantInstanceId: createdInstance.id,\n      });\n\n      const createdCare = await CareHistoryQueries.createCareHistory(careData);\n      const foundCare = await CareHistoryQueries.getCareHistoryById(createdCare.id);\n\n      expect(foundCare).toBeDefined();\n      expect(foundCare.id).toBe(createdCare.id);\n      expect(foundCare.careType).toBe(createdCare.careType);\n      expect(foundCare.notes).toBe(createdCare.notes);\n    });\n\n    test('should return null for non-existent care record ID', async () => {\n      const careRecord = await CareHistoryQueries.getCareHistoryById(99999);\n      expect(careRecord).toBeNull();\n    });\n\n    test('should update care record', async () => {\n      const testUser = createTestUser();\n      const createdUser = await dbManager.createTestUser(testUser);\n\n      const plant = createTestPlant({ createdBy: createdUser.id });\n      const createdPlant = await dbManager.createTestPlant(plant);\n\n      const plantInstance = createTestPlantInstance({\n        userId: createdUser.id,\n        plantId: createdPlant.id,\n      });\n      const createdInstance = await dbManager.createTestPlantInstance(plantInstance);\n\n      const careData = createTestCareRecord({\n        userId: createdUser.id,\n        plantInstanceId: createdInstance.id,\n      });\n\n      const createdCare = await CareHistoryQueries.createCareHistory(careData);\n\n      const updates = {\n        notes: 'Updated care notes',\n        fertilizerType: 'Updated fertilizer type',\n      };\n\n      const updatedCare = await CareHistoryQueries.updateCareHistory(\n        createdCare.id,\n        createdUser.id,\n        updates\n      );\n\n      expect(updatedCare).toBeDefined();\n      expect(updatedCare.notes).toBe('Updated care notes');\n      expect(updatedCare.fertilizerType).toBe('Updated fertilizer type');\n      expect(updatedCare.updatedAt.getTime()).toBeGreaterThan(createdCare.updatedAt.getTime());\n    });\n\n    test('should delete care record', async () => {\n      const testUser = createTestUser();\n      const createdUser = await dbManager.createTestUser(testUser);\n\n      const plant = createTestPlant({ createdBy: createdUser.id });\n      const createdPlant = await dbManager.createTestPlant(plant);\n\n      const plantInstance = createTestPlantInstance({\n        userId: createdUser.id,\n        plantId: createdPlant.id,\n      });\n      const createdInstance = await dbManager.createTestPlantInstance(plantInstance);\n\n      const careData = createTestCareRecord({\n        userId: createdUser.id,\n        plantInstanceId: createdInstance.id,\n      });\n\n      const createdCare = await CareHistoryQueries.createCareHistory(careData);\n      console.log('Created care:', createdCare.id, 'User:', createdUser.id);\n\n      const deleted = await CareHistoryQueries.deleteCareHistory(createdCare.id, createdUser.id);\n      console.log('Delete result:', deleted);\n      expect(deleted).toBe(true);\n\n      const foundCare = await CareHistoryQueries.getCareHistoryById(createdCare.id);\n      expect(foundCare).toBeNull();\n    });\n  });\n\n  describe('Care History Retrieval and Filtering', () => {\n    test('should get care history for a specific plant instance', async () => {\n      const testUser = createTestUser();\n      const createdUser = await dbManager.createTestUser(testUser);\n\n      const plant = createTestPlant({ createdBy: createdUser.id });\n      const createdPlant = await dbManager.createTestPlant(plant);\n\n      const plantInstance = createTestPlantInstance({\n        userId: createdUser.id,\n        plantId: createdPlant.id,\n      });\n      const createdInstance = await dbManager.createTestPlantInstance(plantInstance);\n\n      // Create multiple care records\n      const careRecords = [\n        createTestCareRecord({\n          userId: createdUser.id,\n          plantInstanceId: createdInstance.id,\n          careType: 'fertilizer',\n        }),\n        createTestCareRecord({\n          userId: createdUser.id,\n          plantInstanceId: createdInstance.id,\n          careType: 'water',\n        }),\n        createTestCareRecord({\n          userId: createdUser.id,\n          plantInstanceId: createdInstance.id,\n          careType: 'prune',\n        }),\n      ];\n\n      for (const care of careRecords) {\n        await CareHistoryQueries.createCareHistory(care);\n      }\n\n      const history = await CareHistoryQueries.getCareHistoryForPlant(\n        createdInstance.id,\n        createdUser.id\n      );\n\n      expect(history.length).toBe(3);\n      expect(history.every(h => h.plantInstanceId === createdInstance.id)).toBe(true);\n      expect(history.every(h => h.userId === createdUser.id)).toBe(true);\n    });\n\n    test('should filter care history by care type', async () => {\n      const testUser = createTestUser();\n      const createdUser = await dbManager.createTestUser(testUser);\n\n      const plant = createTestPlant({ createdBy: createdUser.id });\n      const createdPlant = await dbManager.createTestPlant(plant);\n\n      const plantInstance = createTestPlantInstance({\n        userId: createdUser.id,\n        plantId: createdPlant.id,\n      });\n      const createdInstance = await dbManager.createTestPlantInstance(plantInstance);\n\n      // Create care records of different types\n      const fertilizerCare = createTestCareRecord({\n        userId: createdUser.id,\n        plantInstanceId: createdInstance.id,\n        careType: 'fertilizer',\n      });\n\n      const waterCare = createTestCareRecord({\n        userId: createdUser.id,\n        plantInstanceId: createdInstance.id,\n        careType: 'water',\n      });\n\n      await CareHistoryQueries.createCareHistory(fertilizerCare);\n      await CareHistoryQueries.createCareHistory(waterCare);\n\n      // Filter by fertilizer type\n      const fertilizerHistory = await CareHistoryQueries.getCareHistoryForPlant(\n        createdInstance.id,\n        createdUser.id,\n        { careType: 'fertilizer' }\n      );\n\n      expect(fertilizerHistory.length).toBe(1);\n      expect(fertilizerHistory[0].careType).toBe('fertilizer');\n    });\n\n    test('should filter care history by date range', async () => {\n      const testUser = createTestUser();\n      const createdUser = await dbManager.createTestUser(testUser);\n\n      const plant = createTestPlant({ createdBy: createdUser.id });\n      const createdPlant = await dbManager.createTestPlant(plant);\n\n      const plantInstance = createTestPlantInstance({\n        userId: createdUser.id,\n        plantId: createdPlant.id,\n      });\n      const createdInstance = await dbManager.createTestPlantInstance(plantInstance);\n\n      const now = new Date();\n      const oneWeekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n      const twoWeeksAgo = new Date(now.getTime() - 14 * 24 * 60 * 60 * 1000);\n\n      // Create care records with different dates\n      const recentCare = createTestCareRecord({\n        userId: createdUser.id,\n        plantInstanceId: createdInstance.id,\n        careDate: now,\n      });\n\n      const oldCare = createTestCareRecord({\n        userId: createdUser.id,\n        plantInstanceId: createdInstance.id,\n        careDate: twoWeeksAgo,\n      });\n\n      await CareHistoryQueries.createCareHistory(recentCare);\n      await CareHistoryQueries.createCareHistory(oldCare);\n\n      // Filter by date range (last week)\n      const recentHistory = await CareHistoryQueries.getCareHistoryForPlant(\n        createdInstance.id,\n        createdUser.id,\n        { \n          startDate: oneWeekAgo,\n          endDate: now \n        }\n      );\n\n      expect(recentHistory.length).toBe(1);\n      expect(recentHistory[0].careDate.getTime()).toBeGreaterThanOrEqual(oneWeekAgo.getTime());\n    });\n\n    test('should get recent care history for user', async () => {\n      const testUser = createTestUser();\n      const createdUser = await dbManager.createTestUser(testUser);\n\n      const plant = createTestPlant({ createdBy: createdUser.id });\n      const createdPlant = await dbManager.createTestPlant(plant);\n\n      // Create multiple plant instances\n      const instance1 = createTestPlantInstance({\n        userId: createdUser.id,\n        plantId: createdPlant.id,\n      });\n      const instance2 = createTestPlantInstance({\n        userId: createdUser.id,\n        plantId: createdPlant.id,\n      });\n\n      const createdInstance1 = await dbManager.createTestPlantInstance(instance1);\n      const createdInstance2 = await dbManager.createTestPlantInstance(instance2);\n\n      // Create care records for both instances\n      const care1 = createTestCareRecord({\n        userId: createdUser.id,\n        plantInstanceId: createdInstance1.id,\n      });\n\n      const care2 = createTestCareRecord({\n        userId: createdUser.id,\n        plantInstanceId: createdInstance2.id,\n      });\n\n      await CareHistoryQueries.createCareHistory(care1);\n      await CareHistoryQueries.createCareHistory(care2);\n\n      const recentHistory = await CareHistoryQueries.getRecentCareHistory(createdUser.id, 10);\n\n      expect(recentHistory.length).toBe(2);\n      expect(recentHistory.every(h => h.userId === createdUser.id)).toBe(true);\n      // Should be sorted by date (most recent first)\n      expect(recentHistory[0].careDate.getTime()).toBeGreaterThanOrEqual(recentHistory[1].careDate.getTime());\n    });\n  });\n\n  describe('Care Statistics and Aggregation', () => {\n    test('should get care history count for plant instance', async () => {\n      const testUser = createTestUser();\n      const createdUser = await dbManager.createTestUser(testUser);\n\n      const plant = createTestPlant({ createdBy: createdUser.id });\n      const createdPlant = await dbManager.createTestPlant(plant);\n\n      const plantInstance = createTestPlantInstance({\n        userId: createdUser.id,\n        plantId: createdPlant.id,\n      });\n      const createdInstance = await dbManager.createTestPlantInstance(plantInstance);\n\n      // Create multiple care records\n      const careRecords = [\n        createTestCareRecord({\n          userId: createdUser.id,\n          plantInstanceId: createdInstance.id,\n          careType: 'fertilizer',\n        }),\n        createTestCareRecord({\n          userId: createdUser.id,\n          plantInstanceId: createdInstance.id,\n          careType: 'fertilizer',\n        }),\n        createTestCareRecord({\n          userId: createdUser.id,\n          plantInstanceId: createdInstance.id,\n          careType: 'water',\n        }),\n      ];\n\n      for (const care of careRecords) {\n        await CareHistoryQueries.createCareHistory(care);\n      }\n\n      // Get total count\n      const totalCount = await CareHistoryQueries.getCareHistoryCount(\n        createdInstance.id,\n        createdUser.id\n      );\n      expect(totalCount).toBe(3);\n\n      // Get count by care type\n      const fertilizerCount = await CareHistoryQueries.getCareHistoryCount(\n        createdInstance.id,\n        createdUser.id,\n        'fertilizer'\n      );\n      expect(fertilizerCount).toBe(2);\n\n      const waterCount = await CareHistoryQueries.getCareHistoryCount(\n        createdInstance.id,\n        createdUser.id,\n        'water'\n      );\n      expect(waterCount).toBe(1);\n    });\n\n    test('should get last care date for specific care type', async () => {\n      const testUser = createTestUser();\n      const createdUser = await dbManager.createTestUser(testUser);\n\n      const plant = createTestPlant({ createdBy: createdUser.id });\n      const createdPlant = await dbManager.createTestPlant(plant);\n\n      const plantInstance = createTestPlantInstance({\n        userId: createdUser.id,\n        plantId: createdPlant.id,\n      });\n      const createdInstance = await dbManager.createTestPlantInstance(plantInstance);\n\n      const now = new Date();\n      const yesterday = new Date(now.getTime() - 24 * 60 * 60 * 1000);\n\n      // Create care records with different dates\n      const oldFertilizer = createTestCareRecord({\n        userId: createdUser.id,\n        plantInstanceId: createdInstance.id,\n        careType: 'fertilizer',\n        careDate: yesterday,\n      });\n\n      const recentFertilizer = createTestCareRecord({\n        userId: createdUser.id,\n        plantInstanceId: createdInstance.id,\n        careType: 'fertilizer',\n        careDate: now,\n      });\n\n      await CareHistoryQueries.createCareHistory(oldFertilizer);\n      await CareHistoryQueries.createCareHistory(recentFertilizer);\n\n      const lastFertilizerDate = await CareHistoryQueries.getLastCareDate(\n        createdInstance.id,\n        createdUser.id,\n        'fertilizer'\n      );\n\n      expect(lastFertilizerDate).toBeDefined();\n      expect(lastFertilizerDate.getTime()).toBe(now.getTime());\n    });\n\n    test('should return null for care type with no history', async () => {\n      const testUser = createTestUser();\n      const createdUser = await dbManager.createTestUser(testUser);\n\n      const plant = createTestPlant({ createdBy: createdUser.id });\n      const createdPlant = await dbManager.createTestPlant(plant);\n\n      const plantInstance = createTestPlantInstance({\n        userId: createdUser.id,\n        plantId: createdPlant.id,\n      });\n      const createdInstance = await dbManager.createTestPlantInstance(plantInstance);\n\n      const lastRepotDate = await CareHistoryQueries.getLastCareDate(\n        createdInstance.id,\n        createdUser.id,\n        'repot'\n      );\n\n      expect(lastRepotDate).toBeNull();\n    });\n\n    test('should get care dashboard data for user', async () => {\n      const testUser = createTestUser();\n      const createdUser = await dbManager.createTestUser(testUser);\n\n      const plant = createTestPlant({ createdBy: createdUser.id });\n      const createdPlant = await dbManager.createTestPlant(plant);\n\n      // Create plant instances with different care statuses\n      const overdueInstance = createTestPlantInstance({\n        userId: createdUser.id,\n        plantId: createdPlant.id,\n        fertilizerDue: new Date(Date.now() - 24 * 60 * 60 * 1000), // 1 day overdue\n        isActive: true,\n      });\n\n      const dueTodayInstance = createTestPlantInstance({\n        userId: createdUser.id,\n        plantId: createdPlant.id,\n        fertilizerDue: new Date(), // Due today\n        isActive: true,\n      });\n\n      const dueSoonInstance = createTestPlantInstance({\n        userId: createdUser.id,\n        plantId: createdPlant.id,\n        fertilizerDue: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000), // Due in 3 days\n        isActive: true,\n      });\n\n      await dbManager.createTestPlantInstance(overdueInstance);\n      await dbManager.createTestPlantInstance(dueTodayInstance);\n      await dbManager.createTestPlantInstance(dueSoonInstance);\n\n      const dashboardData = await CareHistoryQueries.getCareDashboardData(createdUser.id);\n\n      expect(dashboardData).toBeDefined();\n      expect(dashboardData.statistics).toBeDefined();\n      expect(dashboardData.statistics.totalActivePlants).toBe(3);\n      expect(dashboardData.overdue.length).toBeGreaterThanOrEqual(1);\n      expect(dashboardData.dueToday.length).toBeGreaterThanOrEqual(1);\n      expect(dashboardData.dueSoon.length).toBeGreaterThanOrEqual(1);\n    });\n  });\n\n  describe('Bulk Operations', () => {\n    test('should bulk create care history entries', async () => {\n      const testUser = createTestUser();\n      const createdUser = await dbManager.createTestUser(testUser);\n\n      const plant = createTestPlant({ createdBy: createdUser.id });\n      const createdPlant = await dbManager.createTestPlant(plant);\n\n      const plantInstance = createTestPlantInstance({\n        userId: createdUser.id,\n        plantId: createdPlant.id,\n      });\n      const createdInstance = await dbManager.createTestPlantInstance(plantInstance);\n\n      const careEntries = [\n        {\n          userId: createdUser.id,\n          plantInstanceId: createdInstance.id,\n          careType: 'fertilizer',\n          careDate: new Date(),\n          notes: 'Bulk fertilizer 1',\n        },\n        {\n          userId: createdUser.id,\n          plantInstanceId: createdInstance.id,\n          careType: 'water',\n          careDate: new Date(),\n          notes: 'Bulk water 1',\n        },\n        {\n          userId: createdUser.id,\n          plantInstanceId: createdInstance.id,\n          careType: 'prune',\n          careDate: new Date(),\n          notes: 'Bulk prune 1',\n        },\n      ];\n\n      const createdEntries = await CareHistoryQueries.bulkCreateCareHistory(careEntries);\n\n      expect(createdEntries.length).toBe(3);\n      expect(createdEntries.every(entry => entry.id)).toBe(true);\n      expect(createdEntries.every(entry => entry.userId === createdUser.id)).toBe(true);\n    });\n\n    test('should handle empty bulk create gracefully', async () => {\n      const result = await CareHistoryQueries.bulkCreateCareHistory([]);\n      expect(result).toEqual([]);\n    });\n\n    test('should get care history for multiple plant instances', async () => {\n      const testUser = createTestUser();\n      const createdUser = await dbManager.createTestUser(testUser);\n\n      const plant = createTestPlant({ createdBy: createdUser.id });\n      const createdPlant = await dbManager.createTestPlant(plant);\n\n      // Create multiple plant instances\n      const instance1 = createTestPlantInstance({\n        userId: createdUser.id,\n        plantId: createdPlant.id,\n      });\n      const instance2 = createTestPlantInstance({\n        userId: createdUser.id,\n        plantId: createdPlant.id,\n      });\n\n      const createdInstance1 = await dbManager.createTestPlantInstance(instance1);\n      const createdInstance2 = await dbManager.createTestPlantInstance(instance2);\n\n      // Create care records for both instances\n      const care1 = createTestCareRecord({\n        userId: createdUser.id,\n        plantInstanceId: createdInstance1.id,\n      });\n\n      const care2 = createTestCareRecord({\n        userId: createdUser.id,\n        plantInstanceId: createdInstance2.id,\n      });\n\n      await CareHistoryQueries.createCareHistory(care1);\n      await CareHistoryQueries.createCareHistory(care2);\n\n      const plantInstanceIds = [createdInstance1.id, createdInstance2.id];\n      const history = await CareHistoryQueries.getCareHistoryForPlants(\n        plantInstanceIds,\n        createdUser.id\n      );\n\n      expect(history.length).toBe(2);\n      expect(history.every(h => plantInstanceIds.includes(h.plantInstanceId))).toBe(true);\n    });\n  });\n\n  describe('Care Type Specific Operations', () => {\n    test('should create fertilizer care record with specific data', async () => {\n      const testUser = createTestUser();\n      const createdUser = await dbManager.createTestUser(testUser);\n\n      const plant = createTestPlant({ createdBy: createdUser.id });\n      const createdPlant = await dbManager.createTestPlant(plant);\n\n      const plantInstance = createTestPlantInstance({\n        userId: createdUser.id,\n        plantId: createdPlant.id,\n      });\n      const createdInstance = await dbManager.createTestPlantInstance(plantInstance);\n\n      const fertilizerCare = {\n        userId: createdUser.id,\n        plantInstanceId: createdInstance.id,\n        careType: 'fertilizer',\n        careDate: new Date(),\n        notes: 'Applied balanced liquid fertilizer at half strength',\n        fertilizerType: 'Balanced liquid fertilizer (10-10-10)',\n        images: [],\n      };\n\n      const createdCare = await CareHistoryQueries.createCareHistory(fertilizerCare);\n\n      expect(createdCare.careType).toBe('fertilizer');\n      expect(createdCare.fertilizerType).toBe('Balanced liquid fertilizer (10-10-10)');\n      expect(createdCare.potSize).toBeNull();\n      expect(createdCare.soilType).toBeNull();\n    });\n\n    test('should create repotting care record with specific data', async () => {\n      const testUser = createTestUser();\n      const createdUser = await dbManager.createTestUser(testUser);\n\n      const plant = createTestPlant({ createdBy: createdUser.id });\n      const createdPlant = await dbManager.createTestPlant(plant);\n\n      const plantInstance = createTestPlantInstance({\n        userId: createdUser.id,\n        plantId: createdPlant.id,\n      });\n      const createdInstance = await dbManager.createTestPlantInstance(plantInstance);\n\n      const repotCare = {\n        userId: createdUser.id,\n        plantInstanceId: createdInstance.id,\n        careType: 'repot',\n        careDate: new Date(),\n        notes: 'Repotted into larger container with fresh soil',\n        potSize: '8 inch',\n        soilType: 'Standard potting mix',\n        images: [],\n      };\n\n      const createdCare = await CareHistoryQueries.createCareHistory(repotCare);\n\n      expect(createdCare.careType).toBe('repot');\n      expect(createdCare.potSize).toBe('8 inch');\n      expect(createdCare.soilType).toBe('Standard potting mix');\n      expect(createdCare.fertilizerType).toBeNull();\n    });\n\n    test('should create water care record', async () => {\n      const testUser = createTestUser();\n      const createdUser = await dbManager.createTestUser(testUser);\n\n      const plant = createTestPlant({ createdBy: createdUser.id });\n      const createdPlant = await dbManager.createTestPlant(plant);\n\n      const plantInstance = createTestPlantInstance({\n        userId: createdUser.id,\n        plantId: createdPlant.id,\n      });\n      const createdInstance = await dbManager.createTestPlantInstance(plantInstance);\n\n      const waterCare = {\n        userId: createdUser.id,\n        plantInstanceId: createdInstance.id,\n        careType: 'water',\n        careDate: new Date(),\n        notes: 'Watered thoroughly until water drained from bottom',\n        images: [],\n      };\n\n      const createdCare = await CareHistoryQueries.createCareHistory(waterCare);\n\n      expect(createdCare.careType).toBe('water');\n      expect(createdCare.notes).toBe('Watered thoroughly until water drained from bottom');\n      expect(createdCare.fertilizerType).toBeNull();\n      expect(createdCare.potSize).toBeNull();\n      expect(createdCare.soilType).toBeNull();\n    });\n  });\n\n  describe('Error Handling and Edge Cases', () => {\n    test('should handle non-existent plant instance in care operations', async () => {\n      const testUser = createTestUser();\n      const createdUser = await dbManager.createTestUser(testUser);\n\n      const careData = createTestCareRecord({\n        userId: createdUser.id,\n        plantInstanceId: 99999, // Non-existent\n      });\n\n      // Should not crash, but may fail due to foreign key constraint\n      await expect(CareHistoryQueries.createCareHistory(careData))\n        .rejects.toThrow();\n    });\n\n    test('should handle unauthorized care record access', async () => {\n      const testUser1 = createTestUser();\n      const testUser2 = createTestUser();\n      const createdUser1 = await dbManager.createTestUser(testUser1);\n      const createdUser2 = await dbManager.createTestUser(testUser2);\n\n      const plant = createTestPlant({ createdBy: createdUser1.id });\n      const createdPlant = await dbManager.createTestPlant(plant);\n\n      const plantInstance = createTestPlantInstance({\n        userId: createdUser1.id,\n        plantId: createdPlant.id,\n      });\n      const createdInstance = await dbManager.createTestPlantInstance(plantInstance);\n\n      const careData = createTestCareRecord({\n        userId: createdUser1.id,\n        plantInstanceId: createdInstance.id,\n      });\n\n      const createdCare = await CareHistoryQueries.createCareHistory(careData);\n\n      // User 2 should not be able to update User 1's care record\n      const updatedCare = await CareHistoryQueries.updateCareHistory(\n        createdCare.id,\n        createdUser2.id, // Different user\n        { notes: 'Unauthorized update' }\n      );\n\n      expect(updatedCare).toBeNull();\n    });\n\n    test('should handle invalid care type gracefully', async () => {\n      const testUser = createTestUser();\n      const createdUser = await dbManager.createTestUser(testUser);\n\n      const plant = createTestPlant({ createdBy: createdUser.id });\n      const createdPlant = await dbManager.createTestPlant(plant);\n\n      const plantInstance = createTestPlantInstance({\n        userId: createdUser.id,\n        plantId: createdPlant.id,\n      });\n      const createdInstance = await dbManager.createTestPlantInstance(plantInstance);\n\n      const careData = {\n        userId: createdUser.id,\n        plantInstanceId: createdInstance.id,\n        careType: 'invalid_care_type', // Invalid\n        careDate: new Date(),\n        notes: 'Test notes',\n      };\n\n      // Should fail due to enum constraint\n      await expect(CareHistoryQueries.createCareHistory(careData))\n        .rejects.toThrow();\n    });\n\n    test('should handle empty care history queries', async () => {\n      const testUser = createTestUser();\n      const createdUser = await dbManager.createTestUser(testUser);\n\n      const plant = createTestPlant({ createdBy: createdUser.id });\n      const createdPlant = await dbManager.createTestPlant(plant);\n\n      const plantInstance = createTestPlantInstance({\n        userId: createdUser.id,\n        plantId: createdPlant.id,\n      });\n      const createdInstance = await dbManager.createTestPlantInstance(plantInstance);\n\n      // No care records created\n      const history = await CareHistoryQueries.getCareHistoryForPlant(\n        createdInstance.id,\n        createdUser.id\n      );\n\n      expect(history).toEqual([]);\n\n      const count = await CareHistoryQueries.getCareHistoryCount(\n        createdInstance.id,\n        createdUser.id\n      );\n\n      expect(count).toBe(0);\n    });\n  });\n\n  describe('Performance and Concurrency', () => {\n    test('should handle concurrent care record creation', async () => {\n      const testUser = createTestUser();\n      const createdUser = await dbManager.createTestUser(testUser);\n\n      const plant = createTestPlant({ createdBy: createdUser.id });\n      const createdPlant = await dbManager.createTestPlant(plant);\n\n      const plantInstance = createTestPlantInstance({\n        userId: createdUser.id,\n        plantId: createdPlant.id,\n      });\n      const createdInstance = await dbManager.createTestPlantInstance(plantInstance);\n\n      // Create multiple care records concurrently\n      const carePromises = Array.from({ length: 5 }, (_, index) => {\n        const careData = createTestCareRecord({\n          userId: createdUser.id,\n          plantInstanceId: createdInstance.id,\n          notes: `Concurrent care ${index}`,\n        });\n        return CareHistoryQueries.createCareHistory(careData);\n      });\n\n      const careRecords = await Promise.all(carePromises);\n      expect(careRecords.length).toBe(5);\n      expect(careRecords.every(c => c.id)).toBe(true);\n    });\n\n    test('should handle large care history efficiently', async () => {\n      const testUser = createTestUser();\n      const createdUser = await dbManager.createTestUser(testUser);\n\n      const plant = createTestPlant({ createdBy: createdUser.id });\n      const createdPlant = await dbManager.createTestPlant(plant);\n\n      const plantInstance = createTestPlantInstance({\n        userId: createdUser.id,\n        plantId: createdPlant.id,\n      });\n      const createdInstance = await dbManager.createTestPlantInstance(plantInstance);\n\n      // Create many care records\n      const careEntries = Array.from({ length: 50 }, (_, index) => ({\n        userId: createdUser.id,\n        plantInstanceId: createdInstance.id,\n        careType: 'water',\n        careDate: new Date(Date.now() - index * 24 * 60 * 60 * 1000), // One per day\n        notes: `Daily water ${index}`,\n      }));\n\n      await CareHistoryQueries.bulkCreateCareHistory(careEntries);\n\n      const startTime = Date.now();\n      const history = await CareHistoryQueries.getCareHistoryForPlant(\n        createdInstance.id,\n        createdUser.id,\n        { limit: 20 }\n      );\n      const queryTime = Date.now() - startTime;\n\n      expect(history.length).toBe(20);\n      expect(queryTime).toBeLessThan(1000); // Should complete within 1 second\n    });\n  });\n});"],"names":["describe","dbManager","beforeEach","createDatabaseTestManager","resetCareCounter","resetUserCounter","resetPlantCounters","afterEach","cleanup","test","testUser","createTestUser","createdUser","plant","createTestPlant","createdBy","id","createdPlant","plantInstance","createTestPlantInstance","userId","plantId","createdInstance","careData","plantInstanceId","careType","careDate","Date","notes","fertilizerType","images","careRecord","CareHistoryQueries","createCareHistory","expect","toBeDefined","toBe","createdAt","toBeInstanceOf","updatedAt","createTestCareRecord","createdCare","foundCare","getCareHistoryById","toBeNull","updates","updatedCare","updateCareHistory","getTime","toBeGreaterThan","console","log","deleted","deleteCareHistory","careRecords","care","history","getCareHistoryForPlant","length","every","h","fertilizerCare","waterCare","fertilizerHistory","now","oneWeekAgo","twoWeeksAgo","recentCare","oldCare","recentHistory","startDate","endDate","toBeGreaterThanOrEqual","instance1","instance2","createdInstance1","createdInstance2","care1","care2","getRecentCareHistory","totalCount","getCareHistoryCount","fertilizerCount","waterCount","yesterday","oldFertilizer","recentFertilizer","lastFertilizerDate","getLastCareDate","lastRepotDate","overdueInstance","fertilizerDue","isActive","dueTodayInstance","dueSoonInstance","dashboardData","getCareDashboardData","statistics","totalActivePlants","overdue","dueToday","dueSoon","careEntries","createdEntries","bulkCreateCareHistory","entry","result","toEqual","plantInstanceIds","getCareHistoryForPlants","includes","potSize","soilType","repotCare","rejects","toThrow","testUser1","testUser2","createdUser1","createdUser2","count","carePromises","Array","from","_","index","Promise","all","c","startTime","limit","queryTime","toBeLessThan"],"mappings":"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"}