18193f37dd9089b35a11e65f25b48450
"use strict";

/* istanbul ignore next */
function cov_drg5u3ma5() {
  var path = "/Users/stefanbekker/projects/fancy-planties/src/lib/db/queries/plant-instances.ts";
  var hash = "c4ca05208914050308141c26db9cc683c8f5fcc6";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/stefanbekker/projects/fancy-planties/src/lib/db/queries/plant-instances.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 36
        }
      },
      "3": {
        start: {
          line: 11,
          column: 20
        },
        end: {
          line: 11,
          column: 42
        }
      },
      "4": {
        start: {
          line: 12,
          column: 15
        },
        end: {
          line: 12,
          column: 34
        }
      },
      "5": {
        start: {
          line: 13,
          column: 16
        },
        end: {
          line: 13,
          column: 36
        }
      },
      "6": {
        start: {
          line: 14,
          column: 28
        },
        end: {
          line: 14,
          column: 71
        }
      },
      "7": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 24,
          column: 9
        }
      },
      "8": {
        start: {
          line: 19,
          column: 31
        },
        end: {
          line: 19,
          column: 110
        }
      },
      "9": {
        start: {
          line: 20,
          column: 12
        },
        end: {
          line: 20,
          column: 28
        }
      },
      "10": {
        start: {
          line: 22,
          column: 12
        },
        end: {
          line: 22,
          column: 69
        }
      },
      "11": {
        start: {
          line: 23,
          column: 12
        },
        end: {
          line: 23,
          column: 63
        }
      },
      "12": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 38,
          column: 9
        }
      },
      "13": {
        start: {
          line: 29,
          column: 31
        },
        end: {
          line: 29,
          column: 239
        }
      },
      "14": {
        start: {
          line: 30,
          column: 12
        },
        end: {
          line: 30,
          column: 39
        }
      },
      "15": {
        start: {
          line: 30,
          column: 27
        },
        end: {
          line: 30,
          column: 39
        }
      },
      "16": {
        start: {
          line: 31,
          column: 12
        },
        end: {
          line: 34,
          column: 14
        }
      },
      "17": {
        start: {
          line: 36,
          column: 12
        },
        end: {
          line: 36,
          column: 72
        }
      },
      "18": {
        start: {
          line: 37,
          column: 12
        },
        end: {
          line: 37,
          column: 60
        }
      },
      "19": {
        start: {
          line: 42,
          column: 8
        },
        end: {
          line: 57,
          column: 9
        }
      },
      "20": {
        start: {
          line: 43,
          column: 31
        },
        end: {
          line: 45,
          column: 13
        }
      },
      "21": {
        start: {
          line: 46,
          column: 12
        },
        end: {
          line: 48,
          column: 13
        }
      },
      "22": {
        start: {
          line: 47,
          column: 16
        },
        end: {
          line: 47,
          column: 92
        }
      },
      "23": {
        start: {
          line: 49,
          column: 30
        },
        end: {
          line: 49,
          column: 288
        }
      },
      "24": {
        start: {
          line: 50,
          column: 12
        },
        end: {
          line: 53,
          column: 20
        }
      },
      "25": {
        start: {
          line: 50,
          column: 46
        },
        end: {
          line: 53,
          column: 17
        }
      },
      "26": {
        start: {
          line: 55,
          column: 12
        },
        end: {
          line: 55,
          column: 78
        }
      },
      "27": {
        start: {
          line: 56,
          column: 12
        },
        end: {
          line: 56,
          column: 61
        }
      },
      "28": {
        start: {
          line: 61,
          column: 8
        },
        end: {
          line: 71,
          column: 9
        }
      },
      "29": {
        start: {
          line: 62,
          column: 24
        },
        end: {
          line: 62,
          column: 34
        }
      },
      "30": {
        start: {
          line: 63,
          column: 30
        },
        end: {
          line: 63,
          column: 527
        }
      },
      "31": {
        start: {
          line: 64,
          column: 12
        },
        end: {
          line: 67,
          column: 20
        }
      },
      "32": {
        start: {
          line: 64,
          column: 46
        },
        end: {
          line: 67,
          column: 17
        }
      },
      "33": {
        start: {
          line: 69,
          column: 12
        },
        end: {
          line: 69,
          column: 80
        }
      },
      "34": {
        start: {
          line: 70,
          column: 12
        },
        end: {
          line: 70,
          column: 74
        }
      },
      "35": {
        start: {
          line: 75,
          column: 8
        },
        end: {
          line: 87,
          column: 9
        }
      },
      "36": {
        start: {
          line: 76,
          column: 24
        },
        end: {
          line: 76,
          column: 34
        }
      },
      "37": {
        start: {
          line: 77,
          column: 31
        },
        end: {
          line: 77,
          column: 41
        }
      },
      "38": {
        start: {
          line: 78,
          column: 12
        },
        end: {
          line: 78,
          column: 58
        }
      },
      "39": {
        start: {
          line: 79,
          column: 30
        },
        end: {
          line: 79,
          column: 599
        }
      },
      "40": {
        start: {
          line: 80,
          column: 12
        },
        end: {
          line: 83,
          column: 20
        }
      },
      "41": {
        start: {
          line: 80,
          column: 46
        },
        end: {
          line: 83,
          column: 17
        }
      },
      "42": {
        start: {
          line: 85,
          column: 12
        },
        end: {
          line: 85,
          column: 81
        }
      },
      "43": {
        start: {
          line: 86,
          column: 12
        },
        end: {
          line: 86,
          column: 75
        }
      },
      "44": {
        start: {
          line: 91,
          column: 8
        },
        end: {
          line: 101,
          column: 9
        }
      },
      "45": {
        start: {
          line: 92,
          column: 31
        },
        end: {
          line: 92,
          column: 57
        }
      },
      "46": {
        start: {
          line: 93,
          column: 30
        },
        end: {
          line: 93,
          column: 799
        }
      },
      "47": {
        start: {
          line: 94,
          column: 12
        },
        end: {
          line: 97,
          column: 20
        }
      },
      "48": {
        start: {
          line: 94,
          column: 46
        },
        end: {
          line: 97,
          column: 17
        }
      },
      "49": {
        start: {
          line: 99,
          column: 12
        },
        end: {
          line: 99,
          column: 70
        }
      },
      "50": {
        start: {
          line: 100,
          column: 12
        },
        end: {
          line: 100,
          column: 64
        }
      },
      "51": {
        start: {
          line: 105,
          column: 8
        },
        end: {
          line: 117,
          column: 9
        }
      },
      "52": {
        start: {
          line: 106,
          column: 31
        },
        end: {
          line: 109,
          column: 84
        }
      },
      "53": {
        start: {
          line: 110,
          column: 12
        },
        end: {
          line: 112,
          column: 13
        }
      },
      "54": {
        start: {
          line: 111,
          column: 16
        },
        end: {
          line: 111,
          column: 60
        }
      },
      "55": {
        start: {
          line: 113,
          column: 12
        },
        end: {
          line: 113,
          column: 28
        }
      },
      "56": {
        start: {
          line: 115,
          column: 12
        },
        end: {
          line: 115,
          column: 69
        }
      },
      "57": {
        start: {
          line: 116,
          column: 12
        },
        end: {
          line: 116,
          column: 63
        }
      },
      "58": {
        start: {
          line: 121,
          column: 8
        },
        end: {
          line: 157,
          column: 9
        }
      },
      "59": {
        start: {
          line: 122,
          column: 24
        },
        end: {
          line: 122,
          column: 52
        }
      },
      "60": {
        start: {
          line: 124,
          column: 38
        },
        end: {
          line: 124,
          column: 149
        }
      },
      "61": {
        start: {
          line: 125,
          column: 12
        },
        end: {
          line: 127,
          column: 13
        }
      },
      "62": {
        start: {
          line: 126,
          column: 16
        },
        end: {
          line: 126,
          column: 60
        }
      },
      "63": {
        start: {
          line: 129,
          column: 26
        },
        end: {
          line: 129,
          column: 30
        }
      },
      "64": {
        start: {
          line: 130,
          column: 12
        },
        end: {
          line: 147,
          column: 13
        }
      },
      "65": {
        start: {
          line: 131,
          column: 38
        },
        end: {
          line: 131,
          column: 109
        }
      },
      "66": {
        start: {
          line: 132,
          column: 16
        },
        end: {
          line: 146,
          column: 17
        }
      },
      "67": {
        start: {
          line: 133,
          column: 45
        },
        end: {
          line: 133,
          column: 58
        }
      },
      "68": {
        start: {
          line: 134,
          column: 20
        },
        end: {
          line: 134,
          column: 44
        }
      },
      "69": {
        start: {
          line: 135,
          column: 20
        },
        end: {
          line: 145,
          column: 21
        }
      },
      "70": {
        start: {
          line: 137,
          column: 28
        },
        end: {
          line: 137,
          column: 86
        }
      },
      "71": {
        start: {
          line: 138,
          column: 28
        },
        end: {
          line: 138,
          column: 34
        }
      },
      "72": {
        start: {
          line: 140,
          column: 28
        },
        end: {
          line: 140,
          column: 90
        }
      },
      "73": {
        start: {
          line: 141,
          column: 28
        },
        end: {
          line: 141,
          column: 34
        }
      },
      "74": {
        start: {
          line: 143,
          column: 28
        },
        end: {
          line: 143,
          column: 88
        }
      },
      "75": {
        start: {
          line: 144,
          column: 28
        },
        end: {
          line: 144,
          column: 34
        }
      },
      "76": {
        start: {
          line: 148,
          column: 31
        },
        end: {
          line: 152,
          column: 84
        }
      },
      "77": {
        start: {
          line: 153,
          column: 12
        },
        end: {
          line: 153,
          column: 28
        }
      },
      "78": {
        start: {
          line: 155,
          column: 12
        },
        end: {
          line: 155,
          column: 62
        }
      },
      "79": {
        start: {
          line: 156,
          column: 12
        },
        end: {
          line: 156,
          column: 56
        }
      },
      "80": {
        start: {
          line: 161,
          column: 8
        },
        end: {
          line: 184,
          column: 9
        }
      },
      "81": {
        start: {
          line: 162,
          column: 24
        },
        end: {
          line: 162,
          column: 47
        }
      },
      "82": {
        start: {
          line: 163,
          column: 31
        },
        end: {
          line: 166,
          column: 13
        }
      },
      "83": {
        start: {
          line: 167,
          column: 12
        },
        end: {
          line: 175,
          column: 13
        }
      },
      "84": {
        start: {
          line: 169,
          column: 42
        },
        end: {
          line: 169,
          column: 153
        }
      },
      "85": {
        start: {
          line: 170,
          column: 16
        },
        end: {
          line: 174,
          column: 17
        }
      },
      "86": {
        start: {
          line: 171,
          column: 42
        },
        end: {
          line: 171,
          column: 69
        }
      },
      "87": {
        start: {
          line: 172,
          column: 38
        },
        end: {
          line: 172,
          column: 83
        }
      },
      "88": {
        start: {
          line: 173,
          column: 20
        },
        end: {
          line: 173,
          column: 100
        }
      },
      "89": {
        start: {
          line: 176,
          column: 31
        },
        end: {
          line: 176,
          column: 163
        }
      },
      "90": {
        start: {
          line: 177,
          column: 12
        },
        end: {
          line: 179,
          column: 13
        }
      },
      "91": {
        start: {
          line: 178,
          column: 16
        },
        end: {
          line: 178,
          column: 60
        }
      },
      "92": {
        start: {
          line: 180,
          column: 12
        },
        end: {
          line: 180,
          column: 28
        }
      },
      "93": {
        start: {
          line: 182,
          column: 12
        },
        end: {
          line: 182,
          column: 57
        }
      },
      "94": {
        start: {
          line: 183,
          column: 12
        },
        end: {
          line: 183,
          column: 51
        }
      },
      "95": {
        start: {
          line: 188,
          column: 8
        },
        end: {
          line: 200,
          column: 9
        }
      },
      "96": {
        start: {
          line: 189,
          column: 31
        },
        end: {
          line: 192,
          column: 84
        }
      },
      "97": {
        start: {
          line: 193,
          column: 12
        },
        end: {
          line: 195,
          column: 13
        }
      },
      "98": {
        start: {
          line: 194,
          column: 16
        },
        end: {
          line: 194,
          column: 60
        }
      },
      "99": {
        start: {
          line: 196,
          column: 12
        },
        end: {
          line: 196,
          column: 28
        }
      },
      "100": {
        start: {
          line: 198,
          column: 12
        },
        end: {
          line: 198,
          column: 73
        }
      },
      "101": {
        start: {
          line: 199,
          column: 12
        },
        end: {
          line: 199,
          column: 67
        }
      },
      "102": {
        start: {
          line: 204,
          column: 8
        },
        end: {
          line: 216,
          column: 9
        }
      },
      "103": {
        start: {
          line: 205,
          column: 31
        },
        end: {
          line: 208,
          column: 84
        }
      },
      "104": {
        start: {
          line: 209,
          column: 12
        },
        end: {
          line: 211,
          column: 13
        }
      },
      "105": {
        start: {
          line: 210,
          column: 16
        },
        end: {
          line: 210,
          column: 60
        }
      },
      "106": {
        start: {
          line: 212,
          column: 12
        },
        end: {
          line: 212,
          column: 28
        }
      },
      "107": {
        start: {
          line: 214,
          column: 12
        },
        end: {
          line: 214,
          column: 73
        }
      },
      "108": {
        start: {
          line: 215,
          column: 12
        },
        end: {
          line: 215,
          column: 67
        }
      },
      "109": {
        start: {
          line: 220,
          column: 8
        },
        end: {
          line: 226,
          column: 9
        }
      },
      "110": {
        start: {
          line: 221,
          column: 27
        },
        end: {
          line: 221,
          column: 131
        }
      },
      "111": {
        start: {
          line: 222,
          column: 12
        },
        end: {
          line: 222,
          column: 37
        }
      },
      "112": {
        start: {
          line: 224,
          column: 12
        },
        end: {
          line: 224,
          column: 69
        }
      },
      "113": {
        start: {
          line: 225,
          column: 12
        },
        end: {
          line: 225,
          column: 63
        }
      },
      "114": {
        start: {
          line: 230,
          column: 8
        },
        end: {
          line: 244,
          column: 9
        }
      },
      "115": {
        start: {
          line: 231,
          column: 24
        },
        end: {
          line: 231,
          column: 34
        }
      },
      "116": {
        start: {
          line: 232,
          column: 32
        },
        end: {
          line: 232,
          column: 42
        }
      },
      "117": {
        start: {
          line: 233,
          column: 12
        },
        end: {
          line: 233,
          column: 51
        }
      },
      "118": {
        start: {
          line: 234,
          column: 28
        },
        end: {
          line: 239,
          column: 109
        }
      },
      "119": {
        start: {
          line: 240,
          column: 12
        },
        end: {
          line: 240,
          column: 25
        }
      },
      "120": {
        start: {
          line: 242,
          column: 12
        },
        end: {
          line: 242,
          column: 62
        }
      },
      "121": {
        start: {
          line: 243,
          column: 12
        },
        end: {
          line: 243,
          column: 56
        }
      },
      "122": {
        start: {
          line: 248,
          column: 8
        },
        end: {
          line: 282,
          column: 9
        }
      },
      "123": {
        start: {
          line: 249,
          column: 30
        },
        end: {
          line: 249,
          column: 40
        }
      },
      "124": {
        start: {
          line: 250,
          column: 65
        },
        end: {
          line: 250,
          column: 77
        }
      },
      "125": {
        start: {
          line: 251,
          column: 31
        },
        end: {
          line: 251,
          column: 57
        }
      },
      "126": {
        start: {
          line: 252,
          column: 31
        },
        end: {
          line: 254,
          column: 13
        }
      },
      "127": {
        start: {
          line: 255,
          column: 12
        },
        end: {
          line: 257,
          column: 13
        }
      },
      "128": {
        start: {
          line: 256,
          column: 16
        },
        end: {
          line: 256,
          column: 92
        }
      },
      "129": {
        start: {
          line: 259,
          column: 12
        },
        end: {
          line: 259,
          column: 493
        }
      },
      "130": {
        start: {
          line: 261,
          column: 34
        },
        end: {
          line: 263,
          column: 183
        }
      },
      "131": {
        start: {
          line: 264,
          column: 31
        },
        end: {
          line: 264,
          column: 48
        }
      },
      "132": {
        start: {
          line: 266,
          column: 30
        },
        end: {
          line: 266,
          column: 316
        }
      },
      "133": {
        start: {
          line: 267,
          column: 38
        },
        end: {
          line: 267,
          column: 169
        }
      },
      "134": {
        start: {
          line: 267,
          column: 64
        },
        end: {
          line: 267,
          column: 168
        }
      },
      "135": {
        start: {
          line: 268,
          column: 31
        },
        end: {
          line: 268,
          column: 53
        }
      },
      "136": {
        start: {
          line: 269,
          column: 12
        },
        end: {
          line: 278,
          column: 14
        }
      },
      "137": {
        start: {
          line: 280,
          column: 12
        },
        end: {
          line: 280,
          column: 83
        }
      },
      "138": {
        start: {
          line: 281,
          column: 12
        },
        end: {
          line: 281,
          column: 64
        }
      },
      "139": {
        start: {
          line: 286,
          column: 8
        },
        end: {
          line: 343,
          column: 9
        }
      },
      "140": {
        start: {
          line: 287,
          column: 30
        },
        end: {
          line: 287,
          column: 40
        }
      },
      "141": {
        start: {
          line: 288,
          column: 173
        },
        end: {
          line: 288,
          column: 185
        }
      },
      "142": {
        start: {
          line: 289,
          column: 31
        },
        end: {
          line: 291,
          column: 13
        }
      },
      "143": {
        start: {
          line: 293,
          column: 12
        },
        end: {
          line: 295,
          column: 13
        }
      },
      "144": {
        start: {
          line: 294,
          column: 16
        },
        end: {
          line: 294,
          column: 106
        }
      },
      "145": {
        start: {
          line: 296,
          column: 12
        },
        end: {
          line: 298,
          column: 13
        }
      },
      "146": {
        start: {
          line: 297,
          column: 16
        },
        end: {
          line: 297,
          column: 94
        }
      },
      "147": {
        start: {
          line: 299,
          column: 12
        },
        end: {
          line: 301,
          column: 13
        }
      },
      "148": {
        start: {
          line: 300,
          column: 16
        },
        end: {
          line: 300,
          column: 96
        }
      },
      "149": {
        start: {
          line: 302,
          column: 12
        },
        end: {
          line: 305,
          column: 13
        }
      },
      "150": {
        start: {
          line: 303,
          column: 28
        },
        end: {
          line: 303,
          column: 38
        }
      },
      "151": {
        start: {
          line: 304,
          column: 16
        },
        end: {
          line: 304,
          column: 185
        }
      },
      "152": {
        start: {
          line: 306,
          column: 12
        },
        end: {
          line: 311,
          column: 13
        }
      },
      "153": {
        start: {
          line: 307,
          column: 28
        },
        end: {
          line: 307,
          column: 38
        }
      },
      "154": {
        start: {
          line: 308,
          column: 35
        },
        end: {
          line: 308,
          column: 45
        }
      },
      "155": {
        start: {
          line: 309,
          column: 16
        },
        end: {
          line: 309,
          column: 64
        }
      },
      "156": {
        start: {
          line: 310,
          column: 16
        },
        end: {
          line: 310,
          column: 257
        }
      },
      "157": {
        start: {
          line: 312,
          column: 12
        },
        end: {
          line: 314,
          column: 13
        }
      },
      "158": {
        start: {
          line: 313,
          column: 16
        },
        end: {
          line: 313,
          column: 102
        }
      },
      "159": {
        start: {
          line: 315,
          column: 12
        },
        end: {
          line: 317,
          column: 13
        }
      },
      "160": {
        start: {
          line: 316,
          column: 16
        },
        end: {
          line: 316,
          column: 103
        }
      },
      "161": {
        start: {
          line: 318,
          column: 12
        },
        end: {
          line: 320,
          column: 13
        }
      },
      "162": {
        start: {
          line: 319,
          column: 16
        },
        end: {
          line: 319,
          column: 203
        }
      },
      "163": {
        start: {
          line: 321,
          column: 12
        },
        end: {
          line: 323,
          column: 13
        }
      },
      "164": {
        start: {
          line: 322,
          column: 16
        },
        end: {
          line: 322,
          column: 204
        }
      },
      "165": {
        start: {
          line: 325,
          column: 34
        },
        end: {
          line: 327,
          column: 183
        }
      },
      "166": {
        start: {
          line: 328,
          column: 31
        },
        end: {
          line: 328,
          column: 48
        }
      },
      "167": {
        start: {
          line: 330,
          column: 30
        },
        end: {
          line: 330,
          column: 406
        }
      },
      "168": {
        start: {
          line: 331,
          column: 38
        },
        end: {
          line: 331,
          column: 169
        }
      },
      "169": {
        start: {
          line: 331,
          column: 64
        },
        end: {
          line: 331,
          column: 168
        }
      },
      "170": {
        start: {
          line: 332,
          column: 31
        },
        end: {
          line: 332,
          column: 53
        }
      },
      "171": {
        start: {
          line: 333,
          column: 12
        },
        end: {
          line: 339,
          column: 14
        }
      },
      "172": {
        start: {
          line: 341,
          column: 12
        },
        end: {
          line: 341,
          column: 80
        }
      },
      "173": {
        start: {
          line: 342,
          column: 12
        },
        end: {
          line: 342,
          column: 74
        }
      },
      "174": {
        start: {
          line: 347,
          column: 8
        },
        end: {
          line: 359,
          column: 9
        }
      },
      "175": {
        start: {
          line: 348,
          column: 31
        },
        end: {
          line: 350,
          column: 13
        }
      },
      "176": {
        start: {
          line: 351,
          column: 12
        },
        end: {
          line: 353,
          column: 13
        }
      },
      "177": {
        start: {
          line: 352,
          column: 16
        },
        end: {
          line: 352,
          column: 92
        }
      },
      "178": {
        start: {
          line: 354,
          column: 30
        },
        end: {
          line: 354,
          column: 288
        }
      },
      "179": {
        start: {
          line: 355,
          column: 12
        },
        end: {
          line: 355,
          column: 151
        }
      },
      "180": {
        start: {
          line: 355,
          column: 45
        },
        end: {
          line: 355,
          column: 149
        }
      },
      "181": {
        start: {
          line: 357,
          column: 12
        },
        end: {
          line: 357,
          column: 76
        }
      },
      "182": {
        start: {
          line: 358,
          column: 12
        },
        end: {
          line: 358,
          column: 70
        }
      },
      "183": {
        start: {
          line: 363,
          column: 8
        },
        end: {
          line: 399,
          column: 9
        }
      },
      "184": {
        start: {
          line: 364,
          column: 24
        },
        end: {
          line: 364,
          column: 34
        }
      },
      "185": {
        start: {
          line: 365,
          column: 29
        },
        end: {
          line: 365,
          column: 39
        }
      },
      "186": {
        start: {
          line: 366,
          column: 12
        },
        end: {
          line: 366,
          column: 48
        }
      },
      "187": {
        start: {
          line: 367,
          column: 32
        },
        end: {
          line: 367,
          column: 42
        }
      },
      "188": {
        start: {
          line: 368,
          column: 12
        },
        end: {
          line: 368,
          column: 51
        }
      },
      "189": {
        start: {
          line: 370,
          column: 30
        },
        end: {
          line: 370,
          column: 74
        }
      },
      "190": {
        start: {
          line: 372,
          column: 28
        },
        end: {
          line: 372,
          column: 91
        }
      },
      "191": {
        start: {
          line: 372,
          column: 57
        },
        end: {
          line: 372,
          column: 90
        }
      },
      "192": {
        start: {
          line: 373,
          column: 29
        },
        end: {
          line: 373,
          column: 94
        }
      },
      "193": {
        start: {
          line: 373,
          column: 58
        },
        end: {
          line: 373,
          column: 93
        }
      },
      "194": {
        start: {
          line: 374,
          column: 28
        },
        end: {
          line: 374,
          column: 92
        }
      },
      "195": {
        start: {
          line: 374,
          column: 57
        },
        end: {
          line: 374,
          column: 91
        }
      },
      "196": {
        start: {
          line: 376,
          column: 34
        },
        end: {
          line: 380,
          column: 14
        }
      },
      "197": {
        start: {
          line: 377,
          column: 16
        },
        end: {
          line: 377,
          column: 59
        }
      },
      "198": {
        start: {
          line: 377,
          column: 46
        },
        end: {
          line: 377,
          column: 59
        }
      },
      "199": {
        start: {
          line: 378,
          column: 34
        },
        end: {
          line: 378,
          column: 132
        }
      },
      "200": {
        start: {
          line: 379,
          column: 16
        },
        end: {
          line: 379,
          column: 60
        }
      },
      "201": {
        start: {
          line: 382,
          column: 35
        },
        end: {
          line: 382,
          column: 73
        }
      },
      "202": {
        start: {
          line: 383,
          column: 12
        },
        end: {
          line: 395,
          column: 14
        }
      },
      "203": {
        start: {
          line: 397,
          column: 12
        },
        end: {
          line: 397,
          column: 71
        }
      },
      "204": {
        start: {
          line: 398,
          column: 12
        },
        end: {
          line: 398,
          column: 65
        }
      },
      "205": {
        start: {
          line: 403,
          column: 8
        },
        end: {
          line: 424,
          column: 9
        }
      },
      "206": {
        start: {
          line: 406,
          column: 30
        },
        end: {
          line: 408,
          column: 328
        }
      },
      "207": {
        start: {
          line: 409,
          column: 12
        },
        end: {
          line: 409,
          column: 49
        }
      },
      "208": {
        start: {
          line: 409,
          column: 40
        },
        end: {
          line: 409,
          column: 49
        }
      },
      "209": {
        start: {
          line: 411,
          column: 25
        },
        end: {
          line: 411,
          column: 26
        }
      },
      "210": {
        start: {
          line: 412,
          column: 24
        },
        end: {
          line: 412,
          column: 34
        }
      },
      "211": {
        start: {
          line: 413,
          column: 12
        },
        end: {
          line: 419,
          column: 13
        }
      },
      "212": {
        start: {
          line: 414,
          column: 16
        },
        end: {
          line: 414,
          column: 52
        }
      },
      "213": {
        start: {
          line: 414,
          column: 46
        },
        end: {
          line: 414,
          column: 52
        }
      },
      "214": {
        start: {
          line: 415,
          column: 34
        },
        end: {
          line: 415,
          column: 121
        }
      },
      "215": {
        start: {
          line: 416,
          column: 16
        },
        end: {
          line: 418,
          column: 17
        }
      },
      "216": {
        start: {
          line: 417,
          column: 20
        },
        end: {
          line: 417,
          column: 49
        }
      },
      "217": {
        start: {
          line: 420,
          column: 12
        },
        end: {
          line: 420,
          column: 26
        }
      },
      "218": {
        start: {
          line: 422,
          column: 12
        },
        end: {
          line: 422,
          column: 69
        }
      },
      "219": {
        start: {
          line: 423,
          column: 12
        },
        end: {
          line: 423,
          column: 21
        }
      },
      "220": {
        start: {
          line: 428,
          column: 8
        },
        end: {
          line: 478,
          column: 9
        }
      },
      "221": {
        start: {
          line: 429,
          column: 79
        },
        end: {
          line: 429,
          column: 88
        }
      },
      "222": {
        start: {
          line: 430,
          column: 28
        },
        end: {
          line: 430,
          column: 30
        }
      },
      "223": {
        start: {
          line: 431,
          column: 31
        },
        end: {
          line: 431,
          column: 32
        }
      },
      "224": {
        start: {
          line: 432,
          column: 31
        },
        end: {
          line: 432,
          column: 32
        }
      },
      "225": {
        start: {
          line: 433,
          column: 12
        },
        end: {
          line: 468,
          column: 13
        }
      },
      "226": {
        start: {
          line: 434,
          column: 16
        },
        end: {
          line: 467,
          column: 17
        }
      },
      "227": {
        start: {
          line: 436,
          column: 20
        },
        end: {
          line: 454,
          column: 21
        }
      },
      "228": {
        start: {
          line: 438,
          column: 28
        },
        end: {
          line: 438,
          column: 63
        }
      },
      "229": {
        start: {
          line: 439,
          column: 28
        },
        end: {
          line: 439,
          column: 34
        }
      },
      "230": {
        start: {
          line: 441,
          column: 28
        },
        end: {
          line: 441,
          column: 63
        }
      },
      "231": {
        start: {
          line: 442,
          column: 28
        },
        end: {
          line: 442,
          column: 34
        }
      },
      "232": {
        start: {
          line: 444,
          column: 28
        },
        end: {
          line: 444,
          column: 50
        }
      },
      "233": {
        start: {
          line: 445,
          column: 28
        },
        end: {
          line: 447,
          column: 30
        }
      },
      "234": {
        start: {
          line: 448,
          column: 28
        },
        end: {
          line: 448,
          column: 34
        }
      },
      "235": {
        start: {
          line: 450,
          column: 28
        },
        end: {
          line: 450,
          column: 82
        }
      },
      "236": {
        start: {
          line: 451,
          column: 28
        },
        end: {
          line: 451,
          column: 34
        }
      },
      "237": {
        start: {
          line: 453,
          column: 28
        },
        end: {
          line: 453,
          column: 72
        }
      },
      "238": {
        start: {
          line: 455,
          column: 20
        },
        end: {
          line: 458,
          column: 23
        }
      },
      "239": {
        start: {
          line: 459,
          column: 20
        },
        end: {
          line: 459,
          column: 35
        }
      },
      "240": {
        start: {
          line: 461,
          column: 20
        },
        end: {
          line: 465,
          column: 23
        }
      },
      "241": {
        start: {
          line: 466,
          column: 20
        },
        end: {
          line: 466,
          column: 35
        }
      },
      "242": {
        start: {
          line: 469,
          column: 12
        },
        end: {
          line: 474,
          column: 14
        }
      },
      "243": {
        start: {
          line: 476,
          column: 12
        },
        end: {
          line: 476,
          column: 70
        }
      },
      "244": {
        start: {
          line: 477,
          column: 12
        },
        end: {
          line: 477,
          column: 64
        }
      },
      "245": {
        start: {
          line: 482,
          column: 8
        },
        end: {
          line: 488,
          column: 9
        }
      },
      "246": {
        start: {
          line: 483,
          column: 30
        },
        end: {
          line: 483,
          column: 443
        }
      },
      "247": {
        start: {
          line: 484,
          column: 12
        },
        end: {
          line: 484,
          column: 151
        }
      },
      "248": {
        start: {
          line: 484,
          column: 45
        },
        end: {
          line: 484,
          column: 149
        }
      },
      "249": {
        start: {
          line: 486,
          column: 12
        },
        end: {
          line: 486,
          column: 79
        }
      },
      "250": {
        start: {
          line: 487,
          column: 12
        },
        end: {
          line: 487,
          column: 73
        }
      },
      "251": {
        start: {
          line: 492,
          column: 8
        },
        end: {
          line: 500,
          column: 9
        }
      },
      "252": {
        start: {
          line: 493,
          column: 30
        },
        end: {
          line: 495,
          column: 232
        }
      },
      "253": {
        start: {
          line: 496,
          column: 12
        },
        end: {
          line: 496,
          column: 66
        }
      },
      "254": {
        start: {
          line: 496,
          column: 38
        },
        end: {
          line: 496,
          column: 48
        }
      },
      "255": {
        start: {
          line: 498,
          column: 12
        },
        end: {
          line: 498,
          column: 66
        }
      },
      "256": {
        start: {
          line: 499,
          column: 12
        },
        end: {
          line: 499,
          column: 60
        }
      },
      "257": {
        start: {
          line: 504,
          column: 8
        },
        end: {
          line: 511,
          column: 9
        }
      },
      "258": {
        start: {
          line: 505,
          column: 31
        },
        end: {
          line: 505,
          column: 239
        }
      },
      "259": {
        start: {
          line: 506,
          column: 12
        },
        end: {
          line: 506,
          column: 59
        }
      },
      "260": {
        start: {
          line: 506,
          column: 47
        },
        end: {
          line: 506,
          column: 59
        }
      },
      "261": {
        start: {
          line: 507,
          column: 12
        },
        end: {
          line: 507,
          column: 124
        }
      },
      "262": {
        start: {
          line: 509,
          column: 12
        },
        end: {
          line: 509,
          column: 81
        }
      },
      "263": {
        start: {
          line: 510,
          column: 12
        },
        end: {
          line: 510,
          column: 69
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 17,
            column: 4
          },
          end: {
            line: 17,
            column: 5
          }
        },
        loc: {
          start: {
            line: 17,
            column: 38
          },
          end: {
            line: 25,
            column: 5
          }
        },
        line: 17
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 27,
            column: 4
          },
          end: {
            line: 27,
            column: 5
          }
        },
        loc: {
          start: {
            line: 27,
            column: 29
          },
          end: {
            line: 39,
            column: 5
          }
        },
        line: 27
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 41,
            column: 4
          },
          end: {
            line: 41,
            column: 5
          }
        },
        loc: {
          start: {
            line: 41,
            column: 56
          },
          end: {
            line: 58,
            column: 5
          }
        },
        line: 41
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 50,
            column: 33
          },
          end: {
            line: 50,
            column: 34
          }
        },
        loc: {
          start: {
            line: 50,
            column: 46
          },
          end: {
            line: 53,
            column: 17
          }
        },
        line: 50
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 60,
            column: 4
          },
          end: {
            line: 60,
            column: 5
          }
        },
        loc: {
          start: {
            line: 60,
            column: 46
          },
          end: {
            line: 72,
            column: 5
          }
        },
        line: 60
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 64,
            column: 33
          },
          end: {
            line: 64,
            column: 34
          }
        },
        loc: {
          start: {
            line: 64,
            column: 46
          },
          end: {
            line: 67,
            column: 17
          }
        },
        line: 64
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 74,
            column: 4
          },
          end: {
            line: 74,
            column: 5
          }
        },
        loc: {
          start: {
            line: 74,
            column: 61
          },
          end: {
            line: 88,
            column: 5
          }
        },
        line: 74
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 80,
            column: 33
          },
          end: {
            line: 80,
            column: 34
          }
        },
        loc: {
          start: {
            line: 80,
            column: 46
          },
          end: {
            line: 83,
            column: 17
          }
        },
        line: 80
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 90,
            column: 4
          },
          end: {
            line: 90,
            column: 5
          }
        },
        loc: {
          start: {
            line: 90,
            column: 39
          },
          end: {
            line: 102,
            column: 5
          }
        },
        line: 90
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 94,
            column: 33
          },
          end: {
            line: 94,
            column: 34
          }
        },
        loc: {
          start: {
            line: 94,
            column: 46
          },
          end: {
            line: 97,
            column: 17
          }
        },
        line: 94
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 104,
            column: 4
          },
          end: {
            line: 104,
            column: 5
          }
        },
        loc: {
          start: {
            line: 104,
            column: 42
          },
          end: {
            line: 118,
            column: 5
          }
        },
        line: 104
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 120,
            column: 4
          },
          end: {
            line: 120,
            column: 5
          }
        },
        loc: {
          start: {
            line: 120,
            column: 51
          },
          end: {
            line: 158,
            column: 5
          }
        },
        line: 120
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 160,
            column: 4
          },
          end: {
            line: 160,
            column: 5
          }
        },
        loc: {
          start: {
            line: 160,
            column: 48
          },
          end: {
            line: 185,
            column: 5
          }
        },
        line: 160
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 187,
            column: 4
          },
          end: {
            line: 187,
            column: 5
          }
        },
        loc: {
          start: {
            line: 187,
            column: 32
          },
          end: {
            line: 201,
            column: 5
          }
        },
        line: 187
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 203,
            column: 4
          },
          end: {
            line: 203,
            column: 5
          }
        },
        loc: {
          start: {
            line: 203,
            column: 32
          },
          end: {
            line: 217,
            column: 5
          }
        },
        line: 203
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 219,
            column: 4
          },
          end: {
            line: 219,
            column: 5
          }
        },
        loc: {
          start: {
            line: 219,
            column: 28
          },
          end: {
            line: 227,
            column: 5
          }
        },
        line: 219
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 229,
            column: 4
          },
          end: {
            line: 229,
            column: 5
          }
        },
        loc: {
          start: {
            line: 229,
            column: 38
          },
          end: {
            line: 245,
            column: 5
          }
        },
        line: 229
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 247,
            column: 4
          },
          end: {
            line: 247,
            column: 5
          }
        },
        loc: {
          start: {
            line: 247,
            column: 49
          },
          end: {
            line: 283,
            column: 5
          }
        },
        line: 247
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 267,
            column: 52
          },
          end: {
            line: 267,
            column: 53
          }
        },
        loc: {
          start: {
            line: 267,
            column: 64
          },
          end: {
            line: 267,
            column: 168
          }
        },
        line: 267
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 285,
            column: 4
          },
          end: {
            line: 285,
            column: 5
          }
        },
        loc: {
          start: {
            line: 285,
            column: 46
          },
          end: {
            line: 344,
            column: 5
          }
        },
        line: 285
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 331,
            column: 52
          },
          end: {
            line: 331,
            column: 53
          }
        },
        loc: {
          start: {
            line: 331,
            column: 64
          },
          end: {
            line: 331,
            column: 168
          }
        },
        line: 331
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 346,
            column: 4
          },
          end: {
            line: 346,
            column: 5
          }
        },
        loc: {
          start: {
            line: 346,
            column: 64
          },
          end: {
            line: 360,
            column: 5
          }
        },
        line: 346
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 355,
            column: 33
          },
          end: {
            line: 355,
            column: 34
          }
        },
        loc: {
          start: {
            line: 355,
            column: 45
          },
          end: {
            line: 355,
            column: 149
          }
        },
        line: 355
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 362,
            column: 4
          },
          end: {
            line: 362,
            column: 5
          }
        },
        loc: {
          start: {
            line: 362,
            column: 46
          },
          end: {
            line: 400,
            column: 5
          }
        },
        line: 362
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 372,
            column: 45
          },
          end: {
            line: 372,
            column: 46
          }
        },
        loc: {
          start: {
            line: 372,
            column: 57
          },
          end: {
            line: 372,
            column: 90
          }
        },
        line: 372
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 373,
            column: 46
          },
          end: {
            line: 373,
            column: 47
          }
        },
        loc: {
          start: {
            line: 373,
            column: 58
          },
          end: {
            line: 373,
            column: 93
          }
        },
        line: 373
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 374,
            column: 45
          },
          end: {
            line: 374,
            column: 46
          }
        },
        loc: {
          start: {
            line: 374,
            column: 57
          },
          end: {
            line: 374,
            column: 91
          }
        },
        line: 374
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 376,
            column: 51
          },
          end: {
            line: 376,
            column: 52
          }
        },
        loc: {
          start: {
            line: 376,
            column: 63
          },
          end: {
            line: 380,
            column: 13
          }
        },
        line: 376
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 402,
            column: 4
          },
          end: {
            line: 402,
            column: 5
          }
        },
        loc: {
          start: {
            line: 402,
            column: 45
          },
          end: {
            line: 425,
            column: 5
          }
        },
        line: 402
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 427,
            column: 4
          },
          end: {
            line: 427,
            column: 5
          }
        },
        loc: {
          start: {
            line: 427,
            column: 42
          },
          end: {
            line: 479,
            column: 5
          }
        },
        line: 427
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 481,
            column: 4
          },
          end: {
            line: 481,
            column: 5
          }
        },
        loc: {
          start: {
            line: 481,
            column: 49
          },
          end: {
            line: 489,
            column: 5
          }
        },
        line: 481
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 484,
            column: 33
          },
          end: {
            line: 484,
            column: 34
          }
        },
        loc: {
          start: {
            line: 484,
            column: 45
          },
          end: {
            line: 484,
            column: 149
          }
        },
        line: 484
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 491,
            column: 4
          },
          end: {
            line: 491,
            column: 5
          }
        },
        loc: {
          start: {
            line: 491,
            column: 42
          },
          end: {
            line: 501,
            column: 5
          }
        },
        line: 491
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 496,
            column: 33
          },
          end: {
            line: 496,
            column: 34
          }
        },
        loc: {
          start: {
            line: 496,
            column: 38
          },
          end: {
            line: 496,
            column: 48
          }
        },
        line: 496
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 503,
            column: 4
          },
          end: {
            line: 503,
            column: 5
          }
        },
        loc: {
          start: {
            line: 503,
            column: 37
          },
          end: {
            line: 512,
            column: 5
          }
        },
        line: 503
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 30,
            column: 12
          },
          end: {
            line: 30,
            column: 39
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 12
          },
          end: {
            line: 30,
            column: 39
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 30
      },
      "1": {
        loc: {
          start: {
            line: 41,
            column: 37
          },
          end: {
            line: 41,
            column: 54
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 41,
            column: 50
          },
          end: {
            line: 41,
            column: 54
          }
        }],
        line: 41
      },
      "2": {
        loc: {
          start: {
            line: 46,
            column: 12
          },
          end: {
            line: 48,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 46,
            column: 12
          },
          end: {
            line: 48,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 46
      },
      "3": {
        loc: {
          start: {
            line: 74,
            column: 46
          },
          end: {
            line: 74,
            column: 59
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 74,
            column: 58
          },
          end: {
            line: 74,
            column: 59
          }
        }],
        line: 74
      },
      "4": {
        loc: {
          start: {
            line: 110,
            column: 12
          },
          end: {
            line: 112,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 110,
            column: 12
          },
          end: {
            line: 112,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 110
      },
      "5": {
        loc: {
          start: {
            line: 122,
            column: 24
          },
          end: {
            line: 122,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 122,
            column: 24
          },
          end: {
            line: 122,
            column: 38
          }
        }, {
          start: {
            line: 122,
            column: 42
          },
          end: {
            line: 122,
            column: 52
          }
        }],
        line: 122
      },
      "6": {
        loc: {
          start: {
            line: 125,
            column: 12
          },
          end: {
            line: 127,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 125,
            column: 12
          },
          end: {
            line: 127,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 125
      },
      "7": {
        loc: {
          start: {
            line: 130,
            column: 12
          },
          end: {
            line: 147,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 130,
            column: 12
          },
          end: {
            line: 147,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 130
      },
      "8": {
        loc: {
          start: {
            line: 132,
            column: 16
          },
          end: {
            line: 146,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 132,
            column: 16
          },
          end: {
            line: 146,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 132
      },
      "9": {
        loc: {
          start: {
            line: 135,
            column: 20
          },
          end: {
            line: 145,
            column: 21
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 136,
            column: 24
          },
          end: {
            line: 138,
            column: 34
          }
        }, {
          start: {
            line: 139,
            column: 24
          },
          end: {
            line: 141,
            column: 34
          }
        }, {
          start: {
            line: 142,
            column: 24
          },
          end: {
            line: 144,
            column: 34
          }
        }],
        line: 135
      },
      "10": {
        loc: {
          start: {
            line: 162,
            column: 24
          },
          end: {
            line: 162,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 162,
            column: 24
          },
          end: {
            line: 162,
            column: 33
          }
        }, {
          start: {
            line: 162,
            column: 37
          },
          end: {
            line: 162,
            column: 47
          }
        }],
        line: 162
      },
      "11": {
        loc: {
          start: {
            line: 167,
            column: 12
          },
          end: {
            line: 175,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 167,
            column: 12
          },
          end: {
            line: 175,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 167
      },
      "12": {
        loc: {
          start: {
            line: 170,
            column: 16
          },
          end: {
            line: 174,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 170,
            column: 16
          },
          end: {
            line: 174,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 170
      },
      "13": {
        loc: {
          start: {
            line: 171,
            column: 42
          },
          end: {
            line: 171,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 171,
            column: 42
          },
          end: {
            line: 171,
            column: 63
          }
        }, {
          start: {
            line: 171,
            column: 67
          },
          end: {
            line: 171,
            column: 69
          }
        }],
        line: 171
      },
      "14": {
        loc: {
          start: {
            line: 173,
            column: 39
          },
          end: {
            line: 173,
            column: 99
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 173,
            column: 55
          },
          end: {
            line: 173,
            column: 87
          }
        }, {
          start: {
            line: 173,
            column: 90
          },
          end: {
            line: 173,
            column: 99
          }
        }],
        line: 173
      },
      "15": {
        loc: {
          start: {
            line: 177,
            column: 12
          },
          end: {
            line: 179,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 177,
            column: 12
          },
          end: {
            line: 179,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 177
      },
      "16": {
        loc: {
          start: {
            line: 193,
            column: 12
          },
          end: {
            line: 195,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 193,
            column: 12
          },
          end: {
            line: 195,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 193
      },
      "17": {
        loc: {
          start: {
            line: 209,
            column: 12
          },
          end: {
            line: 211,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 209,
            column: 12
          },
          end: {
            line: 211,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 209
      },
      "18": {
        loc: {
          start: {
            line: 255,
            column: 12
          },
          end: {
            line: 257,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 255,
            column: 12
          },
          end: {
            line: 257,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 255
      },
      "19": {
        loc: {
          start: {
            line: 293,
            column: 12
          },
          end: {
            line: 295,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 293,
            column: 12
          },
          end: {
            line: 295,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 293
      },
      "20": {
        loc: {
          start: {
            line: 296,
            column: 12
          },
          end: {
            line: 298,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 296,
            column: 12
          },
          end: {
            line: 298,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 296
      },
      "21": {
        loc: {
          start: {
            line: 299,
            column: 12
          },
          end: {
            line: 301,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 299,
            column: 12
          },
          end: {
            line: 301,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 299
      },
      "22": {
        loc: {
          start: {
            line: 302,
            column: 12
          },
          end: {
            line: 305,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 302,
            column: 12
          },
          end: {
            line: 305,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 302
      },
      "23": {
        loc: {
          start: {
            line: 306,
            column: 12
          },
          end: {
            line: 311,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 306,
            column: 12
          },
          end: {
            line: 311,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 306
      },
      "24": {
        loc: {
          start: {
            line: 312,
            column: 12
          },
          end: {
            line: 314,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 312,
            column: 12
          },
          end: {
            line: 314,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 312
      },
      "25": {
        loc: {
          start: {
            line: 315,
            column: 12
          },
          end: {
            line: 317,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 315,
            column: 12
          },
          end: {
            line: 317,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 315
      },
      "26": {
        loc: {
          start: {
            line: 318,
            column: 12
          },
          end: {
            line: 320,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 318,
            column: 12
          },
          end: {
            line: 320,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 318
      },
      "27": {
        loc: {
          start: {
            line: 321,
            column: 12
          },
          end: {
            line: 323,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 321,
            column: 12
          },
          end: {
            line: 323,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 321
      },
      "28": {
        loc: {
          start: {
            line: 330,
            column: 232
          },
          end: {
            line: 330,
            column: 377
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 330,
            column: 261
          },
          end: {
            line: 330,
            column: 319
          }
        }, {
          start: {
            line: 330,
            column: 322
          },
          end: {
            line: 330,
            column: 377
          }
        }],
        line: 330
      },
      "29": {
        loc: {
          start: {
            line: 330,
            column: 232
          },
          end: {
            line: 330,
            column: 258
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 330,
            column: 232
          },
          end: {
            line: 330,
            column: 243
          }
        }, {
          start: {
            line: 330,
            column: 247
          },
          end: {
            line: 330,
            column: 258
          }
        }],
        line: 330
      },
      "30": {
        loc: {
          start: {
            line: 346,
            column: 45
          },
          end: {
            line: 346,
            column: 62
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 346,
            column: 58
          },
          end: {
            line: 346,
            column: 62
          }
        }],
        line: 346
      },
      "31": {
        loc: {
          start: {
            line: 351,
            column: 12
          },
          end: {
            line: 353,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 351,
            column: 12
          },
          end: {
            line: 353,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 351
      },
      "32": {
        loc: {
          start: {
            line: 377,
            column: 16
          },
          end: {
            line: 377,
            column: 59
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 377,
            column: 16
          },
          end: {
            line: 377,
            column: 59
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 377
      },
      "33": {
        loc: {
          start: {
            line: 379,
            column: 23
          },
          end: {
            line: 379,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 379,
            column: 23
          },
          end: {
            line: 379,
            column: 41
          }
        }, {
          start: {
            line: 379,
            column: 45
          },
          end: {
            line: 379,
            column: 59
          }
        }],
        line: 379
      },
      "34": {
        loc: {
          start: {
            line: 409,
            column: 12
          },
          end: {
            line: 409,
            column: 49
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 409,
            column: 12
          },
          end: {
            line: 409,
            column: 49
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 409
      },
      "35": {
        loc: {
          start: {
            line: 414,
            column: 16
          },
          end: {
            line: 414,
            column: 52
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 414,
            column: 16
          },
          end: {
            line: 414,
            column: 52
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 414
      },
      "36": {
        loc: {
          start: {
            line: 416,
            column: 16
          },
          end: {
            line: 418,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 416,
            column: 16
          },
          end: {
            line: 418,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 416
      },
      "37": {
        loc: {
          start: {
            line: 436,
            column: 20
          },
          end: {
            line: 454,
            column: 21
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 437,
            column: 24
          },
          end: {
            line: 439,
            column: 34
          }
        }, {
          start: {
            line: 440,
            column: 24
          },
          end: {
            line: 442,
            column: 34
          }
        }, {
          start: {
            line: 443,
            column: 24
          },
          end: {
            line: 448,
            column: 34
          }
        }, {
          start: {
            line: 449,
            column: 24
          },
          end: {
            line: 451,
            column: 34
          }
        }, {
          start: {
            line: 452,
            column: 24
          },
          end: {
            line: 453,
            column: 72
          }
        }],
        line: 436
      },
      "38": {
        loc: {
          start: {
            line: 464,
            column: 31
          },
          end: {
            line: 464,
            column: 87
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 464,
            column: 56
          },
          end: {
            line: 464,
            column: 69
          }
        }, {
          start: {
            line: 464,
            column: 72
          },
          end: {
            line: 464,
            column: 87
          }
        }],
        line: 464
      },
      "39": {
        loc: {
          start: {
            line: 506,
            column: 12
          },
          end: {
            line: 506,
            column: 59
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 506,
            column: 12
          },
          end: {
            line: 506,
            column: 59
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 506
      },
      "40": {
        loc: {
          start: {
            line: 506,
            column: 16
          },
          end: {
            line: 506,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 506,
            column: 16
          },
          end: {
            line: 506,
            column: 25
          }
        }, {
          start: {
            line: 506,
            column: 29
          },
          end: {
            line: 506,
            column: 45
          }
        }],
        line: 506
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0,
      "210": 0,
      "211": 0,
      "212": 0,
      "213": 0,
      "214": 0,
      "215": 0,
      "216": 0,
      "217": 0,
      "218": 0,
      "219": 0,
      "220": 0,
      "221": 0,
      "222": 0,
      "223": 0,
      "224": 0,
      "225": 0,
      "226": 0,
      "227": 0,
      "228": 0,
      "229": 0,
      "230": 0,
      "231": 0,
      "232": 0,
      "233": 0,
      "234": 0,
      "235": 0,
      "236": 0,
      "237": 0,
      "238": 0,
      "239": 0,
      "240": 0,
      "241": 0,
      "242": 0,
      "243": 0,
      "244": 0,
      "245": 0,
      "246": 0,
      "247": 0,
      "248": 0,
      "249": 0,
      "250": 0,
      "251": 0,
      "252": 0,
      "253": 0,
      "254": 0,
      "255": 0,
      "256": 0,
      "257": 0,
      "258": 0,
      "259": 0,
      "260": 0,
      "261": 0,
      "262": 0,
      "263": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0
    },
    b: {
      "0": [0, 0],
      "1": [0],
      "2": [0, 0],
      "3": [0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0, 0, 0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/stefanbekker/projects/fancy-planties/src/lib/db/queries/plant-instances.ts"],
      sourcesContent: ["import { eq, and, desc, asc, isNotNull, lte, gte, ilike, or, sql, inArray } from 'drizzle-orm';\nimport { db } from '../index';\nimport { plantInstances, plants, type PlantInstance, type NewPlantInstance } from '../schema';\nimport type { \n  PlantInstanceFilter, \n  PlantInstanceSearch,\n  BulkPlantInstanceOperation \n} from '@/lib/validation/plant-schemas';\nimport type { \n  EnhancedPlantInstance, \n  PlantInstanceSearchResult,\n  CareDashboardData,\n  BulkOperationResult,\n  PlantInstanceOperationResult\n} from '@/lib/types/plant-instance-types';\nimport { plantInstanceHelpers } from '@/lib/types/plant-instance-types';\n\n// Plant instance CRUD operations\nexport class PlantInstanceQueries {\n  // Create a new plant instance\n  static async create(instanceData: NewPlantInstance): Promise<PlantInstance> {\n    try {\n      const [instance] = await db.insert(plantInstances).values(instanceData).returning();\n      return instance;\n    } catch (error) {\n      console.error('Failed to create plant instance:', error);\n      throw new Error('Failed to create plant instance');\n    }\n  }\n\n  // Get plant instance by ID with plant taxonomy data\n  static async getById(id: number): Promise<(PlantInstance & { plant: typeof plants.$inferSelect }) | null> {\n    try {\n      const [instance] = await db\n        .select()\n        .from(plantInstances)\n        .leftJoin(plants, eq(plantInstances.plantId, plants.id))\n        .where(eq(plantInstances.id, id));\n      \n      if (!instance) return null;\n      \n      return {\n        ...instance.plant_instances,\n        plant: instance.plants!\n      };\n    } catch (error) {\n      console.error('Failed to get plant instance by ID:', error);\n      throw new Error('Failed to get plant instance');\n    }\n  }\n\n  // Get all plant instances for a user\n  static async getByUserId(userId: number, activeOnly: boolean = true): Promise<(PlantInstance & { plant: typeof plants.$inferSelect })[]> {\n    try {\n      const conditions = [eq(plantInstances.userId, userId)];\n      if (activeOnly) {\n        conditions.push(eq(plantInstances.isActive, true));\n      }\n\n      const instances = await db\n        .select()\n        .from(plantInstances)\n        .leftJoin(plants, eq(plantInstances.plantId, plants.id))\n        .where(and(...conditions))\n        .orderBy(desc(plantInstances.createdAt));\n\n      return instances.map(instance => ({\n        ...instance.plant_instances,\n        plant: instance.plants!\n      }));\n    } catch (error) {\n      console.error('Failed to get plant instances by user ID:', error);\n      throw new Error('Failed to get plant instances');\n    }\n  }\n\n  // Get plant instances with overdue fertilizer\n  static async getOverdueFertilizer(userId: number): Promise<(PlantInstance & { plant: typeof plants.$inferSelect })[]> {\n    try {\n      const now = new Date();\n      const instances = await db\n        .select()\n        .from(plantInstances)\n        .leftJoin(plants, eq(plantInstances.plantId, plants.id))\n        .where(\n          and(\n            eq(plantInstances.userId, userId),\n            eq(plantInstances.isActive, true),\n            isNotNull(plantInstances.fertilizerDue),\n            lte(plantInstances.fertilizerDue, now)\n          )\n        )\n        .orderBy(asc(plantInstances.fertilizerDue));\n\n      return instances.map(instance => ({\n        ...instance.plant_instances,\n        plant: instance.plants!\n      }));\n    } catch (error) {\n      console.error('Failed to get overdue fertilizer instances:', error);\n      throw new Error('Failed to get overdue fertilizer instances');\n    }\n  }\n\n  // Get plant instances with fertilizer due soon\n  static async getFertilizerDueSoon(userId: number, daysAhead: number = 7): Promise<(PlantInstance & { plant: typeof plants.$inferSelect })[]> {\n    try {\n      const now = new Date();\n      const futureDate = new Date();\n      futureDate.setDate(now.getDate() + daysAhead);\n\n      const instances = await db\n        .select()\n        .from(plantInstances)\n        .leftJoin(plants, eq(plantInstances.plantId, plants.id))\n        .where(\n          and(\n            eq(plantInstances.userId, userId),\n            eq(plantInstances.isActive, true),\n            isNotNull(plantInstances.fertilizerDue),\n            gte(plantInstances.fertilizerDue, now),\n            lte(plantInstances.fertilizerDue, futureDate)\n          )\n        )\n        .orderBy(asc(plantInstances.fertilizerDue));\n\n      return instances.map(instance => ({\n        ...instance.plant_instances,\n        plant: instance.plants!\n      }));\n    } catch (error) {\n      console.error('Failed to get fertilizer due soon instances:', error);\n      throw new Error('Failed to get fertilizer due soon instances');\n    }\n  }\n\n  // Search plant instances by nickname, location, or notes\n  static async search(userId: number, query: string): Promise<(PlantInstance & { plant: typeof plants.$inferSelect })[]> {\n    try {\n      const searchTerm = `%${query.toLowerCase()}%`;\n      \n      const instances = await db\n        .select()\n        .from(plantInstances)\n        .leftJoin(plants, eq(plantInstances.plantId, plants.id))\n        .where(\n          and(\n            eq(plantInstances.userId, userId),\n            eq(plantInstances.isActive, true),\n            or(\n              ilike(plantInstances.nickname, searchTerm),\n              ilike(plantInstances.location, searchTerm),\n              ilike(plantInstances.notes, searchTerm),\n              ilike(plants.commonName, searchTerm),\n              ilike(plants.genus, searchTerm),\n              ilike(plants.species, searchTerm)\n            )\n          )\n        )\n        .orderBy(desc(plantInstances.createdAt));\n\n      return instances.map(instance => ({\n        ...instance.plant_instances,\n        plant: instance.plants!\n      }));\n    } catch (error) {\n      console.error('Failed to search plant instances:', error);\n      throw new Error('Failed to search plant instances');\n    }\n  }\n\n  // Update plant instance\n  static async update(id: number, instanceData: Partial<NewPlantInstance>): Promise<PlantInstance> {\n    try {\n      const [instance] = await db\n        .update(plantInstances)\n        .set({ ...instanceData, updatedAt: new Date() })\n        .where(eq(plantInstances.id, id))\n        .returning();\n      \n      if (!instance) {\n        throw new Error('Plant instance not found');\n      }\n      \n      return instance;\n    } catch (error) {\n      console.error('Failed to update plant instance:', error);\n      throw new Error('Failed to update plant instance');\n    }\n  }\n\n  // Log fertilizer application and calculate next due date\n  static async logFertilizer(id: number, fertilizerDate?: Date): Promise<PlantInstance> {\n    try {\n      const now = fertilizerDate || new Date();\n      \n      // Get current instance to calculate next due date\n      const [currentInstance] = await db\n        .select()\n        .from(plantInstances)\n        .where(eq(plantInstances.id, id));\n      \n      if (!currentInstance) {\n        throw new Error('Plant instance not found');\n      }\n\n      // Calculate next fertilizer due date based on schedule\n      let nextDue: Date | null = null;\n      if (currentInstance.fertilizerSchedule) {\n        const scheduleMatch = currentInstance.fertilizerSchedule.match(/(\\d+)\\s*(day|week|month)s?/i);\n        if (scheduleMatch) {\n          const [, amount, unit] = scheduleMatch;\n          nextDue = new Date(now);\n          \n          switch (unit.toLowerCase()) {\n            case 'day':\n              nextDue.setDate(nextDue.getDate() + parseInt(amount, 10));\n              break;\n            case 'week':\n              nextDue.setDate(nextDue.getDate() + (parseInt(amount, 10) * 7));\n              break;\n            case 'month':\n              nextDue.setMonth(nextDue.getMonth() + parseInt(amount, 10));\n              break;\n          }\n        }\n      }\n\n      const [instance] = await db\n        .update(plantInstances)\n        .set({\n          lastFertilized: now,\n          fertilizerDue: nextDue,\n          updatedAt: new Date()\n        })\n        .where(eq(plantInstances.id, id))\n        .returning();\n      \n      return instance;\n    } catch (error) {\n      console.error('Failed to log fertilizer:', error);\n      throw new Error('Failed to log fertilizer');\n    }\n  }\n\n  // Log repotting\n  static async logRepot(id: number, repotDate?: Date, notes?: string): Promise<PlantInstance> {\n    try {\n      const now = repotDate || new Date();\n      \n      const updateData: Partial<NewPlantInstance> = {\n        lastRepot: now,\n        updatedAt: new Date()\n      };\n\n      if (notes) {\n        // Get current instance to append notes\n        const [currentInstance] = await db\n          .select()\n          .from(plantInstances)\n          .where(eq(plantInstances.id, id));\n        \n        if (currentInstance) {\n          const existingNotes = currentInstance.notes || '';\n          const repotNote = `Repotted on ${now.toDateString()}: ${notes}`;\n          updateData.notes = existingNotes ? `${existingNotes}\\n${repotNote}` : repotNote;\n        }\n      }\n\n      const [instance] = await db\n        .update(plantInstances)\n        .set(updateData)\n        .where(eq(plantInstances.id, id))\n        .returning();\n      \n      if (!instance) {\n        throw new Error('Plant instance not found');\n      }\n      \n      return instance;\n    } catch (error) {\n      console.error('Failed to log repot:', error);\n      throw new Error('Failed to log repot');\n    }\n  }\n\n  // Deactivate plant instance (soft delete)\n  static async deactivate(id: number): Promise<PlantInstance> {\n    try {\n      const [instance] = await db\n        .update(plantInstances)\n        .set({ isActive: false, updatedAt: new Date() })\n        .where(eq(plantInstances.id, id))\n        .returning();\n      \n      if (!instance) {\n        throw new Error('Plant instance not found');\n      }\n      \n      return instance;\n    } catch (error) {\n      console.error('Failed to deactivate plant instance:', error);\n      throw new Error('Failed to deactivate plant instance');\n    }\n  }\n\n  // Reactivate plant instance\n  static async reactivate(id: number): Promise<PlantInstance> {\n    try {\n      const [instance] = await db\n        .update(plantInstances)\n        .set({ isActive: true, updatedAt: new Date() })\n        .where(eq(plantInstances.id, id))\n        .returning();\n      \n      if (!instance) {\n        throw new Error('Plant instance not found');\n      }\n      \n      return instance;\n    } catch (error) {\n      console.error('Failed to reactivate plant instance:', error);\n      throw new Error('Failed to reactivate plant instance');\n    }\n  }\n\n  // Delete plant instance permanently\n  static async delete(id: number): Promise<boolean> {\n    try {\n      const result = await db.delete(plantInstances).where(eq(plantInstances.id, id));\n      return result.length > 0;\n    } catch (error) {\n      console.error('Failed to delete plant instance:', error);\n      throw new Error('Failed to delete plant instance');\n    }\n  }\n\n  // Get care statistics for a user\n  static async getCareStats(userId: number): Promise<{\n    totalPlants: number;\n    activePlants: number;\n    overdueFertilizer: number;\n    dueSoon: number;\n  }> {\n    try {\n      const now = new Date();\n      const weekFromNow = new Date();\n      weekFromNow.setDate(now.getDate() + 7);\n\n      const [stats] = await db\n        .select({\n          totalPlants: sql<number>`count(*)`,\n          activePlants: sql<number>`count(*) filter (where ${plantInstances.isActive} = true)`,\n          overdueFertilizer: sql<number>`count(*) filter (where ${plantInstances.isActive} = true and ${plantInstances.fertilizerDue} <= ${now})`,\n          dueSoon: sql<number>`count(*) filter (where ${plantInstances.isActive} = true and ${plantInstances.fertilizerDue} > ${now} and ${plantInstances.fertilizerDue} <= ${weekFromNow})`\n        })\n        .from(plantInstances)\n        .where(eq(plantInstances.userId, userId));\n\n      return stats;\n    } catch (error) {\n      console.error('Failed to get care stats:', error);\n      throw new Error('Failed to get care stats');\n    }\n  }\n\n  // Enhanced search with filters\n  static async searchWithFilters(searchParams: PlantInstanceSearch): Promise<PlantInstanceSearchResult> {\n    try {\n      const startTime = Date.now();\n      const { query, userId, activeOnly, limit, offset } = searchParams;\n      const searchTerm = `%${query.toLowerCase()}%`;\n      \n      const conditions = [eq(plantInstances.userId, userId)];\n      \n      if (activeOnly) {\n        conditions.push(eq(plantInstances.isActive, true));\n      }\n\n      // Add search conditions\n      conditions.push(\n        or(\n          ilike(plantInstances.nickname, searchTerm),\n          ilike(plantInstances.location, searchTerm),\n          ilike(plantInstances.notes, searchTerm),\n          ilike(plants.commonName, searchTerm),\n          ilike(plants.genus, searchTerm),\n          ilike(plants.species, searchTerm),\n          ilike(plants.family, searchTerm)\n        )!\n      );\n\n      // Get total count\n      const [countResult] = await db\n        .select({ count: sql<number>`count(*)` })\n        .from(plantInstances)\n        .leftJoin(plants, eq(plantInstances.plantId, plants.id))\n        .where(and(...conditions));\n\n      const totalCount = countResult.count;\n\n      // Get instances with plant data\n      const instances = await db\n        .select()\n        .from(plantInstances)\n        .leftJoin(plants, eq(plantInstances.plantId, plants.id))\n        .where(and(...conditions))\n        .orderBy(desc(plantInstances.createdAt))\n        .limit(limit)\n        .offset(offset);\n\n      const enhancedInstances = instances.map(instance => \n        plantInstanceHelpers.enhancePlantInstance(instance.plant_instances, instance.plants!)\n      );\n\n      const searchTime = Date.now() - startTime;\n\n      return {\n        instances: enhancedInstances,\n        totalCount,\n        hasMore: offset + limit < totalCount,\n        searchTime,\n        filters: {\n          ...searchParams,\n          overdueOnly: false, // Add missing field\n        },\n      };\n    } catch (error) {\n      console.error('Failed to search plant instances with filters:', error);\n      throw new Error('Failed to search plant instances');\n    }\n  }\n\n  // Advanced filtering\n  static async getWithFilters(filterParams: PlantInstanceFilter): Promise<PlantInstanceSearchResult> {\n    try {\n      const startTime = Date.now();\n      const { \n        userId, \n        location, \n        plantId, \n        isActive, \n        overdueOnly, \n        dueSoonDays,\n        createdAfter,\n        createdBefore,\n        lastFertilizedAfter,\n        lastFertilizedBefore,\n        limit, \n        offset \n      } = filterParams;\n\n      const conditions = [eq(plantInstances.userId, userId)];\n      \n      // Apply filters\n      if (location) {\n        conditions.push(ilike(plantInstances.location, `%${location}%`));\n      }\n      \n      if (plantId) {\n        conditions.push(eq(plantInstances.plantId, plantId));\n      }\n      \n      if (isActive !== undefined) {\n        conditions.push(eq(plantInstances.isActive, isActive));\n      }\n\n      if (overdueOnly) {\n        const now = new Date();\n        conditions.push(\n          and(\n            isNotNull(plantInstances.fertilizerDue),\n            lte(plantInstances.fertilizerDue, now)\n          )!\n        );\n      }\n\n      if (dueSoonDays) {\n        const now = new Date();\n        const futureDate = new Date();\n        futureDate.setDate(now.getDate() + dueSoonDays);\n        conditions.push(\n          and(\n            isNotNull(plantInstances.fertilizerDue),\n            gte(plantInstances.fertilizerDue, now),\n            lte(plantInstances.fertilizerDue, futureDate)\n          )!\n        );\n      }\n\n      if (createdAfter) {\n        conditions.push(gte(plantInstances.createdAt, createdAfter));\n      }\n\n      if (createdBefore) {\n        conditions.push(lte(plantInstances.createdAt, createdBefore));\n      }\n\n      if (lastFertilizedAfter) {\n        conditions.push(\n          and(\n            isNotNull(plantInstances.lastFertilized),\n            gte(plantInstances.lastFertilized, lastFertilizedAfter)\n          )!\n        );\n      }\n\n      if (lastFertilizedBefore) {\n        conditions.push(\n          and(\n            isNotNull(plantInstances.lastFertilized),\n            lte(plantInstances.lastFertilized, lastFertilizedBefore)\n          )!\n        );\n      }\n\n      // Get total count\n      const [countResult] = await db\n        .select({ count: sql<number>`count(*)` })\n        .from(plantInstances)\n        .leftJoin(plants, eq(plantInstances.plantId, plants.id))\n        .where(and(...conditions));\n\n      const totalCount = countResult.count;\n\n      // Get instances with plant data\n      const instances = await db\n        .select()\n        .from(plantInstances)\n        .leftJoin(plants, eq(plantInstances.plantId, plants.id))\n        .where(and(...conditions))\n        .orderBy(\n          overdueOnly || dueSoonDays \n            ? asc(plantInstances.fertilizerDue)\n            : desc(plantInstances.createdAt)\n        )\n        .limit(limit)\n        .offset(offset);\n\n      const enhancedInstances = instances.map(instance => \n        plantInstanceHelpers.enhancePlantInstance(instance.plant_instances, instance.plants!)\n      );\n\n      const searchTime = Date.now() - startTime;\n\n      return {\n        instances: enhancedInstances,\n        totalCount,\n        hasMore: offset + limit < totalCount,\n        searchTime,\n        filters: filterParams,\n      };\n    } catch (error) {\n      console.error('Failed to get plant instances with filters:', error);\n      throw new Error('Failed to get plant instances with filters');\n    }\n  }\n\n  // Get enhanced plant instances for a user\n  static async getEnhancedByUserId(userId: number, activeOnly: boolean = true): Promise<EnhancedPlantInstance[]> {\n    try {\n      const conditions = [eq(plantInstances.userId, userId)];\n      if (activeOnly) {\n        conditions.push(eq(plantInstances.isActive, true));\n      }\n\n      const instances = await db\n        .select()\n        .from(plantInstances)\n        .leftJoin(plants, eq(plantInstances.plantId, plants.id))\n        .where(and(...conditions))\n        .orderBy(desc(plantInstances.createdAt));\n\n      return instances.map(instance => \n        plantInstanceHelpers.enhancePlantInstance(instance.plant_instances, instance.plants!)\n      );\n    } catch (error) {\n      console.error('Failed to get enhanced plant instances:', error);\n      throw new Error('Failed to get enhanced plant instances');\n    }\n  }\n\n  // Get care dashboard data\n  static async getCareDashboardData(userId: number): Promise<CareDashboardData> {\n    try {\n      const now = new Date();\n      const tomorrow = new Date();\n      tomorrow.setDate(now.getDate() + 1);\n      const weekFromNow = new Date();\n      weekFromNow.setDate(now.getDate() + 7);\n\n      // Get all active instances with plant data\n      const instances = await this.getEnhancedByUserId(userId, true);\n\n      // Categorize by care status\n      const overdue = instances.filter(instance => instance.careStatus === 'overdue');\n      const dueToday = instances.filter(instance => instance.careStatus === 'due_today');\n      const dueSoon = instances.filter(instance => instance.careStatus === 'due_soon');\n      \n      // Get recently cared for plants (fertilized in last 7 days)\n      const recentlyCared = instances.filter(instance => {\n        if (!instance.lastFertilized) return false;\n        const daysSince = plantInstanceHelpers.calculateDaysSinceLastFertilized(instance.lastFertilized);\n        return daysSince !== null && daysSince <= 7;\n      });\n\n      // Calculate care streak (consecutive days with care activity)\n      const careStreakDays = await this.calculateCareStreak(userId);\n\n      return {\n        overdue: plantInstanceHelpers.sortByCareUrgency(overdue),\n        dueToday: plantInstanceHelpers.sortByCareUrgency(dueToday),\n        dueSoon: plantInstanceHelpers.sortByCareUrgency(dueSoon),\n        recentlyCared,\n        statistics: {\n          totalActivePlants: instances.length,\n          overdueCount: overdue.length,\n          dueTodayCount: dueToday.length,\n          dueSoonCount: dueSoon.length,\n          careStreakDays,\n        },\n      };\n    } catch (error) {\n      console.error('Failed to get care dashboard data:', error);\n      throw new Error('Failed to get care dashboard data');\n    }\n  }\n\n  // Calculate care streak\n  static async calculateCareStreak(userId: number): Promise<number> {\n    try {\n      // This is a simplified implementation\n      // In a real app, you might want to track care events in a separate table\n      const instances = await db\n        .select({\n          lastFertilized: plantInstances.lastFertilized,\n        })\n        .from(plantInstances)\n        .where(\n          and(\n            eq(plantInstances.userId, userId),\n            eq(plantInstances.isActive, true),\n            isNotNull(plantInstances.lastFertilized)\n          )\n        )\n        .orderBy(desc(plantInstances.lastFertilized));\n\n      if (instances.length === 0) return 0;\n\n      // Simple streak calculation based on recent fertilizer applications\n      let streak = 0;\n      const now = new Date();\n      \n      for (const instance of instances) {\n        if (!instance.lastFertilized) break;\n        \n        const daysSince = Math.floor(\n          (now.getTime() - instance.lastFertilized.getTime()) / (1000 * 60 * 60 * 24)\n        );\n        \n        if (daysSince <= 1) {\n          streak = Math.max(streak, 1);\n        }\n      }\n\n      return streak;\n    } catch (error) {\n      console.error('Failed to calculate care streak:', error);\n      return 0;\n    }\n  }\n\n  // Bulk operations\n  static async bulkOperation(operation: BulkPlantInstanceOperation): Promise<BulkOperationResult> {\n    try {\n      const { plantInstanceIds, operation: op, fertilizerDate, notes } = operation;\n      const results: BulkOperationResult['results'] = [];\n      let successCount = 0;\n      let failureCount = 0;\n\n      for (const id of plantInstanceIds) {\n        try {\n          let result: PlantInstance;\n          \n          switch (op) {\n            case 'activate':\n              result = await this.reactivate(id);\n              break;\n            case 'deactivate':\n              result = await this.deactivate(id);\n              break;\n            case 'delete':\n              await this.delete(id);\n              result = { id } as PlantInstance; // Placeholder for deleted item\n              break;\n            case 'fertilize':\n              result = await this.logFertilizer(id, fertilizerDate);\n              break;\n            default:\n              throw new Error(`Unknown operation: ${op}`);\n          }\n\n          results.push({ plantInstanceId: id, success: true });\n          successCount++;\n        } catch (error) {\n          results.push({ \n            plantInstanceId: id, \n            success: false, \n            error: error instanceof Error ? error.message : 'Unknown error'\n          });\n          failureCount++;\n        }\n      }\n\n      return {\n        success: successCount > 0,\n        successCount,\n        failureCount,\n        results,\n      };\n    } catch (error) {\n      console.error('Failed to perform bulk operation:', error);\n      throw new Error('Failed to perform bulk operation');\n    }\n  }\n\n  // Get plant instances by location\n  static async getByLocation(userId: number, location: string): Promise<EnhancedPlantInstance[]> {\n    try {\n      const instances = await db\n        .select()\n        .from(plantInstances)\n        .leftJoin(plants, eq(plantInstances.plantId, plants.id))\n        .where(\n          and(\n            eq(plantInstances.userId, userId),\n            eq(plantInstances.isActive, true),\n            ilike(plantInstances.location, `%${location}%`)\n          )\n        )\n        .orderBy(plantInstances.nickname);\n\n      return instances.map(instance => \n        plantInstanceHelpers.enhancePlantInstance(instance.plant_instances, instance.plants!)\n      );\n    } catch (error) {\n      console.error('Failed to get plant instances by location:', error);\n      throw new Error('Failed to get plant instances by location');\n    }\n  }\n\n  // Get unique locations for a user\n  static async getUserLocations(userId: number): Promise<string[]> {\n    try {\n      const locations = await db\n        .selectDistinct({ location: plantInstances.location })\n        .from(plantInstances)\n        .where(\n          and(\n            eq(plantInstances.userId, userId),\n            eq(plantInstances.isActive, true)\n          )\n        )\n        .orderBy(plantInstances.location);\n\n      return locations.map(l => l.location).filter(Boolean);\n    } catch (error) {\n      console.error('Failed to get user locations:', error);\n      throw new Error('Failed to get user locations');\n    }\n  }\n\n  // Get enhanced plant instance by ID\n  static async getEnhancedById(id: number): Promise<EnhancedPlantInstance | null> {\n    try {\n      const [instance] = await db\n        .select()\n        .from(plantInstances)\n        .leftJoin(plants, eq(plantInstances.plantId, plants.id))\n        .where(eq(plantInstances.id, id));\n      \n      if (!instance || !instance.plants) return null;\n      \n      return plantInstanceHelpers.enhancePlantInstance(instance.plant_instances, instance.plants);\n    } catch (error) {\n      console.error('Failed to get enhanced plant instance by ID:', error);\n      throw new Error('Failed to get enhanced plant instance');\n    }\n  }\n}"],
      names: ["PlantInstanceQueries", "create", "instanceData", "instance", "db", "insert", "plantInstances", "values", "returning", "error", "console", "Error", "getById", "id", "select", "from", "leftJoin", "plants", "eq", "plantId", "where", "plant_instances", "plant", "getByUserId", "userId", "activeOnly", "conditions", "push", "isActive", "instances", "and", "orderBy", "desc", "createdAt", "map", "getOverdueFertilizer", "now", "Date", "isNotNull", "fertilizerDue", "lte", "asc", "getFertilizerDueSoon", "daysAhead", "futureDate", "setDate", "getDate", "gte", "search", "query", "searchTerm", "toLowerCase", "or", "ilike", "nickname", "location", "notes", "commonName", "genus", "species", "update", "set", "updatedAt", "logFertilizer", "fertilizerDate", "currentInstance", "nextDue", "fertilizerSchedule", "scheduleMatch", "match", "amount", "unit", "parseInt", "setMonth", "getMonth", "lastFertilized", "logRepot", "repotDate", "updateData", "lastRepot", "existingNotes", "repotNote", "toDateString", "deactivate", "reactivate", "delete", "result", "length", "getCareStats", "weekFromNow", "stats", "totalPlants", "sql", "activePlants", "overdueFertilizer", "dueSoon", "searchWithFilters", "searchParams", "startTime", "limit", "offset", "family", "countResult", "count", "totalCount", "enhancedInstances", "plantInstanceHelpers", "enhancePlantInstance", "searchTime", "hasMore", "filters", "overdueOnly", "getWithFilters", "filterParams", "dueSoonDays", "createdAfter", "createdBefore", "lastFertilizedAfter", "lastFertilizedBefore", "undefined", "getEnhancedByUserId", "getCareDashboardData", "tomorrow", "overdue", "filter", "careStatus", "dueToday", "recentlyCared", "daysSince", "calculateDaysSinceLastFertilized", "careStreakDays", "calculateCareStreak", "sortByCareUrgency", "statistics", "totalActivePlants", "overdueCount", "dueTodayCount", "dueSoonCount", "streak", "Math", "floor", "getTime", "max", "bulkOperation", "operation", "plantInstanceIds", "op", "results", "successCount", "failureCount", "plantInstanceId", "success", "message", "getByLocation", "getUserLocations", "locations", "selectDistinct", "l", "Boolean", "getEnhancedById"],
      mappings: ";;;;+BAkBaA;;;eAAAA;;;4BAlBoE;uBAC9D;wBAC+D;oCAa7C;AAG9B,MAAMA;IACX,8BAA8B;IAC9B,aAAaC,OAAOC,YAA8B,EAA0B;QAC1E,IAAI;YACF,MAAM,CAACC,SAAS,GAAG,MAAMC,SAAE,CAACC,MAAM,CAACC,sBAAc,EAAEC,MAAM,CAACL,cAAcM,SAAS;YACjF,OAAOL;QACT,EAAE,OAAOM,OAAO;YACdC,QAAQD,KAAK,CAAC,oCAAoCA;YAClD,MAAM,IAAIE,MAAM;QAClB;IACF;IAEA,oDAAoD;IACpD,aAAaC,QAAQC,EAAU,EAA2E;QACxG,IAAI;YACF,MAAM,CAACV,SAAS,GAAG,MAAMC,SAAE,CACxBU,MAAM,GACNC,IAAI,CAACT,sBAAc,EACnBU,QAAQ,CAACC,cAAM,EAAEC,IAAAA,cAAE,EAACZ,sBAAc,CAACa,OAAO,EAAEF,cAAM,CAACJ,EAAE,GACrDO,KAAK,CAACF,IAAAA,cAAE,EAACZ,sBAAc,CAACO,EAAE,EAAEA;YAE/B,IAAI,CAACV,UAAU,OAAO;YAEtB,OAAO;gBACL,GAAGA,SAASkB,eAAe;gBAC3BC,OAAOnB,SAASc,MAAM;YACxB;QACF,EAAE,OAAOR,OAAO;YACdC,QAAQD,KAAK,CAAC,uCAAuCA;YACrD,MAAM,IAAIE,MAAM;QAClB;IACF;IAEA,qCAAqC;IACrC,aAAaY,YAAYC,MAAc,EAAEC,aAAsB,IAAI,EAAsE;QACvI,IAAI;YACF,MAAMC,aAAa;gBAACR,IAAAA,cAAE,EAACZ,sBAAc,CAACkB,MAAM,EAAEA;aAAQ;YACtD,IAAIC,YAAY;gBACdC,WAAWC,IAAI,CAACT,IAAAA,cAAE,EAACZ,sBAAc,CAACsB,QAAQ,EAAE;YAC9C;YAEA,MAAMC,YAAY,MAAMzB,SAAE,CACvBU,MAAM,GACNC,IAAI,CAACT,sBAAc,EACnBU,QAAQ,CAACC,cAAM,EAAEC,IAAAA,cAAE,EAACZ,sBAAc,CAACa,OAAO,EAAEF,cAAM,CAACJ,EAAE,GACrDO,KAAK,CAACU,IAAAA,eAAG,KAAIJ,aACbK,OAAO,CAACC,IAAAA,gBAAI,EAAC1B,sBAAc,CAAC2B,SAAS;YAExC,OAAOJ,UAAUK,GAAG,CAAC/B,CAAAA,WAAa,CAAA;oBAChC,GAAGA,SAASkB,eAAe;oBAC3BC,OAAOnB,SAASc,MAAM;gBACxB,CAAA;QACF,EAAE,OAAOR,OAAO;YACdC,QAAQD,KAAK,CAAC,6CAA6CA;YAC3D,MAAM,IAAIE,MAAM;QAClB;IACF;IAEA,8CAA8C;IAC9C,aAAawB,qBAAqBX,MAAc,EAAsE;QACpH,IAAI;YACF,MAAMY,MAAM,IAAIC;YAChB,MAAMR,YAAY,MAAMzB,SAAE,CACvBU,MAAM,GACNC,IAAI,CAACT,sBAAc,EACnBU,QAAQ,CAACC,cAAM,EAAEC,IAAAA,cAAE,EAACZ,sBAAc,CAACa,OAAO,EAAEF,cAAM,CAACJ,EAAE,GACrDO,KAAK,CACJU,IAAAA,eAAG,EACDZ,IAAAA,cAAE,EAACZ,sBAAc,CAACkB,MAAM,EAAEA,SAC1BN,IAAAA,cAAE,EAACZ,sBAAc,CAACsB,QAAQ,EAAE,OAC5BU,IAAAA,qBAAS,EAAChC,sBAAc,CAACiC,aAAa,GACtCC,IAAAA,eAAG,EAAClC,sBAAc,CAACiC,aAAa,EAAEH,OAGrCL,OAAO,CAACU,IAAAA,eAAG,EAACnC,sBAAc,CAACiC,aAAa;YAE3C,OAAOV,UAAUK,GAAG,CAAC/B,CAAAA,WAAa,CAAA;oBAChC,GAAGA,SAASkB,eAAe;oBAC3BC,OAAOnB,SAASc,MAAM;gBACxB,CAAA;QACF,EAAE,OAAOR,OAAO;YACdC,QAAQD,KAAK,CAAC,+CAA+CA;YAC7D,MAAM,IAAIE,MAAM;QAClB;IACF;IAEA,+CAA+C;IAC/C,aAAa+B,qBAAqBlB,MAAc,EAAEmB,YAAoB,CAAC,EAAsE;QAC3I,IAAI;YACF,MAAMP,MAAM,IAAIC;YAChB,MAAMO,aAAa,IAAIP;YACvBO,WAAWC,OAAO,CAACT,IAAIU,OAAO,KAAKH;YAEnC,MAAMd,YAAY,MAAMzB,SAAE,CACvBU,MAAM,GACNC,IAAI,CAACT,sBAAc,EACnBU,QAAQ,CAACC,cAAM,EAAEC,IAAAA,cAAE,EAACZ,sBAAc,CAACa,OAAO,EAAEF,cAAM,CAACJ,EAAE,GACrDO,KAAK,CACJU,IAAAA,eAAG,EACDZ,IAAAA,cAAE,EAACZ,sBAAc,CAACkB,MAAM,EAAEA,SAC1BN,IAAAA,cAAE,EAACZ,sBAAc,CAACsB,QAAQ,EAAE,OAC5BU,IAAAA,qBAAS,EAAChC,sBAAc,CAACiC,aAAa,GACtCQ,IAAAA,eAAG,EAACzC,sBAAc,CAACiC,aAAa,EAAEH,MAClCI,IAAAA,eAAG,EAAClC,sBAAc,CAACiC,aAAa,EAAEK,cAGrCb,OAAO,CAACU,IAAAA,eAAG,EAACnC,sBAAc,CAACiC,aAAa;YAE3C,OAAOV,UAAUK,GAAG,CAAC/B,CAAAA,WAAa,CAAA;oBAChC,GAAGA,SAASkB,eAAe;oBAC3BC,OAAOnB,SAASc,MAAM;gBACxB,CAAA;QACF,EAAE,OAAOR,OAAO;YACdC,QAAQD,KAAK,CAAC,gDAAgDA;YAC9D,MAAM,IAAIE,MAAM;QAClB;IACF;IAEA,yDAAyD;IACzD,aAAaqC,OAAOxB,MAAc,EAAEyB,KAAa,EAAsE;QACrH,IAAI;YACF,MAAMC,aAAa,CAAC,CAAC,EAAED,MAAME,WAAW,GAAG,CAAC,CAAC;YAE7C,MAAMtB,YAAY,MAAMzB,SAAE,CACvBU,MAAM,GACNC,IAAI,CAACT,sBAAc,EACnBU,QAAQ,CAACC,cAAM,EAAEC,IAAAA,cAAE,EAACZ,sBAAc,CAACa,OAAO,EAAEF,cAAM,CAACJ,EAAE,GACrDO,KAAK,CACJU,IAAAA,eAAG,EACDZ,IAAAA,cAAE,EAACZ,sBAAc,CAACkB,MAAM,EAAEA,SAC1BN,IAAAA,cAAE,EAACZ,sBAAc,CAACsB,QAAQ,EAAE,OAC5BwB,IAAAA,cAAE,EACAC,IAAAA,iBAAK,EAAC/C,sBAAc,CAACgD,QAAQ,EAAEJ,aAC/BG,IAAAA,iBAAK,EAAC/C,sBAAc,CAACiD,QAAQ,EAAEL,aAC/BG,IAAAA,iBAAK,EAAC/C,sBAAc,CAACkD,KAAK,EAAEN,aAC5BG,IAAAA,iBAAK,EAACpC,cAAM,CAACwC,UAAU,EAAEP,aACzBG,IAAAA,iBAAK,EAACpC,cAAM,CAACyC,KAAK,EAAER,aACpBG,IAAAA,iBAAK,EAACpC,cAAM,CAAC0C,OAAO,EAAET,eAI3BnB,OAAO,CAACC,IAAAA,gBAAI,EAAC1B,sBAAc,CAAC2B,SAAS;YAExC,OAAOJ,UAAUK,GAAG,CAAC/B,CAAAA,WAAa,CAAA;oBAChC,GAAGA,SAASkB,eAAe;oBAC3BC,OAAOnB,SAASc,MAAM;gBACxB,CAAA;QACF,EAAE,OAAOR,OAAO;YACdC,QAAQD,KAAK,CAAC,qCAAqCA;YACnD,MAAM,IAAIE,MAAM;QAClB;IACF;IAEA,wBAAwB;IACxB,aAAaiD,OAAO/C,EAAU,EAAEX,YAAuC,EAA0B;QAC/F,IAAI;YACF,MAAM,CAACC,SAAS,GAAG,MAAMC,SAAE,CACxBwD,MAAM,CAACtD,sBAAc,EACrBuD,GAAG,CAAC;gBAAE,GAAG3D,YAAY;gBAAE4D,WAAW,IAAIzB;YAAO,GAC7CjB,KAAK,CAACF,IAAAA,cAAE,EAACZ,sBAAc,CAACO,EAAE,EAAEA,KAC5BL,SAAS;YAEZ,IAAI,CAACL,UAAU;gBACb,MAAM,IAAIQ,MAAM;YAClB;YAEA,OAAOR;QACT,EAAE,OAAOM,OAAO;YACdC,QAAQD,KAAK,CAAC,oCAAoCA;YAClD,MAAM,IAAIE,MAAM;QAClB;IACF;IAEA,yDAAyD;IACzD,aAAaoD,cAAclD,EAAU,EAAEmD,cAAqB,EAA0B;QACpF,IAAI;YACF,MAAM5B,MAAM4B,kBAAkB,IAAI3B;YAElC,kDAAkD;YAClD,MAAM,CAAC4B,gBAAgB,GAAG,MAAM7D,SAAE,CAC/BU,MAAM,GACNC,IAAI,CAACT,sBAAc,EACnBc,KAAK,CAACF,IAAAA,cAAE,EAACZ,sBAAc,CAACO,EAAE,EAAEA;YAE/B,IAAI,CAACoD,iBAAiB;gBACpB,MAAM,IAAItD,MAAM;YAClB;YAEA,uDAAuD;YACvD,IAAIuD,UAAuB;YAC3B,IAAID,gBAAgBE,kBAAkB,EAAE;gBACtC,MAAMC,gBAAgBH,gBAAgBE,kBAAkB,CAACE,KAAK,CAAC;gBAC/D,IAAID,eAAe;oBACjB,MAAM,GAAGE,QAAQC,KAAK,GAAGH;oBACzBF,UAAU,IAAI7B,KAAKD;oBAEnB,OAAQmC,KAAKpB,WAAW;wBACtB,KAAK;4BACHe,QAAQrB,OAAO,CAACqB,QAAQpB,OAAO,KAAK0B,SAASF,QAAQ;4BACrD;wBACF,KAAK;4BACHJ,QAAQrB,OAAO,CAACqB,QAAQpB,OAAO,KAAM0B,SAASF,QAAQ,MAAM;4BAC5D;wBACF,KAAK;4BACHJ,QAAQO,QAAQ,CAACP,QAAQQ,QAAQ,KAAKF,SAASF,QAAQ;4BACvD;oBACJ;gBACF;YACF;YAEA,MAAM,CAACnE,SAAS,GAAG,MAAMC,SAAE,CACxBwD,MAAM,CAACtD,sBAAc,EACrBuD,GAAG,CAAC;gBACHc,gBAAgBvC;gBAChBG,eAAe2B;gBACfJ,WAAW,IAAIzB;YACjB,GACCjB,KAAK,CAACF,IAAAA,cAAE,EAACZ,sBAAc,CAACO,EAAE,EAAEA,KAC5BL,SAAS;YAEZ,OAAOL;QACT,EAAE,OAAOM,OAAO;YACdC,QAAQD,KAAK,CAAC,6BAA6BA;YAC3C,MAAM,IAAIE,MAAM;QAClB;IACF;IAEA,gBAAgB;IAChB,aAAaiE,SAAS/D,EAAU,EAAEgE,SAAgB,EAAErB,KAAc,EAA0B;QAC1F,IAAI;YACF,MAAMpB,MAAMyC,aAAa,IAAIxC;YAE7B,MAAMyC,aAAwC;gBAC5CC,WAAW3C;gBACX0B,WAAW,IAAIzB;YACjB;YAEA,IAAImB,OAAO;gBACT,uCAAuC;gBACvC,MAAM,CAACS,gBAAgB,GAAG,MAAM7D,SAAE,CAC/BU,MAAM,GACNC,IAAI,CAACT,sBAAc,EACnBc,KAAK,CAACF,IAAAA,cAAE,EAACZ,sBAAc,CAACO,EAAE,EAAEA;gBAE/B,IAAIoD,iBAAiB;oBACnB,MAAMe,gBAAgBf,gBAAgBT,KAAK,IAAI;oBAC/C,MAAMyB,YAAY,CAAC,YAAY,EAAE7C,IAAI8C,YAAY,GAAG,EAAE,EAAE1B,OAAO;oBAC/DsB,WAAWtB,KAAK,GAAGwB,gBAAgB,GAAGA,cAAc,EAAE,EAAEC,WAAW,GAAGA;gBACxE;YACF;YAEA,MAAM,CAAC9E,SAAS,GAAG,MAAMC,SAAE,CACxBwD,MAAM,CAACtD,sBAAc,EACrBuD,GAAG,CAACiB,YACJ1D,KAAK,CAACF,IAAAA,cAAE,EAACZ,sBAAc,CAACO,EAAE,EAAEA,KAC5BL,SAAS;YAEZ,IAAI,CAACL,UAAU;gBACb,MAAM,IAAIQ,MAAM;YAClB;YAEA,OAAOR;QACT,EAAE,OAAOM,OAAO;YACdC,QAAQD,KAAK,CAAC,wBAAwBA;YACtC,MAAM,IAAIE,MAAM;QAClB;IACF;IAEA,0CAA0C;IAC1C,aAAawE,WAAWtE,EAAU,EAA0B;QAC1D,IAAI;YACF,MAAM,CAACV,SAAS,GAAG,MAAMC,SAAE,CACxBwD,MAAM,CAACtD,sBAAc,EACrBuD,GAAG,CAAC;gBAAEjC,UAAU;gBAAOkC,WAAW,IAAIzB;YAAO,GAC7CjB,KAAK,CAACF,IAAAA,cAAE,EAACZ,sBAAc,CAACO,EAAE,EAAEA,KAC5BL,SAAS;YAEZ,IAAI,CAACL,UAAU;gBACb,MAAM,IAAIQ,MAAM;YAClB;YAEA,OAAOR;QACT,EAAE,OAAOM,OAAO;YACdC,QAAQD,KAAK,CAAC,wCAAwCA;YACtD,MAAM,IAAIE,MAAM;QAClB;IACF;IAEA,4BAA4B;IAC5B,aAAayE,WAAWvE,EAAU,EAA0B;QAC1D,IAAI;YACF,MAAM,CAACV,SAAS,GAAG,MAAMC,SAAE,CACxBwD,MAAM,CAACtD,sBAAc,EACrBuD,GAAG,CAAC;gBAAEjC,UAAU;gBAAMkC,WAAW,IAAIzB;YAAO,GAC5CjB,KAAK,CAACF,IAAAA,cAAE,EAACZ,sBAAc,CAACO,EAAE,EAAEA,KAC5BL,SAAS;YAEZ,IAAI,CAACL,UAAU;gBACb,MAAM,IAAIQ,MAAM;YAClB;YAEA,OAAOR;QACT,EAAE,OAAOM,OAAO;YACdC,QAAQD,KAAK,CAAC,wCAAwCA;YACtD,MAAM,IAAIE,MAAM;QAClB;IACF;IAEA,oCAAoC;IACpC,aAAa0E,OAAOxE,EAAU,EAAoB;QAChD,IAAI;YACF,MAAMyE,SAAS,MAAMlF,SAAE,CAACiF,MAAM,CAAC/E,sBAAc,EAAEc,KAAK,CAACF,IAAAA,cAAE,EAACZ,sBAAc,CAACO,EAAE,EAAEA;YAC3E,OAAOyE,OAAOC,MAAM,GAAG;QACzB,EAAE,OAAO9E,OAAO;YACdC,QAAQD,KAAK,CAAC,oCAAoCA;YAClD,MAAM,IAAIE,MAAM;QAClB;IACF;IAEA,iCAAiC;IACjC,aAAa6E,aAAahE,MAAc,EAKrC;QACD,IAAI;YACF,MAAMY,MAAM,IAAIC;YAChB,MAAMoD,cAAc,IAAIpD;YACxBoD,YAAY5C,OAAO,CAACT,IAAIU,OAAO,KAAK;YAEpC,MAAM,CAAC4C,MAAM,GAAG,MAAMtF,SAAE,CACrBU,MAAM,CAAC;gBACN6E,aAAaC,IAAAA,eAAG,CAAQ,CAAC,QAAQ,CAAC;gBAClCC,cAAcD,IAAAA,eAAG,CAAQ,CAAC,uBAAuB,EAAEtF,sBAAc,CAACsB,QAAQ,CAAC,QAAQ,CAAC;gBACpFkE,mBAAmBF,IAAAA,eAAG,CAAQ,CAAC,uBAAuB,EAAEtF,sBAAc,CAACsB,QAAQ,CAAC,YAAY,EAAEtB,sBAAc,CAACiC,aAAa,CAAC,IAAI,EAAEH,IAAI,CAAC,CAAC;gBACvI2D,SAASH,IAAAA,eAAG,CAAQ,CAAC,uBAAuB,EAAEtF,sBAAc,CAACsB,QAAQ,CAAC,YAAY,EAAEtB,sBAAc,CAACiC,aAAa,CAAC,GAAG,EAAEH,IAAI,KAAK,EAAE9B,sBAAc,CAACiC,aAAa,CAAC,IAAI,EAAEkD,YAAY,CAAC,CAAC;YACpL,GACC1E,IAAI,CAACT,sBAAc,EACnBc,KAAK,CAACF,IAAAA,cAAE,EAACZ,sBAAc,CAACkB,MAAM,EAAEA;YAEnC,OAAOkE;QACT,EAAE,OAAOjF,OAAO;YACdC,QAAQD,KAAK,CAAC,6BAA6BA;YAC3C,MAAM,IAAIE,MAAM;QAClB;IACF;IAEA,+BAA+B;IAC/B,aAAaqF,kBAAkBC,YAAiC,EAAsC;QACpG,IAAI;YACF,MAAMC,YAAY7D,KAAKD,GAAG;YAC1B,MAAM,EAAEa,KAAK,EAAEzB,MAAM,EAAEC,UAAU,EAAE0E,KAAK,EAAEC,MAAM,EAAE,GAAGH;YACrD,MAAM/C,aAAa,CAAC,CAAC,EAAED,MAAME,WAAW,GAAG,CAAC,CAAC;YAE7C,MAAMzB,aAAa;gBAACR,IAAAA,cAAE,EAACZ,sBAAc,CAACkB,MAAM,EAAEA;aAAQ;YAEtD,IAAIC,YAAY;gBACdC,WAAWC,IAAI,CAACT,IAAAA,cAAE,EAACZ,sBAAc,CAACsB,QAAQ,EAAE;YAC9C;YAEA,wBAAwB;YACxBF,WAAWC,IAAI,CACbyB,IAAAA,cAAE,EACAC,IAAAA,iBAAK,EAAC/C,sBAAc,CAACgD,QAAQ,EAAEJ,aAC/BG,IAAAA,iBAAK,EAAC/C,sBAAc,CAACiD,QAAQ,EAAEL,aAC/BG,IAAAA,iBAAK,EAAC/C,sBAAc,CAACkD,KAAK,EAAEN,aAC5BG,IAAAA,iBAAK,EAACpC,cAAM,CAACwC,UAAU,EAAEP,aACzBG,IAAAA,iBAAK,EAACpC,cAAM,CAACyC,KAAK,EAAER,aACpBG,IAAAA,iBAAK,EAACpC,cAAM,CAAC0C,OAAO,EAAET,aACtBG,IAAAA,iBAAK,EAACpC,cAAM,CAACoF,MAAM,EAAEnD;YAIzB,kBAAkB;YAClB,MAAM,CAACoD,YAAY,GAAG,MAAMlG,SAAE,CAC3BU,MAAM,CAAC;gBAAEyF,OAAOX,IAAAA,eAAG,CAAQ,CAAC,QAAQ,CAAC;YAAC,GACtC7E,IAAI,CAACT,sBAAc,EACnBU,QAAQ,CAACC,cAAM,EAAEC,IAAAA,cAAE,EAACZ,sBAAc,CAACa,OAAO,EAAEF,cAAM,CAACJ,EAAE,GACrDO,KAAK,CAACU,IAAAA,eAAG,KAAIJ;YAEhB,MAAM8E,aAAaF,YAAYC,KAAK;YAEpC,gCAAgC;YAChC,MAAM1E,YAAY,MAAMzB,SAAE,CACvBU,MAAM,GACNC,IAAI,CAACT,sBAAc,EACnBU,QAAQ,CAACC,cAAM,EAAEC,IAAAA,cAAE,EAACZ,sBAAc,CAACa,OAAO,EAAEF,cAAM,CAACJ,EAAE,GACrDO,KAAK,CAACU,IAAAA,eAAG,KAAIJ,aACbK,OAAO,CAACC,IAAAA,gBAAI,EAAC1B,sBAAc,CAAC2B,SAAS,GACrCkE,KAAK,CAACA,OACNC,MAAM,CAACA;YAEV,MAAMK,oBAAoB5E,UAAUK,GAAG,CAAC/B,CAAAA,WACtCuG,wCAAoB,CAACC,oBAAoB,CAACxG,SAASkB,eAAe,EAAElB,SAASc,MAAM;YAGrF,MAAM2F,aAAavE,KAAKD,GAAG,KAAK8D;YAEhC,OAAO;gBACLrE,WAAW4E;gBACXD;gBACAK,SAAST,SAASD,QAAQK;gBAC1BI;gBACAE,SAAS;oBACP,GAAGb,YAAY;oBACfc,aAAa;gBACf;YACF;QACF,EAAE,OAAOtG,OAAO;YACdC,QAAQD,KAAK,CAAC,kDAAkDA;YAChE,MAAM,IAAIE,MAAM;QAClB;IACF;IAEA,qBAAqB;IACrB,aAAaqG,eAAeC,YAAiC,EAAsC;QACjG,IAAI;YACF,MAAMf,YAAY7D,KAAKD,GAAG;YAC1B,MAAM,EACJZ,MAAM,EACN+B,QAAQ,EACRpC,OAAO,EACPS,QAAQ,EACRmF,WAAW,EACXG,WAAW,EACXC,YAAY,EACZC,aAAa,EACbC,mBAAmB,EACnBC,oBAAoB,EACpBnB,KAAK,EACLC,MAAM,EACP,GAAGa;YAEJ,MAAMvF,aAAa;gBAACR,IAAAA,cAAE,EAACZ,sBAAc,CAACkB,MAAM,EAAEA;aAAQ;YAEtD,gBAAgB;YAChB,IAAI+B,UAAU;gBACZ7B,WAAWC,IAAI,CAAC0B,IAAAA,iBAAK,EAAC/C,sBAAc,CAACiD,QAAQ,EAAE,CAAC,CAAC,EAAEA,SAAS,CAAC,CAAC;YAChE;YAEA,IAAIpC,SAAS;gBACXO,WAAWC,IAAI,CAACT,IAAAA,cAAE,EAACZ,sBAAc,CAACa,OAAO,EAAEA;YAC7C;YAEA,IAAIS,aAAa2F,WAAW;gBAC1B7F,WAAWC,IAAI,CAACT,IAAAA,cAAE,EAACZ,sBAAc,CAACsB,QAAQ,EAAEA;YAC9C;YAEA,IAAImF,aAAa;gBACf,MAAM3E,MAAM,IAAIC;gBAChBX,WAAWC,IAAI,CACbG,IAAAA,eAAG,EACDQ,IAAAA,qBAAS,EAAChC,sBAAc,CAACiC,aAAa,GACtCC,IAAAA,eAAG,EAAClC,sBAAc,CAACiC,aAAa,EAAEH;YAGxC;YAEA,IAAI8E,aAAa;gBACf,MAAM9E,MAAM,IAAIC;gBAChB,MAAMO,aAAa,IAAIP;gBACvBO,WAAWC,OAAO,CAACT,IAAIU,OAAO,KAAKoE;gBACnCxF,WAAWC,IAAI,CACbG,IAAAA,eAAG,EACDQ,IAAAA,qBAAS,EAAChC,sBAAc,CAACiC,aAAa,GACtCQ,IAAAA,eAAG,EAACzC,sBAAc,CAACiC,aAAa,EAAEH,MAClCI,IAAAA,eAAG,EAAClC,sBAAc,CAACiC,aAAa,EAAEK;YAGxC;YAEA,IAAIuE,cAAc;gBAChBzF,WAAWC,IAAI,CAACoB,IAAAA,eAAG,EAACzC,sBAAc,CAAC2B,SAAS,EAAEkF;YAChD;YAEA,IAAIC,eAAe;gBACjB1F,WAAWC,IAAI,CAACa,IAAAA,eAAG,EAAClC,sBAAc,CAAC2B,SAAS,EAAEmF;YAChD;YAEA,IAAIC,qBAAqB;gBACvB3F,WAAWC,IAAI,CACbG,IAAAA,eAAG,EACDQ,IAAAA,qBAAS,EAAChC,sBAAc,CAACqE,cAAc,GACvC5B,IAAAA,eAAG,EAACzC,sBAAc,CAACqE,cAAc,EAAE0C;YAGzC;YAEA,IAAIC,sBAAsB;gBACxB5F,WAAWC,IAAI,CACbG,IAAAA,eAAG,EACDQ,IAAAA,qBAAS,EAAChC,sBAAc,CAACqE,cAAc,GACvCnC,IAAAA,eAAG,EAAClC,sBAAc,CAACqE,cAAc,EAAE2C;YAGzC;YAEA,kBAAkB;YAClB,MAAM,CAAChB,YAAY,GAAG,MAAMlG,SAAE,CAC3BU,MAAM,CAAC;gBAAEyF,OAAOX,IAAAA,eAAG,CAAQ,CAAC,QAAQ,CAAC;YAAC,GACtC7E,IAAI,CAACT,sBAAc,EACnBU,QAAQ,CAACC,cAAM,EAAEC,IAAAA,cAAE,EAACZ,sBAAc,CAACa,OAAO,EAAEF,cAAM,CAACJ,EAAE,GACrDO,KAAK,CAACU,IAAAA,eAAG,KAAIJ;YAEhB,MAAM8E,aAAaF,YAAYC,KAAK;YAEpC,gCAAgC;YAChC,MAAM1E,YAAY,MAAMzB,SAAE,CACvBU,MAAM,GACNC,IAAI,CAACT,sBAAc,EACnBU,QAAQ,CAACC,cAAM,EAAEC,IAAAA,cAAE,EAACZ,sBAAc,CAACa,OAAO,EAAEF,cAAM,CAACJ,EAAE,GACrDO,KAAK,CAACU,IAAAA,eAAG,KAAIJ,aACbK,OAAO,CACNgF,eAAeG,cACXzE,IAAAA,eAAG,EAACnC,sBAAc,CAACiC,aAAa,IAChCP,IAAAA,gBAAI,EAAC1B,sBAAc,CAAC2B,SAAS,GAElCkE,KAAK,CAACA,OACNC,MAAM,CAACA;YAEV,MAAMK,oBAAoB5E,UAAUK,GAAG,CAAC/B,CAAAA,WACtCuG,wCAAoB,CAACC,oBAAoB,CAACxG,SAASkB,eAAe,EAAElB,SAASc,MAAM;YAGrF,MAAM2F,aAAavE,KAAKD,GAAG,KAAK8D;YAEhC,OAAO;gBACLrE,WAAW4E;gBACXD;gBACAK,SAAST,SAASD,QAAQK;gBAC1BI;gBACAE,SAASG;YACX;QACF,EAAE,OAAOxG,OAAO;YACdC,QAAQD,KAAK,CAAC,+CAA+CA;YAC7D,MAAM,IAAIE,MAAM;QAClB;IACF;IAEA,0CAA0C;IAC1C,aAAa6G,oBAAoBhG,MAAc,EAAEC,aAAsB,IAAI,EAAoC;QAC7G,IAAI;YACF,MAAMC,aAAa;gBAACR,IAAAA,cAAE,EAACZ,sBAAc,CAACkB,MAAM,EAAEA;aAAQ;YACtD,IAAIC,YAAY;gBACdC,WAAWC,IAAI,CAACT,IAAAA,cAAE,EAACZ,sBAAc,CAACsB,QAAQ,EAAE;YAC9C;YAEA,MAAMC,YAAY,MAAMzB,SAAE,CACvBU,MAAM,GACNC,IAAI,CAACT,sBAAc,EACnBU,QAAQ,CAACC,cAAM,EAAEC,IAAAA,cAAE,EAACZ,sBAAc,CAACa,OAAO,EAAEF,cAAM,CAACJ,EAAE,GACrDO,KAAK,CAACU,IAAAA,eAAG,KAAIJ,aACbK,OAAO,CAACC,IAAAA,gBAAI,EAAC1B,sBAAc,CAAC2B,SAAS;YAExC,OAAOJ,UAAUK,GAAG,CAAC/B,CAAAA,WACnBuG,wCAAoB,CAACC,oBAAoB,CAACxG,SAASkB,eAAe,EAAElB,SAASc,MAAM;QAEvF,EAAE,OAAOR,OAAO;YACdC,QAAQD,KAAK,CAAC,2CAA2CA;YACzD,MAAM,IAAIE,MAAM;QAClB;IACF;IAEA,0BAA0B;IAC1B,aAAa8G,qBAAqBjG,MAAc,EAA8B;QAC5E,IAAI;YACF,MAAMY,MAAM,IAAIC;YAChB,MAAMqF,WAAW,IAAIrF;YACrBqF,SAAS7E,OAAO,CAACT,IAAIU,OAAO,KAAK;YACjC,MAAM2C,cAAc,IAAIpD;YACxBoD,YAAY5C,OAAO,CAACT,IAAIU,OAAO,KAAK;YAEpC,2CAA2C;YAC3C,MAAMjB,YAAY,MAAM,IAAI,CAAC2F,mBAAmB,CAAChG,QAAQ;YAEzD,4BAA4B;YAC5B,MAAMmG,UAAU9F,UAAU+F,MAAM,CAACzH,CAAAA,WAAYA,SAAS0H,UAAU,KAAK;YACrE,MAAMC,WAAWjG,UAAU+F,MAAM,CAACzH,CAAAA,WAAYA,SAAS0H,UAAU,KAAK;YACtE,MAAM9B,UAAUlE,UAAU+F,MAAM,CAACzH,CAAAA,WAAYA,SAAS0H,UAAU,KAAK;YAErE,4DAA4D;YAC5D,MAAME,gBAAgBlG,UAAU+F,MAAM,CAACzH,CAAAA;gBACrC,IAAI,CAACA,SAASwE,cAAc,EAAE,OAAO;gBACrC,MAAMqD,YAAYtB,wCAAoB,CAACuB,gCAAgC,CAAC9H,SAASwE,cAAc;gBAC/F,OAAOqD,cAAc,QAAQA,aAAa;YAC5C;YAEA,8DAA8D;YAC9D,MAAME,iBAAiB,MAAM,IAAI,CAACC,mBAAmB,CAAC3G;YAEtD,OAAO;gBACLmG,SAASjB,wCAAoB,CAAC0B,iBAAiB,CAACT;gBAChDG,UAAUpB,wCAAoB,CAAC0B,iBAAiB,CAACN;gBACjD/B,SAASW,wCAAoB,CAAC0B,iBAAiB,CAACrC;gBAChDgC;gBACAM,YAAY;oBACVC,mBAAmBzG,UAAU0D,MAAM;oBACnCgD,cAAcZ,QAAQpC,MAAM;oBAC5BiD,eAAeV,SAASvC,MAAM;oBAC9BkD,cAAc1C,QAAQR,MAAM;oBAC5B2C;gBACF;YACF;QACF,EAAE,OAAOzH,OAAO;YACdC,QAAQD,KAAK,CAAC,sCAAsCA;YACpD,MAAM,IAAIE,MAAM;QAClB;IACF;IAEA,wBAAwB;IACxB,aAAawH,oBAAoB3G,MAAc,EAAmB;QAChE,IAAI;YACF,sCAAsC;YACtC,yEAAyE;YACzE,MAAMK,YAAY,MAAMzB,SAAE,CACvBU,MAAM,CAAC;gBACN6D,gBAAgBrE,sBAAc,CAACqE,cAAc;YAC/C,GACC5D,IAAI,CAACT,sBAAc,EACnBc,KAAK,CACJU,IAAAA,eAAG,EACDZ,IAAAA,cAAE,EAACZ,sBAAc,CAACkB,MAAM,EAAEA,SAC1BN,IAAAA,cAAE,EAACZ,sBAAc,CAACsB,QAAQ,EAAE,OAC5BU,IAAAA,qBAAS,EAAChC,sBAAc,CAACqE,cAAc,IAG1C5C,OAAO,CAACC,IAAAA,gBAAI,EAAC1B,sBAAc,CAACqE,cAAc;YAE7C,IAAI9C,UAAU0D,MAAM,KAAK,GAAG,OAAO;YAEnC,oEAAoE;YACpE,IAAImD,SAAS;YACb,MAAMtG,MAAM,IAAIC;YAEhB,KAAK,MAAMlC,YAAY0B,UAAW;gBAChC,IAAI,CAAC1B,SAASwE,cAAc,EAAE;gBAE9B,MAAMqD,YAAYW,KAAKC,KAAK,CAC1B,AAACxG,CAAAA,IAAIyG,OAAO,KAAK1I,SAASwE,cAAc,CAACkE,OAAO,EAAC,IAAM,CAAA,OAAO,KAAK,KAAK,EAAC;gBAG3E,IAAIb,aAAa,GAAG;oBAClBU,SAASC,KAAKG,GAAG,CAACJ,QAAQ;gBAC5B;YACF;YAEA,OAAOA;QACT,EAAE,OAAOjI,OAAO;YACdC,QAAQD,KAAK,CAAC,oCAAoCA;YAClD,OAAO;QACT;IACF;IAEA,kBAAkB;IAClB,aAAasI,cAAcC,SAAqC,EAAgC;QAC9F,IAAI;YACF,MAAM,EAAEC,gBAAgB,EAAED,WAAWE,EAAE,EAAElF,cAAc,EAAER,KAAK,EAAE,GAAGwF;YACnE,MAAMG,UAA0C,EAAE;YAClD,IAAIC,eAAe;YACnB,IAAIC,eAAe;YAEnB,KAAK,MAAMxI,MAAMoI,iBAAkB;gBACjC,IAAI;oBACF,IAAI3D;oBAEJ,OAAQ4D;wBACN,KAAK;4BACH5D,SAAS,MAAM,IAAI,CAACF,UAAU,CAACvE;4BAC/B;wBACF,KAAK;4BACHyE,SAAS,MAAM,IAAI,CAACH,UAAU,CAACtE;4BAC/B;wBACF,KAAK;4BACH,MAAM,IAAI,CAACwE,MAAM,CAACxE;4BAClByE,SAAS;gCAAEzE;4BAAG,GAAoB,+BAA+B;4BACjE;wBACF,KAAK;4BACHyE,SAAS,MAAM,IAAI,CAACvB,aAAa,CAAClD,IAAImD;4BACtC;wBACF;4BACE,MAAM,IAAIrD,MAAM,CAAC,mBAAmB,EAAEuI,IAAI;oBAC9C;oBAEAC,QAAQxH,IAAI,CAAC;wBAAE2H,iBAAiBzI;wBAAI0I,SAAS;oBAAK;oBAClDH;gBACF,EAAE,OAAO3I,OAAO;oBACd0I,QAAQxH,IAAI,CAAC;wBACX2H,iBAAiBzI;wBACjB0I,SAAS;wBACT9I,OAAOA,iBAAiBE,QAAQF,MAAM+I,OAAO,GAAG;oBAClD;oBACAH;gBACF;YACF;YAEA,OAAO;gBACLE,SAASH,eAAe;gBACxBA;gBACAC;gBACAF;YACF;QACF,EAAE,OAAO1I,OAAO;YACdC,QAAQD,KAAK,CAAC,qCAAqCA;YACnD,MAAM,IAAIE,MAAM;QAClB;IACF;IAEA,kCAAkC;IAClC,aAAa8I,cAAcjI,MAAc,EAAE+B,QAAgB,EAAoC;QAC7F,IAAI;YACF,MAAM1B,YAAY,MAAMzB,SAAE,CACvBU,MAAM,GACNC,IAAI,CAACT,sBAAc,EACnBU,QAAQ,CAACC,cAAM,EAAEC,IAAAA,cAAE,EAACZ,sBAAc,CAACa,OAAO,EAAEF,cAAM,CAACJ,EAAE,GACrDO,KAAK,CACJU,IAAAA,eAAG,EACDZ,IAAAA,cAAE,EAACZ,sBAAc,CAACkB,MAAM,EAAEA,SAC1BN,IAAAA,cAAE,EAACZ,sBAAc,CAACsB,QAAQ,EAAE,OAC5ByB,IAAAA,iBAAK,EAAC/C,sBAAc,CAACiD,QAAQ,EAAE,CAAC,CAAC,EAAEA,SAAS,CAAC,CAAC,IAGjDxB,OAAO,CAACzB,sBAAc,CAACgD,QAAQ;YAElC,OAAOzB,UAAUK,GAAG,CAAC/B,CAAAA,WACnBuG,wCAAoB,CAACC,oBAAoB,CAACxG,SAASkB,eAAe,EAAElB,SAASc,MAAM;QAEvF,EAAE,OAAOR,OAAO;YACdC,QAAQD,KAAK,CAAC,8CAA8CA;YAC5D,MAAM,IAAIE,MAAM;QAClB;IACF;IAEA,kCAAkC;IAClC,aAAa+I,iBAAiBlI,MAAc,EAAqB;QAC/D,IAAI;YACF,MAAMmI,YAAY,MAAMvJ,SAAE,CACvBwJ,cAAc,CAAC;gBAAErG,UAAUjD,sBAAc,CAACiD,QAAQ;YAAC,GACnDxC,IAAI,CAACT,sBAAc,EACnBc,KAAK,CACJU,IAAAA,eAAG,EACDZ,IAAAA,cAAE,EAACZ,sBAAc,CAACkB,MAAM,EAAEA,SAC1BN,IAAAA,cAAE,EAACZ,sBAAc,CAACsB,QAAQ,EAAE,QAG/BG,OAAO,CAACzB,sBAAc,CAACiD,QAAQ;YAElC,OAAOoG,UAAUzH,GAAG,CAAC2H,CAAAA,IAAKA,EAAEtG,QAAQ,EAAEqE,MAAM,CAACkC;QAC/C,EAAE,OAAOrJ,OAAO;YACdC,QAAQD,KAAK,CAAC,iCAAiCA;YAC/C,MAAM,IAAIE,MAAM;QAClB;IACF;IAEA,oCAAoC;IACpC,aAAaoJ,gBAAgBlJ,EAAU,EAAyC;QAC9E,IAAI;YACF,MAAM,CAACV,SAAS,GAAG,MAAMC,SAAE,CACxBU,MAAM,GACNC,IAAI,CAACT,sBAAc,EACnBU,QAAQ,CAACC,cAAM,EAAEC,IAAAA,cAAE,EAACZ,sBAAc,CAACa,OAAO,EAAEF,cAAM,CAACJ,EAAE,GACrDO,KAAK,CAACF,IAAAA,cAAE,EAACZ,sBAAc,CAACO,EAAE,EAAEA;YAE/B,IAAI,CAACV,YAAY,CAACA,SAASc,MAAM,EAAE,OAAO;YAE1C,OAAOyF,wCAAoB,CAACC,oBAAoB,CAACxG,SAASkB,eAAe,EAAElB,SAASc,MAAM;QAC5F,EAAE,OAAOR,OAAO;YACdC,QAAQD,KAAK,CAAC,gDAAgDA;YAC9D,MAAM,IAAIE,MAAM;QAClB;IACF;AACF"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "c4ca05208914050308141c26db9cc683c8f5fcc6"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_drg5u3ma5 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_drg5u3ma5();
cov_drg5u3ma5().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_drg5u3ma5().s[1]++;
Object.defineProperty(exports, "PlantInstanceQueries", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_drg5u3ma5().f[0]++;
    cov_drg5u3ma5().s[2]++;
    return PlantInstanceQueries;
  }
});
const _drizzleorm =
/* istanbul ignore next */
(cov_drg5u3ma5().s[3]++, require("drizzle-orm"));
const _index =
/* istanbul ignore next */
(cov_drg5u3ma5().s[4]++, require("../index"));
const _schema =
/* istanbul ignore next */
(cov_drg5u3ma5().s[5]++, require("../schema"));
const _plantinstancetypes =
/* istanbul ignore next */
(cov_drg5u3ma5().s[6]++, require("../../types/plant-instance-types"));
class PlantInstanceQueries {
  // Create a new plant instance
  static async create(instanceData) {
    /* istanbul ignore next */
    cov_drg5u3ma5().f[1]++;
    cov_drg5u3ma5().s[7]++;
    try {
      const [instance] =
      /* istanbul ignore next */
      (cov_drg5u3ma5().s[8]++, await _index.db.insert(_schema.plantInstances).values(instanceData).returning());
      /* istanbul ignore next */
      cov_drg5u3ma5().s[9]++;
      return instance;
    } catch (error) {
      /* istanbul ignore next */
      cov_drg5u3ma5().s[10]++;
      console.error('Failed to create plant instance:', error);
      /* istanbul ignore next */
      cov_drg5u3ma5().s[11]++;
      throw new Error('Failed to create plant instance');
    }
  }
  // Get plant instance by ID with plant taxonomy data
  static async getById(id) {
    /* istanbul ignore next */
    cov_drg5u3ma5().f[2]++;
    cov_drg5u3ma5().s[12]++;
    try {
      const [instance] =
      /* istanbul ignore next */
      (cov_drg5u3ma5().s[13]++, await _index.db.select().from(_schema.plantInstances).leftJoin(_schema.plants, (0, _drizzleorm.eq)(_schema.plantInstances.plantId, _schema.plants.id)).where((0, _drizzleorm.eq)(_schema.plantInstances.id, id)));
      /* istanbul ignore next */
      cov_drg5u3ma5().s[14]++;
      if (!instance) {
        /* istanbul ignore next */
        cov_drg5u3ma5().b[0][0]++;
        cov_drg5u3ma5().s[15]++;
        return null;
      } else
      /* istanbul ignore next */
      {
        cov_drg5u3ma5().b[0][1]++;
      }
      cov_drg5u3ma5().s[16]++;
      return {
        ...instance.plant_instances,
        plant: instance.plants
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_drg5u3ma5().s[17]++;
      console.error('Failed to get plant instance by ID:', error);
      /* istanbul ignore next */
      cov_drg5u3ma5().s[18]++;
      throw new Error('Failed to get plant instance');
    }
  }
  // Get all plant instances for a user
  static async getByUserId(userId, activeOnly =
  /* istanbul ignore next */
  (cov_drg5u3ma5().b[1][0]++, true)) {
    /* istanbul ignore next */
    cov_drg5u3ma5().f[3]++;
    cov_drg5u3ma5().s[19]++;
    try {
      const conditions =
      /* istanbul ignore next */
      (cov_drg5u3ma5().s[20]++, [(0, _drizzleorm.eq)(_schema.plantInstances.userId, userId)]);
      /* istanbul ignore next */
      cov_drg5u3ma5().s[21]++;
      if (activeOnly) {
        /* istanbul ignore next */
        cov_drg5u3ma5().b[2][0]++;
        cov_drg5u3ma5().s[22]++;
        conditions.push((0, _drizzleorm.eq)(_schema.plantInstances.isActive, true));
      } else
      /* istanbul ignore next */
      {
        cov_drg5u3ma5().b[2][1]++;
      }
      const instances =
      /* istanbul ignore next */
      (cov_drg5u3ma5().s[23]++, await _index.db.select().from(_schema.plantInstances).leftJoin(_schema.plants, (0, _drizzleorm.eq)(_schema.plantInstances.plantId, _schema.plants.id)).where((0, _drizzleorm.and)(...conditions)).orderBy((0, _drizzleorm.desc)(_schema.plantInstances.createdAt)));
      /* istanbul ignore next */
      cov_drg5u3ma5().s[24]++;
      return instances.map(instance => {
        /* istanbul ignore next */
        cov_drg5u3ma5().f[4]++;
        cov_drg5u3ma5().s[25]++;
        return {
          ...instance.plant_instances,
          plant: instance.plants
        };
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_drg5u3ma5().s[26]++;
      console.error('Failed to get plant instances by user ID:', error);
      /* istanbul ignore next */
      cov_drg5u3ma5().s[27]++;
      throw new Error('Failed to get plant instances');
    }
  }
  // Get plant instances with overdue fertilizer
  static async getOverdueFertilizer(userId) {
    /* istanbul ignore next */
    cov_drg5u3ma5().f[5]++;
    cov_drg5u3ma5().s[28]++;
    try {
      const now =
      /* istanbul ignore next */
      (cov_drg5u3ma5().s[29]++, new Date());
      const instances =
      /* istanbul ignore next */
      (cov_drg5u3ma5().s[30]++, await _index.db.select().from(_schema.plantInstances).leftJoin(_schema.plants, (0, _drizzleorm.eq)(_schema.plantInstances.plantId, _schema.plants.id)).where((0, _drizzleorm.and)((0, _drizzleorm.eq)(_schema.plantInstances.userId, userId), (0, _drizzleorm.eq)(_schema.plantInstances.isActive, true), (0, _drizzleorm.isNotNull)(_schema.plantInstances.fertilizerDue), (0, _drizzleorm.lte)(_schema.plantInstances.fertilizerDue, now))).orderBy((0, _drizzleorm.asc)(_schema.plantInstances.fertilizerDue)));
      /* istanbul ignore next */
      cov_drg5u3ma5().s[31]++;
      return instances.map(instance => {
        /* istanbul ignore next */
        cov_drg5u3ma5().f[6]++;
        cov_drg5u3ma5().s[32]++;
        return {
          ...instance.plant_instances,
          plant: instance.plants
        };
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_drg5u3ma5().s[33]++;
      console.error('Failed to get overdue fertilizer instances:', error);
      /* istanbul ignore next */
      cov_drg5u3ma5().s[34]++;
      throw new Error('Failed to get overdue fertilizer instances');
    }
  }
  // Get plant instances with fertilizer due soon
  static async getFertilizerDueSoon(userId, daysAhead =
  /* istanbul ignore next */
  (cov_drg5u3ma5().b[3][0]++, 7)) {
    /* istanbul ignore next */
    cov_drg5u3ma5().f[7]++;
    cov_drg5u3ma5().s[35]++;
    try {
      const now =
      /* istanbul ignore next */
      (cov_drg5u3ma5().s[36]++, new Date());
      const futureDate =
      /* istanbul ignore next */
      (cov_drg5u3ma5().s[37]++, new Date());
      /* istanbul ignore next */
      cov_drg5u3ma5().s[38]++;
      futureDate.setDate(now.getDate() + daysAhead);
      const instances =
      /* istanbul ignore next */
      (cov_drg5u3ma5().s[39]++, await _index.db.select().from(_schema.plantInstances).leftJoin(_schema.plants, (0, _drizzleorm.eq)(_schema.plantInstances.plantId, _schema.plants.id)).where((0, _drizzleorm.and)((0, _drizzleorm.eq)(_schema.plantInstances.userId, userId), (0, _drizzleorm.eq)(_schema.plantInstances.isActive, true), (0, _drizzleorm.isNotNull)(_schema.plantInstances.fertilizerDue), (0, _drizzleorm.gte)(_schema.plantInstances.fertilizerDue, now), (0, _drizzleorm.lte)(_schema.plantInstances.fertilizerDue, futureDate))).orderBy((0, _drizzleorm.asc)(_schema.plantInstances.fertilizerDue)));
      /* istanbul ignore next */
      cov_drg5u3ma5().s[40]++;
      return instances.map(instance => {
        /* istanbul ignore next */
        cov_drg5u3ma5().f[8]++;
        cov_drg5u3ma5().s[41]++;
        return {
          ...instance.plant_instances,
          plant: instance.plants
        };
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_drg5u3ma5().s[42]++;
      console.error('Failed to get fertilizer due soon instances:', error);
      /* istanbul ignore next */
      cov_drg5u3ma5().s[43]++;
      throw new Error('Failed to get fertilizer due soon instances');
    }
  }
  // Search plant instances by nickname, location, or notes
  static async search(userId, query) {
    /* istanbul ignore next */
    cov_drg5u3ma5().f[9]++;
    cov_drg5u3ma5().s[44]++;
    try {
      const searchTerm =
      /* istanbul ignore next */
      (cov_drg5u3ma5().s[45]++, `%${query.toLowerCase()}%`);
      const instances =
      /* istanbul ignore next */
      (cov_drg5u3ma5().s[46]++, await _index.db.select().from(_schema.plantInstances).leftJoin(_schema.plants, (0, _drizzleorm.eq)(_schema.plantInstances.plantId, _schema.plants.id)).where((0, _drizzleorm.and)((0, _drizzleorm.eq)(_schema.plantInstances.userId, userId), (0, _drizzleorm.eq)(_schema.plantInstances.isActive, true), (0, _drizzleorm.or)((0, _drizzleorm.ilike)(_schema.plantInstances.nickname, searchTerm), (0, _drizzleorm.ilike)(_schema.plantInstances.location, searchTerm), (0, _drizzleorm.ilike)(_schema.plantInstances.notes, searchTerm), (0, _drizzleorm.ilike)(_schema.plants.commonName, searchTerm), (0, _drizzleorm.ilike)(_schema.plants.genus, searchTerm), (0, _drizzleorm.ilike)(_schema.plants.species, searchTerm)))).orderBy((0, _drizzleorm.desc)(_schema.plantInstances.createdAt)));
      /* istanbul ignore next */
      cov_drg5u3ma5().s[47]++;
      return instances.map(instance => {
        /* istanbul ignore next */
        cov_drg5u3ma5().f[10]++;
        cov_drg5u3ma5().s[48]++;
        return {
          ...instance.plant_instances,
          plant: instance.plants
        };
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_drg5u3ma5().s[49]++;
      console.error('Failed to search plant instances:', error);
      /* istanbul ignore next */
      cov_drg5u3ma5().s[50]++;
      throw new Error('Failed to search plant instances');
    }
  }
  // Update plant instance
  static async update(id, instanceData) {
    /* istanbul ignore next */
    cov_drg5u3ma5().f[11]++;
    cov_drg5u3ma5().s[51]++;
    try {
      const [instance] =
      /* istanbul ignore next */
      (cov_drg5u3ma5().s[52]++, await _index.db.update(_schema.plantInstances).set({
        ...instanceData,
        updatedAt: new Date()
      }).where((0, _drizzleorm.eq)(_schema.plantInstances.id, id)).returning());
      /* istanbul ignore next */
      cov_drg5u3ma5().s[53]++;
      if (!instance) {
        /* istanbul ignore next */
        cov_drg5u3ma5().b[4][0]++;
        cov_drg5u3ma5().s[54]++;
        throw new Error('Plant instance not found');
      } else
      /* istanbul ignore next */
      {
        cov_drg5u3ma5().b[4][1]++;
      }
      cov_drg5u3ma5().s[55]++;
      return instance;
    } catch (error) {
      /* istanbul ignore next */
      cov_drg5u3ma5().s[56]++;
      console.error('Failed to update plant instance:', error);
      /* istanbul ignore next */
      cov_drg5u3ma5().s[57]++;
      throw new Error('Failed to update plant instance');
    }
  }
  // Log fertilizer application and calculate next due date
  static async logFertilizer(id, fertilizerDate) {
    /* istanbul ignore next */
    cov_drg5u3ma5().f[12]++;
    cov_drg5u3ma5().s[58]++;
    try {
      const now =
      /* istanbul ignore next */
      (cov_drg5u3ma5().s[59]++,
      /* istanbul ignore next */
      (cov_drg5u3ma5().b[5][0]++, fertilizerDate) ||
      /* istanbul ignore next */
      (cov_drg5u3ma5().b[5][1]++, new Date()));
      // Get current instance to calculate next due date
      const [currentInstance] =
      /* istanbul ignore next */
      (cov_drg5u3ma5().s[60]++, await _index.db.select().from(_schema.plantInstances).where((0, _drizzleorm.eq)(_schema.plantInstances.id, id)));
      /* istanbul ignore next */
      cov_drg5u3ma5().s[61]++;
      if (!currentInstance) {
        /* istanbul ignore next */
        cov_drg5u3ma5().b[6][0]++;
        cov_drg5u3ma5().s[62]++;
        throw new Error('Plant instance not found');
      } else
      /* istanbul ignore next */
      {
        cov_drg5u3ma5().b[6][1]++;
      }
      // Calculate next fertilizer due date based on schedule
      let nextDue =
      /* istanbul ignore next */
      (cov_drg5u3ma5().s[63]++, null);
      /* istanbul ignore next */
      cov_drg5u3ma5().s[64]++;
      if (currentInstance.fertilizerSchedule) {
        /* istanbul ignore next */
        cov_drg5u3ma5().b[7][0]++;
        const scheduleMatch =
        /* istanbul ignore next */
        (cov_drg5u3ma5().s[65]++, currentInstance.fertilizerSchedule.match(/(\d+)\s*(day|week|month)s?/i));
        /* istanbul ignore next */
        cov_drg5u3ma5().s[66]++;
        if (scheduleMatch) {
          /* istanbul ignore next */
          cov_drg5u3ma5().b[8][0]++;
          const [, amount, unit] =
          /* istanbul ignore next */
          (cov_drg5u3ma5().s[67]++, scheduleMatch);
          /* istanbul ignore next */
          cov_drg5u3ma5().s[68]++;
          nextDue = new Date(now);
          /* istanbul ignore next */
          cov_drg5u3ma5().s[69]++;
          switch (unit.toLowerCase()) {
            case 'day':
              /* istanbul ignore next */
              cov_drg5u3ma5().b[9][0]++;
              cov_drg5u3ma5().s[70]++;
              nextDue.setDate(nextDue.getDate() + parseInt(amount, 10));
              /* istanbul ignore next */
              cov_drg5u3ma5().s[71]++;
              break;
            case 'week':
              /* istanbul ignore next */
              cov_drg5u3ma5().b[9][1]++;
              cov_drg5u3ma5().s[72]++;
              nextDue.setDate(nextDue.getDate() + parseInt(amount, 10) * 7);
              /* istanbul ignore next */
              cov_drg5u3ma5().s[73]++;
              break;
            case 'month':
              /* istanbul ignore next */
              cov_drg5u3ma5().b[9][2]++;
              cov_drg5u3ma5().s[74]++;
              nextDue.setMonth(nextDue.getMonth() + parseInt(amount, 10));
              /* istanbul ignore next */
              cov_drg5u3ma5().s[75]++;
              break;
          }
        } else
        /* istanbul ignore next */
        {
          cov_drg5u3ma5().b[8][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_drg5u3ma5().b[7][1]++;
      }
      const [instance] =
      /* istanbul ignore next */
      (cov_drg5u3ma5().s[76]++, await _index.db.update(_schema.plantInstances).set({
        lastFertilized: now,
        fertilizerDue: nextDue,
        updatedAt: new Date()
      }).where((0, _drizzleorm.eq)(_schema.plantInstances.id, id)).returning());
      /* istanbul ignore next */
      cov_drg5u3ma5().s[77]++;
      return instance;
    } catch (error) {
      /* istanbul ignore next */
      cov_drg5u3ma5().s[78]++;
      console.error('Failed to log fertilizer:', error);
      /* istanbul ignore next */
      cov_drg5u3ma5().s[79]++;
      throw new Error('Failed to log fertilizer');
    }
  }
  // Log repotting
  static async logRepot(id, repotDate, notes) {
    /* istanbul ignore next */
    cov_drg5u3ma5().f[13]++;
    cov_drg5u3ma5().s[80]++;
    try {
      const now =
      /* istanbul ignore next */
      (cov_drg5u3ma5().s[81]++,
      /* istanbul ignore next */
      (cov_drg5u3ma5().b[10][0]++, repotDate) ||
      /* istanbul ignore next */
      (cov_drg5u3ma5().b[10][1]++, new Date()));
      const updateData =
      /* istanbul ignore next */
      (cov_drg5u3ma5().s[82]++, {
        lastRepot: now,
        updatedAt: new Date()
      });
      /* istanbul ignore next */
      cov_drg5u3ma5().s[83]++;
      if (notes) {
        /* istanbul ignore next */
        cov_drg5u3ma5().b[11][0]++;
        // Get current instance to append notes
        const [currentInstance] =
        /* istanbul ignore next */
        (cov_drg5u3ma5().s[84]++, await _index.db.select().from(_schema.plantInstances).where((0, _drizzleorm.eq)(_schema.plantInstances.id, id)));
        /* istanbul ignore next */
        cov_drg5u3ma5().s[85]++;
        if (currentInstance) {
          /* istanbul ignore next */
          cov_drg5u3ma5().b[12][0]++;
          const existingNotes =
          /* istanbul ignore next */
          (cov_drg5u3ma5().s[86]++,
          /* istanbul ignore next */
          (cov_drg5u3ma5().b[13][0]++, currentInstance.notes) ||
          /* istanbul ignore next */
          (cov_drg5u3ma5().b[13][1]++, ''));
          const repotNote =
          /* istanbul ignore next */
          (cov_drg5u3ma5().s[87]++, `Repotted on ${now.toDateString()}: ${notes}`);
          /* istanbul ignore next */
          cov_drg5u3ma5().s[88]++;
          updateData.notes = existingNotes ?
          /* istanbul ignore next */
          (cov_drg5u3ma5().b[14][0]++, `${existingNotes}\n${repotNote}`) :
          /* istanbul ignore next */
          (cov_drg5u3ma5().b[14][1]++, repotNote);
        } else
        /* istanbul ignore next */
        {
          cov_drg5u3ma5().b[12][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_drg5u3ma5().b[11][1]++;
      }
      const [instance] =
      /* istanbul ignore next */
      (cov_drg5u3ma5().s[89]++, await _index.db.update(_schema.plantInstances).set(updateData).where((0, _drizzleorm.eq)(_schema.plantInstances.id, id)).returning());
      /* istanbul ignore next */
      cov_drg5u3ma5().s[90]++;
      if (!instance) {
        /* istanbul ignore next */
        cov_drg5u3ma5().b[15][0]++;
        cov_drg5u3ma5().s[91]++;
        throw new Error('Plant instance not found');
      } else
      /* istanbul ignore next */
      {
        cov_drg5u3ma5().b[15][1]++;
      }
      cov_drg5u3ma5().s[92]++;
      return instance;
    } catch (error) {
      /* istanbul ignore next */
      cov_drg5u3ma5().s[93]++;
      console.error('Failed to log repot:', error);
      /* istanbul ignore next */
      cov_drg5u3ma5().s[94]++;
      throw new Error('Failed to log repot');
    }
  }
  // Deactivate plant instance (soft delete)
  static async deactivate(id) {
    /* istanbul ignore next */
    cov_drg5u3ma5().f[14]++;
    cov_drg5u3ma5().s[95]++;
    try {
      const [instance] =
      /* istanbul ignore next */
      (cov_drg5u3ma5().s[96]++, await _index.db.update(_schema.plantInstances).set({
        isActive: false,
        updatedAt: new Date()
      }).where((0, _drizzleorm.eq)(_schema.plantInstances.id, id)).returning());
      /* istanbul ignore next */
      cov_drg5u3ma5().s[97]++;
      if (!instance) {
        /* istanbul ignore next */
        cov_drg5u3ma5().b[16][0]++;
        cov_drg5u3ma5().s[98]++;
        throw new Error('Plant instance not found');
      } else
      /* istanbul ignore next */
      {
        cov_drg5u3ma5().b[16][1]++;
      }
      cov_drg5u3ma5().s[99]++;
      return instance;
    } catch (error) {
      /* istanbul ignore next */
      cov_drg5u3ma5().s[100]++;
      console.error('Failed to deactivate plant instance:', error);
      /* istanbul ignore next */
      cov_drg5u3ma5().s[101]++;
      throw new Error('Failed to deactivate plant instance');
    }
  }
  // Reactivate plant instance
  static async reactivate(id) {
    /* istanbul ignore next */
    cov_drg5u3ma5().f[15]++;
    cov_drg5u3ma5().s[102]++;
    try {
      const [instance] =
      /* istanbul ignore next */
      (cov_drg5u3ma5().s[103]++, await _index.db.update(_schema.plantInstances).set({
        isActive: true,
        updatedAt: new Date()
      }).where((0, _drizzleorm.eq)(_schema.plantInstances.id, id)).returning());
      /* istanbul ignore next */
      cov_drg5u3ma5().s[104]++;
      if (!instance) {
        /* istanbul ignore next */
        cov_drg5u3ma5().b[17][0]++;
        cov_drg5u3ma5().s[105]++;
        throw new Error('Plant instance not found');
      } else
      /* istanbul ignore next */
      {
        cov_drg5u3ma5().b[17][1]++;
      }
      cov_drg5u3ma5().s[106]++;
      return instance;
    } catch (error) {
      /* istanbul ignore next */
      cov_drg5u3ma5().s[107]++;
      console.error('Failed to reactivate plant instance:', error);
      /* istanbul ignore next */
      cov_drg5u3ma5().s[108]++;
      throw new Error('Failed to reactivate plant instance');
    }
  }
  // Delete plant instance permanently
  static async delete(id) {
    /* istanbul ignore next */
    cov_drg5u3ma5().f[16]++;
    cov_drg5u3ma5().s[109]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_drg5u3ma5().s[110]++, await _index.db.delete(_schema.plantInstances).where((0, _drizzleorm.eq)(_schema.plantInstances.id, id)));
      /* istanbul ignore next */
      cov_drg5u3ma5().s[111]++;
      return result.length > 0;
    } catch (error) {
      /* istanbul ignore next */
      cov_drg5u3ma5().s[112]++;
      console.error('Failed to delete plant instance:', error);
      /* istanbul ignore next */
      cov_drg5u3ma5().s[113]++;
      throw new Error('Failed to delete plant instance');
    }
  }
  // Get care statistics for a user
  static async getCareStats(userId) {
    /* istanbul ignore next */
    cov_drg5u3ma5().f[17]++;
    cov_drg5u3ma5().s[114]++;
    try {
      const now =
      /* istanbul ignore next */
      (cov_drg5u3ma5().s[115]++, new Date());
      const weekFromNow =
      /* istanbul ignore next */
      (cov_drg5u3ma5().s[116]++, new Date());
      /* istanbul ignore next */
      cov_drg5u3ma5().s[117]++;
      weekFromNow.setDate(now.getDate() + 7);
      const [stats] =
      /* istanbul ignore next */
      (cov_drg5u3ma5().s[118]++, await _index.db.select({
        totalPlants: (0, _drizzleorm.sql)`count(*)`,
        activePlants: (0, _drizzleorm.sql)`count(*) filter (where ${_schema.plantInstances.isActive} = true)`,
        overdueFertilizer: (0, _drizzleorm.sql)`count(*) filter (where ${_schema.plantInstances.isActive} = true and ${_schema.plantInstances.fertilizerDue} <= ${now})`,
        dueSoon: (0, _drizzleorm.sql)`count(*) filter (where ${_schema.plantInstances.isActive} = true and ${_schema.plantInstances.fertilizerDue} > ${now} and ${_schema.plantInstances.fertilizerDue} <= ${weekFromNow})`
      }).from(_schema.plantInstances).where((0, _drizzleorm.eq)(_schema.plantInstances.userId, userId)));
      /* istanbul ignore next */
      cov_drg5u3ma5().s[119]++;
      return stats;
    } catch (error) {
      /* istanbul ignore next */
      cov_drg5u3ma5().s[120]++;
      console.error('Failed to get care stats:', error);
      /* istanbul ignore next */
      cov_drg5u3ma5().s[121]++;
      throw new Error('Failed to get care stats');
    }
  }
  // Enhanced search with filters
  static async searchWithFilters(searchParams) {
    /* istanbul ignore next */
    cov_drg5u3ma5().f[18]++;
    cov_drg5u3ma5().s[122]++;
    try {
      const startTime =
      /* istanbul ignore next */
      (cov_drg5u3ma5().s[123]++, Date.now());
      const {
        query,
        userId,
        activeOnly,
        limit,
        offset
      } =
      /* istanbul ignore next */
      (cov_drg5u3ma5().s[124]++, searchParams);
      const searchTerm =
      /* istanbul ignore next */
      (cov_drg5u3ma5().s[125]++, `%${query.toLowerCase()}%`);
      const conditions =
      /* istanbul ignore next */
      (cov_drg5u3ma5().s[126]++, [(0, _drizzleorm.eq)(_schema.plantInstances.userId, userId)]);
      /* istanbul ignore next */
      cov_drg5u3ma5().s[127]++;
      if (activeOnly) {
        /* istanbul ignore next */
        cov_drg5u3ma5().b[18][0]++;
        cov_drg5u3ma5().s[128]++;
        conditions.push((0, _drizzleorm.eq)(_schema.plantInstances.isActive, true));
      } else
      /* istanbul ignore next */
      {
        cov_drg5u3ma5().b[18][1]++;
      }
      // Add search conditions
      cov_drg5u3ma5().s[129]++;
      conditions.push((0, _drizzleorm.or)((0, _drizzleorm.ilike)(_schema.plantInstances.nickname, searchTerm), (0, _drizzleorm.ilike)(_schema.plantInstances.location, searchTerm), (0, _drizzleorm.ilike)(_schema.plantInstances.notes, searchTerm), (0, _drizzleorm.ilike)(_schema.plants.commonName, searchTerm), (0, _drizzleorm.ilike)(_schema.plants.genus, searchTerm), (0, _drizzleorm.ilike)(_schema.plants.species, searchTerm), (0, _drizzleorm.ilike)(_schema.plants.family, searchTerm)));
      // Get total count
      const [countResult] =
      /* istanbul ignore next */
      (cov_drg5u3ma5().s[130]++, await _index.db.select({
        count: (0, _drizzleorm.sql)`count(*)`
      }).from(_schema.plantInstances).leftJoin(_schema.plants, (0, _drizzleorm.eq)(_schema.plantInstances.plantId, _schema.plants.id)).where((0, _drizzleorm.and)(...conditions)));
      const totalCount =
      /* istanbul ignore next */
      (cov_drg5u3ma5().s[131]++, countResult.count);
      // Get instances with plant data
      const instances =
      /* istanbul ignore next */
      (cov_drg5u3ma5().s[132]++, await _index.db.select().from(_schema.plantInstances).leftJoin(_schema.plants, (0, _drizzleorm.eq)(_schema.plantInstances.plantId, _schema.plants.id)).where((0, _drizzleorm.and)(...conditions)).orderBy((0, _drizzleorm.desc)(_schema.plantInstances.createdAt)).limit(limit).offset(offset));
      const enhancedInstances =
      /* istanbul ignore next */
      (cov_drg5u3ma5().s[133]++, instances.map(instance => {
        /* istanbul ignore next */
        cov_drg5u3ma5().f[19]++;
        cov_drg5u3ma5().s[134]++;
        return _plantinstancetypes.plantInstanceHelpers.enhancePlantInstance(instance.plant_instances, instance.plants);
      }));
      const searchTime =
      /* istanbul ignore next */
      (cov_drg5u3ma5().s[135]++, Date.now() - startTime);
      /* istanbul ignore next */
      cov_drg5u3ma5().s[136]++;
      return {
        instances: enhancedInstances,
        totalCount,
        hasMore: offset + limit < totalCount,
        searchTime,
        filters: {
          ...searchParams,
          overdueOnly: false
        }
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_drg5u3ma5().s[137]++;
      console.error('Failed to search plant instances with filters:', error);
      /* istanbul ignore next */
      cov_drg5u3ma5().s[138]++;
      throw new Error('Failed to search plant instances');
    }
  }
  // Advanced filtering
  static async getWithFilters(filterParams) {
    /* istanbul ignore next */
    cov_drg5u3ma5().f[20]++;
    cov_drg5u3ma5().s[139]++;
    try {
      const startTime =
      /* istanbul ignore next */
      (cov_drg5u3ma5().s[140]++, Date.now());
      const {
        userId,
        location,
        plantId,
        isActive,
        overdueOnly,
        dueSoonDays,
        createdAfter,
        createdBefore,
        lastFertilizedAfter,
        lastFertilizedBefore,
        limit,
        offset
      } =
      /* istanbul ignore next */
      (cov_drg5u3ma5().s[141]++, filterParams);
      const conditions =
      /* istanbul ignore next */
      (cov_drg5u3ma5().s[142]++, [(0, _drizzleorm.eq)(_schema.plantInstances.userId, userId)]);
      // Apply filters
      /* istanbul ignore next */
      cov_drg5u3ma5().s[143]++;
      if (location) {
        /* istanbul ignore next */
        cov_drg5u3ma5().b[19][0]++;
        cov_drg5u3ma5().s[144]++;
        conditions.push((0, _drizzleorm.ilike)(_schema.plantInstances.location, `%${location}%`));
      } else
      /* istanbul ignore next */
      {
        cov_drg5u3ma5().b[19][1]++;
      }
      cov_drg5u3ma5().s[145]++;
      if (plantId) {
        /* istanbul ignore next */
        cov_drg5u3ma5().b[20][0]++;
        cov_drg5u3ma5().s[146]++;
        conditions.push((0, _drizzleorm.eq)(_schema.plantInstances.plantId, plantId));
      } else
      /* istanbul ignore next */
      {
        cov_drg5u3ma5().b[20][1]++;
      }
      cov_drg5u3ma5().s[147]++;
      if (isActive !== undefined) {
        /* istanbul ignore next */
        cov_drg5u3ma5().b[21][0]++;
        cov_drg5u3ma5().s[148]++;
        conditions.push((0, _drizzleorm.eq)(_schema.plantInstances.isActive, isActive));
      } else
      /* istanbul ignore next */
      {
        cov_drg5u3ma5().b[21][1]++;
      }
      cov_drg5u3ma5().s[149]++;
      if (overdueOnly) {
        /* istanbul ignore next */
        cov_drg5u3ma5().b[22][0]++;
        const now =
        /* istanbul ignore next */
        (cov_drg5u3ma5().s[150]++, new Date());
        /* istanbul ignore next */
        cov_drg5u3ma5().s[151]++;
        conditions.push((0, _drizzleorm.and)((0, _drizzleorm.isNotNull)(_schema.plantInstances.fertilizerDue), (0, _drizzleorm.lte)(_schema.plantInstances.fertilizerDue, now)));
      } else
      /* istanbul ignore next */
      {
        cov_drg5u3ma5().b[22][1]++;
      }
      cov_drg5u3ma5().s[152]++;
      if (dueSoonDays) {
        /* istanbul ignore next */
        cov_drg5u3ma5().b[23][0]++;
        const now =
        /* istanbul ignore next */
        (cov_drg5u3ma5().s[153]++, new Date());
        const futureDate =
        /* istanbul ignore next */
        (cov_drg5u3ma5().s[154]++, new Date());
        /* istanbul ignore next */
        cov_drg5u3ma5().s[155]++;
        futureDate.setDate(now.getDate() + dueSoonDays);
        /* istanbul ignore next */
        cov_drg5u3ma5().s[156]++;
        conditions.push((0, _drizzleorm.and)((0, _drizzleorm.isNotNull)(_schema.plantInstances.fertilizerDue), (0, _drizzleorm.gte)(_schema.plantInstances.fertilizerDue, now), (0, _drizzleorm.lte)(_schema.plantInstances.fertilizerDue, futureDate)));
      } else
      /* istanbul ignore next */
      {
        cov_drg5u3ma5().b[23][1]++;
      }
      cov_drg5u3ma5().s[157]++;
      if (createdAfter) {
        /* istanbul ignore next */
        cov_drg5u3ma5().b[24][0]++;
        cov_drg5u3ma5().s[158]++;
        conditions.push((0, _drizzleorm.gte)(_schema.plantInstances.createdAt, createdAfter));
      } else
      /* istanbul ignore next */
      {
        cov_drg5u3ma5().b[24][1]++;
      }
      cov_drg5u3ma5().s[159]++;
      if (createdBefore) {
        /* istanbul ignore next */
        cov_drg5u3ma5().b[25][0]++;
        cov_drg5u3ma5().s[160]++;
        conditions.push((0, _drizzleorm.lte)(_schema.plantInstances.createdAt, createdBefore));
      } else
      /* istanbul ignore next */
      {
        cov_drg5u3ma5().b[25][1]++;
      }
      cov_drg5u3ma5().s[161]++;
      if (lastFertilizedAfter) {
        /* istanbul ignore next */
        cov_drg5u3ma5().b[26][0]++;
        cov_drg5u3ma5().s[162]++;
        conditions.push((0, _drizzleorm.and)((0, _drizzleorm.isNotNull)(_schema.plantInstances.lastFertilized), (0, _drizzleorm.gte)(_schema.plantInstances.lastFertilized, lastFertilizedAfter)));
      } else
      /* istanbul ignore next */
      {
        cov_drg5u3ma5().b[26][1]++;
      }
      cov_drg5u3ma5().s[163]++;
      if (lastFertilizedBefore) {
        /* istanbul ignore next */
        cov_drg5u3ma5().b[27][0]++;
        cov_drg5u3ma5().s[164]++;
        conditions.push((0, _drizzleorm.and)((0, _drizzleorm.isNotNull)(_schema.plantInstances.lastFertilized), (0, _drizzleorm.lte)(_schema.plantInstances.lastFertilized, lastFertilizedBefore)));
      } else
      /* istanbul ignore next */
      {
        cov_drg5u3ma5().b[27][1]++;
      }
      // Get total count
      const [countResult] =
      /* istanbul ignore next */
      (cov_drg5u3ma5().s[165]++, await _index.db.select({
        count: (0, _drizzleorm.sql)`count(*)`
      }).from(_schema.plantInstances).leftJoin(_schema.plants, (0, _drizzleorm.eq)(_schema.plantInstances.plantId, _schema.plants.id)).where((0, _drizzleorm.and)(...conditions)));
      const totalCount =
      /* istanbul ignore next */
      (cov_drg5u3ma5().s[166]++, countResult.count);
      // Get instances with plant data
      const instances =
      /* istanbul ignore next */
      (cov_drg5u3ma5().s[167]++, await _index.db.select().from(_schema.plantInstances).leftJoin(_schema.plants, (0, _drizzleorm.eq)(_schema.plantInstances.plantId, _schema.plants.id)).where((0, _drizzleorm.and)(...conditions)).orderBy(
      /* istanbul ignore next */
      (cov_drg5u3ma5().b[29][0]++, overdueOnly) ||
      /* istanbul ignore next */
      (cov_drg5u3ma5().b[29][1]++, dueSoonDays) ?
      /* istanbul ignore next */
      (cov_drg5u3ma5().b[28][0]++, (0, _drizzleorm.asc)(_schema.plantInstances.fertilizerDue)) :
      /* istanbul ignore next */
      (cov_drg5u3ma5().b[28][1]++, (0, _drizzleorm.desc)(_schema.plantInstances.createdAt))).limit(limit).offset(offset));
      const enhancedInstances =
      /* istanbul ignore next */
      (cov_drg5u3ma5().s[168]++, instances.map(instance => {
        /* istanbul ignore next */
        cov_drg5u3ma5().f[21]++;
        cov_drg5u3ma5().s[169]++;
        return _plantinstancetypes.plantInstanceHelpers.enhancePlantInstance(instance.plant_instances, instance.plants);
      }));
      const searchTime =
      /* istanbul ignore next */
      (cov_drg5u3ma5().s[170]++, Date.now() - startTime);
      /* istanbul ignore next */
      cov_drg5u3ma5().s[171]++;
      return {
        instances: enhancedInstances,
        totalCount,
        hasMore: offset + limit < totalCount,
        searchTime,
        filters: filterParams
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_drg5u3ma5().s[172]++;
      console.error('Failed to get plant instances with filters:', error);
      /* istanbul ignore next */
      cov_drg5u3ma5().s[173]++;
      throw new Error('Failed to get plant instances with filters');
    }
  }
  // Get enhanced plant instances for a user
  static async getEnhancedByUserId(userId, activeOnly =
  /* istanbul ignore next */
  (cov_drg5u3ma5().b[30][0]++, true)) {
    /* istanbul ignore next */
    cov_drg5u3ma5().f[22]++;
    cov_drg5u3ma5().s[174]++;
    try {
      const conditions =
      /* istanbul ignore next */
      (cov_drg5u3ma5().s[175]++, [(0, _drizzleorm.eq)(_schema.plantInstances.userId, userId)]);
      /* istanbul ignore next */
      cov_drg5u3ma5().s[176]++;
      if (activeOnly) {
        /* istanbul ignore next */
        cov_drg5u3ma5().b[31][0]++;
        cov_drg5u3ma5().s[177]++;
        conditions.push((0, _drizzleorm.eq)(_schema.plantInstances.isActive, true));
      } else
      /* istanbul ignore next */
      {
        cov_drg5u3ma5().b[31][1]++;
      }
      const instances =
      /* istanbul ignore next */
      (cov_drg5u3ma5().s[178]++, await _index.db.select().from(_schema.plantInstances).leftJoin(_schema.plants, (0, _drizzleorm.eq)(_schema.plantInstances.plantId, _schema.plants.id)).where((0, _drizzleorm.and)(...conditions)).orderBy((0, _drizzleorm.desc)(_schema.plantInstances.createdAt)));
      /* istanbul ignore next */
      cov_drg5u3ma5().s[179]++;
      return instances.map(instance => {
        /* istanbul ignore next */
        cov_drg5u3ma5().f[23]++;
        cov_drg5u3ma5().s[180]++;
        return _plantinstancetypes.plantInstanceHelpers.enhancePlantInstance(instance.plant_instances, instance.plants);
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_drg5u3ma5().s[181]++;
      console.error('Failed to get enhanced plant instances:', error);
      /* istanbul ignore next */
      cov_drg5u3ma5().s[182]++;
      throw new Error('Failed to get enhanced plant instances');
    }
  }
  // Get care dashboard data
  static async getCareDashboardData(userId) {
    /* istanbul ignore next */
    cov_drg5u3ma5().f[24]++;
    cov_drg5u3ma5().s[183]++;
    try {
      const now =
      /* istanbul ignore next */
      (cov_drg5u3ma5().s[184]++, new Date());
      const tomorrow =
      /* istanbul ignore next */
      (cov_drg5u3ma5().s[185]++, new Date());
      /* istanbul ignore next */
      cov_drg5u3ma5().s[186]++;
      tomorrow.setDate(now.getDate() + 1);
      const weekFromNow =
      /* istanbul ignore next */
      (cov_drg5u3ma5().s[187]++, new Date());
      /* istanbul ignore next */
      cov_drg5u3ma5().s[188]++;
      weekFromNow.setDate(now.getDate() + 7);
      // Get all active instances with plant data
      const instances =
      /* istanbul ignore next */
      (cov_drg5u3ma5().s[189]++, await this.getEnhancedByUserId(userId, true));
      // Categorize by care status
      const overdue =
      /* istanbul ignore next */
      (cov_drg5u3ma5().s[190]++, instances.filter(instance => {
        /* istanbul ignore next */
        cov_drg5u3ma5().f[25]++;
        cov_drg5u3ma5().s[191]++;
        return instance.careStatus === 'overdue';
      }));
      const dueToday =
      /* istanbul ignore next */
      (cov_drg5u3ma5().s[192]++, instances.filter(instance => {
        /* istanbul ignore next */
        cov_drg5u3ma5().f[26]++;
        cov_drg5u3ma5().s[193]++;
        return instance.careStatus === 'due_today';
      }));
      const dueSoon =
      /* istanbul ignore next */
      (cov_drg5u3ma5().s[194]++, instances.filter(instance => {
        /* istanbul ignore next */
        cov_drg5u3ma5().f[27]++;
        cov_drg5u3ma5().s[195]++;
        return instance.careStatus === 'due_soon';
      }));
      // Get recently cared for plants (fertilized in last 7 days)
      const recentlyCared =
      /* istanbul ignore next */
      (cov_drg5u3ma5().s[196]++, instances.filter(instance => {
        /* istanbul ignore next */
        cov_drg5u3ma5().f[28]++;
        cov_drg5u3ma5().s[197]++;
        if (!instance.lastFertilized) {
          /* istanbul ignore next */
          cov_drg5u3ma5().b[32][0]++;
          cov_drg5u3ma5().s[198]++;
          return false;
        } else
        /* istanbul ignore next */
        {
          cov_drg5u3ma5().b[32][1]++;
        }
        const daysSince =
        /* istanbul ignore next */
        (cov_drg5u3ma5().s[199]++, _plantinstancetypes.plantInstanceHelpers.calculateDaysSinceLastFertilized(instance.lastFertilized));
        /* istanbul ignore next */
        cov_drg5u3ma5().s[200]++;
        return /* istanbul ignore next */(cov_drg5u3ma5().b[33][0]++, daysSince !== null) &&
        /* istanbul ignore next */
        (cov_drg5u3ma5().b[33][1]++, daysSince <= 7);
      }));
      // Calculate care streak (consecutive days with care activity)
      const careStreakDays =
      /* istanbul ignore next */
      (cov_drg5u3ma5().s[201]++, await this.calculateCareStreak(userId));
      /* istanbul ignore next */
      cov_drg5u3ma5().s[202]++;
      return {
        overdue: _plantinstancetypes.plantInstanceHelpers.sortByCareUrgency(overdue),
        dueToday: _plantinstancetypes.plantInstanceHelpers.sortByCareUrgency(dueToday),
        dueSoon: _plantinstancetypes.plantInstanceHelpers.sortByCareUrgency(dueSoon),
        recentlyCared,
        statistics: {
          totalActivePlants: instances.length,
          overdueCount: overdue.length,
          dueTodayCount: dueToday.length,
          dueSoonCount: dueSoon.length,
          careStreakDays
        }
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_drg5u3ma5().s[203]++;
      console.error('Failed to get care dashboard data:', error);
      /* istanbul ignore next */
      cov_drg5u3ma5().s[204]++;
      throw new Error('Failed to get care dashboard data');
    }
  }
  // Calculate care streak
  static async calculateCareStreak(userId) {
    /* istanbul ignore next */
    cov_drg5u3ma5().f[29]++;
    cov_drg5u3ma5().s[205]++;
    try {
      // This is a simplified implementation
      // In a real app, you might want to track care events in a separate table
      const instances =
      /* istanbul ignore next */
      (cov_drg5u3ma5().s[206]++, await _index.db.select({
        lastFertilized: _schema.plantInstances.lastFertilized
      }).from(_schema.plantInstances).where((0, _drizzleorm.and)((0, _drizzleorm.eq)(_schema.plantInstances.userId, userId), (0, _drizzleorm.eq)(_schema.plantInstances.isActive, true), (0, _drizzleorm.isNotNull)(_schema.plantInstances.lastFertilized))).orderBy((0, _drizzleorm.desc)(_schema.plantInstances.lastFertilized)));
      /* istanbul ignore next */
      cov_drg5u3ma5().s[207]++;
      if (instances.length === 0) {
        /* istanbul ignore next */
        cov_drg5u3ma5().b[34][0]++;
        cov_drg5u3ma5().s[208]++;
        return 0;
      } else
      /* istanbul ignore next */
      {
        cov_drg5u3ma5().b[34][1]++;
      }
      // Simple streak calculation based on recent fertilizer applications
      let streak =
      /* istanbul ignore next */
      (cov_drg5u3ma5().s[209]++, 0);
      const now =
      /* istanbul ignore next */
      (cov_drg5u3ma5().s[210]++, new Date());
      /* istanbul ignore next */
      cov_drg5u3ma5().s[211]++;
      for (const instance of instances) {
        /* istanbul ignore next */
        cov_drg5u3ma5().s[212]++;
        if (!instance.lastFertilized) {
          /* istanbul ignore next */
          cov_drg5u3ma5().b[35][0]++;
          cov_drg5u3ma5().s[213]++;
          break;
        } else
        /* istanbul ignore next */
        {
          cov_drg5u3ma5().b[35][1]++;
        }
        const daysSince =
        /* istanbul ignore next */
        (cov_drg5u3ma5().s[214]++, Math.floor((now.getTime() - instance.lastFertilized.getTime()) / (1000 * 60 * 60 * 24)));
        /* istanbul ignore next */
        cov_drg5u3ma5().s[215]++;
        if (daysSince <= 1) {
          /* istanbul ignore next */
          cov_drg5u3ma5().b[36][0]++;
          cov_drg5u3ma5().s[216]++;
          streak = Math.max(streak, 1);
        } else
        /* istanbul ignore next */
        {
          cov_drg5u3ma5().b[36][1]++;
        }
      }
      /* istanbul ignore next */
      cov_drg5u3ma5().s[217]++;
      return streak;
    } catch (error) {
      /* istanbul ignore next */
      cov_drg5u3ma5().s[218]++;
      console.error('Failed to calculate care streak:', error);
      /* istanbul ignore next */
      cov_drg5u3ma5().s[219]++;
      return 0;
    }
  }
  // Bulk operations
  static async bulkOperation(operation) {
    /* istanbul ignore next */
    cov_drg5u3ma5().f[30]++;
    cov_drg5u3ma5().s[220]++;
    try {
      const {
        plantInstanceIds,
        operation: op,
        fertilizerDate,
        notes
      } =
      /* istanbul ignore next */
      (cov_drg5u3ma5().s[221]++, operation);
      const results =
      /* istanbul ignore next */
      (cov_drg5u3ma5().s[222]++, []);
      let successCount =
      /* istanbul ignore next */
      (cov_drg5u3ma5().s[223]++, 0);
      let failureCount =
      /* istanbul ignore next */
      (cov_drg5u3ma5().s[224]++, 0);
      /* istanbul ignore next */
      cov_drg5u3ma5().s[225]++;
      for (const id of plantInstanceIds) {
        /* istanbul ignore next */
        cov_drg5u3ma5().s[226]++;
        try {
          let result;
          /* istanbul ignore next */
          cov_drg5u3ma5().s[227]++;
          switch (op) {
            case 'activate':
              /* istanbul ignore next */
              cov_drg5u3ma5().b[37][0]++;
              cov_drg5u3ma5().s[228]++;
              result = await this.reactivate(id);
              /* istanbul ignore next */
              cov_drg5u3ma5().s[229]++;
              break;
            case 'deactivate':
              /* istanbul ignore next */
              cov_drg5u3ma5().b[37][1]++;
              cov_drg5u3ma5().s[230]++;
              result = await this.deactivate(id);
              /* istanbul ignore next */
              cov_drg5u3ma5().s[231]++;
              break;
            case 'delete':
              /* istanbul ignore next */
              cov_drg5u3ma5().b[37][2]++;
              cov_drg5u3ma5().s[232]++;
              await this.delete(id);
              /* istanbul ignore next */
              cov_drg5u3ma5().s[233]++;
              result = {
                id
              }; // Placeholder for deleted item
              /* istanbul ignore next */
              cov_drg5u3ma5().s[234]++;
              break;
            case 'fertilize':
              /* istanbul ignore next */
              cov_drg5u3ma5().b[37][3]++;
              cov_drg5u3ma5().s[235]++;
              result = await this.logFertilizer(id, fertilizerDate);
              /* istanbul ignore next */
              cov_drg5u3ma5().s[236]++;
              break;
            default:
              /* istanbul ignore next */
              cov_drg5u3ma5().b[37][4]++;
              cov_drg5u3ma5().s[237]++;
              throw new Error(`Unknown operation: ${op}`);
          }
          /* istanbul ignore next */
          cov_drg5u3ma5().s[238]++;
          results.push({
            plantInstanceId: id,
            success: true
          });
          /* istanbul ignore next */
          cov_drg5u3ma5().s[239]++;
          successCount++;
        } catch (error) {
          /* istanbul ignore next */
          cov_drg5u3ma5().s[240]++;
          results.push({
            plantInstanceId: id,
            success: false,
            error: error instanceof Error ?
            /* istanbul ignore next */
            (cov_drg5u3ma5().b[38][0]++, error.message) :
            /* istanbul ignore next */
            (cov_drg5u3ma5().b[38][1]++, 'Unknown error')
          });
          /* istanbul ignore next */
          cov_drg5u3ma5().s[241]++;
          failureCount++;
        }
      }
      /* istanbul ignore next */
      cov_drg5u3ma5().s[242]++;
      return {
        success: successCount > 0,
        successCount,
        failureCount,
        results
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_drg5u3ma5().s[243]++;
      console.error('Failed to perform bulk operation:', error);
      /* istanbul ignore next */
      cov_drg5u3ma5().s[244]++;
      throw new Error('Failed to perform bulk operation');
    }
  }
  // Get plant instances by location
  static async getByLocation(userId, location) {
    /* istanbul ignore next */
    cov_drg5u3ma5().f[31]++;
    cov_drg5u3ma5().s[245]++;
    try {
      const instances =
      /* istanbul ignore next */
      (cov_drg5u3ma5().s[246]++, await _index.db.select().from(_schema.plantInstances).leftJoin(_schema.plants, (0, _drizzleorm.eq)(_schema.plantInstances.plantId, _schema.plants.id)).where((0, _drizzleorm.and)((0, _drizzleorm.eq)(_schema.plantInstances.userId, userId), (0, _drizzleorm.eq)(_schema.plantInstances.isActive, true), (0, _drizzleorm.ilike)(_schema.plantInstances.location, `%${location}%`))).orderBy(_schema.plantInstances.nickname));
      /* istanbul ignore next */
      cov_drg5u3ma5().s[247]++;
      return instances.map(instance => {
        /* istanbul ignore next */
        cov_drg5u3ma5().f[32]++;
        cov_drg5u3ma5().s[248]++;
        return _plantinstancetypes.plantInstanceHelpers.enhancePlantInstance(instance.plant_instances, instance.plants);
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_drg5u3ma5().s[249]++;
      console.error('Failed to get plant instances by location:', error);
      /* istanbul ignore next */
      cov_drg5u3ma5().s[250]++;
      throw new Error('Failed to get plant instances by location');
    }
  }
  // Get unique locations for a user
  static async getUserLocations(userId) {
    /* istanbul ignore next */
    cov_drg5u3ma5().f[33]++;
    cov_drg5u3ma5().s[251]++;
    try {
      const locations =
      /* istanbul ignore next */
      (cov_drg5u3ma5().s[252]++, await _index.db.selectDistinct({
        location: _schema.plantInstances.location
      }).from(_schema.plantInstances).where((0, _drizzleorm.and)((0, _drizzleorm.eq)(_schema.plantInstances.userId, userId), (0, _drizzleorm.eq)(_schema.plantInstances.isActive, true))).orderBy(_schema.plantInstances.location));
      /* istanbul ignore next */
      cov_drg5u3ma5().s[253]++;
      return locations.map(l => {
        /* istanbul ignore next */
        cov_drg5u3ma5().f[34]++;
        cov_drg5u3ma5().s[254]++;
        return l.location;
      }).filter(Boolean);
    } catch (error) {
      /* istanbul ignore next */
      cov_drg5u3ma5().s[255]++;
      console.error('Failed to get user locations:', error);
      /* istanbul ignore next */
      cov_drg5u3ma5().s[256]++;
      throw new Error('Failed to get user locations');
    }
  }
  // Get enhanced plant instance by ID
  static async getEnhancedById(id) {
    /* istanbul ignore next */
    cov_drg5u3ma5().f[35]++;
    cov_drg5u3ma5().s[257]++;
    try {
      const [instance] =
      /* istanbul ignore next */
      (cov_drg5u3ma5().s[258]++, await _index.db.select().from(_schema.plantInstances).leftJoin(_schema.plants, (0, _drizzleorm.eq)(_schema.plantInstances.plantId, _schema.plants.id)).where((0, _drizzleorm.eq)(_schema.plantInstances.id, id)));
      /* istanbul ignore next */
      cov_drg5u3ma5().s[259]++;
      if (
      /* istanbul ignore next */
      (cov_drg5u3ma5().b[40][0]++, !instance) ||
      /* istanbul ignore next */
      (cov_drg5u3ma5().b[40][1]++, !instance.plants)) {
        /* istanbul ignore next */
        cov_drg5u3ma5().b[39][0]++;
        cov_drg5u3ma5().s[260]++;
        return null;
      } else
      /* istanbul ignore next */
      {
        cov_drg5u3ma5().b[39][1]++;
      }
      cov_drg5u3ma5().s[261]++;
      return _plantinstancetypes.plantInstanceHelpers.enhancePlantInstance(instance.plant_instances, instance.plants);
    } catch (error) {
      /* istanbul ignore next */
      cov_drg5u3ma5().s[262]++;
      console.error('Failed to get enhanced plant instance by ID:', error);
      /* istanbul ignore next */
      cov_drg5u3ma5().s[263]++;
      throw new Error('Failed to get enhanced plant instance');
    }
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,