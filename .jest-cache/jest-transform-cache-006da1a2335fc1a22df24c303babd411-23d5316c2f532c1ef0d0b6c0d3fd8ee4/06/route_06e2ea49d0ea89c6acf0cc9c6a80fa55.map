{"version":3,"names":["GET","cov_rl6k8yh80","f","s","POST","request","authResult","_middleware","requireAuth","b","_server","NextResponse","json","error","status","user","systemStatus","_emailverificationcleanup","emailVerificationCleanupService","getSystemStatus","emailStats","_emailservicemonitor","emailServiceMonitor","getStats","emailHealth","getHealthStatus","recentEvents","getRecentEvents","errorSummary","getErrorSummary","cleanupStats","getCleanupStats","monitoringData","timestamp","Date","now","emailService","stats","health","quotaWarning","isQuotaNearLimit","quotaCritical","cleanup","alerts","generateAlerts","console","details","Error","message","body","action","cleanupResult","forceCleanup","success","result","forceReset","errorDetails","push","level","recommendation","recommendations","quotaUsage","successRate","toFixed","timeSinceLastCleanup","lastCleanup","hoursWithoutCleanup","Math","round","rateLimits","securityEvents"],"sources":["/Users/stefanbekker/projects/fancy-planties/src/app/api/admin/email-verification-monitor/route.ts"],"sourcesContent":["import 'server-only';\nimport { NextRequest, NextResponse } from 'next/server';\nimport { emailVerificationCleanupService } from '@/lib/services/email-verification-cleanup';\nimport { emailServiceMonitor } from '@/lib/services/email-service-monitor';\nimport { requireAuth } from '@/lib/auth/middleware';\n\n/**\n * GET /api/admin/email-verification-monitor\n * \n * Get comprehensive monitoring data for the email verification system.\n * This endpoint provides detailed statistics about:\n * - Email service performance and quota usage\n * - Verification code statistics\n * - Rate limiting status\n * - System health indicators\n * \n * This endpoint should be protected and only accessible to administrators.\n */\nexport async function GET(request: NextRequest) {\n  try {\n    // Require authentication (in a real app, you'd also check for admin role)\n    const authResult = await requireAuth();\n    if (!authResult) {\n      return NextResponse.json(\n        { error: 'Authentication required' },\n        { status: 401 }\n      );\n    }\n    const { user } = authResult;\n    \n    // Get comprehensive system status\n    const systemStatus = await emailVerificationCleanupService.getSystemStatus();\n    \n    // Get detailed email service statistics\n    const emailStats = emailServiceMonitor.getStats();\n    const emailHealth = emailServiceMonitor.getHealthStatus();\n    const recentEvents = emailServiceMonitor.getRecentEvents(50);\n    const errorSummary = emailServiceMonitor.getErrorSummary();\n    \n    // Get cleanup statistics\n    const cleanupStats = emailVerificationCleanupService.getCleanupStats();\n    \n    const monitoringData = {\n      timestamp: Date.now(),\n      systemStatus,\n      emailService: {\n        stats: emailStats,\n        health: emailHealth,\n        recentEvents,\n        errorSummary,\n        quotaWarning: emailServiceMonitor.isQuotaNearLimit(0.8),\n        quotaCritical: emailServiceMonitor.isQuotaNearLimit(0.95),\n      },\n      cleanup: cleanupStats,\n      alerts: generateAlerts(systemStatus, emailHealth),\n    };\n    \n    return NextResponse.json(monitoringData);\n    \n  } catch (error) {\n    console.error('Error fetching email verification monitoring data:', error);\n    \n    return NextResponse.json(\n      { \n        error: 'Failed to fetch monitoring data',\n        details: error instanceof Error ? error.message : 'Unknown error'\n      },\n      { status: 500 }\n    );\n  }\n}\n\n/**\n * POST /api/admin/email-verification-monitor\n * \n * Perform administrative actions on the email verification system:\n * - Force cleanup\n * - Reset email service statistics\n * - Get detailed error reports\n */\nexport async function POST(request: NextRequest) {\n  try {\n    // Require authentication (in a real app, you'd also check for admin role)\n    const authResult = await requireAuth();\n    if (!authResult) {\n      return NextResponse.json(\n        { error: 'Authentication required' },\n        { status: 401 }\n      );\n    }\n    const { user } = authResult;\n    \n    const body = await request.json();\n    const { action } = body;\n    \n    switch (action) {\n      case 'force-cleanup':\n        const cleanupResult = await emailVerificationCleanupService.forceCleanup();\n        return NextResponse.json({\n          success: true,\n          message: 'Cleanup completed successfully',\n          result: cleanupResult,\n        });\n        \n      case 'reset-email-stats':\n        emailServiceMonitor.forceReset();\n        return NextResponse.json({\n          success: true,\n          message: 'Email service statistics reset successfully',\n        });\n        \n      case 'get-error-details':\n        const errorDetails = emailServiceMonitor.getErrorSummary();\n        const recentEvents = emailServiceMonitor.getRecentEvents(200);\n        return NextResponse.json({\n          success: true,\n          errorDetails,\n          recentEvents,\n        });\n        \n      default:\n        return NextResponse.json(\n          { error: 'Invalid action specified' },\n          { status: 400 }\n        );\n    }\n    \n  } catch (error) {\n    console.error('Error performing admin action:', error);\n    \n    return NextResponse.json(\n      { \n        error: 'Failed to perform admin action',\n        details: error instanceof Error ? error.message : 'Unknown error'\n      },\n      { status: 500 }\n    );\n  }\n}\n\n/**\n * Generate alerts based on system status\n */\nfunction generateAlerts(\n  systemStatus: any,\n  emailHealth: { status: string; issues: string[]; recommendations: string[] }\n): Array<{\n  level: 'info' | 'warning' | 'critical';\n  message: string;\n  recommendation?: string;\n  timestamp: number;\n}> {\n  const alerts = [];\n  const now = Date.now();\n  \n  // Email service alerts\n  if (emailHealth.status === 'critical') {\n    alerts.push({\n      level: 'critical' as const,\n      message: 'Email service is in critical state',\n      recommendation: emailHealth.recommendations[0],\n      timestamp: now,\n    });\n  } else if (emailHealth.status === 'warning') {\n    alerts.push({\n      level: 'warning' as const,\n      message: 'Email service requires attention',\n      recommendation: emailHealth.recommendations[0],\n      timestamp: now,\n    });\n  }\n  \n  // Quota alerts\n  if (systemStatus.emailService.quotaUsage >= 95) {\n    alerts.push({\n      level: 'critical' as const,\n      message: `Email quota critically high: ${systemStatus.emailService.quotaUsage}%`,\n      recommendation: 'Immediate action required - consider upgrading plan or implementing throttling',\n      timestamp: now,\n    });\n  } else if (systemStatus.emailService.quotaUsage >= 80) {\n    alerts.push({\n      level: 'warning' as const,\n      message: `Email quota usage high: ${systemStatus.emailService.quotaUsage}%`,\n      recommendation: 'Monitor usage closely and consider upgrading plan',\n      timestamp: now,\n    });\n  }\n  \n  // Success rate alerts\n  if (systemStatus.emailService.successRate < 80) {\n    alerts.push({\n      level: 'critical' as const,\n      message: `Email success rate critically low: ${systemStatus.emailService.successRate.toFixed(1)}%`,\n      recommendation: 'Check email service configuration and network connectivity',\n      timestamp: now,\n    });\n  } else if (systemStatus.emailService.successRate < 95) {\n    alerts.push({\n      level: 'warning' as const,\n      message: `Email success rate below optimal: ${systemStatus.emailService.successRate.toFixed(1)}%`,\n      recommendation: 'Monitor email delivery and check for configuration issues',\n      timestamp: now,\n    });\n  }\n  \n  // Cleanup alerts\n  const timeSinceLastCleanup = now - systemStatus.cleanup.lastCleanup;\n  const hoursWithoutCleanup = timeSinceLastCleanup / (60 * 60 * 1000);\n  \n  if (hoursWithoutCleanup > 25) { // More than 25 hours\n    alerts.push({\n      level: 'warning' as const,\n      message: `Cleanup hasn't run for ${Math.round(hoursWithoutCleanup)} hours`,\n      recommendation: 'Check cleanup service status and logs',\n      timestamp: now,\n    });\n  }\n  \n  // Rate limiting alerts\n  if (systemStatus.rateLimits.securityEvents > 10) {\n    alerts.push({\n      level: 'warning' as const,\n      message: `High number of security events: ${systemStatus.rateLimits.securityEvents}`,\n      recommendation: 'Review security logs for potential abuse',\n      timestamp: now,\n    });\n  }\n  \n  return alerts;\n}"],"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","ignoreList":[]}