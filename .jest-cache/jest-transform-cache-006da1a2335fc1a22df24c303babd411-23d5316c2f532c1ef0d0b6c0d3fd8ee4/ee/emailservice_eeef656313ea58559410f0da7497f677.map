{"version":3,"sources":["/Users/stefanbekker/projects/fancy-planties/src/lib/services/email-service.ts"],"sourcesContent":["import 'server-only';\n\nexport interface EmailService {\n  sendVerificationEmail(email: string, code: string, name: string): Promise<boolean>;\n  sendPasswordResetEmail(email: string, resetToken: string, name: string): Promise<boolean>;\n}\n\nexport interface EmailConfig {\n  apiKey: string;\n  fromEmail: string;\n  fromName: string;\n}\n\nexport class EmailServiceError extends Error {\n  constructor(\n    message: string,\n    public code: 'QUOTA_EXCEEDED' | 'API_ERROR' | 'NETWORK_ERROR' | 'INVALID_EMAIL'\n  ) {\n    super(message);\n    this.name = 'EmailServiceError';\n  }\n}\n\n/**\n * Send verification email with retry logic and exponential backoff\n */\nexport async function sendEmailWithRetry(\n  emailService: EmailService,\n  email: string,\n  code: string,\n  name: string,\n  maxRetries = 3\n): Promise<boolean> {\n  let lastError: Error | null = null;\n  \n  for (let attempt = 1; attempt <= maxRetries; attempt++) {\n    try {\n      const success = await emailService.sendVerificationEmail(email, code, name);\n      if (success) {\n        return true;\n      }\n      throw new Error('Email service returned false');\n    } catch (error) {\n      lastError = error as Error;\n      \n      // Don't retry on certain errors\n      if (error instanceof EmailServiceError && \n          (error.code === 'INVALID_EMAIL' || error.code === 'QUOTA_EXCEEDED')) {\n        throw error;\n      }\n      \n      // Exponential backoff: 1s, 2s, 4s\n      if (attempt < maxRetries) {\n        const delay = Math.pow(2, attempt - 1) * 1000;\n        await new Promise(resolve => setTimeout(resolve, delay));\n      }\n    }\n  }\n  \n  throw lastError || new Error('All retry attempts failed');\n}\n\n/**\n * Send password reset email with retry logic and exponential backoff\n */\nexport async function sendPasswordResetEmailWithRetry(\n  emailService: EmailService,\n  email: string,\n  resetToken: string,\n  name: string,\n  maxRetries = 3\n): Promise<boolean> {\n  let lastError: Error | null = null;\n  \n  for (let attempt = 1; attempt <= maxRetries; attempt++) {\n    try {\n      const success = await emailService.sendPasswordResetEmail(email, resetToken, name);\n      if (success) {\n        return true;\n      }\n      throw new Error('Email service returned false');\n    } catch (error) {\n      lastError = error as Error;\n      \n      // Don't retry on certain errors\n      if (error instanceof EmailServiceError && \n          (error.code === 'INVALID_EMAIL' || error.code === 'QUOTA_EXCEEDED')) {\n        throw error;\n      }\n      \n      // Exponential backoff: 1s, 2s, 4s\n      if (attempt < maxRetries) {\n        const delay = Math.pow(2, attempt - 1) * 1000;\n        await new Promise(resolve => setTimeout(resolve, delay));\n      }\n    }\n  }\n  \n  throw lastError || new Error('All retry attempts failed');\n}"],"names":["EmailServiceError","sendEmailWithRetry","sendPasswordResetEmailWithRetry","Error","message","code","name","emailService","email","maxRetries","lastError","attempt","success","sendVerificationEmail","error","delay","Math","pow","Promise","resolve","setTimeout","resetToken","sendPasswordResetEmail"],"mappings":";;;;;;;;;;;QAaaA;eAAAA;;QAaSC;eAAAA;;QAuCAC;eAAAA;;;QAjEf;AAaA,MAAMF,0BAA0BG;IACrC,YACEC,OAAe,EACf,AAAOC,IAAwE,CAC/E;QACA,KAAK,CAACD,eAFCC,OAAAA;QAGP,IAAI,CAACC,IAAI,GAAG;IACd;AACF;AAKO,eAAeL,mBACpBM,YAA0B,EAC1BC,KAAa,EACbH,IAAY,EACZC,IAAY,EACZG,aAAa,CAAC;IAEd,IAAIC,YAA0B;IAE9B,IAAK,IAAIC,UAAU,GAAGA,WAAWF,YAAYE,UAAW;QACtD,IAAI;YACF,MAAMC,UAAU,MAAML,aAAaM,qBAAqB,CAACL,OAAOH,MAAMC;YACtE,IAAIM,SAAS;gBACX,OAAO;YACT;YACA,MAAM,IAAIT,MAAM;QAClB,EAAE,OAAOW,OAAO;YACdJ,YAAYI;YAEZ,gCAAgC;YAChC,IAAIA,iBAAiBd,qBAChBc,CAAAA,MAAMT,IAAI,KAAK,mBAAmBS,MAAMT,IAAI,KAAK,gBAAe,GAAI;gBACvE,MAAMS;YACR;YAEA,kCAAkC;YAClC,IAAIH,UAAUF,YAAY;gBACxB,MAAMM,QAAQC,KAAKC,GAAG,CAAC,GAAGN,UAAU,KAAK;gBACzC,MAAM,IAAIO,QAAQC,CAAAA,UAAWC,WAAWD,SAASJ;YACnD;QACF;IACF;IAEA,MAAML,aAAa,IAAIP,MAAM;AAC/B;AAKO,eAAeD,gCACpBK,YAA0B,EAC1BC,KAAa,EACba,UAAkB,EAClBf,IAAY,EACZG,aAAa,CAAC;IAEd,IAAIC,YAA0B;IAE9B,IAAK,IAAIC,UAAU,GAAGA,WAAWF,YAAYE,UAAW;QACtD,IAAI;YACF,MAAMC,UAAU,MAAML,aAAae,sBAAsB,CAACd,OAAOa,YAAYf;YAC7E,IAAIM,SAAS;gBACX,OAAO;YACT;YACA,MAAM,IAAIT,MAAM;QAClB,EAAE,OAAOW,OAAO;YACdJ,YAAYI;YAEZ,gCAAgC;YAChC,IAAIA,iBAAiBd,qBAChBc,CAAAA,MAAMT,IAAI,KAAK,mBAAmBS,MAAMT,IAAI,KAAK,gBAAe,GAAI;gBACvE,MAAMS;YACR;YAEA,kCAAkC;YAClC,IAAIH,UAAUF,YAAY;gBACxB,MAAMM,QAAQC,KAAKC,GAAG,CAAC,GAAGN,UAAU,KAAK;gBACzC,MAAM,IAAIO,QAAQC,CAAAA,UAAWC,WAAWD,SAASJ;YACnD;QACF;IACF;IAEA,MAAML,aAAa,IAAIP,MAAM;AAC/B"}