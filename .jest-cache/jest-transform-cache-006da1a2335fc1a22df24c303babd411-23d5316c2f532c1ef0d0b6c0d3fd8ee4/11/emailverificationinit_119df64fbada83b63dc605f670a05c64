24aa86496e3a5ab59390c17f07ec56cc
"use strict";

/* istanbul ignore next */
function cov_2rdobkrb0u() {
  var path = "/Users/stefanbekker/projects/fancy-planties/src/lib/init/email-verification-init.ts";
  var hash = "d0e2fc72898548ba6bb5206c78b19a5fc55175fd";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/stefanbekker/projects/fancy-planties/src/lib/init/email-verification-init.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 18,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 43
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 46
        }
      },
      "6": {
        start: {
          line: 19,
          column: 0
        },
        end: {
          line: 19,
          column: 23
        }
      },
      "7": {
        start: {
          line: 20,
          column: 34
        },
        end: {
          line: 20,
          column: 83
        }
      },
      "8": {
        start: {
          line: 21,
          column: 20
        },
        end: {
          line: 21,
          column: 25
        }
      },
      "9": {
        start: {
          line: 23,
          column: 4
        },
        end: {
          line: 25,
          column: 5
        }
      },
      "10": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 24,
          column: 15
        }
      },
      "11": {
        start: {
          line: 26,
          column: 4
        },
        end: {
          line: 26,
          column: 68
        }
      },
      "12": {
        start: {
          line: 27,
          column: 4
        },
        end: {
          line: 42,
          column: 5
        }
      },
      "13": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 29,
          column: 92
        }
      },
      "14": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 36,
          column: 9
        }
      },
      "15": {
        start: {
          line: 32,
          column: 12
        },
        end: {
          line: 32,
          column: 88
        }
      },
      "16": {
        start: {
          line: 35,
          column: 12
        },
        end: {
          line: 35,
          column: 106
        }
      },
      "17": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 37,
          column: 29
        }
      },
      "18": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 38,
          column: 81
        }
      },
      "19": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 40,
          column: 87
        }
      },
      "20": {
        start: {
          line: 45,
          column: 4
        },
        end: {
          line: 45,
          column: 25
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        },
        loc: {
          start: {
            line: 12,
            column: 39
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 42
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "initializeEmailVerification",
        decl: {
          start: {
            line: 22,
            column: 15
          },
          end: {
            line: 22,
            column: 42
          }
        },
        loc: {
          start: {
            line: 22,
            column: 45
          },
          end: {
            line: 43,
            column: 1
          }
        },
        line: 22
      },
      "4": {
        name: "isEmailVerificationInitialized",
        decl: {
          start: {
            line: 44,
            column: 9
          },
          end: {
            line: 44,
            column: 39
          }
        },
        loc: {
          start: {
            line: 44,
            column: 42
          },
          end: {
            line: 46,
            column: 1
          }
        },
        line: 44
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 23,
            column: 4
          },
          end: {
            line: 25,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 23,
            column: 4
          },
          end: {
            line: 25,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 23
      },
      "1": {
        loc: {
          start: {
            line: 31,
            column: 8
          },
          end: {
            line: 36,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 31,
            column: 8
          },
          end: {
            line: 36,
            column: 9
          }
        }, {
          start: {
            line: 33,
            column: 15
          },
          end: {
            line: 36,
            column: 9
          }
        }],
        line: 31
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/stefanbekker/projects/fancy-planties/src/lib/init/email-verification-init.ts"],
      sourcesContent: ["import 'server-only';\nimport { emailVerificationCleanupService } from '@/lib/services/email-verification-cleanup';\n\nlet isInitialized = false;\n\n/**\n * Initialize email verification system\n * This should be called once when the application starts\n */\nexport async function initializeEmailVerification(): Promise<void> {\n  if (isInitialized) {\n    return;\n  }\n  \n  console.log('[INIT] Initializing email verification system...');\n  \n  try {\n    // Run startup cleanup\n    await emailVerificationCleanupService.runStartupCleanup();\n    \n    // Schedule regular cleanup (if not already scheduled)\n    if (process.env.NODE_ENV === 'production') {\n      emailVerificationCleanupService.scheduleCleanup();\n    } else {\n      // In development, run less frequently\n      emailVerificationCleanupService.scheduleCleanup(2 * 60 * 60 * 1000); // 2 hours\n    }\n    \n    isInitialized = true;\n    console.log('[INIT] Email verification system initialized successfully');\n    \n  } catch (error) {\n    console.error('[INIT] Failed to initialize email verification system:', error);\n    // Don't throw - let the app continue running even if cleanup fails\n  }\n}\n\n/**\n * Check if email verification system is initialized\n */\nexport function isEmailVerificationInitialized(): boolean {\n  return isInitialized;\n}"],
      names: ["initializeEmailVerification", "isEmailVerificationInitialized", "isInitialized", "console", "log", "emailVerificationCleanupService", "runStartupCleanup", "process", "env", "NODE_ENV", "scheduleCleanup", "error"],
      mappings: ";;;;;;;;;;;QASsBA;eAAAA;;QA+BNC;eAAAA;;;QAxCT;0CACyC;AAEhD,IAAIC,gBAAgB;AAMb,eAAeF;IACpB,IAAIE,eAAe;QACjB;IACF;IAEAC,QAAQC,GAAG,CAAC;IAEZ,IAAI;QACF,sBAAsB;QACtB,MAAMC,yDAA+B,CAACC,iBAAiB;QAEvD,sDAAsD;QACtD,IAAIC,QAAQC,GAAG,CAACC,QAAQ,KAAK,cAAc;YACzCJ,yDAA+B,CAACK,eAAe;QACjD,OAAO;YACL,sCAAsC;YACtCL,yDAA+B,CAACK,eAAe,CAAC,IAAI,KAAK,KAAK,OAAO,UAAU;QACjF;QAEAR,gBAAgB;QAChBC,QAAQC,GAAG,CAAC;IAEd,EAAE,OAAOO,OAAO;QACdR,QAAQQ,KAAK,CAAC,0DAA0DA;IACxE,mEAAmE;IACrE;AACF;AAKO,SAASV;IACd,OAAOC;AACT"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "d0e2fc72898548ba6bb5206c78b19a5fc55175fd"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2rdobkrb0u = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2rdobkrb0u();
cov_2rdobkrb0u().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_2rdobkrb0u().f[0]++;
  cov_2rdobkrb0u().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_2rdobkrb0u().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_2rdobkrb0u().s[3]++;
_export(exports, {
  get initializeEmailVerification() {
    /* istanbul ignore next */
    cov_2rdobkrb0u().f[1]++;
    cov_2rdobkrb0u().s[4]++;
    return initializeEmailVerification;
  },
  get isEmailVerificationInitialized() {
    /* istanbul ignore next */
    cov_2rdobkrb0u().f[2]++;
    cov_2rdobkrb0u().s[5]++;
    return isEmailVerificationInitialized;
  }
});
/* istanbul ignore next */
cov_2rdobkrb0u().s[6]++;
require("server-only");
const _emailverificationcleanup =
/* istanbul ignore next */
(cov_2rdobkrb0u().s[7]++, require("../services/email-verification-cleanup"));
let isInitialized =
/* istanbul ignore next */
(cov_2rdobkrb0u().s[8]++, false);
async function initializeEmailVerification() {
  /* istanbul ignore next */
  cov_2rdobkrb0u().f[3]++;
  cov_2rdobkrb0u().s[9]++;
  if (isInitialized) {
    /* istanbul ignore next */
    cov_2rdobkrb0u().b[0][0]++;
    cov_2rdobkrb0u().s[10]++;
    return;
  } else
  /* istanbul ignore next */
  {
    cov_2rdobkrb0u().b[0][1]++;
  }
  cov_2rdobkrb0u().s[11]++;
  console.log('[INIT] Initializing email verification system...');
  /* istanbul ignore next */
  cov_2rdobkrb0u().s[12]++;
  try {
    /* istanbul ignore next */
    cov_2rdobkrb0u().s[13]++;
    // Run startup cleanup
    await _emailverificationcleanup.emailVerificationCleanupService.runStartupCleanup();
    // Schedule regular cleanup (if not already scheduled)
    /* istanbul ignore next */
    cov_2rdobkrb0u().s[14]++;
    if (process.env.NODE_ENV === 'production') {
      /* istanbul ignore next */
      cov_2rdobkrb0u().b[1][0]++;
      cov_2rdobkrb0u().s[15]++;
      _emailverificationcleanup.emailVerificationCleanupService.scheduleCleanup();
    } else {
      /* istanbul ignore next */
      cov_2rdobkrb0u().b[1][1]++;
      cov_2rdobkrb0u().s[16]++;
      // In development, run less frequently
      _emailverificationcleanup.emailVerificationCleanupService.scheduleCleanup(2 * 60 * 60 * 1000); // 2 hours
    }
    /* istanbul ignore next */
    cov_2rdobkrb0u().s[17]++;
    isInitialized = true;
    /* istanbul ignore next */
    cov_2rdobkrb0u().s[18]++;
    console.log('[INIT] Email verification system initialized successfully');
  } catch (error) {
    /* istanbul ignore next */
    cov_2rdobkrb0u().s[19]++;
    console.error('[INIT] Failed to initialize email verification system:', error);
    // Don't throw - let the app continue running even if cleanup fails
  }
}
function isEmailVerificationInitialized() {
  /* istanbul ignore next */
  cov_2rdobkrb0u().f[4]++;
  cov_2rdobkrb0u().s[20]++;
  return isInitialized;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJpbml0aWFsaXplRW1haWxWZXJpZmljYXRpb24iLCJjb3ZfMnJkb2JrcmIwdSIsImYiLCJzIiwiaXNFbWFpbFZlcmlmaWNhdGlvbkluaXRpYWxpemVkIiwiaXNJbml0aWFsaXplZCIsImIiLCJjb25zb2xlIiwibG9nIiwiX2VtYWlsdmVyaWZpY2F0aW9uY2xlYW51cCIsImVtYWlsVmVyaWZpY2F0aW9uQ2xlYW51cFNlcnZpY2UiLCJydW5TdGFydHVwQ2xlYW51cCIsInByb2Nlc3MiLCJlbnYiLCJOT0RFX0VOViIsInNjaGVkdWxlQ2xlYW51cCIsImVycm9yIl0sInNvdXJjZXMiOlsiL1VzZXJzL3N0ZWZhbmJla2tlci9wcm9qZWN0cy9mYW5jeS1wbGFudGllcy9zcmMvbGliL2luaXQvZW1haWwtdmVyaWZpY2F0aW9uLWluaXQudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICdzZXJ2ZXItb25seSc7XG5pbXBvcnQgeyBlbWFpbFZlcmlmaWNhdGlvbkNsZWFudXBTZXJ2aWNlIH0gZnJvbSAnQC9saWIvc2VydmljZXMvZW1haWwtdmVyaWZpY2F0aW9uLWNsZWFudXAnO1xuXG5sZXQgaXNJbml0aWFsaXplZCA9IGZhbHNlO1xuXG4vKipcbiAqIEluaXRpYWxpemUgZW1haWwgdmVyaWZpY2F0aW9uIHN5c3RlbVxuICogVGhpcyBzaG91bGQgYmUgY2FsbGVkIG9uY2Ugd2hlbiB0aGUgYXBwbGljYXRpb24gc3RhcnRzXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBpbml0aWFsaXplRW1haWxWZXJpZmljYXRpb24oKTogUHJvbWlzZTx2b2lkPiB7XG4gIGlmIChpc0luaXRpYWxpemVkKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIFxuICBjb25zb2xlLmxvZygnW0lOSVRdIEluaXRpYWxpemluZyBlbWFpbCB2ZXJpZmljYXRpb24gc3lzdGVtLi4uJyk7XG4gIFxuICB0cnkge1xuICAgIC8vIFJ1biBzdGFydHVwIGNsZWFudXBcbiAgICBhd2FpdCBlbWFpbFZlcmlmaWNhdGlvbkNsZWFudXBTZXJ2aWNlLnJ1blN0YXJ0dXBDbGVhbnVwKCk7XG4gICAgXG4gICAgLy8gU2NoZWR1bGUgcmVndWxhciBjbGVhbnVwIChpZiBub3QgYWxyZWFkeSBzY2hlZHVsZWQpXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGVtYWlsVmVyaWZpY2F0aW9uQ2xlYW51cFNlcnZpY2Uuc2NoZWR1bGVDbGVhbnVwKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEluIGRldmVsb3BtZW50LCBydW4gbGVzcyBmcmVxdWVudGx5XG4gICAgICBlbWFpbFZlcmlmaWNhdGlvbkNsZWFudXBTZXJ2aWNlLnNjaGVkdWxlQ2xlYW51cCgyICogNjAgKiA2MCAqIDEwMDApOyAvLyAyIGhvdXJzXG4gICAgfVxuICAgIFxuICAgIGlzSW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgIGNvbnNvbGUubG9nKCdbSU5JVF0gRW1haWwgdmVyaWZpY2F0aW9uIHN5c3RlbSBpbml0aWFsaXplZCBzdWNjZXNzZnVsbHknKTtcbiAgICBcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdbSU5JVF0gRmFpbGVkIHRvIGluaXRpYWxpemUgZW1haWwgdmVyaWZpY2F0aW9uIHN5c3RlbTonLCBlcnJvcik7XG4gICAgLy8gRG9uJ3QgdGhyb3cgLSBsZXQgdGhlIGFwcCBjb250aW51ZSBydW5uaW5nIGV2ZW4gaWYgY2xlYW51cCBmYWlsc1xuICB9XG59XG5cbi8qKlxuICogQ2hlY2sgaWYgZW1haWwgdmVyaWZpY2F0aW9uIHN5c3RlbSBpcyBpbml0aWFsaXplZFxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNFbWFpbFZlcmlmaWNhdGlvbkluaXRpYWxpemVkKCk6IGJvb2xlYW4ge1xuICByZXR1cm4gaXNJbml0aWFsaXplZDtcbn0iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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