9fb1d18c348dbb176b0c00ff8605d46a
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "POST", {
    enumerable: true,
    get: function() {
        return POST;
    }
});
const _server = require("next/server");
const _server1 = require("../../../../lib/auth/server");
const _careservice = require("../../../../lib/services/care-service");
const _careschemas = require("../../../../lib/validation/care-schemas");
async function POST(request) {
    try {
        const { user } = await (0, _server1.requireAuthSession)();
        const body = await request.json();
        // Validate the care form data
        const validation = _careschemas.careValidation.validateCareForm({
            ...body,
            careDate: new Date(body.careDate)
        });
        if (!validation.success) {
            return _server.NextResponse.json({
                error: validation.error.issues[0]?.message || 'Invalid care data'
            }, {
                status: 400
            });
        }
        const result = await _careservice.CareService.logCareEvent(user.id, validation.data);
        if (!result.success) {
            return _server.NextResponse.json({
                error: result.error
            }, {
                status: 400
            });
        }
        return _server.NextResponse.json(result.careHistory);
    } catch (error) {
        console.error('Error logging care:', error);
        return _server.NextResponse.json({
            error: 'Failed to log care event'
        }, {
            status: 500
        });
    }
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9zdGVmYW5iZWtrZXIvcHJvamVjdHMvZmFuY3ktcGxhbnRpZXMvc3JjL2FwcC9hcGkvY2FyZS9sb2cvcm91dGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmV4dFJlcXVlc3QsIE5leHRSZXNwb25zZSB9IGZyb20gJ25leHQvc2VydmVyJztcbmltcG9ydCB7IHJlcXVpcmVBdXRoU2Vzc2lvbiB9IGZyb20gJ0AvbGliL2F1dGgvc2VydmVyJztcbmltcG9ydCB7IENhcmVTZXJ2aWNlIH0gZnJvbSAnQC9saWIvc2VydmljZXMvY2FyZS1zZXJ2aWNlJztcbmltcG9ydCB7IGNhcmVWYWxpZGF0aW9uIH0gZnJvbSAnQC9saWIvdmFsaWRhdGlvbi9jYXJlLXNjaGVtYXMnO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gUE9TVChyZXF1ZXN0OiBOZXh0UmVxdWVzdCkge1xuICB0cnkge1xuICAgIGNvbnN0IHsgdXNlciB9ID0gYXdhaXQgcmVxdWlyZUF1dGhTZXNzaW9uKCk7XG4gICAgY29uc3QgYm9keSA9IGF3YWl0IHJlcXVlc3QuanNvbigpO1xuICAgIFxuICAgIC8vIFZhbGlkYXRlIHRoZSBjYXJlIGZvcm0gZGF0YVxuICAgIGNvbnN0IHZhbGlkYXRpb24gPSBjYXJlVmFsaWRhdGlvbi52YWxpZGF0ZUNhcmVGb3JtKHtcbiAgICAgIC4uLmJvZHksXG4gICAgICBjYXJlRGF0ZTogbmV3IERhdGUoYm9keS5jYXJlRGF0ZSksXG4gICAgfSk7XG4gICAgXG4gICAgaWYgKCF2YWxpZGF0aW9uLnN1Y2Nlc3MpIHtcbiAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcbiAgICAgICAgeyBlcnJvcjogdmFsaWRhdGlvbi5lcnJvci5pc3N1ZXNbMF0/Lm1lc3NhZ2UgfHwgJ0ludmFsaWQgY2FyZSBkYXRhJyB9LFxuICAgICAgICB7IHN0YXR1czogNDAwIH1cbiAgICAgICk7XG4gICAgfVxuICAgIFxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IENhcmVTZXJ2aWNlLmxvZ0NhcmVFdmVudCh1c2VyLmlkLCB2YWxpZGF0aW9uLmRhdGEpO1xuICAgIFxuICAgIGlmICghcmVzdWx0LnN1Y2Nlc3MpIHtcbiAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcbiAgICAgICAgeyBlcnJvcjogcmVzdWx0LmVycm9yIH0sXG4gICAgICAgIHsgc3RhdHVzOiA0MDAgfVxuICAgICAgKTtcbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHJlc3VsdC5jYXJlSGlzdG9yeSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgbG9nZ2luZyBjYXJlOicsIGVycm9yKTtcbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXG4gICAgICB7IGVycm9yOiAnRmFpbGVkIHRvIGxvZyBjYXJlIGV2ZW50JyB9LFxuICAgICAgeyBzdGF0dXM6IDUwMCB9XG4gICAgKTtcbiAgfVxufSJdLCJuYW1lcyI6WyJQT1NUIiwicmVxdWVzdCIsInVzZXIiLCJyZXF1aXJlQXV0aFNlc3Npb24iLCJib2R5IiwianNvbiIsInZhbGlkYXRpb24iLCJjYXJlVmFsaWRhdGlvbiIsInZhbGlkYXRlQ2FyZUZvcm0iLCJjYXJlRGF0ZSIsIkRhdGUiLCJzdWNjZXNzIiwiTmV4dFJlc3BvbnNlIiwiZXJyb3IiLCJpc3N1ZXMiLCJtZXNzYWdlIiwic3RhdHVzIiwicmVzdWx0IiwiQ2FyZVNlcnZpY2UiLCJsb2dDYXJlRXZlbnQiLCJpZCIsImRhdGEiLCJjYXJlSGlzdG9yeSIsImNvbnNvbGUiXSwibWFwcGluZ3MiOiI7Ozs7K0JBS3NCQTs7O2VBQUFBOzs7d0JBTG9CO3lCQUNQOzZCQUNQOzZCQUNHO0FBRXhCLGVBQWVBLEtBQUtDLE9BQW9CO0lBQzdDLElBQUk7UUFDRixNQUFNLEVBQUVDLElBQUksRUFBRSxHQUFHLE1BQU1DLElBQUFBLDJCQUFrQjtRQUN6QyxNQUFNQyxPQUFPLE1BQU1ILFFBQVFJLElBQUk7UUFFL0IsOEJBQThCO1FBQzlCLE1BQU1DLGFBQWFDLDJCQUFjLENBQUNDLGdCQUFnQixDQUFDO1lBQ2pELEdBQUdKLElBQUk7WUFDUEssVUFBVSxJQUFJQyxLQUFLTixLQUFLSyxRQUFRO1FBQ2xDO1FBRUEsSUFBSSxDQUFDSCxXQUFXSyxPQUFPLEVBQUU7WUFDdkIsT0FBT0Msb0JBQVksQ0FBQ1AsSUFBSSxDQUN0QjtnQkFBRVEsT0FBT1AsV0FBV08sS0FBSyxDQUFDQyxNQUFNLENBQUMsRUFBRSxFQUFFQyxXQUFXO1lBQW9CLEdBQ3BFO2dCQUFFQyxRQUFRO1lBQUk7UUFFbEI7UUFFQSxNQUFNQyxTQUFTLE1BQU1DLHdCQUFXLENBQUNDLFlBQVksQ0FBQ2pCLEtBQUtrQixFQUFFLEVBQUVkLFdBQVdlLElBQUk7UUFFdEUsSUFBSSxDQUFDSixPQUFPTixPQUFPLEVBQUU7WUFDbkIsT0FBT0Msb0JBQVksQ0FBQ1AsSUFBSSxDQUN0QjtnQkFBRVEsT0FBT0ksT0FBT0osS0FBSztZQUFDLEdBQ3RCO2dCQUFFRyxRQUFRO1lBQUk7UUFFbEI7UUFFQSxPQUFPSixvQkFBWSxDQUFDUCxJQUFJLENBQUNZLE9BQU9LLFdBQVc7SUFDN0MsRUFBRSxPQUFPVCxPQUFPO1FBQ2RVLFFBQVFWLEtBQUssQ0FBQyx1QkFBdUJBO1FBQ3JDLE9BQU9ELG9CQUFZLENBQUNQLElBQUksQ0FDdEI7WUFBRVEsT0FBTztRQUEyQixHQUNwQztZQUFFRyxRQUFRO1FBQUk7SUFFbEI7QUFDRiJ9