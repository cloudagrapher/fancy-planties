647d652d4cbc02649ca7e2f2069a8a99
"use strict";

/* istanbul ignore next */
function cov_9dazl3zw4() {
  var path = "/Users/stefanbekker/projects/fancy-planties/src/app/api/auth/resend-verification/route.ts";
  var hash = "82cd2ce145768e38f0d1288206d6b8d3a64a3478";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/stefanbekker/projects/fancy-planties/src/app/api/auth/resend-verification/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 20
        }
      },
      "3": {
        start: {
          line: 11,
          column: 16
        },
        end: {
          line: 11,
          column: 38
        }
      },
      "4": {
        start: {
          line: 12,
          column: 13
        },
        end: {
          line: 12,
          column: 27
        }
      },
      "5": {
        start: {
          line: 13,
          column: 38
        },
        end: {
          line: 13,
          column: 105
        }
      },
      "6": {
        start: {
          line: 14,
          column: 22
        },
        end: {
          line: 14,
          column: 71
        }
      },
      "7": {
        start: {
          line: 15,
          column: 28
        },
        end: {
          line: 15,
          column: 84
        }
      },
      "8": {
        start: {
          line: 16,
          column: 14
        },
        end: {
          line: 16,
          column: 45
        }
      },
      "9": {
        start: {
          line: 17,
          column: 37
        },
        end: {
          line: 17,
          column: 98
        }
      },
      "10": {
        start: {
          line: 19,
          column: 33
        },
        end: {
          line: 21,
          column: 2
        }
      },
      "11": {
        start: {
          line: 23,
          column: 4
        },
        end: {
          line: 156,
          column: 7
        }
      },
      "12": {
        start: {
          line: 25,
          column: 21
        },
        end: {
          line: 25,
          column: 56
        }
      },
      "13": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 155,
          column: 9
        }
      },
      "14": {
        start: {
          line: 28,
          column: 31
        },
        end: {
          line: 28,
          column: 71
        }
      },
      "15": {
        start: {
          line: 29,
          column: 12
        },
        end: {
          line: 39,
          column: 13
        }
      },
      "16": {
        start: {
          line: 30,
          column: 16
        },
        end: {
          line: 38,
          column: 19
        }
      },
      "17": {
        start: {
          line: 32,
          column: 67
        },
        end: {
          line: 35,
          column: 25
        }
      },
      "18": {
        start: {
          line: 40,
          column: 30
        },
        end: {
          line: 40,
          column: 45
        }
      },
      "19": {
        start: {
          line: 41,
          column: 36
        },
        end: {
          line: 41,
          column: 55
        }
      },
      "20": {
        start: {
          line: 42,
          column: 12
        },
        end: {
          line: 147,
          column: 13
        }
      },
      "21": {
        start: {
          line: 44,
          column: 29
        },
        end: {
          line: 44,
          column: 77
        }
      },
      "22": {
        start: {
          line: 45,
          column: 16
        },
        end: {
          line: 51,
          column: 17
        }
      },
      "23": {
        start: {
          line: 46,
          column: 20
        },
        end: {
          line: 50,
          column: 23
        }
      },
      "24": {
        start: {
          line: 53,
          column: 16
        },
        end: {
          line: 60,
          column: 17
        }
      },
      "25": {
        start: {
          line: 54,
          column: 20
        },
        end: {
          line: 59,
          column: 23
        }
      },
      "26": {
        start: {
          line: 62,
          column: 41
        },
        end: {
          line: 62,
          column: 127
        }
      },
      "27": {
        start: {
          line: 64,
          column: 16
        },
        end: {
          line: 112,
          column: 17
        }
      },
      "28": {
        start: {
          line: 65,
          column: 41
        },
        end: {
          line: 65,
          column: 86
        }
      },
      "29": {
        start: {
          line: 66,
          column: 20
        },
        end: {
          line: 66,
          column: 124
        }
      },
      "30": {
        start: {
          line: 67,
          column: 20
        },
        end: {
          line: 67,
          column: 102
        }
      },
      "31": {
        start: {
          line: 68,
          column: 20
        },
        end: {
          line: 72,
          column: 23
        }
      },
      "32": {
        start: {
          line: 74,
          column: 20
        },
        end: {
          line: 74,
          column: 86
        }
      },
      "33": {
        start: {
          line: 75,
          column: 20
        },
        end: {
          line: 106,
          column: 21
        }
      },
      "34": {
        start: {
          line: 76,
          column: 43
        },
        end: {
          line: 76,
          column: 80
        }
      },
      "35": {
        start: {
          line: 77,
          column: 24
        },
        end: {
          line: 100,
          column: 25
        }
      },
      "36": {
        start: {
          line: 79,
          column: 32
        },
        end: {
          line: 79,
          column: 104
        }
      },
      "37": {
        start: {
          line: 80,
          column: 32
        },
        end: {
          line: 84,
          column: 35
        }
      },
      "38": {
        start: {
          line: 86,
          column: 32
        },
        end: {
          line: 86,
          column: 73
        }
      },
      "39": {
        start: {
          line: 87,
          column: 32
        },
        end: {
          line: 91,
          column: 35
        }
      },
      "40": {
        start: {
          line: 93,
          column: 32
        },
        end: {
          line: 93,
          column: 89
        }
      },
      "41": {
        start: {
          line: 94,
          column: 32
        },
        end: {
          line: 94,
          column: 38
        }
      },
      "42": {
        start: {
          line: 96,
          column: 32
        },
        end: {
          line: 96,
          column: 109
        }
      },
      "43": {
        start: {
          line: 97,
          column: 32
        },
        end: {
          line: 97,
          column: 38
        }
      },
      "44": {
        start: {
          line: 99,
          column: 32
        },
        end: {
          line: 99,
          column: 68
        }
      },
      "45": {
        start: {
          line: 101,
          column: 24
        },
        end: {
          line: 105,
          column: 27
        }
      },
      "46": {
        start: {
          line: 107,
          column: 20
        },
        end: {
          line: 111,
          column: 23
        }
      },
      "47": {
        start: {
          line: 114,
          column: 16
        },
        end: {
          line: 139,
          column: 17
        }
      },
      "48": {
        start: {
          line: 116,
          column: 37
        },
        end: {
          line: 116,
          column: 40
        }
      },
      "49": {
        start: {
          line: 117,
          column: 20
        },
        end: {
          line: 131,
          column: 21
        }
      },
      "50": {
        start: {
          line: 119,
          column: 28
        },
        end: {
          line: 119,
          column: 83
        }
      },
      "51": {
        start: {
          line: 120,
          column: 28
        },
        end: {
          line: 120,
          column: 45
        }
      },
      "52": {
        start: {
          line: 121,
          column: 28
        },
        end: {
          line: 121,
          column: 34
        }
      },
      "53": {
        start: {
          line: 123,
          column: 28
        },
        end: {
          line: 123,
          column: 105
        }
      },
      "54": {
        start: {
          line: 124,
          column: 28
        },
        end: {
          line: 128,
          column: 31
        }
      },
      "55": {
        start: {
          line: 130,
          column: 28
        },
        end: {
          line: 130,
          column: 101
        }
      },
      "56": {
        start: {
          line: 132,
          column: 20
        },
        end: {
          line: 132,
          column: 118
        }
      },
      "57": {
        start: {
          line: 133,
          column: 20
        },
        end: {
          line: 138,
          column: 23
        }
      },
      "58": {
        start: {
          line: 141,
          column: 16
        },
        end: {
          line: 141,
          column: 85
        }
      },
      "59": {
        start: {
          line: 142,
          column: 16
        },
        end: {
          line: 146,
          column: 19
        }
      },
      "60": {
        start: {
          line: 149,
          column: 12
        },
        end: {
          line: 149,
          column: 72
        }
      },
      "61": {
        start: {
          line: 150,
          column: 12
        },
        end: {
          line: 154,
          column: 15
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "POST",
        decl: {
          start: {
            line: 22,
            column: 15
          },
          end: {
            line: 22,
            column: 19
          }
        },
        loc: {
          start: {
            line: 22,
            column: 29
          },
          end: {
            line: 157,
            column: 1
          }
        },
        line: 22
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 23,
            column: 74
          },
          end: {
            line: 23,
            column: 75
          }
        },
        loc: {
          start: {
            line: 23,
            column: 87
          },
          end: {
            line: 156,
            column: 5
          }
        },
        line: 23
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 32,
            column: 57
          },
          end: {
            line: 32,
            column: 58
          }
        },
        loc: {
          start: {
            line: 32,
            column: 67
          },
          end: {
            line: 35,
            column: 25
          }
        },
        line: 32
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 25,
            column: 21
          },
          end: {
            line: 25,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 25,
            column: 21
          },
          end: {
            line: 25,
            column: 36
          }
        }, {
          start: {
            line: 25,
            column: 40
          },
          end: {
            line: 25,
            column: 56
          }
        }],
        line: 25
      },
      "1": {
        loc: {
          start: {
            line: 29,
            column: 12
          },
          end: {
            line: 39,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 29,
            column: 12
          },
          end: {
            line: 39,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 29
      },
      "2": {
        loc: {
          start: {
            line: 45,
            column: 16
          },
          end: {
            line: 51,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 45,
            column: 16
          },
          end: {
            line: 51,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 45
      },
      "3": {
        loc: {
          start: {
            line: 53,
            column: 16
          },
          end: {
            line: 60,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 53,
            column: 16
          },
          end: {
            line: 60,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 53
      },
      "4": {
        loc: {
          start: {
            line: 75,
            column: 20
          },
          end: {
            line: 106,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 75,
            column: 20
          },
          end: {
            line: 106,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 75
      },
      "5": {
        loc: {
          start: {
            line: 77,
            column: 24
          },
          end: {
            line: 100,
            column: 25
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 78,
            column: 28
          },
          end: {
            line: 84,
            column: 35
          }
        }, {
          start: {
            line: 85,
            column: 28
          },
          end: {
            line: 91,
            column: 35
          }
        }, {
          start: {
            line: 92,
            column: 28
          },
          end: {
            line: 94,
            column: 38
          }
        }, {
          start: {
            line: 95,
            column: 28
          },
          end: {
            line: 97,
            column: 38
          }
        }, {
          start: {
            line: 98,
            column: 28
          },
          end: {
            line: 99,
            column: 68
          }
        }],
        line: 77
      },
      "6": {
        loc: {
          start: {
            line: 114,
            column: 16
          },
          end: {
            line: 139,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 114,
            column: 16
          },
          end: {
            line: 139,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 114
      },
      "7": {
        loc: {
          start: {
            line: 117,
            column: 20
          },
          end: {
            line: 131,
            column: 21
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 118,
            column: 24
          },
          end: {
            line: 121,
            column: 34
          }
        }, {
          start: {
            line: 122,
            column: 24
          },
          end: {
            line: 128,
            column: 31
          }
        }, {
          start: {
            line: 129,
            column: 24
          },
          end: {
            line: 130,
            column: 101
          }
        }],
        line: 117
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0, 0, 0, 0],
      "6": [0, 0],
      "7": [0, 0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/stefanbekker/projects/fancy-planties/src/app/api/auth/resend-verification/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport { z } from 'zod';\nimport { emailVerificationCodeService, VerificationCodeError, VerificationError } from '@/lib/services/email-verification-code-service';\nimport { sendEmailWithRetry, EmailServiceError } from '@/lib/services/email-service';\nimport { createEmailService } from '@/lib/services/resend-email-service';\nimport { getUserByEmail } from '@/lib/auth';\nimport { withResendRateLimit } from '@/lib/auth/email-verification-middleware';\n\n// Validation schema for resend verification request\nconst resendVerificationSchema = z.object({\n  email: z.string().email('Invalid email address'),\n});\n\n// Note: Rate limiting is handled by the withResendRateLimit middleware with enhanced email verification limits\n\nexport async function POST(request: NextRequest) {\n  return withResendRateLimit(request, async (req) => {\n    // Extract parsed body from middleware\n    const body = (req as any)._parsedBody || await req.json();\n    try {\n      // Validate input\n      const validation = resendVerificationSchema.safeParse(body);\n      if (!validation.success) {\n        return NextResponse.json(\n          { \n            error: 'Validation failed', \n            details: validation.error.issues.map(issue => ({\n              field: issue.path.join('.'),\n              message: issue.message\n            }))\n          },\n          { status: 400 }\n        );\n      }\n      \n      const { email } = validation.data;\n      const normalizedEmail = email.toLowerCase();\n      \n      try {\n        // Check if user exists\n        const user = await getUserByEmail(normalizedEmail);\n        \n        if (!user) {\n          return NextResponse.json(\n            { error: 'User not found. Please sign up first.' },\n            { status: 404 }\n          );\n        }\n        \n        // Check if user is already verified\n        if (user.isEmailVerified) {\n          return NextResponse.json(\n            { \n              error: 'Email is already verified. You can sign in to your account.',\n              redirectTo: '/auth/signin'\n            },\n            { status: 400 }\n          );\n        }\n        \n        // Generate new verification code (this will invalidate existing codes)\n        const verificationCode = await emailVerificationCodeService.generateCode(user.id);\n        \n        // Send verification email\n        try {\n          const emailService = createEmailService();\n          await sendEmailWithRetry(emailService, normalizedEmail, verificationCode, user.name);\n          \n          console.log(`Verification code resent to ${normalizedEmail} for user ${user.id}`);\n          \n          return NextResponse.json({\n            success: true,\n            message: 'Verification code sent successfully. Please check your email.',\n            cooldownSeconds: 60 // 60 seconds cooldown\n          });\n          \n        } catch (emailError) {\n          console.error('Failed to resend verification email:', emailError);\n          \n          if (emailError instanceof EmailServiceError) {\n            let errorMessage = 'Failed to send verification email. ';\n            \n            switch (emailError.code) {\n              case 'QUOTA_EXCEEDED':\n                errorMessage += 'Email service quota exceeded. Please try again later.';\n                return NextResponse.json(\n                  { error: errorMessage },\n                  { status: 503 }\n                );\n              case 'INVALID_EMAIL':\n                errorMessage += 'Invalid email address.';\n                return NextResponse.json(\n                  { error: errorMessage },\n                  { status: 400 }\n                );\n              case 'API_ERROR':\n                errorMessage += 'Email service error. Please try again.';\n                break;\n              case 'NETWORK_ERROR':\n                errorMessage += 'Network error. Please check your connection and try again.';\n                break;\n              default:\n                errorMessage += 'Please try again.';\n            }\n            \n            return NextResponse.json(\n              { error: errorMessage },\n              { status: 500 }\n            );\n          }\n          \n          return NextResponse.json(\n            { error: 'Failed to send verification email. Please try again.' },\n            { status: 500 }\n          );\n        }\n        \n      } catch (error) {\n        if (error instanceof VerificationCodeError) {\n          let errorMessage: string;\n          let statusCode = 400;\n          \n          switch (error.code) {\n            case VerificationError.USER_NOT_FOUND:\n              errorMessage = 'User not found. Please sign up first.';\n              statusCode = 404;\n              break;\n            case VerificationError.ALREADY_VERIFIED:\n              errorMessage = 'Email is already verified. You can sign in to your account.';\n              return NextResponse.json({\n                success: true,\n                message: errorMessage,\n                redirectTo: '/auth/signin'\n              });\n            default:\n              errorMessage = 'Failed to generate verification code. Please try again.';\n          }\n          \n          console.log(`Resend verification failed for ${normalizedEmail}: ${error.code} - ${errorMessage}`);\n          \n          return NextResponse.json(\n            { \n              error: errorMessage,\n              code: error.code\n            },\n            { status: statusCode }\n          );\n        }\n        \n        // Log unexpected errors\n        console.error('Unexpected error during resend verification:', error);\n        \n        return NextResponse.json(\n          { error: 'Internal server error' },\n          { status: 500 }\n        );\n      }\n      \n    } catch (error) {\n      console.error('Resend verification endpoint error:', error);\n      \n      return NextResponse.json(\n        { error: 'Internal server error' },\n        { status: 500 }\n      );\n    }\n  });\n}\n\n"],
      names: ["POST", "resendVerificationSchema", "z", "object", "email", "string", "request", "withResendRateLimit", "req", "body", "_parsedBody", "json", "validation", "safeParse", "success", "NextResponse", "error", "details", "issues", "map", "issue", "field", "path", "join", "message", "status", "data", "normalizedEmail", "toLowerCase", "user", "getUserByEmail", "isEmailVerified", "redirectTo", "verificationCode", "emailVerificationCodeService", "generateCode", "id", "emailService", "createEmailService", "sendEmailWithRetry", "name", "console", "log", "cooldownSeconds", "emailError", "EmailServiceError", "errorMessage", "code", "VerificationCodeError", "statusCode", "VerificationError", "USER_NOT_FOUND", "ALREADY_VERIFIED"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "82cd2ce145768e38f0d1288206d6b8d3a64a3478"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_9dazl3zw4 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_9dazl3zw4();
cov_9dazl3zw4().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_9dazl3zw4().s[1]++;
Object.defineProperty(exports, "POST", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_9dazl3zw4().f[0]++;
    cov_9dazl3zw4().s[2]++;
    return POST;
  }
});
const _server =
/* istanbul ignore next */
(cov_9dazl3zw4().s[3]++, require("next/server"));
const _zod =
/* istanbul ignore next */
(cov_9dazl3zw4().s[4]++, require("zod"));
const _emailverificationcodeservice =
/* istanbul ignore next */
(cov_9dazl3zw4().s[5]++, require("../../../../lib/services/email-verification-code-service"));
const _emailservice =
/* istanbul ignore next */
(cov_9dazl3zw4().s[6]++, require("../../../../lib/services/email-service"));
const _resendemailservice =
/* istanbul ignore next */
(cov_9dazl3zw4().s[7]++, require("../../../../lib/services/resend-email-service"));
const _auth =
/* istanbul ignore next */
(cov_9dazl3zw4().s[8]++, require("../../../../lib/auth"));
const _emailverificationmiddleware =
/* istanbul ignore next */
(cov_9dazl3zw4().s[9]++, require("../../../../lib/auth/email-verification-middleware"));
// Validation schema for resend verification request
const resendVerificationSchema =
/* istanbul ignore next */
(cov_9dazl3zw4().s[10]++, _zod.z.object({
  email: _zod.z.string().email('Invalid email address')
}));
async function POST(request) {
  /* istanbul ignore next */
  cov_9dazl3zw4().f[1]++;
  cov_9dazl3zw4().s[11]++;
  return (0, _emailverificationmiddleware.withResendRateLimit)(request, async req => {
    /* istanbul ignore next */
    cov_9dazl3zw4().f[2]++;
    // Extract parsed body from middleware
    const body =
    /* istanbul ignore next */
    (cov_9dazl3zw4().s[12]++,
    /* istanbul ignore next */
    (cov_9dazl3zw4().b[0][0]++, req._parsedBody) ||
    /* istanbul ignore next */
    (cov_9dazl3zw4().b[0][1]++, await req.json()));
    /* istanbul ignore next */
    cov_9dazl3zw4().s[13]++;
    try {
      // Validate input
      const validation =
      /* istanbul ignore next */
      (cov_9dazl3zw4().s[14]++, resendVerificationSchema.safeParse(body));
      /* istanbul ignore next */
      cov_9dazl3zw4().s[15]++;
      if (!validation.success) {
        /* istanbul ignore next */
        cov_9dazl3zw4().b[1][0]++;
        cov_9dazl3zw4().s[16]++;
        return _server.NextResponse.json({
          error: 'Validation failed',
          details: validation.error.issues.map(issue => {
            /* istanbul ignore next */
            cov_9dazl3zw4().f[3]++;
            cov_9dazl3zw4().s[17]++;
            return {
              field: issue.path.join('.'),
              message: issue.message
            };
          })
        }, {
          status: 400
        });
      } else
      /* istanbul ignore next */
      {
        cov_9dazl3zw4().b[1][1]++;
      }
      const {
        email
      } =
      /* istanbul ignore next */
      (cov_9dazl3zw4().s[18]++, validation.data);
      const normalizedEmail =
      /* istanbul ignore next */
      (cov_9dazl3zw4().s[19]++, email.toLowerCase());
      /* istanbul ignore next */
      cov_9dazl3zw4().s[20]++;
      try {
        // Check if user exists
        const user =
        /* istanbul ignore next */
        (cov_9dazl3zw4().s[21]++, await (0, _auth.getUserByEmail)(normalizedEmail));
        /* istanbul ignore next */
        cov_9dazl3zw4().s[22]++;
        if (!user) {
          /* istanbul ignore next */
          cov_9dazl3zw4().b[2][0]++;
          cov_9dazl3zw4().s[23]++;
          return _server.NextResponse.json({
            error: 'User not found. Please sign up first.'
          }, {
            status: 404
          });
        } else
        /* istanbul ignore next */
        {
          cov_9dazl3zw4().b[2][1]++;
        }
        // Check if user is already verified
        cov_9dazl3zw4().s[24]++;
        if (user.isEmailVerified) {
          /* istanbul ignore next */
          cov_9dazl3zw4().b[3][0]++;
          cov_9dazl3zw4().s[25]++;
          return _server.NextResponse.json({
            error: 'Email is already verified. You can sign in to your account.',
            redirectTo: '/auth/signin'
          }, {
            status: 400
          });
        } else
        /* istanbul ignore next */
        {
          cov_9dazl3zw4().b[3][1]++;
        }
        // Generate new verification code (this will invalidate existing codes)
        const verificationCode =
        /* istanbul ignore next */
        (cov_9dazl3zw4().s[26]++, await _emailverificationcodeservice.emailVerificationCodeService.generateCode(user.id));
        // Send verification email
        /* istanbul ignore next */
        cov_9dazl3zw4().s[27]++;
        try {
          const emailService =
          /* istanbul ignore next */
          (cov_9dazl3zw4().s[28]++, (0, _resendemailservice.createEmailService)());
          /* istanbul ignore next */
          cov_9dazl3zw4().s[29]++;
          await (0, _emailservice.sendEmailWithRetry)(emailService, normalizedEmail, verificationCode, user.name);
          /* istanbul ignore next */
          cov_9dazl3zw4().s[30]++;
          console.log(`Verification code resent to ${normalizedEmail} for user ${user.id}`);
          /* istanbul ignore next */
          cov_9dazl3zw4().s[31]++;
          return _server.NextResponse.json({
            success: true,
            message: 'Verification code sent successfully. Please check your email.',
            cooldownSeconds: 60 // 60 seconds cooldown
          });
        } catch (emailError) {
          /* istanbul ignore next */
          cov_9dazl3zw4().s[32]++;
          console.error('Failed to resend verification email:', emailError);
          /* istanbul ignore next */
          cov_9dazl3zw4().s[33]++;
          if (emailError instanceof _emailservice.EmailServiceError) {
            /* istanbul ignore next */
            cov_9dazl3zw4().b[4][0]++;
            let errorMessage =
            /* istanbul ignore next */
            (cov_9dazl3zw4().s[34]++, 'Failed to send verification email. ');
            /* istanbul ignore next */
            cov_9dazl3zw4().s[35]++;
            switch (emailError.code) {
              case 'QUOTA_EXCEEDED':
                /* istanbul ignore next */
                cov_9dazl3zw4().b[5][0]++;
                cov_9dazl3zw4().s[36]++;
                errorMessage += 'Email service quota exceeded. Please try again later.';
                /* istanbul ignore next */
                cov_9dazl3zw4().s[37]++;
                return _server.NextResponse.json({
                  error: errorMessage
                }, {
                  status: 503
                });
              case 'INVALID_EMAIL':
                /* istanbul ignore next */
                cov_9dazl3zw4().b[5][1]++;
                cov_9dazl3zw4().s[38]++;
                errorMessage += 'Invalid email address.';
                /* istanbul ignore next */
                cov_9dazl3zw4().s[39]++;
                return _server.NextResponse.json({
                  error: errorMessage
                }, {
                  status: 400
                });
              case 'API_ERROR':
                /* istanbul ignore next */
                cov_9dazl3zw4().b[5][2]++;
                cov_9dazl3zw4().s[40]++;
                errorMessage += 'Email service error. Please try again.';
                /* istanbul ignore next */
                cov_9dazl3zw4().s[41]++;
                break;
              case 'NETWORK_ERROR':
                /* istanbul ignore next */
                cov_9dazl3zw4().b[5][3]++;
                cov_9dazl3zw4().s[42]++;
                errorMessage += 'Network error. Please check your connection and try again.';
                /* istanbul ignore next */
                cov_9dazl3zw4().s[43]++;
                break;
              default:
                /* istanbul ignore next */
                cov_9dazl3zw4().b[5][4]++;
                cov_9dazl3zw4().s[44]++;
                errorMessage += 'Please try again.';
            }
            /* istanbul ignore next */
            cov_9dazl3zw4().s[45]++;
            return _server.NextResponse.json({
              error: errorMessage
            }, {
              status: 500
            });
          } else
          /* istanbul ignore next */
          {
            cov_9dazl3zw4().b[4][1]++;
          }
          cov_9dazl3zw4().s[46]++;
          return _server.NextResponse.json({
            error: 'Failed to send verification email. Please try again.'
          }, {
            status: 500
          });
        }
      } catch (error) {
        /* istanbul ignore next */
        cov_9dazl3zw4().s[47]++;
        if (error instanceof _emailverificationcodeservice.VerificationCodeError) {
          /* istanbul ignore next */
          cov_9dazl3zw4().b[6][0]++;
          let errorMessage;
          let statusCode =
          /* istanbul ignore next */
          (cov_9dazl3zw4().s[48]++, 400);
          /* istanbul ignore next */
          cov_9dazl3zw4().s[49]++;
          switch (error.code) {
            case _emailverificationcodeservice.VerificationError.USER_NOT_FOUND:
              /* istanbul ignore next */
              cov_9dazl3zw4().b[7][0]++;
              cov_9dazl3zw4().s[50]++;
              errorMessage = 'User not found. Please sign up first.';
              /* istanbul ignore next */
              cov_9dazl3zw4().s[51]++;
              statusCode = 404;
              /* istanbul ignore next */
              cov_9dazl3zw4().s[52]++;
              break;
            case _emailverificationcodeservice.VerificationError.ALREADY_VERIFIED:
              /* istanbul ignore next */
              cov_9dazl3zw4().b[7][1]++;
              cov_9dazl3zw4().s[53]++;
              errorMessage = 'Email is already verified. You can sign in to your account.';
              /* istanbul ignore next */
              cov_9dazl3zw4().s[54]++;
              return _server.NextResponse.json({
                success: true,
                message: errorMessage,
                redirectTo: '/auth/signin'
              });
            default:
              /* istanbul ignore next */
              cov_9dazl3zw4().b[7][2]++;
              cov_9dazl3zw4().s[55]++;
              errorMessage = 'Failed to generate verification code. Please try again.';
          }
          /* istanbul ignore next */
          cov_9dazl3zw4().s[56]++;
          console.log(`Resend verification failed for ${normalizedEmail}: ${error.code} - ${errorMessage}`);
          /* istanbul ignore next */
          cov_9dazl3zw4().s[57]++;
          return _server.NextResponse.json({
            error: errorMessage,
            code: error.code
          }, {
            status: statusCode
          });
        } else
        /* istanbul ignore next */
        {
          cov_9dazl3zw4().b[6][1]++;
        }
        // Log unexpected errors
        cov_9dazl3zw4().s[58]++;
        console.error('Unexpected error during resend verification:', error);
        /* istanbul ignore next */
        cov_9dazl3zw4().s[59]++;
        return _server.NextResponse.json({
          error: 'Internal server error'
        }, {
          status: 500
        });
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_9dazl3zw4().s[60]++;
      console.error('Resend verification endpoint error:', error);
      /* istanbul ignore next */
      cov_9dazl3zw4().s[61]++;
      return _server.NextResponse.json({
        error: 'Internal server error'
      }, {
        status: 500
      });
    }
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,