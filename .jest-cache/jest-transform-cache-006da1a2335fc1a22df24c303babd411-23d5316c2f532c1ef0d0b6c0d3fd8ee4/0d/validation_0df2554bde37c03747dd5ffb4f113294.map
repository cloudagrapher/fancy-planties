{"version":3,"names":["changePasswordSchema","cov_1c6htccagb","f","s","emailSchema","formatValidationErrors","nameSchema","passwordResetRequestSchema","passwordResetSchema","passwordSchema","signInSchema","signUpSchema","updateProfileSchema","validateInput","_zod","z","string","min","max","regex","email","transform","toLowerCase","name","trim","object","password","token","currentPassword","newPassword","error","errors","issues","forEach","issue","path","join","message","schema","input","data","parse","success","ZodError","b"],"sources":["/Users/stefanbekker/projects/fancy-planties/src/lib/auth/validation.ts"],"sourcesContent":["import { z } from 'zod';\n\n// Password validation schema\nexport const passwordSchema = z\n  .string()\n  .min(8, 'Password must be at least 8 characters long')\n  .max(128, 'Password must be less than 128 characters')\n  .regex(\n    /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)/,\n    'Password must contain at least one lowercase letter, one uppercase letter, and one number'\n  );\n\n// Email validation schema\nexport const emailSchema = z\n  .string()\n  .email('Please enter a valid email address')\n  .max(255, 'Email must be less than 255 characters')\n  .transform((email) => email.toLowerCase());\n\n// Name validation schema\nexport const nameSchema = z\n  .string()\n  .min(1, 'Name is required')\n  .max(100, 'Name must be less than 100 characters')\n  .regex(/^[a-zA-Z\\s'-]+$/, 'Name can only contain letters, spaces, hyphens, and apostrophes')\n  .transform((name) => name.trim());\n\n// Sign up validation schema\nexport const signUpSchema = z.object({\n  email: emailSchema,\n  password: passwordSchema,\n  name: nameSchema,\n});\n\n// Sign in validation schema\nexport const signInSchema = z.object({\n  email: emailSchema,\n  password: z.string().min(1, 'Password is required'),\n});\n\n// Password reset request schema\nexport const passwordResetRequestSchema = z.object({\n  email: emailSchema,\n});\n\n// Password reset schema\nexport const passwordResetSchema = z.object({\n  token: z.string().min(1, 'Reset token is required'),\n  password: passwordSchema,\n});\n\n// Change password schema\nexport const changePasswordSchema = z.object({\n  currentPassword: z.string().min(1, 'Current password is required'),\n  newPassword: passwordSchema,\n});\n\n// Update profile schema\nexport const updateProfileSchema = z.object({\n  name: nameSchema,\n  email: emailSchema,\n});\n\n// Validation helper types\nexport type SignUpInput = z.infer<typeof signUpSchema>;\nexport type SignInInput = z.infer<typeof signInSchema>;\nexport type PasswordResetRequestInput = z.infer<typeof passwordResetRequestSchema>;\nexport type PasswordResetInput = z.infer<typeof passwordResetSchema>;\nexport type ChangePasswordInput = z.infer<typeof changePasswordSchema>;\nexport type UpdateProfileInput = z.infer<typeof updateProfileSchema>;\n\n// Validation error formatter\nexport function formatValidationErrors(error: z.ZodError): Record<string, string> {\n  const errors: Record<string, string> = {};\n  \n  error.issues.forEach((issue) => {\n    const path = issue.path.join('.');\n    errors[path] = issue.message;\n  });\n  \n  return errors;\n}\n\n// Safe validation helper\nexport function validateInput<T>(\n  schema: z.ZodSchema<T>,\n  input: unknown\n): { success: true; data: T } | { success: false; errors: Record<string, string> } {\n  try {\n    const data = schema.parse(input);\n    return { success: true, data };\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      return { success: false, errors: formatValidationErrors(error) };\n    }\n    throw error;\n  }\n}"],"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","ignoreList":[]}