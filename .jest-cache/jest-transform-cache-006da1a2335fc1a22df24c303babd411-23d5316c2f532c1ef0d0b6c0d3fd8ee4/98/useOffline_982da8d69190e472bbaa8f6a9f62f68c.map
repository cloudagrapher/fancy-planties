{"version":3,"names":["cov_5jc41ybhd","actualCoverage","s","useOffline","f","isOnline","setIsOnline","_react","useState","offlineData","setOfflineData","pendingEntries","setPendingEntries","isSyncing","setIsSyncing","lastSyncTime","setLastSyncTime","useEffect","updateOnlineStatus","navigator","b","onLine","window","addEventListener","removeEventListener","loadCachedData","cached","localStorage","getItem","JSON","parse","pending","lastSync","error","console","length","syncPendingEntries","cacheOfflineData","useCallback","response","fetch","ok","data","json","setItem","stringify","addPendingCareEntry","entry","newEntry","id","Date","now","Math","random","toString","substr","timestamp","toISOString","updated","method","headers","body","result","successfulIds","results","filter","r","success","map","remaining","includes","getPlantData","plants","getPropagationData","propagations","hasCachedData","clearCache","removeItem"],"sources":["/Users/stefanbekker/projects/fancy-planties/src/hooks/useOffline.ts"],"sourcesContent":["'use client';\n\nimport { useState, useEffect, useCallback } from 'react';\n\nexport interface OfflineData {\n  plants: any[];\n  propagations: any[];\n  careHistory: any[];\n  lastSync: string;\n}\n\nexport interface PendingCareEntry {\n  id: string;\n  plantInstanceId: number;\n  careType: 'fertilizer' | 'repot' | 'water' | 'prune' | 'inspect' | 'other';\n  notes?: string;\n  timestamp: string;\n}\n\n/**\n * Hook for managing offline functionality\n * Handles network status, offline data caching, and sync operations\n */\nexport function useOffline() {\n  const [isOnline, setIsOnline] = useState(true);\n  const [offlineData, setOfflineData] = useState<OfflineData | null>(null);\n  const [pendingEntries, setPendingEntries] = useState<PendingCareEntry[]>([]);\n  const [isSyncing, setIsSyncing] = useState(false);\n  const [lastSyncTime, setLastSyncTime] = useState<string | null>(null);\n\n  // Initialize network status\n  useEffect(() => {\n    const updateOnlineStatus = () => {\n      setIsOnline(typeof navigator !== 'undefined' ? navigator.onLine : true);\n    };\n\n    // Set initial status\n    updateOnlineStatus();\n\n    // Listen for network changes\n    window.addEventListener('online', updateOnlineStatus);\n    window.addEventListener('offline', updateOnlineStatus);\n\n    return () => {\n      window.removeEventListener('online', updateOnlineStatus);\n      window.removeEventListener('offline', updateOnlineStatus);\n    };\n  }, []);\n\n  // Load cached data and pending entries from localStorage\n  useEffect(() => {\n    const loadCachedData = () => {\n      try {\n        const cached = localStorage.getItem('fancy-planties-offline-data');\n        if (cached) {\n          setOfflineData(JSON.parse(cached));\n        }\n\n        const pending = localStorage.getItem('fancy-planties-pending-entries');\n        if (pending) {\n          setPendingEntries(JSON.parse(pending));\n        }\n\n        const lastSync = localStorage.getItem('fancy-planties-last-sync');\n        if (lastSync) {\n          setLastSyncTime(lastSync);\n        }\n      } catch (error) {\n        console.error('Error loading cached data:', error);\n      }\n    };\n\n    loadCachedData();\n  }, []);\n\n  // Auto-sync when coming back online\n  useEffect(() => {\n    if (isOnline && pendingEntries.length > 0) {\n      syncPendingEntries();\n    }\n  }, [isOnline]);\n\n  /**\n   * Cache data for offline use\n   */\n  const cacheOfflineData = useCallback(async () => {\n    if (!isOnline) return;\n\n    try {\n      const response = await fetch('/api/offline/data');\n      if (response.ok) {\n        const data = await response.json();\n        setOfflineData(data);\n        localStorage.setItem('fancy-planties-offline-data', JSON.stringify(data));\n        localStorage.setItem('fancy-planties-last-sync', data.lastSync);\n        setLastSyncTime(data.lastSync);\n      }\n    } catch (error) {\n      console.error('Error caching offline data:', error);\n    }\n  }, [isOnline]);\n\n  /**\n   * Add a care entry to pending queue when offline\n   */\n  const addPendingCareEntry = useCallback((entry: Omit<PendingCareEntry, 'id' | 'timestamp'>) => {\n    const newEntry: PendingCareEntry = {\n      ...entry,\n      id: `pending-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n      timestamp: new Date().toISOString(),\n    };\n\n    const updated = [...pendingEntries, newEntry];\n    setPendingEntries(updated);\n    localStorage.setItem('fancy-planties-pending-entries', JSON.stringify(updated));\n\n    return newEntry.id;\n  }, [pendingEntries]);\n\n  /**\n   * Sync pending entries when back online\n   */\n  const syncPendingEntries = useCallback(async () => {\n    if (!isOnline || pendingEntries.length === 0 || isSyncing) return;\n\n    setIsSyncing(true);\n    try {\n      const response = await fetch('/api/offline/sync', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ pendingEntries }),\n      });\n\n      if (response.ok) {\n        const result = await response.json();\n        \n        // Remove successfully synced entries\n        const successfulIds = result.results\n          .filter((r: any) => r.success)\n          .map((r: any) => r.entry.id);\n\n        const remaining = pendingEntries.filter(entry => !successfulIds.includes(entry.id));\n        setPendingEntries(remaining);\n        localStorage.setItem('fancy-planties-pending-entries', JSON.stringify(remaining));\n\n        // Refresh offline data after sync\n        await cacheOfflineData();\n      }\n    } catch (error) {\n      console.error('Error syncing pending entries:', error);\n    } finally {\n      setIsSyncing(false);\n    }\n  }, [isOnline, pendingEntries, isSyncing, cacheOfflineData]);\n\n  /**\n   * Get plant data (from cache if offline, from server if online)\n   */\n  const getPlantData = useCallback(() => {\n    if (isOnline) {\n      // Return null to indicate should fetch from server\n      return null;\n    }\n    \n    return offlineData?.plants || [];\n  }, [isOnline, offlineData]);\n\n  /**\n   * Get propagation data (from cache if offline, from server if online)\n   */\n  const getPropagationData = useCallback(() => {\n    if (isOnline) {\n      return null;\n    }\n    \n    return offlineData?.propagations || [];\n  }, [isOnline, offlineData]);\n\n  /**\n   * Check if we have cached data available\n   */\n  const hasCachedData = useCallback(() => {\n    return offlineData !== null;\n  }, [offlineData]);\n\n  /**\n   * Clear all cached data\n   */\n  const clearCache = useCallback(() => {\n    setOfflineData(null);\n    setPendingEntries([]);\n    setLastSyncTime(null);\n    localStorage.removeItem('fancy-planties-offline-data');\n    localStorage.removeItem('fancy-planties-pending-entries');\n    localStorage.removeItem('fancy-planties-last-sync');\n  }, []);\n\n  return {\n    // Network status\n    isOnline,\n    \n    // Data management\n    offlineData,\n    pendingEntries,\n    hasCachedData: hasCachedData(),\n    \n    // Sync status\n    isSyncing,\n    lastSyncTime,\n    \n    // Data access\n    getPlantData,\n    getPropagationData,\n    \n    // Actions\n    cacheOfflineData,\n    addPendingCareEntry,\n    syncPendingEntries,\n    clearCache,\n  };\n}"],"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","ignoreList":[]}