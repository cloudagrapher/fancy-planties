c1ab9b00fe6e809780c382c16bc81327
/**
 * Efficient Test Data Setup and Teardown
 * 
 * Provides optimized utilities for fast test data creation and cleanup.
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get BatchOperations () {
        return BatchOperations;
    },
    get LazyTestData () {
        return LazyTestData;
    },
    get createPlantInstancePool () {
        return createPlantInstancePool;
    },
    get createPlantPool () {
        return createPlantPool;
    },
    get createUserPool () {
        return createUserPool;
    },
    get efficientTestData () {
        return efficientTestData;
    },
    get generateTestData () {
        return generateTestData;
    },
    get setupEfficientTestData () {
        return setupEfficientTestData;
    },
    get setupTransactionIsolation () {
        return setupTransactionIsolation;
    }
});
/**
 * Efficient test data manager with object pooling
 */ class EfficientTestDataManager {
    /**
   * Create a data pool for reusable test objects
   */ createPool(poolName, factory, cleanup, initialSize = 5) {
        const pool = {
            available: [],
            inUse: new Set(),
            factory,
            cleanup
        };
        // Pre-populate pool
        for(let i = 0; i < initialSize; i++){
            pool.available.push(factory());
        }
        this.pools.set(poolName, pool);
    }
    /**
   * Get an item from the pool (reuse if available, create if needed)
   */ getFromPool(poolName) {
        const pool = this.pools.get(poolName);
        if (!pool) {
            throw new Error(`Pool '${poolName}' not found`);
        }
        let item;
        if (pool.available.length > 0) {
            item = pool.available.pop();
        } else {
            item = pool.factory();
        }
        pool.inUse.add(item);
        return item;
    }
    /**
   * Return an item to the pool for reuse
   */ async returnToPool(poolName, item) {
        const pool = this.pools.get(poolName);
        if (!pool) {
            throw new Error(`Pool '${poolName}' not found`);
        }
        if (pool.inUse.has(item)) {
            pool.inUse.delete(item);
            await pool.cleanup(item);
            pool.available.push(item);
        }
    }
    /**
   * Create a database transaction for test isolation
   */ async createTransaction(testName) {
        const transactionId = `tx_${testName}_${Date.now()}`;
        // Mock transaction for now - in real implementation would use actual DB
        const transaction = {
            id: transactionId,
            rollback: async ()=>{
                console.log(`ðŸ”„ Rolling back transaction: ${transactionId}`);
            },
            commit: async ()=>{
                console.log(`âœ… Committing transaction: ${transactionId}`);
            }
        };
        this.transactions.set(transactionId, transaction);
        return transactionId;
    }
    /**
   * Rollback a transaction (for test cleanup)
   */ async rollbackTransaction(transactionId) {
        const transaction = this.transactions.get(transactionId);
        if (transaction) {
            await transaction.rollback();
            this.transactions.delete(transactionId);
        }
    }
    /**
   * Add a cleanup task to be executed during teardown
   */ addCleanupTask(task) {
        this.cleanupTasks.push(task);
    }
    /**
   * Execute all cleanup tasks
   */ async executeCleanup() {
        const startTime = performance.now();
        // Execute cleanup tasks in parallel for speed
        await Promise.all(this.cleanupTasks.map((task)=>task()));
        // Rollback any remaining transactions
        await Promise.all(Array.from(this.transactions.keys()).map((id)=>this.rollbackTransaction(id)));
        // Clear cleanup tasks
        this.cleanupTasks = [];
        const duration = performance.now() - startTime;
        console.log(`ðŸ§¹ Cleanup completed in ${duration.toFixed(2)}ms`);
    }
    /**
   * Reset all pools and cleanup
   */ async reset() {
        await this.executeCleanup();
        // Clear all pools
        for (const [poolName, pool] of this.pools){
            // Cleanup all items in use
            for (const item of pool.inUse){
                await pool.cleanup(item);
            }
            // Cleanup all available items
            for (const item of pool.available){
                await pool.cleanup(item);
            }
        }
        this.pools.clear();
        this.transactions.clear();
    }
    constructor(){
        this.pools = new Map();
        this.transactions = new Map();
        this.cleanupTasks = [];
    }
}
const efficientTestData = new EfficientTestDataManager();
function createUserPool() {
    efficientTestData.createPool('users', ()=>({
            id: Math.floor(Math.random() * 1000000),
            email: `test${Date.now()}@example.com`,
            username: `user${Date.now()}`,
            hashedPassword: 'hashed_password',
            createdAt: new Date()
        }), async (user)=>{
        // Reset user state for reuse
        user.email = `test${Date.now()}@example.com`;
        user.username = `user${Date.now()}`;
    }, 3 // Keep 3 users in pool
    );
}
function createPlantPool() {
    efficientTestData.createPool('plants', ()=>({
            id: Math.floor(Math.random() * 1000000),
            commonName: 'Test Plant',
            scientificName: 'Testicus planticus',
            family: 'Testaceae',
            userId: 1
        }), async (plant)=>{
        // Reset plant state for reuse
        plant.commonName = 'Test Plant';
        plant.scientificName = 'Testicus planticus';
    }, 5 // Keep 5 plants in pool
    );
}
function createPlantInstancePool() {
    efficientTestData.createPool('plantInstances', ()=>({
            id: Math.floor(Math.random() * 1000000),
            plantId: 1,
            nickname: 'Test Instance',
            location: 'Test Location',
            userId: 1,
            careHistory: []
        }), async (instance)=>{
        // Reset instance state for reuse
        instance.nickname = 'Test Instance';
        instance.location = 'Test Location';
        instance.careHistory = [];
    }, 5 // Keep 5 instances in pool
    );
}
function setupEfficientTestData() {
    beforeAll(async ()=>{
        createUserPool();
        createPlantPool();
        createPlantInstancePool();
    });
    afterAll(async ()=>{
        await efficientTestData.reset();
    });
}
function setupTransactionIsolation() {
    let transactionId;
    beforeEach(async ()=>{
        const testName = expect.getState().currentTestName || 'unknown';
        transactionId = await efficientTestData.createTransaction(testName);
    });
    afterEach(async ()=>{
        if (transactionId) {
            await efficientTestData.rollbackTransaction(transactionId);
        }
    });
}
class BatchOperations {
    constructor(batchSize = 10){
        this.operations = [];
        this.batchSize = batchSize;
    }
    /**
   * Add an operation to the batch
   */ add(operation) {
        this.operations.push(operation);
    }
    /**
   * Execute all operations in batches
   */ async execute() {
        const results = [];
        for(let i = 0; i < this.operations.length; i += this.batchSize){
            const batch = this.operations.slice(i, i + this.batchSize);
            const batchResults = await Promise.all(batch.map((op)=>op()));
            results.push(...batchResults);
        }
        return results;
    }
    /**
   * Clear all operations
   */ clear() {
        this.operations = [];
    }
}
function* generateTestData(factory, count) {
    for(let i = 0; i < count; i++){
        yield factory();
    }
}
class LazyTestData {
    constructor(factory){
        this.data = null;
        this.factory = factory;
    }
    async get() {
        if (this.data === null) {
            this.data = await this.factory();
        }
        return this.data;
    }
    reset() {
        this.data = null;
    }
}

//# sourceMappingURL=data:application/json;base64,