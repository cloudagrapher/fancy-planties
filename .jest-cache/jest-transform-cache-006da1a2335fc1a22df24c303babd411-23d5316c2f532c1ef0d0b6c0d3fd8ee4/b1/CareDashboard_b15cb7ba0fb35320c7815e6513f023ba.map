{"version":3,"names":["CareDashboard","userId","cov_1f6p9e24bh","f","selectedTab","setSelectedTab","s","_react","useState","quickCareLoading","setQuickCareLoading","queryClient","_reactquery","useQueryClient","data","dashboardData","isLoading","loading","error","useQuery","queryKey","queryFn","response","fetch","cache","headers","ok","b","Error","json","staleTime","gcTime","refetchOnWindowFocus","refetchOnMount","handleQuickCare","plantInstanceId","careType","method","body","JSON","stringify","careDate","Date","toISOString","invalidateQueries","refetchType","removeQueries","refetchQueries","err","console","handleBulkQuickCare","plantsNeedingCare","overdue","dueToday","dueSoon","length","log","promises","slice","map","plant","id","results","Promise","allSettled","successCount","filter","r","status","failureCount","_jsxruntime","jsxs","className","role","jsx","message","onClick","disabled","tabs","label","count","statistics","overdueCount","plants","dueTodayCount","dueSoonCount","recentlyCared","activeTab","find","tab","activePlants","_CareStatistics","default","quickActions","action","hasPlants","totalActivePlants","isEnabled","color","title","description","Fragment","fill","viewBox","cx","cy","stroke","strokeWidth","d","icon","_CareTaskCard","onQuickCare","showUrgency"],"sources":["/Users/stefanbekker/projects/fancy-planties/src/components/care/CareDashboard.tsx"],"sourcesContent":["'use client';\n\nimport { useState } from 'react';\nimport { useQuery, useQueryClient } from '@tanstack/react-query';\nimport type { CareDashboardData } from '@/lib/types/care-types';\nimport CareTaskCard from './CareTaskCard';\n// import QuickCareActions from './QuickCareActions';\nimport CareStatistics from './CareStatistics';\n\ninterface CareDashboardProps {\n  userId: number;\n}\n\nexport default function CareDashboard({ userId }: CareDashboardProps) {\n  const [selectedTab, setSelectedTab] = useState<'overdue' | 'today' | 'soon' | 'recent'>('overdue');\n  const [quickCareLoading, setQuickCareLoading] = useState<number | null>(null);\n  const queryClient = useQueryClient();\n\n  // Use React Query for dashboard data\n  const { data: dashboardData, isLoading: loading, error } = useQuery({\n    queryKey: ['care-dashboard', userId],\n    queryFn: async (): Promise<CareDashboardData> => {\n      const response = await fetch(`/api/care/dashboard?userId=${userId}`, {\n        // Prevent browser caching\n        cache: 'no-store',\n        headers: {\n          'Cache-Control': 'no-cache',\n        },\n      });\n      if (!response.ok) {\n        throw new Error('Failed to load care dashboard');\n      }\n      return response.json();\n    },\n    staleTime: 0, // Always consider data stale\n    gcTime: 0, // Don't keep old data in cache\n    refetchOnWindowFocus: true,\n    refetchOnMount: true,\n  });\n\n  const handleQuickCare = async (plantInstanceId: number, careType: string) => {\n    try {\n      setQuickCareLoading(plantInstanceId);\n      const response = await fetch('/api/care/quick-log', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          plantInstanceId,\n          careType,\n          careDate: new Date().toISOString(),\n          userId,\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to log care');\n      }\n\n      // Invalidate and refetch dashboard data\n      await queryClient.invalidateQueries({ \n        queryKey: ['care-dashboard', userId],\n        refetchType: 'active'\n      });\n      // Also remove from cache entirely and refetch\n      queryClient.removeQueries({ queryKey: ['care-dashboard', userId] });\n      await queryClient.refetchQueries({ queryKey: ['care-dashboard', userId] });\n    } catch (err) {\n      console.error('Error logging quick care:', err);\n      // Could show a toast notification here instead\n    } finally {\n      setQuickCareLoading(null);\n    }\n  };\n\n  const handleBulkQuickCare = async (careType: string) => {\n    if (!dashboardData) return;\n    \n    // Get plants that need this type of care based on urgency\n    const plantsNeedingCare = [\n      ...dashboardData.overdue,\n      ...dashboardData.dueToday,\n      ...(careType !== 'fertilizer' ? dashboardData.dueSoon : []) // Be less aggressive for fertilizer\n    ];\n\n    if (plantsNeedingCare.length === 0) {\n      console.log('No plants currently need this type of care');\n      return;\n    }\n\n    try {\n      setQuickCareLoading(-1); // Use -1 to indicate bulk operation\n      \n      // Log care for multiple plants\n      const promises = plantsNeedingCare.slice(0, 10).map(plant => // Limit to first 10 plants\n        fetch('/api/care/quick-log', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            plantInstanceId: plant.id,\n            careType,\n            careDate: new Date().toISOString(),\n            userId,\n          }),\n        })\n      );\n\n      const results = await Promise.allSettled(promises);\n      const successCount = results.filter(r => r.status === 'fulfilled').length;\n      const failureCount = results.length - successCount;\n\n      if (successCount > 0) {\n        // Show success message\n        console.log(`Successfully logged ${careType} for ${successCount} plants${failureCount > 0 ? `, ${failureCount} failed` : ''}`);\n        await queryClient.invalidateQueries({ \n          queryKey: ['care-dashboard', userId],\n          refetchType: 'active'\n        });\n        // Also remove from cache entirely and refetch\n        queryClient.removeQueries({ queryKey: ['care-dashboard', userId] });\n        await queryClient.refetchQueries({ queryKey: ['care-dashboard', userId] });\n      } else {\n        throw new Error('Failed to log care for any plants');\n      }\n    } catch (err) {\n      console.error('Error with bulk care:', err);\n      // Could show a toast notification here instead\n    } finally {\n      setQuickCareLoading(null);\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"animate-pulse space-y-6\" role=\"status\" aria-label=\"Loading care dashboard\">\n        <div className=\"h-8 bg-gray-200 rounded w-1/3 mb-4\"></div>\n        <div className=\"grid grid-cols-2 gap-4 mb-6\">\n          <div className=\"h-20 bg-gray-200 rounded\"></div>\n          <div className=\"h-20 bg-gray-200 rounded\"></div>\n        </div>\n        <div className=\"space-y-3\">\n          <div className=\"h-16 bg-gray-200 rounded\"></div>\n          <div className=\"h-16 bg-gray-200 rounded\"></div>\n          <div className=\"h-16 bg-gray-200 rounded\"></div>\n        </div>\n        <span className=\"sr-only\">Loading care dashboard...</span>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"rounded-2xl shadow-sm border border-red-200/70 bg-red-50/70 backdrop-blur p-6 text-center\">\n        <div className=\"text-red-600 mb-4\">⚠️</div>\n        <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Error Loading Care Dashboard</h3>\n        <p className=\"text-gray-600 mb-4\">{error instanceof Error ? error.message : 'Failed to load dashboard'}</p>\n        <button\n          onClick={() => queryClient.invalidateQueries({ queryKey: ['care-dashboard', userId] })}\n          disabled={loading}\n          className={`px-4 py-2 bg-primary-600 text-white rounded-lg hover:bg-primary-700 transition-colors shadow-sm ${loading ? 'opacity-50 cursor-not-allowed' : ''}`}\n        >\n          {loading ? 'Loading...' : 'Try Again'}\n        </button>\n      </div>\n    );\n  }\n\n  if (!dashboardData) {\n    return null;\n  }\n\n  const tabs = [\n    { id: 'overdue', label: 'Overdue', count: dashboardData.statistics.overdueCount, plants: dashboardData.overdue },\n    { id: 'today', label: 'Due Today', count: dashboardData.statistics.dueTodayCount, plants: dashboardData.dueToday },\n    { id: 'soon', label: 'Due Soon', count: dashboardData.statistics.dueSoonCount, plants: dashboardData.dueSoon },\n    { id: 'recent', label: 'Recent Care', count: dashboardData.recentlyCared.length, plants: dashboardData.recentlyCared },\n  ] as const;\n\n  const activeTab = tabs.find(tab => tab.id === selectedTab);\n  const activePlants = activeTab?.plants || [];\n\n  return (\n    <div className=\"space-y-6\" data-testid=\"care-dashboard\">\n      {/* Header */}\n      <div>\n        <h1 className=\"text-2xl sm:text-3xl font-bold text-gray-900 mb-2\">Plant Care</h1>\n        <p className=\"text-sm sm:text-base text-gray-600\">Keep your plants healthy and thriving</p>\n      </div>\n\n      {/* Statistics */}\n      <CareStatistics statistics={dashboardData.statistics} />\n\n      {/* Quick Actions */}\n      <div className=\"grid grid-cols-2 sm:grid-cols-4 gap-2 sm:gap-3 mb-6\">\n        {dashboardData.quickActions.map((action) => {\n          const hasPlants = dashboardData?.statistics?.totalActivePlants > 0;\n          const plantsNeedingCare = dashboardData ? [\n            ...dashboardData.overdue,\n            ...dashboardData.dueToday,\n            ...(action.careType !== 'fertilizer' ? dashboardData.dueSoon : [])\n          ].length : 0;\n          \n          return (\n            <button\n              key={action.id}\n              onClick={() => handleBulkQuickCare(action.careType)}\n              className={`p-3 sm:p-4 rounded-xl text-white font-medium transition-colors shadow-sm touch-manipulation ${\n                hasPlants && plantsNeedingCare > 0 && action.isEnabled && quickCareLoading !== -1 ? action.color : 'bg-gray-400 cursor-not-allowed'\n              }`}\n              disabled={!action.isEnabled || !hasPlants || plantsNeedingCare === 0 || quickCareLoading === -1 || loading}\n              title={\n                loading ? 'Loading...' :\n                quickCareLoading === -1 ? 'Logging care for multiple plants...' :\n                !hasPlants ? 'Add plants to use quick care actions' :\n                plantsNeedingCare === 0 ? 'No plants currently need this care' :\n                `${action.description} for ${plantsNeedingCare} plants`\n              }\n            >\n              {quickCareLoading === -1 ? (\n                <>\n                  <div className=\"text-lg mb-1\">\n                    <svg className=\"animate-spin h-5 w-5 mx-auto\" fill=\"none\" viewBox=\"0 0 24 24\">\n                      <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\n                      <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n                    </svg>\n                  </div>\n                  <div className=\"text-sm\">Logging...</div>\n                </>\n              ) : (\n                <>\n                  <div className=\"text-base sm:text-lg mb-1\">{action.icon}</div>\n                  <div className=\"text-xs sm:text-sm\">{action.label}</div>\n                </>\n              )}\n            </button>\n          );\n        })}\n      </div>\n\n      {/* Care Tasks Tabs */}\n      <div>\n        <div className=\"flex space-x-1 mb-4 bg-white/50 p-1 rounded-xl border border-slate-200/70 backdrop-blur overflow-x-auto\">\n          {tabs.map((tab) => (\n            <button\n              key={tab.id}\n              onClick={() => setSelectedTab(tab.id)}\n              disabled={loading}\n              className={`\n                flex-1 px-2 sm:px-3 py-2 rounded-lg text-xs sm:text-sm font-medium transition-colors relative whitespace-nowrap touch-manipulation min-w-fit\n                ${selectedTab === tab.id\n                  ? 'bg-white text-gray-900 shadow-sm border border-slate-200/70'\n                  : 'text-gray-600 hover:text-gray-900 hover:bg-white/50'\n                }\n                ${loading ? 'opacity-50 cursor-not-allowed' : ''}\n              `}\n            >\n              <span className=\"sm:hidden\">\n                {tab.id === 'overdue' ? 'Overdue' :\n                 tab.id === 'today' ? 'Today' :\n                 tab.id === 'soon' ? 'Soon' : 'Recent'}\n              </span>\n              <span className=\"hidden sm:inline\">{tab.label}</span>\n              {tab.count > 0 && (\n                <span className={`\n                  ml-1 sm:ml-2 px-1.5 sm:px-2 py-0.5 rounded-full text-xs font-medium\n                  ${selectedTab === tab.id\n                    ? tab.id === 'overdue' ? 'bg-red-100 text-red-800' :\n                      tab.id === 'today' ? 'bg-amber-100 text-amber-800' :\n                      tab.id === 'soon' ? 'bg-yellow-100 text-yellow-800' :\n                      'bg-green-100 text-green-800'\n                    : 'bg-gray-200 text-gray-600'\n                  }\n                `}>\n                  {tab.count}\n                </span>\n              )}\n            </button>\n          ))}\n        </div>\n\n        {/* Care Tasks List */}\n        <div className=\"space-y-3\">\n          {activePlants.length === 0 ? (\n            <div className=\"rounded-2xl shadow-sm border border-slate-200/70 bg-white/50 backdrop-blur p-8 text-center\">\n              <div className=\"text-4xl mb-4\">\n                {selectedTab === 'overdue' ? '✅' :\n                 selectedTab === 'today' ? '📅' :\n                 selectedTab === 'soon' ? '⏰' : '🌱'}\n              </div>\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n                {selectedTab === 'overdue' ? 'All caught up!' :\n                 selectedTab === 'today' ? 'No care due today' :\n                 selectedTab === 'soon' ? 'Nothing due soon' : 'No recent care logged'}\n              </h3>\n              <p className=\"text-gray-600\">\n                {selectedTab === 'overdue' ? 'Great job keeping up with your plant care!' :\n                 selectedTab === 'today' ? 'Check back tomorrow for new care tasks.' :\n                 selectedTab === 'soon' ? 'Your plants are well cared for.' : 'Start logging care to see your recent activity.'}\n              </p>\n            </div>\n          ) : (\n            activePlants.map((plant) => (\n              <CareTaskCard\n                key={plant.id}\n                plant={plant}\n                onQuickCare={handleQuickCare}\n                showUrgency={selectedTab === 'overdue' || selectedTab === 'today'}\n              />\n            ))\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}"],"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","ignoreList":[]}