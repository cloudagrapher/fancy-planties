831db582a2c60441215b99c9469718c9
/**
 * @jest-environment jsdom
 */ "use strict";
jest.mock('@/hooks/useOffline', ()=>({
        useOffline: ()=>({
                isOnline: true,
                addPendingCareEntry: mockAddPendingCareEntry
            })
    }));
jest.mock('@/lib/utils/service-worker', ()=>({
        useServiceWorker: ()=>({
                registerBackgroundSync: mockRegisterBackgroundSync
            })
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _userevent = /*#__PURE__*/ _interop_require_default(require("@testing-library/user-event"));
const _renderhelpers = require("../../../test-utils/helpers/render-helpers.js");
const _QuickCareForm = /*#__PURE__*/ _interop_require_default(require("../../../components/care/QuickCareForm"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Mock the offline hook
const mockAddPendingCareEntry = jest.fn();
const mockRegisterBackgroundSync = jest.fn();
describe('QuickCareForm', ()=>{
    const defaultProps = {
        plantInstanceId: 1,
        onSuccess: jest.fn(),
        onCancel: jest.fn(),
        defaultCareType: 'fertilizer'
    };
    beforeEach(()=>{
        jest.clearAllMocks();
        // Mock successful API response by default
        (0, _renderhelpers.mockApiResponses)({
            '/api/care/log': {
                success: true,
                data: {
                    id: 1
                }
            }
        });
        // Reset offline hook to online state
        jest.mocked(require('@/hooks/useOffline').useOffline).mockReturnValue({
            isOnline: true,
            addPendingCareEntry: mockAddPendingCareEntry
        });
    });
    describe('Form Rendering', ()=>{
        it('renders all care type options', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_QuickCareForm.default, {
                ...defaultProps
            }));
            expect(_react1.screen.getByText('🌱')).toBeInTheDocument(); // Fertilizer
            expect(_react1.screen.getByText('💧')).toBeInTheDocument(); // Water
            expect(_react1.screen.getByText('🪴')).toBeInTheDocument(); // Repot
            expect(_react1.screen.getByText('✂️')).toBeInTheDocument(); // Prune
            expect(_react1.screen.getByText('🔍')).toBeInTheDocument(); // Inspect
            expect(_react1.screen.getByText('📝')).toBeInTheDocument(); // Other
            expect(_react1.screen.getByText('Fertilizer')).toBeInTheDocument();
            expect(_react1.screen.getByText('Water')).toBeInTheDocument();
            expect(_react1.screen.getByText('Repot')).toBeInTheDocument();
            expect(_react1.screen.getByText('Prune')).toBeInTheDocument();
            expect(_react1.screen.getByText('Inspect')).toBeInTheDocument();
            expect(_react1.screen.getByText('Other')).toBeInTheDocument();
        });
        it('renders care date field with today as default', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_QuickCareForm.default, {
                ...defaultProps
            }));
            const dateInput = _react1.screen.getByLabelText(/care date/i);
            const today = new Date().toISOString().split('T')[0];
            expect(dateInput).toBeInTheDocument();
            expect(dateInput).toHaveValue(today);
            expect(dateInput).toHaveAttribute('max', today); // Cannot be in future
        });
        it('renders notes field', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_QuickCareForm.default, {
                ...defaultProps
            }));
            const notesField = _react1.screen.getByLabelText(/notes/i);
            expect(notesField).toBeInTheDocument();
            expect(notesField).toHaveAttribute('placeholder', 'Any additional observations or notes...');
        });
        it('renders submit button', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_QuickCareForm.default, {
                ...defaultProps
            }));
            expect(_react1.screen.getByRole('button', {
                name: /log care/i
            })).toBeInTheDocument();
        });
        it('selects default care type', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_QuickCareForm.default, {
                ...defaultProps,
                defaultCareType: "water"
            }));
            const waterButton = _react1.screen.getByRole('button', {
                name: /water/i
            });
            expect(waterButton).toHaveClass('btn--primary');
        });
    });
    describe('Care Type Selection', ()=>{
        it('allows selecting different care types', async ()=>{
            const user = _userevent.default.setup();
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_QuickCareForm.default, {
                ...defaultProps
            }));
            const waterButton = _react1.screen.getByRole('button', {
                name: /water/i
            });
            await user.click(waterButton);
            expect(waterButton).toHaveClass('btn--primary');
        });
        it('shows conditional fields for fertilizer type', async ()=>{
            const user = _userevent.default.setup();
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_QuickCareForm.default, {
                ...defaultProps,
                defaultCareType: "fertilizer"
            }));
            expect(_react1.screen.getByLabelText(/fertilizer type/i)).toBeInTheDocument();
            expect(_react1.screen.getByPlaceholderText(/liquid fertilizer, slow-release pellets/i)).toBeInTheDocument();
        });
        it('shows conditional fields for repotting', async ()=>{
            const user = _userevent.default.setup();
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_QuickCareForm.default, {
                ...defaultProps
            }));
            const repotButton = _react1.screen.getByRole('button', {
                name: /repot/i
            });
            await user.click(repotButton);
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByLabelText(/pot size/i)).toBeInTheDocument();
                expect(_react1.screen.getByLabelText(/soil type/i)).toBeInTheDocument();
            });
        });
        it('hides conditional fields when switching care types', async ()=>{
            const user = _userevent.default.setup();
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_QuickCareForm.default, {
                ...defaultProps,
                defaultCareType: "fertilizer"
            }));
            // Initially shows fertilizer field
            expect(_react1.screen.getByLabelText(/fertilizer type/i)).toBeInTheDocument();
            // Switch to water
            const waterButton = _react1.screen.getByRole('button', {
                name: /water/i
            });
            await user.click(waterButton);
            // Fertilizer field should be hidden
            expect(_react1.screen.queryByLabelText(/fertilizer type/i)).not.toBeInTheDocument();
        });
        it('shows care type description', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_QuickCareForm.default, {
                ...defaultProps,
                defaultCareType: "fertilizer"
            }));
            const description = _react1.screen.getByText(/🌱 fertilizer:/i);
            expect(description).toBeInTheDocument();
        });
    });
    describe('Date Validation', ()=>{
        it('prevents selecting future dates', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_QuickCareForm.default, {
                ...defaultProps
            }));
            const dateInput = _react1.screen.getByLabelText(/care date/i);
            const today = new Date().toISOString().split('T')[0];
            expect(dateInput).toHaveAttribute('max', today);
        });
        it('allows selecting past dates', async ()=>{
            const user = _userevent.default.setup();
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_QuickCareForm.default, {
                ...defaultProps
            }));
            const dateInput = _react1.screen.getByLabelText(/care date/i);
            const yesterday = new Date();
            yesterday.setDate(yesterday.getDate() - 1);
            const yesterdayString = yesterday.toISOString().split('T')[0];
            await user.clear(dateInput);
            await user.type(dateInput, yesterdayString);
            expect(dateInput).toHaveValue(yesterdayString);
        });
    });
    describe('Form Submission', ()=>{
        it('submits form with correct data', async ()=>{
            const user = _userevent.default.setup();
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_QuickCareForm.default, {
                ...defaultProps
            }));
            // Fill form
            await user.type(_react1.screen.getByLabelText(/notes/i), 'Plant looks healthy');
            // Submit
            await user.click(_react1.screen.getByRole('button', {
                name: /log care/i
            }));
            await (0, _react1.waitFor)(()=>{
                expect(global.fetch).toHaveBeenCalledWith('/api/care/log', expect.objectContaining({
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: expect.stringContaining('fertilizer')
                }));
            });
            expect(defaultProps.onSuccess).toHaveBeenCalled();
        });
        it('includes conditional field data in submission', async ()=>{
            const user = _userevent.default.setup();
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_QuickCareForm.default, {
                ...defaultProps,
                defaultCareType: "fertilizer"
            }));
            await user.type(_react1.screen.getByLabelText(/fertilizer type/i), 'Liquid fertilizer');
            await user.click(_react1.screen.getByRole('button', {
                name: /log care/i
            }));
            await (0, _react1.waitFor)(()=>{
                const fetchCall = global.fetch.mock.calls[0];
                const requestBody = JSON.parse(fetchCall[1].body);
                expect(requestBody.fertilizerType).toBe('Liquid fertilizer');
            });
        });
        it('includes repot-specific data in submission', async ()=>{
            const user = _userevent.default.setup();
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_QuickCareForm.default, {
                ...defaultProps
            }));
            // Select repot care type
            await user.click(_react1.screen.getByRole('button', {
                name: /repot/i
            }));
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByLabelText(/pot size/i)).toBeInTheDocument();
            });
            await user.type(_react1.screen.getByLabelText(/pot size/i), '6 inch');
            await user.type(_react1.screen.getByLabelText(/soil type/i), 'Potting mix');
            await user.click(_react1.screen.getByRole('button', {
                name: /log care/i
            }));
            await (0, _react1.waitFor)(()=>{
                const fetchCall = global.fetch.mock.calls[0];
                const requestBody = JSON.parse(fetchCall[1].body);
                expect(requestBody.potSize).toBe('6 inch');
                expect(requestBody.soilType).toBe('Potting mix');
            });
        });
        it('resets form after successful submission', async ()=>{
            const user = _userevent.default.setup();
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_QuickCareForm.default, {
                ...defaultProps
            }));
            // Fill form
            await user.type(_react1.screen.getByLabelText(/notes/i), 'Test notes');
            // Submit
            await user.click(_react1.screen.getByRole('button', {
                name: /log care/i
            }));
            await (0, _react1.waitFor)(()=>{
                expect(defaultProps.onSuccess).toHaveBeenCalled();
            });
            // Form should be reset
            expect(_react1.screen.getByLabelText(/notes/i)).toHaveValue('');
        });
        it('shows loading state during submission', async ()=>{
            const user = _userevent.default.setup();
            // Mock delayed response
            global.fetch = jest.fn(()=>new Promise((resolve)=>setTimeout(()=>resolve({
                            ok: true,
                            json: ()=>Promise.resolve({
                                    success: true
                                })
                        }), 100)));
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_QuickCareForm.default, {
                ...defaultProps
            }));
            const submitButton = _react1.screen.getByRole('button', {
                name: /log care/i
            });
            await user.click(submitButton);
            // Check loading state
            expect(submitButton).toBeDisabled();
            expect(_react1.screen.getByText(/logging/i)).toBeInTheDocument();
        });
    });
    describe('Offline Mode', ()=>{
        beforeEach(()=>{
            // Mock offline state
            jest.mocked(require('@/hooks/useOffline').useOffline).mockReturnValue({
                isOnline: false,
                addPendingCareEntry: mockAddPendingCareEntry
            });
        });
        it('shows offline mode indicator', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_QuickCareForm.default, {
                ...defaultProps
            }));
            expect(_react1.screen.getByText(/offline mode/i)).toBeInTheDocument();
            expect(_react1.screen.getByText(/care will be logged when you're back online/i)).toBeInTheDocument();
        });
        it('changes submit button text in offline mode', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_QuickCareForm.default, {
                ...defaultProps
            }));
            expect(_react1.screen.getByRole('button', {
                name: /queue for sync/i
            })).toBeInTheDocument();
        });
        it('queues care entry when offline', async ()=>{
            const user = _userevent.default.setup();
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_QuickCareForm.default, {
                ...defaultProps
            }));
            await user.type(_react1.screen.getByLabelText(/notes/i), 'Offline care entry');
            await user.click(_react1.screen.getByRole('button', {
                name: /queue for sync/i
            }));
            expect(mockAddPendingCareEntry).toHaveBeenCalledWith({
                plantInstanceId: 1,
                careType: 'fertilizer',
                notes: 'Offline care entry'
            });
            expect(mockRegisterBackgroundSync).toHaveBeenCalled();
            expect(defaultProps.onSuccess).toHaveBeenCalled();
        });
        it('does not make API call when offline', async ()=>{
            const user = _userevent.default.setup();
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_QuickCareForm.default, {
                ...defaultProps
            }));
            await user.click(_react1.screen.getByRole('button', {
                name: /queue for sync/i
            }));
            expect(global.fetch).not.toHaveBeenCalled();
        });
    });
    describe('Error Handling', ()=>{
        it('displays API error messages', async ()=>{
            const user = _userevent.default.setup();
            (0, _renderhelpers.mockApiError)('/api/care/log', 400, {
                error: 'Invalid care data'
            });
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_QuickCareForm.default, {
                ...defaultProps
            }));
            await user.click(_react1.screen.getByRole('button', {
                name: /log care/i
            }));
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText('Invalid care data')).toBeInTheDocument();
            });
            expect(defaultProps.onSuccess).not.toHaveBeenCalled();
        });
        it('handles network errors gracefully', async ()=>{
            const user = _userevent.default.setup();
            // Mock network error
            global.fetch = jest.fn(()=>Promise.reject(new Error('Network error')));
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_QuickCareForm.default, {
                ...defaultProps
            }));
            await user.click(_react1.screen.getByRole('button', {
                name: /log care/i
            }));
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText(/failed to log care/i)).toBeInTheDocument();
            });
        });
        it('clears errors on retry', async ()=>{
            const user = _userevent.default.setup();
            (0, _renderhelpers.mockApiError)('/api/care/log', 400, {
                error: 'Invalid care data'
            });
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_QuickCareForm.default, {
                ...defaultProps
            }));
            // First submission with error
            await user.click(_react1.screen.getByRole('button', {
                name: /log care/i
            }));
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText('Invalid care data')).toBeInTheDocument();
            });
            // Mock successful response for retry
            (0, _renderhelpers.mockApiResponses)({
                '/api/care/log': {
                    success: true
                }
            });
            // Retry submission
            await user.click(_react1.screen.getByRole('button', {
                name: /log care/i
            }));
            // Error should be cleared
            expect(_react1.screen.queryByText('Invalid care data')).not.toBeInTheDocument();
        });
    });
    describe('Plant Selection (when no plantInstanceId provided)', ()=>{
        it('shows plant selection dropdown when plantInstanceId not provided', ()=>{
            const propsWithoutPlant = {
                ...defaultProps
            };
            delete propsWithoutPlant.plantInstanceId;
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_QuickCareForm.default, {
                ...propsWithoutPlant
            }));
            expect(_react1.screen.getByLabelText(/plant/i)).toBeInTheDocument();
            expect(_react1.screen.getByText(/select a plant/i)).toBeInTheDocument();
        });
        it('disables submit button when no plant selected', ()=>{
            const propsWithoutPlant = {
                ...defaultProps
            };
            delete propsWithoutPlant.plantInstanceId;
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_QuickCareForm.default, {
                ...propsWithoutPlant
            }));
            const submitButton = _react1.screen.getByRole('button', {
                name: /log care/i
            });
            expect(submitButton).toBeDisabled();
        });
        it('shows implementation note for plant selection', ()=>{
            const propsWithoutPlant = {
                ...defaultProps
            };
            delete propsWithoutPlant.plantInstanceId;
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_QuickCareForm.default, {
                ...propsWithoutPlant
            }));
            expect(_react1.screen.getByText(/plant selection will be implemented when plant instances are available/i)).toBeInTheDocument();
        });
    });
    describe('Cancel Functionality', ()=>{
        it('shows cancel button when onCancel provided', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_QuickCareForm.default, {
                ...defaultProps
            }));
            expect(_react1.screen.getByRole('button', {
                name: /cancel/i
            })).toBeInTheDocument();
        });
        it('calls onCancel when cancel button clicked', async ()=>{
            const user = _userevent.default.setup();
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_QuickCareForm.default, {
                ...defaultProps
            }));
            await user.click(_react1.screen.getByRole('button', {
                name: /cancel/i
            }));
            expect(defaultProps.onCancel).toHaveBeenCalled();
        });
        it('does not show cancel button when onCancel not provided', ()=>{
            const propsWithoutCancel = {
                ...defaultProps
            };
            delete propsWithoutCancel.onCancel;
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_QuickCareForm.default, {
                ...propsWithoutCancel
            }));
            expect(_react1.screen.queryByRole('button', {
                name: /cancel/i
            })).not.toBeInTheDocument();
        });
    });
    describe('Accessibility', ()=>{
        it('has proper form structure', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_QuickCareForm.default, {
                ...defaultProps
            }));
            expect(_react1.screen.getByRole('form', {
                hidden: true
            })).toBeInTheDocument();
        });
        it('has proper labels for all inputs', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_QuickCareForm.default, {
                ...defaultProps
            }));
            expect(_react1.screen.getByLabelText(/care type/i)).toBeInTheDocument();
            expect(_react1.screen.getByLabelText(/care date/i)).toBeInTheDocument();
            expect(_react1.screen.getByLabelText(/notes/i)).toBeInTheDocument();
        });
        it('has required attribute on date field', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_QuickCareForm.default, {
                ...defaultProps
            }));
            const dateInput = _react1.screen.getByLabelText(/care date/i);
            expect(dateInput).toHaveAttribute('required');
        });
        it('disables form elements during submission', async ()=>{
            const user = _userevent.default.setup();
            // Mock delayed response
            global.fetch = jest.fn(()=>new Promise((resolve)=>setTimeout(()=>resolve({
                            ok: true,
                            json: ()=>Promise.resolve({
                                    success: true
                                })
                        }), 100)));
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_QuickCareForm.default, {
                ...defaultProps
            }));
            const submitButton = _react1.screen.getByRole('button', {
                name: /log care/i
            });
            await user.click(submitButton);
            // All care type buttons should be disabled
            const careTypeButtons = _react1.screen.getAllByRole('button').filter((btn)=>btn.textContent?.includes('Fertilizer') || btn.textContent?.includes('Water') || btn.textContent?.includes('Repot'));
            careTypeButtons.forEach((button)=>{
                expect(button).toBeDisabled();
            });
            // Date input should be disabled
            expect(_react1.screen.getByLabelText(/care date/i)).toBeDisabled();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,