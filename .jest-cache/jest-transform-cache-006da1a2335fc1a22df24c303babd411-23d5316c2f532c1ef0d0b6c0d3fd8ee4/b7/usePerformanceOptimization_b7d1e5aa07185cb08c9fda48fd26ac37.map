{"version":3,"names":["cov_ucn07efxw","actualCoverage","s","useBundleOptimization","f","useDebouncedSearch","useImageLazyLoading","useMemoryMonitoring","usePerformanceOptimization","useRenderOptimization","useVirtualScrolling","renderCountRef","_react","useRef","performanceMetrics","setPerformanceMetrics","useState","renderCount","averageRenderTime","lastRenderTime","useEffect","startTime","performance","now","current","endTime","renderTime","prev","newRenderCount","newAverageRenderTime","optimizedStateUpdate","useCallback","updateFn","_performance","reactOptimization","debouncedStateUpdate","delay","b","memoizeCalculation","fn","keyFn","memoizeExpensiveCalculation","items","itemHeight","containerHeight","overscan","scrollTop","setScrollTop","scrollHandlerRef","visibleRange","useMemo","startIndex","Math","max","floor","endIndex","min","length","ceil","visibleCount","scrollHandler","newScrollTop","visibleItems","slice","totalHeight","offsetY","loadedImages","setLoadedImages","Set","observerRef","IntersectionObserver","entries","forEach","entry","isIntersecting","img","target","src","dataset","unobserve","rootMargin","threshold","disconnect","observeImage","element","observe","isImageLoaded","has","searchFn","query","setQuery","results","setResults","isLoading","setIsLoading","error","setError","timeoutRef","abortControllerRef","trim","clearTimeout","abort","setTimeout","AbortController","searchResults","err","Error","name","message","enabled","process","env","NODE_ENV","memoryUsage","setMemoryUsage","updateMemoryUsage","memory","performanceMonitoring","monitorMemoryUsage","interval","setInterval","clearInterval","bundleMetrics","setBundleMetrics","window","navigation","getEntriesByType","totalSize","transferSize","gzippedSize","encodedBodySize","loadTime","loadEventEnd","loadEventStart","componentName","renderTimeRef","setAverageRenderTime","push","average","reduce","sum","time","console","warn","toFixed"],"sources":["/Users/stefanbekker/projects/fancy-planties/src/hooks/usePerformanceOptimization.ts"],"sourcesContent":["'use client';\n\nimport { useCallback, useMemo, useRef, useEffect, useState } from 'react';\nimport { reactOptimization, performanceMonitoring } from '@/lib/utils/performance';\n\n/**\n * Hook for optimizing component performance with memoization and debouncing\n */\nexport function usePerformanceOptimization() {\n  const renderCountRef = useRef(0);\n  const [performanceMetrics, setPerformanceMetrics] = useState({\n    renderCount: 0,\n    averageRenderTime: 0,\n    lastRenderTime: 0,\n  });\n\n  // Track render performance\n  useEffect(() => {\n    const startTime = performance.now();\n    renderCountRef.current += 1;\n    \n    return () => {\n      const endTime = performance.now();\n      const renderTime = endTime - startTime;\n      \n      setPerformanceMetrics(prev => {\n        const newRenderCount = renderCountRef.current;\n        const newAverageRenderTime = \n          (prev.averageRenderTime * (newRenderCount - 1) + renderTime) / newRenderCount;\n        \n        return {\n          renderCount: newRenderCount,\n          averageRenderTime: newAverageRenderTime,\n          lastRenderTime: renderTime,\n        };\n      });\n    };\n  });\n\n  // Optimized state update function\n  const optimizedStateUpdate = useCallback((updateFn: () => void) => {\n    reactOptimization.optimizedStateUpdate(updateFn);\n  }, []);\n\n  // Debounced state update function\n  const debouncedStateUpdate = useCallback((updateFn: () => void, delay: number = 300) => {\n    return reactOptimization.debouncedStateUpdate(updateFn, delay);\n  }, []);\n\n  // Memoized expensive calculation helper\n  const memoizeCalculation = useCallback(<T, R>(\n    fn: (input: T) => R,\n    keyFn?: (input: T) => string\n  ) => {\n    return reactOptimization.memoizeExpensiveCalculation(fn, keyFn);\n  }, []);\n\n  return {\n    performanceMetrics,\n    optimizedStateUpdate,\n    debouncedStateUpdate,\n    memoizeCalculation,\n  };\n}\n\n/**\n * Hook for virtual scrolling optimization\n */\nexport function useVirtualScrolling<T>(\n  items: T[],\n  itemHeight: number,\n  containerHeight: number,\n  overscan: number = 5\n) {\n  const [scrollTop, setScrollTop] = useState(0);\n  const scrollHandlerRef = useRef<((scrollTop: number) => void) | null>(null);\n\n  // Calculate visible items\n  const visibleRange = useMemo(() => {\n    const startIndex = Math.max(0, Math.floor(scrollTop / itemHeight) - overscan);\n    const endIndex = Math.min(\n      items.length - 1,\n      Math.ceil((scrollTop + containerHeight) / itemHeight) + overscan\n    );\n    \n    return { startIndex, endIndex, visibleCount: endIndex - startIndex + 1 };\n  }, [scrollTop, itemHeight, containerHeight, items.length, overscan]);\n\n  // Create debounced scroll handler\n  const scrollHandler = useMemo(() => {\n    if (!scrollHandlerRef.current) {\n      scrollHandlerRef.current = (newScrollTop: number) => {\n        setScrollTop(newScrollTop);\n      };\n    }\n    return scrollHandlerRef.current;\n  }, []);\n\n  // Get visible items\n  const visibleItems = useMemo(() => {\n    return items.slice(visibleRange.startIndex, visibleRange.endIndex + 1);\n  }, [items, visibleRange.startIndex, visibleRange.endIndex]);\n\n  return {\n    visibleItems,\n    visibleRange,\n    scrollHandler,\n    totalHeight: items.length * itemHeight,\n    offsetY: visibleRange.startIndex * itemHeight,\n  };\n}\n\n/**\n * Hook for image lazy loading optimization\n */\nexport function useImageLazyLoading() {\n  const [loadedImages, setLoadedImages] = useState<Set<string>>(new Set());\n  const observerRef = useRef<IntersectionObserver | null>(null);\n\n  // Create intersection observer for lazy loading\n  useEffect(() => {\n    observerRef.current = new IntersectionObserver(\n      (entries) => {\n        entries.forEach((entry) => {\n          if (entry.isIntersecting) {\n            const img = entry.target as HTMLImageElement;\n            const src = img.dataset.src;\n            if (src) {\n              setLoadedImages(prev => new Set([...prev, src]));\n              observerRef.current?.unobserve(img);\n            }\n          }\n        });\n      },\n      {\n        rootMargin: '50px',\n        threshold: 0.1,\n      }\n    );\n\n    return () => {\n      observerRef.current?.disconnect();\n    };\n  }, []);\n\n  const observeImage = useCallback((element: HTMLImageElement | null) => {\n    if (element && observerRef.current) {\n      observerRef.current.observe(element);\n    }\n  }, []);\n\n  const isImageLoaded = useCallback((src: string) => {\n    return loadedImages.has(src);\n  }, [loadedImages]);\n\n  return {\n    observeImage,\n    isImageLoaded,\n    loadedImages,\n  };\n}\n\n/**\n * Hook for debounced search optimization\n */\nexport function useDebouncedSearch(\n  searchFn: (query: string) => Promise<any>,\n  delay: number = 300\n) {\n  const [query, setQuery] = useState('');\n  const [results, setResults] = useState<any[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const timeoutRef = useRef<NodeJS.Timeout | null>(null);\n  const abortControllerRef = useRef<AbortController | null>(null);\n\n  // Debounced search effect\n  useEffect(() => {\n    if (!query.trim()) {\n      setResults([]);\n      setIsLoading(false);\n      return;\n    }\n\n    // Clear previous timeout\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n\n    // Abort previous request\n    if (abortControllerRef.current) {\n      abortControllerRef.current.abort();\n    }\n\n    setIsLoading(true);\n    setError(null);\n\n    timeoutRef.current = setTimeout(async () => {\n      try {\n        abortControllerRef.current = new AbortController();\n        const searchResults = await searchFn(query);\n        setResults(searchResults);\n        setIsLoading(false);\n      } catch (err) {\n        if (err instanceof Error && err.name !== 'AbortError') {\n          setError(err.message);\n          setIsLoading(false);\n        }\n      }\n    }, delay);\n\n    return () => {\n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef.current);\n      }\n      if (abortControllerRef.current) {\n        abortControllerRef.current.abort();\n      }\n    };\n  }, [query, searchFn, delay]);\n\n  return {\n    query,\n    setQuery,\n    results,\n    isLoading,\n    error,\n  };\n}\n\n/**\n * Hook for memory usage monitoring\n */\nexport function useMemoryMonitoring(enabled: boolean = process.env.NODE_ENV === 'development') {\n  const [memoryUsage, setMemoryUsage] = useState<{\n    usedJSHeapSize: number;\n    totalJSHeapSize: number;\n    jsHeapSizeLimit: number;\n  } | null>(null);\n\n  useEffect(() => {\n    if (!enabled) return;\n\n    const updateMemoryUsage = () => {\n      const memory = performanceMonitoring.monitorMemoryUsage();\n      if (memory) {\n        setMemoryUsage(memory);\n      }\n    };\n\n    // Update immediately\n    updateMemoryUsage();\n\n    // Update every 5 seconds\n    const interval = setInterval(updateMemoryUsage, 5000);\n\n    return () => clearInterval(interval);\n  }, [enabled]);\n\n  return memoryUsage;\n}\n\n/**\n * Hook for bundle size optimization\n */\nexport function useBundleOptimization() {\n  const [bundleMetrics, setBundleMetrics] = useState<{\n    totalSize: number;\n    gzippedSize: number;\n    loadTime: number;\n  } | null>(null);\n\n  useEffect(() => {\n    if (typeof window !== 'undefined' && 'performance' in window) {\n      const navigation = performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming;\n      \n      if (navigation) {\n        setBundleMetrics({\n          totalSize: navigation.transferSize || 0,\n          gzippedSize: navigation.encodedBodySize || 0,\n          loadTime: navigation.loadEventEnd - navigation.loadEventStart,\n        });\n      }\n    }\n  }, []);\n\n  return bundleMetrics;\n}\n\n/**\n * Hook for component render optimization\n */\nexport function useRenderOptimization(componentName: string) {\n  const renderTimeRef = useRef<number[]>([]);\n  const [averageRenderTime, setAverageRenderTime] = useState(0);\n\n  useEffect(() => {\n    const startTime = performance.now();\n    \n    return () => {\n      const endTime = performance.now();\n      const renderTime = endTime - startTime;\n      \n      renderTimeRef.current.push(renderTime);\n      \n      // Keep only last 10 render times\n      if (renderTimeRef.current.length > 10) {\n        renderTimeRef.current = renderTimeRef.current.slice(-10);\n      }\n      \n      // Calculate average\n      const average = renderTimeRef.current.reduce((sum, time) => sum + time, 0) / renderTimeRef.current.length;\n      setAverageRenderTime(average);\n      \n      // Log slow renders in development\n      if (process.env.NODE_ENV === 'development' && renderTime > 16) {\n        console.warn(`Slow render detected in ${componentName}: ${renderTime.toFixed(2)}ms`);\n      }\n    };\n  });\n\n  return {\n    averageRenderTime,\n    renderCount: renderTimeRef.current.length,\n  };\n}"],"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","ignoreList":[]}