{"version":3,"names":["withEmailVerificationRateLimit","cov_2p8r0y8w0l","f","s","withResendRateLimit","withSecurityMonitoring","withVerificationRateLimit","getClientIdentifier","request","forwardedFor","headers","get","realIp","remoteAddr","b","split","trim","handler","options","identifier","email","requireEmail","checkResendRequests","body","json","toLowerCase","_server","NextResponse","error","status","newRequest","NextRequest","url","method","JSON","stringify","_parsedBody","checkOverallActivity","activityResult","_emailverificationratelimiter","emailVerificationRateLimiter","checkEmailVerificationActivity","allowed","retryAfter","resetTime","remaining","toString","checkVerificationAttempts","verificationResult","resendResult","errorMessage","cooldownRemaining","cooldownSeconds","isSuspicious","detectSuspiciousActivity","console","warn","response","recordResendSuccess"],"sources":["/Users/stefanbekker/projects/fancy-planties/src/lib/auth/email-verification-middleware.ts"],"sourcesContent":["import 'server-only';\nimport { NextRequest, NextResponse } from 'next/server';\nimport { emailVerificationRateLimiter } from '@/lib/services/email-verification-rate-limiter';\n\n/**\n * Get client identifier for rate limiting\n */\nfunction getClientIdentifier(request: NextRequest): string {\n  // Try to get real IP address\n  const forwardedFor = request.headers.get('x-forwarded-for');\n  const realIp = request.headers.get('x-real-ip');\n  const remoteAddr = request.headers.get('x-remote-addr');\n  \n  if (forwardedFor) {\n    // x-forwarded-for can contain multiple IPs, take the first one\n    return forwardedFor.split(',')[0].trim();\n  }\n  \n  if (realIp) {\n    return realIp;\n  }\n  \n  if (remoteAddr) {\n    return remoteAddr;\n  }\n  \n  // Fallback identifier\n  return 'unknown';\n}\n\n/**\n * Enhanced rate limiting middleware for email verification endpoints\n */\nexport async function withEmailVerificationRateLimit(\n  request: NextRequest,\n  handler: (request: NextRequest) => Promise<NextResponse>,\n  options: {\n    checkVerificationAttempts?: boolean;\n    checkResendRequests?: boolean;\n    checkOverallActivity?: boolean;\n    requireEmail?: boolean;\n  } = {}\n): Promise<NextResponse> {\n  try {\n    const identifier = getClientIdentifier(request);\n    let email: string | undefined;\n    \n    // Extract email from request body if needed\n    if (options.requireEmail || options.checkResendRequests) {\n      try {\n        const body = await request.json();\n        email = body.email?.toLowerCase();\n        \n        if (options.requireEmail && !email) {\n          return NextResponse.json(\n            { error: 'Email is required' },\n            { status: 400 }\n          );\n        }\n        \n        // Create a new request with the parsed body for the handler\n        const newRequest = new NextRequest(request.url, {\n          method: request.method,\n          headers: request.headers,\n          body: JSON.stringify(body),\n        });\n        \n        // Copy the parsed body to the new request for the handler to use\n        (newRequest as any)._parsedBody = body;\n        request = newRequest;\n      } catch (error) {\n        return NextResponse.json(\n          { error: 'Invalid JSON in request body' },\n          { status: 400 }\n        );\n      }\n    }\n    \n    // Check overall email verification activity first\n    if (options.checkOverallActivity !== false) {\n      const activityResult = emailVerificationRateLimiter.checkEmailVerificationActivity(identifier, email);\n      \n      if (!activityResult.allowed) {\n        return NextResponse.json(\n          {\n            error: 'Too many email verification requests. Please try again later.',\n            retryAfter: activityResult.retryAfter,\n            resetTime: activityResult.resetTime,\n          },\n          {\n            status: 429,\n            headers: {\n              'X-RateLimit-Limit': '20',\n              'X-RateLimit-Remaining': activityResult.remaining.toString(),\n              'X-RateLimit-Reset': activityResult.resetTime.toString(),\n              'Retry-After': activityResult.retryAfter?.toString() || '3600',\n            },\n          }\n        );\n      }\n    }\n    \n    // Check verification attempts rate limit\n    if (options.checkVerificationAttempts) {\n      const verificationResult = emailVerificationRateLimiter.checkVerificationAttempts(identifier, email);\n      \n      if (!verificationResult.allowed) {\n        return NextResponse.json(\n          {\n            error: 'Too many verification attempts. Please try again later.',\n            retryAfter: verificationResult.retryAfter,\n            resetTime: verificationResult.resetTime,\n          },\n          {\n            status: 429,\n            headers: {\n              'X-RateLimit-Limit': '10',\n              'X-RateLimit-Remaining': verificationResult.remaining.toString(),\n              'X-RateLimit-Reset': verificationResult.resetTime.toString(),\n              'Retry-After': verificationResult.retryAfter?.toString() || '3600',\n            },\n          }\n        );\n      }\n    }\n    \n    // Check resend requests rate limit\n    if (options.checkResendRequests && email) {\n      const resendResult = emailVerificationRateLimiter.checkResendRequests(email, identifier);\n      \n      if (!resendResult.allowed) {\n        const errorMessage = resendResult.cooldownRemaining\n          ? `Please wait ${resendResult.cooldownRemaining} seconds before requesting another verification code.`\n          : 'Too many resend requests. Please try again later.';\n        \n        return NextResponse.json(\n          {\n            error: errorMessage,\n            retryAfter: resendResult.retryAfter,\n            resetTime: resendResult.resetTime,\n            cooldownSeconds: resendResult.cooldownRemaining,\n          },\n          {\n            status: 429,\n            headers: {\n              'X-RateLimit-Limit': '5',\n              'X-RateLimit-Remaining': resendResult.remaining.toString(),\n              'X-RateLimit-Reset': resendResult.resetTime.toString(),\n              'Retry-After': resendResult.retryAfter?.toString() || '60',\n            },\n          }\n        );\n      }\n    }\n    \n    // Check for suspicious activity\n    const isSuspicious = emailVerificationRateLimiter.detectSuspiciousActivity(identifier, email);\n    if (isSuspicious) {\n      // For now, just log it. In production, you might want to add additional restrictions\n      console.warn(`Suspicious email verification activity detected from ${identifier}`, { email });\n    }\n    \n    // Call the handler\n    const response = await handler(request);\n    \n    // Record successful resend if applicable\n    if (options.checkResendRequests && email && response.status === 200) {\n      emailVerificationRateLimiter.recordResendSuccess(email);\n    }\n    \n    return response;\n    \n  } catch (error) {\n    console.error('Email verification rate limit middleware error:', error);\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    );\n  }\n}\n\n/**\n * Middleware specifically for verification attempts\n */\nexport async function withVerificationRateLimit(\n  request: NextRequest,\n  handler: (request: NextRequest) => Promise<NextResponse>\n): Promise<NextResponse> {\n  return withEmailVerificationRateLimit(request, handler, {\n    checkVerificationAttempts: true,\n    checkOverallActivity: true,\n    requireEmail: true,\n  });\n}\n\n/**\n * Middleware specifically for resend requests\n */\nexport async function withResendRateLimit(\n  request: NextRequest,\n  handler: (request: NextRequest) => Promise<NextResponse>\n): Promise<NextResponse> {\n  return withEmailVerificationRateLimit(request, handler, {\n    checkResendRequests: true,\n    checkOverallActivity: true,\n    requireEmail: true,\n  });\n}\n\n/**\n * Security monitoring endpoint middleware\n */\nexport async function withSecurityMonitoring(\n  request: NextRequest,\n  handler: (request: NextRequest) => Promise<NextResponse>\n): Promise<NextResponse> {\n  try {\n    const identifier = getClientIdentifier(request);\n    \n    // Basic rate limiting for monitoring endpoints\n    const activityResult = emailVerificationRateLimiter.checkEmailVerificationActivity(identifier);\n    \n    if (!activityResult.allowed) {\n      return NextResponse.json(\n        { error: 'Too many requests' },\n        { status: 429 }\n      );\n    }\n    \n    return await handler(request);\n    \n  } catch (error) {\n    console.error('Security monitoring middleware error:', error);\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    );\n  }\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}