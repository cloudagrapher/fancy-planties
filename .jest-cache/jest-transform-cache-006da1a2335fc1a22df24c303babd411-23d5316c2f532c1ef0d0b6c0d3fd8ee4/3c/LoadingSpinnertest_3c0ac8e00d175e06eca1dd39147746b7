a498ba66d5c6bcffc8c0a57664ca6488
/**
 * @jest-environment jsdom
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _renderhelpers = require("../../../test-utils/helpers/render-helpers.js");
const _LoadingSpinner = /*#__PURE__*/ _interop_require_wildcard(require("../../../components/shared/LoadingSpinner"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
describe('LoadingSpinner', ()=>{
    const defaultLoadingState = {
        isLoading: true,
        operation: 'Loading data'
    };
    describe('Basic Rendering', ()=>{
        it('renders loading spinner when isLoading is true', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LoadingSpinner.default, {
                loading: defaultLoadingState
            }));
            expect(_react1.screen.getByRole('status')).toBeInTheDocument();
            expect(_react1.screen.getByLabelText('Loading data')).toBeInTheDocument();
        });
        it('does not render when isLoading is false', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LoadingSpinner.default, {
                loading: {
                    isLoading: false
                }
            }));
            expect(_react1.screen.queryByRole('status')).not.toBeInTheDocument();
        });
        it('renders without operation text', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LoadingSpinner.default, {
                loading: {
                    isLoading: true
                }
            }));
            expect(_react1.screen.getByRole('status')).toBeInTheDocument();
            expect(_react1.screen.getByLabelText('Loading')).toBeInTheDocument();
        });
        it('renders with custom operation text', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LoadingSpinner.default, {
                loading: {
                    isLoading: true,
                    operation: 'Saving plant data'
                }
            }));
            expect(_react1.screen.getAllByText('Saving plant data')[0]).toBeInTheDocument();
            expect(_react1.screen.getByLabelText('Saving plant data')).toBeInTheDocument();
        });
    });
    describe('Size Variants', ()=>{
        it('renders small size spinner', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LoadingSpinner.default, {
                loading: defaultLoadingState,
                size: "sm"
            }));
            const spinner = _react1.screen.getByRole('status');
            expect(spinner).toHaveClass('h-4', 'w-4');
            const container = spinner.closest('div').parentElement;
            expect(container).toHaveClass('p-2');
        });
        it('renders medium size spinner (default)', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LoadingSpinner.default, {
                loading: defaultLoadingState,
                size: "md"
            }));
            const spinner = _react1.screen.getByRole('status');
            expect(spinner).toHaveClass('h-6', 'w-6');
            const container = spinner.closest('div').parentElement;
            expect(container).toHaveClass('p-4');
        });
        it('renders large size spinner', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LoadingSpinner.default, {
                loading: defaultLoadingState,
                size: "lg"
            }));
            const spinner = _react1.screen.getByRole('status');
            expect(spinner).toHaveClass('h-8', 'w-8');
            const container = spinner.closest('div').parentElement;
            expect(container).toHaveClass('p-6');
        });
        it('defaults to medium size when no size specified', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LoadingSpinner.default, {
                loading: defaultLoadingState
            }));
            const spinner = _react1.screen.getByRole('status');
            expect(spinner).toHaveClass('h-6', 'w-6');
        });
    });
    describe('Progress Display', ()=>{
        it('shows progress percentage when showProgress is true and progress is provided', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LoadingSpinner.default, {
                loading: {
                    isLoading: true,
                    operation: 'Uploading',
                    progress: 65
                },
                showProgress: true
            }));
            expect(_react1.screen.getByText('65%')).toBeInTheDocument();
        });
        it('shows progress bar when showProgress is true and progress is provided', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LoadingSpinner.default, {
                loading: {
                    isLoading: true,
                    operation: 'Processing',
                    progress: 40
                },
                showProgress: true
            }));
            const progressBar = document.querySelector('.bg-primary-600');
            expect(progressBar).toBeInTheDocument();
            expect(progressBar).toHaveStyle('width: 40%');
        });
        it('does not show progress when showProgress is false', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LoadingSpinner.default, {
                loading: {
                    isLoading: true,
                    operation: 'Loading',
                    progress: 50
                },
                showProgress: false
            }));
            expect(_react1.screen.queryByText('50%')).not.toBeInTheDocument();
        });
        it('does not show progress when progress is undefined', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LoadingSpinner.default, {
                loading: {
                    isLoading: true,
                    operation: 'Loading'
                },
                showProgress: true
            }));
            expect(_react1.screen.queryByText('%')).not.toBeInTheDocument();
        });
        it('rounds progress percentage to nearest integer', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LoadingSpinner.default, {
                loading: {
                    isLoading: true,
                    progress: 67.8
                },
                showProgress: true
            }));
            expect(_react1.screen.getByText('68%')).toBeInTheDocument();
        });
        it('handles 0% progress correctly', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LoadingSpinner.default, {
                loading: {
                    isLoading: true,
                    progress: 0
                },
                showProgress: true
            }));
            expect(_react1.screen.getByText('0%')).toBeInTheDocument();
            const progressBar = document.querySelector('.bg-primary-600');
            expect(progressBar).toHaveStyle('width: 0%');
        });
        it('handles 100% progress correctly', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LoadingSpinner.default, {
                loading: {
                    isLoading: true,
                    progress: 100
                },
                showProgress: true
            }));
            expect(_react1.screen.getByText('100%')).toBeInTheDocument();
            const progressBar = document.querySelector('.bg-primary-600');
            expect(progressBar).toHaveStyle('width: 100%');
        });
    });
    describe('Custom Styling', ()=>{
        it('applies custom className', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LoadingSpinner.default, {
                loading: defaultLoadingState,
                className: "custom-spinner-class"
            }));
            const container = _react1.screen.getByRole('status').closest('div');
            expect(container).toHaveClass('custom-spinner-class');
        });
        it('combines custom className with default classes', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LoadingSpinner.default, {
                loading: defaultLoadingState,
                className: "my-custom-class",
                size: "lg"
            }));
            const container = _react1.screen.getByRole('status').closest('div');
            expect(container).toHaveClass('my-custom-class', 'p-6');
        });
    });
    describe('Accessibility', ()=>{
        it('has proper ARIA role and label', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LoadingSpinner.default, {
                loading: {
                    isLoading: true,
                    operation: 'Saving data'
                }
            }));
            const spinner = _react1.screen.getByRole('status');
            expect(spinner).toHaveAttribute('aria-label', 'Saving data');
        });
        it('provides screen reader text', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LoadingSpinner.default, {
                loading: {
                    isLoading: true,
                    operation: 'Loading plants'
                }
            }));
            expect(_react1.screen.getByText('Loading plants', {
                selector: '.sr-only'
            })).toBeInTheDocument();
        });
        it('provides default screen reader text when no operation specified', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LoadingSpinner.default, {
                loading: {
                    isLoading: true
                }
            }));
            expect(_react1.screen.getByText('Loading content, please wait...', {
                selector: '.sr-only'
            })).toBeInTheDocument();
        });
        it('has aria-live region for operation text', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LoadingSpinner.default, {
                loading: {
                    isLoading: true,
                    operation: 'Processing request'
                }
            }));
            const liveRegion = _react1.screen.getAllByText('Processing request')[0];
            expect(liveRegion).toHaveAttribute('aria-live', 'polite');
        });
    });
    describe('Animation', ()=>{
        it('has spinning animation class', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LoadingSpinner.default, {
                loading: defaultLoadingState
            }));
            const spinner = _react1.screen.getByRole('status');
            expect(spinner).toHaveClass('animate-spin');
        });
        it('has smooth progress bar transition', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LoadingSpinner.default, {
                loading: {
                    isLoading: true,
                    progress: 50
                },
                showProgress: true
            }));
            const progressBar = document.querySelector('.bg-primary-600');
            expect(progressBar).toHaveClass('transition-all', 'duration-300');
        });
    });
});
describe('InlineLoadingSpinner', ()=>{
    describe('Basic Rendering', ()=>{
        it('renders inline spinner', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LoadingSpinner.InlineLoadingSpinner, {}));
            const spinner = _react1.screen.getByRole('status', {
                hidden: true
            });
            expect(spinner).toBeInTheDocument();
            expect(spinner).toHaveAttribute('aria-hidden', 'true');
        });
        it('renders with default small size', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LoadingSpinner.InlineLoadingSpinner, {}));
            const spinner = _react1.screen.getByRole('status', {
                hidden: true
            });
            expect(spinner).toHaveClass('h-4', 'w-4');
        });
        it('renders with medium size', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LoadingSpinner.InlineLoadingSpinner, {
                size: "md"
            }));
            const spinner = _react1.screen.getByRole('status', {
                hidden: true
            });
            expect(spinner).toHaveClass('h-5', 'w-5');
        });
        it('renders with large size', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LoadingSpinner.InlineLoadingSpinner, {
                size: "lg"
            }));
            const spinner = _react1.screen.getByRole('status', {
                hidden: true
            });
            expect(spinner).toHaveClass('h-6', 'w-6');
        });
        it('applies custom className', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LoadingSpinner.InlineLoadingSpinner, {
                className: "text-red-500"
            }));
            const spinner = _react1.screen.getByRole('status', {
                hidden: true
            });
            expect(spinner).toHaveClass('text-red-500');
        });
    });
    describe('Accessibility', ()=>{
        it('is hidden from screen readers', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LoadingSpinner.InlineLoadingSpinner, {}));
            const spinner = _react1.screen.getByRole('status', {
                hidden: true
            });
            expect(spinner).toHaveAttribute('aria-hidden', 'true');
        });
        it('has proper role', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LoadingSpinner.InlineLoadingSpinner, {}));
            expect(_react1.screen.getByRole('status', {
                hidden: true
            })).toBeInTheDocument();
        });
    });
    describe('Animation', ()=>{
        it('has spinning animation', ()=>{
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LoadingSpinner.InlineLoadingSpinner, {}));
            const spinner = _react1.screen.getByRole('status', {
                hidden: true
            });
            expect(spinner).toHaveClass('animate-spin');
        });
    });
    describe('Usage in Buttons', ()=>{
        it('works correctly inside button component', ()=>{
            const ButtonWithSpinner = ({ loading })=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("button", {
                    disabled: loading,
                    children: [
                        loading && /*#__PURE__*/ (0, _jsxruntime.jsx)(_LoadingSpinner.InlineLoadingSpinner, {
                            className: "mr-2"
                        }),
                        loading ? 'Loading...' : 'Submit'
                    ]
                });
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(ButtonWithSpinner, {
                loading: true
            }));
            expect(_react1.screen.getByRole('button')).toBeDisabled();
            expect(_react1.screen.getByText('Loading...')).toBeInTheDocument();
            expect(_react1.screen.getByRole('status', {
                hidden: true
            })).toHaveClass('mr-2');
        });
        it('does not render when not loading', ()=>{
            const ButtonWithSpinner = ({ loading })=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("button", {
                    disabled: loading,
                    children: [
                        loading && /*#__PURE__*/ (0, _jsxruntime.jsx)(_LoadingSpinner.InlineLoadingSpinner, {}),
                        loading ? 'Loading...' : 'Submit'
                    ]
                });
            (0, _renderhelpers.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(ButtonWithSpinner, {
                loading: false
            }));
            expect(_react1.screen.getByRole('button')).not.toBeDisabled();
            expect(_react1.screen.getByText('Submit')).toBeInTheDocument();
            expect(_react1.screen.queryByRole('status')).not.toBeInTheDocument();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,