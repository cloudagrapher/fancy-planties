{"version":3,"sources":["/Users/stefanbekker/projects/fancy-planties/src/components/plants/PlantInstanceForm.tsx"],"sourcesContent":["'use client';\n\nimport { useState, useEffect } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { useForm, Controller } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport PlantTaxonomySelector from './PlantTaxonomySelector';\nimport ImageUpload from '../shared/ImageUpload';\nimport type { EnhancedPlantInstance } from '@/lib/types/plant-instance-types';\nimport type { PlantSuggestion } from '@/lib/validation/plant-schemas';\n\n// Form validation schemas\nconst plantTaxonomySchema = z.object({\n  family: z.string().min(1, 'Family is required').max(100, 'Family must be less than 100 characters'),\n  genus: z.string().min(1, 'Genus is required').max(100, 'Genus must be less than 100 characters'),\n  species: z.string().min(1, 'Species is required').max(100, 'Species must be less than 100 characters'),\n  cultivar: z.string().max(100, 'Cultivar must be less than 100 characters').optional().transform(val => val?.trim() || ''),\n  commonName: z.string().min(1, 'Common name is required').max(100, 'Common name must be less than 100 characters'),\n});\n\nconst plantInstanceFormSchema = z.object({\n  plantId: z.number().min(1, 'Please select a plant type'),\n  nickname: z.string()\n    .min(1, 'Nickname is required')\n    .max(100, 'Nickname must be less than 100 characters')\n    .trim()\n    .refine(val => val.length > 0, 'Nickname cannot be empty'),\n  location: z.string()\n    .min(1, 'Location is required')\n    .max(100, 'Location must be less than 100 characters')\n    .trim()\n    .refine(val => val.length > 0, 'Location cannot be empty'),\n  fertilizerSchedule: z.enum([\n    'weekly', \n    'biweekly', \n    'every_2_4_weeks',\n    'every_3_4_weeks', \n    'every_4_weeks',\n    'every_4_6_weeks',\n    'every_6_8_weeks',\n    'bimonthly', \n    'quarterly'\n  ], {\n    message: 'Please select a fertilizer schedule'\n  }),\n  lastFertilized: z.string()\n    .optional()\n    .refine(val => !val || !isNaN(Date.parse(val)), 'Invalid date format'),\n  lastRepot: z.string()\n    .optional()\n    .refine(val => !val || !isNaN(Date.parse(val)), 'Invalid date format'),\n  notes: z.string()\n    .max(2000, 'Notes must be less than 2000 characters')\n    .optional()\n    .transform(val => val?.trim() || ''),\n  images: z.array(z.string()).max(10, 'Maximum 10 images allowed').optional(),\n  isActive: z.boolean().default(true).optional(),\n  // New taxonomy fields (only used when creating new plant)\n  newPlantTaxonomy: plantTaxonomySchema.optional(),\n}).refine(data => {\n  // Custom validation: lastFertilized cannot be in the future\n  if (data.lastFertilized) {\n    const fertilizerDate = new Date(data.lastFertilized);\n    const today = new Date();\n    today.setHours(23, 59, 59, 999); // End of today\n    return fertilizerDate <= today;\n  }\n  return true;\n}, {\n  message: 'Last fertilized date cannot be in the future',\n  path: ['lastFertilized']\n}).refine(data => {\n  // Custom validation: lastRepot cannot be in the future\n  if (data.lastRepot) {\n    const repotDate = new Date(data.lastRepot);\n    const today = new Date();\n    today.setHours(23, 59, 59, 999); // End of today\n    return repotDate <= today;\n  }\n  return true;\n}, {\n  message: 'Last repot date cannot be in the future',\n  path: ['lastRepot']\n});\n\ntype PlantInstanceFormData = z.infer<typeof plantInstanceFormSchema>;\ntype PlantTaxonomyFormData = z.infer<typeof plantTaxonomySchema>;\n\ninterface PlantInstanceFormProps {\n  plantInstance?: EnhancedPlantInstance;\n  isOpen: boolean;\n  onClose: () => void;\n  onSuccess?: (plantInstance: EnhancedPlantInstance) => void;\n  userId: number;\n}\n\nexport default function PlantInstanceForm({\n  plantInstance,\n  isOpen,\n  onClose,\n  onSuccess,\n  userId,\n}: PlantInstanceFormProps) {\n  const [selectedPlant, setSelectedPlant] = useState<PlantSuggestion | null>(null);\n  const [imageFiles, setImageFiles] = useState<File[]>([]);\n  const [existingImages, setExistingImages] = useState<string[]>([]);\n  const [showLocationSuggestions, setShowLocationSuggestions] = useState(false);\n  const [locationInput, setLocationInput] = useState('');\n  const [isCreatingPlant, setIsCreatingPlant] = useState(false);\n  const [showTaxonomyForm, setShowTaxonomyForm] = useState(false);\n  const [taxonomyData, setTaxonomyData] = useState<PlantTaxonomyFormData>({\n    family: '',\n    genus: '',\n    species: '',\n    cultivar: '',\n    commonName: '',\n  });\n  const [hasUnsavedChanges, setHasUnsavedChanges] = useState(false);\n  const [newNoteInput, setNewNoteInput] = useState('');\n  const queryClient = useQueryClient();\n  const isEditing = !!plantInstance;\n\n  // Form setup\n  const {\n    control,\n    handleSubmit,\n    formState: { errors, isValid, isDirty },\n    reset,\n    setValue,\n    watch,\n    trigger,\n  } = useForm({\n    resolver: zodResolver(plantInstanceFormSchema),\n    mode: 'onChange',\n    defaultValues: {\n      plantId: 1, // Default to 1 to pass validation, will be overridden during initialization\n      nickname: '',\n      location: '',\n      fertilizerSchedule: 'every_4_weeks' as const,\n      lastFertilized: '',\n      lastRepot: '',\n      notes: '',\n      images: [],\n      isActive: true,\n      newPlantTaxonomy: undefined,\n    },\n  });\n\n  // Fetch user locations for autocomplete\n  const { data: userLocations } = useQuery({\n    queryKey: ['user-locations', userId],\n    queryFn: async () => {\n      const response = await fetch(`/api/plant-instances/locations?userId=${userId}`);\n      if (!response.ok) throw new Error('Failed to fetch locations');\n      return response.json() as Promise<string[]>;\n    },\n    staleTime: 1000 * 60 * 10, // 10 minutes\n  });\n\n  // Handle showing taxonomy form for new plant creation\n  const handleShowTaxonomyForm = (query: string) => {\n    setShowTaxonomyForm(true);\n    setTaxonomyData({\n      family: '',\n      genus: '',\n      species: '',\n      cultivar: '',\n      commonName: query || '',\n    });\n  };\n\n  // Handle taxonomy form submission\n  const handleTaxonomySubmit = (data: PlantTaxonomyFormData) => {\n    setIsCreatingPlant(true);\n    createPlantMutation.mutate({\n      ...data,\n      cultivar: data.cultivar || null,\n    });\n  };\n\n  // Handle canceling taxonomy form\n  const handleCancelTaxonomyForm = () => {\n    setShowTaxonomyForm(false);\n    setTaxonomyData({\n      family: '',\n      genus: '',\n      species: '',\n      cultivar: '',\n      commonName: '',\n    });\n  };\n\n  // Create new plant mutation\n  const createPlantMutation = useMutation({\n    mutationFn: async (plantData: any) => {\n      const response = await fetch('/api/plants', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(plantData),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Failed to create plant');\n      }\n\n      return response.json();\n    },\n    onSuccess: async (data) => {\n      await queryClient.invalidateQueries({ \n        queryKey: ['plants'],\n        refetchType: 'active'\n      });\n      queryClient.removeQueries({ queryKey: ['plants'] });\n      await queryClient.refetchQueries({ queryKey: ['plants'] });\n      \n      // Set the newly created plant as selected\n      const newPlant: PlantSuggestion = {\n        id: data.data.id,\n        family: data.data.family,\n        genus: data.data.genus,\n        species: data.data.species,\n        cultivar: data.data.cultivar,\n        commonName: data.data.commonName,\n        isVerified: data.data.isVerified,\n      };\n      \n      handlePlantSelect(newPlant);\n      setIsCreatingPlant(false);\n      setShowTaxonomyForm(false);\n    },\n    onError: (error) => {\n      console.error('Failed to create plant:', error);\n      setIsCreatingPlant(false);\n      setShowTaxonomyForm(false);\n    },\n  });\n\n  // Create/update mutation\n  const mutation = useMutation({\n    mutationFn: async (data: PlantInstanceFormData & { fertilizerSchedule: string }) => {\n      const formData = new FormData();\n      \n      // Add form fields\n      Object.entries(data).forEach(([key, value]) => {\n        if (value !== undefined && value !== '') {\n          if (key === 'images' && Array.isArray(value)) {\n            // Handle existing images\n            value.forEach((image, index) => {\n              formData.append(`existingImages[${index}]`, image);\n            });\n          } else {\n            formData.append(key, String(value));\n          }\n        }\n      });\n\n      // Add new image files\n      imageFiles.forEach((file, index) => {\n        formData.append(`imageFiles[${index}]`, file);\n      });\n\n      const url = isEditing \n        ? `/api/plant-instances/${plantInstance.id}`\n        : '/api/plant-instances';\n      \n      const method = isEditing ? 'PUT' : 'POST';\n\n      const response = await fetch(url, {\n        method,\n        body: formData,\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        console.error('API Error Response:', error);\n        throw new Error(error.message || 'Failed to save plant instance');\n      }\n\n      return response.json();\n    },\n    onSuccess: async (data) => {\n      // Comprehensive cache clearing for immediate grid updates\n      console.log('Plant instance saved, invalidating caches...');\n      \n      // Invalidate all plant-instances queries regardless of filters\n      await queryClient.invalidateQueries({ \n        queryKey: ['plant-instances'],\n        refetchType: 'all'\n      });\n      \n      // Force refetch specific user queries\n      await queryClient.refetchQueries({ \n        queryKey: ['plant-instances', userId],\n        type: 'all'\n      });\n      \n      // Additional cache clearing for related data\n      const additionalQueryKeys = [\n        ['plant-detail'],\n        ['care-dashboard', userId],\n        ['plants']\n      ];\n\n      for (const queryKey of additionalQueryKeys) {\n        await queryClient.invalidateQueries({ \n          queryKey,\n          refetchType: 'active'\n        });\n      }\n      \n      console.log('Cache invalidation complete');\n      \n      // Reset form state\n      reset();\n      setImageFiles([]);\n      setExistingImages([]);\n      setSelectedPlant(null);\n      setShowTaxonomyForm(false);\n      setHasUnsavedChanges(false);\n      \n      if (onSuccess) {\n        onSuccess(data);\n      } else {\n        // Only call onClose if no onSuccess callback provided\n        onClose();\n      }\n    },\n  });\n\n  // Initialize form when editing\n  useEffect(() => {\n    if (isEditing && plantInstance) {\n      const convertedSchedule = convertDatabaseScheduleToForm(plantInstance.fertilizerSchedule);\n      console.log('Setting form with fertilizer schedule:', convertedSchedule);\n      reset({\n        plantId: plantInstance.plantId,\n        nickname: plantInstance.nickname,\n        location: plantInstance.location,\n        fertilizerSchedule: convertedSchedule as any,\n        lastFertilized: plantInstance.lastFertilized \n          ? new Date(plantInstance.lastFertilized).toISOString().split('T')[0]\n          : '',\n        lastRepot: plantInstance.lastRepot \n          ? new Date(plantInstance.lastRepot).toISOString().split('T')[0]\n          : '',\n        notes: plantInstance.notes || '',\n        images: plantInstance.images || [],\n        isActive: plantInstance.isActive,\n      });\n\n      setSelectedPlant({\n        id: plantInstance.plant.id,\n        family: plantInstance.plant.family,\n        genus: plantInstance.plant.genus,\n        species: plantInstance.plant.species,\n        commonName: plantInstance.plant.commonName,\n        isVerified: plantInstance.plant.isVerified,\n      });\n\n      setExistingImages(plantInstance.images || []);\n    } else {\n      reset();\n      setSelectedPlant(null);\n      setImageFiles([]);\n      setExistingImages([]);\n      setShowTaxonomyForm(false);\n      setTaxonomyData({\n        family: '',\n        genus: '',\n        species: '',\n        cultivar: '',\n        commonName: '',\n      });\n    }\n  }, [isEditing, plantInstance, reset]);\n\n  // Handle plant selection\n  const handlePlantSelect = (plant: PlantSuggestion | null) => {\n    if (plant) {\n      setSelectedPlant(plant);\n      setValue('plantId', plant.id, { shouldValidate: true });\n    } else {\n      setSelectedPlant(null);\n      setValue('plantId', 0, { shouldValidate: true });\n    }\n  };\n\n  // Handle image changes\n  const handleImageChange = (files: File[]) => {\n    setImageFiles(files);\n    // Don't update form's images field - keep existingImages separate\n    // Just trigger validation to ensure form is valid\n    trigger();\n  };\n\n  // Handle existing image removal\n  const handleRemoveExistingImage = (index: number) => {\n    const newImages = existingImages.filter((_, i) => i !== index);\n    setExistingImages(newImages);\n    // Don't update form's images field - keep existingImages separate\n    trigger();\n  };\n\n  // Handle setting primary image (move image to index 0)\n  const handleSetPrimaryImage = (index: number) => {\n    if (index === 0) return; // Already primary\n    \n    const newImages = [...existingImages];\n    const selectedImage = newImages[index];\n    \n    // Remove the selected image and add it to the beginning\n    newImages.splice(index, 1);\n    newImages.unshift(selectedImage);\n    \n    setExistingImages(newImages);\n    trigger();\n  };\n\n  // Convert enum fertilizer schedule to expected format\n  const convertFertilizerSchedule = (schedule: string): string => {\n    const scheduleMap = {\n      'weekly': '7 days',\n      'biweekly': '2 weeks', \n      'every_2_4_weeks': '3 weeks', // Average of 2-4 weeks\n      'every_3_4_weeks': '4 weeks', // Average of 3-4 weeks\n      'every_4_weeks': '4 weeks',\n      'every_4_6_weeks': '5 weeks', // Average of 4-6 weeks\n      'every_6_8_weeks': '7 weeks', // Average of 6-8 weeks\n      'bimonthly': '2 months',\n      'quarterly': '3 months'\n    };\n    return scheduleMap[schedule as keyof typeof scheduleMap] || schedule;\n  };\n\n  // Convert database fertilizer schedule back to form enum\n  const convertDatabaseScheduleToForm = (schedule: string): string => {\n    console.log('Converting database schedule:', schedule);\n    if (!schedule) return 'every_4_weeks';\n    \n    const reverseMap = {\n      // New format matches (what we send to API)\n      '7 days': 'weekly',\n      '2 weeks': 'biweekly',\n      '3 weeks': 'every_2_4_weeks',\n      '4 weeks': 'every_4_weeks',\n      '5 weeks': 'every_4_6_weeks',\n      '7 weeks': 'every_6_8_weeks',\n      '2 months': 'bimonthly',\n      '3 months': 'quarterly',\n      // Legacy formats that might exist in database\n      '1 week': 'weekly',\n      'every 2 weeks': 'biweekly',\n      'every 2-4 weeks': 'every_2_4_weeks',\n      'every 3-4 weeks': 'every_3_4_weeks', \n      'every 4 weeks': 'every_4_weeks',\n      'every 4-6 weeks': 'every_4_6_weeks',\n      'every 6-8 weeks': 'every_6_8_weeks',\n      '1 month': 'every_4_weeks',\n      'monthly': 'every_4_weeks',\n      'bimonthly': 'bimonthly',\n      'quarterly': 'quarterly',\n    };\n    \n    const result = reverseMap[schedule as keyof typeof reverseMap] || 'every_4_weeks';\n    console.log('Converted to:', result);\n    return result;\n  };\n\n  // Handle form submission\n  const onSubmit = (data: PlantInstanceFormData) => {\n    const submitData = {\n      ...data,\n      fertilizerSchedule: convertFertilizerSchedule(data.fertilizerSchedule),\n      images: existingImages, // Always use current existingImages state\n    };\n    console.log('Form submission data:', submitData);\n    console.log('Existing images being submitted:', existingImages);\n    console.log('Original fertilizer schedule:', data.fertilizerSchedule);\n    console.log('Converted fertilizer schedule:', convertFertilizerSchedule(data.fertilizerSchedule));\n    mutation.mutate(submitData as any);\n  };\n\n  // Track unsaved changes\n  useEffect(() => {\n    setHasUnsavedChanges(isDirty || imageFiles.length > 0 || showTaxonomyForm);\n  }, [isDirty, imageFiles.length, showTaxonomyForm]);\n\n  // Warn about unsaved changes before page unload\n  useEffect(() => {\n    const handleBeforeUnload = (e: BeforeUnloadEvent) => {\n      if (hasUnsavedChanges) {\n        e.preventDefault();\n        e.returnValue = 'You have unsaved changes. Are you sure you want to leave?';\n        return 'You have unsaved changes. Are you sure you want to leave?';\n      }\n    };\n\n    if (isOpen && hasUnsavedChanges) {\n      window.addEventListener('beforeunload', handleBeforeUnload);\n    }\n\n    return () => {\n      window.removeEventListener('beforeunload', handleBeforeUnload);\n    };\n  }, [isOpen, hasUnsavedChanges]);\n\n  // Handle close with unsaved changes warning\n  const handleClose = () => {\n    if (hasUnsavedChanges) {\n      const confirmed = window.confirm('You have unsaved changes. Are you sure you want to close?');\n      if (!confirmed) return;\n    }\n    onClose();\n  };\n\n  // Close modal on escape\n  useEffect(() => {\n    const handleEscape = (e: KeyboardEvent) => {\n      if (e.key === 'Escape') {\n        handleClose();\n      }\n    };\n\n    if (isOpen) {\n      document.addEventListener('keydown', handleEscape);\n      document.body.style.overflow = 'hidden';\n    }\n\n    return () => {\n      document.removeEventListener('keydown', handleEscape);\n      document.body.style.overflow = 'unset';\n    };\n  }, [isOpen, handleClose]);\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 z-50 overflow-hidden\">\n      {/* Backdrop */}\n      <div \n        className=\"absolute inset-0 bg-black bg-opacity-50 transition-opacity\"\n        onClick={handleClose}\n      />\n      \n      {/* Modal */}\n      <div className=\"relative h-full flex items-end sm:items-center justify-center p-4 pb-20 sm:pb-4\">\n        <div className=\"bg-white rounded-t-2xl sm:rounded-2xl w-full max-w-2xl max-h-full overflow-hidden shadow-2xl\">\n          {/* Header */}\n          <div className=\"flex items-center justify-between p-6 border-b border-gray-200\">\n            <h2 className=\"text-xl font-semibold text-gray-900\">\n              {isEditing ? 'Edit Plant' : 'Add New Plant'}\n            </h2>\n            <button\n              onClick={handleClose}\n              className=\"p-2 text-gray-400 hover:text-gray-600 rounded-full hover:bg-gray-100\"\n              aria-label=\"Close form\"\n            >\n              <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n              </svg>\n            </button>\n          </div>\n\n          {/* Form */}\n          <form onSubmit={handleSubmit(onSubmit)} className=\"flex-1 overflow-auto max-h-[60vh] sm:max-h-[70vh]\">\n            <div className=\"p-6 space-y-6\">\n              {/* Plant Type Selection */}\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Plant Type *\n                </label>\n                <PlantTaxonomySelector\n                  selectedPlant={selectedPlant}\n                  onSelect={handlePlantSelect}\n                  disabled={isCreatingPlant || showTaxonomyForm}\n                  onAddNew={handleShowTaxonomyForm}\n                />\n                {isCreatingPlant && (\n                  <div className=\"mt-2 flex items-center text-sm text-primary-600\">\n                    <svg className=\"animate-spin -ml-1 mr-2 h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\">\n                      <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\" />\n                      <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\" />\n                    </svg>\n                    Creating new plant type...\n                  </div>\n                )}\n                {createPlantMutation.isError && (\n                  <div className=\"mt-2 text-sm text-red-600\">\n                    Failed to create plant: {createPlantMutation.error instanceof Error ? createPlantMutation.error.message : 'Unknown error'}\n                  </div>\n                )}\n                {errors.plantId && (\n                  <div className=\"mt-1 text-sm text-red-600\">{errors.plantId.message}</div>\n                )}\n\n                {/* New Plant Taxonomy Form */}\n                {showTaxonomyForm && (\n                  <div className=\"mt-4 p-4 bg-blue-50 border border-blue-200 rounded-lg\">\n                    <div className=\"flex items-center justify-between mb-4\">\n                      <h3 className=\"text-sm font-semibold text-blue-900\">Create New Plant Type</h3>\n                      <button\n                        type=\"button\"\n                        onClick={handleCancelTaxonomyForm}\n                        className=\"text-blue-600 hover:text-blue-800\"\n                      >\n                        <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n                        </svg>\n                      </button>\n                    </div>\n                    \n                    <div className=\"space-y-4\">\n                      {/* Common Name */}\n                      <div>\n                        <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                          Common Name *\n                        </label>\n                        <input\n                          type=\"text\"\n                          value={taxonomyData.commonName}\n                          onChange={(e) => setTaxonomyData(prev => ({ ...prev, commonName: e.target.value }))}\n                          placeholder=\"e.g., Monstera Deliciosa\"\n                          className=\"w-full px-3 py-2 bg-white text-gray-900 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                        />\n                      </div>\n\n                      <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                        {/* Family */}\n                        <div>\n                          <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                            Family *\n                          </label>\n                          <input\n                            type=\"text\"\n                            value={taxonomyData.family}\n                            onChange={(e) => setTaxonomyData(prev => ({ ...prev, family: e.target.value }))}\n                            placeholder=\"e.g., Araceae\"\n                            className=\"w-full px-3 py-2 bg-white text-gray-900 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                          />\n                        </div>\n\n                        {/* Genus */}\n                        <div>\n                          <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                            Genus *\n                          </label>\n                          <input\n                            type=\"text\"\n                            value={taxonomyData.genus}\n                            onChange={(e) => setTaxonomyData(prev => ({ ...prev, genus: e.target.value }))}\n                            placeholder=\"e.g., Monstera\"\n                            className=\"w-full px-3 py-2 bg-white text-gray-900 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                          />\n                        </div>\n                      </div>\n\n                      <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                        {/* Species */}\n                        <div>\n                          <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                            Species *\n                          </label>\n                          <input\n                            type=\"text\"\n                            value={taxonomyData.species}\n                            onChange={(e) => setTaxonomyData(prev => ({ ...prev, species: e.target.value }))}\n                            placeholder=\"e.g., deliciosa\"\n                            className=\"w-full px-3 py-2 bg-white text-gray-900 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                          />\n                        </div>\n\n                        {/* Cultivar */}\n                        <div>\n                          <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                            Cultivar (optional)\n                          </label>\n                          <input\n                            type=\"text\"\n                            value={taxonomyData.cultivar}\n                            onChange={(e) => setTaxonomyData(prev => ({ ...prev, cultivar: e.target.value }))}\n                            placeholder=\"e.g., 'Variegata'\"\n                            className=\"w-full px-3 py-2 bg-white text-gray-900 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                          />\n                        </div>\n                      </div>\n\n                      <div className=\"flex justify-end space-x-3 pt-2\">\n                        <button\n                          type=\"button\"\n                          onClick={handleCancelTaxonomyForm}\n                          className=\"px-3 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 focus:ring-2 focus:ring-blue-500\"\n                        >\n                          Cancel\n                        </button>\n                        <button\n                          type=\"button\"\n                          onClick={() => {\n                            const isValid = taxonomyData.family && taxonomyData.genus && taxonomyData.species && taxonomyData.commonName;\n                            if (isValid) {\n                              handleTaxonomySubmit(taxonomyData);\n                            }\n                          }}\n                          disabled={!taxonomyData.family || !taxonomyData.genus || !taxonomyData.species || !taxonomyData.commonName}\n                          className=\"px-3 py-2 text-sm font-medium text-white bg-blue-600 border border-transparent rounded-lg hover:bg-blue-700 focus:ring-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed\"\n                        >\n                          Create Plant Type\n                        </button>\n                      </div>\n                    </div>\n                  </div>\n                )}\n              </div>\n\n              {/* Basic Information */}\n              <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                <div>\n                  <label htmlFor=\"nickname\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Nickname *\n                  </label>\n                  <Controller\n                    name=\"nickname\"\n                    control={control}\n                    render={({ field }) => (\n                      <input\n                        {...field}\n                        id=\"nickname\"\n                        type=\"text\"\n                        placeholder=\"My favorite monstera\"\n                        className={`w-full px-3 py-2 bg-white text-gray-900 placeholder-gray-500 border rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 ${\n                          errors.nickname ? 'border-red-300' : 'border-gray-300'\n                        }`}\n                      />\n                    )}\n                  />\n                  {errors.nickname && (\n                    <p className=\"mt-1 text-sm text-red-600\">{errors.nickname.message}</p>\n                  )}\n                </div>\n\n                <div>\n                  <label htmlFor=\"location\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Location *\n                  </label>\n                  <Controller\n                    name=\"location\"\n                    control={control}\n                    render={({ field }) => (\n                      <div className=\"relative\">\n                        <input\n                          {...field}\n                          id=\"location\"\n                          type=\"text\"\n                          placeholder=\"Living room window\"\n                          className={`w-full px-3 py-2 bg-white text-gray-900 placeholder-gray-500 border rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 ${\n                            errors.location ? 'border-red-300' : 'border-gray-300'\n                          }`}\n                          onChange={(e) => {\n                            field.onChange(e);\n                            setLocationInput(e.target.value);\n                            setShowLocationSuggestions(e.target.value.length > 0);\n                          }}\n                          onFocus={() => setShowLocationSuggestions(field.value.length > 0)}\n                          onBlur={() => setTimeout(() => setShowLocationSuggestions(false), 200)}\n                        />\n                        \n                        {/* Location suggestions dropdown */}\n                        {showLocationSuggestions && userLocations && userLocations.length > 0 && (\n                          <div className=\"absolute z-10 w-full mt-1 bg-white border border-gray-300 rounded-lg shadow-lg max-h-40 overflow-y-auto\">\n                            {userLocations\n                              .filter(location => \n                                location.toLowerCase().includes(field.value.toLowerCase())\n                              )\n                              .slice(0, 5)\n                              .map((location) => (\n                                <button\n                                  key={location}\n                                  type=\"button\"\n                                  onClick={() => {\n                                    field.onChange(location);\n                                    setLocationInput(location);\n                                    setShowLocationSuggestions(false);\n                                  }}\n                                  className=\"w-full px-3 py-2 text-left hover:bg-gray-50 focus:bg-gray-50 focus:outline-none first:rounded-t-lg last:rounded-b-lg\"\n                                >\n                                  <div className=\"flex items-center\">\n                                    <svg className=\"w-4 h-4 text-gray-400 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z\" />\n                                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 11a3 3 0 11-6 0 3 3 0 016 0z\" />\n                                    </svg>\n                                    {location}\n                                  </div>\n                                </button>\n                              ))}\n                            \n                            {/* Common location suggestions */}\n                            {field.value.length > 0 && !userLocations.some(loc => \n                              loc.toLowerCase().includes(field.value.toLowerCase())\n                            ) && (\n                              <div className=\"border-t border-gray-100\">\n                                <div className=\"px-3 py-2 text-xs text-gray-500 font-medium\">Suggestions:</div>\n                                {[\n                                  'Living room window',\n                                  'Kitchen counter',\n                                  'Bedroom windowsill',\n                                  'Bathroom shelf',\n                                  'Office desk',\n                                  'Balcony',\n                                  'Greenhouse',\n                                  'Outdoor garden',\n                                ].filter(suggestion => \n                                  suggestion.toLowerCase().includes(field.value.toLowerCase())\n                                ).slice(0, 3).map((suggestion) => (\n                                  <button\n                                    key={suggestion}\n                                    type=\"button\"\n                                    onClick={() => {\n                                      field.onChange(suggestion);\n                                      setLocationInput(suggestion);\n                                      setShowLocationSuggestions(false);\n                                    }}\n                                    className=\"w-full px-3 py-2 text-left text-gray-600 hover:bg-gray-50 focus:bg-gray-50 focus:outline-none\"\n                                  >\n                                    <div className=\"flex items-center\">\n                                      <svg className=\"w-4 h-4 text-gray-300 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z\" />\n                                      </svg>\n                                      {suggestion}\n                                    </div>\n                                  </button>\n                                ))}\n                              </div>\n                            )}\n                          </div>\n                        )}\n                      </div>\n                    )}\n                  />\n                  {errors.location && (\n                    <p className=\"mt-1 text-sm text-red-600\">{errors.location.message}</p>\n                  )}\n                  \n                  {/* Location tips */}\n                  <p className=\"mt-1 text-xs text-gray-500\">\n                    Be specific about lighting and conditions (e.g., \"South-facing kitchen window\")\n                  </p>\n                </div>\n              </div>\n\n              {/* Care Schedule */}\n              <div>\n                <label htmlFor=\"fertilizerSchedule\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Fertilizer Schedule *\n                </label>\n                <Controller\n                  name=\"fertilizerSchedule\"\n                  control={control}\n                  render={({ field }) => (\n                    <div className=\"space-y-3\">\n                      <select\n                        {...field}\n                        id=\"fertilizerSchedule\"\n                        className={`w-full px-3 py-2 bg-white text-gray-900 border rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 ${\n                          errors.fertilizerSchedule ? 'border-red-300' : 'border-gray-300'\n                        }`}\n                      >\n                        <option value=\"weekly\">Weekly (every 7 days) - High maintenance</option>\n                        <option value=\"biweekly\">Every 2 weeks - Regular care</option>\n                        <option value=\"every_2_4_weeks\">Every 2-4 weeks - Variable schedule</option>\n                        <option value=\"every_3_4_weeks\">Every 3-4 weeks - Moderate care</option>\n                        <option value=\"every_4_weeks\">Every 4 weeks - Standard monthly</option>\n                        <option value=\"every_4_6_weeks\">Every 4-6 weeks - Extended care</option>\n                        <option value=\"every_6_8_weeks\">Every 6-8 weeks - Low maintenance</option>\n                        <option value=\"bimonthly\">Bi-monthly (every 60 days) - Very low maintenance</option>\n                        <option value=\"quarterly\">Quarterly (every 90 days) - Minimal care</option>\n                      </select>\n                      \n                      {/* Schedule preview */}\n                      {field.value && watch('lastFertilized') && (\n                        <div className=\"bg-primary-50 border border-primary-200 rounded-lg p-3\">\n                          <div className=\"flex items-center text-sm\">\n                            <svg className=\"w-4 h-4 text-primary-600 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z\" />\n                            </svg>\n                            <span className=\"text-primary-800\">\n                              {(() => {\n                                const lastFert = new Date(watch('lastFertilized') || '');\n                                const currentSchedule = watch('fertilizerSchedule');\n                                const scheduleMap = {\n                                  weekly: 7,\n                                  biweekly: 14,\n                                  every_2_4_weeks: 21,    // Average of 2-4 weeks\n                                  every_3_4_weeks: 24,    // Average of 3-4 weeks  \n                                  every_4_weeks: 28,      // 4 weeks\n                                  every_4_6_weeks: 35,    // Average of 4-6 weeks\n                                  every_6_8_weeks: 49,    // Average of 6-8 weeks\n                                  bimonthly: 60,\n                                  quarterly: 90\n                                };\n                                const days = scheduleMap[currentSchedule as keyof typeof scheduleMap];\n                                const nextDue = new Date(lastFert);\n                                nextDue.setDate(nextDue.getDate() + days);\n                                return `Next fertilizer due: ${nextDue.toLocaleDateString()}`;\n                              })()}\n                            </span>\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                  )}\n                />\n                {errors.fertilizerSchedule && (\n                  <p className=\"mt-1 text-sm text-red-600\">{errors.fertilizerSchedule.message}</p>\n                )}\n                \n                <p className=\"mt-1 text-xs text-gray-500\">\n                  Choose based on your plant's needs and your availability for care\n                </p>\n              </div>\n\n              {/* Care History */}\n              <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Last Fertilized\n                  </label>\n                  <Controller\n                    name=\"lastFertilized\"\n                    control={control}\n                    render={({ field }) => (\n                      <input\n                        {...field}\n                        type=\"date\"\n                        max={new Date().toISOString().split('T')[0]}\n                        className=\"w-full px-3 py-2 bg-white text-gray-900 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500\"\n                      />\n                    )}\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Last Repotted\n                  </label>\n                  <Controller\n                    name=\"lastRepot\"\n                    control={control}\n                    render={({ field }) => (\n                      <input\n                        {...field}\n                        type=\"date\"\n                        max={new Date().toISOString().split('T')[0]}\n                        className=\"w-full px-3 py-2 bg-white text-gray-900 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500\"\n                      />\n                    )}\n                  />\n                </div>\n              </div>\n\n              {/* Notes & Observations */}\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Notes & Observations\n                </label>\n                \n                {/* Existing Notes History */}\n                {watch('notes') && watch('notes')?.trim() && (\n                  <div className=\"mb-3 p-3 bg-gray-50 border border-gray-200 rounded-lg\">\n                    <h4 className=\"text-sm font-medium text-gray-700 mb-2\">Previous Notes:</h4>\n                    <div className=\"text-sm text-gray-600 whitespace-pre-wrap max-h-32 overflow-y-auto\">\n                      {watch('notes')}\n                    </div>\n                  </div>\n                )}\n                \n                {/* New Note Input */}\n                <div className=\"space-y-2\">\n                  <textarea\n                    value={newNoteInput}\n                    onChange={(e) => setNewNoteInput(e.target.value)}\n                    rows={3}\n                    placeholder=\"Add a new observation or note...\"\n                    className=\"w-full px-3 py-2 bg-white text-gray-900 placeholder-gray-500 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 resize-none\"\n                    onKeyDown={(e) => {\n                      if (e.key === 'Enter' && (e.metaKey || e.ctrlKey)) {\n                        e.preventDefault();\n                        const newNote = newNoteInput.trim();\n                        if (newNote) {\n                          const timestamp = new Date().toLocaleDateString();\n                          const existingNotes = watch('notes') || '';\n                          const updatedNotes = existingNotes \n                            ? `${existingNotes}\\n\\n[${timestamp}] ${newNote}`\n                            : `[${timestamp}] ${newNote}`;\n                          setValue('notes', updatedNotes);\n                          setNewNoteInput(''); // Clear the input\n                        }\n                      }\n                    }}\n                  />\n                  <div className=\"flex justify-between items-center\">\n                    <p className=\"text-xs text-gray-500\">\n                      Press Cmd/Ctrl + Enter to add note\n                    </p>\n                    <button\n                      type=\"button\"\n                      onClick={() => {\n                        const newNote = newNoteInput.trim();\n                        if (newNote) {\n                          const timestamp = new Date().toLocaleDateString();\n                          const existingNotes = watch('notes') || '';\n                          const updatedNotes = existingNotes \n                            ? `${existingNotes}\\n\\n[${timestamp}] ${newNote}`\n                            : `[${timestamp}] ${newNote}`;\n                          setValue('notes', updatedNotes);\n                          setNewNoteInput(''); // Clear the input\n                        }\n                      }}\n                      disabled={!newNoteInput.trim()}\n                      className=\"px-3 py-1 text-sm bg-primary-600 text-white rounded hover:bg-primary-700 disabled:opacity-50 disabled:cursor-not-allowed\"\n                    >\n                      Add Note\n                    </button>\n                  </div>\n                </div>\n                \n                {/* Hidden field for form submission */}\n                <Controller\n                  name=\"notes\"\n                  control={control}\n                  render={({ field }) => (\n                    <input type=\"hidden\" {...field} />\n                  )}\n                />\n                \n                {errors.notes && (\n                  <p className=\"mt-1 text-sm text-red-600\">{errors.notes.message}</p>\n                )}\n              </div>\n\n              {/* Images */}\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Photos\n                </label>\n                \n                {/* Existing Images */}\n                {existingImages.length > 0 && (\n                  <div className=\"mb-4\">\n                    <h4 className=\"text-sm font-medium text-gray-600 mb-2\">Current Photos</h4>\n                    <div className=\"grid grid-cols-3 sm:grid-cols-4 gap-2\">\n                      {existingImages.map((image, index) => (\n                        <div key={index} className=\"relative group\">\n                          <img\n                            src={image}\n                            alt={`Plant photo ${index + 1}`}\n                            className=\"w-full aspect-square object-cover rounded-lg\"\n                          />\n                          \n                          {/* Delete Button */}\n                          <button\n                            type=\"button\"\n                            onClick={() => handleRemoveExistingImage(index)}\n                            className=\"absolute top-1 right-1 p-1 bg-red-500 text-white rounded-full opacity-0 group-hover:opacity-100 transition-opacity\"\n                            title=\"Remove image\"\n                            aria-label={`Remove image ${index + 1}`}\n                          >\n                            <svg className=\"w-3 h-3\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                              <path fillRule=\"evenodd\" d=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\" clipRule=\"evenodd\" />\n                            </svg>\n                          </button>\n                          \n                          {/* Primary Badge */}\n                          {index === 0 && (\n                            <div className=\"absolute bottom-1 left-1 bg-primary-500 text-white text-xs px-1 py-0.5 rounded\">\n                              Primary\n                            </div>\n                          )}\n                          \n                          {/* Set as Primary Button (for non-primary images) */}\n                          {index !== 0 && (\n                            <button\n                              type=\"button\"\n                              onClick={() => handleSetPrimaryImage(index)}\n                              className=\"absolute bottom-1 left-1 bg-black bg-opacity-50 text-white text-xs px-1 py-0.5 rounded opacity-0 group-hover:opacity-100 transition-opacity\"\n                              title=\"Set as primary image\"\n                              aria-label={`Set image ${index + 1} as primary`}\n                            >\n                              Set Primary\n                            </button>\n                          )}\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                )}\n\n                {/* New Image Upload */}\n                <ImageUpload\n                  onImagesChange={handleImageChange}\n                  maxImages={6 - existingImages.length}\n                  acceptedTypes={['image/jpeg', 'image/png', 'image/webp']}\n                  maxSizePerImage={5 * 1024 * 1024} // 5MB\n                />\n              </div>\n\n              {/* Active Status (for editing) */}\n              {isEditing && (\n                <div className=\"bg-gray-50 border border-gray-200 rounded-lg p-4\">\n                  <h4 className=\"text-sm font-medium text-gray-900 mb-3\">Plant Status</h4>\n                  <Controller\n                    name=\"isActive\"\n                    control={control}\n                    render={({ field: { value, onChange } }) => (\n                      <div className=\"space-y-3\">\n                        <label className=\"flex items-start cursor-pointer\">\n                          <input\n                            type=\"checkbox\"\n                            checked={value}\n                            onChange={onChange}\n                            className=\"w-4 h-4 text-primary-600 border-gray-300 rounded focus:ring-primary-500 mt-0.5\"\n                          />\n                          <div className=\"ml-3\">\n                            <span className=\"text-sm font-medium text-gray-700\">\n                              Keep this plant active in my collection\n                            </span>\n                            <p className=\"text-xs text-gray-500 mt-1\">\n                              {value \n                                ? 'This plant will appear in your main collection and care reminders'\n                                : 'This plant will be archived and hidden from your main collection'\n                              }\n                            </p>\n                          </div>\n                        </label>\n                        \n                        {!value && (\n                          <div className=\"bg-amber-50 border border-amber-200 rounded p-3\">\n                            <div className=\"flex items-start\">\n                              <svg className=\"w-4 h-4 text-amber-600 mt-0.5 mr-2 flex-shrink-0\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                                <path fillRule=\"evenodd\" d=\"M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z\" clipRule=\"evenodd\" />\n                              </svg>\n                              <div className=\"text-xs text-amber-800\">\n                                <p className=\"font-medium\">Archiving this plant</p>\n                                <p>Care history will be preserved, but the plant won't appear in your active collection or receive care reminders.</p>\n                              </div>\n                            </div>\n                          </div>\n                        )}\n                      </div>\n                    )}\n                  />\n                </div>\n              )}\n            </div>\n\n            {/* Validation Summary */}\n            {Object.keys(errors).length > 0 && (\n              <div className=\"mx-6 mb-4 bg-red-50 border border-red-200 rounded-lg p-4\">\n                <div className=\"flex items-start\">\n                  <svg className=\"w-5 h-5 text-red-400 mt-0.5 mr-3 flex-shrink-0\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                    <path fillRule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z\" clipRule=\"evenodd\" />\n                  </svg>\n                  <div className=\"flex-1\">\n                    <h4 className=\"text-sm font-medium text-red-800 mb-2\">Please fix the following errors:</h4>\n                    <ul className=\"text-sm text-red-700 space-y-1\">\n                      {Object.entries(errors).map(([field, error]) => (\n                        <li key={field}>\n                          • {field === 'plantId' ? 'Plant type' : \n                             field === 'fertilizerSchedule' ? 'Fertilizer schedule' :\n                             field.charAt(0).toUpperCase() + field.slice(1)}: {error.message}\n                        </li>\n                      ))}\n                    </ul>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {/* Footer */}\n            <div className=\"flex items-center justify-between p-6 border-t border-gray-200 bg-gray-50\">\n              <div className=\"flex items-center text-sm text-gray-500\">\n                {!isValid && Object.keys(errors).length === 0 && (\n                  <span>Fill in required fields to continue</span>\n                )}\n                {isValid && (\n                  <span className=\"text-green-600 flex items-center\">\n                    <svg className=\"w-4 h-4 mr-1\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                      <path fillRule=\"evenodd\" d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\" clipRule=\"evenodd\" />\n                    </svg>\n                    Ready to save\n                  </span>\n                )}\n              </div>\n              \n              <div className=\"flex space-x-3\">\n                <button\n                  type=\"button\"\n                  onClick={handleClose}\n                  disabled={mutation.isPending}\n                  className=\"px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 focus:ring-2 focus:ring-primary-500 disabled:opacity-50 transition-colors\"\n                >\n                  Cancel\n                </button>\n                <button\n                  type=\"submit\"\n                  disabled={mutation.isPending || (!selectedPlant && !isEditing)}\n                  className=\"px-4 py-2 text-sm font-medium text-white bg-primary-600 border border-transparent rounded-lg hover:bg-primary-700 focus:ring-2 focus:ring-primary-500 disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\n                >\n                  {mutation.isPending ? (\n                    <span className=\"flex items-center\">\n                      <svg className=\"animate-spin -ml-1 mr-2 h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\">\n                        <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\" />\n                        <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\" />\n                      </svg>\n                      {isEditing ? 'Updating...' : 'Adding...'}\n                    </span>\n                  ) : (\n                    isEditing ? 'Update Plant' : 'Add Plant'\n                  )}\n                </button>\n              </div>\n            </div>\n          </form>\n\n          {/* Error Display */}\n          {mutation.isError && (\n            <div className=\"p-4 bg-red-50 border-t border-red-200\">\n              <p className=\"text-sm text-red-600\">\n                {mutation.error instanceof Error ? mutation.error.message : 'An error occurred'}\n              </p>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}"],"names":["PlantInstanceForm","plantTaxonomySchema","z","object","family","string","min","max","genus","species","cultivar","optional","transform","val","trim","commonName","plantInstanceFormSchema","plantId","number","nickname","refine","length","location","fertilizerSchedule","enum","message","lastFertilized","isNaN","Date","parse","lastRepot","notes","images","array","isActive","boolean","default","newPlantTaxonomy","data","fertilizerDate","today","setHours","path","repotDate","plantInstance","isOpen","onClose","onSuccess","userId","selectedPlant","setSelectedPlant","useState","imageFiles","setImageFiles","existingImages","setExistingImages","showLocationSuggestions","setShowLocationSuggestions","locationInput","setLocationInput","isCreatingPlant","setIsCreatingPlant","showTaxonomyForm","setShowTaxonomyForm","taxonomyData","setTaxonomyData","hasUnsavedChanges","setHasUnsavedChanges","newNoteInput","setNewNoteInput","queryClient","useQueryClient","isEditing","control","handleSubmit","formState","errors","isValid","isDirty","reset","setValue","watch","trigger","useForm","resolver","zodResolver","mode","defaultValues","undefined","userLocations","useQuery","queryKey","queryFn","response","fetch","ok","Error","json","staleTime","handleShowTaxonomyForm","query","handleTaxonomySubmit","createPlantMutation","mutate","handleCancelTaxonomyForm","useMutation","mutationFn","plantData","method","headers","body","JSON","stringify","error","invalidateQueries","refetchType","removeQueries","refetchQueries","newPlant","id","isVerified","handlePlantSelect","onError","console","mutation","formData","FormData","Object","entries","forEach","key","value","Array","isArray","image","index","append","String","file","url","log","type","additionalQueryKeys","useEffect","convertedSchedule","convertDatabaseScheduleToForm","toISOString","split","plant","shouldValidate","handleImageChange","files","handleRemoveExistingImage","newImages","filter","_","i","handleSetPrimaryImage","selectedImage","splice","unshift","convertFertilizerSchedule","schedule","scheduleMap","reverseMap","result","onSubmit","submitData","handleBeforeUnload","e","preventDefault","returnValue","window","addEventListener","removeEventListener","handleClose","confirmed","confirm","handleEscape","document","style","overflow","div","className","onClick","h2","button","aria-label","svg","fill","stroke","viewBox","strokeLinecap","strokeLinejoin","strokeWidth","d","form","label","PlantTaxonomySelector","onSelect","disabled","onAddNew","circle","cx","cy","r","isError","h3","input","onChange","prev","target","placeholder","htmlFor","Controller","name","render","field","p","onFocus","onBlur","setTimeout","toLowerCase","includes","slice","map","some","loc","suggestion","select","option","span","lastFert","currentSchedule","weekly","biweekly","every_2_4_weeks","every_3_4_weeks","every_4_weeks","every_4_6_weeks","every_6_8_weeks","bimonthly","quarterly","days","nextDue","setDate","getDate","toLocaleDateString","h4","textarea","rows","onKeyDown","metaKey","ctrlKey","newNote","timestamp","existingNotes","updatedNotes","img","src","alt","title","fillRule","clipRule","ImageUpload","onImagesChange","maxImages","acceptedTypes","maxSizePerImage","checked","keys","ul","li","charAt","toUpperCase","isPending"],"mappings":"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"}