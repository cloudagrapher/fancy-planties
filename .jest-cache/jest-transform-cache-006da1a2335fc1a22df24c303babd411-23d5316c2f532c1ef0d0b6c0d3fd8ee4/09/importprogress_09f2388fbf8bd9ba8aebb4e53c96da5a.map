{"version":3,"names":["cov_6ca3xwoxu","actualCoverage","s","importProgressStore","ImportProgressStore","getInstance","f","instance","b","set","importId","progress","store","console","log","status","get","delete","getAllForUser","userId","Array","from","values","filter","p","cleanup","olderThanMs","cutoff","Date","now","entries","endTime","Map","setInterval"],"sources":["/Users/stefanbekker/projects/fancy-planties/src/lib/db/import-progress.ts"],"sourcesContent":["import { db } from './index';\nimport { eq, and } from 'drizzle-orm';\nimport type { ImportProgress } from '@/lib/validation/csv-schemas';\n\n// Simple table-like structure using local storage for progress tracking\n// This is a temporary solution - in production you'd want a proper database table\n\nclass ImportProgressStore {\n  private static instance: ImportProgressStore;\n  private store = new Map<string, ImportProgress>();\n\n  static getInstance(): ImportProgressStore {\n    if (!ImportProgressStore.instance) {\n      ImportProgressStore.instance = new ImportProgressStore();\n    }\n    return ImportProgressStore.instance;\n  }\n\n  set(importId: string, progress: ImportProgress): void {\n    this.store.set(importId, { ...progress });\n    console.log(`Storing progress for import ${importId}:`, progress.status, progress.progress);\n  }\n\n  get(importId: string): ImportProgress | null {\n    const progress = this.store.get(importId);\n    console.log(`Retrieved progress for import ${importId}:`, progress?.status || 'not found');\n    return progress || null;\n  }\n\n  delete(importId: string): void {\n    this.store.delete(importId);\n    console.log(`Deleted progress for import ${importId}`);\n  }\n\n  getAllForUser(userId: number): ImportProgress[] {\n    return Array.from(this.store.values()).filter(p => p.userId === userId);\n  }\n\n  cleanup(olderThanMs: number): void {\n    const cutoff = new Date(Date.now() - olderThanMs);\n    for (const [importId, progress] of this.store.entries()) {\n      if (progress.endTime && progress.endTime < cutoff) {\n        this.delete(importId);\n      }\n    }\n  }\n}\n\nexport const importProgressStore = ImportProgressStore.getInstance();\n\n// Auto-cleanup every 10 minutes\nif (typeof setInterval !== 'undefined') {\n  setInterval(() => {\n    importProgressStore.cleanup(2 * 60 * 60 * 1000); // 2 hours\n  }, 10 * 60 * 1000); // 10 minutes\n}"],"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","ignoreList":[]}