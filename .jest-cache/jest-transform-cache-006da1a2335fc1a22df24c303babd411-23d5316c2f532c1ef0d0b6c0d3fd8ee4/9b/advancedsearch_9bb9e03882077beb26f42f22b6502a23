214d9e303bf9667571a569c30789e59f
"use strict";

/* istanbul ignore next */
function cov_17bjkc2tov() {
  var path = "/Users/stefanbekker/projects/fancy-planties/src/lib/services/advanced-search.ts";
  var hash = "d7b78c7134a5615d1e5f377bd8b4bbba724d78a5";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/stefanbekker/projects/fancy-planties/src/lib/services/advanced-search.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 21,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 37
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 37
        }
      },
      "6": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 36
        }
      },
      "7": {
        start: {
          line: 22,
          column: 0
        },
        end: {
          line: 22,
          column: 23
        }
      },
      "8": {
        start: {
          line: 23,
          column: 21
        },
        end: {
          line: 23,
          column: 46
        }
      },
      "9": {
        start: {
          line: 24,
          column: 24
        },
        end: {
          line: 24,
          column: 64
        }
      },
      "10": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 27,
          column: 39
        }
      },
      "11": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 39
        }
      },
      "12": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 29,
          column: 37
        }
      },
      "13": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 40,
          column: 10
        }
      },
      "14": {
        start: {
          line: 44,
          column: 26
        },
        end: {
          line: 44,
          column: 36
        }
      },
      "15": {
        start: {
          line: 45,
          column: 25
        },
        end: {
          line: 45,
          column: 48
        }
      },
      "16": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 93,
          column: 9
        }
      },
      "17": {
        start: {
          line: 48,
          column: 28
        },
        end: {
          line: 48,
          column: 75
        }
      },
      "18": {
        start: {
          line: 50,
          column: 32
        },
        end: {
          line: 50,
          column: 42
        }
      },
      "19": {
        start: {
          line: 51,
          column: 33
        },
        end: {
          line: 55,
          column: 14
        }
      },
      "20": {
        start: {
          line: 56,
          column: 33
        },
        end: {
          line: 56,
          column: 57
        }
      },
      "21": {
        start: {
          line: 58,
          column: 34
        },
        end: {
          line: 58,
          column: 56
        }
      },
      "22": {
        start: {
          line: 59,
          column: 12
        },
        end: {
          line: 61,
          column: 13
        }
      },
      "23": {
        start: {
          line: 60,
          column: 16
        },
        end: {
          line: 60,
          column: 114
        }
      },
      "24": {
        start: {
          line: 63,
          column: 32
        },
        end: {
          line: 63,
          column: 86
        }
      },
      "25": {
        start: {
          line: 65,
          column: 36
        },
        end: {
          line: 65,
          column: 88
        }
      },
      "26": {
        start: {
          line: 67,
          column: 27
        },
        end: {
          line: 67,
          column: 84
        }
      },
      "27": {
        start: {
          line: 69,
          column: 39
        },
        end: {
          line: 69,
          column: 136
        }
      },
      "28": {
        start: {
          line: 70,
          column: 35
        },
        end: {
          line: 70,
          column: 72
        }
      },
      "29": {
        start: {
          line: 71,
          column: 27
        },
        end: {
          line: 82,
          column: 13
        }
      },
      "30": {
        start: {
          line: 84,
          column: 12
        },
        end: {
          line: 86,
          column: 13
        }
      },
      "31": {
        start: {
          line: 85,
          column: 16
        },
        end: {
          line: 85,
          column: 57
        }
      },
      "32": {
        start: {
          line: 88,
          column: 12
        },
        end: {
          line: 88,
          column: 68
        }
      },
      "33": {
        start: {
          line: 89,
          column: 12
        },
        end: {
          line: 89,
          column: 26
        }
      },
      "34": {
        start: {
          line: 91,
          column: 12
        },
        end: {
          line: 91,
          column: 63
        }
      },
      "35": {
        start: {
          line: 92,
          column: 12
        },
        end: {
          line: 92,
          column: 54
        }
      },
      "36": {
        start: {
          line: 97,
          column: 26
        },
        end: {
          line: 97,
          column: 36
        }
      },
      "37": {
        start: {
          line: 98,
          column: 25
        },
        end: {
          line: 98,
          column: 48
        }
      },
      "38": {
        start: {
          line: 99,
          column: 8
        },
        end: {
          line: 113,
          column: 9
        }
      },
      "39": {
        start: {
          line: 101,
          column: 33
        },
        end: {
          line: 101,
          column: 64
        }
      },
      "40": {
        start: {
          line: 103,
          column: 29
        },
        end: {
          line: 103,
          column: 78
        }
      },
      "41": {
        start: {
          line: 105,
          column: 27
        },
        end: {
          line: 105,
          column: 81
        }
      },
      "42": {
        start: {
          line: 107,
          column: 12
        },
        end: {
          line: 107,
          column: 39
        }
      },
      "43": {
        start: {
          line: 108,
          column: 12
        },
        end: {
          line: 108,
          column: 50
        }
      },
      "44": {
        start: {
          line: 109,
          column: 12
        },
        end: {
          line: 109,
          column: 26
        }
      },
      "45": {
        start: {
          line: 111,
          column: 12
        },
        end: {
          line: 111,
          column: 57
        }
      },
      "46": {
        start: {
          line: 112,
          column: 12
        },
        end: {
          line: 112,
          column: 51
        }
      },
      "47": {
        start: {
          line: 117,
          column: 23
        },
        end: {
          line: 117,
          column: 67
        }
      },
      "48": {
        start: {
          line: 118,
          column: 8
        },
        end: {
          line: 120,
          column: 9
        }
      },
      "49": {
        start: {
          line: 119,
          column: 12
        },
        end: {
          line: 119,
          column: 55
        }
      },
      "50": {
        start: {
          line: 121,
          column: 24
        },
        end: {
          line: 124,
          column: 9
        }
      },
      "51": {
        start: {
          line: 125,
          column: 29
        },
        end: {
          line: 125,
          column: 95
        }
      },
      "52": {
        start: {
          line: 126,
          column: 23
        },
        end: {
          line: 134,
          column: 9
        }
      },
      "53": {
        start: {
          line: 135,
          column: 8
        },
        end: {
          line: 135,
          column: 22
        }
      },
      "54": {
        start: {
          line: 139,
          column: 8
        },
        end: {
          line: 139,
          column: 47
        }
      },
      "55": {
        start: {
          line: 139,
          column: 37
        },
        end: {
          line: 139,
          column: 47
        }
      },
      "56": {
        start: {
          line: 140,
          column: 28
        },
        end: {
          line: 140,
          column: 37
        }
      },
      "57": {
        start: {
          line: 142,
          column: 35
        },
        end: {
          line: 142,
          column: 83
        }
      },
      "58": {
        start: {
          line: 143,
          column: 8
        },
        end: {
          line: 143,
          column: 60
        }
      },
      "59": {
        start: {
          line: 143,
          column: 40
        },
        end: {
          line: 143,
          column: 58
        }
      },
      "60": {
        start: {
          line: 145,
          column: 36
        },
        end: {
          line: 145,
          column: 130
        }
      },
      "61": {
        start: {
          line: 146,
          column: 8
        },
        end: {
          line: 146,
          column: 61
        }
      },
      "62": {
        start: {
          line: 146,
          column: 41
        },
        end: {
          line: 146,
          column: 59
        }
      },
      "63": {
        start: {
          line: 148,
          column: 36
        },
        end: {
          line: 148,
          column: 91
        }
      },
      "64": {
        start: {
          line: 149,
          column: 8
        },
        end: {
          line: 149,
          column: 61
        }
      },
      "65": {
        start: {
          line: 149,
          column: 41
        },
        end: {
          line: 149,
          column: 59
        }
      },
      "66": {
        start: {
          line: 150,
          column: 8
        },
        end: {
          line: 150,
          column: 55
        }
      },
      "67": {
        start: {
          line: 154,
          column: 23
        },
        end: {
          line: 165,
          column: 9
        }
      },
      "68": {
        start: {
          line: 167,
          column: 28
        },
        end: {
          line: 167,
          column: 64
        }
      },
      "69": {
        start: {
          line: 168,
          column: 8
        },
        end: {
          line: 168,
          column: 33
        }
      },
      "70": {
        start: {
          line: 169,
          column: 8
        },
        end: {
          line: 169,
          column: 52
        }
      },
      "71": {
        start: {
          line: 170,
          column: 8
        },
        end: {
          line: 170,
          column: 22
        }
      },
      "72": {
        start: {
          line: 174,
          column: 8
        },
        end: {
          line: 174,
          column: 52
        }
      },
      "73": {
        start: {
          line: 178,
          column: 24
        },
        end: {
          line: 178,
          column: 60
        }
      },
      "74": {
        start: {
          line: 179,
          column: 8
        },
        end: {
          line: 179,
          column: 99
        }
      },
      "75": {
        start: {
          line: 179,
          column: 36
        },
        end: {
          line: 179,
          column: 81
        }
      },
      "76": {
        start: {
          line: 183,
          column: 8
        },
        end: {
          line: 183,
          column: 42
        }
      },
      "77": {
        start: {
          line: 187,
          column: 24
        },
        end: {
          line: 192,
          column: 9
        }
      },
      "78": {
        start: {
          line: 194,
          column: 8
        },
        end: {
          line: 196,
          column: 9
        }
      },
      "79": {
        start: {
          line: 195,
          column: 12
        },
        end: {
          line: 195,
          column: 49
        }
      },
      "80": {
        start: {
          line: 200,
          column: 8
        },
        end: {
          line: 200,
          column: 23
        }
      },
      "81": {
        start: {
          line: 203,
          column: 8
        },
        end: {
          line: 203,
          column: 121
        }
      },
      "82": {
        start: {
          line: 207,
          column: 31
        },
        end: {
          line: 214,
          column: 15
        }
      },
      "83": {
        start: {
          line: 207,
          column: 58
        },
        end: {
          line: 214,
          column: 13
        }
      },
      "84": {
        start: {
          line: 216,
          column: 8
        },
        end: {
          line: 216,
          column: 78
        }
      },
      "85": {
        start: {
          line: 218,
          column: 26
        },
        end: {
          line: 218,
          column: 57
        }
      },
      "86": {
        start: {
          line: 219,
          column: 8
        },
        end: {
          line: 231,
          column: 9
        }
      },
      "87": {
        start: {
          line: 220,
          column: 33
        },
        end: {
          line: 220,
          column: 105
        }
      },
      "88": {
        start: {
          line: 222,
          column: 29
        },
        end: {
          line: 225,
          column: 19
        }
      },
      "89": {
        start: {
          line: 222,
          column: 59
        },
        end: {
          line: 225,
          column: 17
        }
      },
      "90": {
        start: {
          line: 226,
          column: 12
        },
        end: {
          line: 230,
          column: 15
        }
      },
      "91": {
        start: {
          line: 227,
          column: 31
        },
        end: {
          line: 227,
          column: 54
        }
      },
      "92": {
        start: {
          line: 228,
          column: 31
        },
        end: {
          line: 228,
          column: 54
        }
      },
      "93": {
        start: {
          line: 229,
          column: 16
        },
        end: {
          line: 229,
          column: 39
        }
      },
      "94": {
        start: {
          line: 232,
          column: 8
        },
        end: {
          line: 232,
          column: 25
        }
      },
      "95": {
        start: {
          line: 235,
          column: 22
        },
        end: {
          line: 240,
          column: 25
        }
      },
      "96": {
        start: {
          line: 241,
          column: 8
        },
        end: {
          line: 241,
          column: 31
        }
      },
      "97": {
        start: {
          line: 244,
          column: 28
        },
        end: {
          line: 244,
          column: 30
        }
      },
      "98": {
        start: {
          line: 246,
          column: 24
        },
        end: {
          line: 246,
          column: 62
        }
      },
      "99": {
        start: {
          line: 247,
          column: 8
        },
        end: {
          line: 251,
          column: 11
        }
      },
      "100": {
        start: {
          line: 248,
          column: 12
        },
        end: {
          line: 250,
          column: 13
        }
      },
      "101": {
        start: {
          line: 249,
          column: 16
        },
        end: {
          line: 249,
          column: 46
        }
      },
      "102": {
        start: {
          line: 252,
          column: 8
        },
        end: {
          line: 252,
          column: 64
        }
      },
      "103": {
        start: {
          line: 256,
          column: 24
        },
        end: {
          line: 256,
          column: 26
        }
      },
      "104": {
        start: {
          line: 257,
          column: 8
        },
        end: {
          line: 259,
          column: 9
        }
      },
      "105": {
        start: {
          line: 258,
          column: 12
        },
        end: {
          line: 258,
          column: 59
        }
      },
      "106": {
        start: {
          line: 260,
          column: 8
        },
        end: {
          line: 263,
          column: 9
        }
      },
      "107": {
        start: {
          line: 261,
          column: 12
        },
        end: {
          line: 261,
          column: 55
        }
      },
      "108": {
        start: {
          line: 262,
          column: 12
        },
        end: {
          line: 262,
          column: 61
        }
      },
      "109": {
        start: {
          line: 264,
          column: 8
        },
        end: {
          line: 264,
          column: 35
        }
      },
      "110": {
        start: {
          line: 268,
          column: 31
        },
        end: {
          line: 268,
          column: 40
        }
      },
      "111": {
        start: {
          line: 269,
          column: 32
        },
        end: {
          line: 269,
          column: 41
        }
      },
      "112": {
        start: {
          line: 270,
          column: 33
        },
        end: {
          line: 270,
          column: 42
        }
      },
      "113": {
        start: {
          line: 271,
          column: 8
        },
        end: {
          line: 287,
          column: 11
        }
      },
      "114": {
        start: {
          line: 273,
          column: 12
        },
        end: {
          line: 275,
          column: 13
        }
      },
      "115": {
        start: {
          line: 274,
          column: 16
        },
        end: {
          line: 274,
          column: 104
        }
      },
      "116": {
        start: {
          line: 277,
          column: 30
        },
        end: {
          line: 277,
          column: 55
        }
      },
      "117": {
        start: {
          line: 278,
          column: 12
        },
        end: {
          line: 284,
          column: 13
        }
      },
      "118": {
        start: {
          line: 279,
          column: 33
        },
        end: {
          line: 279,
          column: 63
        }
      },
      "119": {
        start: {
          line: 280,
          column: 16
        },
        end: {
          line: 283,
          column: 19
        }
      },
      "120": {
        start: {
          line: 286,
          column: 12
        },
        end: {
          line: 286,
          column: 108
        }
      },
      "121": {
        start: {
          line: 288,
          column: 8
        },
        end: {
          line: 303,
          column: 10
        }
      },
      "122": {
        start: {
          line: 289,
          column: 83
        },
        end: {
          line: 292,
          column: 17
        }
      },
      "123": {
        start: {
          line: 293,
          column: 84
        },
        end: {
          line: 297,
          column: 17
        }
      },
      "124": {
        start: {
          line: 298,
          column: 86
        },
        end: {
          line: 301,
          column: 17
        }
      },
      "125": {
        start: {
          line: 308,
          column: 8
        },
        end: {
          line: 308,
          column: 25
        }
      },
      "126": {
        start: {
          line: 312,
          column: 32
        },
        end: {
          line: 312,
          column: 51
        }
      },
      "127": {
        start: {
          line: 313,
          column: 26
        },
        end: {
          line: 313,
          column: 44
        }
      },
      "128": {
        start: {
          line: 314,
          column: 26
        },
        end: {
          line: 314,
          column: 58
        }
      },
      "129": {
        start: {
          line: 315,
          column: 8
        },
        end: {
          line: 320,
          column: 9
        }
      },
      "130": {
        start: {
          line: 316,
          column: 12
        },
        end: {
          line: 319,
          column: 14
        }
      },
      "131": {
        start: {
          line: 321,
          column: 8
        },
        end: {
          line: 326,
          column: 9
        }
      },
      "132": {
        start: {
          line: 322,
          column: 12
        },
        end: {
          line: 325,
          column: 14
        }
      },
      "133": {
        start: {
          line: 327,
          column: 8
        },
        end: {
          line: 330,
          column: 10
        }
      },
      "134": {
        start: {
          line: 334,
          column: 8
        },
        end: {
          line: 345,
          column: 10
        }
      },
      "135": {
        start: {
          line: 348,
          column: 28
        },
        end: {
          line: 348,
          column: 64
        }
      },
      "136": {
        start: {
          line: 349,
          column: 8
        },
        end: {
          line: 349,
          column: 74
        }
      },
      "137": {
        start: {
          line: 349,
          column: 42
        },
        end: {
          line: 349,
          column: 64
        }
      },
      "138": {
        start: {
          line: 352,
          column: 24
        },
        end: {
          line: 352,
          column: 60
        }
      },
      "139": {
        start: {
          line: 353,
          column: 27
        },
        end: {
          line: 353,
          column: 53
        }
      },
      "140": {
        start: {
          line: 354,
          column: 8
        },
        end: {
          line: 354,
          column: 125
        }
      },
      "141": {
        start: {
          line: 354,
          column: 39
        },
        end: {
          line: 354,
          column: 85
        }
      },
      "142": {
        start: {
          line: 354,
          column: 100
        },
        end: {
          line: 354,
          column: 111
        }
      },
      "143": {
        start: {
          line: 360,
          column: 8
        },
        end: {
          line: 360,
          column: 18
        }
      },
      "144": {
        start: {
          line: 363,
          column: 22
        },
        end: {
          line: 371,
          column: 9
        }
      },
      "145": {
        start: {
          line: 372,
          column: 24
        },
        end: {
          line: 372,
          column: 60
        }
      },
      "146": {
        start: {
          line: 373,
          column: 8
        },
        end: {
          line: 373,
          column: 31
        }
      },
      "147": {
        start: {
          line: 375,
          column: 8
        },
        end: {
          line: 377,
          column: 9
        }
      },
      "148": {
        start: {
          line: 376,
          column: 12
        },
        end: {
          line: 376,
          column: 31
        }
      },
      "149": {
        start: {
          line: 378,
          column: 8
        },
        end: {
          line: 378,
          column: 48
        }
      },
      "150": {
        start: {
          line: 381,
          column: 23
        },
        end: {
          line: 381,
          column: 71
        }
      },
      "151": {
        start: {
          line: 382,
          column: 8
        },
        end: {
          line: 385,
          column: 11
        }
      },
      "152": {
        start: {
          line: 387,
          column: 8
        },
        end: {
          line: 387,
          column: 28
        }
      },
      "153": {
        start: {
          line: 390,
          column: 20
        },
        end: {
          line: 390,
          column: 30
        }
      },
      "154": {
        start: {
          line: 391,
          column: 8
        },
        end: {
          line: 395,
          column: 9
        }
      },
      "155": {
        start: {
          line: 392,
          column: 12
        },
        end: {
          line: 394,
          column: 13
        }
      },
      "156": {
        start: {
          line: 393,
          column: 16
        },
        end: {
          line: 393,
          column: 45
        }
      },
      "157": {
        start: {
          line: 398,
          column: 8
        },
        end: {
          line: 398,
          column: 81
        }
      },
      "158": {
        start: {
          line: 401,
          column: 8
        },
        end: {
          line: 401,
          column: 81
        }
      },
      "159": {
        start: {
          line: 404,
          column: 30
        },
        end: {
          line: 404,
          column: 57
        }
      },
      "160": {
        start: {
          line: 405,
          column: 29
        },
        end: {
          line: 461,
          column: 1
        }
      },
      "161": {
        start: {
          line: 408,
          column: 8
        },
        end: {
          line: 408,
          column: 39
        }
      },
      "162": {
        start: {
          line: 408,
          column: 27
        },
        end: {
          line: 408,
          column: 39
        }
      },
      "163": {
        start: {
          line: 409,
          column: 30
        },
        end: {
          line: 409,
          column: 34
        }
      },
      "164": {
        start: {
          line: 410,
          column: 8
        },
        end: {
          line: 413,
          column: 11
        }
      },
      "165": {
        start: {
          line: 411,
          column: 26
        },
        end: {
          line: 411,
          column: 55
        }
      },
      "166": {
        start: {
          line: 412,
          column: 12
        },
        end: {
          line: 412,
          column: 102
        }
      },
      "167": {
        start: {
          line: 414,
          column: 8
        },
        end: {
          line: 414,
          column: 31
        }
      },
      "168": {
        start: {
          line: 418,
          column: 8
        },
        end: {
          line: 418,
          column: 98
        }
      },
      "169": {
        start: {
          line: 418,
          column: 69
        },
        end: {
          line: 418,
          column: 84
        }
      },
      "170": {
        start: {
          line: 422,
          column: 20
        },
        end: {
          line: 422,
          column: 21
        }
      },
      "171": {
        start: {
          line: 423,
          column: 27
        },
        end: {
          line: 423,
          column: 64
        }
      },
      "172": {
        start: {
          line: 423,
          column: 48
        },
        end: {
          line: 423,
          column: 63
        }
      },
      "173": {
        start: {
          line: 425,
          column: 25
        },
        end: {
          line: 425,
          column: 56
        }
      },
      "174": {
        start: {
          line: 426,
          column: 8
        },
        end: {
          line: 430,
          column: 11
        }
      },
      "175": {
        start: {
          line: 427,
          column: 12
        },
        end: {
          line: 429,
          column: 58
        }
      },
      "176": {
        start: {
          line: 427,
          column: 35
        },
        end: {
          line: 427,
          column: 48
        }
      },
      "177": {
        start: {
          line: 428,
          column: 17
        },
        end: {
          line: 429,
          column: 58
        }
      },
      "178": {
        start: {
          line: 428,
          column: 48
        },
        end: {
          line: 428,
          column: 60
        }
      },
      "179": {
        start: {
          line: 429,
          column: 17
        },
        end: {
          line: 429,
          column: 58
        }
      },
      "180": {
        start: {
          line: 429,
          column: 46
        },
        end: {
          line: 429,
          column: 58
        }
      },
      "181": {
        start: {
          line: 432,
          column: 26
        },
        end: {
          line: 432,
          column: 65
        }
      },
      "182": {
        start: {
          line: 433,
          column: 8
        },
        end: {
          line: 437,
          column: 11
        }
      },
      "183": {
        start: {
          line: 434,
          column: 12
        },
        end: {
          line: 436,
          column: 59
        }
      },
      "184": {
        start: {
          line: 434,
          column: 36
        },
        end: {
          line: 434,
          column: 48
        }
      },
      "185": {
        start: {
          line: 435,
          column: 17
        },
        end: {
          line: 436,
          column: 59
        }
      },
      "186": {
        start: {
          line: 435,
          column: 49
        },
        end: {
          line: 435,
          column: 61
        }
      },
      "187": {
        start: {
          line: 436,
          column: 17
        },
        end: {
          line: 436,
          column: 59
        }
      },
      "188": {
        start: {
          line: 436,
          column: 47
        },
        end: {
          line: 436,
          column: 59
        }
      },
      "189": {
        start: {
          line: 439,
          column: 25
        },
        end: {
          line: 439,
          column: 56
        }
      },
      "190": {
        start: {
          line: 440,
          column: 8
        },
        end: {
          line: 443,
          column: 11
        }
      },
      "191": {
        start: {
          line: 441,
          column: 12
        },
        end: {
          line: 442,
          column: 58
        }
      },
      "192": {
        start: {
          line: 441,
          column: 35
        },
        end: {
          line: 441,
          column: 47
        }
      },
      "193": {
        start: {
          line: 442,
          column: 17
        },
        end: {
          line: 442,
          column: 58
        }
      },
      "194": {
        start: {
          line: 442,
          column: 46
        },
        end: {
          line: 442,
          column: 58
        }
      },
      "195": {
        start: {
          line: 445,
          column: 8
        },
        end: {
          line: 458,
          column: 9
        }
      },
      "196": {
        start: {
          line: 447,
          column: 16
        },
        end: {
          line: 447,
          column: 28
        }
      },
      "197": {
        start: {
          line: 448,
          column: 16
        },
        end: {
          line: 448,
          column: 22
        }
      },
      "198": {
        start: {
          line: 450,
          column: 16
        },
        end: {
          line: 450,
          column: 28
        }
      },
      "199": {
        start: {
          line: 451,
          column: 16
        },
        end: {
          line: 451,
          column: 22
        }
      },
      "200": {
        start: {
          line: 453,
          column: 16
        },
        end: {
          line: 453,
          column: 28
        }
      },
      "201": {
        start: {
          line: 454,
          column: 16
        },
        end: {
          line: 454,
          column: 22
        }
      },
      "202": {
        start: {
          line: 456,
          column: 16
        },
        end: {
          line: 456,
          column: 27
        }
      },
      "203": {
        start: {
          line: 457,
          column: 16
        },
        end: {
          line: 457,
          column: 22
        }
      },
      "204": {
        start: {
          line: 459,
          column: 8
        },
        end: {
          line: 459,
          column: 36
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        },
        loc: {
          start: {
            line: 12,
            column: 33
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 33
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 18,
            column: 4
          },
          end: {
            line: 18,
            column: 5
          }
        },
        loc: {
          start: {
            line: 18,
            column: 32
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 18
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 26,
            column: 4
          },
          end: {
            line: 26,
            column: 5
          }
        },
        loc: {
          start: {
            line: 26,
            column: 28
          },
          end: {
            line: 41,
            column: 5
          }
        },
        line: 26
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 43,
            column: 4
          },
          end: {
            line: 43,
            column: 5
          }
        },
        loc: {
          start: {
            line: 43,
            column: 59
          },
          end: {
            line: 94,
            column: 5
          }
        },
        line: 43
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 96,
            column: 4
          },
          end: {
            line: 96,
            column: 5
          }
        },
        loc: {
          start: {
            line: 96,
            column: 51
          },
          end: {
            line: 114,
            column: 5
          }
        },
        line: 96
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 116,
            column: 4
          },
          end: {
            line: 116,
            column: 5
          }
        },
        loc: {
          start: {
            line: 116,
            column: 61
          },
          end: {
            line: 136,
            column: 5
          }
        },
        line: 116
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 138,
            column: 4
          },
          end: {
            line: 138,
            column: 5
          }
        },
        loc: {
          start: {
            line: 138,
            column: 64
          },
          end: {
            line: 151,
            column: 5
          }
        },
        line: 138
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 143,
            column: 35
          },
          end: {
            line: 143,
            column: 36
          }
        },
        loc: {
          start: {
            line: 143,
            column: 40
          },
          end: {
            line: 143,
            column: 58
          }
        },
        line: 143
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 146,
            column: 36
          },
          end: {
            line: 146,
            column: 37
          }
        },
        loc: {
          start: {
            line: 146,
            column: 41
          },
          end: {
            line: 146,
            column: 59
          }
        },
        line: 146
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 149,
            column: 36
          },
          end: {
            line: 149,
            column: 37
          }
        },
        loc: {
          start: {
            line: 149,
            column: 41
          },
          end: {
            line: 149,
            column: 59
          }
        },
        line: 149
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 153,
            column: 4
          },
          end: {
            line: 153,
            column: 5
          }
        },
        loc: {
          start: {
            line: 153,
            column: 101
          },
          end: {
            line: 171,
            column: 5
          }
        },
        line: 153
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 173,
            column: 4
          },
          end: {
            line: 173,
            column: 5
          }
        },
        loc: {
          start: {
            line: 173,
            column: 39
          },
          end: {
            line: 175,
            column: 5
          }
        },
        line: 173
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 177,
            column: 4
          },
          end: {
            line: 177,
            column: 5
          }
        },
        loc: {
          start: {
            line: 177,
            column: 47
          },
          end: {
            line: 180,
            column: 5
          }
        },
        line: 177
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 179,
            column: 28
          },
          end: {
            line: 179,
            column: 29
          }
        },
        loc: {
          start: {
            line: 179,
            column: 36
          },
          end: {
            line: 179,
            column: 81
          }
        },
        line: 179
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 182,
            column: 4
          },
          end: {
            line: 182,
            column: 5
          }
        },
        loc: {
          start: {
            line: 182,
            column: 37
          },
          end: {
            line: 184,
            column: 5
          }
        },
        line: 182
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 186,
            column: 4
          },
          end: {
            line: 186,
            column: 5
          }
        },
        loc: {
          start: {
            line: 186,
            column: 47
          },
          end: {
            line: 201,
            column: 5
          }
        },
        line: 186
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 202,
            column: 4
          },
          end: {
            line: 202,
            column: 5
          }
        },
        loc: {
          start: {
            line: 202,
            column: 30
          },
          end: {
            line: 204,
            column: 5
          }
        },
        line: 202
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 205,
            column: 4
          },
          end: {
            line: 205,
            column: 5
          }
        },
        loc: {
          start: {
            line: 205,
            column: 60
          },
          end: {
            line: 233,
            column: 5
          }
        },
        line: 205
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 207,
            column: 45
          },
          end: {
            line: 207,
            column: 46
          }
        },
        loc: {
          start: {
            line: 207,
            column: 58
          },
          end: {
            line: 214,
            column: 13
          }
        },
        line: 207
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 222,
            column: 54
          },
          end: {
            line: 222,
            column: 55
          }
        },
        loc: {
          start: {
            line: 222,
            column: 59
          },
          end: {
            line: 225,
            column: 17
          }
        },
        line: 222
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 226,
            column: 34
          },
          end: {
            line: 226,
            column: 35
          }
        },
        loc: {
          start: {
            line: 226,
            column: 42
          },
          end: {
            line: 230,
            column: 13
          }
        },
        line: 226
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 234,
            column: 4
          },
          end: {
            line: 234,
            column: 5
          }
        },
        loc: {
          start: {
            line: 234,
            column: 31
          },
          end: {
            line: 242,
            column: 5
          }
        },
        line: 234
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 243,
            column: 4
          },
          end: {
            line: 243,
            column: 5
          }
        },
        loc: {
          start: {
            line: 243,
            column: 54
          },
          end: {
            line: 253,
            column: 5
          }
        },
        line: 243
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 247,
            column: 24
          },
          end: {
            line: 247,
            column: 25
          }
        },
        loc: {
          start: {
            line: 247,
            column: 33
          },
          end: {
            line: 251,
            column: 9
          }
        },
        line: 247
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 254,
            column: 4
          },
          end: {
            line: 254,
            column: 5
          }
        },
        loc: {
          start: {
            line: 254,
            column: 52
          },
          end: {
            line: 265,
            column: 5
          }
        },
        line: 254
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 266,
            column: 4
          },
          end: {
            line: 266,
            column: 5
          }
        },
        loc: {
          start: {
            line: 266,
            column: 51
          },
          end: {
            line: 304,
            column: 5
          }
        },
        line: 266
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 271,
            column: 26
          },
          end: {
            line: 271,
            column: 27
          }
        },
        loc: {
          start: {
            line: 271,
            column: 38
          },
          end: {
            line: 287,
            column: 9
          }
        },
        line: 271
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 289,
            column: 64
          },
          end: {
            line: 289,
            column: 65
          }
        },
        loc: {
          start: {
            line: 289,
            column: 83
          },
          end: {
            line: 292,
            column: 17
          }
        },
        line: 289
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 293,
            column: 66
          },
          end: {
            line: 293,
            column: 67
          }
        },
        loc: {
          start: {
            line: 293,
            column: 84
          },
          end: {
            line: 297,
            column: 17
          }
        },
        line: 293
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 298,
            column: 67
          },
          end: {
            line: 298,
            column: 68
          }
        },
        loc: {
          start: {
            line: 298,
            column: 86
          },
          end: {
            line: 301,
            column: 17
          }
        },
        line: 298
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 305,
            column: 4
          },
          end: {
            line: 305,
            column: 5
          }
        },
        loc: {
          start: {
            line: 305,
            column: 48
          },
          end: {
            line: 309,
            column: 5
          }
        },
        line: 305
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 310,
            column: 4
          },
          end: {
            line: 310,
            column: 5
          }
        },
        loc: {
          start: {
            line: 310,
            column: 31
          },
          end: {
            line: 331,
            column: 5
          }
        },
        line: 310
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 332,
            column: 4
          },
          end: {
            line: 332,
            column: 5
          }
        },
        loc: {
          start: {
            line: 332,
            column: 43
          },
          end: {
            line: 346,
            column: 5
          }
        },
        line: 332
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 347,
            column: 4
          },
          end: {
            line: 347,
            column: 5
          }
        },
        loc: {
          start: {
            line: 347,
            column: 44
          },
          end: {
            line: 350,
            column: 5
          }
        },
        line: 347
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 349,
            column: 32
          },
          end: {
            line: 349,
            column: 33
          }
        },
        loc: {
          start: {
            line: 349,
            column: 42
          },
          end: {
            line: 349,
            column: 64
          }
        },
        line: 349
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 351,
            column: 4
          },
          end: {
            line: 351,
            column: 5
          }
        },
        loc: {
          start: {
            line: 351,
            column: 48
          },
          end: {
            line: 355,
            column: 5
          }
        },
        line: 351
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 354,
            column: 30
          },
          end: {
            line: 354,
            column: 31
          }
        },
        loc: {
          start: {
            line: 354,
            column: 39
          },
          end: {
            line: 354,
            column: 85
          }
        },
        line: 354
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 354,
            column: 91
          },
          end: {
            line: 354,
            column: 92
          }
        },
        loc: {
          start: {
            line: 354,
            column: 100
          },
          end: {
            line: 354,
            column: 111
          }
        },
        line: 354
      },
      "40": {
        name: "(anonymous_40)",
        decl: {
          start: {
            line: 356,
            column: 4
          },
          end: {
            line: 356,
            column: 5
          }
        },
        loc: {
          start: {
            line: 356,
            column: 55
          },
          end: {
            line: 361,
            column: 5
          }
        },
        line: 356
      },
      "41": {
        name: "(anonymous_41)",
        decl: {
          start: {
            line: 362,
            column: 4
          },
          end: {
            line: 362,
            column: 5
          }
        },
        loc: {
          start: {
            line: 362,
            column: 55
          },
          end: {
            line: 379,
            column: 5
          }
        },
        line: 362
      },
      "42": {
        name: "(anonymous_42)",
        decl: {
          start: {
            line: 380,
            column: 4
          },
          end: {
            line: 380,
            column: 5
          }
        },
        loc: {
          start: {
            line: 380,
            column: 40
          },
          end: {
            line: 388,
            column: 5
          }
        },
        line: 380
      },
      "43": {
        name: "(anonymous_43)",
        decl: {
          start: {
            line: 389,
            column: 4
          },
          end: {
            line: 389,
            column: 5
          }
        },
        loc: {
          start: {
            line: 389,
            column: 19
          },
          end: {
            line: 396,
            column: 5
          }
        },
        line: 389
      },
      "44": {
        name: "(anonymous_44)",
        decl: {
          start: {
            line: 397,
            column: 4
          },
          end: {
            line: 397,
            column: 5
          }
        },
        loc: {
          start: {
            line: 397,
            column: 23
          },
          end: {
            line: 399,
            column: 5
          }
        },
        line: 397
      },
      "45": {
        name: "(anonymous_45)",
        decl: {
          start: {
            line: 400,
            column: 4
          },
          end: {
            line: 400,
            column: 5
          }
        },
        loc: {
          start: {
            line: 400,
            column: 23
          },
          end: {
            line: 402,
            column: 5
          }
        },
        line: 400
      },
      "46": {
        name: "(anonymous_46)",
        decl: {
          start: {
            line: 407,
            column: 19
          },
          end: {
            line: 407,
            column: 20
          }
        },
        loc: {
          start: {
            line: 407,
            column: 34
          },
          end: {
            line: 415,
            column: 5
          }
        },
        line: 407
      },
      "47": {
        name: "(anonymous_47)",
        decl: {
          start: {
            line: 410,
            column: 22
          },
          end: {
            line: 410,
            column: 23
          }
        },
        loc: {
          start: {
            line: 410,
            column: 30
          },
          end: {
            line: 413,
            column: 9
          }
        },
        line: 410
      },
      "48": {
        name: "(anonymous_48)",
        decl: {
          start: {
            line: 417,
            column: 24
          },
          end: {
            line: 417,
            column: 25
          }
        },
        loc: {
          start: {
            line: 417,
            column: 33
          },
          end: {
            line: 419,
            column: 5
          }
        },
        line: 417
      },
      "49": {
        name: "(anonymous_49)",
        decl: {
          start: {
            line: 418,
            column: 61
          },
          end: {
            line: 418,
            column: 62
          }
        },
        loc: {
          start: {
            line: 418,
            column: 69
          },
          end: {
            line: 418,
            column: 84
          }
        },
        line: 418
      },
      "50": {
        name: "(anonymous_50)",
        decl: {
          start: {
            line: 421,
            column: 29
          },
          end: {
            line: 421,
            column: 30
          }
        },
        loc: {
          start: {
            line: 421,
            column: 54
          },
          end: {
            line: 460,
            column: 5
          }
        },
        line: 421
      },
      "51": {
        name: "(anonymous_51)",
        decl: {
          start: {
            line: 423,
            column: 43
          },
          end: {
            line: 423,
            column: 44
          }
        },
        loc: {
          start: {
            line: 423,
            column: 48
          },
          end: {
            line: 423,
            column: 63
          }
        },
        line: 423
      },
      "52": {
        name: "(anonymous_52)",
        decl: {
          start: {
            line: 426,
            column: 27
          },
          end: {
            line: 426,
            column: 28
          }
        },
        loc: {
          start: {
            line: 426,
            column: 35
          },
          end: {
            line: 430,
            column: 9
          }
        },
        line: 426
      },
      "53": {
        name: "(anonymous_53)",
        decl: {
          start: {
            line: 433,
            column: 27
          },
          end: {
            line: 433,
            column: 28
          }
        },
        loc: {
          start: {
            line: 433,
            column: 35
          },
          end: {
            line: 437,
            column: 9
          }
        },
        line: 433
      },
      "54": {
        name: "(anonymous_54)",
        decl: {
          start: {
            line: 440,
            column: 27
          },
          end: {
            line: 440,
            column: 28
          }
        },
        loc: {
          start: {
            line: 440,
            column: 35
          },
          end: {
            line: 443,
            column: 9
          }
        },
        line: 440
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 26,
            column: 16
          },
          end: {
            line: 26,
            column: 27
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 26,
            column: 25
          },
          end: {
            line: 26,
            column: 27
          }
        }],
        line: 26
      },
      "1": {
        loc: {
          start: {
            line: 43,
            column: 45
          },
          end: {
            line: 43,
            column: 57
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 43,
            column: 55
          },
          end: {
            line: 43,
            column: 57
          }
        }],
        line: 43
      },
      "2": {
        loc: {
          start: {
            line: 53,
            column: 23
          },
          end: {
            line: 53,
            column: 42
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 53,
            column: 23
          },
          end: {
            line: 53,
            column: 36
          }
        }, {
          start: {
            line: 53,
            column: 40
          },
          end: {
            line: 53,
            column: 42
          }
        }],
        line: 53
      },
      "3": {
        loc: {
          start: {
            line: 54,
            column: 24
          },
          end: {
            line: 54,
            column: 43
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 54,
            column: 24
          },
          end: {
            line: 54,
            column: 38
          }
        }, {
          start: {
            line: 54,
            column: 42
          },
          end: {
            line: 54,
            column: 43
          }
        }],
        line: 54
      },
      "4": {
        loc: {
          start: {
            line: 59,
            column: 12
          },
          end: {
            line: 61,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 59,
            column: 12
          },
          end: {
            line: 61,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 59
      },
      "5": {
        loc: {
          start: {
            line: 59,
            column: 16
          },
          end: {
            line: 59,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 59,
            column: 16
          },
          end: {
            line: 59,
            column: 45
          }
        }, {
          start: {
            line: 59,
            column: 49
          },
          end: {
            line: 59,
            column: 79
          }
        }],
        line: 59
      },
      "6": {
        loc: {
          start: {
            line: 69,
            column: 39
          },
          end: {
            line: 69,
            column: 136
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 69,
            column: 70
          },
          end: {
            line: 69,
            column: 124
          }
        }, {
          start: {
            line: 69,
            column: 127
          },
          end: {
            line: 69,
            column: 136
          }
        }],
        line: 69
      },
      "7": {
        loc: {
          start: {
            line: 84,
            column: 12
          },
          end: {
            line: 86,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 84,
            column: 12
          },
          end: {
            line: 86,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 84
      },
      "8": {
        loc: {
          start: {
            line: 96,
            column: 37
          },
          end: {
            line: 96,
            column: 49
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 96,
            column: 47
          },
          end: {
            line: 96,
            column: 49
          }
        }],
        line: 96
      },
      "9": {
        loc: {
          start: {
            line: 116,
            column: 45
          },
          end: {
            line: 116,
            column: 59
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 116,
            column: 57
          },
          end: {
            line: 116,
            column: 59
          }
        }],
        line: 116
      },
      "10": {
        loc: {
          start: {
            line: 118,
            column: 8
          },
          end: {
            line: 120,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 118,
            column: 8
          },
          end: {
            line: 120,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 118
      },
      "11": {
        loc: {
          start: {
            line: 138,
            column: 53
          },
          end: {
            line: 138,
            column: 62
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 138,
            column: 61
          },
          end: {
            line: 138,
            column: 62
          }
        }],
        line: 138
      },
      "12": {
        loc: {
          start: {
            line: 139,
            column: 8
          },
          end: {
            line: 139,
            column: 47
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 139,
            column: 8
          },
          end: {
            line: 139,
            column: 47
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 139
      },
      "13": {
        loc: {
          start: {
            line: 153,
            column: 82
          },
          end: {
            line: 153,
            column: 99
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 153,
            column: 94
          },
          end: {
            line: 153,
            column: 99
          }
        }],
        line: 153
      },
      "14": {
        loc: {
          start: {
            line: 167,
            column: 28
          },
          end: {
            line: 167,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 167,
            column: 28
          },
          end: {
            line: 167,
            column: 58
          }
        }, {
          start: {
            line: 167,
            column: 62
          },
          end: {
            line: 167,
            column: 64
          }
        }],
        line: 167
      },
      "15": {
        loc: {
          start: {
            line: 174,
            column: 15
          },
          end: {
            line: 174,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 174,
            column: 15
          },
          end: {
            line: 174,
            column: 45
          }
        }, {
          start: {
            line: 174,
            column: 49
          },
          end: {
            line: 174,
            column: 51
          }
        }],
        line: 174
      },
      "16": {
        loc: {
          start: {
            line: 177,
            column: 35
          },
          end: {
            line: 177,
            column: 45
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 177,
            column: 43
          },
          end: {
            line: 177,
            column: 45
          }
        }],
        line: 177
      },
      "17": {
        loc: {
          start: {
            line: 178,
            column: 24
          },
          end: {
            line: 178,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 178,
            column: 24
          },
          end: {
            line: 178,
            column: 54
          }
        }, {
          start: {
            line: 178,
            column: 58
          },
          end: {
            line: 178,
            column: 60
          }
        }],
        line: 178
      },
      "18": {
        loc: {
          start: {
            line: 194,
            column: 8
          },
          end: {
            line: 196,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 194,
            column: 8
          },
          end: {
            line: 196,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 194
      },
      "19": {
        loc: {
          start: {
            line: 203,
            column: 18
          },
          end: {
            line: 203,
            column: 119
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 203,
            column: 18
          },
          end: {
            line: 203,
            column: 35
          }
        }, {
          start: {
            line: 203,
            column: 39
          },
          end: {
            line: 203,
            column: 56
          }
        }, {
          start: {
            line: 203,
            column: 60
          },
          end: {
            line: 203,
            column: 74
          }
        }, {
          start: {
            line: 203,
            column: 78
          },
          end: {
            line: 203,
            column: 96
          }
        }, {
          start: {
            line: 203,
            column: 100
          },
          end: {
            line: 203,
            column: 119
          }
        }],
        line: 203
      },
      "20": {
        loc: {
          start: {
            line: 219,
            column: 8
          },
          end: {
            line: 231,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 219,
            column: 8
          },
          end: {
            line: 231,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 219
      },
      "21": {
        loc: {
          start: {
            line: 227,
            column: 31
          },
          end: {
            line: 227,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 227,
            column: 31
          },
          end: {
            line: 227,
            column: 49
          }
        }, {
          start: {
            line: 227,
            column: 53
          },
          end: {
            line: 227,
            column: 54
          }
        }],
        line: 227
      },
      "22": {
        loc: {
          start: {
            line: 228,
            column: 31
          },
          end: {
            line: 228,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 228,
            column: 31
          },
          end: {
            line: 228,
            column: 49
          }
        }, {
          start: {
            line: 228,
            column: 53
          },
          end: {
            line: 228,
            column: 54
          }
        }],
        line: 228
      },
      "23": {
        loc: {
          start: {
            line: 248,
            column: 12
          },
          end: {
            line: 250,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 248,
            column: 12
          },
          end: {
            line: 250,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 248
      },
      "24": {
        loc: {
          start: {
            line: 248,
            column: 16
          },
          end: {
            line: 248,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 248,
            column: 16
          },
          end: {
            line: 248,
            column: 27
          }
        }, {
          start: {
            line: 248,
            column: 31
          },
          end: {
            line: 248,
            column: 65
          }
        }],
        line: 248
      },
      "25": {
        loc: {
          start: {
            line: 257,
            column: 8
          },
          end: {
            line: 259,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 257,
            column: 8
          },
          end: {
            line: 259,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 257
      },
      "26": {
        loc: {
          start: {
            line: 260,
            column: 8
          },
          end: {
            line: 263,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 260,
            column: 8
          },
          end: {
            line: 263,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 260
      },
      "27": {
        loc: {
          start: {
            line: 273,
            column: 12
          },
          end: {
            line: 275,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 273,
            column: 12
          },
          end: {
            line: 275,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 273
      },
      "28": {
        loc: {
          start: {
            line: 274,
            column: 55
          },
          end: {
            line: 274,
            column: 97
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 274,
            column: 55
          },
          end: {
            line: 274,
            column: 92
          }
        }, {
          start: {
            line: 274,
            column: 96
          },
          end: {
            line: 274,
            column: 97
          }
        }],
        line: 274
      },
      "29": {
        loc: {
          start: {
            line: 278,
            column: 12
          },
          end: {
            line: 284,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 278,
            column: 12
          },
          end: {
            line: 284,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 278
      },
      "30": {
        loc: {
          start: {
            line: 281,
            column: 28
          },
          end: {
            line: 281,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 281,
            column: 28
          },
          end: {
            line: 281,
            column: 43
          }
        }, {
          start: {
            line: 281,
            column: 47
          },
          end: {
            line: 281,
            column: 48
          }
        }],
        line: 281
      },
      "31": {
        loc: {
          start: {
            line: 286,
            column: 55
          },
          end: {
            line: 286,
            column: 101
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 286,
            column: 55
          },
          end: {
            line: 286,
            column: 96
          }
        }, {
          start: {
            line: 286,
            column: 100
          },
          end: {
            line: 286,
            column: 101
          }
        }],
        line: 286
      },
      "32": {
        loc: {
          start: {
            line: 315,
            column: 8
          },
          end: {
            line: 320,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 315,
            column: 8
          },
          end: {
            line: 320,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 315
      },
      "33": {
        loc: {
          start: {
            line: 315,
            column: 12
          },
          end: {
            line: 315,
            column: 40
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 315,
            column: 12
          },
          end: {
            line: 315,
            column: 27
          }
        }, {
          start: {
            line: 315,
            column: 31
          },
          end: {
            line: 315,
            column: 40
          }
        }],
        line: 315
      },
      "34": {
        loc: {
          start: {
            line: 321,
            column: 8
          },
          end: {
            line: 326,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 321,
            column: 8
          },
          end: {
            line: 326,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 321
      },
      "35": {
        loc: {
          start: {
            line: 348,
            column: 28
          },
          end: {
            line: 348,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 348,
            column: 28
          },
          end: {
            line: 348,
            column: 58
          }
        }, {
          start: {
            line: 348,
            column: 62
          },
          end: {
            line: 348,
            column: 64
          }
        }],
        line: 348
      },
      "36": {
        loc: {
          start: {
            line: 349,
            column: 15
          },
          end: {
            line: 349,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 349,
            column: 15
          },
          end: {
            line: 349,
            column: 65
          }
        }, {
          start: {
            line: 349,
            column: 69
          },
          end: {
            line: 349,
            column: 73
          }
        }],
        line: 349
      },
      "37": {
        loc: {
          start: {
            line: 352,
            column: 24
          },
          end: {
            line: 352,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 352,
            column: 24
          },
          end: {
            line: 352,
            column: 54
          }
        }, {
          start: {
            line: 352,
            column: 58
          },
          end: {
            line: 352,
            column: 60
          }
        }],
        line: 352
      },
      "38": {
        loc: {
          start: {
            line: 372,
            column: 24
          },
          end: {
            line: 372,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 372,
            column: 24
          },
          end: {
            line: 372,
            column: 54
          }
        }, {
          start: {
            line: 372,
            column: 58
          },
          end: {
            line: 372,
            column: 60
          }
        }],
        line: 372
      },
      "39": {
        loc: {
          start: {
            line: 375,
            column: 8
          },
          end: {
            line: 377,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 375,
            column: 8
          },
          end: {
            line: 377,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 375
      },
      "40": {
        loc: {
          start: {
            line: 392,
            column: 12
          },
          end: {
            line: 394,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 392,
            column: 12
          },
          end: {
            line: 394,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 392
      },
      "41": {
        loc: {
          start: {
            line: 408,
            column: 8
          },
          end: {
            line: 408,
            column: 39
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 408,
            column: 8
          },
          end: {
            line: 408,
            column: 39
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 408
      },
      "42": {
        loc: {
          start: {
            line: 427,
            column: 12
          },
          end: {
            line: 429,
            column: 58
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 427,
            column: 12
          },
          end: {
            line: 429,
            column: 58
          }
        }, {
          start: {
            line: 428,
            column: 17
          },
          end: {
            line: 429,
            column: 58
          }
        }],
        line: 427
      },
      "43": {
        loc: {
          start: {
            line: 428,
            column: 17
          },
          end: {
            line: 429,
            column: 58
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 428,
            column: 17
          },
          end: {
            line: 429,
            column: 58
          }
        }, {
          start: {
            line: 429,
            column: 17
          },
          end: {
            line: 429,
            column: 58
          }
        }],
        line: 428
      },
      "44": {
        loc: {
          start: {
            line: 429,
            column: 17
          },
          end: {
            line: 429,
            column: 58
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 429,
            column: 17
          },
          end: {
            line: 429,
            column: 58
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 429
      },
      "45": {
        loc: {
          start: {
            line: 434,
            column: 12
          },
          end: {
            line: 436,
            column: 59
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 434,
            column: 12
          },
          end: {
            line: 436,
            column: 59
          }
        }, {
          start: {
            line: 435,
            column: 17
          },
          end: {
            line: 436,
            column: 59
          }
        }],
        line: 434
      },
      "46": {
        loc: {
          start: {
            line: 435,
            column: 17
          },
          end: {
            line: 436,
            column: 59
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 435,
            column: 17
          },
          end: {
            line: 436,
            column: 59
          }
        }, {
          start: {
            line: 436,
            column: 17
          },
          end: {
            line: 436,
            column: 59
          }
        }],
        line: 435
      },
      "47": {
        loc: {
          start: {
            line: 436,
            column: 17
          },
          end: {
            line: 436,
            column: 59
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 436,
            column: 17
          },
          end: {
            line: 436,
            column: 59
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 436
      },
      "48": {
        loc: {
          start: {
            line: 441,
            column: 12
          },
          end: {
            line: 442,
            column: 58
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 441,
            column: 12
          },
          end: {
            line: 442,
            column: 58
          }
        }, {
          start: {
            line: 442,
            column: 17
          },
          end: {
            line: 442,
            column: 58
          }
        }],
        line: 441
      },
      "49": {
        loc: {
          start: {
            line: 442,
            column: 17
          },
          end: {
            line: 442,
            column: 58
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 442,
            column: 17
          },
          end: {
            line: 442,
            column: 58
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 442
      },
      "50": {
        loc: {
          start: {
            line: 445,
            column: 8
          },
          end: {
            line: 458,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 446,
            column: 12
          },
          end: {
            line: 448,
            column: 22
          }
        }, {
          start: {
            line: 449,
            column: 12
          },
          end: {
            line: 451,
            column: 22
          }
        }, {
          start: {
            line: 452,
            column: 12
          },
          end: {
            line: 454,
            column: 22
          }
        }, {
          start: {
            line: 455,
            column: 12
          },
          end: {
            line: 457,
            column: 22
          }
        }],
        line: 445
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0
    },
    b: {
      "0": [0],
      "1": [0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0],
      "9": [0],
      "10": [0, 0],
      "11": [0],
      "12": [0, 0],
      "13": [0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0, 0, 0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0, 0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/stefanbekker/projects/fancy-planties/src/lib/services/advanced-search.ts"],
      sourcesContent: ["import 'server-only';\n\nimport { plantSearchService } from './plant-search';\nimport { PlantInstanceQueries } from '@/lib/db/queries/plant-instances';\nimport type { \n  PlantInstanceFilter, \n  PlantInstanceSearch,\n  PlantSuggestion \n} from '@/lib/validation/plant-schemas';\nimport type { \n  EnhancedPlantInstance, \n  PlantInstanceSearchResult,\n  PlantInstanceSortField \n} from '@/lib/types/plant-instance-types';\n\n// Advanced search configuration\nexport interface AdvancedSearchConfig {\n  // Search behavior\n  enableFuzzySearch: boolean;\n  fuzzyThreshold: number;\n  maxSuggestions: number;\n  \n  // Performance settings\n  searchTimeout: number;\n  cacheResults: boolean;\n  cacheDuration: number;\n  \n  // Result highlighting\n  highlightMatches: boolean;\n  maxHighlights: number;\n}\n\n// Search preset interface\nexport interface SearchPreset {\n  id: string;\n  name: string;\n  description?: string;\n  filters: PlantInstanceFilter;\n  sortBy: PlantInstanceSortField;\n  sortOrder: 'asc' | 'desc';\n  userId: number;\n  isDefault?: boolean;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\n// Search history entry\nexport interface SearchHistoryEntry {\n  id: string;\n  query: string;\n  filters: Partial<PlantInstanceFilter>;\n  resultCount: number;\n  searchTime: number;\n  userId: number;\n  timestamp: Date;\n}\n\n// Advanced search result with metadata\nexport interface AdvancedSearchResult extends PlantInstanceSearchResult {\n  // Search metadata\n  searchId: string;\n  searchType: 'basic' | 'advanced' | 'fuzzy' | 'preset';\n  suggestions: string[];\n  relatedSearches: string[];\n  \n  // Performance metrics\n  databaseTime: number;\n  processingTime: number;\n  \n  // Result enhancements\n  highlightedResults?: EnhancedPlantInstance[];\n  facets?: SearchFacets;\n}\n\n// Search facets for filtering\nexport interface SearchFacets {\n  locations: Array<{ value: string; count: number }>;\n  plantTypes: Array<{ value: string; count: number; plantId: number }>;\n  careStatus: Array<{ value: string; count: number }>;\n  dateRanges: Array<{ value: string; count: number; range: [Date, Date] }>;\n}\n\n// Multi-field search criteria\nexport interface MultiFieldSearchCriteria {\n  // Text search fields\n  nickname?: string;\n  location?: string;\n  notes?: string;\n  plantName?: string;\n  \n  // Plant taxonomy fields\n  family?: string;\n  genus?: string;\n  species?: string;\n  commonName?: string;\n  \n  // Care-related fields\n  fertilizerSchedule?: string;\n  \n  // Combine with AND or OR logic\n  operator: 'AND' | 'OR';\n  \n  // Field weights for relevance scoring\n  fieldWeights?: Record<string, number>;\n}\n\nexport class AdvancedSearchService {\n  private config: AdvancedSearchConfig;\n  private searchHistory: Map<number, SearchHistoryEntry[]> = new Map();\n  private searchPresets: Map<number, SearchPreset[]> = new Map();\n  private resultCache: Map<string, { result: AdvancedSearchResult; expiry: Date }> = new Map();\n\n  constructor(config: Partial<AdvancedSearchConfig> = {}) {\n    this.config = {\n      enableFuzzySearch: true,\n      fuzzyThreshold: 0.6,\n      maxSuggestions: 10,\n      searchTimeout: 5000,\n      cacheResults: true,\n      cacheDuration: 5 * 60 * 1000, // 5 minutes\n      highlightMatches: true,\n      maxHighlights: 3,\n      ...config,\n    };\n  }\n\n  // Multi-field search across all plant instance data\n  async multiFieldSearch(\n    criteria: MultiFieldSearchCriteria,\n    userId: number,\n    options: {\n      limit?: number;\n      offset?: number;\n      sortBy?: PlantInstanceSortField;\n      sortOrder?: 'asc' | 'desc';\n    } = {}\n  ): Promise<AdvancedSearchResult> {\n    const startTime = Date.now();\n    const searchId = this.generateSearchId();\n\n    try {\n      // Build search filters based on criteria\n      const filters = this.buildFiltersFromCriteria(criteria, userId);\n      \n      // Perform database search\n      const dbStartTime = Date.now();\n      const searchResult = await PlantInstanceQueries.getWithFilters({\n        ...filters,\n        limit: options.limit || 20,\n        offset: options.offset || 0,\n      });\n      const databaseTime = Date.now() - dbStartTime;\n\n      // Apply fuzzy search if enabled and query is text-based\n      let enhancedResults = searchResult.instances;\n      if (this.config.enableFuzzySearch && this.hasTextCriteria(criteria)) {\n        enhancedResults = await this.applyFuzzySearch(\n          enhancedResults,\n          criteria,\n          searchResult.totalCount\n        );\n      }\n\n      // Generate search suggestions\n      const suggestions = await this.generateSearchSuggestions(criteria, userId);\n      \n      // Generate related searches\n      const relatedSearches = await this.generateRelatedSearches(criteria, userId);\n      \n      // Calculate facets\n      const facets = await this.calculateSearchFacets(enhancedResults, userId);\n      \n      // Highlight matches if enabled\n      const highlightedResults = this.config.highlightMatches\n        ? this.highlightSearchMatches(enhancedResults, criteria)\n        : undefined;\n\n      const processingTime = Date.now() - startTime - databaseTime;\n\n      const result: AdvancedSearchResult = {\n        ...searchResult,\n        instances: enhancedResults,\n        searchId,\n        searchType: 'advanced',\n        suggestions,\n        relatedSearches,\n        databaseTime,\n        processingTime,\n        highlightedResults,\n        facets,\n      };\n\n      // Cache result if enabled\n      if (this.config.cacheResults) {\n        this.cacheSearchResult(searchId, result);\n      }\n\n      // Add to search history\n      await this.addToSearchHistory(userId, criteria, result);\n\n      return result;\n    } catch (error) {\n      console.error('Multi-field search failed:', error);\n      throw new Error('Advanced search failed');\n    }\n  }\n\n  // Smart search with auto-detection of search intent\n  async smartSearch(\n    query: string,\n    userId: number,\n    options: {\n      limit?: number;\n      offset?: number;\n      autoCorrect?: boolean;\n      includeInactive?: boolean;\n    } = {}\n  ): Promise<AdvancedSearchResult> {\n    const startTime = Date.now();\n    const searchId = this.generateSearchId();\n\n    try {\n      // Analyze query to determine search intent\n      const searchIntent = this.analyzeSearchIntent(query);\n      \n      // Build search criteria based on intent\n      const criteria = this.buildCriteriaFromIntent(searchIntent, query);\n      \n      // Perform multi-field search\n      const result = await this.multiFieldSearch(criteria, userId, options);\n      \n      // Update result metadata\n      result.searchId = searchId;\n      result.searchType = searchIntent.type;\n\n      return result;\n    } catch (error) {\n      console.error('Smart search failed:', error);\n      throw new Error('Smart search failed');\n    }\n  }\n\n  // Search with saved presets\n  async searchWithPreset(\n    presetId: string,\n    userId: number,\n    overrides: Partial<PlantInstanceFilter> = {}\n  ): Promise<AdvancedSearchResult> {\n    const preset = await this.getSearchPreset(presetId, userId);\n    if (!preset) {\n      throw new Error('Search preset not found');\n    }\n\n    const filters: PlantInstanceFilter = {\n      ...preset.filters,\n      ...overrides,\n    };\n\n    const searchResult = await PlantInstanceQueries.getWithFilters(filters);\n    \n    const result: AdvancedSearchResult = {\n      ...searchResult,\n      searchId: this.generateSearchId(),\n      searchType: 'preset',\n      suggestions: [],\n      relatedSearches: [],\n      databaseTime: searchResult.searchTime,\n      processingTime: 0,\n    };\n\n    return result;\n  }\n\n  // Get search suggestions based on partial input\n  async getSearchSuggestions(\n    partialQuery: string,\n    userId: number,\n    limit: number = 5\n  ): Promise<string[]> {\n    if (partialQuery.length < 2) return [];\n\n    const suggestions = new Set<string>();\n\n    // Get suggestions from search history\n    const historySuggestions = this.getHistorySuggestions(partialQuery, userId);\n    historySuggestions.forEach(s => suggestions.add(s));\n\n    // Get suggestions from plant taxonomy\n    const taxonomySuggestions = await plantSearchService.getSearchSuggestions(\n      partialQuery,\n      Math.ceil(limit / 2)\n    );\n    taxonomySuggestions.forEach(s => suggestions.add(s));\n\n    // Get suggestions from plant instance data\n    const instanceSuggestions = await this.getInstanceSuggestions(partialQuery, userId);\n    instanceSuggestions.forEach(s => suggestions.add(s));\n\n    return Array.from(suggestions).slice(0, limit);\n  }\n\n  // Save search as preset\n  async saveSearchPreset(\n    name: string,\n    description: string,\n    filters: PlantInstanceFilter,\n    sortBy: PlantInstanceSortField,\n    sortOrder: 'asc' | 'desc',\n    userId: number,\n    isDefault: boolean = false\n  ): Promise<SearchPreset> {\n    const preset: SearchPreset = {\n      id: this.generatePresetId(),\n      name,\n      description,\n      filters,\n      sortBy,\n      sortOrder,\n      userId,\n      isDefault,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n\n    // Store preset (in a real app, this would be in the database)\n    const userPresets = this.searchPresets.get(userId) || [];\n    userPresets.push(preset);\n    this.searchPresets.set(userId, userPresets);\n\n    return preset;\n  }\n\n  // Get user's search presets\n  async getUserSearchPresets(userId: number): Promise<SearchPreset[]> {\n    return this.searchPresets.get(userId) || [];\n  }\n\n  // Get search history for user\n  async getSearchHistory(userId: number, limit: number = 10): Promise<SearchHistoryEntry[]> {\n    const history = this.searchHistory.get(userId) || [];\n    return history\n      .sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime())\n      .slice(0, limit);\n  }\n\n  // Clear search history\n  async clearSearchHistory(userId: number): Promise<void> {\n    this.searchHistory.delete(userId);\n  }\n\n  // Private helper methods\n\n  private buildFiltersFromCriteria(\n    criteria: MultiFieldSearchCriteria,\n    userId: number\n  ): PlantInstanceFilter {\n    const filters: PlantInstanceFilter = {\n      userId,\n      overdueOnly: false,\n      limit: 20,\n      offset: 0,\n    };\n\n    // Add location filter if specified\n    if (criteria.location) {\n      filters.location = criteria.location;\n    }\n\n    // For now, we'll use the basic search functionality\n    // In a full implementation, we'd need to extend the database queries\n    // to support multi-field search with AND/OR operators\n\n    return filters;\n  }\n\n  private hasTextCriteria(criteria: MultiFieldSearchCriteria): boolean {\n    return !!(\n      criteria.nickname ||\n      criteria.location ||\n      criteria.notes ||\n      criteria.plantName ||\n      criteria.commonName\n    );\n  }\n\n  private async applyFuzzySearch(\n    instances: EnhancedPlantInstance[],\n    criteria: MultiFieldSearchCriteria,\n    totalCount: number\n  ): Promise<EnhancedPlantInstance[]> {\n    // Convert instances to searchable format\n    const searchableData: PlantSuggestion[] = instances.map(instance => ({\n      id: instance.id,\n      family: instance.plant.family,\n      genus: instance.plant.genus,\n      species: instance.plant.species,\n      commonName: instance.plant.commonName,\n      isVerified: instance.plant.isVerified,\n    }));\n\n    // Initialize fuzzy search\n    await plantSearchService.initializeIndex(searchableData);\n\n    // Perform fuzzy search if we have a text query\n    const textQuery = this.extractTextQuery(criteria);\n    if (textQuery) {\n      const fuzzyResults = plantSearchService.fuzzySearch(textQuery, instances.length);\n      \n      // Re-order instances based on fuzzy search scores\n      const scoreMap = new Map(fuzzyResults.map(r => [r.item.id, r.score]));\n      \n      return instances.sort((a, b) => {\n        const scoreA = scoreMap.get(a.id) || 1;\n        const scoreB = scoreMap.get(b.id) || 1;\n        return scoreA - scoreB; // Lower score = better match\n      });\n    }\n\n    return instances;\n  }\n\n  private extractTextQuery(criteria: MultiFieldSearchCriteria): string {\n    const parts = [\n      criteria.nickname,\n      criteria.location,\n      criteria.plantName,\n      criteria.commonName,\n    ].filter(Boolean);\n\n    return parts.join(' ');\n  }\n\n  private async generateSearchSuggestions(\n    criteria: MultiFieldSearchCriteria,\n    userId: number\n  ): Promise<string[]> {\n    const suggestions: string[] = [];\n    \n    // Add suggestions based on search history\n    const history = await this.getSearchHistory(userId, 5);\n    history.forEach(entry => {\n      if (entry.query && !suggestions.includes(entry.query)) {\n        suggestions.push(entry.query);\n      }\n    });\n\n    return suggestions.slice(0, this.config.maxSuggestions);\n  }\n\n  private async generateRelatedSearches(\n    criteria: MultiFieldSearchCriteria,\n    userId: number\n  ): Promise<string[]> {\n    // Generate related searches based on criteria\n    const related: string[] = [];\n    \n    if (criteria.location) {\n      related.push(`plants in ${criteria.location}`);\n    }\n    \n    if (criteria.plantName) {\n      related.push(`${criteria.plantName} care`);\n      related.push(`${criteria.plantName} fertilizer`);\n    }\n\n    return related.slice(0, 3);\n  }\n\n  private async calculateSearchFacets(\n    instances: EnhancedPlantInstance[],\n    userId: number\n  ): Promise<SearchFacets> {\n    // Calculate facets from search results\n    const locationCounts = new Map<string, number>();\n    const plantTypeCounts = new Map<string, { count: number; plantId: number }>();\n    const careStatusCounts = new Map<string, number>();\n\n    instances.forEach(instance => {\n      // Location facets\n      if (instance.location) {\n        locationCounts.set(instance.location, (locationCounts.get(instance.location) || 0) + 1);\n      }\n\n      // Plant type facets\n      const plantType = instance.plant.commonName;\n      if (plantType) {\n        const existing = plantTypeCounts.get(plantType);\n        plantTypeCounts.set(plantType, {\n          count: (existing?.count || 0) + 1,\n          plantId: instance.plant.id,\n        });\n      }\n\n      // Care status facets\n      careStatusCounts.set(\n        instance.careStatus,\n        (careStatusCounts.get(instance.careStatus) || 0) + 1\n      );\n    });\n\n    return {\n      locations: Array.from(locationCounts.entries()).map(([value, count]) => ({ value, count })),\n      plantTypes: Array.from(plantTypeCounts.entries()).map(([value, data]) => ({\n        value,\n        count: data.count,\n        plantId: data.plantId,\n      })),\n      careStatus: Array.from(careStatusCounts.entries()).map(([value, count]) => ({ value, count })),\n      dateRanges: [], // Would implement date range facets in full version\n    };\n  }\n\n  private highlightSearchMatches(\n    instances: EnhancedPlantInstance[],\n    criteria: MultiFieldSearchCriteria\n  ): EnhancedPlantInstance[] {\n    // In a full implementation, this would highlight matching text\n    // For now, just return the instances as-is\n    return instances;\n  }\n\n  private analyzeSearchIntent(query: string): { type: 'basic' | 'fuzzy'; confidence: number } {\n    // Simple intent analysis - in a full implementation this would be more sophisticated\n    const hasSpecialChars = /[*?~]/.test(query);\n    const hasQuotes = /[\"']/.test(query);\n    const wordCount = query.trim().split(/\\s+/).length;\n\n    if (hasSpecialChars || hasQuotes) {\n      return { type: 'basic', confidence: 0.9 };\n    }\n\n    if (wordCount > 3) {\n      return { type: 'fuzzy', confidence: 0.7 };\n    }\n\n    return { type: 'basic', confidence: 0.6 };\n  }\n\n  private buildCriteriaFromIntent(\n    intent: { type: string; confidence: number },\n    query: string\n  ): MultiFieldSearchCriteria {\n    // Build search criteria based on detected intent\n    return {\n      nickname: query,\n      plantName: query,\n      location: query,\n      operator: 'OR',\n      fieldWeights: {\n        nickname: 1.0,\n        plantName: 0.8,\n        location: 0.6,\n        notes: 0.4,\n      },\n    };\n  }\n\n  private async getSearchPreset(presetId: string, userId: number): Promise<SearchPreset | null> {\n    const userPresets = this.searchPresets.get(userId) || [];\n    return userPresets.find(preset => preset.id === presetId) || null;\n  }\n\n  private getHistorySuggestions(partialQuery: string, userId: number): string[] {\n    const history = this.searchHistory.get(userId) || [];\n    const lowerQuery = partialQuery.toLowerCase();\n    \n    return history\n      .filter(entry => entry.query.toLowerCase().includes(lowerQuery))\n      .map(entry => entry.query)\n      .slice(0, 3);\n  }\n\n  private async getInstanceSuggestions(partialQuery: string, userId: number): Promise<string[]> {\n    // Get suggestions from user's plant instances\n    // This would query the database for matching nicknames, locations, etc.\n    // For now, return empty array\n    return [];\n  }\n\n  private async addToSearchHistory(\n    userId: number,\n    criteria: MultiFieldSearchCriteria,\n    result: AdvancedSearchResult\n  ): Promise<void> {\n    const entry: SearchHistoryEntry = {\n      id: this.generateSearchId(),\n      query: this.extractTextQuery(criteria),\n      filters: {}, // Would extract relevant filters\n      resultCount: result.totalCount,\n      searchTime: result.searchTime,\n      userId,\n      timestamp: new Date(),\n    };\n\n    const history = this.searchHistory.get(userId) || [];\n    history.unshift(entry);\n    \n    // Keep only last 50 searches\n    if (history.length > 50) {\n      history.splice(50);\n    }\n    \n    this.searchHistory.set(userId, history);\n  }\n\n  private cacheSearchResult(searchId: string, result: AdvancedSearchResult): void {\n    const expiry = new Date(Date.now() + this.config.cacheDuration);\n    this.resultCache.set(searchId, { result, expiry });\n    \n    // Clean up expired cache entries\n    this.cleanupCache();\n  }\n\n  private cleanupCache(): void {\n    const now = new Date();\n    for (const [key, { expiry }] of this.resultCache.entries()) {\n      if (expiry < now) {\n        this.resultCache.delete(key);\n      }\n    }\n  }\n\n  private generateSearchId(): string {\n    return `search_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  private generatePresetId(): string {\n    return `preset_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n}\n\n// Export singleton instance\nexport const advancedSearchService = new AdvancedSearchService();\n\n// Search result highlighting utilities\nexport const searchHighlightUtils = {\n  // Highlight matching terms in text\n  highlightText: (text: string, terms: string[]): string => {\n    if (!terms.length) return text;\n    \n    let highlightedText = text;\n    terms.forEach(term => {\n      const regex = new RegExp(`(${term})`, 'gi');\n      highlightedText = highlightedText.replace(regex, '<mark class=\"bg-yellow-200\">$1</mark>');\n    });\n    \n    return highlightedText;\n  },\n\n  // Extract search terms from query\n  extractSearchTerms: (query: string): string[] => {\n    return query\n      .toLowerCase()\n      .split(/[\\s,\\-_]+/)\n      .filter(term => term.length > 1)\n      .slice(0, 5);\n  },\n\n  // Calculate relevance score for search result\n  calculateRelevanceScore: (\n    instance: EnhancedPlantInstance,\n    searchTerms: string[]\n  ): number => {\n    let score = 0;\n    const lowerTerms = searchTerms.map(t => t.toLowerCase());\n    \n    // Check nickname matches\n    const nickname = instance.nickname.toLowerCase();\n    lowerTerms.forEach(term => {\n      if (nickname === term) score += 100;\n      else if (nickname.startsWith(term)) score += 80;\n      else if (nickname.includes(term)) score += 60;\n    });\n    \n    // Check plant name matches\n    const plantName = instance.plant.commonName.toLowerCase();\n    lowerTerms.forEach(term => {\n      if (plantName === term) score += 90;\n      else if (plantName.startsWith(term)) score += 70;\n      else if (plantName.includes(term)) score += 50;\n    });\n    \n    // Check location matches\n    const location = instance.location.toLowerCase();\n    lowerTerms.forEach(term => {\n      if (location === term) score += 70;\n      else if (location.includes(term)) score += 40;\n    });\n    \n    // Boost based on care urgency (more urgent = higher relevance)\n    switch (instance.careUrgency) {\n      case 'critical': score += 20; break;\n      case 'high': score += 15; break;\n      case 'medium': score += 10; break;\n      case 'low': score += 5; break;\n    }\n    \n    return Math.min(score, 100);\n  },\n};"],
      names: ["AdvancedSearchService", "advancedSearchService", "searchHighlightUtils", "config", "searchHistory", "Map", "searchPresets", "resultCache", "enableFuzzySearch", "fuzzyThreshold", "maxSuggestions", "searchTimeout", "cacheResults", "cacheDuration", "highlightMatches", "maxHighlights", "multiFieldSearch", "criteria", "userId", "options", "startTime", "Date", "now", "searchId", "generateSearchId", "filters", "buildFiltersFromCriteria", "dbStartTime", "searchResult", "PlantInstanceQueries", "getWithFilters", "limit", "offset", "databaseTime", "enhancedResults", "instances", "hasTextCriteria", "applyFuzzySearch", "totalCount", "suggestions", "generateSearchSuggestions", "relatedSearches", "generateRelatedSearches", "facets", "calculateSearchFacets", "highlightedResults", "highlightSearchMatches", "undefined", "processingTime", "result", "searchType", "cacheSearchResult", "addToSearchHistory", "error", "console", "Error", "smartSearch", "query", "searchIntent", "analyzeSearchIntent", "buildCriteriaFromIntent", "type", "searchWithPreset", "presetId", "overrides", "preset", "getSearchPreset", "searchTime", "getSearchSuggestions", "partialQuery", "length", "Set", "historySuggestions", "getHistorySuggestions", "forEach", "s", "add", "taxonomySuggestions", "plantSearchService", "Math", "ceil", "instanceSuggestions", "getInstanceSuggestions", "Array", "from", "slice", "saveSearchPreset", "name", "description", "sortBy", "sortOrder", "isDefault", "id", "generatePresetId", "createdAt", "updatedAt", "userPresets", "get", "push", "set", "getUserSearchPresets", "getSearchHistory", "history", "sort", "a", "b", "timestamp", "getTime", "clearSearchHistory", "delete", "overdueOnly", "location", "nickname", "notes", "plantName", "commonName", "searchableData", "map", "instance", "family", "plant", "genus", "species", "isVerified", "initializeIndex", "textQuery", "extractTextQuery", "fuzzyResults", "fuzzySearch", "scoreMap", "r", "item", "score", "scoreA", "scoreB", "parts", "filter", "Boolean", "join", "entry", "includes", "related", "locationCounts", "plantTypeCounts", "careStatusCounts", "plantType", "existing", "count", "plantId", "careStatus", "locations", "entries", "value", "plantTypes", "data", "dateRanges", "hasSpecialChars", "test", "hasQuotes", "wordCount", "trim", "split", "confidence", "intent", "operator", "fieldWeights", "find", "lowerQuery", "toLowerCase", "resultCount", "unshift", "splice", "expiry", "cleanupCache", "key", "random", "toString", "substr", "highlightText", "text", "terms", "highlightedText", "term", "regex", "RegExp", "replace", "extractSearchTerms", "calculateRelevanceScore", "searchTerms", "lowerTerms", "t", "startsWith", "careUrgency", "min"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "d7b78c7134a5615d1e5f377bd8b4bbba724d78a5"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_17bjkc2tov = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_17bjkc2tov();
cov_17bjkc2tov().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_17bjkc2tov().f[0]++;
  cov_17bjkc2tov().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_17bjkc2tov().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_17bjkc2tov().s[3]++;
_export(exports, {
  get AdvancedSearchService() {
    /* istanbul ignore next */
    cov_17bjkc2tov().f[1]++;
    cov_17bjkc2tov().s[4]++;
    return AdvancedSearchService;
  },
  get advancedSearchService() {
    /* istanbul ignore next */
    cov_17bjkc2tov().f[2]++;
    cov_17bjkc2tov().s[5]++;
    return advancedSearchService;
  },
  get searchHighlightUtils() {
    /* istanbul ignore next */
    cov_17bjkc2tov().f[3]++;
    cov_17bjkc2tov().s[6]++;
    return searchHighlightUtils;
  }
});
/* istanbul ignore next */
cov_17bjkc2tov().s[7]++;
require("server-only");
const _plantsearch =
/* istanbul ignore next */
(cov_17bjkc2tov().s[8]++, require("./plant-search"));
const _plantinstances =
/* istanbul ignore next */
(cov_17bjkc2tov().s[9]++, require("../db/queries/plant-instances"));
class AdvancedSearchService {
  constructor(config =
  /* istanbul ignore next */
  (cov_17bjkc2tov().b[0][0]++, {})) {
    /* istanbul ignore next */
    cov_17bjkc2tov().f[4]++;
    cov_17bjkc2tov().s[10]++;
    this.searchHistory = new Map();
    /* istanbul ignore next */
    cov_17bjkc2tov().s[11]++;
    this.searchPresets = new Map();
    /* istanbul ignore next */
    cov_17bjkc2tov().s[12]++;
    this.resultCache = new Map();
    /* istanbul ignore next */
    cov_17bjkc2tov().s[13]++;
    this.config = {
      enableFuzzySearch: true,
      fuzzyThreshold: 0.6,
      maxSuggestions: 10,
      searchTimeout: 5000,
      cacheResults: true,
      cacheDuration: 5 * 60 * 1000,
      highlightMatches: true,
      maxHighlights: 3,
      ...config
    };
  }
  // Multi-field search across all plant instance data
  async multiFieldSearch(criteria, userId, options =
  /* istanbul ignore next */
  (cov_17bjkc2tov().b[1][0]++, {})) {
    /* istanbul ignore next */
    cov_17bjkc2tov().f[5]++;
    const startTime =
    /* istanbul ignore next */
    (cov_17bjkc2tov().s[14]++, Date.now());
    const searchId =
    /* istanbul ignore next */
    (cov_17bjkc2tov().s[15]++, this.generateSearchId());
    /* istanbul ignore next */
    cov_17bjkc2tov().s[16]++;
    try {
      // Build search filters based on criteria
      const filters =
      /* istanbul ignore next */
      (cov_17bjkc2tov().s[17]++, this.buildFiltersFromCriteria(criteria, userId));
      // Perform database search
      const dbStartTime =
      /* istanbul ignore next */
      (cov_17bjkc2tov().s[18]++, Date.now());
      const searchResult =
      /* istanbul ignore next */
      (cov_17bjkc2tov().s[19]++, await _plantinstances.PlantInstanceQueries.getWithFilters({
        ...filters,
        limit:
        /* istanbul ignore next */
        (cov_17bjkc2tov().b[2][0]++, options.limit) ||
        /* istanbul ignore next */
        (cov_17bjkc2tov().b[2][1]++, 20),
        offset:
        /* istanbul ignore next */
        (cov_17bjkc2tov().b[3][0]++, options.offset) ||
        /* istanbul ignore next */
        (cov_17bjkc2tov().b[3][1]++, 0)
      }));
      const databaseTime =
      /* istanbul ignore next */
      (cov_17bjkc2tov().s[20]++, Date.now() - dbStartTime);
      // Apply fuzzy search if enabled and query is text-based
      let enhancedResults =
      /* istanbul ignore next */
      (cov_17bjkc2tov().s[21]++, searchResult.instances);
      /* istanbul ignore next */
      cov_17bjkc2tov().s[22]++;
      if (
      /* istanbul ignore next */
      (cov_17bjkc2tov().b[5][0]++, this.config.enableFuzzySearch) &&
      /* istanbul ignore next */
      (cov_17bjkc2tov().b[5][1]++, this.hasTextCriteria(criteria))) {
        /* istanbul ignore next */
        cov_17bjkc2tov().b[4][0]++;
        cov_17bjkc2tov().s[23]++;
        enhancedResults = await this.applyFuzzySearch(enhancedResults, criteria, searchResult.totalCount);
      } else
      /* istanbul ignore next */
      {
        cov_17bjkc2tov().b[4][1]++;
      }
      // Generate search suggestions
      const suggestions =
      /* istanbul ignore next */
      (cov_17bjkc2tov().s[24]++, await this.generateSearchSuggestions(criteria, userId));
      // Generate related searches
      const relatedSearches =
      /* istanbul ignore next */
      (cov_17bjkc2tov().s[25]++, await this.generateRelatedSearches(criteria, userId));
      // Calculate facets
      const facets =
      /* istanbul ignore next */
      (cov_17bjkc2tov().s[26]++, await this.calculateSearchFacets(enhancedResults, userId));
      // Highlight matches if enabled
      const highlightedResults =
      /* istanbul ignore next */
      (cov_17bjkc2tov().s[27]++, this.config.highlightMatches ?
      /* istanbul ignore next */
      (cov_17bjkc2tov().b[6][0]++, this.highlightSearchMatches(enhancedResults, criteria)) :
      /* istanbul ignore next */
      (cov_17bjkc2tov().b[6][1]++, undefined));
      const processingTime =
      /* istanbul ignore next */
      (cov_17bjkc2tov().s[28]++, Date.now() - startTime - databaseTime);
      const result =
      /* istanbul ignore next */
      (cov_17bjkc2tov().s[29]++, {
        ...searchResult,
        instances: enhancedResults,
        searchId,
        searchType: 'advanced',
        suggestions,
        relatedSearches,
        databaseTime,
        processingTime,
        highlightedResults,
        facets
      });
      // Cache result if enabled
      /* istanbul ignore next */
      cov_17bjkc2tov().s[30]++;
      if (this.config.cacheResults) {
        /* istanbul ignore next */
        cov_17bjkc2tov().b[7][0]++;
        cov_17bjkc2tov().s[31]++;
        this.cacheSearchResult(searchId, result);
      } else
      /* istanbul ignore next */
      {
        cov_17bjkc2tov().b[7][1]++;
      }
      // Add to search history
      cov_17bjkc2tov().s[32]++;
      await this.addToSearchHistory(userId, criteria, result);
      /* istanbul ignore next */
      cov_17bjkc2tov().s[33]++;
      return result;
    } catch (error) {
      /* istanbul ignore next */
      cov_17bjkc2tov().s[34]++;
      console.error('Multi-field search failed:', error);
      /* istanbul ignore next */
      cov_17bjkc2tov().s[35]++;
      throw new Error('Advanced search failed');
    }
  }
  // Smart search with auto-detection of search intent
  async smartSearch(query, userId, options =
  /* istanbul ignore next */
  (cov_17bjkc2tov().b[8][0]++, {})) {
    /* istanbul ignore next */
    cov_17bjkc2tov().f[6]++;
    const startTime =
    /* istanbul ignore next */
    (cov_17bjkc2tov().s[36]++, Date.now());
    const searchId =
    /* istanbul ignore next */
    (cov_17bjkc2tov().s[37]++, this.generateSearchId());
    /* istanbul ignore next */
    cov_17bjkc2tov().s[38]++;
    try {
      // Analyze query to determine search intent
      const searchIntent =
      /* istanbul ignore next */
      (cov_17bjkc2tov().s[39]++, this.analyzeSearchIntent(query));
      // Build search criteria based on intent
      const criteria =
      /* istanbul ignore next */
      (cov_17bjkc2tov().s[40]++, this.buildCriteriaFromIntent(searchIntent, query));
      // Perform multi-field search
      const result =
      /* istanbul ignore next */
      (cov_17bjkc2tov().s[41]++, await this.multiFieldSearch(criteria, userId, options));
      // Update result metadata
      /* istanbul ignore next */
      cov_17bjkc2tov().s[42]++;
      result.searchId = searchId;
      /* istanbul ignore next */
      cov_17bjkc2tov().s[43]++;
      result.searchType = searchIntent.type;
      /* istanbul ignore next */
      cov_17bjkc2tov().s[44]++;
      return result;
    } catch (error) {
      /* istanbul ignore next */
      cov_17bjkc2tov().s[45]++;
      console.error('Smart search failed:', error);
      /* istanbul ignore next */
      cov_17bjkc2tov().s[46]++;
      throw new Error('Smart search failed');
    }
  }
  // Search with saved presets
  async searchWithPreset(presetId, userId, overrides =
  /* istanbul ignore next */
  (cov_17bjkc2tov().b[9][0]++, {})) {
    /* istanbul ignore next */
    cov_17bjkc2tov().f[7]++;
    const preset =
    /* istanbul ignore next */
    (cov_17bjkc2tov().s[47]++, await this.getSearchPreset(presetId, userId));
    /* istanbul ignore next */
    cov_17bjkc2tov().s[48]++;
    if (!preset) {
      /* istanbul ignore next */
      cov_17bjkc2tov().b[10][0]++;
      cov_17bjkc2tov().s[49]++;
      throw new Error('Search preset not found');
    } else
    /* istanbul ignore next */
    {
      cov_17bjkc2tov().b[10][1]++;
    }
    const filters =
    /* istanbul ignore next */
    (cov_17bjkc2tov().s[50]++, {
      ...preset.filters,
      ...overrides
    });
    const searchResult =
    /* istanbul ignore next */
    (cov_17bjkc2tov().s[51]++, await _plantinstances.PlantInstanceQueries.getWithFilters(filters));
    const result =
    /* istanbul ignore next */
    (cov_17bjkc2tov().s[52]++, {
      ...searchResult,
      searchId: this.generateSearchId(),
      searchType: 'preset',
      suggestions: [],
      relatedSearches: [],
      databaseTime: searchResult.searchTime,
      processingTime: 0
    });
    /* istanbul ignore next */
    cov_17bjkc2tov().s[53]++;
    return result;
  }
  // Get search suggestions based on partial input
  async getSearchSuggestions(partialQuery, userId, limit =
  /* istanbul ignore next */
  (cov_17bjkc2tov().b[11][0]++, 5)) {
    /* istanbul ignore next */
    cov_17bjkc2tov().f[8]++;
    cov_17bjkc2tov().s[54]++;
    if (partialQuery.length < 2) {
      /* istanbul ignore next */
      cov_17bjkc2tov().b[12][0]++;
      cov_17bjkc2tov().s[55]++;
      return [];
    } else
    /* istanbul ignore next */
    {
      cov_17bjkc2tov().b[12][1]++;
    }
    const suggestions =
    /* istanbul ignore next */
    (cov_17bjkc2tov().s[56]++, new Set());
    // Get suggestions from search history
    const historySuggestions =
    /* istanbul ignore next */
    (cov_17bjkc2tov().s[57]++, this.getHistorySuggestions(partialQuery, userId));
    /* istanbul ignore next */
    cov_17bjkc2tov().s[58]++;
    historySuggestions.forEach(s => {
      /* istanbul ignore next */
      cov_17bjkc2tov().f[9]++;
      cov_17bjkc2tov().s[59]++;
      return suggestions.add(s);
    });
    // Get suggestions from plant taxonomy
    const taxonomySuggestions =
    /* istanbul ignore next */
    (cov_17bjkc2tov().s[60]++, await _plantsearch.plantSearchService.getSearchSuggestions(partialQuery, Math.ceil(limit / 2)));
    /* istanbul ignore next */
    cov_17bjkc2tov().s[61]++;
    taxonomySuggestions.forEach(s => {
      /* istanbul ignore next */
      cov_17bjkc2tov().f[10]++;
      cov_17bjkc2tov().s[62]++;
      return suggestions.add(s);
    });
    // Get suggestions from plant instance data
    const instanceSuggestions =
    /* istanbul ignore next */
    (cov_17bjkc2tov().s[63]++, await this.getInstanceSuggestions(partialQuery, userId));
    /* istanbul ignore next */
    cov_17bjkc2tov().s[64]++;
    instanceSuggestions.forEach(s => {
      /* istanbul ignore next */
      cov_17bjkc2tov().f[11]++;
      cov_17bjkc2tov().s[65]++;
      return suggestions.add(s);
    });
    /* istanbul ignore next */
    cov_17bjkc2tov().s[66]++;
    return Array.from(suggestions).slice(0, limit);
  }
  // Save search as preset
  async saveSearchPreset(name, description, filters, sortBy, sortOrder, userId, isDefault =
  /* istanbul ignore next */
  (cov_17bjkc2tov().b[13][0]++, false)) {
    /* istanbul ignore next */
    cov_17bjkc2tov().f[12]++;
    const preset =
    /* istanbul ignore next */
    (cov_17bjkc2tov().s[67]++, {
      id: this.generatePresetId(),
      name,
      description,
      filters,
      sortBy,
      sortOrder,
      userId,
      isDefault,
      createdAt: new Date(),
      updatedAt: new Date()
    });
    // Store preset (in a real app, this would be in the database)
    const userPresets =
    /* istanbul ignore next */
    (cov_17bjkc2tov().s[68]++,
    /* istanbul ignore next */
    (cov_17bjkc2tov().b[14][0]++, this.searchPresets.get(userId)) ||
    /* istanbul ignore next */
    (cov_17bjkc2tov().b[14][1]++, []));
    /* istanbul ignore next */
    cov_17bjkc2tov().s[69]++;
    userPresets.push(preset);
    /* istanbul ignore next */
    cov_17bjkc2tov().s[70]++;
    this.searchPresets.set(userId, userPresets);
    /* istanbul ignore next */
    cov_17bjkc2tov().s[71]++;
    return preset;
  }
  // Get user's search presets
  async getUserSearchPresets(userId) {
    /* istanbul ignore next */
    cov_17bjkc2tov().f[13]++;
    cov_17bjkc2tov().s[72]++;
    return /* istanbul ignore next */(cov_17bjkc2tov().b[15][0]++, this.searchPresets.get(userId)) ||
    /* istanbul ignore next */
    (cov_17bjkc2tov().b[15][1]++, []);
  }
  // Get search history for user
  async getSearchHistory(userId, limit =
  /* istanbul ignore next */
  (cov_17bjkc2tov().b[16][0]++, 10)) {
    /* istanbul ignore next */
    cov_17bjkc2tov().f[14]++;
    const history =
    /* istanbul ignore next */
    (cov_17bjkc2tov().s[73]++,
    /* istanbul ignore next */
    (cov_17bjkc2tov().b[17][0]++, this.searchHistory.get(userId)) ||
    /* istanbul ignore next */
    (cov_17bjkc2tov().b[17][1]++, []));
    /* istanbul ignore next */
    cov_17bjkc2tov().s[74]++;
    return history.sort((a, b) => {
      /* istanbul ignore next */
      cov_17bjkc2tov().f[15]++;
      cov_17bjkc2tov().s[75]++;
      return b.timestamp.getTime() - a.timestamp.getTime();
    }).slice(0, limit);
  }
  // Clear search history
  async clearSearchHistory(userId) {
    /* istanbul ignore next */
    cov_17bjkc2tov().f[16]++;
    cov_17bjkc2tov().s[76]++;
    this.searchHistory.delete(userId);
  }
  // Private helper methods
  buildFiltersFromCriteria(criteria, userId) {
    /* istanbul ignore next */
    cov_17bjkc2tov().f[17]++;
    const filters =
    /* istanbul ignore next */
    (cov_17bjkc2tov().s[77]++, {
      userId,
      overdueOnly: false,
      limit: 20,
      offset: 0
    });
    // Add location filter if specified
    /* istanbul ignore next */
    cov_17bjkc2tov().s[78]++;
    if (criteria.location) {
      /* istanbul ignore next */
      cov_17bjkc2tov().b[18][0]++;
      cov_17bjkc2tov().s[79]++;
      filters.location = criteria.location;
    } else
    /* istanbul ignore next */
    {
      cov_17bjkc2tov().b[18][1]++;
    }
    // For now, we'll use the basic search functionality
    // In a full implementation, we'd need to extend the database queries
    // to support multi-field search with AND/OR operators
    cov_17bjkc2tov().s[80]++;
    return filters;
  }
  hasTextCriteria(criteria) {
    /* istanbul ignore next */
    cov_17bjkc2tov().f[18]++;
    cov_17bjkc2tov().s[81]++;
    return !!(
    /* istanbul ignore next */
    (cov_17bjkc2tov().b[19][0]++, criteria.nickname) ||
    /* istanbul ignore next */
    (cov_17bjkc2tov().b[19][1]++, criteria.location) ||
    /* istanbul ignore next */
    (cov_17bjkc2tov().b[19][2]++, criteria.notes) ||
    /* istanbul ignore next */
    (cov_17bjkc2tov().b[19][3]++, criteria.plantName) ||
    /* istanbul ignore next */
    (cov_17bjkc2tov().b[19][4]++, criteria.commonName));
  }
  async applyFuzzySearch(instances, criteria, totalCount) {
    /* istanbul ignore next */
    cov_17bjkc2tov().f[19]++;
    // Convert instances to searchable format
    const searchableData =
    /* istanbul ignore next */
    (cov_17bjkc2tov().s[82]++, instances.map(instance => {
      /* istanbul ignore next */
      cov_17bjkc2tov().f[20]++;
      cov_17bjkc2tov().s[83]++;
      return {
        id: instance.id,
        family: instance.plant.family,
        genus: instance.plant.genus,
        species: instance.plant.species,
        commonName: instance.plant.commonName,
        isVerified: instance.plant.isVerified
      };
    }));
    // Initialize fuzzy search
    /* istanbul ignore next */
    cov_17bjkc2tov().s[84]++;
    await _plantsearch.plantSearchService.initializeIndex(searchableData);
    // Perform fuzzy search if we have a text query
    const textQuery =
    /* istanbul ignore next */
    (cov_17bjkc2tov().s[85]++, this.extractTextQuery(criteria));
    /* istanbul ignore next */
    cov_17bjkc2tov().s[86]++;
    if (textQuery) {
      /* istanbul ignore next */
      cov_17bjkc2tov().b[20][0]++;
      const fuzzyResults =
      /* istanbul ignore next */
      (cov_17bjkc2tov().s[87]++, _plantsearch.plantSearchService.fuzzySearch(textQuery, instances.length));
      // Re-order instances based on fuzzy search scores
      const scoreMap =
      /* istanbul ignore next */
      (cov_17bjkc2tov().s[88]++, new Map(fuzzyResults.map(r => {
        /* istanbul ignore next */
        cov_17bjkc2tov().f[21]++;
        cov_17bjkc2tov().s[89]++;
        return [r.item.id, r.score];
      })));
      /* istanbul ignore next */
      cov_17bjkc2tov().s[90]++;
      return instances.sort((a, b) => {
        /* istanbul ignore next */
        cov_17bjkc2tov().f[22]++;
        const scoreA =
        /* istanbul ignore next */
        (cov_17bjkc2tov().s[91]++,
        /* istanbul ignore next */
        (cov_17bjkc2tov().b[21][0]++, scoreMap.get(a.id)) ||
        /* istanbul ignore next */
        (cov_17bjkc2tov().b[21][1]++, 1));
        const scoreB =
        /* istanbul ignore next */
        (cov_17bjkc2tov().s[92]++,
        /* istanbul ignore next */
        (cov_17bjkc2tov().b[22][0]++, scoreMap.get(b.id)) ||
        /* istanbul ignore next */
        (cov_17bjkc2tov().b[22][1]++, 1));
        /* istanbul ignore next */
        cov_17bjkc2tov().s[93]++;
        return scoreA - scoreB; // Lower score = better match
      });
    } else
    /* istanbul ignore next */
    {
      cov_17bjkc2tov().b[20][1]++;
    }
    cov_17bjkc2tov().s[94]++;
    return instances;
  }
  extractTextQuery(criteria) {
    /* istanbul ignore next */
    cov_17bjkc2tov().f[23]++;
    const parts =
    /* istanbul ignore next */
    (cov_17bjkc2tov().s[95]++, [criteria.nickname, criteria.location, criteria.plantName, criteria.commonName].filter(Boolean));
    /* istanbul ignore next */
    cov_17bjkc2tov().s[96]++;
    return parts.join(' ');
  }
  async generateSearchSuggestions(criteria, userId) {
    /* istanbul ignore next */
    cov_17bjkc2tov().f[24]++;
    const suggestions =
    /* istanbul ignore next */
    (cov_17bjkc2tov().s[97]++, []);
    // Add suggestions based on search history
    const history =
    /* istanbul ignore next */
    (cov_17bjkc2tov().s[98]++, await this.getSearchHistory(userId, 5));
    /* istanbul ignore next */
    cov_17bjkc2tov().s[99]++;
    history.forEach(entry => {
      /* istanbul ignore next */
      cov_17bjkc2tov().f[25]++;
      cov_17bjkc2tov().s[100]++;
      if (
      /* istanbul ignore next */
      (cov_17bjkc2tov().b[24][0]++, entry.query) &&
      /* istanbul ignore next */
      (cov_17bjkc2tov().b[24][1]++, !suggestions.includes(entry.query))) {
        /* istanbul ignore next */
        cov_17bjkc2tov().b[23][0]++;
        cov_17bjkc2tov().s[101]++;
        suggestions.push(entry.query);
      } else
      /* istanbul ignore next */
      {
        cov_17bjkc2tov().b[23][1]++;
      }
    });
    /* istanbul ignore next */
    cov_17bjkc2tov().s[102]++;
    return suggestions.slice(0, this.config.maxSuggestions);
  }
  async generateRelatedSearches(criteria, userId) {
    /* istanbul ignore next */
    cov_17bjkc2tov().f[26]++;
    // Generate related searches based on criteria
    const related =
    /* istanbul ignore next */
    (cov_17bjkc2tov().s[103]++, []);
    /* istanbul ignore next */
    cov_17bjkc2tov().s[104]++;
    if (criteria.location) {
      /* istanbul ignore next */
      cov_17bjkc2tov().b[25][0]++;
      cov_17bjkc2tov().s[105]++;
      related.push(`plants in ${criteria.location}`);
    } else
    /* istanbul ignore next */
    {
      cov_17bjkc2tov().b[25][1]++;
    }
    cov_17bjkc2tov().s[106]++;
    if (criteria.plantName) {
      /* istanbul ignore next */
      cov_17bjkc2tov().b[26][0]++;
      cov_17bjkc2tov().s[107]++;
      related.push(`${criteria.plantName} care`);
      /* istanbul ignore next */
      cov_17bjkc2tov().s[108]++;
      related.push(`${criteria.plantName} fertilizer`);
    } else
    /* istanbul ignore next */
    {
      cov_17bjkc2tov().b[26][1]++;
    }
    cov_17bjkc2tov().s[109]++;
    return related.slice(0, 3);
  }
  async calculateSearchFacets(instances, userId) {
    /* istanbul ignore next */
    cov_17bjkc2tov().f[27]++;
    // Calculate facets from search results
    const locationCounts =
    /* istanbul ignore next */
    (cov_17bjkc2tov().s[110]++, new Map());
    const plantTypeCounts =
    /* istanbul ignore next */
    (cov_17bjkc2tov().s[111]++, new Map());
    const careStatusCounts =
    /* istanbul ignore next */
    (cov_17bjkc2tov().s[112]++, new Map());
    /* istanbul ignore next */
    cov_17bjkc2tov().s[113]++;
    instances.forEach(instance => {
      /* istanbul ignore next */
      cov_17bjkc2tov().f[28]++;
      cov_17bjkc2tov().s[114]++;
      // Location facets
      if (instance.location) {
        /* istanbul ignore next */
        cov_17bjkc2tov().b[27][0]++;
        cov_17bjkc2tov().s[115]++;
        locationCounts.set(instance.location, (
        /* istanbul ignore next */
        (cov_17bjkc2tov().b[28][0]++, locationCounts.get(instance.location)) ||
        /* istanbul ignore next */
        (cov_17bjkc2tov().b[28][1]++, 0)) + 1);
      } else
      /* istanbul ignore next */
      {
        cov_17bjkc2tov().b[27][1]++;
      }
      // Plant type facets
      const plantType =
      /* istanbul ignore next */
      (cov_17bjkc2tov().s[116]++, instance.plant.commonName);
      /* istanbul ignore next */
      cov_17bjkc2tov().s[117]++;
      if (plantType) {
        /* istanbul ignore next */
        cov_17bjkc2tov().b[29][0]++;
        const existing =
        /* istanbul ignore next */
        (cov_17bjkc2tov().s[118]++, plantTypeCounts.get(plantType));
        /* istanbul ignore next */
        cov_17bjkc2tov().s[119]++;
        plantTypeCounts.set(plantType, {
          count: (
          /* istanbul ignore next */
          (cov_17bjkc2tov().b[30][0]++, existing?.count) ||
          /* istanbul ignore next */
          (cov_17bjkc2tov().b[30][1]++, 0)) + 1,
          plantId: instance.plant.id
        });
      } else
      /* istanbul ignore next */
      {
        cov_17bjkc2tov().b[29][1]++;
      }
      // Care status facets
      cov_17bjkc2tov().s[120]++;
      careStatusCounts.set(instance.careStatus, (
      /* istanbul ignore next */
      (cov_17bjkc2tov().b[31][0]++, careStatusCounts.get(instance.careStatus)) ||
      /* istanbul ignore next */
      (cov_17bjkc2tov().b[31][1]++, 0)) + 1);
    });
    /* istanbul ignore next */
    cov_17bjkc2tov().s[121]++;
    return {
      locations: Array.from(locationCounts.entries()).map(([value, count]) => {
        /* istanbul ignore next */
        cov_17bjkc2tov().f[29]++;
        cov_17bjkc2tov().s[122]++;
        return {
          value,
          count
        };
      }),
      plantTypes: Array.from(plantTypeCounts.entries()).map(([value, data]) => {
        /* istanbul ignore next */
        cov_17bjkc2tov().f[30]++;
        cov_17bjkc2tov().s[123]++;
        return {
          value,
          count: data.count,
          plantId: data.plantId
        };
      }),
      careStatus: Array.from(careStatusCounts.entries()).map(([value, count]) => {
        /* istanbul ignore next */
        cov_17bjkc2tov().f[31]++;
        cov_17bjkc2tov().s[124]++;
        return {
          value,
          count
        };
      }),
      dateRanges: []
    };
  }
  highlightSearchMatches(instances, criteria) {
    /* istanbul ignore next */
    cov_17bjkc2tov().f[32]++;
    cov_17bjkc2tov().s[125]++;
    // In a full implementation, this would highlight matching text
    // For now, just return the instances as-is
    return instances;
  }
  analyzeSearchIntent(query) {
    /* istanbul ignore next */
    cov_17bjkc2tov().f[33]++;
    // Simple intent analysis - in a full implementation this would be more sophisticated
    const hasSpecialChars =
    /* istanbul ignore next */
    (cov_17bjkc2tov().s[126]++, /[*?~]/.test(query));
    const hasQuotes =
    /* istanbul ignore next */
    (cov_17bjkc2tov().s[127]++, /["']/.test(query));
    const wordCount =
    /* istanbul ignore next */
    (cov_17bjkc2tov().s[128]++, query.trim().split(/\s+/).length);
    /* istanbul ignore next */
    cov_17bjkc2tov().s[129]++;
    if (
    /* istanbul ignore next */
    (cov_17bjkc2tov().b[33][0]++, hasSpecialChars) ||
    /* istanbul ignore next */
    (cov_17bjkc2tov().b[33][1]++, hasQuotes)) {
      /* istanbul ignore next */
      cov_17bjkc2tov().b[32][0]++;
      cov_17bjkc2tov().s[130]++;
      return {
        type: 'basic',
        confidence: 0.9
      };
    } else
    /* istanbul ignore next */
    {
      cov_17bjkc2tov().b[32][1]++;
    }
    cov_17bjkc2tov().s[131]++;
    if (wordCount > 3) {
      /* istanbul ignore next */
      cov_17bjkc2tov().b[34][0]++;
      cov_17bjkc2tov().s[132]++;
      return {
        type: 'fuzzy',
        confidence: 0.7
      };
    } else
    /* istanbul ignore next */
    {
      cov_17bjkc2tov().b[34][1]++;
    }
    cov_17bjkc2tov().s[133]++;
    return {
      type: 'basic',
      confidence: 0.6
    };
  }
  buildCriteriaFromIntent(intent, query) {
    /* istanbul ignore next */
    cov_17bjkc2tov().f[34]++;
    cov_17bjkc2tov().s[134]++;
    // Build search criteria based on detected intent
    return {
      nickname: query,
      plantName: query,
      location: query,
      operator: 'OR',
      fieldWeights: {
        nickname: 1.0,
        plantName: 0.8,
        location: 0.6,
        notes: 0.4
      }
    };
  }
  async getSearchPreset(presetId, userId) {
    /* istanbul ignore next */
    cov_17bjkc2tov().f[35]++;
    const userPresets =
    /* istanbul ignore next */
    (cov_17bjkc2tov().s[135]++,
    /* istanbul ignore next */
    (cov_17bjkc2tov().b[35][0]++, this.searchPresets.get(userId)) ||
    /* istanbul ignore next */
    (cov_17bjkc2tov().b[35][1]++, []));
    /* istanbul ignore next */
    cov_17bjkc2tov().s[136]++;
    return /* istanbul ignore next */(cov_17bjkc2tov().b[36][0]++, userPresets.find(preset => {
      /* istanbul ignore next */
      cov_17bjkc2tov().f[36]++;
      cov_17bjkc2tov().s[137]++;
      return preset.id === presetId;
    })) ||
    /* istanbul ignore next */
    (cov_17bjkc2tov().b[36][1]++, null);
  }
  getHistorySuggestions(partialQuery, userId) {
    /* istanbul ignore next */
    cov_17bjkc2tov().f[37]++;
    const history =
    /* istanbul ignore next */
    (cov_17bjkc2tov().s[138]++,
    /* istanbul ignore next */
    (cov_17bjkc2tov().b[37][0]++, this.searchHistory.get(userId)) ||
    /* istanbul ignore next */
    (cov_17bjkc2tov().b[37][1]++, []));
    const lowerQuery =
    /* istanbul ignore next */
    (cov_17bjkc2tov().s[139]++, partialQuery.toLowerCase());
    /* istanbul ignore next */
    cov_17bjkc2tov().s[140]++;
    return history.filter(entry => {
      /* istanbul ignore next */
      cov_17bjkc2tov().f[38]++;
      cov_17bjkc2tov().s[141]++;
      return entry.query.toLowerCase().includes(lowerQuery);
    }).map(entry => {
      /* istanbul ignore next */
      cov_17bjkc2tov().f[39]++;
      cov_17bjkc2tov().s[142]++;
      return entry.query;
    }).slice(0, 3);
  }
  async getInstanceSuggestions(partialQuery, userId) {
    /* istanbul ignore next */
    cov_17bjkc2tov().f[40]++;
    cov_17bjkc2tov().s[143]++;
    // Get suggestions from user's plant instances
    // This would query the database for matching nicknames, locations, etc.
    // For now, return empty array
    return [];
  }
  async addToSearchHistory(userId, criteria, result) {
    /* istanbul ignore next */
    cov_17bjkc2tov().f[41]++;
    const entry =
    /* istanbul ignore next */
    (cov_17bjkc2tov().s[144]++, {
      id: this.generateSearchId(),
      query: this.extractTextQuery(criteria),
      filters: {},
      resultCount: result.totalCount,
      searchTime: result.searchTime,
      userId,
      timestamp: new Date()
    });
    const history =
    /* istanbul ignore next */
    (cov_17bjkc2tov().s[145]++,
    /* istanbul ignore next */
    (cov_17bjkc2tov().b[38][0]++, this.searchHistory.get(userId)) ||
    /* istanbul ignore next */
    (cov_17bjkc2tov().b[38][1]++, []));
    /* istanbul ignore next */
    cov_17bjkc2tov().s[146]++;
    history.unshift(entry);
    // Keep only last 50 searches
    /* istanbul ignore next */
    cov_17bjkc2tov().s[147]++;
    if (history.length > 50) {
      /* istanbul ignore next */
      cov_17bjkc2tov().b[39][0]++;
      cov_17bjkc2tov().s[148]++;
      history.splice(50);
    } else
    /* istanbul ignore next */
    {
      cov_17bjkc2tov().b[39][1]++;
    }
    cov_17bjkc2tov().s[149]++;
    this.searchHistory.set(userId, history);
  }
  cacheSearchResult(searchId, result) {
    /* istanbul ignore next */
    cov_17bjkc2tov().f[42]++;
    const expiry =
    /* istanbul ignore next */
    (cov_17bjkc2tov().s[150]++, new Date(Date.now() + this.config.cacheDuration));
    /* istanbul ignore next */
    cov_17bjkc2tov().s[151]++;
    this.resultCache.set(searchId, {
      result,
      expiry
    });
    // Clean up expired cache entries
    /* istanbul ignore next */
    cov_17bjkc2tov().s[152]++;
    this.cleanupCache();
  }
  cleanupCache() {
    /* istanbul ignore next */
    cov_17bjkc2tov().f[43]++;
    const now =
    /* istanbul ignore next */
    (cov_17bjkc2tov().s[153]++, new Date());
    /* istanbul ignore next */
    cov_17bjkc2tov().s[154]++;
    for (const [key, {
      expiry
    }] of this.resultCache.entries()) {
      /* istanbul ignore next */
      cov_17bjkc2tov().s[155]++;
      if (expiry < now) {
        /* istanbul ignore next */
        cov_17bjkc2tov().b[40][0]++;
        cov_17bjkc2tov().s[156]++;
        this.resultCache.delete(key);
      } else
      /* istanbul ignore next */
      {
        cov_17bjkc2tov().b[40][1]++;
      }
    }
  }
  generateSearchId() {
    /* istanbul ignore next */
    cov_17bjkc2tov().f[44]++;
    cov_17bjkc2tov().s[157]++;
    return `search_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }
  generatePresetId() {
    /* istanbul ignore next */
    cov_17bjkc2tov().f[45]++;
    cov_17bjkc2tov().s[158]++;
    return `preset_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }
}
const advancedSearchService =
/* istanbul ignore next */
(cov_17bjkc2tov().s[159]++, new AdvancedSearchService());
const searchHighlightUtils =
/* istanbul ignore next */
(cov_17bjkc2tov().s[160]++, {
  // Highlight matching terms in text
  highlightText: (text, terms) => {
    /* istanbul ignore next */
    cov_17bjkc2tov().f[46]++;
    cov_17bjkc2tov().s[161]++;
    if (!terms.length) {
      /* istanbul ignore next */
      cov_17bjkc2tov().b[41][0]++;
      cov_17bjkc2tov().s[162]++;
      return text;
    } else
    /* istanbul ignore next */
    {
      cov_17bjkc2tov().b[41][1]++;
    }
    let highlightedText =
    /* istanbul ignore next */
    (cov_17bjkc2tov().s[163]++, text);
    /* istanbul ignore next */
    cov_17bjkc2tov().s[164]++;
    terms.forEach(term => {
      /* istanbul ignore next */
      cov_17bjkc2tov().f[47]++;
      const regex =
      /* istanbul ignore next */
      (cov_17bjkc2tov().s[165]++, new RegExp(`(${term})`, 'gi'));
      /* istanbul ignore next */
      cov_17bjkc2tov().s[166]++;
      highlightedText = highlightedText.replace(regex, '<mark class="bg-yellow-200">$1</mark>');
    });
    /* istanbul ignore next */
    cov_17bjkc2tov().s[167]++;
    return highlightedText;
  },
  // Extract search terms from query
  extractSearchTerms: query => {
    /* istanbul ignore next */
    cov_17bjkc2tov().f[48]++;
    cov_17bjkc2tov().s[168]++;
    return query.toLowerCase().split(/[\s,\-_]+/).filter(term => {
      /* istanbul ignore next */
      cov_17bjkc2tov().f[49]++;
      cov_17bjkc2tov().s[169]++;
      return term.length > 1;
    }).slice(0, 5);
  },
  // Calculate relevance score for search result
  calculateRelevanceScore: (instance, searchTerms) => {
    /* istanbul ignore next */
    cov_17bjkc2tov().f[50]++;
    let score =
    /* istanbul ignore next */
    (cov_17bjkc2tov().s[170]++, 0);
    const lowerTerms =
    /* istanbul ignore next */
    (cov_17bjkc2tov().s[171]++, searchTerms.map(t => {
      /* istanbul ignore next */
      cov_17bjkc2tov().f[51]++;
      cov_17bjkc2tov().s[172]++;
      return t.toLowerCase();
    }));
    // Check nickname matches
    const nickname =
    /* istanbul ignore next */
    (cov_17bjkc2tov().s[173]++, instance.nickname.toLowerCase());
    /* istanbul ignore next */
    cov_17bjkc2tov().s[174]++;
    lowerTerms.forEach(term => {
      /* istanbul ignore next */
      cov_17bjkc2tov().f[52]++;
      cov_17bjkc2tov().s[175]++;
      if (nickname === term) {
        /* istanbul ignore next */
        cov_17bjkc2tov().b[42][0]++;
        cov_17bjkc2tov().s[176]++;
        score += 100;
      } else {
        /* istanbul ignore next */
        cov_17bjkc2tov().b[42][1]++;
        cov_17bjkc2tov().s[177]++;
        if (nickname.startsWith(term)) {
          /* istanbul ignore next */
          cov_17bjkc2tov().b[43][0]++;
          cov_17bjkc2tov().s[178]++;
          score += 80;
        } else {
          /* istanbul ignore next */
          cov_17bjkc2tov().b[43][1]++;
          cov_17bjkc2tov().s[179]++;
          if (nickname.includes(term)) {
            /* istanbul ignore next */
            cov_17bjkc2tov().b[44][0]++;
            cov_17bjkc2tov().s[180]++;
            score += 60;
          } else
          /* istanbul ignore next */
          {
            cov_17bjkc2tov().b[44][1]++;
          }
        }
      }
    });
    // Check plant name matches
    const plantName =
    /* istanbul ignore next */
    (cov_17bjkc2tov().s[181]++, instance.plant.commonName.toLowerCase());
    /* istanbul ignore next */
    cov_17bjkc2tov().s[182]++;
    lowerTerms.forEach(term => {
      /* istanbul ignore next */
      cov_17bjkc2tov().f[53]++;
      cov_17bjkc2tov().s[183]++;
      if (plantName === term) {
        /* istanbul ignore next */
        cov_17bjkc2tov().b[45][0]++;
        cov_17bjkc2tov().s[184]++;
        score += 90;
      } else {
        /* istanbul ignore next */
        cov_17bjkc2tov().b[45][1]++;
        cov_17bjkc2tov().s[185]++;
        if (plantName.startsWith(term)) {
          /* istanbul ignore next */
          cov_17bjkc2tov().b[46][0]++;
          cov_17bjkc2tov().s[186]++;
          score += 70;
        } else {
          /* istanbul ignore next */
          cov_17bjkc2tov().b[46][1]++;
          cov_17bjkc2tov().s[187]++;
          if (plantName.includes(term)) {
            /* istanbul ignore next */
            cov_17bjkc2tov().b[47][0]++;
            cov_17bjkc2tov().s[188]++;
            score += 50;
          } else
          /* istanbul ignore next */
          {
            cov_17bjkc2tov().b[47][1]++;
          }
        }
      }
    });
    // Check location matches
    const location =
    /* istanbul ignore next */
    (cov_17bjkc2tov().s[189]++, instance.location.toLowerCase());
    /* istanbul ignore next */
    cov_17bjkc2tov().s[190]++;
    lowerTerms.forEach(term => {
      /* istanbul ignore next */
      cov_17bjkc2tov().f[54]++;
      cov_17bjkc2tov().s[191]++;
      if (location === term) {
        /* istanbul ignore next */
        cov_17bjkc2tov().b[48][0]++;
        cov_17bjkc2tov().s[192]++;
        score += 70;
      } else {
        /* istanbul ignore next */
        cov_17bjkc2tov().b[48][1]++;
        cov_17bjkc2tov().s[193]++;
        if (location.includes(term)) {
          /* istanbul ignore next */
          cov_17bjkc2tov().b[49][0]++;
          cov_17bjkc2tov().s[194]++;
          score += 40;
        } else
        /* istanbul ignore next */
        {
          cov_17bjkc2tov().b[49][1]++;
        }
      }
    });
    // Boost based on care urgency (more urgent = higher relevance)
    /* istanbul ignore next */
    cov_17bjkc2tov().s[195]++;
    switch (instance.careUrgency) {
      case 'critical':
        /* istanbul ignore next */
        cov_17bjkc2tov().b[50][0]++;
        cov_17bjkc2tov().s[196]++;
        score += 20;
        /* istanbul ignore next */
        cov_17bjkc2tov().s[197]++;
        break;
      case 'high':
        /* istanbul ignore next */
        cov_17bjkc2tov().b[50][1]++;
        cov_17bjkc2tov().s[198]++;
        score += 15;
        /* istanbul ignore next */
        cov_17bjkc2tov().s[199]++;
        break;
      case 'medium':
        /* istanbul ignore next */
        cov_17bjkc2tov().b[50][2]++;
        cov_17bjkc2tov().s[200]++;
        score += 10;
        /* istanbul ignore next */
        cov_17bjkc2tov().s[201]++;
        break;
      case 'low':
        /* istanbul ignore next */
        cov_17bjkc2tov().b[50][3]++;
        cov_17bjkc2tov().s[202]++;
        score += 5;
        /* istanbul ignore next */
        cov_17bjkc2tov().s[203]++;
        break;
    }
    /* istanbul ignore next */
    cov_17bjkc2tov().s[204]++;
    return Math.min(score, 100);
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,