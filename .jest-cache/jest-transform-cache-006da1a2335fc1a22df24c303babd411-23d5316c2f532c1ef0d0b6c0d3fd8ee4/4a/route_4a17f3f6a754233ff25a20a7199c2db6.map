{"version":3,"names":["GET","cov_23aoxm7wia","f","s","POST","request","user","_server1","validateRequest","b","_server","NextResponse","json","error","status","searchParams","URL","url","filterParams","family","get","undefined","genus","isVerified","createdBy","parseInt","limit","offset","validatedFilter","_plantschemas","plantFilterSchema","parse","plants","_planttaxonomy","getPlantsWithStats","id","success","data","metadata","operation","timestamp","Date","userId","console","_zod","ZodError","details","issues","body","validatedData","createPlantSchema","validation","validatePlantTaxonomy","isValid","errors","duplicates","newPlant","createPlant"],"sources":["/Users/stefanbekker/projects/fancy-planties/src/app/api/plants/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { validateRequest } from '@/lib/auth/server';\nimport { \n  createPlant, \n  getPlantsWithStats, \n  validatePlantTaxonomy \n} from '@/lib/db/queries/plant-taxonomy';\nimport { \n  createPlantSchema, \n  plantFilterSchema \n} from '@/lib/validation/plant-schemas';\nimport { ZodError } from 'zod';\n\n// GET /api/plants - Get plants with optional filtering\nexport async function GET(request: NextRequest) {\n  try {\n    const { user } = await validateRequest();\n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const { searchParams } = new URL(request.url);\n    const filterParams = {\n      family: searchParams.get('family') || undefined,\n      genus: searchParams.get('genus') || undefined,\n      isVerified: searchParams.get('isVerified') ? searchParams.get('isVerified') === 'true' : undefined,\n      createdBy: searchParams.get('createdBy') ? parseInt(searchParams.get('createdBy')!, 10) : undefined,\n      limit: searchParams.get('limit') ? parseInt(searchParams.get('limit')!, 10) : 20,\n      offset: searchParams.get('offset') ? parseInt(searchParams.get('offset')!, 10) : 0,\n    };\n\n    const validatedFilter = plantFilterSchema.parse(filterParams);\n    const plants = await getPlantsWithStats(validatedFilter, user.id);\n\n    return NextResponse.json({\n      success: true,\n      data: plants,\n      metadata: {\n        operation: 'search',\n        timestamp: new Date(),\n        userId: user.id,\n      },\n    });\n  } catch (error) {\n    console.error('Error fetching plants:', error);\n    \n    if (error instanceof ZodError) {\n      return NextResponse.json(\n        { \n          error: 'Invalid filter parameters', \n          details: error.issues \n        }, \n        { status: 400 }\n      );\n    }\n\n    return NextResponse.json(\n      { error: 'Internal server error' }, \n      { status: 500 }\n    );\n  }\n}\n\n// POST /api/plants - Create a new plant taxonomy entry\nexport async function POST(request: NextRequest) {\n  try {\n    const { user } = await validateRequest();\n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const body = await request.json();\n    const validatedData = createPlantSchema.parse(body);\n\n    // Validate taxonomy for duplicates\n    const validation = await validatePlantTaxonomy(validatedData);\n    if (!validation.isValid) {\n      return NextResponse.json(\n        { \n          error: 'Validation failed', \n          details: validation.errors,\n          duplicates: validation.duplicates \n        }, \n        { status: 409 }\n      );\n    }\n\n    const newPlant = await createPlant(validatedData, user.id);\n\n    return NextResponse.json({\n      success: true,\n      data: newPlant,\n      metadata: {\n        operation: 'create',\n        timestamp: new Date(),\n        userId: user.id,\n      },\n    }, { status: 201 });\n  } catch (error) {\n    console.error('Error creating plant:', error);\n    \n    if (error instanceof ZodError) {\n      return NextResponse.json(\n        { \n          error: 'Invalid plant data', \n          details: error.issues \n        }, \n        { status: 400 }\n      );\n    }\n\n    return NextResponse.json(\n      { error: 'Internal server error' }, \n      { status: 500 }\n    );\n  }\n}"],"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","ignoreList":[]}