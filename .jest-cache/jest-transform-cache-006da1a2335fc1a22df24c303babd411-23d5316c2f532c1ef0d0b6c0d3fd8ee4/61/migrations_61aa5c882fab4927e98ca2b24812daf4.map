{"version":3,"names":["MigrationUtils","runMigrations","cov_9yxhon6fb","f","s","console","log","_index","db","execute","_drizzleorm","sql","error","Error","applyRLSPolicies","rlsPath","_path","default","join","process","cwd","_fs","existsSync","b","rlsSQL","readFileSync","statements","split","map","stmt","trim","filter","length","startsWith","match","statement","cleanStatement","raw","message","includes","substring","warn","rollbackLastMigration","getMigrationStatus","result","appliedMigrations","count","migrationsPath","pendingMigrations","files","readdirSync","sqlFiles","file","endsWith","push","Number","seedInitialData","userCount","commonPlants","family","genus","species","commonName","careInstructions","isVerified","plant","healthCheck","connected","then","catch","migrationTable","migrationsApplied","Boolean","exists","tablesCheck","tablesExist","table_count","rlsCheck","rlsEnabled","rls_count"],"sources":["/Users/stefanbekker/projects/fancy-planties/src/lib/db/migrations.ts"],"sourcesContent":["import 'server-only';\n\nimport { db } from './index';\nimport { sql } from 'drizzle-orm';\nimport fs from 'fs';\nimport path from 'path';\n\n// Migration utilities\nexport class MigrationUtils {\n  // Run all pending migrations\n  static async runMigrations(): Promise<void> {\n    try {\n      console.log('Starting database migrations...');\n      \n      // Create migrations table if it doesn't exist\n      await db.execute(sql`\n        CREATE TABLE IF NOT EXISTS __drizzle_migrations (\n          id SERIAL PRIMARY KEY,\n          hash text NOT NULL,\n          created_at bigint\n        );\n      `);\n\n      console.log('Migrations completed successfully');\n    } catch (error) {\n      console.error('Migration failed:', error);\n      throw new Error('Failed to run migrations');\n    }\n  }\n\n  // Apply RLS policies\n  static async applyRLSPolicies(): Promise<void> {\n    try {\n      console.log('Applying Row-Level Security policies...');\n      \n      const rlsPath = path.join(process.cwd(), 'drizzle', 'rls-policies.sql');\n      \n      if (fs.existsSync(rlsPath)) {\n        const rlsSQL = fs.readFileSync(rlsPath, 'utf8');\n        \n        // Split by semicolon and filter out comments\n        const statements = rlsSQL\n          .split(';')\n          .map(stmt => stmt.trim())\n          .filter(stmt => \n            stmt.length > 0 && \n            !stmt.startsWith('--') && \n            !stmt.match(/^\\/\\*.*\\*\\/$/)\n          );\n\n        for (const statement of statements) {\n          const cleanStatement = statement.trim();\n          if (cleanStatement && !cleanStatement.startsWith('--')) {\n            try {\n              await db.execute(sql.raw(cleanStatement));\n            } catch (error) {\n              // Log but don't fail on policy conflicts (they might already exist)\n              if (error instanceof Error && error.message.includes('already exists')) {\n                console.log(`Policy already exists, skipping: ${cleanStatement.substring(0, 50)}...`);\n              } else {\n                console.error(`Failed to execute statement: ${cleanStatement.substring(0, 50)}...`);\n                throw error;\n              }\n            }\n          }\n        }\n        \n        console.log('RLS policies applied successfully');\n      } else {\n        console.warn('RLS policies file not found, skipping...');\n      }\n    } catch (error) {\n      console.error('Failed to apply RLS policies:', error);\n      throw new Error('Failed to apply RLS policies');\n    }\n  }\n\n  // Rollback last migration (basic implementation)\n  static async rollbackLastMigration(): Promise<void> {\n    try {\n      console.log('Rolling back last migration...');\n      \n      // This is a basic implementation - in production you'd want more sophisticated rollback logic\n      console.warn('Rollback functionality requires manual intervention for safety');\n      console.log('Please review the migration files and manually rollback if needed');\n      \n    } catch (error) {\n      console.error('Rollback failed:', error);\n      throw new Error('Failed to rollback migration');\n    }\n  }\n\n  // Check migration status\n  static async getMigrationStatus(): Promise<{\n    appliedMigrations: number;\n    pendingMigrations: string[];\n  }> {\n    try {\n      // Get applied migrations count\n      const [result] = await db.execute(sql`\n        SELECT COUNT(*) as count FROM __drizzle_migrations\n      `);\n      \n      const appliedMigrations = result?.count || 0;\n      \n      // Get pending migrations by checking the drizzle folder\n      const migrationsPath = path.join(process.cwd(), 'drizzle');\n      const pendingMigrations: string[] = [];\n      \n      if (fs.existsSync(migrationsPath)) {\n        const files = fs.readdirSync(migrationsPath);\n        const sqlFiles = files.filter(file => file.endsWith('.sql') && !file.includes('rls-policies'));\n        pendingMigrations.push(...sqlFiles);\n      }\n\n      return {\n        appliedMigrations: Number(appliedMigrations),\n        pendingMigrations\n      };\n    } catch (error) {\n      console.error('Failed to get migration status:', error);\n      throw new Error('Failed to get migration status');\n    }\n  }\n\n  // Seed initial data (for development)\n  static async seedInitialData(): Promise<void> {\n    try {\n      console.log('Seeding initial data...');\n      \n      // Check if we already have data\n      const [userCount] = await db.execute(sql`SELECT COUNT(*) as count FROM users`);\n      \n      if (Number(userCount?.count) > 0) {\n        console.log('Database already has data, skipping seed');\n        return;\n      }\n\n      // Add some common plant taxonomy data\n      const commonPlants = [\n        {\n          family: 'Araceae',\n          genus: 'Monstera',\n          species: 'deliciosa',\n          commonName: 'Swiss Cheese Plant',\n          careInstructions: 'Bright indirect light, water when top inch of soil is dry',\n          isVerified: true\n        },\n        {\n          family: 'Araceae',\n          genus: 'Pothos',\n          species: 'aureus',\n          commonName: 'Golden Pothos',\n          careInstructions: 'Low to bright indirect light, water when soil is dry',\n          isVerified: true\n        },\n        {\n          family: 'Asparagaceae',\n          genus: 'Sansevieria',\n          species: 'trifasciata',\n          commonName: 'Snake Plant',\n          careInstructions: 'Low light tolerant, water sparingly',\n          isVerified: true\n        },\n        {\n          family: 'Araceae',\n          genus: 'Philodendron',\n          species: 'hederaceum',\n          commonName: 'Heartleaf Philodendron',\n          careInstructions: 'Bright indirect light, keep soil lightly moist',\n          isVerified: true\n        }\n      ];\n\n      for (const plant of commonPlants) {\n        await db.execute(sql`\n          INSERT INTO plants (family, genus, species, cultivar, common_name, care_instructions, is_verified)\n          VALUES (${plant.family}, ${plant.genus}, ${plant.species}, NULL, ${plant.commonName}, ${plant.careInstructions}, ${plant.isVerified})\n          ON CONFLICT (family, genus, species, cultivar) DO NOTHING\n        `);\n      }\n\n      console.log('Initial data seeded successfully');\n    } catch (error) {\n      console.error('Failed to seed initial data:', error);\n      throw new Error('Failed to seed initial data');\n    }\n  }\n\n  // Database health check\n  static async healthCheck(): Promise<{\n    connected: boolean;\n    migrationsApplied: boolean;\n    rlsEnabled: boolean;\n    tablesExist: boolean;\n  }> {\n    try {\n      // Check connection\n      const connected = await db.execute(sql`SELECT 1`).then(() => true).catch(() => false);\n      \n      // Check if migrations table exists\n      const [migrationTable] = await db.execute(sql`\n        SELECT EXISTS (\n          SELECT FROM information_schema.tables \n          WHERE table_name = '__drizzle_migrations'\n        ) as exists\n      `);\n      const migrationsApplied = Boolean(migrationTable?.exists) || false;\n\n      // Check if main tables exist\n      const [tablesCheck] = await db.execute(sql`\n        SELECT \n          (SELECT COUNT(*) FROM information_schema.tables WHERE table_name IN ('users', 'plants', 'plant_instances', 'propagations', 'sessions')) as table_count\n      `);\n      const tablesExist = Number(tablesCheck?.table_count) === 5;\n\n      // Check if RLS is enabled on user tables\n      const [rlsCheck] = await db.execute(sql`\n        SELECT COUNT(*) as rls_count\n        FROM pg_class c\n        JOIN pg_namespace n ON n.oid = c.relnamespace\n        WHERE c.relrowsecurity = true \n        AND n.nspname = 'public'\n        AND c.relname IN ('plant_instances', 'propagations', 'sessions')\n      `);\n      const rlsEnabled = Number(rlsCheck?.rls_count) === 3;\n\n      return {\n        connected,\n        migrationsApplied,\n        rlsEnabled,\n        tablesExist\n      };\n    } catch (error) {\n      console.error('Health check failed:', error);\n      return {\n        connected: false,\n        migrationsApplied: false,\n        rlsEnabled: false,\n        tablesExist: false\n      };\n    }\n  }\n}"],"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","ignoreList":[]}