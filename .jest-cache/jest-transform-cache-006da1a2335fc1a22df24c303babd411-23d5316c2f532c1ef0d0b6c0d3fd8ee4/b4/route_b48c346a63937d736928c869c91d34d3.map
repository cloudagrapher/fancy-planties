{"version":3,"sources":["/Users/stefanbekker/projects/fancy-planties/src/app/api/plant-instances/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { z } from 'zod';\nimport { PlantInstanceQueries } from '@/lib/db/queries/plant-instances';\nimport { createPlantInstanceSchema, plantInstanceFilterSchema } from '@/lib/validation/plant-schemas';\nimport { validateVerifiedRequest } from '@/lib/auth/server';\n\n// GET /api/plant-instances - Get plant instances with optional filtering\nexport async function GET(request: NextRequest) {\n  try {\n    const authResult = await validateVerifiedRequest();\n    if (!authResult.user) {\n      return NextResponse.json({ \n        success: false,\n        error: authResult.error \n      }, { status: authResult.error === 'Email verification required' ? 403 : 401 });\n    }\n    \n    const { user } = authResult;\n\n    const { searchParams } = new URL(request.url);\n    \n    // Parse filter parameters\n    const filterParams = {\n      userId: user.id,\n      location: searchParams.get('location') || undefined,\n      plantId: searchParams.get('plantId') ? parseInt(searchParams.get('plantId')!, 10) : undefined,\n      isActive: searchParams.get('isActive') ? searchParams.get('isActive') === 'true' : undefined,\n      overdueOnly: searchParams.get('overdueOnly') === 'true',\n      dueSoonDays: searchParams.get('dueSoonDays') ? parseInt(searchParams.get('dueSoonDays')!, 10) : undefined,\n      createdAfter: searchParams.get('createdAfter') ? new Date(searchParams.get('createdAfter')!) : undefined,\n      createdBefore: searchParams.get('createdBefore') ? new Date(searchParams.get('createdBefore')!) : undefined,\n      lastFertilizedAfter: searchParams.get('lastFertilizedAfter') ? new Date(searchParams.get('lastFertilizedAfter')!) : undefined,\n      lastFertilizedBefore: searchParams.get('lastFertilizedBefore') ? new Date(searchParams.get('lastFertilizedBefore')!) : undefined,\n      limit: searchParams.get('limit') ? parseInt(searchParams.get('limit')!, 10) : 20,\n      offset: searchParams.get('offset') ? parseInt(searchParams.get('offset')!, 10) : 0,\n    };\n\n    // Validate filter parameters\n    const validatedFilters = plantInstanceFilterSchema.parse(filterParams);\n    \n    // Get plant instances with filters\n    const result = await PlantInstanceQueries.getWithFilters(validatedFilters);\n    \n    return NextResponse.json(result);\n  } catch (error) {\n    console.error('Failed to get plant instances:', error);\n    return NextResponse.json(\n      { \n        success: false,\n        error: 'Internal server error' \n      },\n      { status: 500 }\n    );\n  }\n}\n\n// POST /api/plant-instances - Create a new plant instance\nexport async function POST(request: NextRequest) {\n  try {\n    const authResult = await validateVerifiedRequest();\n    if (!authResult.user) {\n      return NextResponse.json({ \n        success: false,\n        error: authResult.error \n      }, { status: authResult.error === 'Email verification required' ? 403 : 401 });\n    }\n    \n    const { user } = authResult;\n\n    // Check if request is FormData or JSON\n    const contentType = request.headers.get('content-type');\n    let body: any;\n    \n    if (contentType?.includes('multipart/form-data')) {\n      // Handle FormData (for file uploads)\n      const formData = await request.formData();\n      body = {};\n      \n      // Helper function to convert file to base64\n      const fileToBase64 = async (file: File): Promise<string> => {\n        const bytes = await file.arrayBuffer();\n        const buffer = Buffer.from(bytes);\n        const base64 = buffer.toString('base64');\n        return `data:${file.type};base64,${base64}`;\n      };\n\n      const imageFiles: File[] = [];\n      const existingImages: string[] = [];\n      \n      // Extract form fields\n      for (const [key, value] of formData.entries()) {\n        if (key.startsWith('imageFiles[')) {\n          // Handle new image files\n          if (value instanceof File) {\n            imageFiles.push(value);\n          }\n        } else if (key.startsWith('existingImages[')) {\n          // Handle existing images\n          existingImages.push(value as string);\n        } else {\n          // Convert form values to appropriate types\n          if (key === 'plantId') {\n            body[key] = parseInt(value as string, 10);\n          } else if (key === 'isActive') {\n            body[key] = value === 'true';\n          } else {\n            body[key] = value;\n          }\n        }\n      }\n\n      // Convert new image files to base64\n      const newImageBase64s = await Promise.all(\n        imageFiles.map(file => fileToBase64(file))\n      );\n\n      // Combine existing images with new images\n      body.images = [...existingImages, ...newImageBase64s];\n    } else {\n      // Handle JSON\n      try {\n        body = await request.json();\n        if (!body || Object.keys(body).length === 0) {\n          return NextResponse.json(\n            { \n              success: false,\n              error: 'Request body is required' \n            },\n            { status: 400 }\n          );\n        }\n      } catch (jsonError) {\n        return NextResponse.json(\n          { \n            success: false,\n            error: 'Invalid JSON in request body' \n          },\n          { status: 400 }\n        );\n      }\n    }\n    \n    // Add user ID to the request body and convert date strings to Date objects\n    const instanceData = {\n      ...body,\n      userId: user.id,\n      // Convert date strings to Date objects if they exist and are not empty\n      lastFertilized: body.lastFertilized && body.lastFertilized !== '' ? new Date(body.lastFertilized) : null,\n      lastRepot: body.lastRepot && body.lastRepot !== '' ? new Date(body.lastRepot) : null,\n    };\n\n    // Validate the plant instance data\n    let validatedData;\n    try {\n      validatedData = createPlantInstanceSchema.parse(instanceData);\n    } catch (validationError) {\n      if (validationError instanceof z.ZodError) {\n        return NextResponse.json(\n          { \n            success: false,\n            error: 'Validation failed',\n            details: validationError.issues\n          },\n          { status: 400 }\n        );\n      }\n      return NextResponse.json(\n        { \n          success: false,\n          error: 'Validation failed',\n          details: validationError instanceof Error ? validationError.message : 'Invalid data'\n        },\n        { status: 400 }\n      );\n    }\n    \n    // Calculate initial fertilizer due date if schedule is provided\n    if (validatedData.fertilizerSchedule && !validatedData.fertilizerDue) {\n      const now = new Date();\n      const scheduleMatch = validatedData.fertilizerSchedule.match(/(\\d+)\\s*(day|week|month)s?/i);\n      \n      if (scheduleMatch) {\n        const [, amount, unit] = scheduleMatch;\n        const dueDate = new Date(now);\n        \n        switch (unit.toLowerCase()) {\n          case 'day':\n            dueDate.setDate(dueDate.getDate() + parseInt(amount, 10));\n            break;\n          case 'week':\n            dueDate.setDate(dueDate.getDate() + (parseInt(amount, 10) * 7));\n            break;\n          case 'month':\n            dueDate.setMonth(dueDate.getMonth() + parseInt(amount, 10));\n            break;\n        }\n        \n        validatedData.fertilizerDue = dueDate;\n      }\n    }\n\n    // Create the plant instance\n    const plantInstance = await PlantInstanceQueries.create(validatedData);\n    \n    // Get the enhanced plant instance with plant data\n    const enhancedInstance = await PlantInstanceQueries.getEnhancedById(plantInstance.id);\n    \n    return NextResponse.json({\n      success: true,\n      data: enhancedInstance\n    }, { status: 201 });\n  } catch (error) {\n    console.error('Failed to create plant instance:', error);\n    \n    if (error instanceof Error && error.message.includes('validation')) {\n      return NextResponse.json(\n        { \n          success: false,\n          error: 'Invalid plant instance data', \n          details: error.message \n        },\n        { status: 400 }\n      );\n    }\n    \n    return NextResponse.json(\n      { \n        success: false,\n        error: 'Failed to create plant instance' \n      },\n      { status: 500 }\n    );\n  }\n}"],"names":["GET","POST","request","authResult","validateVerifiedRequest","user","NextResponse","json","success","error","status","searchParams","URL","url","filterParams","userId","id","location","get","undefined","plantId","parseInt","isActive","overdueOnly","dueSoonDays","createdAfter","Date","createdBefore","lastFertilizedAfter","lastFertilizedBefore","limit","offset","validatedFilters","plantInstanceFilterSchema","parse","result","PlantInstanceQueries","getWithFilters","console","contentType","headers","body","includes","formData","fileToBase64","file","bytes","arrayBuffer","buffer","Buffer","from","base64","toString","type","imageFiles","existingImages","key","value","entries","startsWith","File","push","newImageBase64s","Promise","all","map","images","Object","keys","length","jsonError","instanceData","lastFertilized","lastRepot","validatedData","createPlantInstanceSchema","validationError","z","ZodError","details","issues","Error","message","fertilizerSchedule","fertilizerDue","now","scheduleMatch","match","amount","unit","dueDate","toLowerCase","setDate","getDate","setMonth","getMonth","plantInstance","create","enhancedInstance","getEnhancedById","data"],"mappings":"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"}