d8240ab01a9e51911f7569482f18c0e0
"use strict";

/* istanbul ignore next */
function cov_khb1u57em() {
  var path = "/Users/stefanbekker/projects/fancy-planties/src/lib/services/care-service.ts";
  var hash = "dd0c189df4ba1f3651a4ae2eaee0fed73a4c1d85";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/stefanbekker/projects/fancy-planties/src/lib/services/care-service.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 27
        }
      },
      "3": {
        start: {
          line: 11,
          column: 12
        },
        end: {
          line: 11,
          column: 28
        }
      },
      "4": {
        start: {
          line: 12,
          column: 16
        },
        end: {
          line: 12,
          column: 39
        }
      },
      "5": {
        start: {
          line: 13,
          column: 20
        },
        end: {
          line: 13,
          column: 42
        }
      },
      "6": {
        start: {
          line: 14,
          column: 19
        },
        end: {
          line: 14,
          column: 49
        }
      },
      "7": {
        start: {
          line: 15,
          column: 21
        },
        end: {
          line: 15,
          column: 58
        }
      },
      "8": {
        start: {
          line: 16,
          column: 24
        },
        end: {
          line: 16,
          column: 52
        }
      },
      "9": {
        start: {
          line: 17,
          column: 21
        },
        end: {
          line: 17,
          column: 58
        }
      },
      "10": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 77,
          column: 9
        }
      },
      "11": {
        start: {
          line: 24,
          column: 31
        },
        end: {
          line: 24,
          column: 85
        }
      },
      "12": {
        start: {
          line: 25,
          column: 12
        },
        end: {
          line: 30,
          column: 13
        }
      },
      "13": {
        start: {
          line: 26,
          column: 16
        },
        end: {
          line: 29,
          column: 18
        }
      },
      "14": {
        start: {
          line: 32,
          column: 35
        },
        end: {
          line: 42,
          column: 14
        }
      },
      "15": {
        start: {
          line: 44,
          column: 12
        },
        end: {
          line: 46,
          column: 13
        }
      },
      "16": {
        start: {
          line: 45,
          column: 16
        },
        end: {
          line: 45,
          column: 110
        }
      },
      "17": {
        start: {
          line: 47,
          column: 12
        },
        end: {
          line: 49,
          column: 13
        }
      },
      "18": {
        start: {
          line: 48,
          column: 16
        },
        end: {
          line: 48,
          column: 101
        }
      },
      "19": {
        start: {
          line: 51,
          column: 38
        },
        end: {
          line: 51,
          column: 113
        }
      },
      "20": {
        start: {
          line: 52,
          column: 12
        },
        end: {
          line: 57,
          column: 13
        }
      },
      "21": {
        start: {
          line: 53,
          column: 16
        },
        end: {
          line: 56,
          column: 18
        }
      },
      "22": {
        start: {
          line: 59,
          column: 24
        },
        end: {
          line: 59,
          column: 34
        }
      },
      "23": {
        start: {
          line: 60,
          column: 34
        },
        end: {
          line: 60,
          column: 124
        }
      },
      "24": {
        start: {
          line: 61,
          column: 40
        },
        end: {
          line: 66,
          column: 13
        }
      },
      "25": {
        start: {
          line: 67,
          column: 12
        },
        end: {
          line: 70,
          column: 14
        }
      },
      "26": {
        start: {
          line: 72,
          column: 12
        },
        end: {
          line: 72,
          column: 62
        }
      },
      "27": {
        start: {
          line: 73,
          column: 12
        },
        end: {
          line: 76,
          column: 14
        }
      },
      "28": {
        start: {
          line: 82,
          column: 8
        },
        end: {
          line: 107,
          column: 9
        }
      },
      "29": {
        start: {
          line: 84,
          column: 31
        },
        end: {
          line: 84,
          column: 94
        }
      },
      "30": {
        start: {
          line: 85,
          column: 12
        },
        end: {
          line: 90,
          column: 13
        }
      },
      "31": {
        start: {
          line: 86,
          column: 16
        },
        end: {
          line: 89,
          column: 18
        }
      },
      "32": {
        start: {
          line: 92,
          column: 33
        },
        end: {
          line: 99,
          column: 13
        }
      },
      "33": {
        start: {
          line: 100,
          column: 12
        },
        end: {
          line: 100,
          column: 65
        }
      },
      "34": {
        start: {
          line: 102,
          column: 12
        },
        end: {
          line: 102,
          column: 63
        }
      },
      "35": {
        start: {
          line: 103,
          column: 12
        },
        end: {
          line: 106,
          column: 14
        }
      },
      "36": {
        start: {
          line: 112,
          column: 8
        },
        end: {
          line: 184,
          column: 9
        }
      },
      "37": {
        start: {
          line: 114,
          column: 31
        },
        end: {
          line: 114,
          column: 89
        }
      },
      "38": {
        start: {
          line: 115,
          column: 12
        },
        end: {
          line: 126,
          column: 13
        }
      },
      "39": {
        start: {
          line: 116,
          column: 16
        },
        end: {
          line: 125,
          column: 18
        }
      },
      "40": {
        start: {
          line: 120,
          column: 70
        },
        end: {
          line: 124,
          column: 25
        }
      },
      "41": {
        start: {
          line: 127,
          column: 28
        },
        end: {
          line: 127,
          column: 30
        }
      },
      "42": {
        start: {
          line: 128,
          column: 31
        },
        end: {
          line: 128,
          column: 32
        }
      },
      "43": {
        start: {
          line: 129,
          column: 31
        },
        end: {
          line: 129,
          column: 32
        }
      },
      "44": {
        start: {
          line: 131,
          column: 12
        },
        end: {
          line: 165,
          column: 13
        }
      },
      "45": {
        start: {
          line: 132,
          column: 16
        },
        end: {
          line: 164,
          column: 17
        }
      },
      "46": {
        start: {
          line: 133,
          column: 41
        },
        end: {
          line: 141,
          column: 21
        }
      },
      "47": {
        start: {
          line: 142,
          column: 35
        },
        end: {
          line: 142,
          column: 80
        }
      },
      "48": {
        start: {
          line: 143,
          column: 20
        },
        end: {
          line: 156,
          column: 21
        }
      },
      "49": {
        start: {
          line: 144,
          column: 24
        },
        end: {
          line: 144,
          column: 39
        }
      },
      "50": {
        start: {
          line: 145,
          column: 24
        },
        end: {
          line: 148,
          column: 27
        }
      },
      "51": {
        start: {
          line: 150,
          column: 24
        },
        end: {
          line: 150,
          column: 39
        }
      },
      "52": {
        start: {
          line: 151,
          column: 24
        },
        end: {
          line: 155,
          column: 27
        }
      },
      "53": {
        start: {
          line: 158,
          column: 20
        },
        end: {
          line: 158,
          column: 35
        }
      },
      "54": {
        start: {
          line: 159,
          column: 20
        },
        end: {
          line: 163,
          column: 23
        }
      },
      "55": {
        start: {
          line: 166,
          column: 12
        },
        end: {
          line: 171,
          column: 14
        }
      },
      "56": {
        start: {
          line: 173,
          column: 12
        },
        end: {
          line: 173,
          column: 68
        }
      },
      "57": {
        start: {
          line: 174,
          column: 12
        },
        end: {
          line: 183,
          column: 14
        }
      },
      "58": {
        start: {
          line: 178,
          column: 66
        },
        end: {
          line: 182,
          column: 21
        }
      },
      "59": {
        start: {
          line: 189,
          column: 8
        },
        end: {
          line: 189,
          column: 110
        }
      },
      "60": {
        start: {
          line: 194,
          column: 8
        },
        end: {
          line: 194,
          column: 101
        }
      },
      "61": {
        start: {
          line: 199,
          column: 8
        },
        end: {
          line: 199,
          column: 82
        }
      },
      "62": {
        start: {
          line: 204,
          column: 8
        },
        end: {
          line: 229,
          column: 9
        }
      },
      "63": {
        start: {
          line: 205,
          column: 28
        },
        end: {
          line: 213,
          column: 14
        }
      },
      "64": {
        start: {
          line: 214,
          column: 12
        },
        end: {
          line: 219,
          column: 13
        }
      },
      "65": {
        start: {
          line: 215,
          column: 16
        },
        end: {
          line: 218,
          column: 18
        }
      },
      "66": {
        start: {
          line: 220,
          column: 12
        },
        end: {
          line: 222,
          column: 14
        }
      },
      "67": {
        start: {
          line: 224,
          column: 12
        },
        end: {
          line: 224,
          column: 65
        }
      },
      "68": {
        start: {
          line: 225,
          column: 12
        },
        end: {
          line: 228,
          column: 14
        }
      },
      "69": {
        start: {
          line: 234,
          column: 8
        },
        end: {
          line: 251,
          column: 9
        }
      },
      "70": {
        start: {
          line: 235,
          column: 28
        },
        end: {
          line: 235,
          column: 106
        }
      },
      "71": {
        start: {
          line: 236,
          column: 12
        },
        end: {
          line: 241,
          column: 13
        }
      },
      "72": {
        start: {
          line: 237,
          column: 16
        },
        end: {
          line: 240,
          column: 18
        }
      },
      "73": {
        start: {
          line: 242,
          column: 12
        },
        end: {
          line: 244,
          column: 14
        }
      },
      "74": {
        start: {
          line: 246,
          column: 12
        },
        end: {
          line: 246,
          column: 65
        }
      },
      "75": {
        start: {
          line: 247,
          column: 12
        },
        end: {
          line: 250,
          column: 14
        }
      },
      "76": {
        start: {
          line: 256,
          column: 8
        },
        end: {
          line: 266,
          column: 9
        }
      },
      "77": {
        start: {
          line: 258,
          column: 36
        },
        end: {
          line: 258,
          column: 248
        }
      },
      "78": {
        start: {
          line: 259,
          column: 12
        },
        end: {
          line: 259,
          column: 42
        }
      },
      "79": {
        start: {
          line: 259,
          column: 32
        },
        end: {
          line: 259,
          column: 42
        }
      },
      "80": {
        start: {
          line: 261,
          column: 36
        },
        end: {
          line: 261,
          column: 121
        }
      },
      "81": {
        start: {
          line: 262,
          column: 12
        },
        end: {
          line: 262,
          column: 120
        }
      },
      "82": {
        start: {
          line: 264,
          column: 12
        },
        end: {
          line: 264,
          column: 68
        }
      },
      "83": {
        start: {
          line: 265,
          column: 12
        },
        end: {
          line: 265,
          column: 22
        }
      },
      "84": {
        start: {
          line: 271,
          column: 8
        },
        end: {
          line: 279,
          column: 9
        }
      },
      "85": {
        start: {
          line: 273,
          column: 36
        },
        end: {
          line: 273,
          column: 248
        }
      },
      "86": {
        start: {
          line: 274,
          column: 12
        },
        end: {
          line: 274,
          column: 44
        }
      },
      "87": {
        start: {
          line: 274,
          column: 32
        },
        end: {
          line: 274,
          column: 44
        }
      },
      "88": {
        start: {
          line: 275,
          column: 12
        },
        end: {
          line: 275,
          column: 131
        }
      },
      "89": {
        start: {
          line: 277,
          column: 12
        },
        end: {
          line: 277,
          column: 75
        }
      },
      "90": {
        start: {
          line: 278,
          column: 12
        },
        end: {
          line: 278,
          column: 24
        }
      },
      "91": {
        start: {
          line: 285,
          column: 32
        },
        end: {
          line: 285,
          column: 244
        }
      },
      "92": {
        start: {
          line: 286,
          column: 8
        },
        end: {
          line: 286,
          column: 35
        }
      },
      "93": {
        start: {
          line: 286,
          column: 28
        },
        end: {
          line: 286,
          column: 35
        }
      },
      "94": {
        start: {
          line: 288,
          column: 28
        },
        end: {
          line: 288,
          column: 139
        }
      },
      "95": {
        start: {
          line: 290,
          column: 8
        },
        end: {
          line: 294,
          column: 164
        }
      },
      "96": {
        start: {
          line: 299,
          column: 8
        },
        end: {
          line: 302,
          column: 164
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 21,
            column: 6
          },
          end: {
            line: 21,
            column: 7
          }
        },
        loc: {
          start: {
            line: 21,
            column: 50
          },
          end: {
            line: 78,
            column: 5
          }
        },
        line: 21
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 81,
            column: 6
          },
          end: {
            line: 81,
            column: 7
          }
        },
        loc: {
          start: {
            line: 81,
            column: 55
          },
          end: {
            line: 108,
            column: 5
          }
        },
        line: 81
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 111,
            column: 6
          },
          end: {
            line: 111,
            column: 7
          }
        },
        loc: {
          start: {
            line: 111,
            column: 59
          },
          end: {
            line: 185,
            column: 5
          }
        },
        line: 111
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 120,
            column: 63
          },
          end: {
            line: 120,
            column: 64
          }
        },
        loc: {
          start: {
            line: 120,
            column: 70
          },
          end: {
            line: 124,
            column: 25
          }
        },
        line: 120
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 178,
            column: 59
          },
          end: {
            line: 178,
            column: 60
          }
        },
        loc: {
          start: {
            line: 178,
            column: 66
          },
          end: {
            line: 182,
            column: 21
          }
        },
        line: 178
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 188,
            column: 6
          },
          end: {
            line: 188,
            column: 7
          }
        },
        loc: {
          start: {
            line: 188,
            column: 73
          },
          end: {
            line: 190,
            column: 5
          }
        },
        line: 188
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 193,
            column: 6
          },
          end: {
            line: 193,
            column: 7
          }
        },
        loc: {
          start: {
            line: 193,
            column: 67
          },
          end: {
            line: 195,
            column: 5
          }
        },
        line: 193
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 198,
            column: 6
          },
          end: {
            line: 198,
            column: 7
          }
        },
        loc: {
          start: {
            line: 198,
            column: 44
          },
          end: {
            line: 200,
            column: 5
          }
        },
        line: 198
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 203,
            column: 6
          },
          end: {
            line: 203,
            column: 7
          }
        },
        loc: {
          start: {
            line: 203,
            column: 69
          },
          end: {
            line: 230,
            column: 5
          }
        },
        line: 203
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 233,
            column: 6
          },
          end: {
            line: 233,
            column: 7
          }
        },
        loc: {
          start: {
            line: 233,
            column: 60
          },
          end: {
            line: 252,
            column: 5
          }
        },
        line: 233
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 255,
            column: 6
          },
          end: {
            line: 255,
            column: 7
          }
        },
        loc: {
          start: {
            line: 255,
            column: 70
          },
          end: {
            line: 267,
            column: 5
          }
        },
        line: 255
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 270,
            column: 6
          },
          end: {
            line: 270,
            column: 7
          }
        },
        loc: {
          start: {
            line: 270,
            column: 91
          },
          end: {
            line: 280,
            column: 5
          }
        },
        line: 270
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 283,
            column: 6
          },
          end: {
            line: 283,
            column: 7
          }
        },
        loc: {
          start: {
            line: 283,
            column: 94
          },
          end: {
            line: 295,
            column: 5
          }
        },
        line: 283
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 298,
            column: 6
          },
          end: {
            line: 298,
            column: 7
          }
        },
        loc: {
          start: {
            line: 298,
            column: 76
          },
          end: {
            line: 303,
            column: 5
          }
        },
        line: 298
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 25,
            column: 12
          },
          end: {
            line: 30,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 25,
            column: 12
          },
          end: {
            line: 30,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 25
      },
      "1": {
        loc: {
          start: {
            line: 28,
            column: 27
          },
          end: {
            line: 28,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 28,
            column: 27
          },
          end: {
            line: 28,
            column: 62
          }
        }, {
          start: {
            line: 28,
            column: 66
          },
          end: {
            line: 28,
            column: 85
          }
        }],
        line: 28
      },
      "2": {
        loc: {
          start: {
            line: 41,
            column: 24
          },
          end: {
            line: 41,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 41,
            column: 24
          },
          end: {
            line: 41,
            column: 39
          }
        }, {
          start: {
            line: 41,
            column: 43
          },
          end: {
            line: 41,
            column: 45
          }
        }],
        line: 41
      },
      "3": {
        loc: {
          start: {
            line: 44,
            column: 12
          },
          end: {
            line: 46,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 44,
            column: 12
          },
          end: {
            line: 46,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 44
      },
      "4": {
        loc: {
          start: {
            line: 44,
            column: 16
          },
          end: {
            line: 44,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 44,
            column: 16
          },
          end: {
            line: 44,
            column: 39
          }
        }, {
          start: {
            line: 44,
            column: 43
          },
          end: {
            line: 44,
            column: 77
          }
        }],
        line: 44
      },
      "5": {
        loc: {
          start: {
            line: 47,
            column: 12
          },
          end: {
            line: 49,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 47,
            column: 12
          },
          end: {
            line: 49,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 47
      },
      "6": {
        loc: {
          start: {
            line: 52,
            column: 12
          },
          end: {
            line: 57,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 52,
            column: 12
          },
          end: {
            line: 57,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 52
      },
      "7": {
        loc: {
          start: {
            line: 85,
            column: 12
          },
          end: {
            line: 90,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 85,
            column: 12
          },
          end: {
            line: 90,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 85
      },
      "8": {
        loc: {
          start: {
            line: 88,
            column: 27
          },
          end: {
            line: 88,
            column: 91
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 88,
            column: 27
          },
          end: {
            line: 88,
            column: 62
          }
        }, {
          start: {
            line: 88,
            column: 66
          },
          end: {
            line: 88,
            column: 91
          }
        }],
        line: 88
      },
      "9": {
        loc: {
          start: {
            line: 115,
            column: 12
          },
          end: {
            line: 126,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 115,
            column: 12
          },
          end: {
            line: 126,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 115
      },
      "10": {
        loc: {
          start: {
            line: 123,
            column: 35
          },
          end: {
            line: 123,
            column: 98
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 123,
            column: 35
          },
          end: {
            line: 123,
            column: 70
          }
        }, {
          start: {
            line: 123,
            column: 74
          },
          end: {
            line: 123,
            column: 98
          }
        }],
        line: 123
      },
      "11": {
        loc: {
          start: {
            line: 143,
            column: 20
          },
          end: {
            line: 156,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 143,
            column: 20
          },
          end: {
            line: 156,
            column: 21
          }
        }, {
          start: {
            line: 149,
            column: 27
          },
          end: {
            line: 156,
            column: 21
          }
        }],
        line: 143
      },
      "12": {
        loc: {
          start: {
            line: 214,
            column: 12
          },
          end: {
            line: 219,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 214,
            column: 12
          },
          end: {
            line: 219,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 214
      },
      "13": {
        loc: {
          start: {
            line: 236,
            column: 12
          },
          end: {
            line: 241,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 236,
            column: 12
          },
          end: {
            line: 241,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 236
      },
      "14": {
        loc: {
          start: {
            line: 259,
            column: 12
          },
          end: {
            line: 259,
            column: 42
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 259,
            column: 12
          },
          end: {
            line: 259,
            column: 42
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 259
      },
      "15": {
        loc: {
          start: {
            line: 274,
            column: 12
          },
          end: {
            line: 274,
            column: 44
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 274,
            column: 12
          },
          end: {
            line: 274,
            column: 44
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 274
      },
      "16": {
        loc: {
          start: {
            line: 286,
            column: 8
          },
          end: {
            line: 286,
            column: 35
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 286,
            column: 8
          },
          end: {
            line: 286,
            column: 35
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 286
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/stefanbekker/projects/fancy-planties/src/lib/services/care-service.ts"],
      sourcesContent: ["import { db } from '@/lib/db';\nimport { plantInstances } from '@/lib/db/schema';\nimport { eq, and } from 'drizzle-orm';\nimport type { \n  CareFormInput,\n  QuickCareLogInput,\n  BulkCareInput,\n  CareFilterInput \n} from '@/lib/validation/care-schemas';\nimport type { \n  BulkCareResult,\n  EnhancedCareHistory,\n  CareDashboardData,\n  PlantCareStatistics\n} from '@/lib/types/care-types';\nimport { careHelpers } from '@/lib/types/care-types';\nimport { CareHistoryQueries } from '@/lib/db/queries/care-history';\nimport { CareCalculator } from './care-calculator';\nimport { careValidation } from '@/lib/validation/care-schemas';\n\n/**\n * Service layer for care operations\n */\nexport class CareService {\n  /**\n   * Log a new care event\n   */\n  static async logCareEvent(\n    userId: number,\n    careData: CareFormInput\n  ): Promise<{ success: boolean; careHistory?: EnhancedCareHistory; error?: string }> {\n    try {\n      // Validate input\n      const validation = careValidation.validateCareForm(careData);\n      if (!validation.success) {\n        return {\n          success: false,\n          error: validation.error.issues[0]?.message || 'Invalid care data'\n        };\n      }\n\n      // Create care history entry\n      const newCareHistory = await CareHistoryQueries.createCareHistory({\n        userId,\n        plantInstanceId: careData.plantInstanceId,\n        careType: careData.careType,\n        careDate: careData.careDate,\n        notes: careData.notes,\n        fertilizerType: careData.fertilizerType,\n        potSize: careData.potSize,\n        soilType: careData.soilType,\n        images: careData.images || [],\n      });\n\n      // Update plant instance if needed\n      if (careData.updateSchedule && careData.careType === 'fertilizer') {\n        await this.updatePlantFertilizerSchedule(\n          careData.plantInstanceId,\n          userId,\n          careData.careDate\n        );\n      }\n\n      if (careData.careType === 'repot') {\n        await this.updatePlantRepotDate(\n          careData.plantInstanceId,\n          userId,\n          careData.careDate\n        );\n      }\n\n      // Get enhanced care history for response\n      const careHistoryRecord = await CareHistoryQueries.getCareHistoryById(newCareHistory.id);\n      \n      if (!careHistoryRecord) {\n        return {\n          success: false,\n          error: 'Failed to retrieve care history after creation'\n        };\n      }\n\n      // Create enhanced care history record\n      const now = new Date();\n      const daysSinceCare = Math.floor((now.getTime() - careHistoryRecord.careDate.getTime()) / (1000 * 60 * 60 * 24));\n      \n      const enhancedCareHistory: EnhancedCareHistory = {\n        ...careHistoryRecord,\n        daysSinceCare,\n        formattedDate: careHelpers.formatCareDate(careHistoryRecord.careDate),\n        careTypeDisplay: careHelpers.getCareTypeDisplay(careHistoryRecord.careType),\n      };\n      \n      return {\n        success: true,\n        careHistory: enhancedCareHistory\n      };\n    } catch (error) {\n      console.error('Error logging care event:', error);\n      return {\n        success: false,\n        error: 'Failed to log care event'\n      };\n    }\n  }\n\n  /**\n   * Quick care logging for simple actions\n   */\n  static async quickCareLog(\n    userId: number,\n    quickCareData: QuickCareLogInput\n  ): Promise<{ success: boolean; careHistory?: EnhancedCareHistory; error?: string }> {\n    try {\n      // Validate input\n      const validation = careValidation.validateQuickCareLog(quickCareData);\n      if (!validation.success) {\n        return {\n          success: false,\n          error: validation.error.issues[0]?.message || 'Invalid quick care data'\n        };\n      }\n\n      // Convert to full care form data\n      const careFormData: CareFormInput = {\n        plantInstanceId: quickCareData.plantInstanceId,\n        careType: quickCareData.careType,\n        careDate: quickCareData.careDate,\n        notes: quickCareData.notes,\n        images: [],\n        updateSchedule: quickCareData.careType === 'fertilizer',\n      };\n\n      return await this.logCareEvent(userId, careFormData);\n    } catch (error) {\n      console.error('Error with quick care log:', error);\n      return {\n        success: false,\n        error: 'Failed to log quick care'\n      };\n    }\n  }\n\n  /**\n   * Bulk care operation for multiple plants\n   */\n  static async bulkCareOperation(\n    userId: number,\n    bulkCareData: BulkCareInput\n  ): Promise<BulkCareResult> {\n    try {\n      // Validate input\n      const validation = careValidation.validateBulkCare(bulkCareData);\n      if (!validation.success) {\n        return {\n          success: false,\n          successCount: 0,\n          failureCount: bulkCareData.plantInstanceIds.length,\n          results: bulkCareData.plantInstanceIds.map(id => ({\n            plantInstanceId: id,\n            success: false,\n            error: validation.error.issues[0]?.message || 'Invalid bulk care data'\n          }))\n        };\n      }\n\n      const results = [];\n      let successCount = 0;\n      let failureCount = 0;\n\n      // Process each plant instance\n      for (const plantInstanceId of bulkCareData.plantInstanceIds) {\n        try {\n          const careFormData: CareFormInput = {\n            plantInstanceId,\n            careType: bulkCareData.careType,\n            careDate: bulkCareData.careDate,\n            notes: bulkCareData.notes,\n            fertilizerType: bulkCareData.fertilizerType,\n            images: [],\n            updateSchedule: bulkCareData.careType === 'fertilizer',\n          };\n\n          const result = await this.logCareEvent(userId, careFormData);\n          \n          if (result.success) {\n            successCount++;\n            results.push({\n              plantInstanceId,\n              success: true\n            });\n          } else {\n            failureCount++;\n            results.push({\n              plantInstanceId,\n              success: false,\n              error: result.error\n            });\n          }\n        } catch (error) {\n          failureCount++;\n          results.push({\n            plantInstanceId,\n            success: false,\n            error: 'Failed to process care for this plant'\n          });\n        }\n      }\n\n      return {\n        success: successCount > 0,\n        successCount,\n        failureCount,\n        results\n      };\n    } catch (error) {\n      console.error('Error with bulk care operation:', error);\n      return {\n        success: false,\n        successCount: 0,\n        failureCount: bulkCareData.plantInstanceIds.length,\n        results: bulkCareData.plantInstanceIds.map(id => ({\n          plantInstanceId: id,\n          success: false,\n          error: 'Failed to process bulk care operation'\n        }))\n      };\n    }\n  }\n\n  /**\n   * Get care history for a plant\n   */\n  static async getPlantCareHistory(\n    plantInstanceId: number,\n    userId: number,\n    filters?: Partial<CareFilterInput>\n  ): Promise<EnhancedCareHistory[]> {\n    return await CareHistoryQueries.getCareHistoryForPlant(plantInstanceId, userId, filters);\n  }\n\n  /**\n   * Get care statistics for a plant\n   */\n  static async getPlantCareStatistics(\n    plantInstanceId: number,\n    userId: number\n  ): Promise<PlantCareStatistics | null> {\n    return await CareHistoryQueries.getPlantCareStatistics(plantInstanceId, userId);\n  }\n\n  /**\n   * Get care dashboard data\n   */\n  static async getCareDashboard(userId: number): Promise<CareDashboardData> {\n    return await CareHistoryQueries.getCareDashboardData(userId);\n  }\n\n  /**\n   * Update care history entry\n   */\n  static async updateCareHistory(\n    careHistoryId: number,\n    userId: number,\n    updates: Partial<CareFormInput>\n  ): Promise<{ success: boolean; error?: string }> {\n    try {\n      const updated = await CareHistoryQueries.updateCareHistory(careHistoryId, userId, {\n        careType: updates.careType,\n        careDate: updates.careDate,\n        notes: updates.notes,\n        fertilizerType: updates.fertilizerType,\n        potSize: updates.potSize,\n        soilType: updates.soilType,\n        images: updates.images,\n      });\n\n      if (!updated) {\n        return {\n          success: false,\n          error: 'Care history entry not found or access denied'\n        };\n      }\n\n      return { success: true };\n    } catch (error) {\n      console.error('Error updating care history:', error);\n      return {\n        success: false,\n        error: 'Failed to update care history'\n      };\n    }\n  }\n\n  /**\n   * Delete care history entry\n   */\n  static async deleteCareHistory(\n    careHistoryId: number,\n    userId: number\n  ): Promise<{ success: boolean; error?: string }> {\n    try {\n      const deleted = await CareHistoryQueries.deleteCareHistory(careHistoryId, userId);\n\n      if (!deleted) {\n        return {\n          success: false,\n          error: 'Care history entry not found or access denied'\n        };\n      }\n\n      return { success: true };\n    } catch (error) {\n      console.error('Error deleting care history:', error);\n      return {\n        success: false,\n        error: 'Failed to delete care history'\n      };\n    }\n  }\n\n  /**\n   * Get recommended care actions for a plant\n   */\n  static async getRecommendedCareActions(\n    plantInstanceId: number,\n    userId: number\n  ): Promise<string[]> {\n    try {\n      // Get plant instance\n      const [plantInstance] = await db\n        .select()\n        .from(plantInstances)\n        .where(\n          and(\n            eq(plantInstances.id, plantInstanceId),\n            eq(plantInstances.userId, userId)\n          )\n        )\n        .limit(1);\n\n      if (!plantInstance) return [];\n\n      // Get care history\n      const careHistoryData = await CareHistoryQueries.getCareHistoryForPlant(\n        plantInstanceId,\n        userId\n      );\n\n      return CareCalculator.getRecommendedCareActions(\n        plantInstance,\n        careHistoryData,\n        new Date()\n      );\n    } catch {\n      console.error('Error getting recommended care actions');\n      return [];\n    }\n  }\n\n  /**\n   * Calculate next fertilizer due date for a plant\n   */\n  static async calculateNextFertilizerDue(\n    plantInstanceId: number,\n    userId: number,\n    lastFertilizedDate: Date\n  ): Promise<Date | null> {\n    try {\n      // Get plant instance to get schedule\n      const [plantInstance] = await db\n        .select()\n        .from(plantInstances)\n        .where(\n          and(\n            eq(plantInstances.id, plantInstanceId),\n            eq(plantInstances.userId, userId)\n          )\n        )\n        .limit(1);\n\n      if (!plantInstance) return null;\n\n      return CareCalculator.calculateNextFertilizerDue(\n        lastFertilizedDate,\n        plantInstance.fertilizerSchedule\n      );\n    } catch (error) {\n      console.error('Error calculating next fertilizer due:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Private helper to update plant fertilizer schedule\n   */\n  private static async updatePlantFertilizerSchedule(\n    plantInstanceId: number,\n    userId: number,\n    lastFertilizedDate: Date\n  ): Promise<void> {\n    // Get current plant instance\n    const [plantInstance] = await db\n      .select()\n      .from(plantInstances)\n      .where(\n        and(\n          eq(plantInstances.id, plantInstanceId),\n          eq(plantInstances.userId, userId)\n        )\n      )\n      .limit(1);\n\n    if (!plantInstance) return;\n\n    // Calculate next due date\n    const nextDueDate = CareCalculator.calculateNextFertilizerDue(\n      lastFertilizedDate,\n      plantInstance.fertilizerSchedule\n    );\n\n    // Update plant instance\n    await db\n      .update(plantInstances)\n      .set({\n        lastFertilized: lastFertilizedDate,\n        fertilizerDue: nextDueDate,\n        updatedAt: new Date(),\n      })\n      .where(\n        and(\n          eq(plantInstances.id, plantInstanceId),\n          eq(plantInstances.userId, userId)\n        )\n      );\n  }\n\n  /**\n   * Private helper to update plant repot date\n   */\n  private static async updatePlantRepotDate(\n    plantInstanceId: number,\n    userId: number,\n    repotDate: Date\n  ): Promise<void> {\n    await db\n      .update(plantInstances)\n      .set({\n        lastRepot: repotDate,\n        updatedAt: new Date(),\n      })\n      .where(\n        and(\n          eq(plantInstances.id, plantInstanceId),\n          eq(plantInstances.userId, userId)\n        )\n      );\n  }\n}"],
      names: ["CareService", "logCareEvent", "userId", "careData", "validation", "careValidation", "validateCareForm", "success", "error", "issues", "message", "newCareHistory", "CareHistoryQueries", "createCareHistory", "plantInstanceId", "careType", "careDate", "notes", "fertilizerType", "potSize", "soilType", "images", "updateSchedule", "updatePlantFertilizerSchedule", "updatePlantRepotDate", "careHistoryRecord", "getCareHistoryById", "id", "now", "Date", "daysSinceCare", "Math", "floor", "getTime", "enhancedCareHistory", "formattedDate", "careHelpers", "formatCareDate", "careTypeDisplay", "getCareTypeDisplay", "careHistory", "console", "quickCareLog", "quickCareData", "validateQuickCareLog", "careFormData", "bulkCareOperation", "bulkCareData", "validateBulkCare", "successCount", "failureCount", "plantInstanceIds", "length", "results", "map", "result", "push", "getPlantCareHistory", "filters", "getCareHistoryForPlant", "getPlantCareStatistics", "getCareDashboard", "getCareDashboardData", "updateCareHistory", "careHistoryId", "updates", "updated", "deleteCareHistory", "deleted", "getRecommendedCareActions", "plantInstance", "db", "select", "from", "plantInstances", "where", "and", "eq", "limit", "careHistoryData", "CareCalculator", "calculateNextFertilizerDue", "lastFertilizedDate", "fertilizerSchedule", "nextDueDate", "update", "set", "lastFertilized", "fertilizerDue", "updatedAt", "repotDate", "lastRepot"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "dd0c189df4ba1f3651a4ae2eaee0fed73a4c1d85"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_khb1u57em = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_khb1u57em();
cov_khb1u57em().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_khb1u57em().s[1]++;
Object.defineProperty(exports, "CareService", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_khb1u57em().f[0]++;
    cov_khb1u57em().s[2]++;
    return CareService;
  }
});
const _db =
/* istanbul ignore next */
(cov_khb1u57em().s[3]++, require("../db"));
const _schema =
/* istanbul ignore next */
(cov_khb1u57em().s[4]++, require("../db/schema"));
const _drizzleorm =
/* istanbul ignore next */
(cov_khb1u57em().s[5]++, require("drizzle-orm"));
const _caretypes =
/* istanbul ignore next */
(cov_khb1u57em().s[6]++, require("../types/care-types"));
const _carehistory =
/* istanbul ignore next */
(cov_khb1u57em().s[7]++, require("../db/queries/care-history"));
const _carecalculator =
/* istanbul ignore next */
(cov_khb1u57em().s[8]++, require("./care-calculator"));
const _careschemas =
/* istanbul ignore next */
(cov_khb1u57em().s[9]++, require("../validation/care-schemas"));
class CareService {
  /**
  * Log a new care event
  */
  static async logCareEvent(userId, careData) {
    /* istanbul ignore next */
    cov_khb1u57em().f[1]++;
    cov_khb1u57em().s[10]++;
    try {
      // Validate input
      const validation =
      /* istanbul ignore next */
      (cov_khb1u57em().s[11]++, _careschemas.careValidation.validateCareForm(careData));
      /* istanbul ignore next */
      cov_khb1u57em().s[12]++;
      if (!validation.success) {
        /* istanbul ignore next */
        cov_khb1u57em().b[0][0]++;
        cov_khb1u57em().s[13]++;
        return {
          success: false,
          error:
          /* istanbul ignore next */
          (cov_khb1u57em().b[1][0]++, validation.error.issues[0]?.message) ||
          /* istanbul ignore next */
          (cov_khb1u57em().b[1][1]++, 'Invalid care data')
        };
      } else
      /* istanbul ignore next */
      {
        cov_khb1u57em().b[0][1]++;
      }
      // Create care history entry
      const newCareHistory =
      /* istanbul ignore next */
      (cov_khb1u57em().s[14]++, await _carehistory.CareHistoryQueries.createCareHistory({
        userId,
        plantInstanceId: careData.plantInstanceId,
        careType: careData.careType,
        careDate: careData.careDate,
        notes: careData.notes,
        fertilizerType: careData.fertilizerType,
        potSize: careData.potSize,
        soilType: careData.soilType,
        images:
        /* istanbul ignore next */
        (cov_khb1u57em().b[2][0]++, careData.images) ||
        /* istanbul ignore next */
        (cov_khb1u57em().b[2][1]++, [])
      }));
      // Update plant instance if needed
      /* istanbul ignore next */
      cov_khb1u57em().s[15]++;
      if (
      /* istanbul ignore next */
      (cov_khb1u57em().b[4][0]++, careData.updateSchedule) &&
      /* istanbul ignore next */
      (cov_khb1u57em().b[4][1]++, careData.careType === 'fertilizer')) {
        /* istanbul ignore next */
        cov_khb1u57em().b[3][0]++;
        cov_khb1u57em().s[16]++;
        await this.updatePlantFertilizerSchedule(careData.plantInstanceId, userId, careData.careDate);
      } else
      /* istanbul ignore next */
      {
        cov_khb1u57em().b[3][1]++;
      }
      cov_khb1u57em().s[17]++;
      if (careData.careType === 'repot') {
        /* istanbul ignore next */
        cov_khb1u57em().b[5][0]++;
        cov_khb1u57em().s[18]++;
        await this.updatePlantRepotDate(careData.plantInstanceId, userId, careData.careDate);
      } else
      /* istanbul ignore next */
      {
        cov_khb1u57em().b[5][1]++;
      }
      // Get enhanced care history for response
      const careHistoryRecord =
      /* istanbul ignore next */
      (cov_khb1u57em().s[19]++, await _carehistory.CareHistoryQueries.getCareHistoryById(newCareHistory.id));
      /* istanbul ignore next */
      cov_khb1u57em().s[20]++;
      if (!careHistoryRecord) {
        /* istanbul ignore next */
        cov_khb1u57em().b[6][0]++;
        cov_khb1u57em().s[21]++;
        return {
          success: false,
          error: 'Failed to retrieve care history after creation'
        };
      } else
      /* istanbul ignore next */
      {
        cov_khb1u57em().b[6][1]++;
      }
      // Create enhanced care history record
      const now =
      /* istanbul ignore next */
      (cov_khb1u57em().s[22]++, new Date());
      const daysSinceCare =
      /* istanbul ignore next */
      (cov_khb1u57em().s[23]++, Math.floor((now.getTime() - careHistoryRecord.careDate.getTime()) / (1000 * 60 * 60 * 24)));
      const enhancedCareHistory =
      /* istanbul ignore next */
      (cov_khb1u57em().s[24]++, {
        ...careHistoryRecord,
        daysSinceCare,
        formattedDate: _caretypes.careHelpers.formatCareDate(careHistoryRecord.careDate),
        careTypeDisplay: _caretypes.careHelpers.getCareTypeDisplay(careHistoryRecord.careType)
      });
      /* istanbul ignore next */
      cov_khb1u57em().s[25]++;
      return {
        success: true,
        careHistory: enhancedCareHistory
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_khb1u57em().s[26]++;
      console.error('Error logging care event:', error);
      /* istanbul ignore next */
      cov_khb1u57em().s[27]++;
      return {
        success: false,
        error: 'Failed to log care event'
      };
    }
  }
  /**
  * Quick care logging for simple actions
  */
  static async quickCareLog(userId, quickCareData) {
    /* istanbul ignore next */
    cov_khb1u57em().f[2]++;
    cov_khb1u57em().s[28]++;
    try {
      // Validate input
      const validation =
      /* istanbul ignore next */
      (cov_khb1u57em().s[29]++, _careschemas.careValidation.validateQuickCareLog(quickCareData));
      /* istanbul ignore next */
      cov_khb1u57em().s[30]++;
      if (!validation.success) {
        /* istanbul ignore next */
        cov_khb1u57em().b[7][0]++;
        cov_khb1u57em().s[31]++;
        return {
          success: false,
          error:
          /* istanbul ignore next */
          (cov_khb1u57em().b[8][0]++, validation.error.issues[0]?.message) ||
          /* istanbul ignore next */
          (cov_khb1u57em().b[8][1]++, 'Invalid quick care data')
        };
      } else
      /* istanbul ignore next */
      {
        cov_khb1u57em().b[7][1]++;
      }
      // Convert to full care form data
      const careFormData =
      /* istanbul ignore next */
      (cov_khb1u57em().s[32]++, {
        plantInstanceId: quickCareData.plantInstanceId,
        careType: quickCareData.careType,
        careDate: quickCareData.careDate,
        notes: quickCareData.notes,
        images: [],
        updateSchedule: quickCareData.careType === 'fertilizer'
      });
      /* istanbul ignore next */
      cov_khb1u57em().s[33]++;
      return await this.logCareEvent(userId, careFormData);
    } catch (error) {
      /* istanbul ignore next */
      cov_khb1u57em().s[34]++;
      console.error('Error with quick care log:', error);
      /* istanbul ignore next */
      cov_khb1u57em().s[35]++;
      return {
        success: false,
        error: 'Failed to log quick care'
      };
    }
  }
  /**
  * Bulk care operation for multiple plants
  */
  static async bulkCareOperation(userId, bulkCareData) {
    /* istanbul ignore next */
    cov_khb1u57em().f[3]++;
    cov_khb1u57em().s[36]++;
    try {
      // Validate input
      const validation =
      /* istanbul ignore next */
      (cov_khb1u57em().s[37]++, _careschemas.careValidation.validateBulkCare(bulkCareData));
      /* istanbul ignore next */
      cov_khb1u57em().s[38]++;
      if (!validation.success) {
        /* istanbul ignore next */
        cov_khb1u57em().b[9][0]++;
        cov_khb1u57em().s[39]++;
        return {
          success: false,
          successCount: 0,
          failureCount: bulkCareData.plantInstanceIds.length,
          results: bulkCareData.plantInstanceIds.map(id => {
            /* istanbul ignore next */
            cov_khb1u57em().f[4]++;
            cov_khb1u57em().s[40]++;
            return {
              plantInstanceId: id,
              success: false,
              error:
              /* istanbul ignore next */
              (cov_khb1u57em().b[10][0]++, validation.error.issues[0]?.message) ||
              /* istanbul ignore next */
              (cov_khb1u57em().b[10][1]++, 'Invalid bulk care data')
            };
          })
        };
      } else
      /* istanbul ignore next */
      {
        cov_khb1u57em().b[9][1]++;
      }
      const results =
      /* istanbul ignore next */
      (cov_khb1u57em().s[41]++, []);
      let successCount =
      /* istanbul ignore next */
      (cov_khb1u57em().s[42]++, 0);
      let failureCount =
      /* istanbul ignore next */
      (cov_khb1u57em().s[43]++, 0);
      // Process each plant instance
      /* istanbul ignore next */
      cov_khb1u57em().s[44]++;
      for (const plantInstanceId of bulkCareData.plantInstanceIds) {
        /* istanbul ignore next */
        cov_khb1u57em().s[45]++;
        try {
          const careFormData =
          /* istanbul ignore next */
          (cov_khb1u57em().s[46]++, {
            plantInstanceId,
            careType: bulkCareData.careType,
            careDate: bulkCareData.careDate,
            notes: bulkCareData.notes,
            fertilizerType: bulkCareData.fertilizerType,
            images: [],
            updateSchedule: bulkCareData.careType === 'fertilizer'
          });
          const result =
          /* istanbul ignore next */
          (cov_khb1u57em().s[47]++, await this.logCareEvent(userId, careFormData));
          /* istanbul ignore next */
          cov_khb1u57em().s[48]++;
          if (result.success) {
            /* istanbul ignore next */
            cov_khb1u57em().b[11][0]++;
            cov_khb1u57em().s[49]++;
            successCount++;
            /* istanbul ignore next */
            cov_khb1u57em().s[50]++;
            results.push({
              plantInstanceId,
              success: true
            });
          } else {
            /* istanbul ignore next */
            cov_khb1u57em().b[11][1]++;
            cov_khb1u57em().s[51]++;
            failureCount++;
            /* istanbul ignore next */
            cov_khb1u57em().s[52]++;
            results.push({
              plantInstanceId,
              success: false,
              error: result.error
            });
          }
        } catch (error) {
          /* istanbul ignore next */
          cov_khb1u57em().s[53]++;
          failureCount++;
          /* istanbul ignore next */
          cov_khb1u57em().s[54]++;
          results.push({
            plantInstanceId,
            success: false,
            error: 'Failed to process care for this plant'
          });
        }
      }
      /* istanbul ignore next */
      cov_khb1u57em().s[55]++;
      return {
        success: successCount > 0,
        successCount,
        failureCount,
        results
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_khb1u57em().s[56]++;
      console.error('Error with bulk care operation:', error);
      /* istanbul ignore next */
      cov_khb1u57em().s[57]++;
      return {
        success: false,
        successCount: 0,
        failureCount: bulkCareData.plantInstanceIds.length,
        results: bulkCareData.plantInstanceIds.map(id => {
          /* istanbul ignore next */
          cov_khb1u57em().f[5]++;
          cov_khb1u57em().s[58]++;
          return {
            plantInstanceId: id,
            success: false,
            error: 'Failed to process bulk care operation'
          };
        })
      };
    }
  }
  /**
  * Get care history for a plant
  */
  static async getPlantCareHistory(plantInstanceId, userId, filters) {
    /* istanbul ignore next */
    cov_khb1u57em().f[6]++;
    cov_khb1u57em().s[59]++;
    return await _carehistory.CareHistoryQueries.getCareHistoryForPlant(plantInstanceId, userId, filters);
  }
  /**
  * Get care statistics for a plant
  */
  static async getPlantCareStatistics(plantInstanceId, userId) {
    /* istanbul ignore next */
    cov_khb1u57em().f[7]++;
    cov_khb1u57em().s[60]++;
    return await _carehistory.CareHistoryQueries.getPlantCareStatistics(plantInstanceId, userId);
  }
  /**
  * Get care dashboard data
  */
  static async getCareDashboard(userId) {
    /* istanbul ignore next */
    cov_khb1u57em().f[8]++;
    cov_khb1u57em().s[61]++;
    return await _carehistory.CareHistoryQueries.getCareDashboardData(userId);
  }
  /**
  * Update care history entry
  */
  static async updateCareHistory(careHistoryId, userId, updates) {
    /* istanbul ignore next */
    cov_khb1u57em().f[9]++;
    cov_khb1u57em().s[62]++;
    try {
      const updated =
      /* istanbul ignore next */
      (cov_khb1u57em().s[63]++, await _carehistory.CareHistoryQueries.updateCareHistory(careHistoryId, userId, {
        careType: updates.careType,
        careDate: updates.careDate,
        notes: updates.notes,
        fertilizerType: updates.fertilizerType,
        potSize: updates.potSize,
        soilType: updates.soilType,
        images: updates.images
      }));
      /* istanbul ignore next */
      cov_khb1u57em().s[64]++;
      if (!updated) {
        /* istanbul ignore next */
        cov_khb1u57em().b[12][0]++;
        cov_khb1u57em().s[65]++;
        return {
          success: false,
          error: 'Care history entry not found or access denied'
        };
      } else
      /* istanbul ignore next */
      {
        cov_khb1u57em().b[12][1]++;
      }
      cov_khb1u57em().s[66]++;
      return {
        success: true
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_khb1u57em().s[67]++;
      console.error('Error updating care history:', error);
      /* istanbul ignore next */
      cov_khb1u57em().s[68]++;
      return {
        success: false,
        error: 'Failed to update care history'
      };
    }
  }
  /**
  * Delete care history entry
  */
  static async deleteCareHistory(careHistoryId, userId) {
    /* istanbul ignore next */
    cov_khb1u57em().f[10]++;
    cov_khb1u57em().s[69]++;
    try {
      const deleted =
      /* istanbul ignore next */
      (cov_khb1u57em().s[70]++, await _carehistory.CareHistoryQueries.deleteCareHistory(careHistoryId, userId));
      /* istanbul ignore next */
      cov_khb1u57em().s[71]++;
      if (!deleted) {
        /* istanbul ignore next */
        cov_khb1u57em().b[13][0]++;
        cov_khb1u57em().s[72]++;
        return {
          success: false,
          error: 'Care history entry not found or access denied'
        };
      } else
      /* istanbul ignore next */
      {
        cov_khb1u57em().b[13][1]++;
      }
      cov_khb1u57em().s[73]++;
      return {
        success: true
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_khb1u57em().s[74]++;
      console.error('Error deleting care history:', error);
      /* istanbul ignore next */
      cov_khb1u57em().s[75]++;
      return {
        success: false,
        error: 'Failed to delete care history'
      };
    }
  }
  /**
  * Get recommended care actions for a plant
  */
  static async getRecommendedCareActions(plantInstanceId, userId) {
    /* istanbul ignore next */
    cov_khb1u57em().f[11]++;
    cov_khb1u57em().s[76]++;
    try {
      // Get plant instance
      const [plantInstance] =
      /* istanbul ignore next */
      (cov_khb1u57em().s[77]++, await _db.db.select().from(_schema.plantInstances).where((0, _drizzleorm.and)((0, _drizzleorm.eq)(_schema.plantInstances.id, plantInstanceId), (0, _drizzleorm.eq)(_schema.plantInstances.userId, userId))).limit(1));
      /* istanbul ignore next */
      cov_khb1u57em().s[78]++;
      if (!plantInstance) {
        /* istanbul ignore next */
        cov_khb1u57em().b[14][0]++;
        cov_khb1u57em().s[79]++;
        return [];
      } else
      /* istanbul ignore next */
      {
        cov_khb1u57em().b[14][1]++;
      }
      // Get care history
      const careHistoryData =
      /* istanbul ignore next */
      (cov_khb1u57em().s[80]++, await _carehistory.CareHistoryQueries.getCareHistoryForPlant(plantInstanceId, userId));
      /* istanbul ignore next */
      cov_khb1u57em().s[81]++;
      return _carecalculator.CareCalculator.getRecommendedCareActions(plantInstance, careHistoryData, new Date());
    } catch {
      /* istanbul ignore next */
      cov_khb1u57em().s[82]++;
      console.error('Error getting recommended care actions');
      /* istanbul ignore next */
      cov_khb1u57em().s[83]++;
      return [];
    }
  }
  /**
  * Calculate next fertilizer due date for a plant
  */
  static async calculateNextFertilizerDue(plantInstanceId, userId, lastFertilizedDate) {
    /* istanbul ignore next */
    cov_khb1u57em().f[12]++;
    cov_khb1u57em().s[84]++;
    try {
      // Get plant instance to get schedule
      const [plantInstance] =
      /* istanbul ignore next */
      (cov_khb1u57em().s[85]++, await _db.db.select().from(_schema.plantInstances).where((0, _drizzleorm.and)((0, _drizzleorm.eq)(_schema.plantInstances.id, plantInstanceId), (0, _drizzleorm.eq)(_schema.plantInstances.userId, userId))).limit(1));
      /* istanbul ignore next */
      cov_khb1u57em().s[86]++;
      if (!plantInstance) {
        /* istanbul ignore next */
        cov_khb1u57em().b[15][0]++;
        cov_khb1u57em().s[87]++;
        return null;
      } else
      /* istanbul ignore next */
      {
        cov_khb1u57em().b[15][1]++;
      }
      cov_khb1u57em().s[88]++;
      return _carecalculator.CareCalculator.calculateNextFertilizerDue(lastFertilizedDate, plantInstance.fertilizerSchedule);
    } catch (error) {
      /* istanbul ignore next */
      cov_khb1u57em().s[89]++;
      console.error('Error calculating next fertilizer due:', error);
      /* istanbul ignore next */
      cov_khb1u57em().s[90]++;
      return null;
    }
  }
  /**
  * Private helper to update plant fertilizer schedule
  */
  static async updatePlantFertilizerSchedule(plantInstanceId, userId, lastFertilizedDate) {
    /* istanbul ignore next */
    cov_khb1u57em().f[13]++;
    // Get current plant instance
    const [plantInstance] =
    /* istanbul ignore next */
    (cov_khb1u57em().s[91]++, await _db.db.select().from(_schema.plantInstances).where((0, _drizzleorm.and)((0, _drizzleorm.eq)(_schema.plantInstances.id, plantInstanceId), (0, _drizzleorm.eq)(_schema.plantInstances.userId, userId))).limit(1));
    /* istanbul ignore next */
    cov_khb1u57em().s[92]++;
    if (!plantInstance) {
      /* istanbul ignore next */
      cov_khb1u57em().b[16][0]++;
      cov_khb1u57em().s[93]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_khb1u57em().b[16][1]++;
    }
    // Calculate next due date
    const nextDueDate =
    /* istanbul ignore next */
    (cov_khb1u57em().s[94]++, _carecalculator.CareCalculator.calculateNextFertilizerDue(lastFertilizedDate, plantInstance.fertilizerSchedule));
    // Update plant instance
    /* istanbul ignore next */
    cov_khb1u57em().s[95]++;
    await _db.db.update(_schema.plantInstances).set({
      lastFertilized: lastFertilizedDate,
      fertilizerDue: nextDueDate,
      updatedAt: new Date()
    }).where((0, _drizzleorm.and)((0, _drizzleorm.eq)(_schema.plantInstances.id, plantInstanceId), (0, _drizzleorm.eq)(_schema.plantInstances.userId, userId)));
  }
  /**
  * Private helper to update plant repot date
  */
  static async updatePlantRepotDate(plantInstanceId, userId, repotDate) {
    /* istanbul ignore next */
    cov_khb1u57em().f[14]++;
    cov_khb1u57em().s[96]++;
    await _db.db.update(_schema.plantInstances).set({
      lastRepot: repotDate,
      updatedAt: new Date()
    }).where((0, _drizzleorm.and)((0, _drizzleorm.eq)(_schema.plantInstances.id, plantInstanceId), (0, _drizzleorm.eq)(_schema.plantInstances.userId, userId)));
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,