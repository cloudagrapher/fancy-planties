be655870c1f0d14b41897bf2fe93b7c2
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get EmailVerificationCleanupService () {
        return EmailVerificationCleanupService;
    },
    get emailVerificationCleanupService () {
        return emailVerificationCleanupService;
    }
});
require("server-only");
const _emailverificationcodeservice = require("./email-verification-code-service");
const _emailverificationratelimiter = require("./email-verification-rate-limiter");
const _emailservicemonitor = require("./email-service-monitor");
class EmailVerificationCleanupService {
    /**
   * Run cleanup of expired verification codes and rate limit data
   */ async runCleanup() {
        if (this.isRunning) {
            throw new Error('Cleanup is already running');
        }
        this.isRunning = true;
        const startTime = Date.now();
        try {
            console.log('[CLEANUP] Starting email verification cleanup...');
            // Clean up expired verification codes
            const expiredCodes = await _emailverificationcodeservice.emailVerificationCodeService.cleanupExpiredCodes();
            console.log(`[CLEANUP] Removed ${expiredCodes} expired verification codes`);
            // Clean up rate limit data
            const rateLimitStatsBefore = _emailverificationratelimiter.emailVerificationRateLimiter.getStats();
            _emailverificationratelimiter.emailVerificationRateLimiter.cleanup();
            const rateLimitStatsAfter = _emailverificationratelimiter.emailVerificationRateLimiter.getStats();
            const rateLimitDataCleaned = rateLimitStatsBefore.verificationAttempts - rateLimitStatsAfter.verificationAttempts + (rateLimitStatsBefore.resendRequests - rateLimitStatsAfter.resendRequests) + (rateLimitStatsBefore.emailVerificationActivity - rateLimitStatsAfter.emailVerificationActivity) + (rateLimitStatsBefore.resendCooldowns - rateLimitStatsAfter.resendCooldowns);
            console.log(`[CLEANUP] Cleaned up ${rateLimitDataCleaned} rate limit entries`);
            // Check email service health
            const emailHealth = _emailservicemonitor.emailServiceMonitor.getHealthStatus();
            const emailStats = _emailservicemonitor.emailServiceMonitor.getStats();
            if (emailHealth.status !== 'healthy') {
                console.warn(`[CLEANUP] Email service health: ${emailHealth.status}`, {
                    issues: emailHealth.issues,
                    recommendations: emailHealth.recommendations
                });
            }
            const stats = {
                expiredCodes,
                rateLimitData: rateLimitDataCleaned,
                timestamp: startTime,
                emailServiceHealth: {
                    status: emailHealth.status,
                    quotaUsage: _emailservicemonitor.emailServiceMonitor.getQuotaUsagePercentage(),
                    successRate: emailStats.successRate,
                    issues: emailHealth.issues
                }
            };
            // Store cleanup stats (keep last 24 entries)
            this.cleanupStats.push(stats);
            if (this.cleanupStats.length > 24) {
                this.cleanupStats.shift();
            }
            this.lastCleanup = startTime;
            const duration = Date.now() - startTime;
            console.log(`[CLEANUP] Email verification cleanup completed in ${duration}ms`);
            return stats;
        } catch (error) {
            console.error('[CLEANUP] Email verification cleanup failed:', error);
            throw error;
        } finally{
            this.isRunning = false;
        }
    }
    /**
   * Schedule automatic cleanup to run periodically
   */ scheduleCleanup(intervalMs = 60 * 60 * 1000) {
        console.log(`[CLEANUP] Scheduling email verification cleanup every ${intervalMs / 1000} seconds`);
        const runScheduledCleanup = async ()=>{
            try {
                await this.runCleanup();
            } catch (error) {
                console.error('[CLEANUP] Scheduled cleanup failed:', error);
            }
        };
        // Run initial cleanup after a short delay
        setTimeout(runScheduledCleanup, 5000); // 5 seconds
        // Then run periodically
        setInterval(runScheduledCleanup, intervalMs);
    }
    /**
   * Run startup cleanup to clean any leftover data
   */ async runStartupCleanup() {
        console.log('[CLEANUP] Running startup cleanup...');
        try {
            const stats = await this.runCleanup();
            console.log('[CLEANUP] Startup cleanup completed successfully');
            return stats;
        } catch (error) {
            console.error('[CLEANUP] Startup cleanup failed:', error);
            throw error;
        }
    }
    /**
   * Get cleanup statistics
   */ getCleanupStats() {
        const totalExpiredCodes = this.cleanupStats.reduce((sum, stat)=>sum + stat.expiredCodes, 0);
        const totalRateLimitData = this.cleanupStats.reduce((sum, stat)=>sum + stat.rateLimitData, 0);
        return {
            lastCleanup: this.lastCleanup,
            isRunning: this.isRunning,
            recentStats: [
                ...this.cleanupStats
            ],
            totalExpiredCodes,
            totalRateLimitData
        };
    }
    /**
   * Get current system status
   */ async getSystemStatus() {
        const codeStats = await _emailverificationcodeservice.emailVerificationCodeService.getCodeStats();
        const rateLimitStats = _emailverificationratelimiter.emailVerificationRateLimiter.getStats();
        const cleanupStats = this.getCleanupStats();
        const emailHealth = _emailservicemonitor.emailServiceMonitor.getHealthStatus();
        const emailStats = _emailservicemonitor.emailServiceMonitor.getStats();
        // Estimate next cleanup time (assuming hourly cleanup)
        const nextCleanupDue = cleanupStats.lastCleanup + 60 * 60 * 1000;
        return {
            verificationCodes: codeStats,
            rateLimits: rateLimitStats,
            emailService: {
                health: emailHealth.status,
                quotaUsage: _emailservicemonitor.emailServiceMonitor.getQuotaUsagePercentage(),
                successRate: emailStats.successRate,
                totalSent: emailStats.totalSent,
                totalFailed: emailStats.totalFailed,
                averageResponseTime: emailStats.averageResponseTime,
                issues: emailHealth.issues,
                recommendations: emailHealth.recommendations
            },
            cleanup: {
                lastCleanup: cleanupStats.lastCleanup,
                isRunning: cleanupStats.isRunning,
                nextCleanupDue
            }
        };
    }
    /**
   * Force cleanup if needed (for manual triggers)
   */ async forceCleanup() {
        if (this.isRunning) {
            throw new Error('Cleanup is already running. Please wait for it to complete.');
        }
        console.log('[CLEANUP] Force cleanup requested');
        return await this.runCleanup();
    }
    constructor(){
        this.isRunning = false;
        this.lastCleanup = 0;
        this.cleanupStats = [];
    }
}
const emailVerificationCleanupService = new EmailVerificationCleanupService();
// Auto-schedule cleanup when this module is imported
if (process.env.NODE_ENV === 'production') {
    // In production, start cleanup automatically
    emailVerificationCleanupService.scheduleCleanup();
} else {
    // In development, run less frequently to avoid noise
    emailVerificationCleanupService.scheduleCleanup(2 * 60 * 60 * 1000); // 2 hours
}

//# sourceMappingURL=data:application/json;base64,