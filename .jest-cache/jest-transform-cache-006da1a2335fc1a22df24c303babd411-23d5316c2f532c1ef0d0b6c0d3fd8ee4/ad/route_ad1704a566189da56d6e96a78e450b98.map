{"version":3,"names":["cov_1zkww4ecjm","actualCoverage","s","GET","request","f","user","_server1","validateRequest","b","_server","NextResponse","json","error","status","searchParams","URL","url","query","get","searchData","userId","id","activeOnly","limit","parseInt","offset","validatedSearch","_plantschemas","plantInstanceSearchSchema","parse","result","_plantinstances","PlantInstanceQueries","searchWithFilters","console","Error","message","includes","details"],"sources":["/Users/stefanbekker/projects/fancy-planties/src/app/api/plant-instances/search/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { PlantInstanceQueries } from '@/lib/db/queries/plant-instances';\nimport { plantInstanceSearchSchema } from '@/lib/validation/plant-schemas';\nimport { validateRequest } from '@/lib/auth/server';\n\n// GET /api/plant-instances/search - Search plant instances\nexport async function GET(request: NextRequest) {\n  try {\n    const { user } = await validateRequest();\n    if (!user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const { searchParams } = new URL(request.url);\n    \n    const query = searchParams.get('query');\n    if (!query) {\n      return NextResponse.json({ error: 'Search query is required' }, { status: 400 });\n    }\n\n    // Parse search parameters\n    const searchData = {\n      query,\n      userId: user.id,\n      activeOnly: searchParams.get('activeOnly') !== 'false', // Default to true\n      limit: searchParams.get('limit') ? parseInt(searchParams.get('limit')!, 10) : 20,\n      offset: searchParams.get('offset') ? parseInt(searchParams.get('offset')!, 10) : 0,\n    };\n\n    // Validate search parameters\n    const validatedSearch = plantInstanceSearchSchema.parse(searchData);\n    \n    // Perform search\n    const result = await PlantInstanceQueries.searchWithFilters(validatedSearch);\n    \n    return NextResponse.json(result);\n  } catch (error) {\n    console.error('Failed to search plant instances:', error);\n    \n    if (error instanceof Error && error.message.includes('validation')) {\n      return NextResponse.json(\n        { error: 'Invalid search parameters', details: error.message },\n        { status: 400 }\n      );\n    }\n    \n    return NextResponse.json(\n      { error: 'Failed to search plant instances' },\n      { status: 500 }\n    );\n  }\n}"],"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","ignoreList":[]}