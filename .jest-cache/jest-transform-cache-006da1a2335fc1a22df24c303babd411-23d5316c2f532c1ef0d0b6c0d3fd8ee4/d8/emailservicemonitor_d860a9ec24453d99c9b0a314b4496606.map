{"version":3,"sources":["/Users/stefanbekker/projects/fancy-planties/src/lib/services/email-service-monitor.ts"],"sourcesContent":["import 'server-only';\n\nexport interface EmailServiceStats {\n  totalSent: number;\n  totalFailed: number;\n  quotaUsed: number;\n  quotaLimit: number;\n  lastError?: {\n    message: string;\n    code: string;\n    timestamp: number;\n  };\n  errorsByType: Record<string, number>;\n  successRate: number;\n  averageResponseTime: number;\n  lastResetTime: number;\n}\n\nexport interface EmailServiceEvent {\n  type: 'success' | 'error';\n  timestamp: number;\n  responseTime: number;\n  error?: {\n    message: string;\n    code: string;\n  };\n}\n\nexport class EmailServiceMonitor {\n  private stats: EmailServiceStats;\n  private recentEvents: EmailServiceEvent[] = [];\n  private readonly maxEvents = 1000; // Keep last 1000 events\n  private readonly resetInterval = 24 * 60 * 60 * 1000; // 24 hours\n\n  constructor() {\n    this.stats = {\n      totalSent: 0,\n      totalFailed: 0,\n      quotaUsed: 0,\n      quotaLimit: this.getQuotaLimit(),\n      errorsByType: {},\n      successRate: 100,\n      averageResponseTime: 0,\n      lastResetTime: Date.now(),\n    };\n  }\n\n  /**\n   * Record a successful email send\n   */\n  recordSuccess(responseTime: number): void {\n    this.stats.totalSent++;\n    if (this.stats.quotaLimit > 0) {\n      this.stats.quotaUsed++;\n    }\n    \n    const event: EmailServiceEvent = {\n      type: 'success',\n      timestamp: Date.now(),\n      responseTime,\n    };\n    \n    this.addEvent(event);\n    this.updateStats();\n    \n    // Log success in development\n    if (process.env.NODE_ENV === 'development') {\n      console.log(`[EMAIL_MONITOR] Email sent successfully (${responseTime}ms)`);\n    }\n  }\n\n  /**\n   * Record a failed email send\n   */\n  recordFailure(error: { message: string; code: string }, responseTime: number): void {\n    this.stats.totalFailed++;\n    \n    // Update error counts by type\n    this.stats.errorsByType[error.code] = (this.stats.errorsByType[error.code] || 0) + 1;\n    \n    // Update last error\n    this.stats.lastError = {\n      message: error.message,\n      code: error.code,\n      timestamp: Date.now(),\n    };\n    \n    const event: EmailServiceEvent = {\n      type: 'error',\n      timestamp: Date.now(),\n      responseTime,\n      error,\n    };\n    \n    this.addEvent(event);\n    this.updateStats();\n    \n    // Log error\n    console.error(`[EMAIL_MONITOR] Email send failed: ${error.code} - ${error.message} (${responseTime}ms)`);\n    \n    // Check for quota issues\n    if (error.code === 'QUOTA_EXCEEDED') {\n      this.handleQuotaExceeded();\n    }\n  }\n\n  /**\n   * Get current statistics\n   */\n  getStats(): EmailServiceStats {\n    this.checkForReset();\n    return { ...this.stats };\n  }\n\n  /**\n   * Get recent events (last N events)\n   */\n  getRecentEvents(limit: number = 100): EmailServiceEvent[] {\n    return this.recentEvents.slice(-limit);\n  }\n\n  /**\n   * Get error summary\n   */\n  getErrorSummary(): {\n    totalErrors: number;\n    errorsByType: Record<string, number>;\n    recentErrors: EmailServiceEvent[];\n    criticalErrors: EmailServiceEvent[];\n  } {\n    const recentErrors = this.recentEvents\n      .filter(event => event.type === 'error')\n      .slice(-50);\n    \n    const criticalErrors = this.recentEvents\n      .filter(event => \n        event.type === 'error' && \n        event.error?.code === 'QUOTA_EXCEEDED'\n      )\n      .slice(-10);\n\n    return {\n      totalErrors: this.stats.totalFailed,\n      errorsByType: { ...this.stats.errorsByType },\n      recentErrors,\n      criticalErrors,\n    };\n  }\n\n  /**\n   * Check if quota is approaching limit\n   */\n  isQuotaNearLimit(threshold: number = 0.8): boolean {\n    if (this.stats.quotaLimit === 0) return false;\n    return (this.stats.quotaUsed / this.stats.quotaLimit) >= threshold;\n  }\n\n  /**\n   * Get quota usage percentage\n   */\n  getQuotaUsagePercentage(): number {\n    if (this.stats.quotaLimit === 0) return 0;\n    return Math.round((this.stats.quotaUsed / this.stats.quotaLimit) * 100);\n  }\n\n  /**\n   * Reset daily statistics (called automatically)\n   */\n  resetDailyStats(): void {\n    console.log('[EMAIL_MONITOR] Resetting daily statistics');\n    \n    this.stats.totalSent = 0;\n    this.stats.totalFailed = 0;\n    this.stats.quotaUsed = 0;\n    this.stats.errorsByType = {};\n    this.stats.lastResetTime = Date.now();\n    \n    // Keep only recent events (last 100)\n    this.recentEvents = this.recentEvents.slice(-100);\n    \n    this.updateStats();\n  }\n\n  /**\n   * Force reset statistics (for testing or manual reset)\n   */\n  forceReset(): void {\n    console.log('[EMAIL_MONITOR] Force resetting statistics');\n    this.resetDailyStats();\n  }\n\n  /**\n   * Get health status\n   */\n  getHealthStatus(): {\n    status: 'healthy' | 'warning' | 'critical';\n    issues: string[];\n    recommendations: string[];\n  } {\n    const issues: string[] = [];\n    const recommendations: string[] = [];\n    let status: 'healthy' | 'warning' | 'critical' = 'healthy';\n\n    // Check success rate\n    if (this.stats.successRate < 95) {\n      status = 'warning';\n      issues.push(`Low success rate: ${this.stats.successRate.toFixed(1)}%`);\n      recommendations.push('Check email service configuration and network connectivity');\n    }\n\n    if (this.stats.successRate < 80) {\n      status = 'critical';\n    }\n\n    // Check quota usage\n    if (this.isQuotaNearLimit(0.9)) {\n      status = status === 'critical' ? 'critical' : 'warning';\n      issues.push(`High quota usage: ${this.getQuotaUsagePercentage()}%`);\n      recommendations.push('Consider upgrading email service plan or implementing email throttling');\n    }\n\n    if (this.isQuotaNearLimit(0.95)) {\n      status = 'critical';\n    }\n\n    // Check for recent critical errors\n    const recentCriticalErrors = this.recentEvents\n      .filter(event => \n        event.type === 'error' && \n        event.error?.code === 'QUOTA_EXCEEDED' &&\n        Date.now() - event.timestamp < 60 * 60 * 1000 // Last hour\n      );\n\n    if (recentCriticalErrors.length > 0) {\n      status = 'critical';\n      issues.push('Quota exceeded errors in the last hour');\n      recommendations.push('Immediate attention required - email service quota exceeded');\n    }\n\n    // Check average response time\n    if (this.stats.averageResponseTime > 5000) {\n      status = status === 'critical' ? 'critical' : 'warning';\n      issues.push(`High response time: ${this.stats.averageResponseTime}ms`);\n      recommendations.push('Check email service performance and network latency');\n    }\n\n    return { status, issues, recommendations };\n  }\n\n  private addEvent(event: EmailServiceEvent): void {\n    this.recentEvents.push(event);\n    \n    // Keep only the most recent events\n    if (this.recentEvents.length > this.maxEvents) {\n      this.recentEvents = this.recentEvents.slice(-this.maxEvents);\n    }\n  }\n\n  private updateStats(): void {\n    const total = this.stats.totalSent + this.stats.totalFailed;\n    this.stats.successRate = total > 0 ? (this.stats.totalSent / total) * 100 : 100;\n    \n    // Calculate average response time from recent events\n    const recentEvents = this.recentEvents.slice(-100);\n    if (recentEvents.length > 0) {\n      const totalTime = recentEvents.reduce((sum, event) => sum + event.responseTime, 0);\n      this.stats.averageResponseTime = Math.round(totalTime / recentEvents.length);\n    }\n  }\n\n  private checkForReset(): void {\n    const now = Date.now();\n    if (now - this.stats.lastResetTime >= this.resetInterval) {\n      this.resetDailyStats();\n    }\n  }\n\n  private getQuotaLimit(): number {\n    // Default Resend free tier limits\n    // This could be made configurable via environment variables\n    const dailyLimit = parseInt(process.env.EMAIL_DAILY_QUOTA || '100', 10);\n    return dailyLimit;\n  }\n\n  private handleQuotaExceeded(): void {\n    console.error('[EMAIL_MONITOR] CRITICAL: Email quota exceeded!');\n    \n    // In a production system, you might want to:\n    // - Send alerts to administrators\n    // - Temporarily disable email sending\n    // - Switch to a backup email service\n    // - Log to external monitoring system\n    \n    if (process.env.NODE_ENV === 'production') {\n      // Log critical error for external monitoring\n      console.error('[EMAIL_MONITOR] ALERT: Email service quota exceeded - immediate attention required');\n    }\n  }\n}\n\n// Export singleton instance\nexport const emailServiceMonitor = new EmailServiceMonitor();\n\n// Schedule daily reset\nif (process.env.NODE_ENV === 'production') {\n  // Reset at midnight UTC\n  const now = new Date();\n  const tomorrow = new Date(now);\n  tomorrow.setUTCDate(tomorrow.getUTCDate() + 1);\n  tomorrow.setUTCHours(0, 0, 0, 0);\n  \n  const msUntilMidnight = tomorrow.getTime() - now.getTime();\n  \n  setTimeout(() => {\n    emailServiceMonitor.resetDailyStats();\n    \n    // Then reset every 24 hours\n    setInterval(() => {\n      emailServiceMonitor.resetDailyStats();\n    }, 24 * 60 * 60 * 1000);\n  }, msUntilMidnight);\n}"],"names":["EmailServiceMonitor","emailServiceMonitor","recentEvents","maxEvents","resetInterval","stats","totalSent","totalFailed","quotaUsed","quotaLimit","getQuotaLimit","errorsByType","successRate","averageResponseTime","lastResetTime","Date","now","recordSuccess","responseTime","event","type","timestamp","addEvent","updateStats","process","env","NODE_ENV","console","log","recordFailure","error","code","lastError","message","handleQuotaExceeded","getStats","checkForReset","getRecentEvents","limit","slice","getErrorSummary","recentErrors","filter","criticalErrors","totalErrors","isQuotaNearLimit","threshold","getQuotaUsagePercentage","Math","round","resetDailyStats","forceReset","getHealthStatus","issues","recommendations","status","push","toFixed","recentCriticalErrors","length","total","totalTime","reduce","sum","dailyLimit","parseInt","EMAIL_DAILY_QUOTA","tomorrow","setUTCDate","getUTCDate","setUTCHours","msUntilMidnight","getTime","setTimeout","setInterval"],"mappings":"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"}