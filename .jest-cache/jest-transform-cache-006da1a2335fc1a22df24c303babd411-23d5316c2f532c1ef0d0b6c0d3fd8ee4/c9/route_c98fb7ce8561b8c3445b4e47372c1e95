bfc77df507d4d420acdc8c4dcfe1947f
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get GET () {
        return GET;
    },
    get POST () {
        return POST;
    }
});
require("server-only");
const _server = require("next/server");
const _emailverificationcleanup = require("../../../../lib/services/email-verification-cleanup");
const _emailservicemonitor = require("../../../../lib/services/email-service-monitor");
const _middleware = require("../../../../lib/auth/middleware");
async function GET(request) {
    try {
        // Require authentication (in a real app, you'd also check for admin role)
        const { user } = await (0, _middleware.requireAuth)();
        // Get comprehensive system status
        const systemStatus = await _emailverificationcleanup.emailVerificationCleanupService.getSystemStatus();
        // Get detailed email service statistics
        const emailStats = _emailservicemonitor.emailServiceMonitor.getStats();
        const emailHealth = _emailservicemonitor.emailServiceMonitor.getHealthStatus();
        const recentEvents = _emailservicemonitor.emailServiceMonitor.getRecentEvents(50);
        const errorSummary = _emailservicemonitor.emailServiceMonitor.getErrorSummary();
        // Get cleanup statistics
        const cleanupStats = _emailverificationcleanup.emailVerificationCleanupService.getCleanupStats();
        const monitoringData = {
            timestamp: Date.now(),
            systemStatus,
            emailService: {
                stats: emailStats,
                health: emailHealth,
                recentEvents,
                errorSummary,
                quotaWarning: _emailservicemonitor.emailServiceMonitor.isQuotaNearLimit(0.8),
                quotaCritical: _emailservicemonitor.emailServiceMonitor.isQuotaNearLimit(0.95)
            },
            cleanup: cleanupStats,
            alerts: generateAlerts(systemStatus, emailHealth)
        };
        return _server.NextResponse.json(monitoringData);
    } catch (error) {
        console.error('Error fetching email verification monitoring data:', error);
        return _server.NextResponse.json({
            error: 'Failed to fetch monitoring data',
            details: error instanceof Error ? error.message : 'Unknown error'
        }, {
            status: 500
        });
    }
}
async function POST(request) {
    try {
        // Require authentication (in a real app, you'd also check for admin role)
        const { user } = await (0, _middleware.requireAuth)();
        const body = await request.json();
        const { action } = body;
        switch(action){
            case 'force-cleanup':
                const cleanupResult = await _emailverificationcleanup.emailVerificationCleanupService.forceCleanup();
                return _server.NextResponse.json({
                    success: true,
                    message: 'Cleanup completed successfully',
                    result: cleanupResult
                });
            case 'reset-email-stats':
                _emailservicemonitor.emailServiceMonitor.forceReset();
                return _server.NextResponse.json({
                    success: true,
                    message: 'Email service statistics reset successfully'
                });
            case 'get-error-details':
                const errorDetails = _emailservicemonitor.emailServiceMonitor.getErrorSummary();
                const recentEvents = _emailservicemonitor.emailServiceMonitor.getRecentEvents(200);
                return _server.NextResponse.json({
                    success: true,
                    errorDetails,
                    recentEvents
                });
            default:
                return _server.NextResponse.json({
                    error: 'Invalid action specified'
                }, {
                    status: 400
                });
        }
    } catch (error) {
        console.error('Error performing admin action:', error);
        return _server.NextResponse.json({
            error: 'Failed to perform admin action',
            details: error instanceof Error ? error.message : 'Unknown error'
        }, {
            status: 500
        });
    }
}
/**
 * Generate alerts based on system status
 */ function generateAlerts(systemStatus, emailHealth) {
    const alerts = [];
    const now = Date.now();
    // Email service alerts
    if (emailHealth.status === 'critical') {
        alerts.push({
            level: 'critical',
            message: 'Email service is in critical state',
            recommendation: emailHealth.recommendations[0],
            timestamp: now
        });
    } else if (emailHealth.status === 'warning') {
        alerts.push({
            level: 'warning',
            message: 'Email service requires attention',
            recommendation: emailHealth.recommendations[0],
            timestamp: now
        });
    }
    // Quota alerts
    if (systemStatus.emailService.quotaUsage >= 95) {
        alerts.push({
            level: 'critical',
            message: `Email quota critically high: ${systemStatus.emailService.quotaUsage}%`,
            recommendation: 'Immediate action required - consider upgrading plan or implementing throttling',
            timestamp: now
        });
    } else if (systemStatus.emailService.quotaUsage >= 80) {
        alerts.push({
            level: 'warning',
            message: `Email quota usage high: ${systemStatus.emailService.quotaUsage}%`,
            recommendation: 'Monitor usage closely and consider upgrading plan',
            timestamp: now
        });
    }
    // Success rate alerts
    if (systemStatus.emailService.successRate < 80) {
        alerts.push({
            level: 'critical',
            message: `Email success rate critically low: ${systemStatus.emailService.successRate.toFixed(1)}%`,
            recommendation: 'Check email service configuration and network connectivity',
            timestamp: now
        });
    } else if (systemStatus.emailService.successRate < 95) {
        alerts.push({
            level: 'warning',
            message: `Email success rate below optimal: ${systemStatus.emailService.successRate.toFixed(1)}%`,
            recommendation: 'Monitor email delivery and check for configuration issues',
            timestamp: now
        });
    }
    // Cleanup alerts
    const timeSinceLastCleanup = now - systemStatus.cleanup.lastCleanup;
    const hoursWithoutCleanup = timeSinceLastCleanup / (60 * 60 * 1000);
    if (hoursWithoutCleanup > 25) {
        alerts.push({
            level: 'warning',
            message: `Cleanup hasn't run for ${Math.round(hoursWithoutCleanup)} hours`,
            recommendation: 'Check cleanup service status and logs',
            timestamp: now
        });
    }
    // Rate limiting alerts
    if (systemStatus.rateLimits.securityEvents > 10) {
        alerts.push({
            level: 'warning',
            message: `High number of security events: ${systemStatus.rateLimits.securityEvents}`,
            recommendation: 'Review security logs for potential abuse',
            timestamp: now
        });
    }
    return alerts;
}

//# sourceMappingURL=data:application/json;base64,