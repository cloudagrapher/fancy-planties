9a3df4c3c9747da7898d40209a4bc1de
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get getEmailErrorMessage () {
        return getEmailErrorMessage;
    },
    get shouldRetryEmailOperation () {
        return shouldRetryEmailOperation;
    }
});
const _email = require("../services/email");
function getEmailErrorMessage(error) {
    if (error instanceof _email.EmailServiceError) {
        switch(error.code){
            case 'QUOTA_EXCEEDED':
                return 'Email service is temporarily unavailable. Please try again later or contact support.';
            case 'INVALID_EMAIL':
                return 'The email address appears to be invalid. Please check and try again.';
            case 'NETWORK_ERROR':
                return 'Network error occurred while sending email. Please check your connection and try again.';
            case 'API_ERROR':
            default:
                return 'Unable to send verification email at this time. Please try again in a few minutes.';
        }
    }
    if (error instanceof Error) {
        // Log the actual error for debugging but return generic message
        console.error('Unexpected email error:', error.message);
        return 'Unable to send verification email. Please try again later.';
    }
    return 'An unexpected error occurred. Please try again.';
}
function shouldRetryEmailOperation(error) {
    if (error instanceof _email.EmailServiceError) {
        // Don't retry on these errors
        return ![
            'INVALID_EMAIL',
            'QUOTA_EXCEEDED'
        ].includes(error.code);
    }
    // Retry on other errors
    return true;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9zdGVmYW5iZWtrZXIvcHJvamVjdHMvZmFuY3ktcGxhbnRpZXMvc3JjL2xpYi91dGlscy9lbWFpbC1lcnJvcnMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRW1haWxTZXJ2aWNlRXJyb3IgfSBmcm9tICdAL2xpYi9zZXJ2aWNlcy9lbWFpbCc7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRFbWFpbEVycm9yTWVzc2FnZShlcnJvcjogdW5rbm93bik6IHN0cmluZyB7XG4gIGlmIChlcnJvciBpbnN0YW5jZW9mIEVtYWlsU2VydmljZUVycm9yKSB7XG4gICAgc3dpdGNoIChlcnJvci5jb2RlKSB7XG4gICAgICBjYXNlICdRVU9UQV9FWENFRURFRCc6XG4gICAgICAgIHJldHVybiAnRW1haWwgc2VydmljZSBpcyB0ZW1wb3JhcmlseSB1bmF2YWlsYWJsZS4gUGxlYXNlIHRyeSBhZ2FpbiBsYXRlciBvciBjb250YWN0IHN1cHBvcnQuJztcbiAgICAgIGNhc2UgJ0lOVkFMSURfRU1BSUwnOlxuICAgICAgICByZXR1cm4gJ1RoZSBlbWFpbCBhZGRyZXNzIGFwcGVhcnMgdG8gYmUgaW52YWxpZC4gUGxlYXNlIGNoZWNrIGFuZCB0cnkgYWdhaW4uJztcbiAgICAgIGNhc2UgJ05FVFdPUktfRVJST1InOlxuICAgICAgICByZXR1cm4gJ05ldHdvcmsgZXJyb3Igb2NjdXJyZWQgd2hpbGUgc2VuZGluZyBlbWFpbC4gUGxlYXNlIGNoZWNrIHlvdXIgY29ubmVjdGlvbiBhbmQgdHJ5IGFnYWluLic7XG4gICAgICBjYXNlICdBUElfRVJST1InOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuICdVbmFibGUgdG8gc2VuZCB2ZXJpZmljYXRpb24gZW1haWwgYXQgdGhpcyB0aW1lLiBQbGVhc2UgdHJ5IGFnYWluIGluIGEgZmV3IG1pbnV0ZXMuJztcbiAgICB9XG4gIH1cblxuICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgIC8vIExvZyB0aGUgYWN0dWFsIGVycm9yIGZvciBkZWJ1Z2dpbmcgYnV0IHJldHVybiBnZW5lcmljIG1lc3NhZ2VcbiAgICBjb25zb2xlLmVycm9yKCdVbmV4cGVjdGVkIGVtYWlsIGVycm9yOicsIGVycm9yLm1lc3NhZ2UpO1xuICAgIHJldHVybiAnVW5hYmxlIHRvIHNlbmQgdmVyaWZpY2F0aW9uIGVtYWlsLiBQbGVhc2UgdHJ5IGFnYWluIGxhdGVyLic7XG4gIH1cblxuICByZXR1cm4gJ0FuIHVuZXhwZWN0ZWQgZXJyb3Igb2NjdXJyZWQuIFBsZWFzZSB0cnkgYWdhaW4uJztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNob3VsZFJldHJ5RW1haWxPcGVyYXRpb24oZXJyb3I6IHVua25vd24pOiBib29sZWFuIHtcbiAgaWYgKGVycm9yIGluc3RhbmNlb2YgRW1haWxTZXJ2aWNlRXJyb3IpIHtcbiAgICAvLyBEb24ndCByZXRyeSBvbiB0aGVzZSBlcnJvcnNcbiAgICByZXR1cm4gIVsnSU5WQUxJRF9FTUFJTCcsICdRVU9UQV9FWENFRURFRCddLmluY2x1ZGVzKGVycm9yLmNvZGUpO1xuICB9XG4gIFxuICAvLyBSZXRyeSBvbiBvdGhlciBlcnJvcnNcbiAgcmV0dXJuIHRydWU7XG59Il0sIm5hbWVzIjpbImdldEVtYWlsRXJyb3JNZXNzYWdlIiwic2hvdWxkUmV0cnlFbWFpbE9wZXJhdGlvbiIsImVycm9yIiwiRW1haWxTZXJ2aWNlRXJyb3IiLCJjb2RlIiwiRXJyb3IiLCJjb25zb2xlIiwibWVzc2FnZSIsImluY2x1ZGVzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztRQUVnQkE7ZUFBQUE7O1FBd0JBQztlQUFBQTs7O3VCQTFCa0I7QUFFM0IsU0FBU0QscUJBQXFCRSxLQUFjO0lBQ2pELElBQUlBLGlCQUFpQkMsd0JBQWlCLEVBQUU7UUFDdEMsT0FBUUQsTUFBTUUsSUFBSTtZQUNoQixLQUFLO2dCQUNILE9BQU87WUFDVCxLQUFLO2dCQUNILE9BQU87WUFDVCxLQUFLO2dCQUNILE9BQU87WUFDVCxLQUFLO1lBQ0w7Z0JBQ0UsT0FBTztRQUNYO0lBQ0Y7SUFFQSxJQUFJRixpQkFBaUJHLE9BQU87UUFDMUIsZ0VBQWdFO1FBQ2hFQyxRQUFRSixLQUFLLENBQUMsMkJBQTJCQSxNQUFNSyxPQUFPO1FBQ3RELE9BQU87SUFDVDtJQUVBLE9BQU87QUFDVDtBQUVPLFNBQVNOLDBCQUEwQkMsS0FBYztJQUN0RCxJQUFJQSxpQkFBaUJDLHdCQUFpQixFQUFFO1FBQ3RDLDhCQUE4QjtRQUM5QixPQUFPLENBQUM7WUFBQztZQUFpQjtTQUFpQixDQUFDSyxRQUFRLENBQUNOLE1BQU1FLElBQUk7SUFDakU7SUFFQSx3QkFBd0I7SUFDeEIsT0FBTztBQUNUIn0=